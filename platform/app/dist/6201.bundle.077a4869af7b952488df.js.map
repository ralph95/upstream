{"version":3,"file":"6201.bundle.077a4869af7b952488df.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-pmap/src/id.js","webpack:///../../../extensions/cornerstone-dicom-pmap/src/getSopClassHandlerModule.ts","webpack:///../../../extensions/cornerstone-dicom-pmap/src/index.tsx"],"sourcesContent":["import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\nconst SOPClassHandlerName = 'dicom-pmap';\r\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.${SOPClassHandlerName}`;\r\n\r\nexport { id, SOPClassHandlerId, SOPClassHandlerName };\r\n","import { utils, Types as OhifTypes } from '@ohif/core';\r\nimport i18n from '@ohif/i18n';\r\nimport { metaData, cache, utilities as csUtils, volumeLoader } from '@cornerstonejs/core';\r\nimport { adaptersPMAP } from '@cornerstonejs/adapters';\r\nimport { SOPClassHandlerId } from './id';\r\nimport { dicomLoaderService, VOLUME_LOADER_SCHEME } from '@ohif/extension-cornerstone';\r\nconst sopClassUids = ['1.2.840.10008.5.1.4.1.1.30'];\r\n\r\nfunction _getDisplaySetsFromSeries(\r\n  instances,\r\n  servicesManager: AppTypes.ServicesManager,\r\n  extensionManager\r\n) {\r\n  const instance = instances[0];\r\n\r\n  const {\r\n    StudyInstanceUID,\r\n    SeriesInstanceUID,\r\n    SOPInstanceUID,\r\n    SeriesDescription,\r\n    SeriesNumber,\r\n    SeriesDate,\r\n    SOPClassUID,\r\n    wadoRoot,\r\n    wadoUri,\r\n    wadoUriRoot,\r\n  } = instance;\r\n\r\n  const displaySet = {\r\n    // Parametric map use to have the same modality as its referenced volume but\r\n    // \"PMAP\" is used in the viewer even though this is not a valid DICOM modality\r\n    Modality: 'PMAP',\r\n    isReconstructable: true, // by default for now\r\n    displaySetInstanceUID: `pmap.${utils.guid()}`,\r\n    SeriesDescription,\r\n    SeriesNumber,\r\n    SeriesDate,\r\n    SOPInstanceUID,\r\n    SeriesInstanceUID,\r\n    StudyInstanceUID,\r\n    SOPClassHandlerId,\r\n    SOPClassUID,\r\n    referencedImages: null,\r\n    referencedSeriesInstanceUID: null,\r\n    referencedDisplaySetInstanceUID: null,\r\n    referencedVolumeURI: null,\r\n    referencedVolumeId: null,\r\n    isDerivedDisplaySet: true,\r\n    loadStatus: {\r\n      loading: false,\r\n      loaded: false,\r\n    },\r\n    sopClassUids,\r\n    instance,\r\n    instances: [instance],\r\n    wadoRoot,\r\n    wadoUriRoot,\r\n    wadoUri,\r\n    supportsWindowLevel: true,\r\n    label: SeriesDescription || `${i18n.t('Series')} ${SeriesNumber} - ${i18n.t('PMAP')}`,\r\n  };\r\n\r\n  const referencedSeriesSequence = instance.ReferencedSeriesSequence;\r\n\r\n  if (!referencedSeriesSequence) {\r\n    console.error('ReferencedSeriesSequence is missing for the parametric map');\r\n    return;\r\n  }\r\n\r\n  const referencedSeries = referencedSeriesSequence[0] || referencedSeriesSequence;\r\n\r\n  displaySet.referencedImages = instance.ReferencedSeriesSequence.ReferencedInstanceSequence;\r\n  displaySet.referencedSeriesInstanceUID = referencedSeries.SeriesInstanceUID;\r\n\r\n  // Does not get the referenced displaySet during parametric displaySet creation\r\n  // because it is still not available (getDisplaySetByUID returns `undefined`).\r\n  displaySet.getReferenceDisplaySet = () => {\r\n    const { displaySetService } = servicesManager.services;\r\n\r\n    if (displaySet.referencedDisplaySetInstanceUID) {\r\n      return displaySetService.getDisplaySetByUID(displaySet.referencedDisplaySetInstanceUID);\r\n    }\r\n\r\n    const referencedDisplaySets = displaySetService.getDisplaySetsForSeries(\r\n      displaySet.referencedSeriesInstanceUID\r\n    );\r\n\r\n    if (!referencedDisplaySets || referencedDisplaySets.length === 0) {\r\n      throw new Error('Referenced displaySet is missing for the parametric map');\r\n    }\r\n\r\n    const referencedDisplaySet = referencedDisplaySets[0];\r\n\r\n    displaySet.referencedDisplaySetInstanceUID = referencedDisplaySet.displaySetInstanceUID;\r\n\r\n    return referencedDisplaySet;\r\n  };\r\n\r\n  // Does not get the referenced volumeId during parametric displaySet creation because the\r\n  // referenced displaySet is still not available  (getDisplaySetByUID returns `undefined`).\r\n  displaySet.getReferencedVolumeId = () => {\r\n    if (displaySet.referencedVolumeId) {\r\n      return displaySet.referencedVolumeId;\r\n    }\r\n\r\n    const referencedDisplaySet = displaySet.getReferenceDisplaySet();\r\n    const referencedVolumeURI = referencedDisplaySet.displaySetInstanceUID;\r\n    const referencedVolumeId = `${VOLUME_LOADER_SCHEME}:${referencedVolumeURI}`;\r\n\r\n    displaySet.referencedVolumeURI = referencedVolumeURI;\r\n    displaySet.referencedVolumeId = referencedVolumeId;\r\n\r\n    return referencedVolumeId;\r\n  };\r\n\r\n  displaySet.load = async ({ headers }) =>\r\n    await _load(displaySet, servicesManager, extensionManager, headers);\r\n\r\n  return [displaySet];\r\n}\r\n\r\nconst getRangeFromPixelData = (pixelData: Float32Array) => {\r\n  let lowest = pixelData[0];\r\n  let highest = pixelData[0];\r\n\r\n  for (let i = 1; i < pixelData.length; i++) {\r\n    if (pixelData[i] < lowest) {\r\n      lowest = pixelData[i];\r\n    }\r\n    if (pixelData[i] > highest) {\r\n      highest = pixelData[i];\r\n    }\r\n  }\r\n\r\n  return [lowest, highest];\r\n};\r\n\r\nasync function _load(\r\n  displaySet,\r\n  servicesManager: AppTypes.ServicesManager,\r\n  extensionManager,\r\n  headers\r\n) {\r\n  const volumeId = `${VOLUME_LOADER_SCHEME}:${displaySet.displaySetInstanceUID}`;\r\n  const volumeLoadObject = cache.getVolumeLoadObject(volumeId);\r\n\r\n  if (volumeLoadObject) {\r\n    return volumeLoadObject.promise;\r\n  }\r\n\r\n  displaySet.loading = true;\r\n  displaySet.isLoaded = false;\r\n\r\n  // We don't want to fire multiple loads, so we'll wait for the first to finish\r\n  // and also return the same promise to any other callers.\r\n  const promise = _loadParametricMap({\r\n    extensionManager,\r\n    displaySet,\r\n    headers,\r\n  });\r\n\r\n  cache.putVolumeLoadObject(volumeId, { promise }).catch(err => {\r\n    throw err;\r\n  });\r\n\r\n  promise\r\n    .then(() => {\r\n      displaySet.loading = false;\r\n      displaySet.isLoaded = true;\r\n      // Broadcast that loading is complete\r\n      servicesManager.services.segmentationService._broadcastEvent(\r\n        servicesManager.services.segmentationService.EVENTS.SEGMENTATION_LOADING_COMPLETE,\r\n        {\r\n          pmapDisplaySet: displaySet,\r\n        }\r\n      );\r\n    })\r\n    .catch(err => {\r\n      displaySet.loading = false;\r\n      displaySet.isLoaded = false;\r\n      throw err;\r\n    });\r\n\r\n  return promise;\r\n}\r\n\r\nasync function _loadParametricMap({ displaySet, headers }: withAppTypes) {\r\n  const arrayBuffer = await dicomLoaderService.findDicomDataPromise(displaySet, null, headers);\r\n  const referencedVolumeId = displaySet.getReferencedVolumeId();\r\n  const cachedReferencedVolume = cache.getVolume(referencedVolumeId);\r\n\r\n  // Parametric map can be loaded only if its referenced volume exists otherwise it will fail\r\n  if (!cachedReferencedVolume) {\r\n    throw new Error(\r\n      'Referenced Volume is missing for the PMAP, and stack viewport PMAP is not supported yet'\r\n    );\r\n  }\r\n\r\n  const { imageIds } = cachedReferencedVolume;\r\n  const results = await adaptersPMAP.Cornerstone3D.ParametricMap.generateToolState(\r\n    imageIds,\r\n    arrayBuffer,\r\n    metaData\r\n  );\r\n  const { pixelData } = results;\r\n  const TypedArrayConstructor = pixelData.constructor;\r\n  const paramMapId = displaySet.displaySetInstanceUID;\r\n\r\n  const derivedVolume = await volumeLoader.createAndCacheDerivedVolume(referencedVolumeId, {\r\n    volumeId: paramMapId,\r\n    targetBuffer: {\r\n      type: TypedArrayConstructor.name,\r\n    },\r\n  });\r\n\r\n  const newPixelData = new TypedArrayConstructor(pixelData.length);\r\n  for (let i = 0; i < pixelData.length; i++) {\r\n    newPixelData[i] = pixelData[i] * 100;\r\n  }\r\n  derivedVolume.voxelManager.setCompleteScalarDataArray(newPixelData);\r\n  const range = getRangeFromPixelData(newPixelData);\r\n  const windowLevel = csUtils.windowLevel.toWindowLevel(range[0], range[1]);\r\n\r\n  derivedVolume.metadata.voiLut = [windowLevel];\r\n  derivedVolume.loadStatus = { loaded: true };\r\n\r\n  return derivedVolume;\r\n}\r\n\r\nfunction getSopClassHandlerModule(params: OhifTypes.Extensions.ExtensionParams) {\r\n  const { servicesManager, extensionManager } = params;\r\n  const getDisplaySetsFromSeries = instances => {\r\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: 'dicom-pmap',\r\n      sopClassUids,\r\n      getDisplaySetsFromSeries,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getSopClassHandlerModule;\r\n","import { id } from './id';\r\nimport React from 'react';\r\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\r\n\r\nconst Component = React.lazy(() => {\r\n  return import(/* webpackPrefetch: true */ './viewports/OHIFCornerstonePMAPViewport');\r\n});\r\n\r\nconst OHIFCornerstonePMAPViewport = props => {\r\n  return (\r\n    <React.Suspense fallback={<div>Loading...</div>}>\r\n      <Component {...props} />\r\n    </React.Suspense>\r\n  );\r\n};\r\n\r\n/**\r\n * You can remove any of the following modules if you don't need them.\r\n */\r\nconst extension = {\r\n  id,\r\n  getViewportModule({ servicesManager, extensionManager, commandsManager }) {\r\n    const ExtendedOHIFCornerstonePMAPViewport = props => {\r\n      return (\r\n        <OHIFCornerstonePMAPViewport\r\n          servicesManager={servicesManager}\r\n          extensionManager={extensionManager}\r\n          commandsManager={commandsManager}\r\n          {...props}\r\n        />\r\n      );\r\n    };\r\n\r\n    return [{ name: 'dicom-pmap', component: ExtendedOHIFCornerstonePMAPViewport }];\r\n  },\r\n  getSopClassHandlerModule,\r\n};\r\n\r\nexport default extension;\r\n"],"names":["id","packageJson","SOPClassHandlerId","sopClassUids","_getDisplaySetsFromSeries","instances","servicesManager","extensionManager","instance","StudyInstanceUID","SeriesInstanceUID","SOPInstanceUID","SeriesDescription","SeriesNumber","SeriesDate","SOPClassUID","wadoRoot","wadoUri","wadoUriRoot","displaySet","Modality","isReconstructable","displaySetInstanceUID","utils","guid","referencedImages","referencedSeriesInstanceUID","referencedDisplaySetInstanceUID","referencedVolumeURI","referencedVolumeId","isDerivedDisplaySet","loadStatus","loading","loaded","supportsWindowLevel","label","i18n","t","referencedSeriesSequence","ReferencedSeriesSequence","console","error","referencedSeries","ReferencedInstanceSequence","getReferenceDisplaySet","displaySetService","services","getDisplaySetByUID","referencedDisplaySets","getDisplaySetsForSeries","length","Error","referencedDisplaySet","getReferencedVolumeId","VOLUME_LOADER_SCHEME","load","async","headers","volumeId","volumeLoadObject","cache","getVolumeLoadObject","promise","isLoaded","arrayBuffer","dicomLoaderService","findDicomDataPromise","cachedReferencedVolume","getVolume","imageIds","results","adaptersPMAP","Cornerstone3D","ParametricMap","generateToolState","metaData","pixelData","TypedArrayConstructor","constructor","paramMapId","derivedVolume","volumeLoader","targetBuffer","type","name","newPixelData","i","voxelManager","setCompleteScalarDataArray","range","getRangeFromPixelData","windowLevel","csUtils","metadata","voiLut","_loadParametricMap","putVolumeLoadObject","catch","err","then","segmentationService","_broadcastEvent","EVENTS","SEGMENTATION_LOADING_COMPLETE","pmapDisplaySet","_load","lowest","highest","params","getDisplaySetsFromSeries","Component","React","OHIFCornerstonePMAPViewport","props","fallback","getViewportModule","commandsManager","component","_extends","getSopClassHandlerModule"],"sourceRoot":""}