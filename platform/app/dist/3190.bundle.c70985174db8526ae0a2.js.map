{"version":3,"file":"3190.bundle.c70985174db8526ae0a2.js","mappings":"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AK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,K,0EC7PnB,MAAMyF,EAAmB,mBAwBzB,SAASC,EAAWC,EAAYC,GAC5B,GAAKvkG,EAAA,GAAMwkG,aAAaF,GAGxB,OAAItkG,EAAA,GAAMwkG,aAAaF,GAAYC,GACxBvkG,EAAA,GAAMwkG,aAAaF,GAAYC,GAAUE,YADpD,CAGJ,CACA,SAASC,EAAWC,EAAiBL,EAAYM,EAASL,GACtD,IAAKvkG,EAAA,GAAMwkG,aAAaF,GACpB,OAAO,KAEXtkG,EAAA,GAAMwkG,aAAaF,GAAYC,GAAY,CACvCM,SAAS,EACTJ,OAAQG,GAEZD,EAAgB1+F,YAAY2+F,EAChC,CACA,SAASE,EAAeR,EAAYC,GAC3BvkG,EAAA,GAAMwkG,aAAaF,IAGpBtkG,EAAA,GAAMwkG,aAAaF,GAAYC,KAC/BvkG,EAAA,GAAMwkG,aAAaF,GAAYC,GAAUM,SAAU,EAE3D,CACA,SAASE,EAAeJ,EAAiBL,GAChCtkG,EAAA,GAAMwkG,aAAaF,IAGxBvuH,OAAO4B,KAAKqoB,EAAA,GAAMwkG,aAAaF,IAAaltH,QAASmtH,IACjD,MAAMS,EAAahlG,EAAA,GAAMwkG,aAAaF,GAAYC,IAC7CS,EAAWH,SAAWG,EAAWP,SAClCE,EAAgB17C,YAAY+7C,EAAWP,eAChCzkG,EAAA,GAAMwkG,aAAaF,GAAYC,KAGlD,CACA,QA7DA,SAA6Bj/F,GACzB,MAAM7zB,GAAiB,IAAAy/B,mBAAkB5L,IACnC,WAAED,EAAU,kBAAEhB,GAAsB5yB,EACpC6yH,EAAa,GAAGj/F,KAAchB,IAC9BsgG,EAaV,SAAsBr/F,GAClB,MAAM0jD,EAAkB,IAAIo7C,IACtBa,EAAqB3/F,EAAQkjD,cAAcQ,GAC3Cqb,EAAW4gC,GAAoBz8C,cAAc,uBACnD,OAAO6b,CACX,CAlB4B6gC,CAAa5/F,GAIrC,OAHAvvB,OAAO4B,KAAKqoB,EAAA,GAAMwkG,aAAaF,IAAaltH,QAASmtH,IACjDvkG,EAAA,GAAMwkG,aAAaF,GAAYC,GAAUM,SAAU,IAEhD,CACHF,gBAAiBA,EACjBQ,sBAAuBnlG,EAAA,GAAMwkG,aAC7BH,WAAYA,EAAW19G,KAAKxQ,KAAMmuH,GAClCI,WAAYA,EAAW/9G,KAAKxQ,KAAMwuH,EAAiBL,GACnDQ,eAAgBA,EAAen+G,KAAKxQ,KAAMmuH,GAC1CS,eAAgBA,EAAep+G,KAAKxQ,KAAMwuH,EAAiBL,GAEnE,ECbA,QALA,SAAch/F,EAAS8/F,GACnB,MAAMj3D,EAAmB,EAAoB7oC,GAC7C8/F,EAAGj3D,GACHA,EAAiB42D,gBACrB,C,qFCoCA,QAtCA,SAAoB52D,EAAkBtD,EAAesH,EAAWplD,EAAQ8uB,EAAQthC,EAAU,CAAC,EAAG69D,EAAS,IACnG,MAAM,MAAE7lE,EAAK,KAAE0V,EAAI,MAAElV,EAAK,UAAEq3D,EAAS,SAAE0H,EAAQ,YAAEknB,EAAW,cAAEurB,GAAmBxuG,OAAOm3E,OAAO,CAC3F36E,MAAO,iBACP0V,KAAM,cACNlV,MAAO,IACP++D,cAAU39D,EACVi2D,eAAWj2D,EACXowG,cAAe,EACfvrB,YAAa,GACdz+E,GACG8qH,EAAcj7D,GAAar3D,EAE3BuyH,GAAc,OAASz6D,EAAe,SAAUsH,GAChDozD,EAAwBp3D,EAAiBk2D,WAAWiB,GACpDE,EAAa,CACfvpF,GAAI,GAAGlvB,EAAO,KACdmvB,GAAI,GAAGnvB,EAAO,KACdI,EAAG,GAAG0uB,IACN4pF,OAAQlzH,EACR0V,OACA,eAAgBo9G,EAChB,mBAAoBvzD,EACpB,eAAgBknB,EAChB,iBAAkBurB,GAEtB,GAAIghB,GACA,OAAyBC,EAAYD,GACrCp3D,EAAiB22D,eAAeQ,OAE/B,CACD,MAAMI,EAAmBngG,SAASogG,gBAnBxB,6BAmB+C,UAC1C,KAAXvtD,GACAstD,EAAiBv/F,aAAa,UAAWiyC,IAE7C,OAAwBotD,EAAYE,GACpCv3D,EAAiBu2D,WAAWgB,EAAkBJ,EAClD,CACJ,C,qFCKA,QA1CA,SAAkCn3D,EAAkBtD,EAAe2gC,EAAYtzB,EAAmB39D,EAAU,CAAC,EAAG69D,EAAS,IACrH,MAAM,MAAE7lE,EAAK,MAAEQ,EAAK,UAAEq3D,EAAS,SAAE0H,GAAa/7D,OAAOm3E,OAAO,CACxD36E,MAAO,iBACPQ,MAAO,IACPq3D,eAAWj2D,EACX29D,cAAU39D,GACXoG,GACG8qH,EAAcj7D,GAAar3D,EAE3BuyH,GAAc,OAASz6D,EAAe,UAAW2gC,GACjDo6B,EAAkBz3D,EAAiBk2D,WAAWiB,IAC7CzoC,EAAQ/xE,EAAK2tD,EAAM4iB,GAASnjB,EAC7B6xB,EAAI32F,KAAK47C,MAAMypB,EAAK,GAAK4iB,EAAM,GAAI5iB,EAAK,GAAK4iB,EAAM,IACnD2O,EAAI52F,KAAK47C,MAAMlkC,EAAI,GAAK+xE,EAAO,GAAI/xE,EAAI,GAAK+xE,EAAO,IACnD5pF,EAA8D,IAArDG,KAAKi5C,MAAMosB,EAAK,GAAK4iB,EAAM,GAAI5iB,EAAK,GAAK4iB,EAAM,IAAajoF,KAAKC,GAC1E0Z,EAAS,EAAE0rD,EAAK,GAAK4iB,EAAM,IAAM,GAAIvwE,EAAI,GAAK+xE,EAAO,IAAM,GAG3D2oC,EAAa,CACfvpF,GAAI,GAAGlvB,EAAO,KACdmvB,GAAI,GAAGnvB,EAAO,KACd84G,GAAI,GALQ97B,EAAI,IAMhB+7B,GAAI,GALQ97B,EAAI,IAMhBy7B,OAAQlzH,EACR0V,KAAM,cACNrV,UAAW,UAAUK,KAAS8Z,EAAO,MAAMA,EAAO,MAClD,eAAgBs4G,EAChB,mBAAoBvzD,GAExB,GAAI8zD,GACA,OAAyBJ,EAAYI,GACrCz3D,EAAiB22D,eAAeQ,OAE/B,CACD,MAAMS,EAAoBxgG,SAASogG,gBA1BzB,6BA0BgD,WAC3C,KAAXvtD,GACA2tD,EAAkB5/F,aAAa,UAAWiyC,IAE9C,OAAwBotD,EAAYO,GACpC53D,EAAiBu2D,WAAWqB,EAAmBT,EACnD,CACJ,C,+DCtCA,QALA,SAAqBn3D,EAAkBtD,EAAe0hB,EAAgB0rB,EAAc19F,EAAU,CAAC,GAC3F09F,EAAa7gG,QAAQ,CAAC69D,EAAQp1D,MAC1B,OAAWsuD,EAAkBtD,EAAe0hB,EAAgBtX,EAAQ16D,EAASsF,IAErF,C,oFCoBA,QAvBA,SAAkBsuD,EAAkBtD,EAAem7D,EAASC,EAAwBC,EAAUn/B,EAAaxsF,EAAU,CAAC,GAClH,MAAM1I,EAAQo0H,EAAuBlvH,OAAS,GACxC,EAAAovH,EAAA,GAAiBF,EAAwBC,GACzCA,EACAE,EASV,SAA4Br/B,GACxB,MAAQtzF,EAAGglE,EAAM9kE,EAAGmX,EAAG,OAAE9X,EAAM,MAAED,GAAUg0F,EACrCs/B,EAAYtzH,EAAQ,EACpBuzH,EAAatzH,EAAS,EAK5B,MAAO,CAJW,CAACylE,EAAO4tD,EAAWv7G,GAClB,CAAC2tD,EAAM3tD,EAAMw7G,GACX,CAAC7tD,EAAO4tD,EAAWv7G,EAAM9X,GAC1B,CAACylE,EAAO1lE,EAAO+X,EAAMw7G,GAE7C,CAlB8BC,CAAmBx/B,GACvC5+E,GAAM,EAAAg+G,EAAA,GAAiBC,EAAmBv0H,GAC1Cg2G,EAAgB9xG,OAAOm3E,OAAO,CAChC36E,MAAO,mBACP63D,UAAW,IACX0H,SAAU,OACXv3D,IACH,EAAAq3D,EAAA,GAASzD,EAAkBtD,EAAe,QAAQm7D,IAAWn0H,EAAOsW,EAAK0/F,EAC7E,ECAA,QAZA,SAA2B15C,EAAkBtD,EAAes6B,EAAYwB,EAAWG,EAAiBm/B,EAAwBtrC,EAASpgF,EAAU,CAAC,GAC5I,MAAMstG,EAAgB9xG,OAAOm3E,OAAO,CAChCxO,aAAc,IACd8nD,UAAW,CACP/yH,GAAG,EACHE,GAAG,IAER4G,GACGksH,GAAoB,EAAArnC,EAAA,GAAYjxB,EAAkBtD,EAAes6B,EAAYwB,EAAWG,EAAiB+gB,GAE/G,OADA,EAAS15C,EAAkBtD,EAAes6B,EAAY8gC,EAAwBn/B,EAAiB2/B,EAAmB5e,GAC3G4e,CACX,C,wECXe,SAASnuD,EAASnK,EAAkBtD,EAAewN,EAAcxmE,EAAOsW,EAAK5N,EAAU,CAAC,EAAG69D,EAAS,IAC/G,MAAMyc,EAAU,CAAChjF,EAAM,GAAIA,EAAM,IAC3B21B,EAAW,CAACrf,EAAI,GAAItW,EAAM,IAC1B41B,EAAa,CAAC51B,EAAM,GAAIsW,EAAI,IAC5B2sE,EAAc,CAAC3sE,EAAI,GAAIA,EAAI,KACjC,OAAsBgmD,EAAkBtD,EAAewN,EAAc,CAACwc,EAASrtD,EAAUC,EAAYqtD,GAAcv6E,EAAS69D,EAChI,C,4bCPe,SAAS2vB,EAAW55B,EAAkBtD,EAAei9B,EAAWj2F,EAAOsW,EAAK5N,EAAU,CAAC,GAClG,GAAIoY,MAAM9gB,EAAM,KAAO8gB,MAAM9gB,EAAM,KAAO8gB,MAAMxK,EAAI,KAAOwK,MAAMxK,EAAI,IACjE,OAEJ,MAAM,MAAE5V,EAAK,MAAEQ,EAAK,UAAEq3D,EAAS,SAAE0H,GAAa/7D,OAAOm3E,OAAO,CACxD36E,MAAO,iBACPQ,MAAO,IACPq3D,eAAWj2D,EACX29D,cAAU39D,GACXoG,GACGmsH,EAAOv+G,EAAI,IAAMtW,EAAM,GAAKsW,EAAI,IAAM,EACtCw+G,EAAe,CAACD,EAAM70H,EAAM,IAC5B+0H,EAAgB,CAACF,EAAMv+G,EAAI,IAC3Bg0F,EAAY,CACdtqG,MAAOA,EACPsW,IAAKw+G,GAEHvqB,EAAa,CACfvqG,MAAO80H,EACPx+G,IAAKy+G,GAEHC,EAAY,CACdh1H,MAAO+0H,EACPz+G,IAAKA,IAET,EAAAypD,EAAA,GAASzD,EAAkBtD,EAAe,IAAKsxC,EAAUtqG,MAAOsqG,EAAUh0F,IAAK,CAC3E5V,QACAQ,QACAq3D,YACA0H,cAEJ,EAAAF,EAAA,GAASzD,EAAkBtD,EAAe,IAAKuxC,EAAWvqG,MAAOuqG,EAAWj0F,IAAK,CAC7E5V,QACAQ,QACAq3D,YACA0H,cAEJ,EAAAF,EAAA,GAASzD,EAAkBtD,EAAe,IAAKg8D,EAAUh1H,MAAOg1H,EAAU1+G,IAAK,CAC3E5V,QACAQ,QACAq3D,YACA0H,YAER,C,2DCiBA,QA1DA,SAAiB3D,EAAkBtD,EAAeo3C,EAAQl1F,EAAQqiC,EAAaC,EAAaT,EAAYC,EAAUt0C,EAAU,CAAC,EAAG69D,EAAS,GAAI0uD,GACzI,MAAM,MAAEv0H,EAAK,KAAE0V,EAAI,MAAElV,EAAK,UAAEq3D,EAAS,SAAE0H,EAAQ,YAAEknB,EAAW,cAAEurB,GAAmBxuG,OAAOm3E,OAAO,CAC3F36E,MAAO,iBACP0V,KAAM,cACNlV,MAAO,IACP++D,cAAU39D,EACVi2D,eAAWj2D,EACXowG,cAAe,EACfvrB,YAAa,GACdz+E,GACG8qH,EAAcj7D,GAAar3D,EAE3BuyH,GAAc,EAAAyB,EAAA,GAASl8D,EAAe,MAAOo3C,GAC7C+kB,EAAqB74D,EAAiBk2D,WAAWiB,GACjD2B,EAAYr4E,EAAax7C,KAAKC,GAAM,IACpC6zH,EAAUr4E,EAAWz7C,KAAKC,GAAM,IAChC8zH,EAAUp6G,EAAO,GACjBq6G,EAAUr6G,EAAO,GACjBs6G,EAAcF,EAAU93E,EAAcj8C,KAAK66F,IAAIg5B,GAC/CK,EAAcF,EAAU/3E,EAAcj8C,KAAK86F,IAAI+4B,GAC/CM,EAAYJ,EAAU93E,EAAcj8C,KAAK66F,IAAIi5B,GAC7CM,EAAYJ,EAAU/3E,EAAcj8C,KAAK86F,IAAIg5B,GAC7CO,EAAcN,EAAU/3E,EAAch8C,KAAK66F,IAAIg5B,GAC/CS,EAAcN,EAAUh4E,EAAch8C,KAAK86F,IAAI+4B,GAG/CU,EAAe94E,EAAWD,GAAc,IAAM,EAAI,EACxD,IAAIg5E,EAAW,KAAKP,KAAeC,IACnCM,GAAY,MAAMv4E,KAAeA,OAAiBs4E,OAAkBJ,KAAaC,IACjFI,GAAY,MALMT,EAAU/3E,EAAch8C,KAAK66F,IAAIi5B,MACjCE,EAAUh4E,EAAch8C,KAAK86F,IAAIg5B,KAKnDU,GAAY,MAAMx4E,KAAeA,OAAiBu4E,OAAkBF,KAAeC,IACnFE,GAAY,KACZ,MAAMpC,EAAa,CACf13E,EAAG85E,EACHnC,OAAQlzH,EACR0V,OACA,eAAgBo9G,EAChB,mBAAoBvzD,EACpB,eAAgBknB,EAChB,iBAAkBurB,EAClB,iBAAkB,UAEtB,GAAIyiB,GACA,EAAAa,EAAA,GAAyBrC,EAAYwB,GACrC74D,EAAiB22D,eAAeQ,OAE/B,CACD,MAAMwC,EAAgBviG,SAASogG,gBApCrB,6BAoC4C,QACvC,KAAXvtD,GACA0vD,EAAc3hG,aAAa,UAAWiyC,QAE3BjkE,IAAX2yH,IACAgB,EAAcjiG,MAAMihG,OAASA,EAAO3vG,aAExC,EAAA4wG,EAAA,GAAwBvC,EAAYsC,GACpC35D,EAAiBu2D,WAAWoD,EAAexC,EAC/C,CACJ,E,+CC3DA,MAAM0C,EAAQ,6BACC,SAASxtB,EAAUrsC,EAAkBtD,EAAe0vC,EAAU1oG,EAAOsW,EAAK5N,EAAU,CAAC,GAChG,GAAIoY,MAAM9gB,EAAM,KAAO8gB,MAAM9gB,EAAM,KAAO8gB,MAAMxK,EAAI,KAAOwK,MAAMxK,EAAI,IACjE,OAEJ,MAAM,UAAEsyF,GAAY,EAAK,MAAEloG,EAAQ,iBAAgB,WAAE+nG,EAAa,IAAQ//F,EAC1E,IAAKkgG,EAED,YAiCR,SAAyBtsC,EAAkBtD,EAAe0vC,EAAU1oG,EAAOsW,EAAK5N,EAAU,CAAC,GACvF,MAAM,MAAEhI,EAAQ,iBAAgB,MAAEQ,EAAQ,EAAC,UAAEq3D,EAAS,SAAE0H,GAAav3D,EAC/D0tH,EAAa,GACbh1H,EAAQG,KAAKi5C,MAAMlkC,EAAI,GAAKtW,EAAM,GAAIsW,EAAI,GAAKtW,EAAM,IACrDsqG,EAAY,CACdtqG,MAAO,CACHsW,EAAI,GAAK8/G,EAAa70H,KAAK66F,IAAIh7F,EAAQG,KAAKC,GAAK,GACjD8U,EAAI,GAAK8/G,EAAa70H,KAAK86F,IAAIj7F,EAAQG,KAAKC,GAAK,IAErD8U,IAAKA,GAEHi0F,EAAa,CACfvqG,MAAO,CACHsW,EAAI,GAAK8/G,EAAa70H,KAAK66F,IAAIh7F,EAAQG,KAAKC,GAAK,GACjD8U,EAAI,GAAK8/G,EAAa70H,KAAK86F,IAAIj7F,EAAQG,KAAKC,GAAK,IAErD8U,IAAKA,IAET,EAAAypD,EAAA,GAASzD,EAAkBtD,EAAe0vC,EAAU1oG,EAAOsW,EAAK,CAC5D5V,QACAQ,QACAq3D,YACA0H,cAEJ,EAAAF,EAAA,GAASzD,EAAkBtD,EAAe,IAAKsxC,EAAUtqG,MAAOsqG,EAAUh0F,IAAK,CAC3E5V,QACAQ,QACAq3D,YACA0H,cAEJ,EAAAF,EAAA,GAASzD,EAAkBtD,EAAe,IAAKuxC,EAAWvqG,MAAOuqG,EAAWj0F,IAAK,CAC7E5V,QACAQ,QACAq3D,YACA0H,YAER,CAtEQo2D,CAAgB/5D,EAAkBtD,EAAe0vC,EAAU1oG,EAAOsW,EAAK5N,GAG3E,MAEM4tH,EAAe,GADA,SAASt9D,OADdsD,EAAiBw2D,gBAAgBnlH,KAG3C4oH,EAAOj6D,EAAiBw2D,gBAAgBn8C,cAAc,QAC5D,IAAI6/C,EAAcD,EAAK5/C,cAAc,IAAI2/C,KACzC,GAAKE,EAeA,CACDA,EAAYliG,aAAa,cAAe,GAAGm0E,KAC3C+tB,EAAYliG,aAAa,eAAgB,GAAGm0E,KAC5C,MAAMguB,EAAYD,EAAY7/C,cAAc,QACxC8/C,GACAA,EAAUniG,aAAa,OAAQ5zB,EAEvC,KAtBkB,CACd81H,EAAc9iG,SAASogG,gBAAgBqC,EAAO,UAC9CK,EAAYliG,aAAa,KAAMgiG,GAC/BE,EAAYliG,aAAa,UAAW,aACpCkiG,EAAYliG,aAAa,OAAQ,KACjCkiG,EAAYliG,aAAa,OAAQ,KACjCkiG,EAAYliG,aAAa,cAAe,GAAGm0E,KAC3C+tB,EAAYliG,aAAa,eAAgB,GAAGm0E,KAC5C+tB,EAAYliG,aAAa,SAAU,QACnC,MAAMmiG,EAAY/iG,SAASogG,gBAAgBqC,EAAO,QAClDM,EAAUniG,aAAa,IAAK,yBAC5BmiG,EAAUniG,aAAa,OAAQ5zB,GAC/B81H,EAAYpiG,YAAYqiG,GACxBF,EAAKniG,YAAYoiG,EACrB,CASA9tH,EAAQguH,YAAcJ,GACtB,EAAAv2D,EAAA,GAASzD,EAAkBtD,EAAe0vC,EAAU1oG,EAAOsW,EAAK5N,EACpE,CCtCe,SAASygH,EAAkB7sD,EAAkBtD,EAAewN,EAAcxmE,EAAOsW,EAAK5N,EAAU,CAAC,GAC5G,MAAM,MAAEhI,EAAOQ,MAAOy1H,EAAM,UAAEp+D,EAAS,SAAE0H,GAAc/7D,OAAOm3E,OAAO,CACjE36E,MAAO,iBACPQ,MAAO,IACPq3D,eAAWj2D,EACX29D,cAAU39D,GACXoG,GACG8qH,EAAcj7D,GAAao+D,EAE3BlD,GAAc,EAAAyB,EAAA,GAASl8D,EAAe,OAAQwN,GAC9CowD,EAAet6D,EAAiBk2D,WAAWiB,GAC3C5xH,EAAO,CAACN,KAAKa,IAAIpC,EAAM,GAAIsW,EAAI,IAAK/U,KAAKa,IAAIpC,EAAM,GAAIsW,EAAI,KAC3DpV,EAAQK,KAAK6e,IAAIpgB,EAAM,GAAKsW,EAAI,IAChCnV,EAASI,KAAK6e,IAAIpgB,EAAM,GAAKsW,EAAI,IACjCq9G,EAAa,CACf/xH,EAAG,GAAGC,EAAK,KACXC,EAAG,GAAGD,EAAK,KACXX,MAAO,GAAGA,IACVC,OAAQ,GAAGA,IACXyyH,OAAQlzH,EACR0V,KAAM,QACN,eAAgBo9G,EAChB,mBAAoBvzD,GAExB,GAAI22D,GACA,OAA0BjD,EAAYiD,GACtCt6D,EAAiB22D,eAAeQ,OAE/B,CACD,MAAMoD,EAAiBnjG,SAASogG,gBArBtB,6BAqB6C,SACvD,OAAyBH,EAAYkD,GACrCv6D,EAAiBu2D,WAAWgE,EAAgBpD,EAChD,CACJ,C,+BCpCA,IAAI37E,E,iBACJ,SAAWA,GACPA,EAAyB,YAAI,cAC7BA,EAA4B,eAAI,iBAChCA,EAA0B,aAAI,eAC9BA,EAA0B,aAAI,eAC9BA,EAAuB,UAAI,YAC3BA,EAAkC,qBAAI,uBACtCA,EAAqB,QAAI,UACzBA,EAAuC,0BAAI,4BAC3CA,EAAyB,YAAI,aAChC,CAVD,CAUGA,IAAgBA,EAAc,CAAC,IAClC,S,+BCZA,IAAIg/E,E,iBACJ,SAAWA,GACPA,EAAU,GAAI,KACdA,EAAY,KAAI,OAChBA,EAAY,KAAI,OAChBA,EAAa,MAAI,OACpB,CALD,CAKGA,IAAUA,EAAQ,CAAC,G,2NCsBY,IAAIhhH,I,kPCjBtC,MAAMihH,EAAY,CACd,CAAC,IAAgBp2C,UAAW,KAC5B,CAAC,IAAgBqlC,SAAU,IAC3B,CAAC,IAAgBE,SAAU,MAEzB8Q,EAAwB,IAAsC/uE,SA4IpE,SAASgvE,EAA0BzjG,GAC/B0jG,EAA4BC,+BAA+B3jG,EAC/D,CAIA,MAAM0jG,EAA8B,IAjJpC,MACI,WAAAnzH,GACIO,KAAK8yH,aAAe,IAAIp3F,IACxB17B,KAAK+yH,oBAAsB,GAC3B/yH,KAAKgzH,oBAAqB,EAC1BhzH,KAAKizH,sBAAwB,KAC7BjzH,KAAKkzH,iBAAmB,KACI,IAAA30C,uBACDp+D,QAASxG,GAAoBA,EAAgByc,gBAExEp2B,KAAKmzH,4BAA8B,KAC/BnzH,KAAKozH,oBAQL,GAPoB10H,MAAM6D,KAAKvC,KAAK8yH,cACxB7xH,QAASiuB,IACjBlvB,KAAKqzH,eAAenkG,KAExBlvB,KAAK8yH,aAAah/G,QAClB9T,KAAKgzH,oBAAqB,EAC1BhzH,KAAKizH,sBAAwB,KACzBjzH,KAAK+yH,oBAAoBnyH,OAAS,EAAG,CACrC,MAAM0yH,EAAkBtzH,KAAK+yH,oBAAoBQ,QAC7CD,GAAmBA,EAAgB1yH,OAAS,GAC5CZ,KAAKwzH,mCAAmCF,EAEhD,EAER,CACA,8BAAAT,CAA+B3jG,GAC3B,MAAMrV,EAAcqV,EACd,CAACA,GACDlvB,KAAKyzH,iCACXzzH,KAAKwzH,mCAAmC35G,EAC5C,CACA,kBAAA65G,CAAmBv3C,GACf,MAAMtiE,EAAc7Z,KAAKyzH,+BAA+Bt3C,GACxDn8E,KAAKwzH,mCAAmC35G,EAC5C,CACA,8BAAA45G,CAA+Bt3C,GAC3B,MAAMviE,EAAY5Z,KAAKkzH,mBACjBr5G,EAAc,GACpB,IAAK,MAAM3d,KAAY0d,EAAW,CAC9B,MAAMsV,EAAahzB,EAASmN,GAC5B,GAAI8yE,EAAgB,CAChB,MAAMw3C,GAA8B,QAA+BzkG,EAAY,CAAEitD,mBAC7Ew3C,GAA6B/yH,OAAS,GACtCiZ,EAAYlR,KAAKumB,EAEzB,KACK,CACD,MAAMykG,GAA8B,QAA+BzkG,GAC/DykG,GAA6B/yH,OAAS,GACtCiZ,EAAYlR,KAAKumB,EAEzB,CACJ,CACA,OAAOrV,CACX,CACA,iBAAAu5G,GACI,GAAIpzH,KAAK+Z,iBACL,MAAM,IAAI3b,MAAM,uHAExB,CACA,kCAAAo1H,CAAmC35G,GAC3B7Z,KAAKgzH,mBACLhzH,KAAK+yH,oBAAoBpqH,KAAKkR,IAGlCA,EAAY5Y,QAASiuB,IACjBlvB,KAAK8yH,aAAaxvH,IAAI4rB,KAE1BlvB,KAAK4zH,UACT,CACA,OAAAA,GACQ5zH,KAAK8yH,aAAatoG,KAAO,IAAiC,IAA5BxqB,KAAKgzH,qBACnChzH,KAAKizH,sBAAwB1jG,OAAOgiF,sBAAsBvxG,KAAKmzH,6BAC/DnzH,KAAKgzH,oBAAqB,EAElC,CACA,cAAAK,CAAenkG,GACX,MAAMykG,GAA8B,QAA+BzkG,GACnE,IAAKykG,GAA6B/yH,OAC9B,OAEJ,MAAM,SAAE1E,IAAa,IAAAi8E,+BAA8BjpD,IAAe,CAAC,EACnE,IAAKhzB,EACD,OAEJ,MAAM23H,EAAqB,GACrBC,EAAyBH,EAA4BttH,IAAK0tH,IACxDA,EAAejtH,OAAS,EAAAs1E,4BAA4BslC,SACpD1hH,KAAKg0H,+BAA+B93H,GAExC,MAAMs2E,EAAUigD,EAAUsB,EAAejtH,MACzC,IACI,MAAMooB,EAAasjD,EAAQv2E,OAAOC,EAAU63H,GAC5CF,EAAmBlrH,KAAKumB,EAC5B,CACA,MAAOvpB,GACHyK,QAAQzK,MAAMA,EAClB,CACA,OAAOd,QAAQC,QAAQ,CACnBq3E,eAAgB43C,EAAe53C,eAC/Br1E,KAAMitH,EAAejtH,SAG7BjC,QAAQovH,WAAWH,GAAwB/uH,KAAM4kH,IAC7C,MAAMuK,EAAsBvK,EACvB70G,OAAQkC,GAAmB,cAAbA,EAAEm9G,QAChB9tH,IAAK2Q,GAAMA,EAAE/W,OAeF/D,EAASizB,QACjB1E,iBAAiB,EAAAkmB,MAAA,OAAajf,eAftC,SAAS0iG,EAAqBjyE,GAC1B,MAAM,QAAEhzB,EAAO,WAAED,GAAeizB,EAAIptB,OACpC5F,EAAQrE,oBAAoB,EAAA6lB,MAAA,OAAajf,eAAgB0iG,GACzDF,EAAoBjzH,QAAS8zB,IACzB,MAAMhE,EAAc,CAChB7B,aACAitD,eAAgBpnD,EAAOonD,eACvBr1E,KAAMiuB,EAAOjuB,OAEjB,IAAAs7B,cAAa,EAAAxN,YAAa,SAAcy/F,sBAAuB,IACxDtjG,KAGf,GAGA70B,EAASD,UAEjB,CACA,8BAAA+3H,CAA+B93H,GACrBw2H,KAAyB,KAAM3jB,QACjC,QAAQ,KAEZ,MAAMD,GAAY,IAAA/mC,yBAAwB7rE,EAASmN,IAC9CylG,EAAUwlB,QAAQ5B,KACnB5jB,EAAUylB,QAAQ7B,GAClB5jB,EAAU/zB,eAAe23C,GAEjC,E,kJCnJJ,MAAM8B,EAAsB,CACxBC,SAAU,GACVC,cAAe,GACfC,2BAA4B,CAAC,GAsdjC94F,eAAe+4F,GAAuC,SAAExuH,EAAQ,QAAEhC,IAC9D,MAAMywH,EAAuBzuH,EACvB0E,EAAW1G,GAAS0G,UAAY,qBAEtC,aADM,EAAAgqH,aAAA,+BAA4ChqH,EAAU+pH,GACrD,CAAE/pH,WACb,CACA+wB,eAAek5F,GAAqC,eAAE54C,EAAc,QAAE/3E,IAClE,MAAM8rG,EAAe8kB,EAAgC9f,gBAAgB/4B,GAC/DjvE,EAAOgjG,EAAa+E,mBACrB54B,UACC,SAAEvxE,SAAmB8pH,EAAuC,CAC9DxuH,SAAU8G,EAAK9G,SACfhC,YAEJ8rG,EAAa+E,mBAAmB54B,SAASvxE,SAAWA,CACxD,CACA,SAASmqH,EAA0BnuH,GAC/B,MAAMgQ,EAAO,mBACPa,EAAO,mBAEb,OADAA,EAAKI,SAAS,EAAG,GACbjR,IAAS,EAAAs1E,4BAA4BC,SAC9B,CACHvlE,OACAa,QAIG,CAAC,CAEhB,CACA,MAAMq9G,EAAkC,IAlfzB,MACX,WAAAv1H,CAAYqjB,GACR9iB,KAAKk1H,kCAAoC,IAAI1jH,IAC7CxR,KAAKm1H,6BAA+B,IAAI3jH,IACxCsR,IAAQ,qBACR9iB,KAAK6pB,MAAQjqB,OAAOw1H,OAAO,sBAAkBZ,IAC7Cx0H,KAAK8iB,IAAMA,CACf,CACA,QAAAuyG,GACI,OAAOr1H,KAAK6pB,KAChB,CACA,WAAAyrG,CAAYC,GACR,MAAMC,EAAW,sBAAkBx1H,KAAK6pB,OACxC0rG,EAAQC,GACRx1H,KAAK6pB,MAAQjqB,OAAOw1H,OAAOI,EAC/B,CACA,WAAAC,CAAYC,GACR,OAAO11H,KAAK6pB,MAAM4qG,SAASiB,EAC/B,CACA,oBAAAC,GACI,OAAO31H,KAAK6pB,MAAM4qG,SAAS7zH,MAC/B,CACA,UAAAg1H,GACI51H,KAAKk1H,kCAAkCphH,QACvC9T,KAAKm1H,6BAA6BrhH,QAClC9T,KAAK6pB,MAAQjqB,OAAOw1H,OAAO,sBAAkBZ,GACjD,CACA,eAAAtf,CAAgB/4B,GACZ,OAAOn8E,KAAK6pB,MAAM6qG,cAAch3G,KAAMwyF,GAAiBA,EAAa/zB,iBAAmBA,EAC3F,CACA,kBAAA05C,CAAmB15C,EAAgBzyD,GAC/B1pB,KAAKs1H,YAAaQ,IACd,MAAM5lB,EAAe4lB,EAAWpB,cAAch3G,KAAMwyF,GAAiBA,EAAa/zB,iBAAmBA,GAChG+zB,EAILtwG,OAAOm3E,OAAOm5B,EAAcxmF,GAHxBtZ,QAAQC,KAAK,wBAAwB8rE,mCAK7C,IAAA2lC,6BAA4B3lC,EAChC,CACA,eAAA45C,CAAgB7lB,GACZ,GAAIlwG,KAAKk1G,gBAAgBhF,EAAa/zB,gBAClC,MAAM,IAAI/9E,MAAM,wBAAwB8xG,EAAa/zB,iCAEzDn8E,KAAKs1H,YAAazrG,IACd,MAAMmsG,EAAkB,sBAAkB9lB,GAC1C,GAAI8lB,EAAgB/gB,mBAAmB54B,UACnC,aAAc25C,EAAgB/gB,mBAAmB54B,YAC/C,aAAc25C,EAAgB/gB,mBAAmB54B,UAAW,CAC9D,MAAMj2E,EAAWpG,KAAKi2H,oBAAoBD,EAAgB/gB,oBAC1D+gB,EAAgB/gB,mBACX54B,SAASj2E,SAAWA,CAC7B,CACAyjB,EAAM6qG,cAAc/rH,KAAKqtH,MAE7B,OAAyB9lB,EAAa/zB,eAC1C,CACA,kBAAA+5C,CAAmB/5C,GACfn8E,KAAKs1H,YAAazrG,IACd,MAAMssG,EAAwBtsG,EAAM6qG,cAAc5/G,OAAQo7F,GAAiBA,EAAa/zB,iBAAmBA,GAC3GtyD,EAAM6qG,cAAczhH,OAAO,EAAG4W,EAAM6qG,cAAc9zH,UAAWu1H,MAEjE,IAAAC,4BAA2Bj6C,EAC/B,CACA,6BAAAk6C,CAA8BnnG,EAAYitD,EAAgBr1E,EAAMwvH,GAE5D,KADuB,IAAAn+C,+BAA8BjpD,GAEjD,OAE4BlvB,KAAKu2H,+BAA+BrnG,EAAY,CAC5EpoB,KAAMA,EACNq1E,mBAEwBv7E,OAAS,EACjCwP,QAAQqM,MAAM,wCAAyC3V,EAAM,6BAA8BooB,EAAY,mBAAoBitD,IAG/Hn8E,KAAKs1H,YAAazrG,IACTA,EAAM8qG,2BAA2BzlG,KAClCrF,EAAM8qG,2BAA2BzlG,GAAc,GAC/C,IAAkBsnG,+BAA+BtnG,GAAY,IAE7DpoB,IAAS,EAAAs1E,4BAA4BC,SACrCr8E,KAAKy2H,qCAAqC5sG,EAAOqF,EAAYitD,EAAgBr1E,EAAMwvH,GAGnFt2H,KAAK02H,0BAA0B7sG,EAAOqF,EAAYitD,EAAgBm6C,MAG1E,IAAAK,2CAA0CznG,EAAYitD,EAAgBr1E,GAC1E,CACA,oCAAA2vH,CAAqC5sG,EAAOqF,EAAYitD,EAAgBr1E,EAAMwvH,GAC1E,MAAMpmB,EAAermF,EAAM6qG,cAAch3G,KAAMwyF,GAAiBA,EAAa/zB,iBAAmBA,GAChG,IAAK+zB,EACD,OAEJ,MAAM0mB,EAAc,CAAC,EACrBh3H,OAAO4B,KAAK0uG,EAAajL,UAAUhkG,QAASyvG,IACxCkmB,EAAY5qH,OAAO0kG,IAAiB,CAChCjgD,SAAS,KAGjB5mC,EAAM8qG,2BAA2BzlG,GAAYvmB,KAAK,CAC9CwzE,iBACAr1E,OACA89G,QAAQ,EACRn0D,SAAS,EACTomE,cAAeP,GAAiBO,eAAiB,EACjD5xB,SAAU2xB,EACVxiD,OAAQ,IACD6gD,EAA0BnuH,MAC1BwvH,KAGXt2H,KAAK82H,uBAAuBjtG,EAAOqF,EAAYitD,EACnD,CACA,yBAAAu6C,CAA0B7sG,EAAOqF,EAAYitD,EAAgBm6C,EAAkBrB,EAA0B,EAAA74C,4BAA4BC,WAEjI,KADuB,IAAAlE,+BAA8BjpD,GAEjD,OAEJ,MAAMghF,EAAelwG,KAAKk1G,gBAAgB/4B,GAC1C,IAAK+zB,EACD,OAEJ,MAAM,mBAAE+E,GAAuB/E,EAC/B,IAAK+E,EAAmB54B,SACpB,OAAOr8E,KAAKy2H,qCAAqC5sG,EAAOqF,EAAYitD,EAAgB,EAAAC,4BAA4BC,SAAUi6C,GAE9Ht2H,KAAK+2H,sCAAsC7nG,EAAYitD,GACvDn8E,KAAKy2H,qCAAqC5sG,EAAOqF,EAAYitD,EAAgB,EAAAC,4BAA4BC,SAAUi6C,EACvH,CACA,2CAAMS,CAAsC7nG,EAAYitD,GACpD,MAAM7gF,GAAiB,IAAA68E,+BAA8BjpD,GACrD,IAAK5zB,EACD,OAEJ,MAAM40G,EAAelwG,KAAKk1G,gBAAgB/4B,GAC1C,IAAK+zB,EACD,OAEJ,MAAMzzE,EAAiBnhC,EAAeY,oBAAoB,EAAA4nE,oBACpD,mBAAEmxC,GAAuB/E,EACzB8mB,EAA2B,aAAc/hB,EAAmB54B,SACjD/gF,EAAeY,SAC3BugC,GAAmBu6F,GACnBh3H,KAAKi3H,0CAA0C/nG,EAAYghF,EAAa/zB,eAEjF,CACA,qCAAA+6C,CAAsC/6C,EAAgBjgF,EAAUi7H,EAAkBC,GAC9E,MAAMC,EAAmBn7H,EAASimC,oBAClC,IAAIm1F,GAA+B,EACnC,IAAK,MAAMC,KAAmBJ,EAAkB,CACpBj7H,EAASs7H,oBAAoB,CAAEjxH,kBAAmBgxH,GAAmB,CAAEE,WAAW,MAEtGH,GAA+B,EAC/Bt3H,KAAKk1H,kCACA90H,IAAI+7E,GACJj8E,IAAIm3H,EAAkBE,GAC3Bv3H,KAAK03H,mCAAmC,CACpCv7C,iBACAk7C,mBACAE,oBAGZ,CAIA,OAHIH,GACAA,EAAel7H,EAAUigF,EAAgBg7C,GAEtCG,EACDt3H,KAAKk1H,kCACF90H,IAAI+7E,GACJ/7E,IAAIi3H,QACPr5H,CACV,CACA,yCAAAi5H,CAA0C/nG,EAAYitD,GAClD,MAAM+zB,EAAelwG,KAAKk1G,gBAAgB/4B,GAC1C,IAAK+zB,EACD,OAEClwG,KAAKk1H,kCAAkC7xH,IAAI84E,IAC5Cn8E,KAAKk1H,kCAAkCh1H,IAAIi8E,EAAgB,IAAI3qE,KAEnE,MAAM,mBAAEyjG,GAAuB/E,EAC/B,IAAK+E,EAAmB54B,SACpB,OAEJ,MAAM86C,EAAmBn3H,KAAKi2H,oBAAoBhhB,GAE5Cj4E,GADiB,IAAAm7C,+BAA8BjpD,GAChBhzB,SACrC,OAAO8D,KAAKk3H,sCAAsC/6C,EAAgBn/C,EAAem6F,EAAkB,KACvG,CACA,6CAAAQ,CAA8CzoG,EAAYitD,GACtD,MAAM+zB,EAAelwG,KAAKk1G,gBAAgB/4B,GAC1C,IAAK+zB,EACD,OAEClwG,KAAKk1H,kCAAkC7xH,IAAI84E,IAC5Cn8E,KAAKk1H,kCAAkCh1H,IAAIi8E,EAAgB,IAAI3qE,KAEnE,MAAM,mBAAEyjG,GAAuB/E,EAC/B,IAAK+E,EAAmB54B,SACpB,OAEJ,MAAM86C,EAAmBn3H,KAAKi2H,oBAAoBhhB,GAE5Cj4E,GADiB,IAAAm7C,+BAA8BjpD,GAChBhzB,SACrC8D,KAAKk3H,sCAAsC/6C,EAAgBn/C,EAAem6F,EAAkB,CAACn6F,EAAem/C,EAAgBg7C,KACvGn6F,EAAcxG,cACtBv1B,QAAQ,CAACo2H,EAAkB7uH,KAChC,IAAK,MAAM+uH,KAAmBJ,EAAkB,CACpBn6F,EAAcw6F,oBAAoB,CAAEjxH,kBAAmBgxH,EAAiBpK,WAAY3kH,GAAS,CAAEivH,WAAW,EAAMG,gBAAgB,MAEpJ53H,KAAKk1H,kCACA90H,IAAI+7E,GACJj8E,IAAIm3H,EAAkBE,GAC3Bv3H,KAAK03H,mCAAmC,CACpCv7C,iBACAk7C,mBACAE,oBAGZ,KAGZ,CACA,mBAAAtB,CAAoBhhB,GAChB,MAAM9B,EAAe8B,EAAmB54B,SACxC,IAAI86C,EACJ,GAAIhkB,EAAa/sG,SACb+wH,EAAmBhkB,EACd/sG,cAEJ,IAAK+wH,GACNhkB,EAAaroG,SAAU,CACvB,MAAMA,EAAWqoG,EACZroG,SAELqsH,EADe,EAAA7jG,MAAMxM,UAAUhc,GACL1E,QAC9B,CACA,OAAO+wH,CACX,CACA,6BAAAU,CAA8B1zH,EAASg4E,GACnC,MAAMh8E,EAAMH,KAAK83H,gBAAgB,CAC7B37C,iBACAk7C,iBAAkBlzH,IAEtB,OAAOnE,KAAKm1H,6BAA6B/0H,IAAID,EACjD,CACA,qCAAA43H,CAAsC7oG,EAAYitD,GAC9C,MAAM7gF,GAAiB,IAAA68E,+BAA8BjpD,GACrD,IAAK5zB,EACD,OAEJ,MACM+7H,EADgB/7H,EAAeY,SACEimC,oBACvC,OAAOniC,KAAK63H,8BAA8BR,EAAkBl7C,EAChE,CACA,oCAAAi5B,CAAqClmF,EAAYitD,GAC7C,MAAM7gF,GAAiB,IAAA68E,+BAA8BjpD,GACrD,IAAK5zB,EACD,OAEJ,IAAK0E,KAAKk1H,kCAAkC7xH,IAAI84E,GAC5C,OAEJ,MACMj6C,EADgB5mC,EAAeY,SACAimC,oBAErC,OAD4BniC,KAAKk1H,kCAAkC90H,IAAI+7E,GAC5C/7E,IAAI8hC,EACnC,CACA,uCAAA81F,CAAwC9oG,EAAYitD,GAEhD,IADqBn8E,KAAKk1G,gBAAgB/4B,GAEtC,MAAO,GAEXn8E,KAAK23H,8CAA8CzoG,EAAYitD,GAC/D,MAAM,SAAEjgF,IAAa,IAAAi8E,+BAA8BjpD,GAC7C9oB,EAAWlK,EAASs6B,cACpByhG,EAA8Cj4H,KAAKk1H,kCAAkC90H,IAAI+7E,GAC/F,OAAO/1E,EAASC,IAAKlC,GACV8zH,EAA4C73H,IAAI+D,GAE/D,CACA,yCAAA+zH,CAA0ChpG,EAAYipG,GAClD,MAAMC,EAAyB,GAwC/B,OAvCAp4H,KAAKs1H,YAAazrG,IACd,IAAKA,EAAM8qG,2BAA2BzlG,GAClC,OAEJ,MAAMmpG,EAAyBxuG,EAAM8qG,2BAA2BzlG,GAChE,IAAIopG,GAA8B,EAClC,IAAKH,GACDv4H,OAAO+a,OAAOw9G,GAAW5pG,MAAOtuB,QAAoBjC,IAAViC,GAC1Cm4H,EAAuBzvH,QAAQ0vH,UACxBxuG,EAAM8qG,2BAA2BzlG,OAEvC,CACD,MAAM,eAAEitD,EAAc,KAAEr1E,GAASqxH,EACjCtuG,EAAM8qG,2BAA2BzlG,GAC7BmpG,EAAuBvjH,OAAQi/G,IAC3B,MAAMwE,EAAgBp8C,GAClBr1E,GACAitH,EAAe53C,iBAAmBA,GAClC43C,EAAejtH,OAASA,GACvBq1E,IACIr1E,GACDitH,EAAe53C,iBAAmBA,IACpCA,GAAkBr1E,GAAQitH,EAAejtH,OAASA,EAOxD,OANIyxH,IACAH,EAAuBzvH,KAAKorH,GACxBA,EAAenP,SACf0T,GAA8B,KAG9BC,IAE4C,IAAxD1uG,EAAM8qG,2BAA2BzlG,GAAYtuB,cACtCipB,EAAM8qG,2BAA2BzlG,GAEnCopG,IACLzuG,EAAM8qG,2BAA2BzlG,GAAY,GAAG01F,QAAS,EAEjE,IAEGwT,CACX,CACA,iCAAAI,CAAkCtpG,EAAYipG,GAC1C,MAAMC,EAAyBp4H,KAAKk4H,0CAA0ChpG,EAAYipG,GAC1FC,EAAuBn3H,QAAS8yH,KAC5B,IAAA0E,0CAAyCvpG,EAAY6kG,EAAe53C,eAAgB43C,EAAejtH,QAEvG,MAAM4xH,EAA2B14H,KAAKu2H,+BAA+BrnG,GAKrE,OAJIwpG,EAAyB93H,OAAS,GAClC83H,EAAyB,GAAG9T,SAC5B,IAAA+R,2CAA0CznG,EAAYwpG,EAAyB,GAAGv8C,eAAgBu8C,EAAyB,GAAG5xH,MAE3HsxH,CACX,CACA,gCAAAO,CAAiCzpG,EAAYipG,EAAWS,GACpD,MAAMR,EAAyBp4H,KAAKk4H,0CAA0ChpG,EAAYipG,GAM1F,OALKS,GACDR,EAAuBn3H,QAAQ,EAAGk7E,iBAAgBr1E,YAC9C,IAAA2xH,0CAAyCvpG,EAAYitD,EAAgBr1E,KAGtEsxH,CACX,CACA,kCAAAV,EAAmC,eAAEv7C,EAAc,iBAAEk7C,EAAgB,gBAAEE,IACnE,MAAMp3H,EAAMH,KAAK83H,gBAAgB,CAAE37C,iBAAgBk7C,qBACnD,IAAKr3H,KAAKm1H,6BAA6B9xH,IAAIlD,GAEvC,YADAH,KAAKm1H,6BAA6Bj1H,IAAIC,EAAK,CAACo3H,IAGhD,MAAMsB,EAAgB74H,KAAKm1H,6BAA6B/0H,IAAID,GACtD24H,EAAYp6H,MAAM6D,KAAK,IAAIm5B,IAAI,IAAIm9F,EAAetB,KACxDv3H,KAAKm1H,6BAA6Bj1H,IAAIC,EAAK24H,EAC/C,CACA,sBAAAhC,CAAuBjtG,EAAOqF,EAAYitD,GACtC,MAAMjgF,EAAW2tB,EAAM8qG,2BAA2BzlG,GAC7ChzB,GAGLA,EAAS+E,QAAShB,IACdA,EAAM2kH,OAAS3kH,EAAMk8E,iBAAmBA,GAEhD,CACA,qBAAA48C,CAAsB7pG,EAAYitD,GAC9Bn8E,KAAKs1H,YAAazrG,IACd,MAAM3tB,EAAW2tB,EAAM8qG,2BAA2BzlG,GAC7ChzB,GAGLA,EAAS+E,QAAShB,IACdA,EAAM2kH,OAAS3kH,EAAMk8E,iBAAmBA,OAGhD,IAAAw6C,2CAA0CznG,EAAYitD,EAC1D,CACA,qBAAAklC,CAAsBnyF,GAClB,IAAKlvB,KAAK6pB,MAAM8qG,2BAA2BzlG,GACvC,OAEJ,MAAM8pG,EAAeh5H,KAAK6pB,MAAM8qG,2BAA2BzlG,GAAYxR,KAAMu7G,GAAWA,EAAOrU,QAC/F,OAAKoU,EAGEh5H,KAAKk1G,gBAAgB8jB,EAAa78C,qBAHzC,CAIJ,CACA,8BAAAo6C,CAA+BrnG,EAAYipG,EAAY,CAAC,GACpD,MAAMe,EAA0Bl5H,KAAK6pB,MAAM8qG,2BAA2BzlG,GACtE,OAAKgqG,EAGAf,EAAUrxH,MAASqxH,EAAUh8C,eAG3B+8C,EAAwBpkH,OAAQi/G,IACnC,MAAMoF,GAAYhB,EAAUrxH,MACtBitH,EAAejtH,OAASqxH,EAAUrxH,KAElCsyH,GAAUjB,EAAUh8C,gBACpB43C,EAAe53C,iBAAmBg8C,EAAUh8C,eAElD,OAAOg9C,GAAaC,IATbF,EAHA,EAcf,CACA,6BAAAhV,CAA8Bh1F,EAAYipG,GACtC,OAAOn4H,KAAKu2H,+BAA+BrnG,EAAYipG,GAAW,EACtE,CACA,uCAAAkB,CAAwCnqG,EAAYipG,GAChD,MAAMmB,EAAyBt5H,KAAKkkH,8BAA8Bh1F,EAAYipG,GAC9E,OAAOmB,GAAwB7oE,OACnC,CACA,uCAAA8oE,CAAwCrqG,EAAYipG,EAAW1nE,GAC3DzwD,KAAKs1H,YAAazrG,IACd,MAAMqvG,EAA0Bl5H,KAAKu2H,+BAA+BrnG,EAAYipG,GAC3Ee,GAGLA,EAAwBj4H,QAAS8yH,IAC7BA,EAAetjE,QAAUA,EACzB7wD,OAAOqrB,QAAQ8oG,EAAe9uB,UAAUhkG,QAAQ,EAAEyvG,EAAcx+D,MAC5DA,EAAQue,QAAUA,SAI9B,IAAAkmE,2CAA0CznG,EAAYipG,EAAUh8C,eAAgBg8C,EAAUrxH,KAC9F,CACA,WAAA0yH,CAAY/E,EAAUiB,GAClB11H,KAAKs1H,YAAazrG,IACVA,EAAM4qG,SAASiB,IACftlH,QAAQC,KAAK,+CAEjBwZ,EAAM4qG,SAASiB,GAAY,sBAAkBjB,IAErD,CACA,cAAAgF,CAAe5C,GACX72H,KAAKs1H,YAAazrG,WACPA,EAAM4qG,SAASoC,IAE9B,CACA,sBAAA6C,CAAuBtzH,GACnB,OAAOA,EACFC,IAAKlC,GAAYA,EAAQzD,OAAOzD,KAAKgmB,MAAuB,IAAjB9e,EAAQvD,UACnD8sB,KAAK,IACd,CACA,yCAAAisG,GACI,OAAO/5H,OAAOqrB,QAAQjrB,KAAK6pB,MAAM8qG,4BAA4BtuH,IAAI,EAAE6oB,EAAY+0F,MAAqB,CAChG/0F,aACA+0F,oBAER,CACA,8CAAA2V,CAA+Cz9C,GAC3C,MAAM59C,EAAS,GAOf,OANA3+B,OAAOqrB,QAAQjrB,KAAK6pB,MAAM8qG,4BAA4B1zH,QAAQ,EAAEiuB,EAAY2qG,MACxE,MAAMC,EAAeD,EAAa/kH,OAAQi/G,GAAmBA,EAAe53C,iBAAmBA,GAC3F29C,EAAal5H,OAAS,GACtB29B,EAAO51B,KAAK,CAAEumB,aAAY+0F,gBAAiB6V,MAG5Cv7F,CACX,CACA,eAAAu5F,EAAgB,eAAE37C,EAAc,iBAAEk7C,IAC9B,MAAO,GAAGl7C,KAAkBk7C,GAChC,GAgCiE,U,gGCjSrE,MAAM0C,EAAoB,IAzN1B,MACI,WAAAt6H,GACIO,KAAKo0E,OAAS,CACV4lD,OAAQ,CAAC,EACTtF,cAAe,CAAC,EAChBuF,eAAgB,CAAC,EAEzB,CACA,QAAAC,CAAS/B,EAAWgC,GAChB,MAAM,WAAEjrG,EAAU,eAAEitD,EAAc,KAAEr1E,EAAI,aAAE4pG,GAAiBynB,EACrDiC,EAAgBp6H,KAAKi2E,SAASkiD,GACpC,IAAIkC,EAaJ,GALIA,EAPCnrG,GAAeitD,EAOAn8E,KAAKs6H,kCAAkC,IAChDF,KACAD,GACJrzH,GATa,IACTszH,KACAD,IASNrzH,EACD,MAAM,IAAI1I,MAAM,mCAEpB,GAAI8wB,EAAY,CACPlvB,KAAKo0E,OAAO6lD,eAAe/qG,KAC5BlvB,KAAKo0E,OAAO6lD,eAAe/qG,GAAc,CACrCqrG,6BAA6B,EAC7BtW,gBAAiB,CAAC,IAG1B,MAAMA,EAAkBjkH,KAAKo0E,OAAO6lD,eAAe/qG,GAAY+0F,gBAC/D,GAAI9nC,EAAgB,CACX8nC,EAAgB9nC,KACjB8nC,EAAgB9nC,GAAkB,CAAC,GAElC8nC,EAAgB9nC,GAAgBr1E,KACjCm9G,EAAgB9nC,GAAgBr1E,GAAQ,CAAC,GAE7C,MAAM0zH,EAAYvW,EAAgB9nC,GAAgBr1E,QAC7B9I,IAAjB0yG,GACK8pB,EAAUC,aACXD,EAAUC,WAAa,CAAC,GAE5BD,EAAUC,WAAW/pB,GAAgB2pB,GAGrCG,EAAUE,YAAcL,CAEhC,KACK,CACD,MAAMM,EAAwB,uBACzB1W,EAAgB0W,KACjB1W,EAAgB0W,GAAyB,CAAC,GAEzC1W,EAAgB0W,GAAuB7zH,KACxCm9G,EAAgB0W,GAAuB7zH,GAAQ,CAAC,GAEpDm9G,EAAgB0W,GAAuB7zH,GAAM4zH,YACzCL,CACR,CACJ,MACK,GAAIl+C,EAAgB,CAChBn8E,KAAKo0E,OAAOsgD,cAAcv4C,KAC3Bn8E,KAAKo0E,OAAOsgD,cAAcv4C,GAAkB,CAAC,GAE5Cn8E,KAAKo0E,OAAOsgD,cAAcv4C,GAAgBr1E,KAC3C9G,KAAKo0E,OAAOsgD,cAAcv4C,GAAgBr1E,GAAQ,CAAC,GAEvD,MAAM8zH,EAAY56H,KAAKo0E,OAAOsgD,cAAcv4C,GAAgBr1E,QACvC9I,IAAjB0yG,GACKkqB,EAAUH,aACXG,EAAUH,WAAa,CAAC,GAE5BG,EAAUH,WAAW/pB,GAAgB2pB,GAGrCO,EAAUF,YAAcL,CAEhC,MAEIr6H,KAAKo0E,OAAO4lD,OAAOlzH,GAAQuzH,CAEnC,CACA,iCAAAC,CAAkCH,EAAQrzH,GACtC,MAAM+zH,EAAkB,IAAKV,GAC7B,GAAIrzH,IAAS,8BAAkCu1E,SAAU,CACrD,MAAMy+C,EAAiBD,EACvBC,EAAeC,wBAA0BD,EAAeE,cACxDF,EAAeG,uBAAyBH,EAAeI,aACvDJ,EAAeK,qBAAuBL,EAAeM,WACrDN,EAAeO,oBAAsBP,EAAeQ,UACpDR,EAAeS,yBAA2BT,EAAeU,cAC7D,MACK,GAAI10H,IAAS,8BAAkC46G,QAAS,CACzD,MAAM+Z,EAAgBZ,EACtBY,EAAcR,uBAAyBQ,EAAcP,aACrDO,EAAcF,yBAA2BE,EAAcD,eACvDC,EAAcC,sBAAwBD,EAAcE,YACpDF,EAAcV,wBAA0BU,EAAcT,cACtDS,EAAcN,qBAAuBM,EAAcL,WACnDK,EAAcJ,oBAAsBI,EAAcH,SACtD,CACA,OAAOT,CACX,CACA,QAAA5kD,CAASkiD,GACL,MAAM,WAAEjpG,EAAU,eAAEitD,EAAc,KAAEr1E,EAAI,aAAE4pG,GAAiBynB,EAC3D,IAAIyD,EAAgB57H,KAAK67H,gBAAgB/0H,GACrCyzH,GAA8B,EAoBlC,GAnBIv6H,KAAKo0E,OAAO4lD,OAAOlzH,KACnB80H,EAAgB,IACTA,KACA57H,KAAKo0E,OAAO4lD,OAAOlzH,KAG1B9G,KAAKo0E,OAAOsgD,cAAcv4C,KAAkBr1E,KAC5C80H,EAAgB,IACTA,KACA57H,KAAKo0E,OAAOsgD,cAAcv4C,GAAgBr1E,GAAM4zH,kBAElC18H,IAAjB0yG,GACA1wG,KAAKo0E,OAAOsgD,cAAcv4C,GAAgBr1E,GAAM2zH,aAAa/pB,KAC7DkrB,EAAgB,IACTA,KACA57H,KAAKo0E,OAAOsgD,cAAcv4C,GAAgBr1E,GAAM2zH,WAAW/pB,MAItExhF,GAAclvB,KAAKo0E,OAAO6lD,eAAe/qG,GAAa,CACtDqrG,EACIv6H,KAAKo0E,OAAO6lD,eAAe/qG,GAAYqrG,4BAC3C,MAAMuB,EAAsB,uBACxB97H,KAAKo0E,OAAO6lD,eAAe/qG,GAAY+0F,gBAAgB6X,KAAuBh1H,KAC9E80H,EAAgB,IACTA,KACA57H,KAAKo0E,OAAO6lD,eAAe/qG,GAAY+0F,gBAAgB6X,GAAqBh1H,GAAM4zH,cAGzFv+C,GACAn8E,KAAKo0E,OAAO6lD,eAAe/qG,GAAY+0F,gBAAgB9nC,KAAkBr1E,KACzE80H,EAAgB,IACTA,KACA57H,KAAKo0E,OAAO6lD,eAAe/qG,GAAY+0F,gBAAgB9nC,GAAgBr1E,GAAM4zH,kBAE/D18H,IAAjB0yG,GACA1wG,KAAKo0E,OAAO6lD,eAAe/qG,GAAY+0F,gBAAgB9nC,GAAgBr1E,GAAM2zH,aAAa/pB,KAC1FkrB,EAAgB,IACTA,KACA57H,KAAKo0E,OAAO6lD,eAAe/qG,GAAY+0F,gBAAgB9nC,GAAgBr1E,GAAM2zH,WAAW/pB,KAI3G,CACA,OAAOkrB,CACX,CACA,8BAAAG,CAA+B7sG,GAC3B,OAAOlvB,KAAKo0E,OAAO6lD,eAAe/qG,IAAaqrG,2BACnD,CACA,8BAAA/D,CAA+BtnG,EAAYqrG,GAClCv6H,KAAKo0E,OAAO6lD,eAAe/qG,KAC5BlvB,KAAKo0E,OAAO6lD,eAAe/qG,GAAc,CACrCqrG,6BAA6B,EAC7BtW,gBAAiB,CAAC,IAG1BjkH,KAAKo0E,OAAO6lD,eAAe/qG,GAAYqrG,4BACnCA,CACR,CACA,eAAAsB,CAAgB/0H,GACZ,OAAQA,GACJ,KAAK,8BAAkCu1E,SACnC,OAAO,SACX,KAAK,8BAAkCqlC,QACnC,OAAO,SACX,KAAK,8BAAkCE,QACnC,MAAO,CAAC,EACZ,QACI,MAAM,IAAIxjH,MAAM,gCAAgC0I,KAE5D,CACA,sBAAAk1H,CAAuB7/C,GACfn8E,KAAKo0E,OAAOsgD,cAAcv4C,WACnBn8E,KAAKo0E,OAAOsgD,cAAcv4C,EAEzC,CACA,0BAAA8/C,GACIj8H,KAAKo0E,OAAOsgD,cAAgB,CAAC,CACjC,CACA,kBAAAwH,CAAmBhtG,GACXlvB,KAAKo0E,OAAO6lD,eAAe/qG,WACpBlvB,KAAKo0E,OAAO6lD,eAAe/qG,EAE1C,CACA,sBAAAitG,GACI,IAAK,MAAMjtG,KAAclvB,KAAKo0E,OAAO6lD,eAAgB,CACjD,MACMM,EADgBv6H,KAAKo0E,OAAO6lD,eAAe/qG,GACCqrG,4BAClDv6H,KAAKo0E,OAAO6lD,eAAe/qG,GAAc,CACrCqrG,8BACAtW,gBAAiB,CAAC,EAE1B,CACJ,CACA,kBAAAmY,GACIp8H,KAAKi8H,6BACLj8H,KAAKm8H,wBACT,CACA,cAAAE,CAAelE,GACX,MAAM,KAAErxH,GAASqxH,EACXzoG,EAAQ1vB,KAAKi2E,SAASkiD,GACtBjb,EAAel9G,KAAK67H,gBAAgB/0H,GAC1C,OAAQ,EAAAiqC,UAAA,UAAoBrhB,EAAOwtF,EACvC,E,iICzNJ,SAAS,EAAsBhuF,GAC3B,OAAO,OAAuBA,EAClC,CACA,SAAS,EAAsBA,EAAYitD,ICJpC,SAA+BjtD,EAAYitD,GACb,KACR48C,sBAAsB7pG,EAAYitD,EAC/D,CDEI,CAAuBjtD,EAAYitD,EACvC,C,+FEHO,SAASq9C,EAAY/E,EAAUjsH,GAClC,MAAM8zH,EAA2B,KAC3BC,EAAa/zH,IAAS,SAC5B,IAAIg0H,EAAgB,IAAI/H,GAWxB,GAVK,EAAA1jF,UAAA,QAAkByrF,EAAc,GAAI,CAAC,EAAG,EAAG,EAAG,MAC/CpsH,QAAQC,KAAK,uHACbmsH,EAAgB,CAAC,CAAC,EAAG,EAAG,EAAG,MAAOA,IAEtCA,EAAgBA,EAAcn2H,IAAKjK,GACV,IAAjBA,EAAMwE,OACC,CAACxE,EAAM,GAAIA,EAAM,GAAIA,EAAM,GAAI,KAEnCA,GAEPogI,EAAc57H,OAAS,IAAK,CAC5B,MAAM67H,EAAmB,IAAsB/7H,MAAM87H,EAAc57H,QACnE47H,EAAgB,IAAIA,KAAkBC,EAC1C,CAEA,OADAH,EAAyB9C,YAAYgD,EAAeD,GAC7CA,CACX,C,oFCtBO,SAASrgD,EAA+BhtD,EAAYwtG,GACvDA,EAAuBr2H,IAAKs2H,IACjB,OAAsCztG,EAAYytG,GAEjE,CACA,SAASC,EAAmC1tG,EAAY2tG,GACpD,OAAO3gD,EAA+BhtD,EAAY2tG,EAAkBx2H,IAAK+iB,IAAU,IAC5EA,EACHtiB,KAAM,EAAAs1E,4BAA4BslC,WAE1C,C,gGC0EA,QApFA,SAAoCib,GAChC,MAAM,eAAExgD,EAAc,eAAE43C,EAAc,OAAE3/C,GAAWuoD,GAC7C,KAAE71H,EAAMoG,KAAM4vH,GAAc/I,EAC5B7mH,EAAO4vH,EAAY,IAAKA,GAAc,CAAC,EAC7C,IAAK5vH,EACD,MAAM,IAAI9O,MAAM,yDAmBxB,IAA8B2+H,EAjBtBj2H,IAAS,EAAAs1E,4BAA4BslC,WAiBfqb,EAhBD7vH,GAiBb8vH,YAAcD,EAAYC,aAAe,GACrDD,EAAYE,kBAAoBF,EAAYE,mBAAqB,IAAIzrH,KAhBrE,MAAM0rH,EAkBV,SAA2BC,EAAgBr2H,EAAMoG,GAC7C,MAAMgwH,EAAqB,CAAC,EACxBC,EACAv9H,OAAOqrB,QAAQkyG,GAAgBl8H,QAAQ,EAAEyvG,EAAcx+D,MACnD,MAAM,MAAEte,EAAK,OAAEypE,EAAM,YAAE97B,EAAW,OAAEqjD,KAAWwY,GAASlrF,EAClDmrF,EAAoB,CACtB3sB,aAAc1kG,OAAO0kG,GACrB98E,MAAOA,GAAS,WAAW88E,IAC3BrT,OAAQA,IAAU,EAClB97B,YAAaA,GAAe,CAAC,EAC7BqjD,OAAQA,IAAU,KACfwY,GAEPF,EAAmBxsB,GAAgB2sB,IAGlCv2H,IAAS,EAAAs1E,4BAA4BslC,QAWlD,SAAkCwb,EAAoBH,GAClD,MAAM,YAAEC,GAAgBD,EACxBC,GAAa/7H,QAASq8H,IAClB,MAAMC,EAAW,EAAAjqG,MAAMkqG,YAAYF,GACnC,GAAIC,GAAUrwH,KAAM,CAChB,MAAM,aAAEwjG,GAAiB6sB,EAASrwH,KAClCgwH,EAAmBxsB,GAAgB,CAAEA,eACzC,GAER,CAnBQ+sB,CAAyBP,EAAoBhwH,GAExCpG,IAAS,EAAAs1E,4BAA4BwlC,QAkBlD,SAAkCsb,EAAoBQ,GAClD,MAAM,YAAEV,GAAgBU,EACxBV,GAAa/7H,QAASq8H,IAClB,MAAMC,EAAW,EAAAjqG,MAAMkqG,YAAYF,GACnC,GAAIC,GAAUrwH,KAAM,CAChB,MAAM,aAAEwjG,GAAiB6sB,EAASrwH,KAClCgwH,EAAmBxsB,GAAgB,CAAEA,eACzC,GAER,CA1BQitB,CAAyBT,EAAoBhwH,GAG7CgwH,EAAmB,GAyBhB,CACHxsB,aAAc,EACd98E,MAAO,YACPypE,QAAQ,EACR97B,YAAa,CAAC,EACdqjD,QAAQ,GA5BZ,OAAOsY,CACX,CA5C+BU,CAAkBxpD,GAAQ6wB,SAAUn+F,EAAMoG,GAErE,cADOknE,GAAQ6wB,SACR,CACH9oB,iBACAvoD,MAAOwgD,GAAQxgD,OAAS,KACxB2tC,YAAa6S,GAAQ7S,aAAe,CAAC,EACrC0jC,SAAUi4B,EACVjoB,mBAAoB,CAChB,CAACnuG,GAAO,IACDoG,IAInB,ECtBO,SAAS2wH,EAAiBnB,EAAwBhsG,GACrD,MAAM4rG,EAA2B,KACjCI,EAAuBz7H,QAAS07H,IAC5B,MAAMzsB,EAAe,EAA2BysB,GAChDL,EAAyBvG,gBAAgB7lB,GACpCx/E,IACD,IAAAoxF,6BAA4B5R,EAAa/zB,iBAGrD,C,wLCRA,SAASq9C,EAAY/E,EAAUoC,GAC3B,IAAKpC,EACD,MAAM,IAAIr2H,MAAM,qCAEpB,OAAO,OAAaq2H,EAAUoC,EAClC,CACA,SAASiH,EAAY5uG,EAAYitD,EAAgB4hD,GAC7C,KAAK,OAAaA,GACd,MAAM,IAAI3/H,MAAM,mDAAmD2/H,KAEvE,MAAMpK,GAA8B,QAA+BzkG,EAAY,CAAEitD,mBACjF,IAAKw3C,EACD,MAAM,IAAIv1H,MAAM,wCAAwC8wB,oBAE5DykG,EAA4B1yH,QAAS+8H,IACjCA,EAA2BnH,cAAgBkH,KAE/C,IAAApH,2CAA0CznG,EAAYitD,EAC1D,CACA,SAAS8lC,EAAqB/yF,EAAYitD,EAAgBu0B,GACtD,MAAMuT,GAAkB,QAA+B/0F,EAAY,CAC/DitD,mBAEJ,IAAK8nC,GAA8C,IAA3BA,EAAgBrjH,OACpC,OAAO,KAEX,MAAMmzH,EAAiB9P,EAAgB,IACjC,cAAE4S,GAAkB9C,EACpBU,GAAW,OAAaoC,GAC9B,IAAIoH,EAAaxJ,EAAS/jB,GAC1B,IAAKutB,EAAY,CACb,GAA4B,iBAAjBvtB,EAEP,OADAtgG,QAAQC,KAAK,qCAAqCqgG,KAC3C,KAEXutB,EAAaxJ,EAAS/jB,GAAgB,CAAC,EAAG,EAAG,EAAG,EACpD,CACA,OAAOutB,CACX,CACA,SAASC,EAAqBhvG,EAAYitD,EAAgBu0B,EAAct0G,GACpE,MAAM+hI,EAAiBlc,EAAqB/yF,EAAYitD,EAAgBu0B,GACxE,IAAK,IAAIhnG,EAAI,EAAGA,EAAItN,EAAMwE,OAAQ8I,IAC9By0H,EAAez0H,GAAKtN,EAAMsN,IAE9B,IAAAitH,2CAA0CznG,EAAYitD,EAC1D,C,qFC9CO,SAASo+B,EAAgCp+B,EAAgBiiD,EAAqB1tB,GACjF,MAAM3/E,EAAc,CAChBorD,iBACAiiD,sBACA1tB,iBAEJ,QAAqBv0B,IACrB,IAAA/5C,cAAa,EAAAxN,YAAa,EAAAnD,OAAO4sG,2BAA4BttG,EACjE,C,+DCVO,SAASswF,EAAsBnyF,GAElC,OADiC,KACDmyF,sBAAsBnyF,EAC1D,C,+DCHO,SAASymG,IAEZ,OADiC,KACDA,sBACpC,C,kFCHO,SAASY,EAA+BrnG,EAAYipG,EAAY,CAAC,GAEpE,OADiC,KACD5B,+BAA+BrnG,EAAYipG,EAC/E,CACO,SAASjU,EAA8Bh1F,EAAYipG,GACtD,MAAMmE,EAA2B,KACjC,IAAKnE,EAAUh8C,iBAAmBg8C,EAAUrxH,KACxC,MAAM,IAAI1I,MAAM,+GAEpB,MAAM6lH,EAAkBqY,EAAyB/F,+BAA+BrnG,EAAYipG,GAC5F,OAAOlU,IAAkB,EAC7B,CACO,SAAS2V,EAA+Cz9C,GAE3D,OADiC,KACDy9C,+CAA+Cz9C,EACnF,C,+DCfO,SAASk9C,EAAwCnqG,EAAYipG,GAEhE,OADiC,KACDkB,wCAAwCnqG,EAAYipG,EACxF,C,+DCHO,SAASmG,IAGZ,OAFiC,KACMjJ,WAC1BX,aACjB,C,kFCHO,SAAS6J,EAAyBrvG,EAAYpoB,GASjD,OARgC03H,EAAuCtvG,GACzB7oB,IAAK0tH,IAC3CjtH,GAAQitH,EAAejtH,MAChB,OAAgBitH,EAAe53C,kBAIFrnE,OAAQo7F,QAAkClyG,IAAjBkyG,EAEzE,CACO,SAASsuB,EAAuCtvG,GAInD,OAHiC,KACMmmG,WACDV,2BAA2BzlG,EAErE,C,qFCXO,SAASuvG,GAA6B,eAAEtiD,EAAc,QAAE/3E,IAC3D,MAAM8rG,GAAe,OAAgB/zB,GACrC,IAAK+zB,EACD,OAEJ,MAAM,SAAEplG,GAAaolG,EAAa+E,mBAC7B54B,SACCqiD,EAAqB,EAAAprG,MAAMxM,UAAUhc,GAC3C,OAAO,OAA6B,CAChCqxE,iBACAjtD,WAAY9qB,EAAQ8qB,WACpB9oB,SAAUs4H,EAAmBt4H,SAC7BhC,WAER,C,8DCpBOy3B,eAAe8iG,EAA+BtV,GACjD,OAAO,QAAuCA,EAClD,C,0nBCuBgC,IACE,IACF,G,0ECGhC,QA7BA,UAAuC,eAAEltC,EAAc,KAAEr1E,EAAI,KAAEoG,IAC3D,MAAMgjG,GAAe,OAAgB/zB,GACrC,IAAK+zB,EACD,MAAM,IAAI9xG,MAAM,gBAAgB+9E,eAKpC,OAHI+zB,EAAa+E,mBAAmBnuG,IAChCsJ,QAAQC,KAAK,+BAA+BvJ,qCAAwCq1E,sBAEhFr1E,GACJ,KAAK,IAA4Bu1E,SAMjC,KAAK,IAA4BqlC,QAKjC,KAAK,IAA4BE,QACzB10G,IACAgjG,EAAa+E,mBAAmBnuG,GAAQoG,GAE5C,MACJ,QACI,MAAM,IAAI9O,MAAM,+BAA+B0I,KAE3D,C,gICvBA,SAAS83H,EAAsC1vG,EAAY2vG,GACvD,MAAM,eAAE1iD,EAAc,OAAE/H,GAAWyqD,EAC7BvI,EAAkB,CACpBO,cAAeiI,EAAiB1qD,MAC7BA,GAGP,GADA,KAAgCiiD,8BAA8BnnG,EAAYitD,EAAgB0iD,EAAoB/3H,KAAMwvH,KAC/G,IAAAyI,uBAAsB5iD,GAAiB,CACxC,IAAI6iD,EAAoB,EACxB,MAAM9uB,EAAe,KAAgCgF,gBAAgB/4B,GACrE,GAAI+zB,EAAc,CACd,MAAM+uB,EAAcr/H,OAAO4B,KAAK0uG,EAAajL,UACzCg6B,EAAYr+H,OAAS,IACrBo+H,EAAoBC,EAAY54H,IAAKgM,GAAMrG,OAAOqG,IAAI4J,OAAO,GAErE,EACA,IAAA4lG,uBAAsB1lC,EAAgB6iD,EAC1C,CACIH,EAAoB/3H,OAAS,EAAAs1E,4BAA4BslC,UACzD,IAAAz2E,GAAsC,CAAC/b,KAE3C,IAAA4yF,6BAA4B3lC,EAChC,CACA,SAAS2iD,EAAiB1qD,GACtB,MAAM,gBAAE8qD,GAAoB9qD,GAAU,CAAC,EACvC,QAAwBp2E,IAApBkhI,EAA+B,CAE/B,OADc,OAAYrgG,KAAKsgG,MAAMtgG,KAAKC,UAAU,MAExD,CACA,GAA+B,iBAApBogG,EACP,OAAOA,EAEX,GAAIxgI,MAAMC,QAAQugI,IACdA,EAAgB3wG,MAAOpZ,GAASzW,MAAMC,QAAQwW,IAAyB,IAAhBA,EAAKvU,QAAe,CAE3E,OADc,OAAYs+H,EAE9B,CAEA,OADc,OAAYrgG,KAAKsgG,MAAMtgG,KAAKC,UAAU,MAExD,C,6FC3CO,SAASo3F,EAAmB/5C,GAC/B,MAAMmgD,EAA2B,KACCA,EAC7B3C,4CACA7kH,OAAO,EAAGmvG,qBAAsBA,EAAgBh7F,KAAMm2G,GAAQA,EAAIjjD,iBAAmBA,IACrF91E,IAAI,EAAG6oB,gBAAiBA,GACHjuB,QAASiuB,KAC/B,QAAkCA,EAAY,CAAEitD,qBAEpDmgD,EAAyBpG,mBAAmB/5C,IAC5C,IAAAi6C,4BAA2Bj6C,EAC/B,CACO,SAASkjD,IACZ,MAAM/C,EAA2B,KACXA,EAAyBjH,WAAWX,cACpBruH,IAAK6pG,GAAiBA,EAAa/zB,gBACzDl7E,QAASk7E,IACrB+5C,EAAmB/5C,KAEvBmgD,EAAyB1G,YAC7B,C,6KChBA,SAAS+C,EAAiCzpG,EAAYipG,EAAWmH,GAC7D,OAAOC,EAAmCrwG,EAAYipG,EAAWmH,EACrE,CACA,SAAS9G,EAAkCtpG,EAAYipG,EAAWmH,GAC9D,OAAOC,EAAmCrwG,EAAYipG,EAAWmH,EACrE,CACA,SAASC,EAAmCrwG,EAAYipG,EAAWmH,GAC/D,MAAM,eAAEnjD,EAAc,KAAEr1E,GAASqxH,EAEjC,OAmCJ,SAAqCjpG,EAAYitD,EAAgBr1E,EAAMw4H,GACnE,MAAMrb,GAAkB,EAAAC,EAAA,IAA+Bh1F,EAAY,CAC/DitD,iBACAr1E,SAEJm9G,EAAgBhjH,QAAS8yH,IACjBA,EAAejtH,OAASs1E,EAAA,EAA4BC,SACpDmjD,EAAA,wBAAqCtwG,EAAY6kG,EAAe53C,eAAgBmjD,GAE3EvL,EAAejtH,OAASs1E,EAAA,EAA4BslC,QACzD+d,EAAA,EAAeC,qBAAqBxwG,EAAY6kG,EAAe53C,eAAgBmjD,GAE1EvL,EAAejtH,OAASs1E,EAAA,EAA4BwlC,SACzD+d,EAAA,GAAeD,qBAAqBxwG,EAAY6kG,EAAe53C,eAAgBmjD,KAGvF,MAAM,SAAEpjI,IAAa,IAAAi8E,+BAA8BjpD,IAAe,CAAC,EAC/DhzB,GACAA,EAASD,QAEjB,CAxDI2jI,CAA4B1wG,EAAYitD,EAAgBr1E,EAAMw4H,GACvD,KAAgC9G,kCAAkCtpG,EAAY,CACjFitD,iBACAr1E,QAER,CACA,SAAS+4H,IACS,KAAgClG,4CACxC14H,QAAQ,EAAGiuB,aAAY+0F,sBACzBA,EAAgBhjH,QAAQ,EAAGk7E,iBAAgBr1E,WACvC6xH,EAAiCzpG,EAAY,CACzCitD,iBACAr1E,aAIZ,KAAgC8uH,YACpC,CACA,SAASkK,EAA6B5wG,EAAYitD,EAAgBmjD,GAC9D3G,EAAiCzpG,EAAY,CACzCitD,iBACAr1E,KAAMs1E,EAAA,EAA4BC,UACnCijD,EACP,CACA,SAASS,EAA4B7wG,EAAYitD,EAAgBmjD,GAC7D3G,EAAiCzpG,EAAY,CACzCitD,iBACAr1E,KAAMs1E,EAAA,EAA4BslC,SACnC4d,EACP,CACA,SAASU,EAA4B9wG,EAAYitD,EAAgBmjD,GAC7D3G,EAAiCzpG,EAAY,CACzCitD,iBACAr1E,KAAMs1E,EAAA,EAA4BwlC,SACnC0d,EACP,C,0LC3CA,SAASzd,EAAsB1lC,EAAgBu0B,GAC3C,MAAMR,GAAe,OAAgB/zB,GACT,iBAAjBu0B,IACPtgG,QAAQC,KAAK,kDACbqgG,EAAe1kG,OAAO0kG,IAE1B9wG,OAAO+a,OAAOu1F,EAAajL,UAAUhkG,QAASixC,IAC1CA,EAAQ0yE,QAAS,IAEhB1U,EAAajL,SAASyL,KACvBR,EAAajL,SAASyL,GAAgB,CAClCA,eACA98E,MAAO,GACPypE,QAAQ,EACR97B,YAAa,CAAC,EACdqjD,QAAQ,KAGmC,IAA/C1U,EAAajL,SAASyL,GAAckU,SACpC1U,EAAajL,SAASyL,GAAckU,QAAS,GAC7C,IAAA9C,6BAA4B3lC,IAEhC,MAAMtiE,GAAc,OAA+BsiE,GACnDtiE,EAAY5Y,QAASiuB,KACO,QAA+BA,EAAY,CAC/DitD,mBAEYl7E,QAAS8yH,IAChBA,EAAe9uB,SAASyL,KACzBqjB,EAAe9uB,SAASyL,GAAgB,CACpCjgD,SAAS,QAKzB52C,EAAY5Y,QAASiuB,IACjB,MAAM4/E,GAAY,IAAA/mC,yBAAwB74C,IAC1C,OAAsB4/E,EAAUzlG,KAExC,C,mLC7BA,SAAS42H,EAAqB9jD,EAAgBu0B,GAC1C,MAAMR,GAAe,OAAgB/zB,GACrC,IAAK+zB,EACD,MAAM,IAAI9xG,MAAM,mCAAmC+9E,KAEvD,MAAM,SAAE8oB,GAAaiL,EACrB,OAAOjL,EAASyL,GAAcrT,MAClC,CACA,SAAS6iC,EAAsB/jD,EAAgBu0B,EAAcrT,GAAS,GAClE,MAAM6S,GAAe,OAAgB/zB,GACrC,IAAK+zB,EACD,MAAM,IAAI9xG,MAAM,mCAAmC+9E,KAEvD,MAAM,SAAE8oB,GAAaiL,EACrBjL,EAASyL,GAAcrT,OAASA,EAC5B6S,GAAc+E,oBAAoByM,SA5B1C,SAAyDxR,EAAcQ,EAAcrT,GACjF,MAAM4/B,GAAoB,IAAAkD,sCAAqCjwB,EAAa/zB,gBAC5E,IAAK8gD,EACD,OAEJ,MAAMmD,EAAiBnD,EAAkB78H,IAAIswG,GACxC0vB,GAGLA,EAAen/H,QAASyzD,KACpB,IAAA2rE,qBAAoB3rE,EAAe2oC,IAE3C,CAiBQijC,CAAgDpwB,EAAcQ,EAAcrT,IAEhF,IAAAykB,6BAA4B3lC,EAChC,CACA,SAASokD,EAAwBpkD,GAC7B,MAAM+zB,GAAe,OAAgB/zB,GACrC,IAAK+zB,EACD,MAAM,IAAI9xG,MAAM,mCAAmC+9E,KAEvD,MAAM,SAAE8oB,GAAaiL,EAErB,OAD6BtwG,OAAO4B,KAAKyjG,GAAUnwF,OAAQ47F,GAAiBzL,EAASyL,GAAcrT,QACvEh3F,IAAKqqG,GAAiBjyE,SAASiyE,GAC/D,C,ogCC5CO,SAAS+oB,EAAe5C,GACM,KACR4C,eAAe5C,EAC5C,C,gDCHO,SAASmB,EAAwC9oG,EAAYitD,GAEhE,OADiC,KACD67C,wCAAwC9oG,EAAYitD,EACxF,C,eCYA,SAASqkD,IACL,KAAgC5K,YACpC,C,+DCjBO,SAASqB,EAA0C/nG,EAAYitD,GAElE,OADiC,KACD86C,0CAA0C/nG,EAAYitD,EAC1F,C,+DCHO,SAASgkD,EAAqChkD,GACjD,MAAM+zB,GAAe,OAAgB/zB,GACrC,IAAK+zB,EACD,OAEJ,MAAMuwB,EAA4BvwB,EAAa+E,oBACzCyM,QACN,IAAK+e,EACD,OAEJ,MAAM,kBAAExD,GAAsBwD,EAC9B,OAAKxD,QAAL,CAIJ,C,8PCCA,QAfA,SAAiC/tG,EAAYhB,GACpCA,IACDA,GAAoB,IAAAqwD,uBAAsB7gE,KAAMgjH,GAAOA,EAAGtqG,eAAe1Y,KAAMiK,GAAOA,EAAGte,KAAO6lB,KAAc7lB,IAElH,MAAMs3H,EAAyB,KAAMhkD,WAAW7nE,OAAQ8rH,GAAOA,EAAGl8E,cAAcz7B,KAAMtB,GAAOA,EAAGuG,oBAAsBA,KAChHvG,EAAGuH,YAAcvH,EAAGuH,aAAeA,KACzC,GAAKyxG,EAAuB//H,OAA5B,CAGA,GAAI+/H,EAAuB//H,OAAS,EAChC,MAAM,IAAIxC,MAAM,qDAAqD8vB,qBAAqCgB,oFAG9G,OAAOyxG,EAAuB,EAL9B,CAMJ,C,gDChBA,IAAItS,EAAe,CAAC,EAIpB,S,oPCcA,MAAM,sBAAE3pF,GAA0B,YAClC,MAAMs9E,UAA0B,YACnBhiH,KAAK2jD,SAAW,eAAiB,CAC1C,WAAAlkD,CAAYqiD,EAAY,CAAC,EAAGC,EAAmB,CAC3CC,0BAA2B,CAAC,QAAS,SACrCv1C,cAAe,CACXm3E,2BAA2B,EAC3BkM,aAAcC,KAGlB1uC,MAAMS,EAAWC,GACjB/hD,KAAK+2D,gBAAkB,CAAC5nC,EAASkkB,EAAY2jB,EAAcC,KACvD,MAAM37D,GAAiB,IAAAy/B,mBAAkB5L,IACnC,SAAEjzB,GAAaZ,GACf,KAAE4R,GAASmmC,GACX,OAAE5kC,GAAWvB,EAAK8nD,QACxB,IAAIi7B,EAAe/zF,EAASgnD,cAAcz0C,EAAO,IAC7CyhF,EAAeh0F,EAASgnD,cAAcz0C,EAAO,IAC7CisD,EAAO,CACPh/D,MAAO,CACH4B,EAAG2yF,EAAa,GAChBzyF,EAAGyyF,EAAa,IAEpBj+E,IAAK,CACD1U,EAAG4yF,EAAa,GAChB1yF,EAAG0yF,EAAa,KAGpBpzC,EAAkB,kBAA4B,CAAC4d,EAAKh/D,MAAM4B,EAAGo9D,EAAKh/D,MAAM8B,GAAI,CAACk9D,EAAK1oD,IAAI1U,EAAGo9D,EAAK1oD,IAAIxU,GAAI,CAACw5D,EAAa,GAAIA,EAAa,KACzI,OAAIla,GAAmBma,IAGvBg5B,EAAe/zF,EAASgnD,cAAcz0C,EAAO,IAC7CyhF,EAAeh0F,EAASgnD,cAAcz0C,EAAO,IAC7CisD,EAAO,CACHh/D,MAAO,CACH4B,EAAG2yF,EAAa,GAChBzyF,EAAGyyF,EAAa,IAEpBj+E,IAAK,CACD1U,EAAG4yF,EAAa,GAChB1yF,EAAG0yF,EAAa,KAGxBpzC,EAAkB,kBAA4B,CAAC4d,EAAKh/D,MAAM4B,EAAGo9D,EAAKh/D,MAAM8B,GAAI,CAACk9D,EAAK1oD,IAAI1U,EAAGo9D,EAAK1oD,IAAIxU,GAAI,CAACw5D,EAAa,GAAIA,EAAa,KACjIla,GAAmBma,IAK3Bj3D,KAAKm3D,qBAAuB,CAAChV,EAAK9O,KAC9B,MAAMtiB,EAAcoxB,EAAIptB,QAClB,QAAE5F,GAAY4B,EACpBsiB,EAAWuhB,aAAc,EACzB,MAAMgJ,GAAsB,IAAAC,gCAA+B1uC,EAASnvB,KAAK+0D,eACzE/0D,KAAK09D,SAAW,CACZrqB,aACAuqB,sBACAoyB,eAAe,GAEnBhwF,KAAKq3D,gBAAgBloC,GACrB,MAAM7zB,GAAiB,IAAAy/B,mBAAkB5L,IACnC,gBAAExV,GAAoBre,GAC5B,OAAsCsiE,IACtC,IAAAtG,mBAAkBnoC,GAClBgzB,EAAIoV,kBAERv3D,KAAK6+D,uBAAyB,CAAC1c,EAAK9O,EAAYyrB,KAC5C,MAAM/tC,EAAcoxB,EAAIptB,QAClB,QAAE5F,GAAY4B,EACd7jB,EAAOmmC,EAAWnmC,KACxBmmC,EAAWuhB,aAAc,EACzB,IACI2gB,EADAya,GAAgB,EAEhBlxB,EAAO2lB,cACPuL,GAAgB,EAGhBza,EAAcroE,EAAK8nD,QAAQvmD,OAAO+D,UAAW9D,GAAMA,IAAMowD,GAE7D,MAAMlB,GAAsB,IAAAC,gCAA+B1uC,EAASnvB,KAAK+0D,gBACzE,IAAAuC,mBAAkBnoC,GAClBnvB,KAAK09D,SAAW,CACZrqB,aACAuqB,sBACA2X,cACAya,iBAEJhwF,KAAKq3D,gBAAgBloC,GACrB,MAAM7zB,GAAiB,IAAAy/B,mBAAkB5L,IACnC,gBAAExV,GAAoBre,GAC5B,OAAsCsiE,GACtCzb,EAAIoV,kBAERv3D,KAAKm9D,aAAgBhb,IACjB,MAAMpxB,EAAcoxB,EAAIptB,QAClB,QAAE5F,GAAY4B,GACd,WAAEsiB,EAAU,oBAAEuqB,EAAmB,cAAE4X,EAAa,SAAEE,GAAa11E,KAAK09D,UACpE,KAAExwD,GAASmmC,EACjB,GAAImiC,IAAkBE,EAClB,OAEJ11E,KAAK8uF,eACL5hF,EAAK8nD,QAAQ0f,kBAAoB,KACjC10E,KAAKy9D,kBAAkBtuC,GACvBnvB,KAAKyhE,gBAAgBtyC,IACrB,IAAAwuC,oBAAmBxuC,GACnB,MAAM,gBAAExV,IAAoB,IAAAohB,mBAAkB5L,GAC9C,QAAkCnxB,IAA9BgC,KAAK09D,SAAS6X,YAA2B,CACzC,MAAM,OAAE9mE,GAAWvB,EAAK8nD,QAClB6rE,EAAyB,cAAcpyH,EAAO,GAAIA,EAAO,IAE/D,GADgC,cAAcA,EAAO,GAAIA,EAAO,IAClCoyH,EAAwB,CAClD,MAAMC,EAAW,CAAC,IAAIryH,EAAO,IAAK,IAAIA,EAAO,KACvCsyH,EAAkB,IAAItyH,EAAO,IAC7BuyH,EAAkB,IAAIvyH,EAAO,IAC7BwyH,EAAiB,cACvB,SAASA,EAAgBH,EAAS,GAAG,GAAKA,EAAS,GAAG,GAAIA,EAAS,GAAG,GAAKA,EAAS,GAAG,IACvF,MAAMI,EAA0C,cAChD,SAASA,GAA0CD,EAAe,GAAIA,EAAe,IACrF,MAAME,EAAyB,cAE/B,IAAIC,EADJ,SAASD,EAAwBH,EAAgB,GAAKD,EAAgB,GAAIC,EAAgB,GAAKD,EAAgB,IAG3GK,EADA,SAASD,EAAwBD,GAA2C,EAChE,CAACH,EAAiBC,GAGlB,CAACA,EAAiBD,GAElC7zH,EAAK8nD,QAAQvmD,OAAS,CAClBqyH,EAAS,GACTA,EAAS,GACTM,EAAU,GACVA,EAAU,GAElB,CACJ,CACIphI,KAAKgkF,sBACLhkF,KAAKyM,cAAcm3E,4BACnB,IAAAnvB,kBAAiBphB,EAAWqhB,gBAEhC,OAAsCkJ,GAClC4X,IACA,IAAA9T,4BAA2BruB,GAE/BrzC,KAAK09D,SAAW,KAChB19D,KAAKohE,WAAY,GAErBphE,KAAKy1E,kBAAqBtzB,IACtBniD,KAAKohE,WAAY,EACjB,MAAMrwC,EAAcoxB,EAAIptB,QAClB,cAAEgxB,EAAa,QAAE52B,GAAY4B,EAC7Bz1B,GAAiB,IAAAy/B,mBAAkB5L,IACnC,SAAEjzB,GAAaZ,GACf,cAAE4nD,GAAkBhnD,GACpB,WAAEm3C,EAAU,oBAAEuqB,EAAmB,YAAE2X,EAAW,cAAEC,GAAkBx1E,KAAK09D,SAC7E19D,KAAK21B,WAAWxG,EAASkkB,EAAY,CAAEmiC,kBACvC,MAAM,KAAEtoE,GAASmmC,EACX/xB,EAAWykC,EAAcvC,MAC/Bt2C,EAAK8nD,QAAQvmD,OAAO8mE,GAAe,IAAIj0D,GACvC,MAAM+/G,EAAoBn0H,EAAK8nD,QAAQvmD,OAAOpI,IAAI68C,GAC5C8T,EACe,CACbt7D,MAAO,CACH4B,EAAG+jI,EAAkB,GAAG,GACxB7jI,EAAG6jI,EAAkB,GAAG,IAE5BrvH,IAAK,CACD1U,EAAG+jI,EAAkB,GAAG,GACxB7jI,EAAG6jI,EAAkB,GAAG,KAe9BC,GAVSD,EAAkB,GAAG,GACrBA,EAAkB,GAAG,GAGrBA,EAAkB,GAAG,GACrBA,EAAkB,GAAG,GAIvB,cAAcA,EAAkB,GAAIA,EAAkB,IAC5B,GACjCv8G,EAAKkyC,EAA6Bt7D,MAAM4B,EAAI05D,EAA6BhlD,IAAI1U,EAC7EynB,EAAKiyC,EAA6Bt7D,MAAM8B,EAAIw5D,EAA6BhlD,IAAIxU,EAC7EoD,EAAS3D,KAAKopC,KAAKvhB,EAAKA,EAAKC,EAAKA,GAClCw8G,EAAUz8G,EAAKlkB,EACf4gI,EAAUz8G,EAAKnkB,EACf6gI,GAAQzqE,EAA6Bt7D,MAAM4B,EAC7C05D,EAA6BhlD,IAAI1U,GACjC,EACEokI,GAAQ1qE,EAA6Bt7D,MAAM8B,EAC7Cw5D,EAA6BhlD,IAAIxU,GACjC,EACEmkI,EAASF,EAAOH,EAA0BE,EAC1CI,EAASF,EAAOJ,EAA0BC,EAC1CM,EAAOJ,EAAOH,EAA0BE,EACxCM,EAAOJ,EAAOJ,EAA0BC,EAC9Cr0H,EAAK8nD,QAAQvmD,OAAO,GAAKvS,EAASk1B,cAAc,CAACuwG,EAAQC,IACzD10H,EAAK8nD,QAAQvmD,OAAO,GAAKvS,EAASk1B,cAAc,CAACywG,EAAMC,IACvDzuF,EAAW93C,aAAc,GACzB,OAAsCqiE,IACtC,IAAArqB,2BAA0BF,EAAYlkB,EAAS,EAAAqkB,YAAYm3C,gBAC3D3qF,KAAK09D,SAASgY,UAAW,GAE7B11E,KAAK21E,oBAAuBxzB,IACxBniD,KAAKohE,WAAY,EACjB,MAAMrwC,EAAcoxB,EAAIptB,QAClB,QAAE5F,GAAY4B,GACd,WAAEsiB,EAAU,oBAAEuqB,EAAmB,YAAE2X,EAAW,cAAEya,EAAa,cAAExa,GAAmBx1E,KAAK09D,SAC7F19D,KAAK21B,WAAWxG,EAASkkB,EAAY,CAAEmiC,kBACvC,MAAM,KAAEtoE,GAASmmC,EACjB,GAAI28C,EAAe,CACf,MAAM,YAAE1sC,GAAgBvyB,EAClBo/D,EAAgB7sC,EAAYE,OAC5B,QAAEghC,GAAYt3E,EAAK8nD,SACnB,cAAEyvB,GAAkBD,EAC1BC,EAAc,IAAM0L,EAAc,GAClC1L,EAAc,IAAM0L,EAAc,GAClC1L,EAAc,IAAM0L,EAAc,GAClC3L,EAAQ9O,UAAW,CACvB,MACK,QAAoB13E,IAAhBu3E,EAA2B,CAChC,MAAM,YAAEjyB,GAAgBvyB,EAClBo/D,EAAgB7sC,EAAYE,MACnBt2C,EAAK8nD,QAAQvmD,OACrBxN,QAASqN,IACZA,EAAM,IAAM6hF,EAAc,GAC1B7hF,EAAM,IAAM6hF,EAAc,GAC1B7hF,EAAM,IAAM6hF,EAAc,KAE9B98C,EAAW93C,aAAc,CAC7B,MAEIyE,KAAK+hI,kBAAkB5/E,GACvB9O,EAAW93C,aAAc,GAE7B,OAAsCqiE,GAClCvqB,EAAW93C,cACX,IAAAg4C,2BAA0BF,EAAYlkB,EAAS,EAAAqkB,YAAYm3C,iBAGnE3qF,KAAK+hI,kBAAqB5/E,IACtB,MAAMpxB,EAAcoxB,EAAIptB,QAClB,cAAEgxB,EAAa,QAAE52B,GAAY4B,EAC7Bz1B,GAAiB,IAAAy/B,mBAAkB5L,IACnC,SAAEjzB,GAAaZ,GACf,WAAE+3C,EAAYkiC,YAAaysD,GAAsBhiI,KAAK09D,UACtD,KAAExwD,GAASmmC,EACX/xB,EAAWykC,EAAcvC,MACzBy+E,EAA4B,CAC9B/lI,EAASgnD,cAAch2C,EAAK8nD,QAAQvmD,OAAO,IAC3CvS,EAASgnD,cAAch2C,EAAK8nD,QAAQvmD,OAAO,IAC3CvS,EAASgnD,cAAch2C,EAAK8nD,QAAQvmD,OAAO,IAC3CvS,EAASgnD,cAAch2C,EAAK8nD,QAAQvmD,OAAO,KAEzCyzH,EAAmB,CACrBxmI,MAAO,CACH4B,EAAG2kI,EAA0B,GAAG,GAChCzkI,EAAGykI,EAA0B,GAAG,IAEpCjwH,IAAK,CACD1U,EAAG2kI,EAA0B,GAAG,GAChCzkI,EAAGykI,EAA0B,GAAG,KAGlCE,EAAoB,CACtBzmI,MAAO,CACH4B,EAAG2kI,EAA0B,GAAG,GAChCzkI,EAAGykI,EAA0B,GAAG,IAEpCjwH,IAAK,CACD1U,EAAG2kI,EAA0B,GAAG,GAChCzkI,EAAGykI,EAA0B,GAAG,KAGlCG,EAAgB,IAAI9gH,GACpB+gH,EAAsBnmI,EAASgnD,cAAck/E,GACnD,GAA0B,IAAtBJ,GAAiD,IAAtBA,EAAyB,CACpD,MACMM,EAAyBL,EADgB,IAAtBD,EAA0B,EAAI,GAEjDO,EAAgC,SAAS,cAAeF,EAAoB,GAAKC,EAAuB,GAAID,EAAoB,GAAKC,EAAuB,IAC5JE,EAA2B,SAAS,cAAeP,EAA0BD,GAAmB,GAClGM,EAAuB,GAAIL,EAA0BD,GAAmB,GACxEM,EAAuB,IAC3B,eAAeC,EAA+BA,GAC9C,eAAeC,EAA0BA,GACzC,MAAMC,EAA2B,CAC7B/mI,MAAO,CACH4B,EAAGglI,EAAuB,GAC1B9kI,EAAG8kI,EAAuB,IAE9BtwH,IAAK,CACD1U,EAAG+kI,EAAoB,GACvB7kI,EAAG6kI,EAAoB,KAG/B,GAAIriI,KAAK0iI,0CAA0CD,EAA0BN,GACzE,OAEJ,MAAMQ,EAAmBL,EACnBxlI,EAAQkD,KAAK4iI,gBAAgBJ,EAA0BD,GAC7D,IAAIM,EAAcZ,EAA0B,GAAG,GAC3Ca,EAAcb,EAA0B,GAAG,GAC3Cc,EAAed,EAA0B,GAAG,GAC5Ce,EAAef,EAA0B,GAAG,GAChDY,GAAeF,EAAiB,GAChCG,GAAeH,EAAiB,GAChCI,GAAgBJ,EAAiB,GACjCK,GAAgBL,EAAiB,GACjC,MAAMM,EAAoBJ,EAAc5lI,KAAK66F,IAAIh7F,GAASgmI,EAAc7lI,KAAK86F,IAAIj7F,GAC3EomI,EAAqBL,EAAc5lI,KAAK86F,IAAIj7F,GAASgmI,EAAc7lI,KAAK66F,IAAIh7F,GAC5EqmI,EAAqBJ,EAAe9lI,KAAK66F,IAAIh7F,GAASkmI,EAAe/lI,KAAK86F,IAAIj7F,GAC9EsmI,EAAsBL,EAAe9lI,KAAK86F,IAAIj7F,GAASkmI,EAAe/lI,KAAK66F,IAAIh7F,GACrF+lI,EAAcI,EAAoBN,EAAiB,GACnDG,EAAcI,EAAqBP,EAAiB,GACpDI,EAAeI,EAAqBR,EAAiB,GACrDK,EAAeI,EAAsBT,EAAiB,GACtD,MAAMU,EAAgBnnI,EAASk1B,cAAc,CAACyxG,EAAaC,IACrDQ,EAAiBpnI,EAASk1B,cAAc,CAC1C2xG,EACAC,IAEJ91H,EAAK8nD,QAAQvmD,OAAOuzH,GAAqBI,EACzCl1H,EAAK8nD,QAAQvmD,OAAO,GAAK40H,EACzBn2H,EAAK8nD,QAAQvmD,OAAO,GAAK60H,CAC7B,KACK,CACD,MAAMC,EAA6C,IAAtBvB,EAA0B,EAAI,EACrDwB,EAAsB,CACxBC,gBAAiB,CACb/nI,MAAOwmI,EAAiBxmI,MACxBsW,IAAKkwH,EAAiBlwH,KAE1B0xH,iBAAkB,CACdhoI,MAAOymI,EAAkBzmI,MACzBsW,IAAKmwH,EAAkBnwH,MAGzB2xH,EAAqB,cAAc,cAAe,CACpDH,EAAoBC,gBAAgBzxH,IAAI1U,EACxCkmI,EAAoBC,gBAAgBzxH,IAAIxU,GACzC,CACCgmI,EAAoBC,gBAAgB/nI,MAAM4B,EAC1CkmI,EAAoBC,gBAAgB/nI,MAAM8B,IAExComI,EAA+B,eAAe,cAAeD,GAC7DE,EAAuB,cAAc,cAAe,CAACxB,EAAoB,GAAIA,EAAoB,IAAK,CACxGJ,EAA0BD,GAAmB,GAC7CC,EAA0BD,GAAmB,KAE3C8B,EAAiB,YAAYD,GAC7B/mI,EAAQkD,KAAK4iI,gBAAgBgB,EAA8BC,GAC3DE,EAAiC9mI,KAAK66F,IAAIh7F,GAASgnI,EACnDE,EAAqB,iBAAiB,cAAe,CACvD/B,EAA0BsB,GAAsB,GAChDtB,EAA0BsB,GAAsB,IACjDK,EAA8BG,GACjC,GAAI/jI,KAAK0iI,0CAA0C,CAC/ChnI,MAAO,CACH4B,EAAG+kI,EAAoB,GACvB7kI,EAAG6kI,EAAoB,IAE3BrwH,IAAK,CACD1U,EAAG0mI,EAAmB,GACtBxmI,EAAGwmI,EAAmB,KAE3B,CACCtoI,MAAO,CACH4B,EAAGkmI,EAAoBC,gBAAgB/nI,MAAM4B,EAC7CE,EAAGgmI,EAAoBC,gBAAgB/nI,MAAM8B,GAEjDwU,IAAK,CACD1U,EAAGkmI,EAAoBC,gBAAgBzxH,IAAI1U,EAC3CE,EAAGgmI,EAAoBC,gBAAgBzxH,IAAIxU,KAG/C,OAGJ,IAD0B,gBAA0B,CAAC6kI,EAAoB,GAAIA,EAAoB,IAAK,CAAC2B,EAAmB,GAAIA,EAAmB,IAAK,CAAC9B,EAAiBxmI,MAAM4B,EAAG4kI,EAAiBxmI,MAAM8B,GAAI,CAAC0kI,EAAiBlwH,IAAI1U,EAAG4kI,EAAiBlwH,IAAIxU,IAEtP,OAEJ0P,EAAK8nD,QAAQvmD,OAAO80H,GAAwBrnI,EAASk1B,cAAc4yG,GACnE92H,EAAK8nD,QAAQvmD,OAAOuzH,GAAqBI,CAC7C,GAEJpiI,KAAKiL,OAAUkkB,IACX,GAAInvB,KAAKohE,UAAW,CAChBphE,KAAKohE,WAAY,EACjBphE,KAAKyhE,gBAAgBtyC,GACrBnvB,KAAKy9D,kBAAkBtuC,IACvB,IAAAwuC,oBAAmBxuC,GACnB,MAAM,WAAEkkB,EAAU,oBAAEuqB,EAAmB,cAAE4X,GAAkBx1E,KAAK09D,UAC1D,KAAExwD,GAASmmC,EAQjB,OAPAA,EAAWuhB,aAAc,EACzB1nD,EAAK8nD,QAAQ0f,kBAAoB,MACjC,OAAsC9W,GAClC4X,IACA,IAAA9T,4BAA2BruB,GAE/BrzC,KAAK09D,SAAW,KACTrqB,EAAWqhB,aACtB,GAEJ10D,KAAKwhE,cAAiBryC,IAClB,KAAM8tC,uBAAwB,EAC9B9tC,EAAQ1E,iBAAiB,EAAAgH,OAAOyrC,SAAUl9D,KAAKm9D,cAC/ChuC,EAAQ1E,iBAAiB,EAAAgH,OAAO2rC,WAAYp9D,KAAKy1E,mBACjDtmD,EAAQ1E,iBAAiB,EAAAgH,OAAOowC,WAAY7hE,KAAKy1E,mBACjDtmD,EAAQ1E,iBAAiB,EAAAgH,OAAO4rC,YAAar9D,KAAKm9D,cAClDhuC,EAAQ1E,iBAAiB,EAAAgH,OAAO+rC,UAAWx9D,KAAKm9D,cAChDhuC,EAAQ1E,iBAAiB,EAAAgH,OAAO6rC,UAAWt9D,KAAKm9D,cAChDhuC,EAAQ1E,iBAAiB,EAAAgH,OAAO8rC,WAAYv9D,KAAKy1E,oBAErDz1E,KAAKyhE,gBAAmBtyC,IACpB,KAAM8tC,uBAAwB,EAC9B9tC,EAAQrE,oBAAoB,EAAA2G,OAAOyrC,SAAUl9D,KAAKm9D,cAClDhuC,EAAQrE,oBAAoB,EAAA2G,OAAO2rC,WAAYp9D,KAAKy1E,mBACpDtmD,EAAQrE,oBAAoB,EAAA2G,OAAOowC,WAAY7hE,KAAKy1E,mBACpDtmD,EAAQrE,oBAAoB,EAAA2G,OAAO4rC,YAAar9D,KAAKm9D,cACrDhuC,EAAQrE,oBAAoB,EAAA2G,OAAO+rC,UAAWx9D,KAAKm9D,cACnDhuC,EAAQrE,oBAAoB,EAAA2G,OAAO6rC,UAAWt9D,KAAKm9D,cACnDhuC,EAAQrE,oBAAoB,EAAA2G,OAAO8rC,WAAYv9D,KAAKy1E,oBAExDz1E,KAAKq3D,gBAAmBloC,IACpB,KAAM8tC,uBAAwB,EAC9B9tC,EAAQ1E,iBAAiB,EAAAgH,OAAOyrC,SAAUl9D,KAAKm9D,cAC/ChuC,EAAQ1E,iBAAiB,EAAAgH,OAAO2rC,WAAYp9D,KAAK21E,qBACjDxmD,EAAQ1E,iBAAiB,EAAAgH,OAAO4rC,YAAar9D,KAAKm9D,cAClDhuC,EAAQ1E,iBAAiB,EAAAgH,OAAO6rC,UAAWt9D,KAAKm9D,cAChDhuC,EAAQ1E,iBAAiB,EAAAgH,OAAO8rC,WAAYv9D,KAAK21E,qBACjDxmD,EAAQ1E,iBAAiB,EAAAgH,OAAO+rC,UAAWx9D,KAAKm9D,eAEpDn9D,KAAKy9D,kBAAqBtuC,IACtB,KAAM8tC,uBAAwB,EAC9B9tC,EAAQrE,oBAAoB,EAAA2G,OAAOyrC,SAAUl9D,KAAKm9D,cAClDhuC,EAAQrE,oBAAoB,EAAA2G,OAAO2rC,WAAYp9D,KAAK21E,qBACpDxmD,EAAQrE,oBAAoB,EAAA2G,OAAO4rC,YAAar9D,KAAKm9D,cACrDhuC,EAAQrE,oBAAoB,EAAA2G,OAAO6rC,UAAWt9D,KAAKm9D,cACnDhuC,EAAQrE,oBAAoB,EAAA2G,OAAO8rC,WAAYv9D,KAAK21E,qBACpDxmD,EAAQrE,oBAAoB,EAAA2G,OAAO+rC,UAAWx9D,KAAKm9D,eAEvDn9D,KAAK+3D,iBAAmB,CAACz8D,EAAgB08D,KACrC,IAAIS,GAAe,EACnB,MAAM,SAAEv8D,GAAaZ,GACf,QAAE6zB,GAAYjzB,EACpB,IAAIo4D,GAAc,IAAA4H,gBAAel8D,KAAK+0D,cAAe5lC,GACrD,IAAKmlC,GAAa1zD,OACd,OAAO63D,EAGX,GADAnE,EAAct0D,KAAKw0D,wCAAwCrlC,EAASmlC,IAC/DA,GAAa1zD,OACd,OAAO63D,EAEX,MAAMjyC,EAAWxmB,KAAK+yE,YAAY72E,GAC5Byd,EAAkBzd,EAASiyB,qBAC3B2zC,EAAiB,CACnBrd,YAAazkD,KAAKykD,YAClBd,SAAU3jD,KAAK+0D,cACf7lC,WAAY5zB,EAAeY,SAASmN,IAExC,IAAK,IAAIK,EAAI,EAAGA,EAAI4qD,EAAY1zD,OAAQ8I,IAAK,CACzC,MAAM2pC,EAAaihB,EAAY5qD,IACzB,cAAEgrD,EAAa,KAAExnD,GAASmmC,GAC1B,OAAE5kC,EAAM,kBAAEimE,GAAsBxnE,EAAK8nD,QACrC+M,EAAoBtzD,EAAOpI,IAAKqI,GAAMxS,EAASgnD,cAAcx0C,IACnEozD,EAAepN,cAAgBA,EAC/B,MAAM,MAAEt4D,EAAK,UAAE63D,EAAS,SAAE0H,EAAQ,OAAEyM,GAAWpoE,KAAKgiE,mBAAmB,CACnE3uB,aACAyuB,mBAcJ,GAZK50D,EAAKq0D,YAAY/6C,IACiB,MAAnCtZ,EAAKq0D,YAAY/6C,GAAU4pE,KAQtB/8C,EAAW93C,aAChByE,KAAKqwF,+BAA+Bh9C,EAAY15B,EAAiBre,IARjE4R,EAAKq0D,YAAY/6C,GAAY,CACzB5lB,OAAQ,KACRhE,MAAO,KACPwzF,KAAM,MAEVpwF,KAAKswF,sBAAsBj9C,EAAY15B,EAAiBre,KAKvDY,EAASiyB,qBAEV,OADA/d,QAAQC,KAAK,uCACNooD,EAEX,IAAIyd,EACJ,KAAK,IAAAC,qBAAoBzhB,GACrB,UAEC,IAAAkD,oBAAmBlD,IACnB10D,KAAK09D,UACgB,OAAtBgX,IACAwB,EAA2B,CAACnU,EAAkB2S,KAElD,MAAM6b,EAAoBv6B,SAAQ,OAAiB,oBAAqB,CAAC,IACzE,GAAIkgB,GAA4Bqa,EAAmB,CAC/C,MAAMna,EAAiB,KACvB,IAAAvI,aAAe7V,EAAkBtD,EAAe0hB,EAAgBma,EAAoBxuB,EAAoBmU,EAA0B,CAC9H95E,SAER,CACA,MAAM8lH,EAAU,GAAGxtD,WACbytD,EAAU,GAAGztD,WACb8G,EAAU,KAChB,IAAAC,UAAYzD,EAAkBtD,EAAe8G,EAASuG,EAAkB,GAAIA,EAAkB,GAAI,CAC9F3lE,QACAu/D,WACA1H,YACAmU,UACD85C,GACH,MAAME,EAAgB,KACtB,IAAA3mD,UAAYzD,EAAkBtD,EAAe0tD,EAAergD,EAAkB,GAAIA,EAAkB,GAAI,CACpG3lE,QACAu/D,WACA1H,YACAmU,UACD+5C,GACH1pD,GAAe,EACf,MAAMr0D,EAAUpE,KAAK+uF,sBAAsBjtB,EAAgBzuB,GAC3D,IAAKjvC,EAAQurB,WAAY,CACrBziB,EAAK8nD,QAAQwvB,QAAU,CACnB9O,UAAU,EACV+O,cAAe,CAAC,EAAG,EAAG,GACtBC,iBAAkB,CACdhG,QAAS,CAAC,EAAG,EAAG,GAChBrtD,SAAU,CAAC,EAAG,EAAG,GACjBC,WAAY,CAAC,EAAG,EAAG,GACnBqtD,YAAa,CAAC,EAAG,EAAG,KAG5B,QACJ,CACA,MAAM6R,EAAYxwF,KAAKyM,cAAcqjF,aAAa5iF,EAAMsZ,GACxD,IAAKgqE,GAAkC,IAArBA,EAAU5vF,OACxB,SAEJ,IAAI6vF,EACCvjF,EAAK8nD,QAAQwvB,QAAQ9O,WACtB+a,GAAsB,IAAAC,wBAAuB3uB,GAC7C70D,EAAK8nD,QAAQwvB,QAAQC,cACjBvoF,EAASk1B,cAAcq/D,IAE/B,MAAME,EAAkBz0F,EAASgnD,cAAch2C,EAAK8nD,QAAQwvB,QAAQC,eAC9DuK,EAAa,IACb4B,GAAc,IAAAC,mBAAqB74B,EAAkBtD,EAAes6B,EAAYwB,EAAWG,EAAiB5uB,EAAmB,CAAC,EAAG39D,IACjI9G,EAAGglE,EAAM9kE,EAAGmX,EAAG,MAAE/X,EAAK,OAAEC,GAAW+zF,EAC3C1jF,EAAK8nD,QAAQwvB,QAAQE,iBAAmB,CACpChG,QAASxiF,EAASk1B,cAAc,CAACkxC,EAAM3tD,IACvC0c,SAAUn1B,EAASk1B,cAAc,CAACkxC,EAAO1lE,EAAO+X,IAChD2c,WAAYp1B,EAASk1B,cAAc,CAACkxC,EAAM3tD,EAAM9X,IAChD8hF,YAAaziF,EAASk1B,cAAc,CAACkxC,EAAO1lE,EAAO+X,EAAM9X,IAEjE,CACA,OAAO47D,GAEXz4D,KAAK0iI,0CAA4C,CAACR,EAAkBC,KAChE,MAAM8B,EAA8B,cACpC,SAASA,EAA6B9B,EAAkBnwH,IAAI1U,EAAI6kI,EAAkBzmI,MAAM4B,EAAG6kI,EAAkBnwH,IAAIxU,EAAI2kI,EAAkBzmI,MAAM8B,GAC7I,eAAeymI,EAA6BA,GAC5C,MAAMC,EAA4B,CAC9BxoI,MAAO,CACH4B,EAAG6kI,EAAkBzmI,MAAM4B,EAAqC,GAAjC2mI,EAA4B,GAC3DzmI,EAAG2kI,EAAkBzmI,MAAM8B,EAAqC,GAAjCymI,EAA4B,IAE/DjyH,IAAK,CACD1U,EAAG6kI,EAAkBnwH,IAAI1U,EAAqC,GAAjC2mI,EAA4B,GACzDzmI,EAAG2kI,EAAkBnwH,IAAIxU,EAAqC,GAAjCymI,EAA4B,KAKjE,OAFkC,gBAA0B,CAACC,EAA0BxoI,MAAM4B,EAAG4mI,EAA0BxoI,MAAM8B,GAAI,CAAC0mI,EAA0BlyH,IAAI1U,EAAG4mI,EAA0BlyH,IAAIxU,GAAI,CAAC0kI,EAAiBxmI,MAAM4B,EAAG4kI,EAAiBxmI,MAAM8B,GAAI,CAAC0kI,EAAiBlwH,IAAI1U,EAAG4kI,EAAiBlwH,IAAIxU,KAIhTwC,KAAKswF,sBAAwB,CAACj9C,EAAY15B,EAAiBre,KACvD,MAAM,KAAE4R,GAASmmC,GACX,QAAElkB,GAAY7zB,EAAeY,SAC7Bm1F,EAAYnkF,EAAK8nD,QAAQvmD,OAAO,GAChC6iF,EAAYpkF,EAAK8nD,QAAQvmD,OAAO,GAChCy2F,EAAYh4F,EAAK8nD,QAAQvmD,OAAO,GAChC01H,EAAYj3H,EAAK8nD,QAAQvmD,OAAO,IAChC,YAAE8yD,GAAgBr0D,EAClBqkF,EAAY3xF,OAAO4B,KAAK+/D,GAC9B,IAAK,IAAI73D,EAAI,EAAGA,EAAI6nF,EAAU3wF,OAAQ8I,IAAK,CACvC,MAAM8c,EAAW+qE,EAAU7nF,GACrBlO,EAAQwE,KAAK4/E,mBAAmBp5D,GACtC,IAAKhrB,EACD,SAEJ,MAAM,UAAEmpB,EAAS,WAAE9c,GAAerM,EAC5Bi0F,EAAS/qD,EAAsB/f,EAAW0sE,GAC1C3B,EAAShrD,EAAsB/f,EAAW2sE,GAC1C8yC,EAAS1/F,EAAsB/f,EAAWugF,GAC1Cm/B,EAAS3/F,EAAsB/f,EAAWw/G,GAC1CG,EAAW,CAAC70C,EAAQC,GACpB60C,EAAW,CAACH,EAAQC,IAClB7nI,MAAOgoI,EAAQp0C,KAAM+Y,IAAW,QAAiC3tG,EAAO8oI,IACxE9nI,MAAOioI,EAAQr0C,KAAMiZ,IAAW,QAAiC7tG,EAAO+oI,GAC1Ej7B,EAAQtpG,KAAKkxF,iBAAiBG,EAAWC,GAAakzC,EACtDj7B,EAAQvpG,KAAKkxF,iBAAiBgU,EAAWi/B,GAAaM,EACtD7jI,EAAS0oG,EAAQC,EAAQD,EAAQC,EACjC3sG,EAAQ0sG,EAAQC,EAAQA,EAAQD,EAChClZ,EAAOkZ,EAAQC,EAAQJ,EAASE,EAChCq7B,EAAYp7B,EAAQC,EAAQF,EAASF,EAC3CnpG,KAAKwvF,gBAAgBC,EAAQC,EAAQ00C,EAAQC,EAAQx8H,GAC9C7H,KAAKgkF,sBAAuB,EAC5BhkF,KAAKgkF,sBAAuB,EACnCziB,EAAY/6C,GAAY,CACpB5lB,SACAhE,QACAwzF,OACAs0C,YAER,CACA,MAAMnpI,EAAc83C,EAAW93C,YAK/B,OAJA83C,EAAW93C,aAAc,EACrBA,IACA,IAAAg4C,2BAA0BF,EAAYlkB,EAAS,EAAAqkB,YAAYg+C,cAExDjwB,GAEXvhE,KAAKwvF,gBAAkB,CAACC,EAAQC,EAAQ00C,EAAQC,EAAQx8H,IAC5C,kCAA8B4nF,EAAQ5nF,IAC1C,kCAA8B6nF,EAAQ7nF,IACtC,kCAA8Bu8H,EAAQv8H,IACtC,kCAA8Bw8H,EAAQx8H,GAE9C7H,KAAK4iI,gBAAkB,CAAC+B,EAASC,IACtB3nI,KAAKi5C,MAAMyuF,EAAQ,GAAKC,EAAQ,GAAKD,EAAQ,GAAKC,EAAQ,GAAID,EAAQ,GAAKC,EAAQ,GAAKD,EAAQ,GAAKC,EAAQ,IAExH5kI,KAAKqwF,gCAAiC,OAASrwF,KAAKswF,sBAAuB,IAAK,CAAES,UAAU,GAChG,CACA,gBAAAryB,CAAiBvc,GACb,MAAMpxB,EAAcoxB,EAAIptB,QAClB,cAAEgxB,EAAa,QAAE52B,GAAY4B,EAC7BzP,EAAWykC,EAAcvC,MAC/BxjD,KAAKohE,WAAY,EACjB,MAAM/tB,EAAarzC,KAAK2uF,iBAAiBxsC,EAAK,CAC1C,IAAI7gC,GACJ,IAAIA,GACJ,IAAIA,GACJ,IAAIA,MAER,IAAA8zC,eAAc/hB,EAAYlkB,GAC1B,MAAMyuC,GAAsB,IAAAC,gCAA+B1uC,EAASnvB,KAAK+0D,eAazE,OAZA/0D,KAAK09D,SAAW,CACZrqB,aACAuqB,sBACA2X,YAAa,EACbya,eAAe,EACfxa,eAAe,EACfE,UAAU,GAEd11E,KAAKwhE,cAAcryC,IACnB,IAAAmoC,mBAAkBnoC,GAClBgzB,EAAIoV,kBACJ,OAAsCqG,GAC/BvqB,CACX,QACSrzC,KAAKivF,QAAU,CAAC//D,EAAYs2B,EAAMphD,KACvC,MAAM9I,GAAiB,IAAA68E,+BAA8BjpD,GACrD,IAAK5zB,EACD,OAEJ,MAAM,oBAAE0O,EAAmB,kBAAEzD,EAAiB,gBAAEgb,EAAe,SAAEilB,EAAQ,SAAEtqC,GAAc8D,KAAKgxF,YAAYgxB,EAAmB1mH,EAAgBkqD,EAAK,GAAIphD,IAC/Im+G,EAAWC,GAAah9D,GACxBi9D,EAAQC,GAAUH,GAClBI,EAAQC,GAAUJ,EACnB/zG,EAAS,CAACg0G,EAAQC,EAAQC,EAAQC,IAClC,aAAE5mC,KAAiBiV,GAAwB7sF,GAAW,CAAC,EACvDivC,EAAa,CACfqhB,cAAetwD,GAASswD,eAAiB,EAAA3jB,UAAA,SACzC7jC,KAAM,CACF8nD,QAAS,CACLvmD,SACAimE,kBAAmB,KACnB8P,QAAS,CACL9O,UAAU,EACV+O,cAAe,CAAC,EAAG,EAAG,GACtBC,iBAAkB,CACdhG,QAAS,CAAC,EAAG,EAAG,GAChBrtD,SAAU,CAAC,EAAG,EAAG,GACjBC,WAAY,CAAC,EAAG,EAAG,GACnBqtD,YAAa,CAAC,EAAG,EAAG,MAIhCpd,YAAa,CAAC,GAElB3M,aAAa,EACbs6B,eAAe,EACf3zF,aAAa,EACb2xF,UAAU,EACVC,WAAW,EACXjmF,SAAU,CACNy8C,SAAUnd,EAASuuB,cACnBxzC,kBACAvX,sBACAzD,uBACG0qF,IAKX,OAFA,IAAA77B,eAAc/hB,EAAYn3C,EAASizB,UACnC,OAAsC,CAACjzB,EAASmN,KACzCgqC,EACR,CACH,gBAAA69C,CAAiBC,EAAMC,GACnB,MAAMtsE,EAAKqsE,EAAK,GAAKC,EAAK,GACpBrsE,EAAKosE,EAAK,GAAKC,EAAK,GACpBpsE,EAAKmsE,EAAK,GAAKC,EAAK,GAC1B,OAAOn0F,KAAKopC,KAAKvhB,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAC9C,EAEJ,SAAS+qE,EAAoB7iF,EAAMsZ,GAC/B,MAAM,YAAE+6C,EAAW,MAAE3tC,GAAU1mB,GACzB,OAAEtM,EAAM,MAAEhE,EAAK,KAAEwzF,GAAS7uB,EAAY/6C,GACtCgqE,EAAY,GAIlB,OAHI58D,GACA48D,EAAU7nF,KAAKirB,QAEJ51B,IAAX4C,GAGJ4vF,EAAU7nF,KAAK,MAAM,wBAAoB/H,MAAWwvF,GAAQA,IAAQ,MAAM,wBAAoBxzF,MAAUwzF,KAF7FI,CAIf,CACA,S,qFCzuBA,MAAM2yB,UAA8C,WACvCnjH,KAAK2jD,SAAW,uCAAyC,CAClE,WAAAlkD,CAAYqiD,GAORT,MANqB,EAAAtQ,UAAA,UAAoB,CACrCtkC,cAAe,CACXi+E,gBAAgB,EAChB44B,mBAAmB,IAExBxhE,GAEP,CACA,yBAAA66C,GACI,OAAO,CACX,CACA,wBAAAO,CAAyBC,GACrB,MAAM9pD,EAAa8pD,EAAc9pD,YAC3B,YAAE93C,GAAgB83C,EAClBwxF,EAAexjF,MAAM67C,yBAAyBC,GACpD,GAAI5hG,EAAa,CACb,MAAM,eAAE4gF,GAAmB9oC,EAAWnmC,KAAKgjG,cAC3C,IAAAqK,iCAAgCp+B,EACpC,CACA,OAAO0oD,CACX,EAEJ,S,iUCFA,MAAM,sBAAEC,GAA0B,EAAA5sF,UAC5B,QAAEv2B,GAAY,EAAA6xC,UACd2f,EAAqB,EAAIxxD,EAC/B,MAAMojH,UAA8B,WACvB/kI,KAAK2jD,SAAW,mBAAqB,CAC9C,WAAAlkD,CAAYqiD,EAAY,CAAC,EAAGC,EAAmB,CAC3CC,0BAA2B,CAAC,QAAS,SACrCv1C,cAAe,CACX+mF,gBAAgB,EAChBprB,QAAQ,EACRwb,2BAA2B,EAC3BoV,+BAAgC,EAAA9kB,iBAAiBC,MACjD6wD,+BAAgC,CAC5Bn8E,SAAS,EACTnjB,OAAQ,GAEZ49E,mBAAmB,EACnB2hB,sBAAuB,GACvBC,iCAAkC,EAClCC,eAAe,EACfC,mBAAoB,EACpBC,UAAW,CACPC,aAAa,EACbC,cAAc,EACdC,0BAA2B,GAC3BC,2BAA4B,IAEhC5sH,cAAe,CACXgwC,SAAS,EACT61C,wBAAyB,MAE7Br+E,SAAU,CACNwoC,SAAS,EACTowC,QAAS,IAEbysC,6BAA6B,EAC7Bh7C,gBAAgB,EAChBoF,aAAcC,EACd2D,gBAAiB,EAAAC,wBAGrBtyC,MAAMS,EAAWC,GACjB/hD,KAAKohE,WAAY,EACjBphE,KAAK2lI,iBAAkB,EACvB3lI,KAAK4lI,eAAgB,EACrB5lI,KAAK0+D,iBAAoBvc,IACrB,MAAMpxB,EAAcoxB,EAAIptB,QAClB,QAAE5F,GAAY4B,EACdsiB,EAAarzC,KAAK2uF,iBAAiBxsC,GACzCniD,KAAKo1D,cAAc/hB,EAAYlkB,GAC/B,MAAMyuC,GAAsB,IAAAC,gCAA+B1uC,EAASnvB,KAAK+0D,eAIzE,OAHA/0D,KAAK6lI,aAAa1jF,EAAK9O,EAAYuqB,GACnCzb,EAAIoV,kBACJ,OAAsCqG,GAC/BvqB,GAEXrzC,KAAK6+D,uBAAyB,CAAC1c,EAAK9O,EAAYyrB,KAC5C,MAAM/tC,EAAcoxB,EAAIptB,QAClB,QAAE5F,GAAY4B,EACd6sC,GAAsB,IAAAC,gCAA+B1uC,EAASnvB,KAAK+0D,eACzE/0D,KAAK8lI,2BAA2B3jF,EAAK9O,EAAYuqB,EAAqBkB,IAE1E9+D,KAAKm3D,qBAAuB,CAAChV,EAAK9O,KAC9B,MAAMtiB,EAAcoxB,EAAIptB,QAClB,QAAE5F,GAAY4B,EACd6sC,GAAsB,IAAAC,gCAA+B1uC,EAASnvB,KAAK+0D,eACrE1hB,EAAWnmC,KAAKolC,QAAQsH,OACxB55C,KAAK+lI,0BAA0B5jF,EAAK9O,EAAYuqB,GAGhD59D,KAAKgmI,wBAAwB7jF,EAAK9O,EAAYuqB,GAElDzb,EAAIoV,kBAERv3D,KAAK+2D,gBAAkB,CAAC5nC,EAASkkB,EAAY2jB,EAAcC,KACvD,MAAM37D,GAAiB,IAAAy/B,mBAAkB5L,IACnC,SAAEjzB,GAAaZ,GACb48C,SAAUzpC,GAAW4kC,EAAWnmC,KAAKolC,QAC7C,IAAI2zF,EAAgB/pI,EAASgnD,cAAcz0C,EAAO,IAClD,IAAK,IAAI/E,EAAI,EAAGA,EAAI+E,EAAO7N,OAAQ8I,IAAK,CACpC,MAAM8gC,EAAKy7F,EACL7nF,EAAKliD,EAASgnD,cAAcz0C,EAAO/E,IAEzC,GADmBo7H,EAAsB9tE,EAAcxsB,EAAI4T,EAAI6Y,GAE3D,OAAO,EAEXgvE,EAAgB7nF,CACpB,CACA,IAAK/K,EAAWnmC,KAAKolC,QAAQsH,OACzB,OAAO,EAEX,MAAMssF,EAAShqI,EAASgnD,cAAcz0C,EAAO,IACvC03H,EAAOjqI,EAASgnD,cAAcz0C,EAAOA,EAAO7N,OAAS,IAC3D,OAAOkkI,EAAsB9tE,EAAckvE,EAAQC,EAAMlvE,IAE7Dj3D,KAAKiL,OAAUkkB,IACX,MAAMiyC,EAAYphE,KAAKohE,UACjBwkE,EAAgB5lI,KAAK4lI,cACrBD,EAAkB3lI,KAAK2lI,gBACzBvkE,EACAphE,KAAKomI,cAAcj3G,GAEdy2G,EACL5lI,KAAKqmI,sBAAsBl3G,GAEtBw2G,GACL3lI,KAAKsmI,wBAAwBn3G,IAGrCnvB,KAAKswF,sBAAwB,CAACj9C,EAAYn3C,EAAUyd,EAAiBre,KACjE,MAAM,KAAE4R,GAASmmC,GACX,YAAEkuB,GAAgBr0D,GAChBgrC,SAAUzpC,EAAM,OAAEmrC,GAAW1sC,EAAKolC,QACpCi/C,EAAY3xF,OAAO4B,KAAK+/D,GAC9B,IAAK,IAAI73D,EAAI,EAAGA,EAAI6nF,EAAU3wF,OAAQ8I,IAAK,CACvC,MAAM8c,EAAW+qE,EAAU7nF,GACrBlO,EAAQwE,KAAK4/E,mBAAmBp5D,GACtC,IAAKhrB,EACD,SAEJ,MAAM,UAAEmpB,EAAS,SAAEzd,GAAa1L,EAC1BumE,EAAoBtzD,EAAOpI,IAAKqI,GAAMxS,EAASgnD,cAAcx0C,IAC7DiqG,EAAsB,CACxBp6G,aAAa,OAAoBrC,EAAUsqB,GAC3CosE,YAAa5yF,KAAK4yF,YAAY12F,EAAUsqB,EAAU6sB,EAAWnsC,SAASX,oBAEpEusF,GAAe,OAAmB5rF,EAAS2gC,SAAUwL,EAAWnsC,SAASX,kBAAmBoyG,GAC5F4tB,GAAkB,QAAiC/qI,EAAO,KAC5D,MAAM08C,EAAWhrC,EAAKolC,QAAQ4F,SACxBsuF,EAAYtuF,EAASt3C,OACrB+pH,EAAoB,IAAIjsH,MAAM8nI,GACpC,IAAK,IAAI98H,EAAI,EAAGA,EAAI88H,EAAW98H,IAC3BihH,EAAkBjhH,GAAKxN,EAASgnD,cAAchL,EAASxuC,IAE3D,MAAQic,KAAMo2E,EAAYr4D,KAAMs4D,EAAYt2E,KAAMu2E,EAAYx4D,KAAMy4D,GAAgB,mBAAsByuB,GACpGvuB,EAAiBlgG,EAASk1B,cAAc,CAAC6qE,EAAYC,IACrDG,EAAiB,kCAA8B13E,EAAWy3E,GAC1DE,EAAqBpgG,EAASk1B,cAAc,CAC9C2qE,EACAC,IAGJ,MAAO,CAACK,EADmB,kCAA8B13E,EAAW23E,MAGlEptD,EAAc6yB,EAAkB,GAChC25B,EAAqBx/F,EAASk1B,cAAc8d,GAC5CysD,EAAcz/F,EAASk1B,cAAc,CACvC8d,EAAY,GAAK,EACjBA,EAAY,KAEV0sD,EAAc1/F,EAASk1B,cAAc,CACvC8d,EAAY,GACZA,EAAY,GAAK,IAEf2sD,EAAW,cAAcH,EAAoBC,GAC7CG,EAAW,cAAcJ,EAAoBE,GAC/ChiD,EACA55C,KAAKymI,wBAAwB,CACzBjgH,WACAtqB,WACA6lE,oBACAtzD,SACAkW,YACAzd,WACAq6D,cACAuxB,eACAyzC,kBACA1qC,WACAC,aAIJ97F,KAAK0mI,sBAAsB,CACvBx/H,WACAsf,WACA+6C,cACAuxB,eACAyzC,kBACA93H,UAGZ,CACA,MAAMlT,EAAc83C,EAAW93C,YAK/B,OAJA83C,EAAW93C,aAAc,EACrBA,IACA,IAAAg4C,2BAA0BF,EAAY/3C,EAAeY,SAASizB,QAAS,EAAAqkB,YAAYg+C,cAEhFjwB,GAEXvhE,KAAKk7F,aAAe,CAAC7nD,EAAYn3C,EAAUZ,EAAgB08D,KACvD,MAAM,KAAE9qD,GAASmmC,EACX7sB,EAAWxmB,KAAK+yE,YAAY72E,GAC5B4lE,EAAiB,CACnBrd,YAAazkD,KAAKykD,YAClBd,SAAU3jD,KAAK+0D,cACf7lC,WAAY5zB,EAAeY,SAASmN,GACpCqrD,cAAerhB,EAAWqhB,eAExBtwD,EAAUpE,KAAK+uF,sBAAsBjtB,EAAgBzuB,GAC3D,IAAKjvC,EAAQurB,WACT,OAEJ,MAAM6gE,EAAYxwF,KAAKyM,cAAcqjF,aAAa5iF,EAAMsZ,GACxD,IAAKgqE,GAAkC,IAArBA,EAAU5vF,OACxB,OAEJ,MAAMmhE,EAAoB70D,EAAKolC,QAAQ4F,SAAS7xC,IAAKqI,GAAMxS,EAASgnD,cAAcx0C,IAClF,IAAKxB,EAAK8nD,QAAQwvB,QAAQ9O,SAAU,CAChC,MAAM+a,GAAsB,IAAAC,wBAAuB3uB,GACnD70D,EAAK8nD,QAAQwvB,QAAQC,cACjBvoF,EAASk1B,cAAcq/D,EAC/B,CACA,MAAME,EAAkBz0F,EAASgnD,cAAch2C,EAAK8nD,QAAQwvB,QAAQC,eAE9DmM,GAAc,IAAAC,mBAAkB74B,EAAkB3kB,EAAWqhB,eAAiB,GADjE,IACiF87B,EAAWG,EAAiB5uB,EAAmB,CAAC,EAAG39D,IAC/I9G,EAAGglE,EAAM9kE,EAAGmX,EAAG,MAAE/X,EAAK,OAAEC,GAAW+zF,EAC3C1jF,EAAK8nD,QAAQwvB,QAAQE,iBAAmB,CACpChG,QAASxiF,EAASk1B,cAAc,CAACkxC,EAAM3tD,IACvC0c,SAAUn1B,EAASk1B,cAAc,CAACkxC,EAAO1lE,EAAO+X,IAChD2c,WAAYp1B,EAASk1B,cAAc,CAACkxC,EAAM3tD,EAAM9X,IAChD8hF,YAAaziF,EAASk1B,cAAc,CAACkxC,EAAO1lE,EAAO+X,EAAM9X,OAGjE,OAAiBmD,OACjB,OAAuBA,OACvB,OAA8BA,OAC9B,OAA4BA,OAC5B,OAA+BA,OAC/B,OAAsBA,MACtBA,KAAKqwF,gCAAiC,OAASrwF,KAAKswF,sBAAuB,IAAK,CAAES,UAAU,GAChG,CACA,uCAAAv8B,CAAwCrlC,EAASmlC,GAC7C,IAAKA,IAAgBA,EAAY1zD,OAC7B,OAEJ,MAAMtF,GAAiB,IAAAy/B,mBAAkB5L,IACnC,SAAEjzB,GAAaZ,EACrB,IAAIqrI,EACJ,GAAIzqI,aAAoB,EAAA+2C,eAAgB,CACpC,MAAMzwB,EAAStmB,EAASumB,aAClB,yBAAEC,GAA6B,iDAA6CxmB,EAAUsmB,GAC5FmkH,EAAuB3mI,KAAK4mI,6BAA6BtyE,EAAa9xC,EAAQE,EAClF,MAEIikH,GAAuB,IAAAE,6BAA4B3qI,EAAUo4D,GAEjE,OAAOqyE,CACX,CACA,4BAAAC,CAA6BtyE,EAAa9xC,EAAQE,GAC9C,MAAM,gBAAEnB,GAAoBiB,EACtBskH,EAAiCxyE,EAAYx/C,OAAQiyH,IACvD,IAAIC,EAA4BD,EAAG7/H,SAASqa,gBAC5C,IAAKwlH,EAAG7/H,SAASX,oBACZygI,GACDD,EAAG7/H,SAAS8C,oBAAqB,CACjC,IAAK,MAAMsE,KAASy4H,EAAG75H,KAAKolC,QAAQ4F,SAAU,CAC1C,MAAM+uF,EAAS,SAAS,cAAe34H,EAAOkU,EAAOG,YAC/CjB,EAAa,SAASulH,EAAQzkH,EAAOjB,iBAC3C,IAAK,oBAAgBG,EAAY,GAC7B,OAAO,CAEf,CAGA,OAFAqlH,EAAG7/H,SAASqa,gBAAkBiB,EAAOjB,gBACrCwlH,EAAG7/H,SAAS4tD,iBAAmBtyC,EAAOG,YAC/B,CACX,CACA,IAAKqkH,EAA2B,CAC5B,MAAM,kBAAEzgI,GAAsBwgI,EAAG7/H,UAC3B,wBAAEgB,GAA4B,EAAAkrB,SAAA,IAAa,mBAAoB7sB,GAC/D4U,EAAe,gBAAgBjT,EAAwB,GAAIA,EAAwB,GAAIA,EAAwB,IAC/GkT,EAAe,gBAAgBlT,EAAwB,GAAIA,EAAwB,GAAIA,EAAwB,IACrH8+H,EAA4B,cAC5B,WAAWA,EAA2B7rH,EAAcC,GACpD2rH,EAAG7/H,SAASqa,gBAAkBylH,CAClC,CACA,MAAMnoD,EAAa5hF,KAAK6e,IAAI,SAASyF,EAAiBylH,IAClD7zD,EACJ,OAAO6zD,GAA6BnoD,IAExC,IAAKioD,EAA+BlmI,OAChC,MAAO,GAEX,MAAMghB,EAA+Bc,EAA2B,GAC1D,WAAEC,GAAeH,EACjB0kH,EAAyB,GAC/B,IAAK,MAAM7zF,KAAcyzF,EAAgC,CACrD,MACMx4H,EADO+kC,EAAWnmC,KACLolC,QAAQ4F,SAAS,GACpC,IAAK7E,EAAW85C,UACZ,SAEJ,MAAMprE,EAAM,cACZ,SAASA,EAAKY,EAAYrU,GAC1B,MAAM04C,EAAM,SAASjlC,EAAKR,GACtBtkB,KAAK6e,IAAIkrC,GAAOplC,GAChBslH,EAAuBv+H,KAAK0qC,EAEpC,CACA,OAAO6zF,CACX,CACA,yBAAAvqC,GACI,OAAO,CACX,CACA,gBAAAhO,CAAiBxsC,GACb,MAAM7gC,EAAW6gC,EAAIptB,OAAOgxB,cAAcvC,MACpCg7C,EAAoBn9C,MAAMstC,iBAAiBxsC,GAcjD,OAVmB,sBAAkBq8C,EAAmB,CACpDtxF,KAAM,CACFolC,QAAS,CACL4F,SAAU,CAAC,IAAI52B,KAEnBsS,MAAO,GACP2tC,YAAa,CAAC,GAElBm9B,wBAX6BrrD,IAC7BA,EAAWnmC,KAAK8nD,QAAQvmD,OAAO7N,OAAS,IAahD,CACA,kBAAAohE,CAAmBtgE,GACf,OAAO2/C,MAAM2gB,mBAAmBtgE,EACpC,CACA,wBAAAw7F,CAAyBC,GACrB,MAAM,eAAE7hG,EAAc,SAAEkrB,EAAQ,iBAAEwxC,GAAqBmlC,EACjD9pD,EAAa8pD,EAAc9pD,WACjC,IAAIolB,GAAe,EACnB,MAAM,SAAEv8D,EAAQ,gBAAEyd,GAAoBre,EAChC8lE,EAAYphE,KAAKohE,UACjBwkE,EAAgB5lI,KAAK4lI,cACrBD,EAAkB3lI,KAAK2lI,gBAC7B,GAAMvkE,GAAawkE,GAAiBD,EAS/B,CACD,MAAM57C,EAAsB/pF,KAAK8pF,WAAWz2C,WAAWqhB,cACvD,GAAIrhB,EAAWqhB,gBAAkBq1B,EAC7B,GAAI3oB,EACAphE,KAAKmnI,wBAAwB7rI,EAAgB08D,EAAkB3kB,QAE9D,GAAIsyF,EACL3lI,KAAKonI,+BAA+B9rI,EAAgB08D,EAAkB3kB,OAErE,KAAIuyF,EAIL,MAAM,IAAIxnI,MAAM,WAAW4B,KAAK+0D,4CAHhC/0D,KAAKqnI,6BAA6B/rI,EAAgB08D,EAAkB3kB,EAIxE,MAGIrzC,KAAKyM,cAAci5H,6BACyB,IAA5CryF,EAAWnmC,KAAKolC,QAAQ4F,SAASt3C,OACjCZ,KAAKsnI,6BAA6BhsI,EAAgB08D,EAAkB3kB,GAGpErzC,KAAKunI,cAAcjsI,EAAgB08D,EAAkB3kB,GAG7DolB,GAAe,CACnB,MAlCQz4D,KAAKyM,cAAci5H,6BACyB,IAA5CryF,EAAWnmC,KAAKolC,QAAQ4F,SAASt3C,OACjCZ,KAAKsnI,6BAA6BhsI,EAAgB08D,EAAkB3kB,GAGpErzC,KAAKunI,cAAcjsI,EAAgB08D,EAAkB3kB,GA8B7D,GAAKrzC,KAAKyM,cAAci+E,eAKxB,OAFA1qF,KAAKwnI,wBAAwBn0F,EAAY7sB,EAAUtqB,EAAUyd,EAAiBre,GAC9E0E,KAAKk7F,aAAa7nD,EAAYn3C,EAAUZ,EAAgB08D,GACjDS,CACX,CACA,uBAAA+uE,CAAwBn0F,EAAY7sB,EAAUtqB,EAAUyd,EAAiBre,GACrE,MAAMyuF,EAAsB/pF,KAAK8pF,YAAYz2C,WAAWqhB,cACxD,IAAIrhB,EAAWqhB,gBAAkBq1B,GAC5B/pF,KAAK8pF,YAAYkG,iBAGjBhwF,KAAK8pF,YAAYkG,cAAe,CACjC,MAAM,KAAE9iF,GAASmmC,EACZnmC,EAAKq0D,YAAY/6C,IAAW4pE,KAYxB/8C,EAAW93C,aAChByE,KAAKqwF,+BAA+Bh9C,EAAYn3C,EAAUyd,EAAiBre,IAZ3E4R,EAAKq0D,YAAY/6C,GAAY,CACzBqhB,SAAU,KACVutD,KAAM,KACNjmF,IAAK,KACL+2B,KAAM,KACNC,OAAQ,KACRgvD,SAAU,KACV/E,KAAM,MAEVpwF,KAAKswF,sBAAsBj9C,EAAYn3C,EAAUyd,EAAiBre,GAK1E,CACJ,CACA,uBAAAmrI,EAAwB,SAAEvqI,EAAQ,OAAEuS,EAAM,UAAEkW,EAAS,SAAEzd,EAAQ,YAAEq6D,EAAW,SAAE/6C,EAAQ,aAAEssE,EAAY,kBAAE/wB,EAAiB,gBAAEwkE,EAAe,SAAE1qC,EAAQ,SAAEC,IAChJ,MAAM,MAAEt/F,EAAK,SAAE24F,EAAQ,KAAE/E,GAASm2C,GAC5B,aAAEvhI,GAAiB9I,EAASq8B,eAC5BkvG,EAAgB,kCAA8B9iH,EAAWlW,EAAO,IACtEg5H,EAAc,GAAKxqI,KAAK+Q,MAAMy5H,EAAc,IAC5CA,EAAc,GAAKxqI,KAAK+Q,MAAMy5H,EAAc,IAC5CA,EAAc,GAAKxqI,KAAK+Q,MAAMy5H,EAAc,IAC5C,IAAIp6F,EAAOo6F,EAAc,GACrBn6F,EAAOm6F,EAAc,GACrBl6F,EAAOk6F,EAAc,GACrBj6F,EAAOi6F,EAAc,GACrBh6F,EAAOg6F,EAAc,GACrB/5F,EAAO+5F,EAAc,GACzB,IAAK,IAAIx1H,EAAI,EAAGA,EAAIxD,EAAO7N,OAAQqR,IAAK,CACpC,MAAMw1H,EAAgB,kCAA8B9iH,EAAWlW,EAAOwD,IACtEw1H,EAAc,GAAKxqI,KAAK+Q,MAAMy5H,EAAc,IAC5CA,EAAc,GAAKxqI,KAAK+Q,MAAMy5H,EAAc,IAC5CA,EAAc,GAAKxqI,KAAK+Q,MAAMy5H,EAAc,IAC5Cp6F,EAAOpwC,KAAKa,IAAIuvC,EAAMo6F,EAAc,IACpCn6F,EAAOrwC,KAAKkS,IAAIm+B,EAAMm6F,EAAc,IACpCl6F,EAAOtwC,KAAKa,IAAIyvC,EAAMk6F,EAAc,IACpCj6F,EAAOvwC,KAAKkS,IAAIq+B,EAAMi6F,EAAc,IACpCh6F,EAAOxwC,KAAKa,IAAI2vC,EAAMg6F,EAAc,IACpC/5F,EAAOzwC,KAAKkS,IAAIu+B,EAAM+5F,EAAc,GACxC,CACA,MAAMC,EAAiB,kCAA8B/iH,EAAWlW,EAAO,IACvEi5H,EAAe,GAAKzqI,KAAK+Q,MAAM05H,EAAe,IAC9CA,EAAe,GAAKzqI,KAAK+Q,MAAM05H,EAAe,IAC9CA,EAAe,GAAKzqI,KAAK+Q,MAAM05H,EAAe,IAC9C,IAAItyC,EAAO,EAAAl9C,SAAA,QAAiB6pB,GAAqBvlE,EAAQA,EACzD44F,GAAQyG,EAAWC,EACnB,MAAM7E,GAAY,OAAmBxoF,EAAQmrC,QAAUp9C,EACjDmrI,EAAS,KAAQr6F,EAAOD,GACxBu6F,EAAS,KAAQp6F,EAAOD,GACxBs6F,EAAS,KAAQn6F,EAAOD,GAC9BJ,EAAOpwC,KAAK+Q,MAAMq/B,EAAOs6F,GACzBr6F,EAAOrwC,KAAK6qI,KAAKx6F,EAAOq6F,GACxBp6F,EAAOtwC,KAAK+Q,MAAMu/B,EAAOq6F,GACzBp6F,EAAOvwC,KAAK6qI,KAAKt6F,EAAOo6F,GACxBn6F,EAAOxwC,KAAK+Q,MAAMy/B,EAAOo6F,GACzBn6F,EAAOzwC,KAAK6qI,KAAKp6F,EAAOm6F,GACxB,MAAM3yH,EAAY,CACd,CAACm4B,EAAMC,GACP,CAACC,EAAMC,GACP,CAACC,EAAMC,IAELq6F,EAAcpjH,EAAUO,aAAa,CAACooB,EAAME,EAAME,IAClDs6F,EAAe9rI,EAASgnD,cAAc6kF,GAC5C,IAGI36F,EAHA66F,EAAS,EACTrtE,EAAgB,GAChBstE,EAAsB,EAEtBljI,IACAooC,EAAgBpoC,EAAa/D,QAAQjB,KAAKyM,cAAcinF,gBAAgBuC,cAAe,CACnFtxE,YACAuxE,WAAY,CAACjoD,EAAUk6F,KACnB,IAAI5pG,GAAS,EACb,MAAMjwB,EAAQpS,EAASgnD,cAAcjV,GAsBrC,OArBI3/B,EAAM,IAAM25H,IACZC,EAAsB,EACtBD,EAAS35H,EAAM,GACfssD,GAAgB,IAAAwtE,wCAAuCrmE,EAAmBzzD,EAAO,CAAC05H,EAAa,GAAI15H,EAAM,KACzGssD,EAAc3+C,KACH,SAAUC,EAAGhF,GAChB,OAAOgF,EAMZ,KANyBhF,EAMzB,GALW,EACAgF,EAIX,GAJsBhF,EAItB,IAHgB,EACD,CACd,IAGJ0jD,EAAch6D,QAAU0N,EAAM,GAAKssD,EAAc,GAAG,KACpDA,EAAc24D,QACd2U,KAEAA,EAAsB,GAAM,IAC5B3pG,GAAS,GAENA,GAEXrpB,YACA43B,aAAc9sC,KAAKyM,cAAc+mF,kBAGzC,MAAM73F,EAAQqE,KAAKyM,cAAcinF,gBAAgB2C,gBACjD90B,EAAY/6C,GAAY,CACpBqhB,SAAU3gC,EAAS2gC,SACnButD,OACA6B,YACA/wD,KAAMvqC,EAAMuqC,MAAMjmC,MAClBkP,IAAKxT,EAAMwT,KAAKlP,MAChBnC,IAAKnC,EAAMmC,KAAKmC,MAChBkmC,OAAQxqC,EAAMwqC,QAAQlmC,MACtBq2F,WAAY36F,EAAMqR,MAClBogC,cAAeA,EACf+nD,WACArC,eACA1C,OAER,CACA,qBAAAs2C,EAAsB,SAAElgH,EAAQ,SAAEtf,EAAQ,YAAEq6D,EAAW,aAAEuxB,EAAY,gBAAEyzC,EAAe,OAAE93H,IACpF,MAAM,MAAEjS,EAAK,KAAE4zF,GAASm2C,EAClB3lI,GAAS,OAAmB6N,EAAQmrC,QAAUp9C,EACpD+kE,EAAY/6C,GAAY,CACpBqhB,SAAU3gC,EAAS2gC,SACnBjnC,SACAkyF,eACA1C,OAER,EAEJ,SAASL,EAAoB7iF,EAAMsZ,GAC/B,MAAMirE,EAAoBvkF,EAAKq0D,YAAY/6C,IACrC,KAAE4uE,EAAI,KAAElvD,EAAI,OAAEC,EAAM,OAAEvlC,EAAM,UAAEq2F,EAAS,IAAE9nF,EAAG,IAAErR,EAAG,YAAEi4F,EAAW,KAAE3F,EAAI,SAAE+E,EAAQ,aAAErC,GAAkBrB,GAAqB,CAAC,EACxHjB,EAAY,GAClB,GAAI,qBAAiB4E,GAAO,CACxB,MAAMsB,EAAWX,EACX,8BACA,SAAS,wBAAoBX,MAASD,IAC5C3E,EAAU7nF,KAAK+tF,EACnB,CAmBA,OAlBI,qBAAiBxwD,IACjBsqD,EAAU7nF,KAAK,SAAS,wBAAoBu9B,MAAS4sD,KAErD,qBAAiB3jF,IACjBqhF,EAAU7nF,KAAK,QAAQ,wBAAoBwG,MAAQ2jF,KAEnD,qBAAiBh1F,IACjB0yF,EAAU7nF,KAAK,QAAQ,wBAAoB7K,MAAQg1F,KAEnD,qBAAiB3sD,IACjBqqD,EAAU7nF,KAAK,YAAY,wBAAoBw9B,MAAW2sD,KAE1D,qBAAiBmE,IACjBzG,EAAU7nF,KAAK,cAAc,wBAAoBsuF,MAAc7G,KAE/D,qBAAiBxvF,IACjB4vF,EAAU7nF,KAAK,GAAG,wBAAoB/H,MAAWwvF,KAE9CI,CACX,CACA,S,oRCniBA,MAAM,sBAAE9rD,GAA0B,YAClC,MAAM2jG,UAAyB,YAClBroI,KAAK2jD,SAAW,cAAgB,CACzC,WAAAlkD,CAAYqiD,EAAY,CAAC,EAAGC,EAAmB,CAC3CC,0BAA2B,CAAC,QAAS,SACrCv1C,cAAe,CACX+mF,gBAAgB,EAChBprB,QAAQ,EACRwb,2BAA2B,EAC3B8G,gBAAgB,EAChBoF,aAAcC,EACd2D,gBAAiB,EAAAC,wBAGrBtyC,MAAMS,EAAWC,GACjB/hD,KAAK0+D,iBAAoBvc,IACrB,MAAMpxB,EAAcoxB,EAAIptB,QAClB,cAAEgxB,EAAa,QAAE52B,GAAY4B,EAC7BzP,EAAWykC,EAAcvC,MACzBloD,GAAiB,IAAAy/B,mBAAkB5L,IACnC,SAAEjzB,GAAaZ,EACrB0E,KAAKohE,WAAY,EACjB,MAAM/tB,EAAcrzC,KAAgB,YAAEmyF,4BAA4Bj2F,EAAU,CACxEgR,KAAM,CACF8nD,QAAS,CACLvmD,OAAQ,CACJ,IAAI6S,GACJ,IAAIA,GACJ,IAAIA,GACJ,IAAIA,IAERkjE,QAAS,CACL9O,UAAU,EACV+O,cAAe,CAAC,EAAG,EAAG,GACtBC,iBAAkB,CACdhG,QAAS,CAAC,EAAG,EAAG,GAChBrtD,SAAU,CAAC,EAAG,EAAG,GACjBC,WAAY,CAAC,EAAG,EAAG,GACnBqtD,YAAa,CAAC,EAAG,EAAG,MAIhCpd,YAAa,CAAC,MAGtB,QAAcluB,EAAYlkB,GAC1B,MAAMyuC,GAAsB,IAAAC,gCAA+B1uC,EAASnvB,KAAK+0D,eAazE,OAZA/0D,KAAK09D,SAAW,CACZrqB,aACAuqB,sBACA2X,YAAa,EACbya,eAAe,EACfxa,eAAe,EACfE,UAAU,GAEd11E,KAAKwhE,cAAcryC,IACnB,IAAAmoC,mBAAkBnoC,GAClBgzB,EAAIoV,kBACJ,OAAsCqG,GAC/BvqB,GAEXrzC,KAAK+2D,gBAAkB,CAAC5nC,EAASkkB,EAAY2jB,EAAcC,KACvD,MAAM37D,GAAiB,IAAAy/B,mBAAkB5L,IACnC,SAAEjzB,GAAaZ,GACf,KAAE4R,GAASmmC,GACX,OAAE5kC,GAAWvB,EAAK8nD,QAClBi7B,EAAe/zF,EAASgnD,cAAcz0C,EAAO,IAC7CyhF,EAAeh0F,EAASgnD,cAAcz0C,EAAO,IAC7Cg2G,EAAOzkH,KAAK0kH,8BAA8B,CAC5Cz0B,EACAC,IAEE5hF,EAAQ,CAAC0oD,EAAa,GAAIA,EAAa,KACvC,KAAEsL,EAAI,IAAE3tD,EAAG,MAAE/X,EAAK,OAAEC,GAAW4nH,EAErC,OADwB,kBAA0B,CAACniD,EAAM3tD,EAAK/X,EAAOC,GAASyR,IACvD2oD,GAK3Bj3D,KAAKm3D,qBAAuB,CAAChV,EAAK9O,KAC9B,MAAMtiB,EAAcoxB,EAAIptB,QAClB,QAAE5F,GAAY4B,EACpBsiB,EAAWuhB,aAAc,EACzB,MAAMgJ,GAAsB,IAAAC,gCAA+B1uC,EAASnvB,KAAK+0D,eACzE/0D,KAAK09D,SAAW,CACZrqB,aACAuqB,sBACAoyB,eAAe,GAEnBhwF,KAAKq3D,gBAAgBloC,IACrB,IAAAmoC,mBAAkBnoC,GAClB,MAAM7zB,GAAiB,IAAAy/B,mBAAkB5L,IACnC,gBAAExV,GAAoBre,GAC5B,OAAsCsiE,GACtCzb,EAAIoV,kBAERv3D,KAAK6+D,uBAAyB,CAAC1c,EAAK9O,EAAYyrB,KAC5C,MAAM/tC,EAAcoxB,EAAIptB,QAClB,QAAE5F,GAAY4B,GACd,KAAE7jB,GAASmmC,EACjBA,EAAWuhB,aAAc,EACzB,IACI2gB,EADAya,GAAgB,EAEhBlxB,EAAO2lB,cACPuL,GAAgB,EAGhBza,EAAcroE,EAAK8nD,QAAQvmD,OAAO+D,UAAW9D,GAAMA,IAAMowD,GAE7D,MAAMlB,GAAsB,IAAAC,gCAA+B1uC,EAASnvB,KAAK+0D,eACzE/0D,KAAK09D,SAAW,CACZrqB,aACAuqB,sBACA2X,cACAya,iBAEJhwF,KAAKq3D,gBAAgBloC,IACrB,IAAAmoC,mBAAkBnoC,GAClB,MAAM7zB,GAAiB,IAAAy/B,mBAAkB5L,IACnC,gBAAExV,GAAoBre,GAC5B,OAAsCsiE,GACtCzb,EAAIoV,kBAERv3D,KAAKm9D,aAAgBhb,IACjB,MAAMpxB,EAAcoxB,EAAIptB,QAClB,QAAE5F,GAAY4B,GACd,WAAEsiB,EAAU,oBAAEuqB,EAAmB,cAAE4X,EAAa,SAAEE,GAAa11E,KAAK09D,UACpE,KAAExwD,GAASmmC,EACbmiC,IAAkBE,IAGtBxoE,EAAK8nD,QAAQ0f,kBAAoB,KACjC10E,KAAKy9D,kBAAkBtuC,GACvBnvB,KAAKyhE,gBAAgBtyC,IACrB,IAAAwuC,oBAAmBxuC,GACnBnvB,KAAK8uF,eACL9uF,KAAK09D,SAAW,KAChB19D,KAAKohE,WAAY,EACbphE,KAAKgkF,sBACLhkF,KAAKyM,cAAcm3E,4BACnB,QAAiBvwC,EAAWqhB,gBAEhC,OAAsCkJ,GAClC4X,IACA,IAAA9T,4BAA2BruB,KAGnCrzC,KAAKoiD,cAAiBD,IAClBniD,KAAKohE,WAAY,EACjB,MAAMrwC,EAAcoxB,EAAIptB,QAClB,QAAE5F,GAAY4B,GACd,WAAEsiB,EAAU,oBAAEuqB,EAAmB,YAAE2X,EAAW,cAAEya,EAAa,cAAExa,GAAmBx1E,KAAK09D,SAC7F19D,KAAK21B,WAAWxG,EAASkkB,EAAY,CAAEmiC,kBACvC,MAAM,KAAEtoE,GAASmmC,EACjB,GAAI28C,EAAe,CACf,MAAM,YAAE1sC,GAAgBvyB,EAClBo/D,EAAgB7sC,EAAYE,OAC5B,QAAEghC,GAAYt3E,EAAK8nD,SACnB,cAAEyvB,GAAkBD,EAC1BC,EAAc,IAAM0L,EAAc,GAClC1L,EAAc,IAAM0L,EAAc,GAClC1L,EAAc,IAAM0L,EAAc,GAClC3L,EAAQ9O,UAAW,CACvB,MACK,QAAoB13E,IAAhBu3E,EAA2B,CAChC,MAAM,YAAEjyB,GAAgBvyB,EAClBo/D,EAAgB7sC,EAAYE,OAC5B,OAAE/0C,GAAWvB,EAAK8nD,QACxBvmD,EAAOxN,QAASqN,IACZA,EAAM,IAAM6hF,EAAc,GAC1B7hF,EAAM,IAAM6hF,EAAc,GAC1B7hF,EAAM,IAAM6hF,EAAc,KAE9B98C,EAAW93C,aAAc,CAC7B,KACK,CACD,MAAM,cAAEwqD,GAAkBh1B,EACpBz1B,GAAiB,IAAAy/B,mBAAkB5L,IACnC,cAAE+zB,EAAa,cAAE9xB,GAAkB91B,EAAeY,SAClDolB,EAAWykC,EAAcvC,OACzB,OAAE/0C,GAAWvB,EAAK8nD,QAExB,IAAIl7B,EACAD,EACA+nC,EACAhoC,EACAM,EACAD,EACAF,EACAC,EACJ,OATAvrB,EAAO8mE,GAAe,IAAIj0D,GASlBi0D,GACJ,KAAK,EACL,KAAK,EACDz7C,EAAmBopB,EAAcz0C,EAAO,IACxCmrB,EAAiBspB,EAAcz0C,EAAO,IACtCorB,EAAoB,CAACD,EAAe,GAAIE,EAAiB,IACzD8nC,EAAgB,CAAC9nC,EAAiB,GAAIF,EAAe,IACrDK,EAAmB7I,EAAcyI,GACjCE,EAAe3I,EAAcwwC,GAC7BnzD,EAAO,GAAKwrB,EACZxrB,EAAO,GAAKsrB,EACZ,MACJ,KAAK,EACL,KAAK,EACDF,EAAoBqpB,EAAcz0C,EAAO,IACzCmzD,EAAgB1e,EAAcz0C,EAAO,IACrCqrB,EAAmB,CACf8nC,EAAc,GACd/nC,EAAkB,IAEtBD,EAAiB,CACbC,EAAkB,GAClB+nC,EAAc,IAElB1nC,EAAkB9I,EAAc0I,GAChCE,EAAgB5I,EAAcwI,GAC9BnrB,EAAO,GAAKyrB,EACZzrB,EAAO,GAAKurB,EAGpBqZ,EAAW93C,aAAc,CAC7B,CACAyE,KAAK09D,SAASgY,UAAW,GACF,IAAA36C,mBAAkB5L,IACzC,OAAsCyuC,GAClCvqB,EAAW93C,cACX,IAAAg4C,2BAA0BF,EAAYlkB,EAAS,EAAAqkB,YAAYm3C,iBAGnE3qF,KAAKiL,OAAUkkB,IACX,GAAInvB,KAAKohE,UAAW,CAChBphE,KAAKohE,WAAY,EACjBphE,KAAKyhE,gBAAgBtyC,GACrBnvB,KAAKy9D,kBAAkBtuC,IACvB,IAAAwuC,oBAAmBxuC,GACnB,MAAM,WAAEkkB,EAAU,oBAAEuqB,EAAmB,cAAE4X,GAAkBx1E,KAAK09D,UAC1D,KAAExwD,GAASmmC,EAQjB,OAPAA,EAAWuhB,aAAc,EACzB1nD,EAAK8nD,QAAQ0f,kBAAoB,MACjC,OAAsC9W,GAClC4X,IACA,IAAA9T,4BAA2BruB,GAE/BrzC,KAAK09D,SAAW,KACTrqB,EAAWqhB,aACtB,GAEJ10D,KAAKwhE,cAAiBryC,IAClB,KAAM8tC,uBAAwB,EAC9B9tC,EAAQ1E,iBAAiB,EAAAgH,OAAOyrC,SAAUl9D,KAAKm9D,cAC/ChuC,EAAQ1E,iBAAiB,EAAAgH,OAAO2rC,WAAYp9D,KAAKoiD,eACjDjzB,EAAQ1E,iBAAiB,EAAAgH,OAAOowC,WAAY7hE,KAAKoiD,eACjDjzB,EAAQ1E,iBAAiB,EAAAgH,OAAO4rC,YAAar9D,KAAKm9D,cAClDhuC,EAAQ1E,iBAAiB,EAAAgH,OAAO6rC,UAAWt9D,KAAKm9D,cAChDhuC,EAAQ1E,iBAAiB,EAAAgH,OAAO8rC,WAAYv9D,KAAKoiD,eACjDjzB,EAAQ1E,iBAAiB,EAAAgH,OAAO+rC,UAAWx9D,KAAKm9D,eAEpDn9D,KAAKyhE,gBAAmBtyC,IACpB,KAAM8tC,uBAAwB,EAC9B9tC,EAAQrE,oBAAoB,EAAA2G,OAAOyrC,SAAUl9D,KAAKm9D,cAClDhuC,EAAQrE,oBAAoB,EAAA2G,OAAO2rC,WAAYp9D,KAAKoiD,eACpDjzB,EAAQrE,oBAAoB,EAAA2G,OAAOowC,WAAY7hE,KAAKoiD,eACpDjzB,EAAQrE,oBAAoB,EAAA2G,OAAO4rC,YAAar9D,KAAKm9D,cACrDhuC,EAAQrE,oBAAoB,EAAA2G,OAAO6rC,UAAWt9D,KAAKm9D,cACnDhuC,EAAQrE,oBAAoB,EAAA2G,OAAO8rC,WAAYv9D,KAAKoiD,eACpDjzB,EAAQrE,oBAAoB,EAAA2G,OAAO+rC,UAAWx9D,KAAKm9D,eAEvDn9D,KAAKq3D,gBAAmBloC,IACpB,KAAM8tC,uBAAwB,EAC9B9tC,EAAQ1E,iBAAiB,EAAAgH,OAAOyrC,SAAUl9D,KAAKm9D,cAC/ChuC,EAAQ1E,iBAAiB,EAAAgH,OAAO2rC,WAAYp9D,KAAKoiD,eACjDjzB,EAAQ1E,iBAAiB,EAAAgH,OAAO4rC,YAAar9D,KAAKm9D,cAClDhuC,EAAQ1E,iBAAiB,EAAAgH,OAAO6rC,UAAWt9D,KAAKm9D,cAChDhuC,EAAQ1E,iBAAiB,EAAAgH,OAAO8rC,WAAYv9D,KAAKoiD,eACjDjzB,EAAQ1E,iBAAiB,EAAAgH,OAAO+rC,UAAWx9D,KAAKm9D,eAEpDn9D,KAAKy9D,kBAAqBtuC,IACtB,KAAM8tC,uBAAwB,EAC9B9tC,EAAQrE,oBAAoB,EAAA2G,OAAOyrC,SAAUl9D,KAAKm9D,cAClDhuC,EAAQrE,oBAAoB,EAAA2G,OAAO2rC,WAAYp9D,KAAKoiD,eACpDjzB,EAAQrE,oBAAoB,EAAA2G,OAAO4rC,YAAar9D,KAAKm9D,cACrDhuC,EAAQrE,oBAAoB,EAAA2G,OAAO6rC,UAAWt9D,KAAKm9D,cACnDhuC,EAAQrE,oBAAoB,EAAA2G,OAAO8rC,WAAYv9D,KAAKoiD,eACpDjzB,EAAQrE,oBAAoB,EAAA2G,OAAO+rC,UAAWx9D,KAAKm9D,eAEvDn9D,KAAK+3D,iBAAmB,CAACz8D,EAAgB08D,KACrC,IAAIS,GAAe,EACnB,MAAM,SAAEv8D,GAAaZ,GACf,QAAE6zB,GAAYjzB,EACpB,IAAIo4D,GAAc,QAAet0D,KAAK+0D,cAAe5lC,GACrD,IAAKmlC,GAAa1zD,OACd,OAAO63D,EAGX,GADAnE,EAAct0D,KAAKw0D,wCAAwCrlC,EAASmlC,IAC/DA,GAAa1zD,OACd,OAAO63D,EAEX,MAAMjyC,EAAWxmB,KAAK+yE,YAAY72E,GAC5Byd,EAAkBzd,EAASiyB,qBAC3B2zC,EAAiB,CACnBrd,YAAazkD,KAAKykD,YAClBd,SAAU3jD,KAAK+0D,cACf7lC,WAAY5zB,EAAeY,SAASmN,IAExC,IAAK,IAAIK,EAAI,EAAGA,EAAI4qD,EAAY1zD,OAAQ8I,IAAK,CACzC,MAAM2pC,EAAaihB,EAAY5qD,IACzB,cAAEgrD,EAAa,KAAExnD,GAASmmC,GAC1B,OAAE5kC,EAAM,kBAAEimE,GAAsBxnE,EAAK8nD,QACrC+M,EAAoBtzD,EAAOpI,IAAKqI,GAAMxS,EAASgnD,cAAcx0C,IACnEozD,EAAepN,cAAgBA,EAC/B,MAAM,MAAEt4D,EAAK,UAAE63D,EAAS,SAAE0H,GAAa37D,KAAKgiE,mBAAmB,CAC3D3uB,aACAyuB,oBAEE,gBAAEvgD,EAAe,OAAEyjB,GAAW9oC,EAASumB,YAC7C,GAAKvV,EAAKq0D,YAAY/6C,IACqB,MAAvCtZ,EAAKq0D,YAAY/6C,GAAU2uE,UAW1B,GAAI9hD,EAAW93C,cAChByE,KAAKqwF,+BAA+Bh9C,EAAY9xB,EAAiByjB,EAAQrrB,EAAiBre,GACtFY,aAAoB,EAAA+2C,gBAAgB,CACpC,MAAM,kBAAE1sC,GAAsB8sC,EAAWnsC,SACzC,IAAK,MAAMsf,KAAYtZ,EAAKq0D,YACxB,GAAI/6C,EAASxlB,WAAW,WAAY,CACd2Y,EAAgB04E,oBACC30E,KAAMiK,IACrC,MAAM2qE,EAAqB,yBAAqB/rF,GAC1C8vB,EAAc1O,EAAG0O,YAAYi8D,GAC7BC,EAAkB,yBAAqB5qE,EAAGwa,qBAChD,OAAO9L,GAAek8D,IAAoBD,YAGnCplF,EAAKq0D,YAAY/6C,EAEhC,CAER,OA5BAtZ,EAAKq0D,YAAY/6C,GAAY,CACzBqhB,SAAU,KACVutD,KAAM,KACNjmF,IAAK,KACL+2B,KAAM,KACNC,OAAQ,KACRgvD,SAAU,MAEdn1F,KAAKswF,sBAAsBj9C,EAAY9xB,EAAiByjB,EAAQrrB,EAAiBre,GAsBrF,IAAKY,EAASiyB,qBAEV,OADA/d,QAAQC,KAAK,uCACNooD,EAEX,IAAIyd,EACJ,KAAK,IAAAC,qBAAoBzhB,GACrB,UAEC,IAAAkD,oBAAmBlD,IACnB10D,KAAK09D,UADN,MAEAgX,IAEAwB,EAA2B,CAACnU,EAAkB2S,KAElD,MAAM6b,EAAoBv6B,SAAQ,OAAiB,oBAAqB,CAAC,IACzE,GAAIkgB,GAA4Bqa,EAAmB,CAC/C,MAAMna,EAAiB,KACvB,IAAAvI,aAAe7V,EAAkBtD,EAAe0hB,EAAgBma,EAAoBxuB,EAAoBmU,EAA0B,CAC9H95E,SAER,CACA,MAAM6lE,EAAS,GAAGvN,SACZwN,EAAe,KACrB,2BAAYlK,EAAkBtD,EAAewN,EAAcH,EAAmB,CAC1E3lE,QACAu/D,WACA1H,aACDgO,GACHxJ,GAAe,EACf,MAAMr0D,EAAUpE,KAAK+uF,sBAAsBjtB,EAAgBzuB,GAC3D,IAAKjvC,EAAQurB,WAAY,CACrBziB,EAAK8nD,QAAQwvB,QAAU,CACnB9O,UAAU,EACV+O,cAAe,CAAC,EAAG,EAAG,GACtBC,iBAAkB,CACdhG,QAAS,CAAC,EAAG,EAAG,GAChBrtD,SAAU,CAAC,EAAG,EAAG,GACjBC,WAAY,CAAC,EAAG,EAAG,GACnBqtD,YAAa,CAAC,EAAG,EAAG,KAG5B,QACJ,CACA,MAAM6R,EAAYxwF,KAAKyM,cAAcqjF,aAAa5iF,EAAMsZ,GACxD,IAAKgqE,GAAkC,IAArBA,EAAU5vF,OACxB,SAEJ,IAAKsM,EAAK8nD,QAAQwvB,QAAQ9O,SAAU,CAChC,MAAM+a,GAAsB,IAAAC,wBAAuB3uB,GACnD70D,EAAK8nD,QAAQwvB,QAAQC,cACjBvoF,EAASk1B,cAAcq/D,EAC/B,CACA,MAAME,EAAkBz0F,EAASgnD,cAAch2C,EAAK8nD,QAAQwvB,QAAQC,eAC9DuK,EAAa,IACb4B,GAAc,IAAAC,mBAAqB74B,EAAkBtD,EAAes6B,EAAYwB,EAAWG,EAAiB5uB,EAAmB,CAAC,EAAG39D,IACjI9G,EAAGglE,EAAM9kE,EAAGmX,EAAG,MAAE/X,EAAK,OAAEC,GAAW+zF,EAC3C1jF,EAAK8nD,QAAQwvB,QAAQE,iBAAmB,CACpChG,QAASxiF,EAASk1B,cAAc,CAACkxC,EAAM3tD,IACvC0c,SAAUn1B,EAASk1B,cAAc,CAACkxC,EAAO1lE,EAAO+X,IAChD2c,WAAYp1B,EAASk1B,cAAc,CAACkxC,EAAM3tD,EAAM9X,IAChD8hF,YAAaziF,EAASk1B,cAAc,CAACkxC,EAAO1lE,EAAO+X,EAAM9X,IAEjE,CACA,OAAO47D,GAEXz4D,KAAK0kH,8BAAiCj2G,IAClC,MAAOq2G,EAAQnzD,GAAUljD,EACzB,MAAO,CACH6zD,KAAMrlE,KAAKa,IAAIgnH,EAAO,GAAInzD,EAAO,IACjCh9C,IAAK1X,KAAKa,IAAIgnH,EAAO,GAAInzD,EAAO,IAChC/0D,MAAOK,KAAK6e,IAAIgpG,EAAO,GAAKnzD,EAAO,IACnC90D,OAAQI,KAAK6e,IAAIgpG,EAAO,GAAKnzD,EAAO,MAG5C3xD,KAAKswF,sBAAwB,CAACj9C,EAAY9xB,EAAiByjB,EAAQrrB,EAAiBre,KAChF,IAAK0E,KAAKyM,cAAci+E,eACpB,OAEJ,MAAM,KAAEx9E,GAASmmC,GACX,SAAEn3C,GAAaZ,GACf,QAAE6zB,GAAYjzB,EACdm1F,EAAYnkF,EAAK8nD,QAAQvmD,OAAO,GAChC6iF,EAAYpkF,EAAK8nD,QAAQvmD,OAAO,IAChC,YAAE8yD,GAAgBr0D,EAClBqkF,EAAY3xF,OAAO4B,KAAK+/D,GAC9B,IAAK,IAAI73D,EAAI,EAAGA,EAAI6nF,EAAU3wF,OAAQ8I,IAAK,CACvC,MAAM8c,EAAW+qE,EAAU7nF,GACrBlO,EAAQwE,KAAK4/E,mBAAmBp5D,GACtC,IAAKhrB,EACD,SAEJ,MAAM,WAAEqM,EAAU,UAAE8c,EAAS,SAAEzd,EAAQ,aAAElC,GAAiBxJ,EACpDg6F,EAAY9wD,EAAsB/f,EAAW0sE,GACnDmE,EAAU,GAAKv4F,KAAK+Q,MAAMwnF,EAAU,IACpCA,EAAU,GAAKv4F,KAAK+Q,MAAMwnF,EAAU,IACpCA,EAAU,GAAKv4F,KAAK+Q,MAAMwnF,EAAU,IACpC,MAAMC,EAAY/wD,EAAsB/f,EAAW2sE,GAInD,GAHAmE,EAAU,GAAKx4F,KAAK+Q,MAAMynF,EAAU,IACpCA,EAAU,GAAKx4F,KAAK+Q,MAAMynF,EAAU,IACpCA,EAAU,GAAKx4F,KAAK+Q,MAAMynF,EAAU,IAChCz1F,KAAKwvF,gBAAgBgG,EAAWC,EAAW5tF,GAAa,CACxD7H,KAAKgkF,sBAAuB,EAC5B,MAMM9uE,EAAY,CACd,CAPSjY,KAAKa,IAAI03F,EAAU,GAAIC,EAAU,IACjCx4F,KAAKkS,IAAIqmF,EAAU,GAAIC,EAAU,KAO1C,CANSx4F,KAAKa,IAAI03F,EAAU,GAAIC,EAAU,IACjCx4F,KAAKkS,IAAIqmF,EAAU,GAAIC,EAAU,KAM1C,CALSx4F,KAAKa,IAAI03F,EAAU,GAAIC,EAAU,IACjCx4F,KAAKkS,IAAIqmF,EAAU,GAAIC,EAAU,OAMxC,WAAEG,EAAU,YAAEC,IAAgB,OAAkCt0E,EAAiByjB,EAAQqsD,EAAWC,GACpGt8B,EAAU,CAACwgC,EAAWC,IACtB,MAAEj5F,EAAK,SAAE24F,IAAa,QAAiC35F,EAAOw5D,GAC9DogC,EAAOn4F,KAAK6e,IAAI85E,EAAaC,IAAgBr5F,EAAQA,GACrDk2F,EAAoB,CACtBn0F,aAAa,OAAoBrC,EAAUsqB,GAC3CosE,YAAa5yF,KAAK4yF,YAAY12F,EAAUsqB,EAAU6sB,EAAWnsC,SAASX,oBAEpEusF,GAAe,OAAmB5rF,EAAS2gC,SAAUwL,EAAWnsC,SAASX,kBAAmBmsF,GAClG,IAAItlD,EACApoC,IACAooC,EAAgBpoC,EAAa/D,QAAQjB,KAAKyM,cAAcinF,gBAAgBuC,cAAe,CACnF/gF,YACAyP,YACAmoB,aAAc9sC,KAAKyM,cAAc+mF,kBAGzC,MAAM73F,EAAQqE,KAAKyM,cAAcinF,gBAAgB2C,gBACjD90B,EAAY/6C,GAAY,CACpBqhB,SAAU3gC,EAAS2gC,SACnButD,OACAlvD,KAAMvqC,EAAMuqC,MAAMjmC,MAClBkmC,OAAQxqC,EAAMwqC,QAAQlmC,MACtBkP,IAAKxT,EAAMwT,KAAKlP,MAChBnC,IAAKnC,EAAMmC,KAAKmC,MAChBq2F,WAAY36F,EAAMqR,MAClBogC,cAAeA,EACf+nD,WACArC,eAER,MAEI9yF,KAAKgkF,sBAAuB,EAC5BziB,EAAY/6C,GAAY,CACpBqhB,SAAU3gC,EAAS2gC,SAG/B,CACA,MAAMtsC,EAAc83C,EAAW93C,YAK/B,OAJA83C,EAAW93C,aAAc,EACrBA,IACA,IAAAg4C,2BAA0BF,EAAYlkB,EAAS,EAAAqkB,YAAYg+C,cAExDjwB,GAEXvhE,KAAKwvF,gBAAkB,CAACC,EAAQC,EAAQ7nF,IAC5B,kCAA8B4nF,EAAQ5nF,IAC1C,kCAA8B6nF,EAAQ7nF,GAE9C7H,KAAKqwF,gCAAiC,OAASrwF,KAAKswF,sBAAuB,IAAK,CAAES,UAAU,GAChG,QACS/wF,KAAKivF,QAAU,CAAC//D,EAAYzgB,EAAQrK,KACzC,MAAM9I,GAAiB,IAAA68E,+BAA8BjpD,GACrD,IAAK5zB,EACD,OAEJ,MAAM,oBAAE0O,EAAmB,kBAAEzD,EAAiB,gBAAEgb,EAAe,SAAEilB,EAAQ,SAAEtqC,GAAc8D,KAAKgxF,YAAYq3C,EAAkB/sI,EAAgBmT,EAAQrK,IAC9I,aAAE43E,KAAiBiV,GAAwB7sF,GAAW,CAAC,EACvDivC,EAAa,CACfqhB,cAAetwD,GAASswD,eAAiB,qBACzCxnD,KAAM,CACF8nD,QAAS,CACLvmD,SACAimE,kBAAmB,MAEvB9gD,MAAO,GACP2tC,YAAa,CAAC,GAElB3M,aAAa,EACbs6B,eAAe,EACf3zF,aAAa,EACb2xF,UAAU,EACVC,WAAW,EACXjmF,SAAU,CACNy8C,SAAUnd,EAASuuB,cACnBxzC,kBACAvX,sBACAzD,uBACG0qF,KAGX,QAAc59C,EAAYn3C,EAASizB,UACnC,OAAsC,CAACjzB,EAASmN,KACjD,EAEP,SAAS0mF,EAAoB7iF,EAAMsZ,GAC/B,MAAMirE,EAAoBvkF,EAAKq0D,YAAY/6C,IACrC,KAAE4uE,EAAI,KAAElvD,EAAI,IAAE/2B,EAAG,OAAEg3B,EAAM,SAAEgvD,EAAQ,aAAErC,EAAY,IAAEh1F,GAAQ2zF,EACjE,GAAIvrD,QACA,OAEJ,MAAMsqD,EAAY,GAgBlB,OAfI,qBAAiB4E,IACjB5E,EAAU7nF,KAAK,SAAS,wBAAoBysF,MAASD,KAErD,qBAAiBjvD,IACjBsqD,EAAU7nF,KAAK,SAAS,wBAAoBu9B,MAAS4sD,KAErD,qBAAiB3jF,IACjBqhF,EAAU7nF,KAAK,QAAQ,wBAAoBwG,MAAQ2jF,KAEnD,qBAAiBh1F,IACjB0yF,EAAU7nF,KAAK,QAAQ,wBAAoB7K,MAAQg1F,KAEnD,qBAAiB3sD,IACjBqqD,EAAU7nF,KAAK,YAAY,wBAAoBw9B,MAAW2sD,KAEvDtC,CACX,CACA,S,qLCnkBA,MAAM2zB,UAAkB,IACpB,WAAA1kH,CAAYqiD,EAAY,CAAC,EAAGC,EAAmB,CAC3CC,0BAA2B,CAAC,QAAS,SACrCv1C,cAAe,CACX8nG,WAAY,CACR+zB,mBAAoB,KACpBC,oBAAqB,IACrBC,mBAAoB,KACpBC,oBAAqB,IACrBC,wBAAyB,IACzBC,wBAAyB,KACzBC,4CAA6C,MAEjDl0B,gBAAiB,qBACjBC,eAAgB,qBAChBk0B,UAAW,GACXC,uBAAuB,EACvBC,QAAS,CACLlgF,SAAS,EACTmgF,cAAe,CACX,EAAG,CAAC,IAAK,IAAK,IAAK,MAEvBC,cAAe,IACfC,oBAAqB,EACrBC,iBAAkB,EAClBC,WAAY,KAEhB11D,QAAS,CACL,CAAC,EAAA21D,kBAAkBC,eAAgB,CAC/B11D,OAAQ,EAAAy1D,kBAAkBC,cAC1Bz1D,SAAU,CACN,CACI1zE,IAAK,WAIjB,CAAC,EAAAkpI,kBAAkBE,eAAgB,CAC/B31D,OAAQ,EAAAy1D,kBAAkBE,cAC1B11D,SAAU,CACN,CACI1zE,IAAK,YAIjB,CAAC,EAAAkpI,kBAAkBG,aAAc,CAC7B51D,OAAQ,EAAAy1D,kBAAkBG,YAC1B31D,SAAU,CACN,CACI1zE,IAAK,MAGbsM,cAAe,CACXg9H,2BAA2B,EAC3BC,wBAAwB,EACxBC,oBAAoB,IAG5BC,yBAA0B,CACtBh2D,OAAQ,EAAAy1D,kBAAkBG,YAC1B31D,SAAU,CACN,CACI1zE,IAAK,MAGbsM,cAAe,CAAC,OAK5B40C,MAAMS,EAAWC,GACjB/hD,KAAK6pI,cAAgB,KACrB7pI,KAAKywE,iBAAoBtuB,IACrBniD,KAAK+jF,iBAET/jF,KAAK8pD,iBAAmB,KACpB9pD,KAAK+jF,iBAET/jF,KAAKolD,kBAAqBjD,IACtBniD,KAAK+jF,iBAET/jF,KAAKikD,qBAAwB9B,IACzB,MAAM3f,EAAY2f,EAAIptB,QAChB,QAAE5F,EAAO,cAAE42B,GAAkBvjB,EAC7BlnC,GAAiB,IAAAy/B,mBAAkB5L,IACnC,SAAEjzB,GAAaZ,EACrB0E,KAAKgjH,UAAYhjH,KAAK8pI,eAAe36G,GACrCnvB,KAAKwhE,cAAcryC,IACnB,IAAAmoC,mBAAkBnoC,GAClBgzB,EAAIoV,iBACJv3D,KAAK+pI,aAAaC,QAAS,EAC3BhqI,KAAK+pI,aAAaE,WAAaC,KAAKC,MACpC,MAAMj7F,EAAc,WAAW6W,EAActqD,QACvC2zC,EAAalzC,EAASk1B,cAAc,CACtC8d,EAAY,GACZA,EAAY,KAEhBlvC,KAAK6pI,cAAgB,CACjBpuI,OAAQyzC,EACRsU,MAAO,WAAWpU,IAEtB,MAAMg7F,EAAYpqI,KAAKqqI,YAAcrqI,KAAKsqI,gBAAgBn7G,IAC1D,OAAuCi7G,EAAUxsE,qBACjD,MAAMy3C,EAAgBr1G,KAAKuqI,iBAAiBp7G,GAE5C,OADAnvB,KAAKwqI,4BAA4BlvI,EAAgB+5G,EAAe,EAAAg0B,kBAAkBoB,qBAC3E,GAEXzqI,KAAKy3D,kBAAqBtV,IACtB,GAAIniD,KAAK46E,OAAS,EAAAnqC,UAAUH,OAAQ,CAEhC,GADAtwC,KAAKqqF,aAAaloC,IACbniD,KAAKyM,cAAcs8H,QAAQlgF,QAC5B,OAEJ,MAAM,cAAEogF,EAAa,oBAAEC,EAAmB,iBAAEC,GAAqBnpI,KAAKyM,cAAcs8H,SAC9E,cAAEhjF,EAAa,QAAE52B,GAAYgzB,EAAIptB,QACjC,OAAEt5B,GAAWsqD,GACb,WAAE1T,EAAU,MAAEq4F,EAAK,WAAET,EAAU,OAAED,GAAWhqI,KAAK+pI,aACvD,GAAIC,EACA,OAEJ,MAAMz0H,EAAQ,cAAc9Z,EAAQ42C,GAC9Bs4F,EAAOT,KAAKC,MAAQF,EAW1B,IAVI10H,EAAQ2zH,GACPyB,EAAO1B,GAAiB1zH,EAAQ4zH,KAC7BuB,IACAn7G,OAAOyhF,aAAa05B,GACpB1qI,KAAK+pI,aAAaW,MAAQ,MAEzBV,GACDhqI,KAAK4qI,cAAcz7G,KAGtBnvB,KAAK+pI,aAAaW,MAAO,CAC1B,MAAMA,EAAQn7G,OAAOoC,WAAW3xB,KAAK6qI,gBAAiB,KACtDjrI,OAAOm3E,OAAO/2E,KAAK+pI,aAAc,CAC7BE,WAAYC,KAAKC,MACjBO,QACAr4F,WAAY52C,EACZ0zB,WAER,CACJ,GAEJnvB,KAAK6qI,gBAAkB,KACnB,GAAI7qI,KAAK+pI,aAAaC,OAElB,YADAhqI,KAAK+pI,aAAaW,MAAQ,MAG9B1qI,KAAK+pI,aAAaW,MAAQ,KAC1B,MAAMr1B,EAAgBr1G,KAAKuqI,iBAAiBvqI,KAAK+pI,aAAa56G,SACxD7zB,GAAiB,IAAAy/B,mBAAkB/6B,KAAK+pI,aAAa56G,SAC3D,IAAK7zB,EACD,OAEJ,MAAM,SAAEY,GAAaZ,EACfq5G,EAAiB30G,KAAKyM,cAAckoG,eACpCm2B,GAAe,OAAgB,CACjCz1B,gBACAn5G,WACA6uI,SAAUp2B,IAEd,IAAKU,EACD,OAEJ,MAAMpgF,EAAOj1B,KAAK21B,WAAW0/E,EAAcl5B,eAAgB2uD,EAAa3gB,0BACxEnqH,KAAK+pI,aAAahB,QAAU/oI,KAAKwqI,6BAA4B,IAAAzvG,mBAAkB/6B,KAAK+pI,aAAa56G,SAAU,IACpGkmF,KACAy1B,EACH71G,QACD,EAAAo0G,kBAAkB2B,UAEzBhrI,KAAKoiD,cAAiBD,IAClB,MAAM3f,EAAY2f,EAAIptB,QAChB,QAAE5F,EAAO,cAAE42B,GAAkBvjB,EAC7BlnC,GAAiB,IAAAy/B,mBAAkB5L,IACnC,SAAEjzB,GAAaZ,EACrB0E,KAAKqqF,aAAaloC,GAClB,MAAM,oBAAEyb,GAAwB59D,KAAKqqI,YACrC,OAAuCzsE,GACvC,MAAMroD,EAAQ,cAAcwwC,EAActqD,OAAQuE,KAAK+pI,aAAa13F,aAC9D,WAAE+2F,EAAU,iBAAED,GAAqBnpI,KAAKyM,cAAcs8H,QAC5D,IAAK/oI,KAAK+pI,aAAaC,QACnBE,KAAKC,MAAQnqI,KAAK+pI,aAAaE,WAAab,GAC5C7zH,EAAQ4zH,EACR,OAMJ,GAJInpI,KAAK+pI,aAAaW,QAClBn7G,OAAOyhF,aAAahxG,KAAK+pI,aAAaW,OACtC1qI,KAAK+pI,aAAaW,MAAQ,OAEzB1qI,KAAK6pI,cAAe,CACrB,MAAMznE,EAAcpiE,KAAK+pI,aAAa13F,WAChC2lE,EAAa97G,EAASk1B,cAAc,CACtCgxC,EAAY,GACZA,EAAY,KAEhBpiE,KAAK6pI,cAAgB,CACjBpuI,OAAQ,WAAW2mE,GACnB5e,MAAO,WAAWw0D,GAE1B,CACA,MAAMizB,EAAgBllF,EAActqD,OAC9ByvI,EAAehvI,EAASk1B,cAAc,CACxC65G,EAAc,GACdA,EAAc,KAElBjrI,KAAKqqI,WAAarqI,KAAKsqI,gBAAgBn7G,EAAS87G,GAChDjrI,KAAKmrI,iBAAiBh8G,EAAS87G,GAC/B,MAAM51B,EAAgBr1G,KAAKuqI,iBAAiBp7G,GAC5CkmF,EAAc+1B,kBAAoB,CAC9B,WAAWprI,KAAK6pI,cAAcrmF,OAC9B,WAAW0nF,IAEflrI,KAAK+pI,aAAahB,QAAU/oI,KAAKs1G,oBAAoBh6G,EAAgB+5G,GACrE,MAAMg2B,EAAqB,WAAWJ,GACtCjrI,KAAK6pI,cAAgB,CACjBpuI,OAAQ4vI,EACR7nF,MAAO,WAAW0nF,IAEtBlrI,KAAK+pI,aAAa56G,QAAUA,EAC5BnvB,KAAK+pI,aAAaE,WAAaC,KAAKC,MAAQf,EAC5CppI,KAAK+pI,aAAaC,QAAS,EAC3BhqI,KAAK+pI,aAAa13F,WAAag5F,GAEnCrrI,KAAKm9D,aAAgBhb,IACjB,MAAM3f,EAAY2f,EAAIptB,QAChB,QAAE5F,GAAYqT,EACdlnC,GAAiB,IAAAy/B,mBAAkB5L,GACnCkmF,EAAgBr1G,KAAKuqI,iBAAiBp7G,GACvCnvB,KAAK+pI,aAAahB,SAAY/oI,KAAK+pI,aAAaC,QACjDhqI,KAAKs1G,oBAAoBh6G,EAAgB+5G,GAE7Cr1G,KAAK8uF,eACL9uF,KAAKyhE,gBAAgBtyC,IACrB,IAAAwuC,oBAAmBxuC,GACnBnvB,KAAKqqF,aAAaloC,GAClBniD,KAAKgjH,UAAY,KACjBhjH,KAAK6pI,cAAgB,KACrB7pI,KAAKwqI,4BAA4BlvI,EAAgB+5G,EAAe,EAAAg0B,kBAAkBiC,kBAC7EtrI,KAAK+pI,aAAaC,QACnBhqI,KAAKurI,cAAcp8G,IAG3BnvB,KAAKwhE,cAAiBryC,IAClBA,EAAQ1E,iBAAiB,EAAAgH,OAAOyrC,SAAUl9D,KAAKm9D,cAC/ChuC,EAAQ1E,iBAAiB,EAAAgH,OAAO2rC,WAAYp9D,KAAKoiD,eACjDjzB,EAAQ1E,iBAAiB,EAAAgH,OAAO4rC,YAAar9D,KAAKm9D,eAEtDn9D,KAAKyhE,gBAAmBtyC,IACpBA,EAAQrE,oBAAoB,EAAA2G,OAAOyrC,SAAUl9D,KAAKm9D,cAClDhuC,EAAQrE,oBAAoB,EAAA2G,OAAO2rC,WAAYp9D,KAAKoiD,eACpDjzB,EAAQrE,oBAAoB,EAAA2G,OAAO4rC,YAAar9D,KAAKm9D,cAE7D,CACA,aAAA4mB,GACI/jF,KAAKqqI,gBAAarsI,EAClBgC,KAAK4qI,eACT,CACA,YAAAvgD,CAAaloC,GACT,MAAM3f,EAAY2f,EAAIptB,QAChB,QAAE5F,GAAYqT,GACd,cAAEujB,GAAkBvjB,EACpB6hC,EAAete,EAActqD,OACnCuE,KAAKqqI,WAAarqI,KAAKsqI,gBAAgBn7G,EAASk1C,GAChDrkE,KAAKmrI,iBAAiBh8G,EAASk1C,GAC1BrkE,KAAKqqI,aAGV,OAAuCrqI,KAAKqqI,WAAWzsE,oBAC3D,CACA,gBAAAutE,CAAiBh8G,EAASk1C,GACtB,MAAM/oE,GAAiB,IAAAy/B,mBAAkB5L,IACnC,SAAEjzB,GAAaZ,GACf,cAAE81B,GAAkBl1B,EACpBsmB,EAAStmB,EAASumB,aAClB,UAAEomH,GAAc7oI,KAAKyM,cACrBu4B,EAAS,gBAAgBxiB,EAAOwiB,OAAO,GAAIxiB,EAAOwiB,OAAO,GAAIxiB,EAAOwiB,OAAO,IAC3EzjB,EAAkB,gBAAgBiB,EAAOjB,gBAAgB,GAAIiB,EAAOjB,gBAAgB,GAAIiB,EAAOjB,gBAAgB,IAC/GiqH,EAAY,cAClB,WAAWA,EAAWxmG,EAAQzjB,GAC9B,MAAMkqH,EAAsBr6G,EAAc,CACtCizC,EAAa,GACbA,EAAa,KAEXqnE,EAAsB,cACtBC,EAAmB,cACnBC,EAAoB,cACpBC,EAAqB,cAC3B,IAAK,IAAIniI,EAAI,EAAGA,GAAK,EAAGA,IACpBgiI,EAAoBhiI,GAAK+hI,EAAoB/hI,GAAKs7B,EAAOt7B,GAAKm/H,EAC9D8C,EAAiBjiI,GAAK+hI,EAAoB/hI,GAAKs7B,EAAOt7B,GAAKm/H,EAC3D+C,EAAkBliI,GAAK+hI,EAAoB/hI,GAAK8hI,EAAU9hI,GAAKm/H,EAC/DgD,EAAmBniI,GAAK+hI,EAAoB/hI,GAAK8hI,EAAU9hI,GAAKm/H,EAEpE,IAAK7oI,KAAKqqI,WACN,OAEJ,MAAM,YAAEyB,GAAgB9rI,KAAKqqI,YACvB,KAAEn9H,GAAS4+H,OACI9tI,IAAjBkP,EAAK8nD,UACL9nD,EAAK8nD,QAAU,CAAC,GAEpB9nD,EAAK8nD,QAAQvmD,OAAS,CAClBi9H,EACAC,EACAC,EACAC,GAEJ,MAAMl3B,EAAiB30G,KAAKyM,cAAckoG,eACpCo2B,EAAW/qI,KAAKyM,cAAc8nG,WAAWI,GACG,mBAAvCo2B,GAAUgB,0BACjBhB,EAASgB,yBAAyB,CAC9Bt/H,cAAezM,KAAKyM,cACpBvQ,aAGRgR,EAAK3R,aAAc,CACvB,CACA,aAAA86F,CAAclnE,EAAS86F,GACnB,IAAK96F,EACD,OAEJ,MAAM7zB,GAAiB,IAAAy/B,mBAAkB5L,GAEzC,OADcnvB,KAAKwqI,4BAA4BlvI,EAAgB0E,KAAKuqI,iBAAiBp7G,GAAU,EAAAk6G,kBAAkB2C,cAAe/hB,EAEpI,CACA,aAAA2gB,CAAcz7G,EAAUnvB,KAAK+pI,aAAa56G,SACtC,IAAKA,EACD,OAEJnvB,KAAK8uF,eACL,MAAMxzF,GAAiB,IAAAy/B,mBAAkB5L,GACpC7zB,IAGL0E,KAAKwqI,4BAA4BlvI,EAAgB0E,KAAKuqI,iBAAiBp7G,GAAU,EAAAk6G,kBAAkBE,eACnGvpI,KAAK+pI,aAAahB,QAAU,KAC5B/oI,KAAK+pI,aAAaC,QAAS,EAC/B,CACA,aAAAuB,CAAcp8G,EAAUnvB,KAAK+pI,aAAa56G,SACjCA,GAGLkyB,MAAMkqF,cAAcp8G,EACxB,CACA,WAAA88G,CAAY98G,EAASilD,GACjB,IAAKjlD,EACD,OAEJ,MAAM7zB,GAAiB,IAAAy/B,mBAAkB5L,GACzCnvB,KAAK+pI,aAAahB,QAAU/oI,KAAKwqI,4BAA4BlvI,EAAgB0E,KAAKuqI,iBAAiBp7G,GAAU,EAAAk6G,kBAAkBG,YAAap1D,EAAO3nE,eACnJzM,KAAK+pI,aAAaC,QAAS,CAC/B,CACA,qBAAAkC,GACI,QAAwBluI,IAApBgC,KAAKqqI,WACL,OAEJ,MAAM,KAAEn9H,GAASlN,KAAKqqI,WAAWyB,aAC3B,SAAE5vI,GAAa8D,KAAKqqI,WAC1Bn9H,EAAK3R,aAAc,EACnB,MAAM,aAAEy5G,GAAiBh1G,KAAKmsI,0BAA0BjwI,IAAa,CAAC,EACtE8D,KAAKqqI,WAAWyB,YAAY5kI,SAAS8tG,aAAeA,CACxD,CACA,gBAAAj9C,CAAiBz8D,EAAgB08D,GAC7B,IAAKh4D,KAAKqqI,WACN,OAEJ,MAAM,SAAEnuI,GAAaZ,EAErB,IAD4B0E,KAAKqqI,WAAWzsE,oBACnB/iD,SAAS3e,EAASmN,IACvC,OAEJ,MAAMyiI,EAAc9rI,KAAKqqI,WAAWyB,YACpC,IAAqC,IAAjCA,EAAY5+H,KAAK3R,YAAsB,CACvC,MAAM,aAAE8oE,GAAiBrkE,KAAKqqI,YACxB,QAAEl7G,GAAYjzB,EACpB8D,KAAKmrI,iBAAiBh8G,EAASk1C,EACnC,CACA,MAAMkxC,EAAeu2B,EAAY5kI,SACjC,IAAKquG,EACD,OAEJ,MAAM7gD,EAAgB6gD,EAAa62B,eAC7Bl/H,EAAO4+H,EAAY5+H,MACnB,OAAEuB,GAAWvB,EAAK8nD,QAClB+M,EAAoBtzD,EAAOpI,IAAKqI,GAAMxS,EAASgnD,cAAcx0C,IAC7Dg4E,EAAS3kB,EAAkB,GAC3BptD,EAAMotD,EAAkB,GACxBnrD,EAAS,CACX3Z,KAAK+Q,OAAO04E,EAAO,GAAK/xE,EAAI,IAAM,GAClC1X,KAAK+Q,OAAO04E,EAAO,GAAK/xE,EAAI,IAAM,IAEhC+wB,EAASzoC,KAAK6e,IAAI4qE,EAAO,GAAKzpF,KAAK+Q,OAAO04E,EAAO,GAAK/xE,EAAI,IAAM,IAChEvY,EAAQ,OAAOm5G,EAAaP,cAAct0G,MAAM,EAAG,IAAM,CAAC,EAAG,EAAG,MACtE,IAAKxE,EAASiyB,qBAEV,YADA/d,QAAQC,KAAK,wCAIjB,IAAA4rD,YAAcjE,EAAkBtD,EADd,IACwC99C,EAAQ8uB,EAAQ,CACtEtpC,QACAu/D,SAAuD,IAA7C37D,KAAKqsI,uBAAuB37B,aAAqB,CAAC,EAAG,GAAK,OAExE,MAAM,sBAAE47B,GAA0BtsI,KAAKyM,eAAe0R,WAAa,CAC/DmuH,sBAAuB,GAE3B,GAAIA,EAAuB,CACvB,MAAMC,EAAa,KACnB,IAAAtwE,YAAcjE,EAAkBtD,EAAe63E,EAAY31H,EAAQ01H,EAAuB,CACtFlwI,SAER,CACJ,EAEJ+nH,EAAUxgE,SAAW,QACrB,S,mOC1Ze,MAAM2wD,UAAyB,YACjCt0G,KAAKwsI,YAAc,CACxBzD,QAAS,KACT55G,QAAS,KACT86G,WAAY,EACZS,MAAO,KACPr4F,WAAY,CAACo6F,IAAKA,KAClBzC,QAAQ,EACT,CACH,WAAAvqI,CAAYqiD,EAAWC,GACnBV,MAAMS,EAAWC,GACjB/hD,KAAK0sI,QAAU,IAAIl7H,IACnBxR,KAAK2sI,gBAAkB,IAAIn7H,IAC3BxR,KAAKqsI,uBAAyB,CAC1B37B,aAAc,KACdk8B,iBAAiB,EACjBC,iBAAiB,EACjBC,eAAgB,GAExB,CACA,mBAAAC,CAAoB5qF,GAChB,MAAM,GAAE94C,EAAE,cAAE2rB,GAAkBmtB,EAAIptB,OAClC,GAAsB,aAAlBC,EAAJ,CAGA,GAAIh1B,KAAK2sI,gBAAgBtpI,IAAIgG,GAAK,CAC9BrJ,KAAKqqI,WAAa,KAClB,MAAM2C,EAAWhtI,KAAK2sI,gBAAgBvsI,IAAIiJ,GACpC8lB,EAAU69G,GAAU79G,QACpBkmF,EAAgBr1G,KAAKuqI,iBAAiBp7G,GAC5CkmF,EAAc3E,aAAes8B,GAAUt8B,aACnCvhF,GACAnvB,KAAKwqI,6BAA4B,IAAAzvG,mBAAkB5L,GAAUkmF,EAAe,EAAAg0B,kBAAkBC,cAEtG,CACAtpI,KAAK+pI,aAAaC,QAAS,CAX3B,CAYJ,CACA,gBAAID,GACA,OAAOz1B,EAAiBk4B,WAC5B,CACA,cAAAS,GACI,QAASjtI,KAAK+pI,aAAahB,OAC/B,CACA,4BAAAmE,GACI,OAAuB,WAAdltI,KAAK46E,MAAmC,YAAd56E,KAAK46E,OACpC56E,KAAKitI,gBACb,CACA,UAAAt3G,CAAWwmD,EAAgBguC,GACvB,MAAMgjB,EAAiBhjB,EAAyB9gH,GAChD,GAAIrJ,KAAKi1B,MACLj1B,KAAKi1B,KAAKk1F,2BAA6BA,EACvC,OAAOnqH,KAAKi1B,KAEhB,IAAIA,EAAOj1B,KAAK0sI,QAAQtsI,IAAI+sI,GAY5B,OAXKl4G,EAKGA,EAAKm4G,mBACLn4G,EAAO,qBAAgCknD,EAAgBguC,GACvDnqH,KAAK0sI,QAAQxsI,IAAIitI,EAAgBl4G,KANrCA,EAAO,qBAAgCknD,EAAgBguC,GACvDnqH,KAAK0sI,QAAQxsI,IAAIitI,EAAgBl4G,IAQrCj1B,KAAKi1B,KAAOA,EACLA,CACX,CACA,cAAA60G,CAAe36G,GACX,MAAM7zB,GAAiB,IAAAy/B,mBAAkB5L,IACnC,SAAEjzB,GAAaZ,EACfu5G,GAAqB,OAAsB34G,EAASmN,IAC1D,IAAKwrG,EAAoB,CACrB,MAAM7X,EAAQ,IAAIloE,YAAY,EAAA6b,MAAA,OAAa08F,YAAa,CACpDt4G,OAAQ,CACJjuB,KAAM,eACNwmI,QAAS,qGAEbC,YAAY,IAGhB,OADA,EAAA34G,YAAYC,cAAcmoE,GACnB,IACX,CACA,MAAM,eAAE7gB,GAAmB04B,EACrBC,GAAiB,IAAAyrB,yBAAwBpkD,IACzC,mBAAE84B,IAAuB,OAAgB94B,GAO/C,OANiBn8E,KAAK21G,YAAY,CAC9Bz5G,WACA+4G,qBACAH,iBACA34B,kBAGR,CACA,WAAAw5B,EAAY,SAAEz5G,EAAQ,mBAAE+4G,EAAkB,eAAEH,EAAc,eAAE34B,IACxD,GAAIjgF,aAAoB,EAAA4nE,mBAAoB,CACxC,MAAM,SAAEh5D,GAAamqG,EAAmB,IAA4B54B,UAC9DmxD,EAAStxI,EAAS0mB,YAExB,GADwB1mB,aAAoB,EAAA8+B,cACvB,CACjB,MAAMgiE,EAAQ,IAAIloE,YAAY,EAAA6b,MAAA,OAAa08F,YAAa,CACpDt4G,OAAQ,CACJjuB,KAAM,eACNwmI,QAAS,2DAEbC,YAAY,IAGhB,OADA,EAAA34G,YAAYC,cAAcmoE,GACnB,IACX,CACA,MAAMywC,EAAUD,EAAOnnI,IAAK0P,GAAe,EAAAud,MAAMxM,UAAU/Q,EAAW8M,eAChE67G,EAAqB,EAAAprG,MAAMxM,UAAUhc,GACrC4iI,EAAgCD,EAAQ/vH,KAAMyI,GAAW,oBAAgBA,EAAOte,WAAY62H,EAAmB72H,cAAciD,UAAY2iI,EAAQ,IAAI3iI,SAC3J,MAAO,CACHA,WACAw4B,mBAAoBtjC,KAAKyM,cAAc0R,WAAWrT,UAC9C4iI,EACJ54B,iBAER,CACK,CACD,MAAMK,GAAsB,QAAqCj5G,EAASmN,GAAI8yE,GAC9E,IAAKg5B,EACD,OAEJ,MAAO,CACHhxG,QAASgxG,EACTL,iBAER,CACJ,CACA,eAAAw1B,CAAgBn7G,EAASk1C,GACrB,MAAM/oE,GAAiB,IAAAy/B,mBAAkB5L,IACnC,SAAEjzB,GAAaZ,EACfknB,EAAStmB,EAASumB,aAClB,gBAAElB,EAAe,OAAEyjB,GAAWxiB,EAC9Bo7C,EAAsB,CAAC1hE,EAASmN,KAChC,aAAEqnG,EAAY,eAAEv0B,EAAc,aAAE64B,GAAiBh1G,KAAKmsI,0BAA0BjwI,IAAa,CAAC,EAYpG,MAAO,CACH4vI,YAZgB,CAChB5kI,SAAU,CACNqa,gBAAiB,IAAIA,GACrByjB,OAAQ,IAAIA,GACZh7B,oBAAqB9N,EAASolE,yBAC9B/6D,kBAAmB,GACnBo9C,SAAU3jD,KAAK+0D,cACfigD,gBAEJ9nG,KAAM,CAAC,GAIPm3D,eACAqsC,eACAx0G,WACAigF,iBACA64B,eACAp3C,sBAER,CACA,yBAAAuuE,CAA0BjwI,GACtB,MAAMgzB,EAAahzB,EAASmN,GACtBskI,GAAuB,OAAsBz+G,GACnD,IAAKy+G,EACD,OAEJ,MAAM,eAAExxD,GAAmBwxD,EACrBj9B,GAAe,OAAsBv0B,GAC3C,IAAKu0B,EACD,OAGJ,MAAO,CACHA,eACAv0B,iBACA64B,cAJiB,IAAAiN,sBAAqB/yF,EAAYitD,EAAgBu0B,GAM1E,CACA,gBAAA65B,CAAiBp7G,GACb,MAAMuuC,EAAW19D,KAAKgjH,WAAahjH,KAAK8pI,eAAe36G,IACjD,aAAEuhF,EAAY,eAAEv0B,EAAc,YAAE2vD,GAAgB9rI,KAAKqqI,YAAcrqI,KAAKsqI,gBAAgBn7G,IACxF,KAAEjiB,EAAI,SAAEhG,EAAW,CAAC,GAAM4kI,GAAe,CAAC,GAC1C,gBAAEvqH,EAAe,OAAEyjB,GAAW99B,EAC9B0mI,EAAc5tI,KAAKyM,cAAcs8H,SAASC,gBAAgBt4B,IAC1D,SAAEx0G,IAAa,IAAA6+B,mBAAkB5L,GACjC6lF,GAAe,IAAAiN,sBAAqB/lH,EAASmN,GAAI8yE,EAAgBu0B,GACvE,IAAKk9B,IAAgB54B,EACjB,OAEJ,IAAI64B,EAAe,KAAMC,EAAsB,KAC3C9tI,KAAKyM,cAAcs8H,SAASlgF,UAC5BglF,EAAeD,GAyJ3B,SAAsB52H,EAAGC,EAAGC,EAAGgF,EAAG6xH,EAAS,IACvC,MAAO,CACH9wI,KAAKgmB,MAAMjM,GAAK,IAAMA,GAAK+2H,GAC3B9wI,KAAKgmB,MAAMhM,GAAK,IAAMA,GAAK82H,GAC3B9wI,KAAKgmB,MAAM/L,GAAK,IAAMA,GAAK62H,GAC3B7xH,EAER,CAhK0C8xH,IAAgBh5B,GAC9C84B,EAAsB,KAkB1B,MAhBsB,IACfpwE,EACHjvD,OAAQvB,GAAM8nD,SAASvmD,OACvBiiG,eACAnvF,kBACA0sH,gBAAiBjuI,KAAK+pI,aAAaC,OACnCvlF,YAAazkD,KAAKykD,YAClB03B,iBACAn3C,SACAqnG,uBAAwBrsI,KAAKqsI,uBAC7B13B,eAAgB30G,KAAKyM,cAAckoG,eACnCloG,cAAezM,KAAKyM,cACpBohI,eACAC,sBACAn4G,WAAY31B,KAAK21B,WAAWnlB,KAAKxQ,MAGzC,CACA,UAAAkuI,CAAW/+G,EAAUnvB,KAAK+pI,aAAa56G,QAAS/qB,GAC5C,MAAM,aAAE2lI,GAAiB/pI,KACnBmuI,EAAe/pI,GAAS+pI,cACT,IAAjBA,EACAnuI,KAAKurI,cAAcp8G,IAEG,IAAjBg/G,GACLnuI,KAAK4qI,cAAcz7G,GAEvB,MAAM7zB,GAAiB,IAAAy/B,mBAAkB5L,GACnCw6F,EAAU3pH,KAAKwqI,4BAA4BlvI,EAAgB0E,KAAKuqI,iBAAiBp7G,GAAU,EAAAk6G,kBAAkB+E,YAMnH,OALArE,EAAaC,QAAS,EAClBrgB,GAAS15E,WACT85F,EAAahB,QAAUpf,EACvBogB,EAAa56G,QAAUA,GAEpBw6F,CACX,CACA,aAAAihB,CAAcz7G,EAAUnvB,KAAK+pI,aAAa56G,SACtC,IAAKA,EACD,OAEJnvB,KAAK8uF,eACL,MAAMxzF,GAAiB,IAAAy/B,mBAAkB5L,GACzCnvB,KAAKwqI,4BAA4BlvI,EAAgB0E,KAAKuqI,iBAAiBp7G,GAAU,EAAAk6G,kBAAkBE,eACnGvpI,KAAK+pI,aAAahB,QAAU,KAC5B/oI,KAAK+pI,aAAaC,QAAS,CAC/B,CACA,aAAAuB,CAAcp8G,EAAUnvB,KAAK+pI,aAAa56G,SACtC,IAAKA,EACD,OAEJ,MAAMkmF,EAAgBr1G,KAAKuqI,iBAAiBp7G,GACxCnvB,KAAKi1B,MAAQj1B,KAAKi1B,KAAK5rB,IACvBrJ,KAAK2sI,gBAAgBzsI,IAAIF,KAAKi1B,KAAK5rB,GAAI,CACnC8lB,UACAuhF,aAAc2E,EAAc3E,eAGpC,MAAMp1G,GAAiB,IAAAy/B,mBAAkB5L,GACzCnvB,KAAKwqI,4BAA4BlvI,EAAgB+5G,EAAe,EAAAg0B,kBAAkBC,eAClFtpI,KAAK8uF,eACL9uF,KAAK+pI,aAAahB,QAAU,KAC5B/oI,KAAK+pI,aAAaC,QAAS,CAC/B,CACA,iCAAO5lB,CAA2BloH,EAAUkI,GACxC,MAAMiqI,EAAiBjqI,GAASiqI,iBAAkB,EAC5C/5E,GAAc,IAAA2gB,qBACdq5D,GAAkB,IAAAzH,6BAA4B3qI,EAAUo4D,GAC9D,IAAKg6E,GAAiB1tI,OAClB,OAEJ,MAAM2tI,EAAqBD,EAAgBx5H,OAAQu+B,GAAeA,EAAWnmC,KAAKolC,SAAS4F,UAAUt3C,QACrG,IAAK2tI,EAAmB3tI,OACpB,OAEJ,MAQMmoI,EARgB,IAAIz0B,EAAiB,CAAC,EAAG,CAC3C7nG,cAAe,CACX8nG,WAAY,CACR+zB,mBAAoB,EAAAkG,kBAExB75B,eAAgB,wBAGMu5B,WAAWhyI,EAASizB,UAC5C,KAAE8F,EAAI,eAAEknD,GAAmB4sD,EAC3B0F,EAAgBx5G,GAAMjwB,aACtB0pI,EAAqBD,EAAcE,oBAAsBF,GACzD,WAAE5mI,GAAe4mI,EACjB9pH,EAAYzoB,EACbymD,kBACAxsC,MAAMkI,YACNa,eACL,IAAK,MAAMm0B,KAAck7F,EAAoB,CACzC,MAAMr5H,EAAY,CACd,CAACyB,KAAWA,KACZ,CAACA,KAAWA,KACZ,CAACA,KAAWA,OAEV,SAAEuhC,GAAa7E,EAAWnmC,KAAKolC,QACrC,IAAK,MAAMhkC,KAAS4pC,EAAU,CACPvzB,EAAUyV,aAAa9rB,GAC/BrN,QAAQ,CAACwO,EAAGiiC,KACnBx8B,EAAUw8B,GAAK,GAAKz0C,KAAKa,IAAIoX,EAAUw8B,GAAK,GAAIjiC,GAChDyF,EAAUw8B,GAAK,GAAKz0C,KAAKkS,IAAI+F,EAAUw8B,GAAK,GAAIjiC,IAExD,CACAyF,EAAUjU,QAAQ,CAAC2tI,EAAOl9F,KACtBk9F,EAAM,GAAK3xI,KAAKgmB,MAAMhmB,KAAKkS,IAAI,EAAGy/H,EAAM,KACxCA,EAAM,GAAK3xI,KAAKgmB,MAAMhmB,KAAKa,IAAI+J,EAAW6pC,GAAO,EAAGk9F,EAAM,OAE9D,MAAMC,GAAc,OAAsB1yD,GACpC9pC,EAAagB,EAAWnmC,KAAK8nD,UAAU,IAAM9c,EAAS,GACtD42F,EAAanqH,EAAUyV,aAAaiY,GAAYhsC,IAAIpJ,KAAKgmB,OACzD8rH,EAAaL,EAAmB37C,cAAc+7C,IAAe,EACnE,IAAIE,GAAe,EACfC,GAAmB,EACvB,IAAK,MAAMC,KAAah3F,EAAU,CAC9B,MAAMi3F,EAAYxqH,EAAUyV,aAAa80G,GAAW7oI,IAAIpJ,KAAKgmB,OACvDmsH,EAAYV,EAAmB37C,cAAco8C,GAC/CC,IAAcL,EACdC,GAAe,EAEVI,GAAa,IAClBH,GAAmB,EAE3B,CACA,MACMv+B,EADUs+B,GAAgBC,EAE1BF,EACe,IAAfA,EACIF,EACA,EACV,IAAK,IAAInlI,EAAIwL,EAAU,GAAG,GAAIxL,GAAKwL,EAAU,GAAG,GAAIxL,IAChD,IAAK,IAAIuI,EAAIiD,EAAU,GAAG,GAAIjD,GAAKiD,EAAU,GAAG,GAAIjD,IAChD,IAAK,IAAII,EAAI6C,EAAU,GAAG,GAAI7C,GAAK6C,EAAU,GAAG,GAAI7C,IAAK,CACrD,MAAM+8B,EAAazqB,EAAUO,aAAa,CAACxb,EAAGuI,EAAGI,KAC7B,IAAAg9H,yBAAwBjgG,EAAY8I,IAEpDu2F,EAAca,SAAS5lI,EAAGuI,EAAGI,EAAGq+F,EAExC,CAGJ29B,IACA,IAAA55E,kBAAiBphB,EAAWqhB,cAEpC,CACA,MAAM66E,EAASd,EAAce,4BAC7B,IAAAj1B,iCAAgCp+B,EAAgBozD,EACpD,E,oKC7VJ,MAAM,sBAAE7qG,EAAqB,sBAAEX,EAAqB,QAAEvI,GAAY,YAC3D,SAASi0G,EAAuC1tE,GACnD,MAAO2kB,EAAQ/xE,EAAK2tD,EAAM4iB,GAASnjB,EAKnC,MAAO,CAJS,CAACO,EAAK,GAAI3tD,EAAI,IACV,CAACuwE,EAAM,GAAIwB,EAAO,IACnB,CAACpkB,EAAK,GAAIokB,EAAO,IACnB,CAACxB,EAAM,GAAIvwE,EAAI,IAEpC,CA0EA,MAAM+6H,EAAmB,CACrB,CAAC,EAAArG,kBAAkBsG,YAAct6B,IAC7B,MAAM,OAAE5mG,EAAM,SAAEvS,EAAQ,sBAAE0zI,EAAqB,OAAE5qG,EAAM,gBAAEzjB,GAAqB8zF,EAC9E,IAAK5mG,EACD,OAEJ,MAAMmI,EAAS,cACXnI,EAAO7N,QAAU,GACjB,SAASgW,EAAQnI,EAAO,GAAIA,EAAO,IACnC,WAAWmI,EAAQA,EAAQ,KAG3B,UAAUA,EAAQnI,EAAO,IAE7B4mG,EAAc9vD,YAAc3uC,EAC5By+F,EAAcw6B,UAAYnrG,EAAsBkrG,EAAuBh5H,GACvE,MAAMk5H,EAAcrhI,EAAO7N,QAAU,EAAI,cAAc6N,EAAO,GAAIA,EAAO,IAAM,EAAI,EAG7EshI,EADUN,EADUhhI,EAAOpI,IAAKqI,GAAMxS,EAASgnD,cAAcx0C,KAEpCrI,IAAK8sD,GAAWj3D,EAASk1B,cAAc+hC,IAChE68E,EAAmB,gBAAgBhrG,EAAO,GAAIA,EAAO,GAAIA,EAAO,IACtE,eAAegrG,EAAkBA,GACjC,MAAMC,EAAwB,gBAAgB1uH,EAAgB,GAAIA,EAAgB,GAAIA,EAAgB,IACtG,eAAe0uH,EAAuBA,GACtC,MAAMzE,EAAY,cAClB,WAAWA,EAAWwE,EAAkBC,GACxC,eAAezE,EAAWA,GAC1B,MAIM0E,GAJsB76B,EAAc+1B,mBACtC/1B,EAAc+1B,kBAAkBxqI,OAAS,EACvCy0G,EAAc+1B,kBACd,CAAC/1B,EAAc9vD,cACqBl/C,IAAKiI,GAAU,WAAWA,IAC9D6hI,EAAqBD,EAAc/vH,QAASm1E,GAzG1D,SAAsC1+E,EAAQouB,EAAQwmG,EAAW9lG,GAC7D,MAAM0qG,EAAY,gBAAgBx5H,EAAO,GAAIA,EAAO,GAAIA,EAAO,IACzDjC,EAAM,cACZ,iBAAiBA,EAAKy7H,EAAWprG,EAAQU,GACzC,MAAMghD,EAAS,cACf,iBAAiBA,EAAQ0pD,EAAWprG,GAASU,GAC7C,MAAMw/C,EAAQ,cACd,iBAAiBA,EAAOkrD,EAAW5E,EAAW9lG,GAC9C,MAAM48B,EAAO,cAEb,OADA,iBAAiBA,EAAM8tE,EAAW5E,GAAY9lG,GACvC,CACHghD,EACA/xE,EACA2tD,EACA4iB,EAER,CAyF0EmrD,CAA6B/6C,EAAa06C,EAAkBxE,EAAWsE,IACnIQ,EAAmBH,EAAmB9pI,IAAKm9C,GAAU9e,EAAsBkrG,EAAuBpsF,IAClGtuC,GAAY,IAAAq7H,8BAA6BD,EAAkBV,EAAsB3qH,iBACvFowF,EAAc+1B,kBAAoB8E,EAClC76B,EAAcnf,WAAas6C,EAAqBT,EAAgB,CAC5D3E,kBAAmB8E,EACnBN,wBACAlqG,OAAQoqG,IAEZz6B,EAAco7B,oBAAsBv7H,IAG5C,SAASs7H,EAAqBT,EAAiB,GAAI3rI,EAAU,CAAC,GAC1D,IAAK2rI,GAA4C,IAA1BA,EAAenvI,OAClC,MAAM,IAAIxC,MAAM,2DAEpB,MAAOsgF,EAASC,EAAartD,EAAYD,GAAY0+G,EAC/Cn5H,EAAS,cACf,SAASA,EAAQ8nE,EAASC,GAC1B,WAAW/nE,EAAQA,EAAQ,IAC3B,MAAM85H,EAAe,cACrB,cAAcA,EAAcr/G,EAAUqtD,GACtC,MAAMqV,EAAU,YAAY28C,GAAgB,EAC5C,eAAeA,EAAcA,GAC7B,MAAMC,EAAe,cACrB,cAAcA,EAAcr/G,EAAYotD,GACxC,MAAMsV,EAAU,YAAY28C,GAAgB,EAC5C,eAAeA,EAAcA,GAC7B,MAAMzlG,EAAS,cACf,WAAWA,EAAQwlG,EAAcC,GACjC,eAAezlG,EAAQA,GACvB,MAAM0lG,EAAkBxsI,EAAQshC,QAAUzoC,KAAKkS,IAAI4kF,EAASC,GACtD68C,EAxHV,SAA+BC,EAASprG,GACpC,IAAKorG,EAAQlwI,QAAU8kC,GAAU,EAC7B,OAAO,KAEX,MAAMqrG,EAAgBrrG,EAASA,EACzBsrG,EAAaF,EAAQzqI,IAAKiI,GAAU,CAACA,EAAM,GAAIA,EAAM,GAAIA,EAAM,KAC/D22F,EAAW,GACjB,IAAK,IAAIv7F,EAAI,EAAGA,EAAIsnI,EAAWpwI,OAAQ8I,IAAK,CACxC,MAAMhO,EAAQs1I,EAAWtnI,EAAI,GACvBsI,EAAMg/H,EAAWtnI,GACjBob,EAAK9S,EAAI,GAAKtW,EAAM,GACpBqpB,EAAK/S,EAAI,GAAKtW,EAAM,GACpBspB,EAAKhT,EAAI,GAAKtW,EAAM,GACpBu1I,EAAgBnsH,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAC/CigF,EAASt8F,KAAK,CAAEjN,QAAOurI,OAAQ,CAACniH,EAAIC,EAAIC,GAAKisH,iBACjD,CACA,OAAQ7hG,IACJ,IAAKA,EACD,OAAO,EAEX,IAAK,MAAMghG,KAAaY,EAAY,CAChC,MAAMlsH,EAAKsqB,EAAW,GAAKghG,EAAU,GAC/BrrH,EAAKqqB,EAAW,GAAKghG,EAAU,GAC/BprH,EAAKoqB,EAAW,GAAKghG,EAAU,GACrC,GAAItrH,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GAAM+rH,EAC/B,OAAO,CAEf,CACA,IAAK,MAAM,MAAEr1I,EAAK,OAAEurI,EAAM,cAAEgK,KAAmBhsC,EAAU,CACrD,GAAsB,IAAlBgsC,EAAqB,CACrB,MAAMnsH,EAAKsqB,EAAW,GAAK1zC,EAAM,GAC3BqpB,EAAKqqB,EAAW,GAAK1zC,EAAM,GAC3BspB,EAAKoqB,EAAW,GAAK1zC,EAAM,GACjC,GAAIopB,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GAAM+rH,EAC/B,OAAO,EAEX,QACJ,CACA,MAAMjsH,EAAKsqB,EAAW,GAAK1zC,EAAM,GAC3BqpB,EAAKqqB,EAAW,GAAK1zC,EAAM,GAC3BspB,EAAKoqB,EAAW,GAAK1zC,EAAM,GAC3BsrD,EAAMliC,EAAKmiH,EAAO,GAAKliH,EAAKkiH,EAAO,GAAKjiH,EAAKiiH,EAAO,GACpDh8F,EAAIhuC,KAAKkS,IAAI,EAAGlS,KAAKa,IAAI,EAAGkpD,EAAMiqF,IAClCC,EAAQx1I,EAAM,GAAKurI,EAAO,GAAKh8F,EAC/BkmG,EAAQz1I,EAAM,GAAKurI,EAAO,GAAKh8F,EAC/BmmG,EAAQ11I,EAAM,GAAKurI,EAAO,GAAKh8F,EAC/BomG,EAAQjiG,EAAW,GAAK8hG,EACxBI,EAAQliG,EAAW,GAAK+hG,EACxBI,EAAQniG,EAAW,GAAKgiG,EAC9B,GAAIC,EAAQA,EAAQC,EAAQA,EAAQC,EAAQA,GAASR,EACjD,OAAO,CAEf,CACA,OAAO,EAEf,CAiE4BS,CAAsBptI,EAAQgnI,mBAAqB,GAAIwF,GAC/E,GAAIp1G,EAAQu4D,EAASC,GAAU,CAC3B,MACMy9C,EAAY,CACd76H,SACA8uB,OAHWquD,EAIX29C,QAJW39C,KAMf,MAAO,CAAC9lD,EAAUN,KACd,IAAIyB,EAAanB,EAIjB,OAHKmB,GAAczB,GAAYvpC,EAAQwrI,wBACnCxgG,EAAarL,EAAsB3/B,EAAQwrI,sBAAuBjiG,MAEjEyB,MAGDyhG,IAAkBzhG,KAGf,OAAcqiG,EAAWriG,IAExC,CACA,MAAO,CAACnB,EAAUN,KACd,IAAIyB,EAAanB,EAIjB,IAHKmB,GAAczB,GAAYvpC,EAAQwrI,wBACnCxgG,EAAarL,EAAsB3/B,EAAQwrI,sBAAuBjiG,KAEjEyB,EACD,OAAO,EAEX,GAAIyhG,IAAkBzhG,GAClB,OAAO,EAEX,MAAMuiG,EAAW,cACjB,cAAcA,EAAUviG,EAAYx4B,GACpC,MAAMg7H,EAAc,SAASD,EAAUzmG,GACjC2mG,EAAO,cACb,iBAAiBA,EAAMF,EAAUzmG,GAAS0mG,GAC1C,MAAME,EAAc,cACdC,EAAkB,cACxB,cAAcA,EAAiBn7H,EAAQ8nE,GACvC,cAAcozD,EAAaD,EAAME,GACjC,MAAMz0I,EAAI,SAASw0I,EAAapB,GAC1BlzI,EAAI,SAASs0I,EAAanB,GAChC,OAAQrzI,EAAIA,GAAMy2F,EAAUA,GAAYv2F,EAAIA,GAAMw2F,EAAUA,IAAY,EAEhF,CACA,MAAMg+C,EAAkB,IAAI,IAAc,SAAU,IAAaC,WAAY,IAAaC,SAAUxC,EAAkB,IAAayC,sBAAuB,IAAapJ,QAAS,IAAaqJ,oBACvLC,EAA4B,IAAI,IAAc,kBAAmB,IAAaJ,WAAY,IAAaC,SAAUxC,EAAkB,IAAayC,sBAAuB,IAAaG,iBAAkB,IAAan0H,UAAW,IAAa4qH,QAAS,IAAal4B,cAAe,IAAauhC,oBAC7R5D,EAAmBwD,EAAgBO,iBACnCC,EAAwBH,EAA0BE,gB,sHCrMxD,MAAM,sBAAE7tG,GAA0B,YAC5B+tG,EAAsB,CACxB,CAAC,EAAApJ,kBAAkBsG,YAAct6B,IAC7B,MAAM,OAAE5mG,EAAM,SAAEvS,EAAQ,sBAAE0zI,GAA2Bv6B,EACrD,IAAK5mG,EACD,OAEJ,MAAMmI,EAAS,gBAAgB,EAAG,EAAG,GACrCnI,EAAOxN,QAASqN,IACZ,SAASsI,EAAQA,EAAQtI,KAE7B,WAAWsI,EAAQA,EAAQ,EAAInI,EAAO7N,QACtCy0G,EAAc9vD,YAAc3uC,EAC5By+F,EAAcw6B,UAAYnrG,EAAsBkrG,EAAuBh5H,GACvE,MAAM,UAAE1B,EAAS,eAAE23B,GAK3B,SAAgC3wC,EAAUuS,EAAQmhI,GAC9C,IAAI8C,EAAsBjkI,EAAOpI,IAAKm9C,GAC3B9e,EAAsBkrG,EAAuBpsF,IAExDkvF,EAAsBA,EAAoBrsI,IAAKiI,GACpCA,EAAMjI,IAAKssI,GACP11I,KAAKgmB,MAAM0vH,KAG1B,MAAMz9H,GAAY,IAAAq7H,8BAA6BmC,EAAqB9C,EAAsB3qH,kBACnFslB,EAAIC,EAAI4T,EAAI6B,GAAMxxC,EACnBmkI,EAAQ,cACRC,EAAQ,cACd,cAAcD,EAAOpoG,EAAID,GACzB,cAAcsoG,EAAO5yF,EAAI1V,GACzB,MAAMuoG,EAAO,YAAYF,GACnBG,EAAO,YAAYF,GACzB,eAAeD,EAAOA,GACtB,eAAeC,EAAOA,GACtB,MAAM3nG,EAAS,cACf,WAAWA,EAAQ0nG,EAAOC,GAC1B,eAAe3nG,EAAQA,GACvB,MAAMjjC,EAAY2nI,EAAsB/qH,eAClC/c,EAAU8nI,EAAsB1xE,cAChC,gBAAE38C,GAAoBrlB,EAASumB,YAC/BuwH,EAAM,wCAAoC,CAC5C/qI,YACAH,WACDyZ,GACGsrB,EAAkBoB,IACpB,MAAMx+B,EAAI,cACV,cAAcA,EAAGw+B,EAAU1D,GAC3B,MAAM+P,EAAI,SAAS7qC,EAAGmjI,GAChBK,EAAQ,SAASxjI,EAAGojI,GACpBl7F,EAAI16C,KAAK6e,IAAI,SAASrM,EAAGy7B,IAC/B,OAAQoP,IAAM04F,GACV14F,GAAKw4F,EAAOE,GACZC,IAAUD,GACVC,GAASF,EAAOC,GAChBr7F,GAAKq7F,GAEb,MAAO,CAAE99H,YAAW23B,iBACxB,CA/C8CqmG,CAAuBh3I,EAAUuS,EAAQmhI,GAC/Ev6B,EAAcnf,WAAarpD,EAC3BwoE,EAAco7B,oBAAsBv7H,IA8C5C,MAAMi+H,EAAqB,IAAI,IAAc,YAAa,IAAalB,WAAY,IAAaC,SAAUO,EAAqB,IAAaN,sBAAuB,IAAapJ,QAAS,IAAaqJ,oBAChMgB,EAA+B,IAAI,IAAc,qBAAsB,IAAanB,WAAY,IAAaC,SAAUO,EAAqB,IAAaN,sBAAuB,IAAaG,iBAAkB,IAAan0H,UAAW,IAAa4qH,QAAS,IAAal4B,cAAe,IAAauhC,oBACtSiB,EAAsBF,EAAmBZ,iBACda,EAA6Bb,gB,0LCT9D,SAASe,EAAkCp3I,EAAUolB,EAAUC,GAC3D,MAAMnb,EAAWlK,EAASs6B,cAC1B,IAAKpwB,IAAaA,EAASxF,OACvB,OAEJ,MAAMmb,EAAqB3V,EAASC,IAAKlC,IACrC,MAAM,qBAAE6D,GAAyB,EAAAorB,SAAA,IAAa,mBAAoBjvB,GAC5D6X,EAMd,SAAkCsF,EAAUiyH,EAAsBhyH,GAC9D,MAAMQ,EAAM,cACZ,SAASA,EAAKT,EAAUiyH,GACxB,MAAMvsF,EAAM,SAASjlC,EAAKR,GAC1B,OAAOtkB,KAAK6e,IAAIkrC,EACpB,CAXyBwsF,CAAyBlyH,EAAUtZ,EAAsBuZ,GAC1E,MAAO,CAAEpd,UAAS6X,cAGtB,OADAD,EAAmBE,KAAK,CAACC,EAAGhF,IAAMgF,EAAEF,SAAW9E,EAAE8E,UAC1CD,EAAmB,GAAG5X,OACjC,C,gDCjEA,QATA,SAAuC+Q,EAAWu+H,GAC9C,MAAMC,EAAmBx+H,EAAU1C,UAAU,EAAE1U,EAAKqR,KAASrR,IAAQqR,GACrE,IAA0B,IAAtBukI,EACA,MAAM,IAAIt1I,MAAM,uDAIpB,OAFA8W,EAAUw+H,GAAkB,IAAMD,EAClCv+H,EAAUw+H,GAAkB,IAAMD,EAC3Bv+H,CACX,C,uECPA,MAAM,QAAEyM,GAAY,EAAA6xC,UACpB,SAASmgF,EAAqBllI,EAAQ5G,EAAY+rI,GAAU,GACxD,IAAIvmF,EAAO12C,IACP22C,EAAOsmF,GAAWj9H,IAAW,EAC7B42C,EAAO52C,IACP62C,EAAOomF,GAAWj9H,IAAW,EAC7B82C,EAAO92C,IACP+2C,EAAOkmF,GAAWj9H,IAAW,EACjC,MAAMk9H,EAA6B,IAAtBplI,EAAO,IAAI7N,OACxB,IAAK,IAAI8I,EAAI,EAAGA,EAAI+E,EAAO7N,OAAQ8I,IAAK,CACpC,MAAMgF,EAAID,EAAO/E,GACjB2jD,EAAOpwD,KAAKa,IAAI4Q,EAAE,GAAI2+C,GACtBC,EAAOrwD,KAAKkS,IAAIT,EAAE,GAAI4+C,GACtBC,EAAOtwD,KAAKa,IAAI4Q,EAAE,GAAI6+C,GACtBC,EAAOvwD,KAAKkS,IAAIT,EAAE,GAAI8+C,GAClBqmF,IACApmF,EAAOxwD,KAAKa,IAAI4Q,EAAE,IAAM++C,EAAMA,GAC9BC,EAAOzwD,KAAKkS,IAAIT,EAAE,IAAMg/C,EAAMA,GAEtC,CAqBA,OApBI7lD,GACAwlD,EAAOpwD,KAAKkS,IAAIykI,EAAU/rI,EAAW,GAAK8Z,EAAU,EAAG0rC,GACvDC,EAAOrwD,KAAKa,IAAI81I,EAAU/rI,EAAW,GAAK8Z,EAAU9Z,EAAW,GAAK,EAAGylD,GACvEC,EAAOtwD,KAAKkS,IAAIykI,EAAU/rI,EAAW,GAAK8Z,EAAU,EAAG4rC,GACvDC,EAAOvwD,KAAKa,IAAI81I,EAAU/rI,EAAW,GAAK8Z,EAAU9Z,EAAW,GAAK,EAAG2lD,GACnEqmF,GAA8B,IAAtBhsI,EAAWjH,SACnB6sD,EAAOxwD,KAAKkS,IAAIykI,EAAU/rI,EAAW,GAAK8Z,EAAU,EAAG8rC,GACvDC,EAAOzwD,KAAKa,IAAI81I,EAAU/rI,EAAW,GAAK8Z,EAAU9Z,EAAW,GAAK,EAAG6lD,KAGrEkmF,IACNvmF,EAAOpwD,KAAKkS,IAAI,EAAGk+C,GACnBC,EAAOrwD,KAAKa,IAAI6Y,IAAU22C,GAC1BC,EAAOtwD,KAAKkS,IAAI,EAAGo+C,GACnBC,EAAOvwD,KAAKa,IAAI6Y,IAAU62C,GACtBqmF,IACApmF,EAAOxwD,KAAKkS,IAAI,EAAGs+C,GACnBC,EAAOzwD,KAAKa,IAAI6Y,IAAU+2C,KAG3BmmF,EACD,CACE,CAACxmF,EAAMC,GACP,CAACC,EAAMC,GACP,CAACC,EAAMC,IAET,CAAC,CAACL,EAAMC,GAAO,CAACC,EAAMC,GAAO,KACvC,CACO,SAAS+iF,EAA6B9hI,EAAQ5G,GACjD,OAAO8rI,EAAqBllI,EAAQ5G,GAAY,EACpD,CACO,SAASygH,EAA+B75G,EAAQqlI,GACnD,OAAOH,EAAqBllI,EAAQqlI,GAAY,EACpD,C,meCjDA,MAAMC,EAAgC,wCACvB,SAASn3C,EAAqCvpD,GACzD,MAAM,SAAE6E,GAAa7E,EAAWnmC,MAAMolC,SAAW,CAAC,EAClD,IAAK4F,GAAYA,EAASt3C,OAAS,EAE/B,YADAwP,QAAQC,KAAK,+DAAgE6nC,IAGjF,QAAiB7E,EAAWqhB,gBAC5B,EAAAs/E,EAAA,GAAoC3gG,GACpC,MAAM+wB,EAAkBlsB,EAAS,GAC3B+7F,EAAgB/7F,EAASA,EAASt3C,OAAS,GAC3C40E,EAAgB,CAClBtuE,SAAU,IACHmsC,EAAWnsC,SACdy8C,SAAUowF,EACVG,iBAAkB7gG,EAAWnsC,SAASgtI,kBAAoB7gG,EAAWnsC,SAASy8C,UAElFz2C,KAAM,CACFq0D,YAAa,CAAC,EACdvM,QAAS,CACLvmD,OAAQ,CAAC21D,EAAiB6vE,GAC1BzvD,QAASnxC,EAAWnmC,KAAK8nD,QAAQwvB,QAC3B,IAAKnxC,EAAWnmC,KAAK8nD,QAAQwvB,cAC7BxmF,GAEVs0C,QAAS,IACFe,EAAWnmC,KAAKolC,SAEvB4mD,OAAQ7lD,EAAWnmC,KAAKgsF,OACxBgX,aAAc,IACP78D,EAAWnmC,KAAKgjG,eAG3Bx7C,cAAe,EAAA3jB,UAAA,SACf6jB,aAAa,EACbr5D,aAAa,EACb2xF,UAAU,EACVC,eAAWnvF,EACXm2I,iBAAkB9gG,EAAW8gG,iBAC7BC,uBAAwB/gG,EAAW+gG,wBAKvC,OAHA,QAAc5+D,EAAeniC,EAAWnsC,SAAS8C,sBACjD,EAAAqqI,EAAA,GAAiC7+D,IACjC,IAAAjiC,2BAA0BiiC,GACnBA,CACX,C,6MChDA,MAAM,QAAEh6C,GAAY,YACL,SAAS0mE,EAAwB7uD,EAAYkiC,GACxD,MAAM,SAAEr9B,GAAa7E,EAAWnmC,KAAKolC,SAC/B,OAAE7jC,GAAW4kC,EAAWnmC,KAAK8nD,SAC7B,OAAEp0D,GAAW6N,EACnB,GAAI8mE,IAAgB30E,EAChB,OAAOs3C,EAASt3C,OAKpB,GAHI20E,EAAc,IACdA,GAAeA,EAAc30E,GAAUA,GAEvB,IAAhB20E,EACA,OAAO,EAEX,MAAMzW,EAASrwD,EAAO8mE,GAChB/sE,EAAQ0vC,EAAS1lC,UAAWlE,GAAUktB,EAAQsjC,EAAQxwD,IAC5D,IAAe,IAAX9F,EACA,OAAOA,EAEX,IAAI8rI,EAAkB39H,IACtB,OAAOuhC,EAASvX,OAAO,CAAC2kD,EAAch3E,EAAOimI,KACzC,MAAMv4H,EAAW,qBAAqB1N,EAAOwwD,GAC7C,OAAI9iD,EAAWs4H,GACXA,EAAkBt4H,EACXu4H,GAEJjvD,IACP,EACR,C,6FCkFA,QA/GA,SAAkBn4E,EAAMqnI,EAAMpwI,GAC1B,IAAIqwI,EAAUC,EAAUC,EAASp2G,EAAQq2G,EAASC,EAC9CC,EAAiB,EACjBC,GAAU,EACVC,GAAS,EACTjkD,GAAW,EACf,MAAMkkD,GAAUT,GAAiB,IAATA,GAAsD,mBAAjCjlH,OAAOgiF,sBACpD,GAAoB,mBAATpkG,EACP,MAAM,IAAI+nI,UAAU,uBASxB,SAASC,EAAWxK,GAChB,MAAMthB,EAAOorB,EACPW,EAAUV,EAIhB,OAHAD,EAAWC,OAAW12I,EACtB82I,EAAiBnK,EACjBpsG,EAASpxB,EAAKoY,MAAM6vH,EAAS/rB,GACtB9qF,CACX,CACA,SAAS82G,EAAWC,EAAad,GAC7B,OAAIS,EACO1lH,OAAOgiF,sBAAsB+jC,GAEjC3jH,WAAW2jH,EAAad,EACnC,CAoBA,SAASe,EAAa5K,GAClB,MAAM6K,EAAoB7K,EAAOkK,EAEjC,YAAyB72I,IAAjB62I,GACJW,GAAqBhB,GACrBgB,EAAoB,GACnBR,GAJuBrK,EAAOmK,GAIGH,CAC1C,CACA,SAASc,IACL,MAAM9K,EAAOT,KAAKC,MAClB,GAAIoL,EAAa5K,GACb,OAAO+K,EAAa/K,GAExBiK,EAAUS,EAAWI,EArBzB,SAAuB9K,GACnB,MACMgL,EAAsBhL,EAAOmK,EAC7Bc,EAAcpB,GAFM7J,EAAOkK,GAGjC,OAAOG,EACD/3I,KAAKa,IAAI83I,EAAajB,EAAUgB,GAChCC,CACV,CAcuCC,CAAclL,GACrD,CACA,SAAS+K,EAAa/K,GAElB,OADAiK,OAAU52I,EACN+yF,GAAY0jD,EACLU,EAAWxK,IAEtB8J,EAAWC,OAAW12I,EACfugC,EACX,CAcA,SAASu3G,KAAazsB,GAClB,MAAMshB,EAAOT,KAAKC,MACZ4L,EAAaR,EAAa5K,GAIhC,GAHA8J,EAAWprB,EACXqrB,EAAW10I,KACX60I,EAAelK,EACXoL,EAAY,CACZ,QAAgB/3I,IAAZ42I,EACA,OAzDZ,SAAqBjK,GAGjB,OAFAmK,EAAiBnK,EACjBiK,EAAUS,EAAWI,EAAcjB,GAC5BO,EAAUI,EAAWxK,GAAQpsG,CACxC,CAqDmBy3G,CAAYnB,GAEvB,GAAIG,EAEA,OADAJ,EAAUS,EAAWI,EAAcjB,GAC5BW,EAAWN,EAE1B,CAIA,YAHgB72I,IAAZ42I,IACAA,EAAUS,EAAWI,EAAcjB,IAEhCj2G,CACX,CAIA,OAnGAi2G,EAAOxoI,OAAOwoI,IAAS,GACnB,OAASpwI,KACT2wI,EAAU/+E,QAAQ5xD,EAAQ2wI,SAC1BC,EAAS,YAAa5wI,EACtBuwI,EAAUK,EAAS/3I,KAAKkS,IAAInD,OAAO5H,EAAQuwI,UAAY,EAAGH,GAAQG,EAClE5jD,EAAW,aAAc3sF,EAAU4xD,QAAQ5xD,EAAQ2sF,UAAYA,GA2FnE+kD,EAAU7qI,OAjCV,gBACoBjN,IAAZ42I,GA3CR,SAAqBvrI,GACjB,GAAI4rI,EACA,OAAO1lH,OAAO0mH,qBAAqB5sI,GAEvC2nG,aAAa3nG,EACjB,CAuCQ6sI,CAAYtB,GAEhBE,EAAiB,EACjBL,EAAWI,EAAeH,EAAWE,OAAU52I,CACnD,EA4BA83I,EAAUK,MA3BV,WACI,YAAmBn4I,IAAZ42I,EAAwBr2G,EAASm3G,EAAaxL,KAAKC,MAC9D,EA0BA2L,EAAUM,QAzBV,WACI,YAAmBp4I,IAAZ42I,CACX,EAwBOkB,CACX,C,8BC/Ge,SAASplD,EAAuB2lD,GAC3C,MAAMzxH,EAKV,SAA2B+9D,GACvB,MAAM2zD,EAAqB,CAAC3zD,EAAa,GAAIA,EAAa,IAAI1mE,KAAKs6H,GAC7DC,EAAqB,CAAC7zD,EAAa,GAAIA,EAAa,IAAI1mE,KAAKw6H,GAC7DvxD,EAAQoxD,EAAmBA,EAAmB11I,OAAS,GACvD+T,EAAM6hI,EAAmB,GACzB9vD,EAAS8vD,EAAmBA,EAAmB51I,OAAS,GAC9D,MAAO,CACH+T,MACA+xE,SACAxB,SAEJ,SAASqxD,EAAUr6H,EAAGhF,GAClB,OAAOgF,EAAE,GAAKhF,EAAE,IAAM,EAAI,CAC9B,CACA,SAASu/H,EAAUv6H,EAAGhF,GAClB,OAAOgF,EAAE,GAAKhF,EAAE,IAAM,EAAI,CAC9B,CACJ,CAtBoBw/H,CAAkBL,GAC5BplB,GAAWrsG,EAAQjQ,IAAI,GAAKiQ,EAAQ8hE,OAAO,IAAM,EAEvD,MADsB,CAAC9hE,EAAQsgE,MAAM,GAAI+rC,EAE7C,C,mLCJA,MAAM,iBAAE5pF,GAAqB,EAAAsJ,MACvBgmG,EAAc,KACdC,EAAc,SACdC,EAA8B,CAChC,EACA,EACA,EACA,GAEEC,EAA2B,CAC7B,MACA,OAEEC,EAA0B,CAC5B,MACA,OAEEC,EAAe,CACjB,EAAG,KACH,EAAG,UACH,EAAG,KACH,EAAG,KACH,EAAG,UACH,EAAG,QACH,EAAG,aACH,EAAG,SACH,EAAG,MACH,EAAG,QACH,GAAK,WAGHC,EAAS,IACTC,EAAmC,CAAC17I,EAAOw5D,KAC7C,MAAM,YAAEx6C,EAAW,gBAAE28H,GAAoB37I,EACzC,IAAI40F,EAAO+mD,EAAkB,KAAOR,EACpC,MAAMS,EAAaD,EAAkB,MAAWP,EAChD,IAAIzhD,EAAW/E,EAAO6mD,EAClBz6I,EAAQ,EACR66I,EAAkB,GACtB,IAAK78H,IACCA,EAAY1T,OAAS0T,EAAY88H,4BACnC,MAAO,CAAElnD,OAAM+E,WAAU34F,QAAO46I,cAEpC,GAAI58H,EAAY1T,OAASugC,EAAiBkwG,aACtC,MAAO,CACHnnD,KAAMumD,EACNxhD,SAAUwhD,EAAcM,EACxBz6I,QACA46I,WAAYR,GAGpB,GAAIp8H,EAAY88H,4BAA6B,CACzC,IAAItuC,EAAaC,EACjB,GAAIvqG,MAAMC,QAAQq2D,IAA+B,IAAnBA,EAAQp0D,QACjCooG,EAAaC,GAAej0C,OAE5B,GAAuB,mBAAZA,EAAwB,CACpC,MAAMvmD,EAASumD,IACfg0C,EAAcv6F,EAAO,GACrBw6F,EAAcx6F,EAAO,EACzB,CACA,IAAI+oI,EAAUh9H,EAAY88H,4BAA4BxiI,OAAQ2iI,GAAWzuC,EAAY,IAAMyuC,EAAOC,qBAC9F1uC,EAAY,IAAMyuC,EAAOE,qBACzB3uC,EAAY,IAAMyuC,EAAOG,qBACzB5uC,EAAY,IAAMyuC,EAAOI,qBACzB5uC,EAAY,IAAMwuC,EAAOC,qBACzBzuC,EAAY,IAAMwuC,EAAOE,qBACzB1uC,EAAY,IAAMwuC,EAAOG,qBACzB3uC,EAAY,IAAMwuC,EAAOI,qBAC7B,IAAKL,GAAS52I,OACV,MAAO,CAAEwvF,OAAM+E,WAAU34F,QAAO46I,cAIpC,GAFAI,EAAUA,EAAQ1iI,OAAQ2iI,GAAWZ,EAA4Bh8H,SAAS48H,EAAOK,iBAC7EhB,EAAyBj8H,SAAS,GAAG48H,EAAOM,2BAA2BN,EAAOO,6BAC7ER,EAAQ52I,OACT,MAAO,CACHwvF,KAAMumD,EACNxhD,SAAUwhD,EAAcM,EACxBz6I,QACA46I,WAAYR,GAGpB,MAAMa,EAASD,EAAQ,GACjBS,EAAiBh7I,KAAK6e,IAAI27H,EAAOQ,gBACjCC,EAAiBj7I,KAAK6e,IAAI27H,EAAOS,gBAEvC,IAD4B,EAAAnnG,UAAA,QAAkBknG,EAAgBC,EAvD1D,MA+DA,MAAO,CACH9nD,KAAMumD,EACNxhD,SAAUwhD,EAAcM,EACxBz6I,QACA46I,WAAYR,GAVhBp6I,EAAQ,EAAIy7I,EACZZ,EAAkB,YAClBjnD,EAAO4mD,EAAaS,EAAOM,0BAA4B,UACvD5iD,EAAW/E,EAAO6mD,CAU1B,MACSz8H,EAAYhe,QACjBA,EAAQge,EAAYhe,OAaxB,MAXc,CACV6qC,EAAiBE,KACjBF,EAAiB8wG,KACjB9wG,EAAiB+wG,MACjB/wG,EAAiBG,WACjBH,EAAiBI,WACjBJ,EAAiBC,SAEXzsB,SAASL,GAAa1T,QAC5BuwI,EAAkB78H,EAAY1T,MAE3B,CACHspF,KAAMA,GAAQinD,EAAkB,IAAIA,IAAoB,IACxDliD,SAAUA,GAAYkiD,EAAkB,IAAIA,IAAoB,IAChE76I,QACA46I,WAAYA,GAAcC,EAAkB,IAAIA,IAAoB,MAGtEgB,EAAkC,CAAC78I,EAAOw5D,KAC5C,MAAO9xC,GAAc8xC,GACf,YAAEx6C,GAAgBhf,EACxB,IAAI03F,EAAQ,CAAC,OACTv4E,EAAS,CAAC,MACV08H,EAAkB,GACtB,IAAK78H,IACCA,EAAY1T,OAAS0T,EAAY88H,4BACnC,MAAO,CAAEpkD,QAAOv4E,UAEpB,GAAIH,EAAY88H,4BAA6B,CACzC,MAAMgB,EAA2B99H,EAAY88H,4BAA4BxiI,OAAQ2iI,GAAWZ,EAA4Bh8H,SAAS48H,EAAOK,iBACpIf,EAAwBl8H,SAAS,GAAG48H,EAAOM,2BAA2BN,EAAOO,4BACjF,IAAKM,GAA0B13I,OAC3B,MAAO,CAAEsyF,QAAOv4E,UAEpB,MAAM88H,EAASa,EAAyB56H,KAAM+5H,GAAWv0H,EAAW,IAAMu0H,EAAOC,qBAC7Ex0H,EAAW,IAAMu0H,EAAOE,qBACxBz0H,EAAW,IAAMu0H,EAAOG,qBACxB10H,EAAW,IAAMu0H,EAAOI,qBAC5B,IAAKJ,EACD,MAAO,CAAEvkD,QAAOv4E,UAEpB,MAAM,iBAAE49H,EAAmB,EAAC,iBAAEC,EAAmB,GAAMf,GACjD,eAAEQ,EAAc,eAAEC,GAAmBT,EACrCgB,GAAUv1H,EAAW,GAAKu0H,EAAOG,oBAAsBY,GACzDN,EAGJb,EAAkB,YAClB18H,EAAS,EAHOuI,EAAW,GAAKu0H,EAAOC,oBAAsBa,GACzDN,EAEcQ,GAClBvlD,EAAQ,CACJ8jD,EAAaS,EAAOM,yBACpBf,EAAaS,EAAOO,yBAE5B,CACA,MAAO,CACH9kD,QACAv4E,SACA08H,oBAGFqB,EAAuBl9I,GAAUA,EAAMgf,aAAaw7E,QAAU,C,2FClKpE,MAAM,sBAAEtxD,GAA0B,YAClC,SAASi0G,EAAqBC,EAAcj0H,EAAWk0H,GACnD,MAAOnyD,EAAQ/xE,GAAOikI,EAChBrzF,EAAc,iBAAiBmhC,EAAO,GAAK/xE,EAAI,IAAM,GAAI+xE,EAAO,GAAK/xE,EAAI,IAAM,GAAI+xE,EAAO,GAAK/xE,EAAI,IAAM,GACzGmkI,EAAc,cAAcpyD,EAAQ/xE,GAAO,GAC3C,UAAEO,EAAS,aAAE6kB,EAAY,iBAAEE,GAsCrC,SAA2BtV,EAAWk0H,EAAkBD,EAAcrzF,EAAauzF,GAC/E,MAAMjxI,EAAa8c,EAAUM,iBACrB5T,IAAK0nI,EAAWr2E,OAAQs2E,EAAc9tG,OAAQ+tG,GAAeJ,EAC/D9+G,EAAe,cACfE,EAAmB,cACzB,iBAAiBF,EAAcwrB,EAAa0zF,EAAWH,GACvD,iBAAiB7+G,EAAkBsrB,EAAa0zF,GAAYH,GAC5D,iBAAiB/+G,EAAcA,EAAci/G,GAAeF,GAC5D,iBAAiB7+G,EAAkBA,EAAkB++G,EAAcF,GACnE,iBAAiB/+G,EAAcA,EAAcg/G,GAAYD,GACzD,iBAAiB7+G,EAAkBA,EAAkB8+G,EAAWD,GAChE,MAAMI,EAAax0G,EAAsB/f,EAAWoV,GAC9Co/G,EAAiBz0G,EAAsB/f,EAAWsV,GAClDm/G,EAAYR,EAAavyI,IAAKqI,GAAMg2B,EAAsB/f,EAAWjW,IACrEwG,GAAY,IAAAq7H,8BAA6B,CAAC2I,EAAYC,KAAmBC,GAAYvxI,GAC3F,MAAO,CAAEqN,YAAW6kB,eAAcE,mBACtC,CAtD0Do/G,CAAkB10H,EAAWk0H,EAAkBD,EAAcrzF,EAAauzF,GAChI,MAAO,CACH5jI,YACAqwC,YAAaA,EACbuzF,cACA/+G,aAAcA,EACdE,iBAAkBA,EAE1B,CACA,SAASq/G,EAAoBV,EAAcj0H,GACvC,MAAM1c,EAAY0c,EAAUE,eACtBk0H,EAAY,gBAAgB9wI,EAAU,GAAIA,EAAU,GAAIA,EAAU,IAClE+wI,EAAe,gBAAgB/wI,EAAU,GAAIA,EAAU,GAAIA,EAAU,IACrEsxI,EAAW,gBAAgBtxI,EAAU,GAAIA,EAAU,GAAIA,EAAU,IAOvE,OAAO0wI,EAAqBC,EAAcj0H,EALjB,CACrBtT,IAAK0nI,EACLr2E,OAAQs2E,EACR9tG,OAJoB,YAAY,cAAequG,IAOvD,CACA,SAASC,EAAgCZ,EAAcj0H,EAAWzoB,GAC9D,IAAKA,EACD,MAAM,IAAIkC,MAAM,gEAEpB,MAAMokB,EAAStmB,EAASumB,YAClBuiB,EAAS,gBAAgBxiB,EAAOwiB,OAAO,GAAIxiB,EAAOwiB,OAAO,GAAIxiB,EAAOwiB,OAAO,IAC3EzjB,EAAkB,gBAAgBiB,EAAOjB,gBAAgB,GAAIiB,EAAOjB,gBAAgB,GAAIiB,EAAOjB,gBAAgB,IAC/GiqH,EAAY,cAClB,WAAWA,EAAWxmG,EAAQzjB,GAM9B,OAAOo3H,EAAqBC,EAAcj0H,EALjB,CACrBtT,IAAKm6H,EACLtgG,OAAQ3pB,EACRmhD,OAAQ,YAAY,cAAe19B,IAG3C,C,+DC5Ce,SAASy0G,EAAyBpmG,GAC7C,MAAMz5B,GAAY,OAA0By5B,GAC5C,IAAKz5B,GAAWhZ,OACZ,OAKJ,OAHiBgZ,EAAU8D,KAAMxhB,GAAaA,EACzCs6B,cACAvN,KAAM9kB,GAAYA,IAAYkvC,EAAWnsC,SAASX,qBACpCqT,EAAU,EACjC,C,gDCNA,QAJA,SAAkB3Z,GACd,MAAM6G,SAAc7G,EACpB,OAAiB,OAAVA,IAA4B,WAAT6G,GAA8B,aAATA,EACnD,C,0kBCHe,SAAS4yI,EAAcC,EAAQ1rG,GAC1C,MAAM,OAAEr3B,EAAM,OAAE8uB,GAAWi0G,EACrBjI,EAAUiI,EAAOjI,SAAWhsG,EAASA,EAC3C,OAASuI,EAAS,GAAKr3B,EAAO,KAAOq3B,EAAS,GAAKr3B,EAAO,KACrDq3B,EAAS,GAAKr3B,EAAO,KAAOq3B,EAAS,GAAKr3B,EAAO,KACjDq3B,EAAS,GAAKr3B,EAAO,KAAOq3B,EAAS,GAAKr3B,EAAO,KAClD86H,CACR,C,8DCNe,MAAMkI,SACR55I,KAAK65I,YAAc,IAAIroI,GAAO,QAC9BxR,KAAK85I,QAAU,EAAI,QACnB95I,KAAK46E,KAAO,YAAc,CACnC,gBAAOm/D,CAAU31I,GACb,MAAM,eAAEovF,EAAc,QAAEsmD,EAAO,KAAEl/D,GAASx2E,EAC1CpE,KAAK46E,KAAOA,EACZ56E,KAAK85I,QAAUA,EACf95I,KAAK65I,YAAY/lI,QACC,eAAd9T,KAAK46E,KACLk/D,EAAQ74I,QAASuH,IACbxI,KAAK65I,YAAY35I,IAAIsI,EAAO,IAAI,KAA6B,CAAEgrF,sBAInExzF,KAAK65I,YAAY35I,IAAI45I,EAAS,IAAI,KAA6B,CAAEtmD,mBAEzE,CACA,oBAAOyC,CAAc/oF,GACjB,MAAM,aAAEwjG,KAAiBspC,GAAc9sI,EACvC,IAAKwjG,EACD,MAAM,IAAItyG,MAAM,mDAEpB,MAAM67I,EAA2B,eAAdj6I,KAAK46E,KAClB56E,KAAK65I,YAAYz5I,IAAIswG,GACrB1wG,KAAK65I,YAAYz5I,IAAIJ,KAAK85I,SAChC,IAAKG,EACD,MAAM,IAAI77I,MAAM,mCAAmCsyG,KAEvDupC,EAAWhkD,cAAc+jD,EAC7B,CACA,oBAAO3jD,CAAcjyF,GACjB,GAAkB,eAAdpE,KAAK46E,KAAuB,CAC5B,MAAMr8C,EAAS,CAAC,EAIhB,OAHAv+B,KAAK65I,YAAY54I,QAAQ,CAACg5I,EAAYvpC,KAClCnyE,EAAOmyE,GAAgBupC,EAAW5jD,cAAcjyF,KAE7Cm6B,CACX,CAEA,OADmBv+B,KAAK65I,YAAYz5I,IAAIJ,KAAK85I,SAC3BzjD,cAAcjyF,EACpC,E,8ECwEJ,SAAS81I,EAAKC,EAAQC,EAAWx5I,GAG7B,OAFc,IAAIlC,MAAMkC,EAAS,GACf8sB,KAAK0sH,GACTD,GAAQz5I,OAAOE,EACjC,C,iBACA,QAvHA,SAAmBqU,EAAQolI,EAAMj2I,EAAU,CAAC,GACxC,MAAM4yC,EAAU5yC,EAAQ4yC,QAClBsjG,EAAal2I,EAAQk2I,WACrBC,EAASn2I,EAAQm2I,OACjBzlI,EAAS1Q,EAAQ0Q,OACjBN,EAAYpQ,EAAQoQ,YAAa,EACjCgmI,EAAYp6I,EAAIi6I,GAChBI,EA6EN,WACI,MAAMA,EAMV,SAAiB75I,GACb,MAAM85I,EAAQ,GACRC,EAAc,SAAUR,GAC1B,OAAOA,EAAO/3I,MAAM,IAAIiE,IAAI,SAAU83B,GAClC,OAAOM,SAASN,EAAG,IAAM,CAC7B,EACJ,EACA,IAAK,IAAIz0B,EAAI,EAAGA,EAAIzM,KAAKmtD,IAAI,EAAGxpD,GAAS8I,GAAK,EAAG,CAC7C,MAAMywI,EAASD,EAAKxwI,EAAEsX,SAAS,GAAI,IAAKpgB,GACxC85I,EAAM/xI,KAAKgyI,EAAYR,GAC3B,CACA,OAAOO,CACX,CAlByBE,CAAQP,EAAKz5I,QAClC,OAAO65I,EAAa3lI,OAAO,SAAU+lI,GACjC,MAAM5rI,EAkBlB,SAAwBjC,GACpB,IAAIiC,EAAQ,EACZ,IAAK,IAAIvF,EAAI,EAAGA,EAAIsD,EAAMpM,OAAQ8I,GAAK,EAClB,IAAbsD,EAAMtD,KACNuF,GAAS,GAGjB,OAAOA,CACX,CA1B0B6rI,CAAeD,GAC7B,OAAiB,IAAV5rI,IAA0B,IAAVA,GAAeuF,EAC1C,EACJ,CAnFqBumI,GACf7mI,EAAQ,GACRgmG,EAAU,GACV8gC,EAAS,IAAIt/G,IACbnT,EAASnkB,EAAQmkB,OAEvB,IADArU,EAAMvL,KAAK,CAAEsyI,YAAaZ,IACnBnmI,EAAMtT,OAAS,GAClBwT,EAAMF,EAAMrJ,OAEhB,MAAO,CACHqvG,WAEJ,SAAS9lG,EAAM8mI,GACX,MAAMC,EAAUD,EAAID,YACdG,EAAWF,EAAIG,aACjBv1B,EAAQq1B,KAiBhB,SAAuBh7I,GACnB,MAAO7C,EAAGE,EAAGqR,EAAI,GAAK1O,EAChBm7I,EAAOh+I,EAAI,MAAQ,OAASE,EAAI,MAAQ,OAASqR,EAAI,QAC3DmsI,EAAO13I,IAAIg4I,EACf,CAlBIC,CAAcJ,GAmBlB,SAAgBA,GACZ,MAAMlsG,EAAO7uC,EAAI+6I,GACjB,OAAOZ,EAASA,EAAOtrG,EAAMurG,GAAavrG,IAASurG,CACvD,CArBQgB,CAAOL,IAsBf,SAAuBA,GACnBjhC,EAAQvxG,KAAKwyI,GACTnkG,GACAA,KAAWmkG,EAEnB,CA1BQM,CAAcN,GAmCtB,SAAsBA,GAClB,IAAK,IAAIzxI,EAAI,EAAGA,EAAI+wI,EAAa75I,OAAQ8I,GAAK,EAAG,CAC7C,MAAMmxI,EAAOJ,EAAa/wI,GACpBgyI,EAAWP,EAAQz6I,MAAM,GAC/B,IAAK,IAAIuR,EAAI,EAAGA,EAAIkpI,EAAQv6I,OAAQqR,GAAK,EACrCypI,EAASzpI,IAAM4oI,EAAK5oI,IAEG,IAAvB6C,IAAS4mI,KAGT51B,EAAQ41B,IAGZxnI,EAAMvL,KAAK,CACPsyI,YAAaS,EACbL,aAAcF,IAEtB,CACJ,CApDQQ,CAAaR,IA0BrB,SAAwBC,GACpB,MAAO99I,EAAGE,EAAGqR,EAAI,GAAKusI,EAChBE,EAAOh+I,EAAI,MAAQ,OAASE,EAAI,MAAQ,OAASqR,EAAI,QAC3D0Z,GAAQroB,IAAIo7I,EAAMF,GACdd,GACAA,KAAcc,EAEtB,CA9BQQ,CAAeR,GAEvB,CACA,SAASt1B,EAAQ3lH,GACb,MAAO7C,EAAGE,EAAGqR,EAAI,GAAK1O,EAChBm7I,EAAOh+I,EAAI,MAAQ,OAASE,EAAI,MAAQ,OAASqR,EAAI,QAC3D,OAAOmsI,EAAO33I,IAAIi4I,EACtB,CA2CA,SAASl7I,EAAI+6I,GACT,OAAOlmI,KAAUkmI,EACrB,CAqBJ,C,0ECtGO,SAASU,EAAsBp3F,EAAad,GAC/C,MAAMmrD,GAAY,IAAAtqD,cAAaC,GAC/B,QAAkBzmD,IAAd8wG,EACA,MAAO,GAEX,MAAMgtC,EAAgBhtC,EAAUE,eAChC,IAAKpvG,OAAO4B,KAAKs6I,GAAel7I,OAC5B,MAAO,GAEX,GAAI+iD,GAAYm4F,EAAcn4F,GAC1B,MAAO,CAACm4F,EAAcn4F,IAG1B,OADgC/jD,OAAO+a,OAAOmhI,GAAehnI,OAAQknE,GAAiBA,aAAwB,IAElH,C,yECdO,SAAS2lC,EAAwCxlC,GACpD,MAAM+zB,GAAe,IAAAgF,iBAAgB/4B,IAC/B,kBAAE8gD,GAAsB/sB,EAAa+E,mBAAmByM,QAC9D,IAAK,MAAOhR,EAAc0vB,KAAmBnD,EAAkBhyG,UAAW,CAEtE,GADiCvsB,MAAM6D,KAAK69H,GAAgB1iH,KAAMg3C,IAAkB,QAAcA,GAAeE,aAE7G,OAAO87C,CAEf,CAEJ,C,qFCTO,SAAS+Q,EAAgCtlC,EAAgB/sC,GAAY,SAAElzC,EAAQ,aAAEglH,IACpF,MACM/N,GADe,IAAA+B,iBAAgB/4B,GACH84B,mBAAmB54B,SACrD,GAAIngF,aAAoB,EAAA4nE,mBAAoB,CACxC,MAAM,SAAEh5D,GAAaqoG,EACfurB,EAAqB,EAAAprG,MAAMxM,UAAUhc,GAC3C,IAAK4zH,EACD,OAEJ,MAAM15H,EAAe05H,EAAmB15H,aAClC2f,EAAY+5G,EAAmB/5G,UAC/Bo3H,EAAW,EAAAhrG,UAAA,sBAAgCpsB,EAAWyqB,GACtDshE,EAAe1rG,EAAa41G,SAASmhC,EAAS,GAAIA,EAAS,GAAIA,EAAS,IAExEC,EAiDd,SAA+B9sG,EAAawhE,EAAcx0G,EAAUyoB,EAAWu8F,GAC3E,MAAM+6B,EAAmB,CAACC,EAAQC,KAC9B,MAAMC,EAAiB,CAACltG,EAAY,GAAKgtG,EAAQhtG,EAAY,GAAKitG,GAC5D/sG,EAAalzC,EAASk1B,cAAcgrH,GACpCp3I,EAAe2f,EAAUvkB,IAAI,gBAAgB4E,aAC7C+2I,EAAW,EAAAhrG,UAAA,sBAAgCpsB,EAAWyqB,GAC5D,OAAOpqC,EAAa41G,SAASmhC,EAAS,GAAIA,EAAS,GAAIA,EAAS,KAEpE,OAAOM,EAAgBJ,EAAkBvrC,EAAcwQ,EAC3D,CA1DuBo7B,CADKpgJ,EAASgnD,cAAc9T,GACOshE,EAAcx0G,EAAUyoB,EAAWu8F,GACrF,OAAO86B,EAAStrC,OAAe1yG,CACnC,CACA,MAAMm3G,GAAsB,IAAAC,sCAAqCl5G,EAASmN,GAAI8yE,GAE9E,IADc,EAAA7oD,MAAM6iB,SAASg/D,GAEzB,OAEJ,MAAMonC,GAAyB,QAAsBrgJ,EAASmN,GAAI8yE,GAC5Dx3D,EAAY43H,GAAwBpmI,MAAMkI,YAAYa,eACtD68H,EAAW,EAAAhrG,UAAA,sBAAgCpsB,EAAWyqB,GACtDvnC,EAAa8c,EAAUM,gBACvBjgB,EAAgB2f,EAAU3f,cAC5B,EAAA+rC,UAAA,aAAuBq5E,+BAA+B,CAClDviH,aACA1C,WAAYwf,EAAUqoB,eAAeC,aAAaC,YAEpDwjE,EAAe1rG,EAAa+tF,cAAcgpD,GAC1CC,EAoBV,SAA4BD,EAAUl0I,EAAY7C,EAAc0rG,EAAcwQ,GAC1E,MAAM+6B,EAAmB,CAACC,EAAQC,EAAQK,KACtC,MAAMC,EAAc,CAChBV,EAAS,GAAKG,EACdH,EAAS,GAAKI,EACdJ,EAAS,GAAKS,GAElB,OAAOx3I,EAAa41G,SAAS6hC,EAAY,GAAIA,EAAY,GAAIA,EAAY,KAE7E,OAAOJ,EAAgBJ,EAAkBvrC,EAAcwQ,EAC3D,CA9BmBw7B,CAAmBX,EAAUl0I,EAAY7C,EAAc0rG,GACtE,OAAOsrC,EAAStrC,OAAe1yG,CACnC,CACA,SAASq+I,EAAgBJ,EAAkBvrC,EAAcwQ,EAAe,GACpE,MAAMy7B,EAAgBj+I,MAAM6D,KAAK,CAAE3B,OAAQ,EAAIsgH,EAAe,GAAK,CAAChhG,EAAGxW,IAAMA,EAAIw3G,GACjF,IAAK,MAAMg7B,KAAUS,EACjB,IAAK,MAAMR,KAAUQ,EACjB,IAAK,MAAMH,KAAUG,EAAe,CAChC,GAAe,IAAXT,GAA2B,IAAXC,GAA2B,IAAXK,EAChC,SAEJ,MAAMI,EAAgBX,EAAiBC,EAAQC,EAAQK,GACvD,QAAsBx+I,IAAlB4+I,GAA+BlsC,IAAiBksC,EAChD,OAAO,CAEf,CAGR,OAAO,CACX,C,sHChDO,SAASp7B,EAA4BrlC,EAAgB/sC,EAAYhrC,EAAU,CAAC,GAC/E,MAAM8rG,GAAe,IAAAgF,iBAAgB/4B,GAC/B84B,EAAqB/E,EAAa+E,mBAClC4nC,EAAwBz4I,GAAS04I,oBAAsBl9I,OAAO4B,KAAKyzG,GAAoB,GAC7F,IAAK4nC,EACD,MAAM,IAAIz+I,MAAM,gBAAgB+9E,uCAEpC,OAAQ0gE,GACJ,KAAK,EAAAzgE,4BAA4BC,SAC7B,OAOL,SAA2C6zB,EAAc9gE,GAAY,SAAElzC,IAC1E,MAAMi3G,EAAejD,EAAa+E,mBAAmB54B,SACrD,GAAIngF,aAAoB,EAAA4nE,mBAAoB,CACxC,MAAM,SAAEh5D,GAAaqoG,EACfurB,EAAqB,EAAAprG,MAAMxM,UAAUhc,GAC3C,IAAK4zH,EACD,OAGJ,OADqBA,EAAmB/5G,UAAUo4H,wBAAwB3tG,EAE9E,CACA,MAAMylF,GAAuB,IAAAkD,uCAAsC77H,EAASmN,GAAI6mG,EAAa/zB,gBAC7F,GAAI04C,EAAqBj0H,OAAS,EAE9B,YADAwP,QAAQC,KAAK,mGAGjB,MAAM8kG,EAAsB0f,EAAqB,GAEjD,IADc,EAAAvhG,MAAM6iB,SAASg/D,GAEzB,OAEJ,MAAMonC,GAAyB,QAAsBrgJ,EAASmN,GAAI6mG,EAAa/zB,gBACzEx3D,EAAY43H,GAAwBpmI,MAAMkI,YAAYa,eACtD68H,EAAW,EAAAhrG,UAAA,sBAAgCpsB,EAAWyqB,GACtDvnC,EAAa8c,EAAUM,gBACvBjgB,EAAgB2f,EAAU3f,cAC5B,EAAA+rC,UAAA,aAAuBq5E,+BAA+B,CAClDviH,aACA1C,WAAYwf,EAAUqoB,eAAeC,aAAaC,YAG1D,OADqBloC,EAAa+tF,cAAcgpD,EAEpD,CAvCmBiB,CAAkC9sC,EAAc9gE,EAAYhrC,GACvE,KAAK,EAAAg4E,4BAA4BslC,QAC7B,OAsCL,SAA0CxR,EAAc9gE,GAAY,SAAElzC,IACzE,MAAM6gI,EAAc7sB,EAAa+E,mBAAmByM,QAC9CuI,EAAiBvrH,MAAM6D,KAAKw6H,EAAYE,kBAAkBz7H,SAC1D,gBAAE+f,GAAoBrlB,EAASumB,YACrC,IAAK,MAAMiuF,KAAgBuZ,EAAgB,CACvC,MAAMgzB,EAAiBlgB,EAAYE,kBAAkB78H,IAAIswG,GACzD,GAAKusC,EAGL,IAAK,MAAMvoF,KAAiBuoF,EAAgB,CACxC,MAAM5pG,GAAa,QAAcqhB,GACjC,IAAKrhB,EACD,SAEJ,MAAM,SAAE6E,GAAa7E,EAAWnmC,KAAKolC,QACrC,GAAK,EAAAvB,UAAA,QAAkBxvB,EAAiB8xB,EAAWnsC,SAASqa,mBAGxD,IAAA8tH,yBAAwBjgG,EAAY8I,GACpC,OAAOlsC,OAAO0kG,EAEtB,CACJ,CACJ,CA7DmBwsC,CAAiChtC,EAAc9gE,EAAYhrC,GACtE,QACI,OAEZ,C,+CCrBA,MAkJA,EAlJe,4+J,4QCEf,MACM+4I,EAAsB,cACtBC,EAA0B,CAC5BC,WAAY,EACZC,kBAAmB,IACnBC,WAAY,CACRC,kBAAmB,EACnBC,wBAAyB,EACzBt/H,UAAW,OAGnB0d,eAAek0E,EAAW2tC,EAAmB1qC,EAAkB5uG,EAAUg5I,GACrE,MAAMO,EAAgB,CAAC,EAAG,EAAG,IACvB,WAAEN,EAAU,kBAAEC,GAAsB19I,OAAOm3E,OAAO,CAAC,EAAGqmE,EAAyBh5I,GAC/Em5I,EAAa39I,OAAOm3E,OAAO,CAAC,EAAGqmE,EAAwBG,WAAYn5I,EAAQm5I,YAC3Ep3H,EAAS,EAAAmN,MAAMxM,UAAU42H,GACzBE,EAAW,EAAAtqH,MAAMxM,UAAUksF,IAC1Bh0G,EAASC,EAAM0mC,GAAaxf,EAAOte,WAC1C,GAAI+1I,EAAS/1I,WAAW,KAAO7I,GAC3B4+I,EAAS/1I,WAAW,KAAO5I,GAC3B2+I,EAAS/1I,WAAW,KAAO89B,EAC3B,MAAM,IAAIvnC,MAAM,+CAEpB,IAAIy/I,EAAgB5gJ,KAAK+Q,MAAM/Q,KAAKopC,KAAKpnC,GAAQ,EAAID,GAAW,EAAI2mC,GAAa,GAAK,GACtFk4G,EAAgB5gJ,KAAKa,IAAI+/I,EAAe,KACxC,MAAM1qC,EAAeyqC,EAAS54I,aAAao/B,6BAC3C,IAAI05G,EAAkB33H,EAAOnhB,aAAao/B,6BACpC05G,aAA2B70I,eAC7B60I,EAAkB,IAAI70I,aAAa60I,IAEvC,MAAMC,EAAiB,CACnBC,4BAA6Bb,EAC7Bc,cAAed,GAEbe,QAAgBC,UAAUC,KAAKC,kBAC/BC,QAAeJ,EAAQK,cAAc,CAAER,mBACvCS,EAAcV,EAAgB5zI,WAC9Bu0I,EAAqCZ,EAAgBa,YAAYC,kBACjEC,EAAqB,EAAIC,WAAWF,kBACpCG,EAAeR,EAAOS,mBAAmB,CAC3CC,KAAM,MAGJC,EAAoB,IAAIP,YAAY,CACtC1/I,EACAC,EACA0mC,EACA,IAEEu5G,EAAkBZ,EAAOa,aAAa,CACxC30H,KAAMy0H,EAAkB/0I,WACxBk1I,MAAOC,eAAeC,QAAUD,eAAeE,WAE7CC,EAA2BlB,EAAOa,aAAa,CACjD30H,KAAMg0H,EACNY,MAAOC,eAAeI,QAAUJ,eAAeE,WAEnDjB,EAAOoB,MAAMC,YAAYH,EAA0B,EAAG1B,GACtD,MAAM8B,EAAqB,CAAC,EAAG,GAAGv5I,IAAI,IAAMi4I,EAAOa,aAAa,CAC5D30H,KAAMg0H,EACNY,MAAOC,eAAeI,QAClBJ,eAAeQ,SACfR,eAAeE,YAEvBjB,EAAOoB,MAAMC,YAAYC,EAAmB,GAAI,EAAG,IAAIlB,YAAYvrC,IACnE,MAAM2sC,EAAqB,CAAC,EAAG,GAAGz5I,IAAI,IACXi4I,EAAOa,aAAa,CACvC30H,KAAMg0H,EACNY,MAAOC,eAAeI,QAClBJ,eAAeQ,SACfR,eAAeE,YAIrBQ,EAAmBzB,EAAOa,aAAa,CACzC30H,KAAMi0H,EACNW,MAAOC,eAAeI,QAClBJ,eAAeQ,SACfR,eAAeE,WAEjBS,EAAkB1B,EAAOa,aAAa,CACxC30H,KAAMo0H,EACNQ,MAAOC,eAAeI,QAClBJ,eAAeQ,SACfR,eAAeE,WAEjBU,EAAgB,IAAIpB,WAAW,CACjC7/I,EACAC,EACA0mC,GACC,GACA,GACA,IAEL24G,EAAOoB,MAAMC,YAAYK,EAAiB,EAAGC,GAC7C,MAAMC,EAAkB5B,EAAO6B,sBAAsB,CACjDl1H,QAAS,CACL,CACIm1H,QAAS,EACTzwH,WAAY0wH,eAAeC,QAC3BjqG,OAAQ,CACJvvC,KAAM,YAGd,CACIs5I,QAAS,EACTzwH,WAAY0wH,eAAeC,QAC3BjqG,OAAQ,CACJvvC,KAAM,sBAGd,CACIs5I,QAAS,EACTzwH,WAAY0wH,eAAeC,QAC3BjqG,OAAQ,CACJvvC,KAAM,YAGd,CACIs5I,QAAS,EACTzwH,WAAY0wH,eAAeC,QAC3BjqG,OAAQ,CACJvvC,KAAM,YAGd,CACIs5I,QAAS,EACTzwH,WAAY0wH,eAAeC,QAC3BjqG,OAAQ,CACJvvC,KAAM,sBAGd,CACIs5I,QAAS,EACTzwH,WAAY0wH,eAAeC,QAC3BjqG,OAAQ,CACJvvC,KAAM,sBAGd,CACIs5I,QAAS,EACTzwH,WAAY0wH,eAAeC,QAC3BjqG,OAAQ,CACJvvC,KAAM,YAGd,CACIs5I,QAAS,EACTzwH,WAAY0wH,eAAeC,QAC3BjqG,OAAQ,CACJvvC,KAAM,eAKhBy5I,EAAa,CAAC,EAAG,GAAGl6I,IAAKqD,IAC3B,MAAM82I,EAAuBZ,EAAmBl2I,GAC1C+2I,EAAuBX,EAAmBp2I,GAC1Cg3I,EAAwBd,GAAoBl2I,EAAI,GAAK,GACrDi3I,EAAyBb,GAAoBp2I,EAAI,GAAK,GAC5D,OAAO40I,EAAOsC,gBAAgB,CAC1BC,OAAQX,EACRj1H,QAAS,CACL,CACIm1H,QAAS,EACTU,SAAU,CACNzqG,OAAQ6oG,IAGhB,CACIkB,QAAS,EACTU,SAAU,CACNzqG,OAAQmpG,IAGhB,CACIY,QAAS,EACTU,SAAU,CACNzqG,OAAQmqG,IAGhB,CACIJ,QAAS,EACTU,SAAU,CACNzqG,OAAQoqG,IAGhB,CACIL,QAAS,EACTU,SAAU,CACNzqG,OAAQqqG,IAGhB,CACIN,QAAS,EACTU,SAAU,CACNzqG,OAAQsqG,IAGhB,CACIP,QAAS,EACTU,SAAU,CACNzqG,OAAQ0pG,IAGhB,CACIK,QAAS,EACTU,SAAU,CACNzqG,OAAQ2pG,SAMtBe,EAAWzC,EAAO0C,sBAAsB,CAC1CH,OAAQvC,EAAO2C,qBAAqB,CAChCC,iBAAkB,CAAChB,KAEvBiB,QAAS,CACLC,OAAQtC,EACRuC,WAAY,OACZC,UAAW,CACPC,eAAgB5D,EAAc,GAC9B6D,eAAgB7D,EAAc,GAC9B8D,eAAgB9D,EAAc,GAC9BN,iBAINqE,EAAgB,CAClBzkJ,KAAK6qI,KAAK9oI,EAAU2+I,EAAc,IAClC1gJ,KAAK6qI,KAAK7oI,EAAO0+I,EAAc,IAC/B1gJ,KAAK6qI,KAAKniG,EAAYg4G,EAAc,KAElCgE,EAAuCrD,EAAOa,aAAa,CAC7D30H,KAAMi0H,EACNW,MAAOC,eAAeuC,SAAWvC,eAAeE,WAE9CsC,EAAsBvE,EACtBwE,YAAY3X,MAAQmT,EACpB,EACN,IAAIyE,EAAqCxE,EAAWC,kBAChDwE,EAAwB,EAC5B,IAAK,IAAIt4I,EAAI,EAAGA,EAAIm0I,EAAen0I,IAAK,CACpCu1I,EA1MsB,GA0MiBv1I,EACvC40I,EAAOoB,MAAMC,YAAYT,EAAiB,EAAGD,GAC7C,MAAMgD,EAAiB3D,EAAO4D,uBACxBC,EAAcF,EAAeG,mBACnCD,EAAYE,YAAYtB,GACxBoB,EAAYG,aAAa,EAAG/B,EAAW72I,EAAI,IAC3Cy4I,EAAYI,mBAAmBb,EAAc,GAAIA,EAAc,GAAIA,EAAc,IACjFS,EAAYnwI,MACZiwI,EAAeO,mBAAmBzC,EAAkBr2I,EAAIg1I,YAAYC,kBAAmBgD,EAAsCj4I,EAAIg1I,YAAYC,kBAAmBD,YAAYC,mBAC5KL,EAAOoB,MAAM+C,OAAO,CAACR,EAAeS,WAEpC,GADgBh5I,EAAI,KAAOA,EAAIq4I,GAClB,OACHJ,EAAqCgB,SAASC,WAAWC,KAAM,EAAGpE,GACxE,MAAMqE,EAAmCnB,EAAqCoB,eAAe,EAAGtE,GAE1FuE,EADiC,IAAItE,YAAYoE,EAAiCpiJ,MAAM,IACpCgJ,GAAKo0I,EAAgBl9I,OAE/E,GADA+gJ,EAAqCsB,QACjCv5I,GAAK,GAAKs5I,EAAqBzF,EAAWp/H,WAG1C,GAFA4jI,EAAqC,EACrCC,IACIA,IAA0BzE,EAAWE,wBACrC,WAIJsE,EAAqCxE,EAAWC,iBAExD,CACA,GAAIqE,GAAuBC,YAAY3X,MAAQ0X,EAAqB,CAChEzxI,QAAQC,KAAK,mCAAmCitI,QAChD,KACJ,CACJ,CACA,MAAM2E,EAAiB3D,EAAO4D,uBACxBgB,GAA6BrF,EAAgB,GAAK,EAClDsF,EAAwB7E,EAAOa,aAAa,CAC9C30H,KAAMg0H,EACNY,MAAOC,eAAeuC,SAAWvC,eAAeE,WAE9C6D,EAAsB9E,EAAOa,aAAa,CAC5C30H,KAAMo0H,EACNQ,MAAOC,eAAeuC,SAAWvC,eAAeE,WAEpD0C,EAAeO,mBAAmB5C,EAAmBsD,GAA4B,EAAGC,EAAuB,EAAG3E,GAC9GyD,EAAeO,mBAAmBxC,EAAiB,EAAGoD,EAAqB,EAAGxE,GAC9EN,EAAOoB,MAAM+C,OAAO,CAACR,EAAeS,iBAC9BS,EAAsBR,SAASC,WAAWC,KAAM,EAAGrE,GACzD,MAAM6E,EAAuBF,EAAsBJ,eAAe,EAAGvE,GAC/D8E,EAAiB,IAAI5E,YAAY2E,GACvClwC,EAAajzG,IAAIojJ,GACjBH,EAAsBF,cAChBG,EAAoBT,SAASC,WAAWC,KAAM,EAAGjE,GACvD,MAAM2E,EAAqBH,EAAoBL,eAAe,EAAGnE,GAC3D4E,EAAe,IAAI3E,WAAW0E,EAAmB7iJ,MAAM,IAC7D0iJ,EAAoBH,QACpB,MAAMv9H,EAAO89H,EAAa,GACpB//G,EAAO+/G,EAAa,GACpB7/G,EAAO6/G,EAAa,GACpB79H,EAAO69H,EAAa,GACpB9/G,GAAO8/G,EAAa,GACpB5/G,GAAO4/G,EAAa,GAC1B5F,EAAS54I,aAAa8/B,2BAA2BquE,GACjDyqC,EAAS54I,aAAay+I,cACtB7F,EAAS54I,aAAa0+I,UAAU,CAC5B,CAACh+H,EAAMC,GACP,CAAC8d,EAAMC,IACP,CAACC,EAAMC,KAEf,C,0ECxTA,MAAM+/G,EAAsB,IACtBC,EAAsB,IACtBjyC,EAAuB,EAAEh7F,KAAW,KACpCi7F,EAAuB,CAAC,EAAG,MA8EjC/1E,eAAegoH,EAAmD5/G,EAAW7/B,GACzE,MAAMw5I,EAAW,EAAA9oB,aAAA,oCAAiD7wF,EAAUn5B,UAG5E,OA7BJ,SAAgCm5B,EAAW25G,EAAUx5I,GACjD,MAAM,kBAAE0uG,EAAoB6wC,EAAmB,mBAAE5xC,EAAqBH,GAA0BxtG,EAC1F0/I,EAAkB7/G,EAAUj/B,aAAao/B,8BAExCxnC,EAAOC,EAAQ8oC,IADDi4G,EAAS54I,aAAao/B,6BACRw5G,EAAS/1I,YACtC23D,EAAmBviE,KAAK+Q,MAAM23B,EAAY,GAC1Co+G,EAAkB9mJ,KAAKkS,IAAIqwD,EAAmB,EAAG,GACjDwkF,EAAiB/mJ,KAAKkS,IAAI40I,EAAkB,EAAGp+G,GAC/Cs+G,EAAiBrnJ,EAAQC,EAC/B,IAAK,IAAIgS,EAAIk1I,EAAiBl1I,EAAIm1I,EAAgBn1I,IAAK,CACnD,MAAMq1I,EAAUr1I,EAAIo1I,EACpB,IAAK,IAAIzmJ,EAAI,EAAGA,EAAIX,EAAQW,IAAK,CAC7B,MAAMs+D,EAAUt+D,EAAIZ,EACpB,IAAK,IAAIU,EAAI,EAAGA,EAAIV,EAAOU,IAAK,CAC5B,MAAMkL,EAAQ07I,EAAUpoF,EAAUx+D,EAC5B+1G,EAAaywC,EAAgBt7I,GACX6qG,GAActB,EAAmB,IACrDsB,GAActB,EAAmB,IAEjC6rC,EAAS54I,aAAao1G,WAAW5xG,EAAOsqG,EAEhD,CACJ,CACJ,CACJ,CAGIqxC,CAAuBlgH,EAAW25G,EAAUx5I,GA/EhD,SAAgC6/B,EAAW25G,EAAUx5I,GACjD,MAAM,kBAAE2uG,EAAoB6wC,EAAmB,mBAAE5xC,EAAqBL,GAA0BvtG,EAC1F0/I,EAAkB7/G,EAAUj/B,aAAao/B,8BACxCxnC,EAAOC,EAAQ8oC,GAAai4G,EAAS/1I,WACtC23D,EAAmBviE,KAAK+Q,MAAM23B,EAAY,GAC1CmgF,EAAU,IAAIpnH,MAAM9B,EAAQC,GAAQiV,MAAK,GACzCsyI,EAAc5kF,EAAmB5iE,EAAQC,EACzCwnJ,EAAM,CAAC1iB,EAAQC,KACjB,MAAM8d,EAAQ,CAAC,CAAC/d,EAAQC,IACxB,KAAO8d,EAAM9+I,QAAQ,CACjB,MAAOtD,EAAGE,GAAKkiJ,EAAMnsB,QACf+wB,EAAkB9mJ,EAAIZ,EAAQU,EACpC,GAAIA,EAAI,GACJA,GAAKV,GACLY,EAAI,GACJA,GAAKX,GACLipH,EAAQw+B,GACR,SAEJx+B,EAAQw+B,IAAmB,EAC3B,MAAMC,EAAmBH,EAAcE,EACjCE,EAAmBV,EAAgBS,GACrCC,EAAmBxyC,EAAmB,IACtCwyC,EAAmBxyC,EAAmB,KAG1C4rC,EAAS54I,aAAao1G,WAAWmqC,EAAkBxxC,GACnD2sC,EAAM/2I,KAAK,CAACrL,EAAI,EAAGE,IACnBkiJ,EAAM/2I,KAAK,CAACrL,EAAI,EAAGE,IACnBkiJ,EAAM/2I,KAAK,CAACrL,EAAGE,EAAI,IACnBkiJ,EAAM/2I,KAAK,CAACrL,EAAGE,EAAI,IACvB,GAEEinJ,EAAW,CAAC9iB,EAAQ+iB,EAAQC,EAAMnnJ,KACpC,IAAK,IAAIF,EAAIqkI,EAAQrkI,IAAMonJ,EAAQpnJ,GAAKqnJ,EAAM,CAC1C,MAAML,EAAkB9mJ,EAAIZ,EAAQU,EAE9BknJ,EAAmBV,EADAM,EAAcE,GAEvC,GAAIE,EAAmBxyC,EAAmB,IACtCwyC,EAAmBxyC,EAAmB,GACtC,MAEC8T,EAAQw+B,IACTD,EAAI/mJ,EAAGE,EAEf,GAEJ,IAAK,IAAIA,EAAI,EAAGA,EAAIX,EAAQW,IACxBinJ,EAAS,EAAG7nJ,EAAQ,EAAG,EAAGY,GAC1BinJ,EAAS7nJ,EAAQ,EAAG,GAAI,EAAGY,EAEnC,CA6BIonJ,CAAuB3gH,EAAW25G,EAAUx5I,GACrCw5I,CACX,CACA/hH,eAAegpH,EAAyBvhH,EAAoBsvE,EAAiBxuG,GACzE,MAAM,YAAEwsF,GAAgBgiB,GAClB,WAAE/uE,EAAU,eAAEgvE,GAAmBjiB,EACjCk0D,EAAqB,CACvBp/H,KAAMme,EAAW,GACjBle,KAAMktF,EAAe,GACrBpvE,KAAMI,EAAW,GACjBH,KAAMmvE,EAAe,GACrBlvE,KAAME,EAAW,GACjBD,KAAMivE,EAAe,IAEnB5uE,EAAY,4BAAwBX,EAAoBwhH,EAAoB,CAC9Ej+I,aAAc,CACVC,KAAM,kBAGR82I,QAAiBiG,EAAmD5/G,EAAW7/B,GAErF,aADM,OAAI6/B,EAAUn5B,SAAU8yI,EAAS9yI,UAChC8yI,CACX,C,8FCxGA,MAAM,sBAAEl5G,GAA0B,YAC5Bi/G,EAAsB,IACtBC,EAAsB,IACtBmB,EAAyB,GACzBC,EAAyB,GAW/B,SAASrM,EAAqBp1G,EAAkB4sE,GAC5C,MAAMloG,EAAYs7B,EAAiB5e,UAAUE,eACvCogI,EAAY,gBAAgBh9I,EAAU,GAAIA,EAAU,GAAIA,EAAU,KAChE2O,OAAQsuI,EAAmBx/G,OAAQ0jB,GAAiB+mD,EACtDg1C,EAAkB5hH,EAAiB5e,UACnCygI,EAAiB,iBAAiB,cAAeF,EAAmBD,GAAY77F,GAChFi8F,EAAoB,iBAAiB,cAAeH,EAAmBD,EAAW77F,GAExF,OAlBJ,SAAqC7lB,EAAkB+hH,GACnD,MAAM,aAAEvrH,EAAY,iBAAEE,GAAqBqrH,EACrCpM,EAAax0G,EAAsBnB,EAAiB5e,UAAWoV,GAC/Do/G,EAAiBz0G,EAAsBnB,EAAiB5e,UAAWsV,GACzE,MAAO,IACAqrH,EACHpM,aACAC,iBAER,CASWoM,CAA4BhiH,GADV,OAAoB,CAAC8hH,EAAmBD,GAAiBD,GAEtF,CA0HAtpH,eAAe2pH,EAA8CvhH,EAAWksE,EAAYj0G,EAAUkI,GAC1F,MAAMw5I,QAAiB,EAAA9oB,aAAA,oCAAiD7wF,EAAUn5B,UAGlF,OAnGJ,SAAgCy4B,EAAkBq6G,EAAUztC,EAAY/rG,GACpE,MAAMqhJ,EAAqBliH,EAAiBv+B,aAAao/B,6BACnDshH,EAAgBv1C,EAAWv5F,QAC1Bha,EAAOC,EAAQ8oC,GAAapC,EAAiB17B,WAC9C+9B,EAAoBhpC,EAAQC,EAC5B8oJ,EAAmBjhH,EAAsBnB,EAAiB5e,UAAW+gI,GACrEE,EAAsBH,EAAmBE,EAAiB,GAAK//G,EACjE+/G,EAAiB,GAAK/oJ,EACtB+oJ,EAAiB,IACf7yC,EAAoB1uG,EAAQ0uG,mBAAqB6wC,EACjDj0C,EAAuBtrG,EAAQsrG,sBAAwBq1C,EACvDc,EAA4B5oJ,KAAK6e,IAAI8pI,EAAsBl2C,GAC3Do2C,EAAwBF,EAAsBC,EAC9CE,EAAwBH,EAAsBC,EAC9CG,EAAsB,CACxB,EAAE,EAAG,EAAG,GACR,CAAC,EAAG,EAAG,GACP,CAAC,GAAI,EAAG,GACR,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,GAAI,GACR,CAAC,EAAG,EAAG,IAELC,EAAkBN,EAAiB,GAAK//G,EAC1C+/G,EAAiB,GAAK/oJ,EACtB+oJ,EAAiB,GACrB/H,EAAS54I,aAAao1G,WAAW6rC,EAAiBnzC,GAClD,MAAM4sC,EAAQ,CAACiG,GACf,KAAOjG,EAAM9+I,QAAQ,CACjB,MAAMslJ,EAAWxG,EAAMnsB,SAChBj2H,EAAGE,EAAGqR,GAAKq3I,EAClB,IAAK,IAAIx8I,EAAI,EAAG+xC,EAAMuqG,EAAoBplJ,OAAQ8I,EAAI+xC,EAAK/xC,IAAK,CAC5D,MAAMy8I,EAAqBH,EAAoBt8I,GACzCytC,EAAK75C,EAAI6oJ,EAAmB,GAC5B/uG,EAAK55C,EAAI2oJ,EAAmB,GAC5BC,EAAKv3I,EAAIs3I,EAAmB,GAClC,GAAIhvG,EAAK,GACLA,GAAMv6C,GACNw6C,EAAK,GACLA,GAAMv6C,GACNupJ,EAAK,GACLA,GAAMzgH,EACN,SAEJ,MAAM0gH,EAAqBD,EAAKxgH,EAAoBwR,EAAKx6C,EAAQu6C,EAC3DmvG,EAAqBb,EAAmBY,GAChBzI,EAAS54I,aAAaopC,WAAWi4G,KACjCvzC,GAC1BwzC,EAAqBR,GACrBQ,EAAqBP,IAGzBnI,EAAS54I,aAAao1G,WAAWisC,EAAoBvzC,GACrD4sC,EAAM/2I,KAAK,CAACwuC,EAAIC,EAAIgvG,IACxB,CACJ,CACJ,CA0CIjC,CAAuBlgH,EAAW25G,EAAUztC,EAAY/rG,GAzC5D,SAAgC6/B,EAAW25G,EAAUztC,EAAYj0G,EAAUkI,GACvE,MAAM0/I,EAAkB7/G,EAAUj/B,aAAao/B,8BACxCplC,EAASC,EAAM0mC,GAAai4G,EAAS/1I,WACtC+9B,EAAoB5mC,EAAUC,GAC9B,eAAEmmC,EAAc,iBAAED,GAAqB,sCAAkCy4G,EAASj5H,UAAWzoB,EAASumB,aACtG8jI,EAAkB7hH,EAAsBT,EAAUtf,UAAWwrF,EAAWv5F,QACxEgvI,EAAsB9B,EAAgByC,EAAgB,GAAKvnJ,EAAUC,EACvEsnJ,EAAgB,GAAKvnJ,EACrBunJ,EAAgB,IACd52C,EAAuBvrG,EAAQurG,sBAAwBq1C,EACvDjyC,EAAoB3uG,GAAS2uG,mBAAqB6wC,EAClD4C,EAA4BvpJ,KAAK6e,IAAI8pI,EAAsBj2C,GAC3D82C,EAAwBb,EAAsBY,EAC9CE,EAAwBd,EAAsBY,EAE9CG,EAAiB,EAAI1pJ,KAAKC,GADR,IAElB0pJ,EAAY,kBAAkB,cAAezhH,EAAkBwhH,GAC/DE,EAAc,WAAWzhH,GAC/B,IAAK,IAAI17B,EAAI,EAAGA,EAJQ,IAIaA,IAAK,CACtC,MAAMo9I,EAAyB,iBAAiB,cAAe32C,EAAWv5F,OAAQiwI,EAAa12C,EAAWzqE,QACpGqhH,EAAuBriH,EAAsBk5G,EAASj5H,UAAWmiI,IAChExpJ,EAAGE,EAAGqR,GAAKk4I,EAElB,GADA,mBAAmBF,EAAaA,EAAaD,GACzCtpJ,EAAI,GACJA,GAAK0B,GACLxB,EAAI,GACJA,GAAKyB,GACL4P,EAAI,GACJA,GAAK82B,EACL,SAEJ,MAAMr4B,EAAShQ,EAAIE,EAAIwB,EAAU6P,EAAI+2B,EAC/BytE,EAAaywC,EAAgBx2I,IAC/B+lG,EAAaozC,GACbpzC,EAAaqzC,IACb9I,EAAS54I,aAAao1G,WAAW9sG,EAAQylG,EAEjD,CACJ,CAII6xC,CAAuB3gH,EAAW25G,EAAUztC,EAAYj0G,EAAUkI,GAC3Dw5I,CACX,CACA/hH,eAAemrH,EAAoB1jH,EAAoB6sE,EAAYj0G,EAAUkI,GACzE,MACM6/B,EAjIV,SAAoCV,EAAkB4sE,EAAYj0G,GAC9D,MAAMipJ,EAAkB5hH,EAAiB5e,UACnCnC,EAAStmB,EAASumB,aAClB,aAAE8iB,EAAY,aAAEF,GAAiB,sCAAkC8/G,EAAiB3iI,GAI1F,GAHoB,CAAC+iB,EAAcF,GAAcpc,KAAMg+H,IAAS,oBAAgBhqJ,KAAK6e,IAAImrI,EAAI,IAAK,KAC7F,oBAAgBhqJ,KAAK6e,IAAImrI,EAAI,IAAK,KAClC,oBAAgBhqJ,KAAK6e,IAAImrI,EAAI,IAAK,IAGnC,YADA72I,QAAQC,KAAK,kCAGjB,MAAQ6E,UAAWgyI,GAAoBvO,EAAqBp1G,EAAkB4sE,GACxE20C,EAAqB,CACvBp/H,KAAMwhI,EAAgB,GAAG,GACzBvhI,KAAMuhI,EAAgB,GAAG,GAAK,EAC9BzjH,KAAMyjH,EAAgB,GAAG,GACzBxjH,KAAMwjH,EAAgB,GAAG,GAAK,EAC9BvjH,KAAMujH,EAAgB,GAAG,GACzBtjH,KAAMsjH,EAAgB,GAAG,GAAK,GAElC,OAAO,4BAAwB3jH,EAAiBz4B,SAAUg6I,EAAoB,CAC1Ej+I,aAAc,CACVC,KAAM,iBAGlB,CAwGsBqgJ,CADO,EAAA7zH,MAAMxM,UAAUwc,GACsB6sE,EAAYj0G,GACrE0hJ,QAAiB4H,EAA8CvhH,EAAWksE,EAAYj0G,EAAUkI,GAEtG,aADM,OAAI6/B,EAAUn5B,SAAU8yI,EAAS9yI,UAChC8yI,CACX,C,+FC/JA,MAAM,sBAAEl5G,GAA0B,YAC5B0iH,EAAqB,IAC3B,SAASC,EAAsB9jH,EAAkBkhD,EAAergF,GAC5D,MAAM,WAAEyD,EAAY8c,UAAW2iI,GAAiB/jH,GACzC3mC,EAAOC,EAAQ8oC,GAAa99B,EAC7B0/I,EAA8BhkH,EAAiBv+B,aAC/CG,EAAaoiJ,EAA4BnjH,6BACzCwB,EAAoBhpC,EAAQC,EAC5B2qJ,EAAqBpjJ,GAASqjJ,2BAA6B,KAC3DC,EAAYtjJ,GAASujJ,0BAA4B,KACjDC,EAAYxjJ,GAASyjJ,0BAA4B,KACjDC,EAAqB1jJ,GAAS0jJ,oBAAsB,KACpDC,EAA6B3jJ,GAAS2jJ,4BAA8B,KACpEC,EAAWtjH,EAAsB4iH,EAAc7iE,GAAep+E,IAAIpJ,KAAKgmB,OACvE6rH,EAAayY,EAA4Bh0I,QAAQy0I,GACvD,GAAIA,EAAS,GAAK,GACdA,EAAS,IAAMprJ,GACforJ,EAAS,GAAK,GACdA,EAAS,IAAMnrJ,GACfmrJ,EAAS,GAAK,GACdA,EAAS,IAAMriH,EAEf,OADAv1B,QAAQC,KAAK,4CACN,KAEX,MAAM43I,EAAe,uCAAmC9iJ,EAAY0C,EAAYmgJ,EAAUR,GAC/D,IAAvBS,EAAah5I,QACbg5I,EAAa/hH,KAAO/gC,EAAW2pI,GAC/BmZ,EAAa9hH,OAAS,GAE1B,MAAM+hH,EAAuBD,EAAa/hH,KAAOwhH,EAAYO,EAAa9hH,OACpEgiH,EAAuBF,EAAa/hH,KAAOwhH,EAAYO,EAAa9hH,OACpE6/G,EAAsB,CACxB,EAAE,EAAG,EAAG,GACR,CAAC,EAAG,EAAG,GACP,CAAC,GAAI,EAAG,GACR,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,GAAI,GACR,CAAC,EAAG,EAAG,IAEX,IAAItgI,EAAO/O,IAAU8sB,EAAO9sB,IAAUgtB,EAAOhtB,IACzCgP,GAAQhP,IAAU+sB,GAAQ/sB,IAAUitB,GAAQjtB,IAChD,MAAM06F,EAAsB,IAAI31E,IAC1BgkH,EAAQ,GACR3Q,EAAa5pI,EAAW2pI,GAC9B,KAAIC,GAAcmZ,GACdnZ,GAAcoZ,GASd,OADA/3I,QAAQC,KAAK,kGACN,CAAEghG,oBAAqB,IAAI31E,IAAO41E,oBAAqB,IAAI51E,KARlE21E,EAAoB/tG,IAAIwrI,GACxB4Q,EAAM/2I,KAAKq/I,GACXtiI,EAAOC,EAAOqiI,EAAS,GACvBvkH,EAAOC,EAAOskH,EAAS,GACvBrkH,EAAOC,EAAOokH,EAAS,GAM3B,IAAII,EAAoB,EACxB,KAAOA,EAAoB1I,EAAM9+I,QAC7BywG,EAAoB7mF,KAAO48H,GAAoB,CAC/C,MAAO9pJ,EAAGE,EAAGqR,GAAK6wI,EAAM0I,KACxB1iI,EAAOzoB,KAAKa,IAAIR,EAAGooB,GACnB+d,EAAOxmC,KAAKa,IAAIN,EAAGimC,GACnBE,EAAO1mC,KAAKa,IAAI+Q,EAAG80B,GACnBhe,EAAO1oB,KAAKkS,IAAI7R,EAAGqoB,GACnB+d,EAAOzmC,KAAKkS,IAAI3R,EAAGkmC,GACnBE,EAAO3mC,KAAKkS,IAAIN,EAAG+0B,GACnB,IAAK,IAAIl6B,EAAI,EAAGA,EAAIs8I,EAAoBplJ,OAAQ8I,IAAK,CACjD,MAAOob,EAAIC,EAAIC,GAAMghI,EAAoBt8I,GACnCytC,EAAK75C,EAAIwnB,EACTsyB,EAAK55C,EAAIunB,EACTqhI,EAAKv3I,EAAImW,EACf,GAAImyB,EAAK,GACLA,GAAMv6C,GACNw6C,EAAK,GACLA,GAAMv6C,GACNupJ,EAAK,GACLA,GAAMzgH,EACN,SAEJ,MAAMi3G,EAAgBwJ,EAAKxgH,EAAoBwR,EAAKx6C,EAAQu6C,EAC5D,GAAIk6D,EAAoBhuG,IAAIu5I,GACxB,SAEJ,MAAMyL,EAAgBljJ,EAAWy3I,GAC7ByL,GAAiBH,GACjBG,GAAiBF,IACjB92C,EAAoB/tG,IAAIs5I,GACpBvrC,EAAoB7mF,KAAO48H,GAC3B1H,EAAM/2I,KAAK,CAACwuC,EAAIC,EAAIgvG,IAGhC,CACJ,CAIA,GAHI/0C,EAAoB7mF,MAAQ48H,GAC5Bh3I,QAAQqM,MAAM,6CAA6C2qI,qBAE9B,IAA7B/1C,EAAoB7mF,KAEpB,OADApa,QAAQC,KAAK,sCACN,CAAEghG,oBAAqB,IAAI31E,IAAO41E,oBAAqB,IAAI51E,KAEtE,IAAI4sH,EAAc,EACdC,EAAgB,EACpBl3C,EAAoBpwG,QAASuH,IACzB,MAAMvI,EAAQkF,EAAWqD,GACzB8/I,GAAeroJ,EACfsoJ,GAAiBtoJ,EAAQA,IAE7B,MAAMuoJ,EAAgBn3C,EAAoB7mF,KACpCi+H,EAAeH,EAAcE,EAC7BE,EAAmBH,EAAgBC,EAAgBC,EAAeA,EAElEE,EAAwBf,EADP3qJ,KAAKopC,KAAKppC,KAAKkS,IAAI,EAAGu5I,IAEvCE,EAAQ3rJ,KAAKkS,IAAI,EAAGuW,EAAOoiI,GAC3Be,EAAQ5rJ,KAAKkS,IAAI,EAAGs0B,EAAOqkH,GAC3BgB,EAAQ7rJ,KAAKkS,IAAI,EAAGw0B,EAAOmkH,GAC3BiB,EAAQ9rJ,KAAKa,IAAIlB,EAAQ,EAAG+oB,EAAOmiI,GACnCkB,EAAQ/rJ,KAAKa,IAAIjB,EAAS,EAAG6mC,EAAOokH,GACpCmB,EAAQhsJ,KAAKa,IAAI6nC,EAAY,EAAG/B,EAAOkkH,GACvCx2C,EAAsB,IAAI51E,IAChC,IAAIwtH,EAAW,EACXC,EAAe,EACnB,MAAMC,EAAcrB,EAA6B,KACjD,KAAOoB,EAAepB,GAA8BmB,EAAWE,GAAa,CACxEF,IACA,MAAMx5B,EAAKzyH,KAAK+Q,MAAM/Q,KAAKghC,UAAY8qH,EAAQH,EAAQ,GAAKA,GACtDj5B,EAAK1yH,KAAK+Q,MAAM/Q,KAAKghC,UAAY+qH,EAAQH,EAAQ,GAAKA,GACtDQ,EAAKpsJ,KAAK+Q,MAAM/Q,KAAKghC,UAAYgrH,EAAQH,EAAQ,GAAKA,GACtD7iH,EAAcojH,EAAKzjH,EAAoB+pF,EAAK/yH,EAAQ8yH,EAC1D,GAAIre,EAAoBhuG,IAAI4iC,IACxBqrE,EAAoBjuG,IAAI4iC,GACxB,SAEJ,MAAMqjH,EAAcnkJ,EAAW8gC,GAC/B,GAAIhpC,KAAK6e,IAAIwtI,EAAcb,GAAgBE,EAAuB,CAC9D,IAAIY,GAAmB,EACvB,IAAK,IAAIxkI,GAAM,EAAGA,GAAM,EAAGA,IAAM,CAC7B,MAAMqyB,EAAKu4E,EAAK5qG,EAChB,KAAIqyB,EAAK,GAAKA,GAAMv6C,GAGpB,IAAK,IAAIioB,GAAM,EAAGA,GAAM,EAAGA,IAAM,CAC7B,MAAMqyB,EAAKu4E,EAAK5qG,EAChB,GAAIqyB,EAAK,GAAKA,GAAMv6C,EAChB,SAEJ,MAAMggJ,EAAgByM,EAAKzjH,EAAoBwR,EAAKx6C,EAAQu6C,EACxDk6D,EAAoBhuG,IAAIu5I,IACxBtrC,EAAoBjuG,IAAIu5I,KAG5BtrC,EAAoBhuG,IAAIs5I,GACxB2M,GAAmB,EACvB,CACJ,CACIA,GACAJ,GAER,CACJ,CAMA,OALiC,IAA7B73C,EAAoB9mF,MACpBpa,QAAQC,KAAK,kFAEjBD,QAAQqM,MAAM,sBAAuB40F,EAAoB7mF,MACzDpa,QAAQqM,MAAM,sBAAuB60F,EAAoB9mF,MAClD,CAAE6mF,sBAAqBC,sBAClC,CACAz1E,eAAe2tH,GAAmB,mBAAElmH,EAAkB,cAAEmhD,EAAa,QAAErgF,IACnE,MAAMm/B,EAAmB,EAAAjQ,MAAMxM,UAAUwc,GACnCs6G,EAAW,EAAA9oB,aAAA,oCAAiDxxF,GAClEs6G,EAAS54I,aAAa/D,QAAQ,EAAGuH,QAAOvI,YACtB,IAAVA,GACA29I,EAAS54I,aAAao1G,WAAW5xG,EAAO,KAGhD,MAAM4oG,EAAQhtG,EAAQgtG,OAClBi2C,EAAsB9jH,EAAkBkhD,EAAergF,GACrDqlJ,EAAoBrlJ,GAAS0uG,mBAAqB,KAClD42C,EAAoBtlJ,GAAS2uG,mBAAqB,KACxD,IAAK3B,EACD,OAAO,KAEX,MAAM,oBAAEC,EAAmB,oBAAEC,GAAwBF,EACrD,OAAIC,EAAoB7mF,KAAO,IAC3B6mF,EAAoB7mF,KAAO48H,GAC3B91C,EAAoB9mF,KAAO,IAC3Bpa,QAAQC,KAAK,uEACNutI,IAEXvsC,EAAoBpwG,QAASuH,IACzBo1I,EAAS54I,aAAao1G,WAAW5xG,EAAOihJ,KAE5Cn4C,EAAoBrwG,QAASuH,IACzBo1I,EAAS54I,aAAao1G,WAAW5xG,EAAOkhJ,WAEtC,OAAIpmH,EAAoBs6G,EAAS9yI,SAAU1G,GAC1Cw5I,EACX,C,inBCpMO,SAAS1R,EAAsBznF,GAClC,MAAMqqD,GAAY,IAAAtqD,cAAaC,GAC/B,QAAkBzmD,IAAd8wG,EACA,QAE4B,OAAsBrqD,GAC9BxjD,QAAS0oJ,IAC7BA,EAAKzd,0BAET,MAAMxnF,EAAgBoqD,EAAU86C,mBAEhC,IAD2BhqJ,OAAO4B,KAAKkjD,GAAer+C,IAAKlG,GAAQukD,EAAcvkD,IACzDS,OACpB,OAEJ,MAAMiZ,EAAci1F,EAAU5kC,kBAC9B,OAAsCrwD,EAC1C,C,yHCDA,QAhBA,SAAkB1M,EAAMqnI,EAAMpwI,GAC1B,IAAI2wI,GAAU,EACVhkD,GAAW,EACf,GAAoB,mBAAT5jF,EACP,MAAM,IAAI+nI,UAAU,uBAMxB,OAJI,OAAS9wI,KACT2wI,EAAU,YAAa3wI,EAAU4xD,QAAQ5xD,EAAQ2wI,SAAWA,EAC5DhkD,EAAW,aAAc3sF,EAAU4xD,QAAQ5xD,EAAQ2sF,UAAYA,IAE5D,OAAS5jF,EAAMqnI,EAAM,CACxBO,UACAhkD,WACA4jD,QAASH,GAEjB,C,+BCjBA,SAASqV,EAAe9jG,EAAeC,GACnC,MAAM8jG,EAAOC,EAAchkG,GACrBljD,EAAOknJ,EAAc/jG,GAC3B,MAAO,CACHqhB,KAAM2iF,EAAkBF,EAAKziF,KAAMxkE,EAAKwkE,MACxCC,OAAQ0iF,EAAkBF,EAAKxiF,OAAQzkE,EAAKykE,QAC5C7rE,OAAQuuJ,EAAkBF,EAAKruJ,OAAQoH,EAAKpH,QAC5C+nD,OAyGmBshE,EAzGMglC,EAAKtmG,MAyGHmO,EAzGU9uD,EAAK2gD,MA0GvC,CAACshE,EAAO,GAAKnzD,EAAO,GAAImzD,EAAO,GAAKnzD,EAAO,GAAImzD,EAAO,GAAKnzD,EAAO,MAD7E,IAA2BmzD,EAAQnzD,CAvGnC,CACA,SAASs4F,EAAiBlkG,EAAeC,GACrC,MAAM8jG,EAAOC,EAAchkG,GACrBljD,EAAOknJ,EAAc/jG,GAC3B,MAAO,CACHqhB,KAAM6iF,EAAeJ,EAAKziF,KAAMxkE,EAAKwkE,MACrCC,OAAQ4iF,EAAeJ,EAAKxiF,OAAQzkE,EAAKykE,QACzC7rE,OAAQyuJ,EAAeJ,EAAKruJ,OAAQoH,EAAKpH,QACzC+nD,MAAO2mG,EAAeL,EAAKtmG,MAAO3gD,EAAK2gD,OAE/C,CAGA,SAAS4mG,EAA+BrkG,EAAeC,GACnD,MAAMu/B,EAAkB8kE,EAAkCtkG,GACpDukG,EAAeD,EAAkCrkG,GAOvD,MANsB,CAClBqhB,KAAMke,EAAgBle,KAAOijF,EAAajjF,KAC1CC,OAAQie,EAAgBje,OAASgjF,EAAahjF,OAC9C7rE,OAAQ8pF,EAAgB9pF,OAAS6uJ,EAAa7uJ,OAC9C+nD,MAAO+hC,EAAgB/hC,MAAQ8mG,EAAa9mG,MAGpD,CACA,SAAS+mG,EAAe97I,GACpB,OAAOowB,KAAKsgG,MAAMtgG,KAAKC,UAAUrwB,GACrC,CACA,SAAS+7I,EAAW/7I,GAChB,OAAOowB,KAAKsgG,MAAMtgG,KAAKC,UAAUrwB,GACrC,CACA,SAASs7I,EAAct7I,GACnB,OAAOA,EAAOkyB,OAAO,CAAC4W,EAAMuyG,KACjB,CACHziF,KAAM,CACF9vB,EAAK8vB,KAAK,GAAKyiF,EAAKziF,KAAK,GAAK54D,EAAO7N,OACrC22C,EAAK8vB,KAAK,GAAKyiF,EAAKziF,KAAK,GAAK54D,EAAO7N,QAEzC0mE,OAAQ,CACJ/vB,EAAK+vB,OAAO,GAAKwiF,EAAKxiF,OAAO,GAAK74D,EAAO7N,OACzC22C,EAAK+vB,OAAO,GAAKwiF,EAAKxiF,OAAO,GAAK74D,EAAO7N,QAE7CnF,OAAQ,CACJ87C,EAAK97C,OAAO,GAAKquJ,EAAKruJ,OAAO,GAAKgT,EAAO7N,OACzC22C,EAAK97C,OAAO,GAAKquJ,EAAKruJ,OAAO,GAAKgT,EAAO7N,QAE7C4iD,MAAO,CACHjM,EAAKiM,MAAM,GAAKsmG,EAAKtmG,MAAM,GAAK/0C,EAAO7N,OACvC22C,EAAKiM,MAAM,GAAKsmG,EAAKtmG,MAAM,GAAK/0C,EAAO7N,OACvC22C,EAAKiM,MAAM,GAAKsmG,EAAKtmG,MAAM,GAAK/0C,EAAO7N,UAGhD,CACCymE,KAAM,CAAC,EAAG,GACVC,OAAQ,CAAC,EAAG,GACZ7rE,OAAQ,CAAC,EAAG,GACZ+nD,MAAO,CAAC,EAAG,EAAG,IAEtB,CACA,SAASinG,EAAmBh8I,GACxB,OAAOA,EAAOkyB,OAAO,CAAC4W,EAAMuyG,KACjB,CACHziF,KAAM,CACF9vB,EAAK8vB,KAAK,GAAKyiF,EAAKziF,KAAK,GAAK54D,EAAO7N,OACrC22C,EAAK8vB,KAAK,GAAKyiF,EAAKziF,KAAK,GAAK54D,EAAO7N,QAEzC0mE,OAAQ,CACJ/vB,EAAK+vB,OAAO,GAAKwiF,EAAKxiF,OAAO,GAAK74D,EAAO7N,OACzC22C,EAAK+vB,OAAO,GAAKwiF,EAAKxiF,OAAO,GAAK74D,EAAO7N,QAE7CnF,OAAQ,CACJ87C,EAAK97C,OAAO,GAAKquJ,EAAKruJ,OAAO,GAAKgT,EAAO7N,OACzC22C,EAAK97C,OAAO,GAAKquJ,EAAKruJ,OAAO,GAAKgT,EAAO7N,QAE7C4iD,MAAO,CACHjM,EAAKiM,MAAM,GAAKsmG,EAAKtmG,MAAM,GAAK/0C,EAAO7N,OACvC22C,EAAKiM,MAAM,GAAKsmG,EAAKtmG,MAAM,GAAK/0C,EAAO7N,OACvC22C,EAAKiM,MAAM,GAAKsmG,EAAKtmG,MAAM,GAAK/0C,EAAO7N,QAE3C8pJ,MAAO,CACHC,WAAY,KACZC,QAASrzG,EAAKmzG,MAAME,QAAUd,EAAKY,MAAME,QAAUn8I,EAAO7N,OAC1DiqJ,QAAStzG,EAAKmzG,MAAMG,QAAUf,EAAKY,MAAMG,QAAUp8I,EAAO7N,OAC1DkqJ,MAAOvzG,EAAKmzG,MAAMI,MAAQhB,EAAKY,MAAMI,MAAQr8I,EAAO7N,OACpD+lJ,cAAepvG,EAAKmzG,MAAM/D,cAAgBmD,EAAKY,MAAM/D,cAAgBl4I,EAAO7N,UAGrF,CACCymE,KAAM,CAAC,EAAG,GACVC,OAAQ,CAAC,EAAG,GACZ7rE,OAAQ,CAAC,EAAG,GACZ+nD,MAAO,CAAC,EAAG,EAAG,GACdknG,MAAO,CACHC,WAAY,KACZC,QAAS,EACTC,QAAS,EACTC,MAAO,EACPnE,cAAe,IAG3B,CACA,SAASqD,EAAkBllC,EAAQnzD,GAC/B,MAAO,CAACmzD,EAAO,GAAKnzD,EAAO,GAAImzD,EAAO,GAAKnzD,EAAO,GACtD,CAIA,SAAS04F,EAAkC57I,GACvC,MAAMs8I,EAAiB,GACvB,IAAK,IAAIrhJ,EAAI,EAAGA,EAAI+E,EAAO7N,OAAQ8I,IAC/B,IAAK,IAAIuI,EAAI,EAAGA,EAAIxD,EAAO7N,OAAQqR,IAC3BvI,EAAIuI,GACJ84I,EAAepiJ,KAAK,CAChB0+D,KAAM6iF,EAAez7I,EAAO/E,GAAG29D,KAAM54D,EAAOwD,GAAGo1D,MAC/CC,OAAQ4iF,EAAez7I,EAAO/E,GAAG49D,OAAQ74D,EAAOwD,GAAGq1D,QACnD7rE,OAAQyuJ,EAAez7I,EAAO/E,GAAGjO,OAAQgT,EAAOwD,GAAGxW,QACnD+nD,MAAO2mG,EAAe17I,EAAO/E,GAAG85C,MAAO/0C,EAAOwD,GAAGuxC,SAKjE,OAAOunG,EAAepqH,OAAO,CAAC4W,EAAMuyG,KACzB,CACHziF,KAAM9vB,EAAK8vB,KAAOyiF,EAAKziF,KAAO0jF,EAAenqJ,OAC7C0mE,OAAQ/vB,EAAK+vB,OAASwiF,EAAKxiF,OAASyjF,EAAenqJ,OACnDnF,OAAQ87C,EAAK97C,OAASquJ,EAAKruJ,OAASsvJ,EAAenqJ,OACnD4iD,MAAOjM,EAAKiM,MAAQsmG,EAAKtmG,MAAQunG,EAAenqJ,SAErD,CACCymE,KAAM,EACNC,OAAQ,EACR7rE,OAAQ,EACR+nD,MAAO,GAEf,CACA,SAAS0mG,EAAeplC,EAAQnzD,GAC5B,OAAO10D,KAAKopC,KAAKppC,KAAKmtD,IAAI06D,EAAO,GAAKnzD,EAAO,GAAI,GAAK10D,KAAKmtD,IAAI06D,EAAO,GAAKnzD,EAAO,GAAI,GAC1F,CACA,SAASw4F,EAAerlC,EAAQnzD,GAC5B,OAAO10D,KAAKopC,KAAKppC,KAAKmtD,IAAI06D,EAAO,GAAKnzD,EAAO,GAAI,GAC7C10D,KAAKmtD,IAAI06D,EAAO,GAAKnzD,EAAO,GAAI,GAChC10D,KAAKmtD,IAAI06D,EAAO,GAAKnzD,EAAO,GAAI,GACxC,C,6OCnJO,SAASq5F,EAAuCC,GACnDA,EAAahqJ,QAASwjD,IAClB,MAAMqqD,GAAY,IAAAtqD,cAAaC,GAC/B,IAAKqqD,EAED,YADA1+F,QAAQC,KAAK,+BAA+Bo0C,KAG1BqqD,EAAU86C,mBAClB3oJ,QAASq0D,IACnB,MAAM,kBAAEpnC,EAAiB,WAAEgB,GAAeomC,EACpC37C,GAAkB,IAAAwU,oBAAmBD,GAC3C,IAAKvU,EAED,YADAvJ,QAAQC,KAAK,qCAAqC6d,KAGtD,MAAMhyB,EAAWyd,EAAgByW,YAAYlB,IAC7C,OAAwBhzB,EAASizB,YAG7C,C,kFCpBO,SAAS2nC,EAAsC8G,GAC7CA,EAAoBh9D,QAGzBg9D,EAAoB38D,QAASiuB,IACzB,MAAM5zB,GAAiB,IAAA68E,+BAA8BjpD,GACrD,IAAK5zB,EAED,YADA8U,QAAQC,KAAK,8BAA8B6e,KAG/C,MAAM,SAAEhzB,GAAaZ,EACrB,IAAKY,EAED,YADAkU,QAAQC,KAAK,8BAA8B6e,KAG/C,MAAMC,EAAUjzB,EAASizB,SACzB,OAAwBA,IAEhC,CACA,S,gTCpBA,SAASwjE,EAAoBz2F,EAAUsqB,GACnC,GAAItqB,aAAoB,EAAA4nE,mBAAoB,CACxC,MAAMh5D,EAAW,EAAAimC,UAAA,YAAsBvqB,GACjCL,EAAS,EAAAmN,MAAMxM,UAAUhc,GAC/B,QAASqb,GAAQ65C,SAAWpgE,OAAO4B,KAAK2kB,EAAO65C,SAASp/D,OAAS,CACrE,CACK,GAAI1E,aAAoB,EAAA8+B,cAAe,CACxC,MAAM,SAAEvM,GAAavyB,EAASq8B,gBAAkB,CAAC,EACjD,QAAS9J,GAAUC,MACvB,CAEI,OAAO,CAEf,C,+BCdO,IAAImkB,E,iBACX,SAAWA,GACPA,EAA+B,IAAI,MACnCA,EAAgC,KAAI,OACpCA,EAAkC,OAAI,SACtCA,EAAiC,MAAI,OACxC,CALD,CAKGA,IAA8BA,EAA4B,CAAC,G,kJCN9D,MA4CMq4G,EAAyB,CAC7BC,QAAS,EAETC,OAAQ,EAERC,OAAQ,GAGV,IAAIC,EAAY,CACdC,wBAjB8B,CAC9BC,UAAW,EACXC,YAAa,EACbC,SAAU,EACVC,QAAS,GAcTC,oBA3C0B,CAC1BC,IAAK,EACLC,MAAO,EACPC,QAAS,GAyCTC,eAvDqB,CACrBC,QAAS,EACTC,QAAS,EACTC,QAAS,EACTC,QAAS,EACTC,QAAS,EACTC,UAAW,EACXC,YAAa,EACbC,SAAU,EACVC,eAAgB,GA+ChBC,eAxCqB,CACrBC,cAAe,EAEfC,qBAAsB,EAEtBC,oBAAqB,EAErBC,YAAa,EAEbC,aAAc,GAEdC,WAAY,IA8BZ9B,yBACA+B,gBA5BsB,CACtBC,eAAgB,EAEhBC,YAAa,GA0BbC,eAhBqB,e,iICnCvB,MAAM,cACJC,GACE,EAAAjnC,EAwTJ,MAAML,EAAiB,CACrB99G,UAAW,KAEXid,aAAc,KAEdkV,aAAc,KAEdtyB,QAAS,CAAC,EAAK,EAAK,GACpBC,OAAQ,CAAC,EAAK,EAAK,GACnBokH,OAAQ,CAAC,GAAI,EAAG,GAAI,EAAG,GAAI,GAC3BmhC,gBAAiB,IAAeC,OAKlC,SAASnsJ,EAAO4kH,EAAWC,GACzB,IAAIC,EAAgBC,UAAUvlH,OAAS,QAAsB5C,IAAjBmoH,UAAU,GAAmBA,UAAU,GAAK,CAAC,EACzFvmH,OAAOm3E,OAAOkvC,EAAOF,EAAgBG,GAGrC,YAAkBF,EAAWC,EAAOC,GAC/BD,EAAMh+G,UAEAvJ,MAAMC,QAAQsnH,EAAMh+G,aAC7Bg+G,EAAMh+G,UAAY,IAAIulJ,aAAavnC,EAAMh+G,UAAUvH,MAAM,EAAG,KAF5DulH,EAAMh+G,UAAY,cAAc,IAAIulJ,aAAa,IAInDvnC,EAAM/gG,aAAe,IAAIsoI,aAAa,IACtCvnC,EAAM7rF,aAAe,IAAIozH,aAAa,IAGtC,EAAApnC,EAAMhmH,IAAI4lH,EAAWC,EAAO,CAAC,eAAgB,iBAC7C,EAAAG,EAAMqnC,YAAYznC,EAAWC,EAAO,CAAC,SAAU,WAAY,GAC3D,EAAAG,EAAMqnC,YAAYznC,EAAWC,EAAO,CAAC,aAAc,GACnD,EAAAG,EAAMsnC,SAAS1nC,EAAWC,EAAO,CAAC,UAAW,GAnV/C,SAAsBD,EAAWC,GAE/BA,EAAM0nC,eAAehlJ,KAAK,gBAC1Bq9G,EAAU4nC,UAAY,WACpB,GAAI3nC,EAAM4nC,QAER,OADAR,EAAc,8CACP,EAET,IAAK,IAAIS,EAAO3nC,UAAUvlH,OAAQmtJ,EAAW,IAAIrvJ,MAAMovJ,GAAOE,EAAO,EAAGA,EAAOF,EAAME,IACnFD,EAASC,GAAQ7nC,UAAU6nC,GAE7B,MAAMC,EAAkC,IAApBF,EAASntJ,OAAemtJ,EAAS,GAAKA,EAC1D,GAA2B,IAAvBE,EAAYrtJ,OACd,OAAO,EAET,MAAMstJ,EAAiBjoC,EAAMkG,OAAOljG,KAAK,CAAC9T,EAAM3M,IAAU2M,IAAS84I,EAAYzlJ,IAM/E,OALI0lJ,IACFjoC,EAAMkG,OAAS8hC,EAAYvtJ,QAC3BulH,EAAMqnC,gBAAkB,iCAA+CrnC,EAAMkG,QAC7EnG,EAAU/1E,YAELi+G,CACT,EACAloC,EAAUqE,cAAgB,WACxB,IAAI3gH,EACAuI,EACAI,EACJ,GAAI4zG,EAAM4nC,QACRR,EAAc,iDADhB,CAIA,GAAyB,IAArBlnC,UAAUvlH,OAAc,CAC1B,MAAMoM,EAAQm5G,UAAUvlH,QAAU,OAAI5C,EAAYmoH,UAAU,GAC5Dz8G,EAAIsD,EAAM,GACViF,EAAIjF,EAAM,GACVqF,EAAIrF,EAAM,EACZ,KAAO,IAAyB,IAArBm5G,UAAUvlH,OAMnB,YADAysJ,EAAc,+BAJd3jJ,EAAIy8G,UAAUvlH,QAAU,OAAI5C,EAAYmoH,UAAU,GAClDl0G,EAAIk0G,UAAUvlH,QAAU,OAAI5C,EAAYmoH,UAAU,GAClD9zG,EAAI8zG,UAAUvlH,QAAU,OAAI5C,EAAYmoH,UAAU,EAIpD,CACAH,EAAU4nC,UAAU,EAAGlkJ,EAAI,EAAG,EAAGuI,EAAI,EAAG,EAAGI,EAAI,EAd/C,CAeF,EACA2zG,EAAU/gG,cAAgB,IAAM,CAACghG,EAAMkG,OAAO,GAAKlG,EAAMkG,OAAO,GAAK,EAAGlG,EAAMkG,OAAO,GAAKlG,EAAMkG,OAAO,GAAK,EAAGlG,EAAMkG,OAAO,GAAKlG,EAAMkG,OAAO,GAAK,GACnJnG,EAAU6B,iBAAmB,KAC3B,MAAMsmC,EAAOnoC,EAAU/gG,gBACvB,IAAImpI,EAAS,EACb,IAAK,IAAI1kJ,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,GAAgB,IAAZykJ,EAAKzkJ,GACP,OAAO,EAELykJ,EAAKzkJ,GAAK,IACZ0kJ,GAAUD,EAAKzkJ,GAAK,EAExB,CACA,OAAO0kJ,GAETpoC,EAAUyH,kBAAoB,KAC5B,MAAM0gC,EAAOnoC,EAAU/gG,gBACvB,OAAOkpI,EAAK,GAAKA,EAAK,GAAKA,EAAK,IAElCnoC,EAAU54G,SAAW5E,IACnB,MAAM2lJ,EAAOnoC,EAAU/gG,gBACvB,GAAgB,IAAZkpI,EAAK,IAAwB,IAAZA,EAAK,IAAwB,IAAZA,EAAK,GAEzC,OADAd,EAAc,2CACP,KAET,MAAMx6D,EAAM,IAAI26D,aAAa,GAC7B,OAAQvnC,EAAMqnC,iBACZ,KAAK,IAAeC,MAClB,OAAO,KACT,KAAK,IAAec,aAClB,MACF,KAAK,IAAeC,OAClBz7D,EAAI,GAAKrqF,EACT,MACF,KAAK,IAAe+lJ,OAClB17D,EAAI,GAAKrqF,EACT,MACF,KAAK,IAAegmJ,OAClB37D,EAAI,GAAKrqF,EACT,MACF,KAAK,IAAeimJ,SAClB57D,EAAI,GAAKrqF,EAAQ2lJ,EAAK,GACtBt7D,EAAI,GAAKrqF,EAAQ2lJ,EAAK,GACtB,MACF,KAAK,IAAeO,SAClB77D,EAAI,GAAKrqF,EAAQ2lJ,EAAK,GACtBt7D,EAAI,GAAKrqF,EAAQ2lJ,EAAK,GACtB,MACF,KAAK,IAAeQ,SAClB97D,EAAI,GAAKrqF,EAAQ2lJ,EAAK,GACtBt7D,EAAI,GAAKrqF,EAAQ2lJ,EAAK,GACtB,MACF,KAAK,IAAeS,SAClB/7D,EAAI,GAAKrqF,EAAQ2lJ,EAAK,GACtBt7D,EAAI,GAAKrqF,EAAQ2lJ,EAAK,GAAKA,EAAK,GAChCt7D,EAAI,GAAKrqF,GAAS2lJ,EAAK,GAAKA,EAAK,IACjC,MACF,QACEd,EAAc,2BAGlB,MAAMwB,EAAS,CAAC,EAAG,EAAG,GAEtB,OADA7oC,EAAU9gG,aAAa2tE,EAAKg8D,GACrBA,GA8BT7oC,EAAUljE,UAAY,IAAMkjE,EAAUx9F,eAAew9F,EAAU8oC,oBAC/D9oC,EAAUx9F,eAAiBumI,GAAM,qBAA+BA,EAAI9oC,EAAM/gG,cAC1E8gG,EAAU8oC,iBAAmB,IAAM,aAAuB,IAAI7oC,EAAMkG,QAAS,IAG7EnG,EAAUgpC,kBAAoB,KAC5B,qBAAqB/oC,EAAM/gG,aAAc+gG,EAAMl+G,QAC/Ck+G,EAAM/gG,aAAa,GAAK+gG,EAAMh+G,UAAU,GACxCg+G,EAAM/gG,aAAa,GAAK+gG,EAAMh+G,UAAU,GACxCg+G,EAAM/gG,aAAa,GAAK+gG,EAAMh+G,UAAU,GACxCg+G,EAAM/gG,aAAa,GAAK+gG,EAAMh+G,UAAU,GACxCg+G,EAAM/gG,aAAa,GAAK+gG,EAAMh+G,UAAU,GACxCg+G,EAAM/gG,aAAa,GAAK+gG,EAAMh+G,UAAU,GACxCg+G,EAAM/gG,aAAa,GAAK+gG,EAAMh+G,UAAU,GACxCg+G,EAAM/gG,aAAa,GAAK+gG,EAAMh+G,UAAU,GACxCg+G,EAAM/gG,aAAa,IAAM+gG,EAAMh+G,UAAU,GACzC,WAAWg+G,EAAM/gG,aAAc+gG,EAAM/gG,aAAc+gG,EAAMn+G,SACzD,YAAYm+G,EAAM7rF,aAAc6rF,EAAM/gG,eAExC8gG,EAAU9gG,aAAe,SAAU+pI,GACjC,IAAIC,EAAO/oC,UAAUvlH,OAAS,QAAsB5C,IAAjBmoH,UAAU,GAAmBA,UAAU,GAAK,GAE/E,OADA,mBAAmB+oC,EAAMD,EAAKhpC,EAAM/gG,cAC7BgqI,CACT,EACAlpC,EAAUmpC,iBAAmBnpC,EAAU9gG,aACvC8gG,EAAU5rF,aAAe,SAAU60H,GACjC,IAAIC,EAAO/oC,UAAUvlH,OAAS,QAAsB5C,IAAjBmoH,UAAU,GAAmBA,UAAU,GAAK,GAE/E,OADA,mBAAmB+oC,EAAMD,EAAKhpC,EAAM7rF,cAC7B80H,CACT,EACAlpC,EAAUX,iBAAmBW,EAAU5rF,aACvC4rF,EAAUopC,mBAAqB,SAAUC,GACvC,IAAIC,EAAOnpC,UAAUvlH,OAAS,QAAsB5C,IAAjBmoH,UAAU,GAAmBA,UAAU,GAAK,GAC/E,OAAO,qBAA+BkpC,EAAKppC,EAAM/gG,aAAcoqI,EACjE,EACAtpC,EAAUupC,mBAAqB,SAAUF,GACvC,IAAIC,EAAOnpC,UAAUvlH,OAAS,QAAsB5C,IAAjBmoH,UAAU,GAAmBA,UAAU,GAAK,GAC/E,OAAO,qBAA+BkpC,EAAKppC,EAAM7rF,aAAck1H,EACjE,EAGAtpC,EAAUwpC,WAAWxpC,EAAUgpC,mBAC/BhpC,EAAUgpC,oBACVhpC,EAAUypC,UAAY,IAAM,eAAyBzpC,EAAUljE,aAC/DkjE,EAAU0pC,iBAAmB,SAAU1iG,GACrC,IAAI2iG,EAAgBxpC,UAAUvlH,OAAS,QAAsB5C,IAAjBmoH,UAAU,GAAmBA,UAAU,GAAK,KACxF,MAAM59F,EAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAC/By9F,EAAUupC,mBAAmBviG,EAAazkC,GAC1C,MAAMopC,EAAS,CAAC,EAAG,EAAG,GAChBC,EAAS,CAAC,EAAG,EAAG,GACtB,yBAAmCrpC,EAAQopC,EAAQC,IACnD,OAAYD,EAAQA,IACpB,OAAYC,EAAQA,GACpB,MAAM/pD,EAAam+G,EAAU/gG,iBAC7B,IAAAkZ,GAAYwzB,EAAQ,CAAC,EAAG,EAAG,GAAI,CAAC9pD,EAAW,GAAK,EAAGA,EAAW,GAAK,EAAGA,EAAW,GAAK,GAAI8pD,IAC1F,IAAAxzB,GAAYyzB,EAAQ,CAAC,EAAG,EAAG,GAAI,CAAC/pD,EAAW,GAAK,EAAGA,EAAW,GAAK,EAAGA,EAAW,GAAK,GAAI+pD,GAC1F,MAAMg+F,EAAU/nJ,EAAW,GACrBgoJ,EAAUhoJ,EAAW,GAAKA,EAAW,GACrCioJ,EAAS9pC,EAAUh5E,eAAeC,aAAaC,UACrD,IAAI6iH,GAAU,IACVC,EAAUr5I,IACVs5I,EAAe,EACfC,EAAO,EACPC,EAAO,EACX,IAAK,IAAIthJ,EAAI8iD,EAAO,GAAI9iD,GAAK+iD,EAAO,GAAI/iD,IACtC,IAAK,IAAIrR,EAAIm0D,EAAO,GAAIn0D,GAAKo0D,EAAO,GAAIp0D,IAAK,CAC3C,IAAIgL,EAAQmpD,EAAO,GAAKn0D,EAAIoyJ,EAAU/gJ,EAAIghJ,EAC1C,IAAK,IAAIvyJ,EAAIq0D,EAAO,GAAIr0D,GAAKs0D,EAAO,GAAIt0D,IAAK,CAC3C,IAAKqyJ,GAAiBA,EAAc,CAACryJ,EAAGE,EAAGqR,GAAI0Z,GAAS,CACtD,MAAMq4C,EAAQkvF,EAAOtnJ,GACjBo4D,EAAQmvF,IAASA,EAAUnvF,GAC3BA,EAAQovF,IAASA,EAAUpvF,GAC/BqvF,GAAgBrvF,EAAQA,EACxBsvF,GAAQtvF,EACRuvF,GAAQ,CACV,GACE3nJ,CACJ,CACF,CAEF,MAAM4nJ,EAAUD,EAAO,EAAID,EAAOC,EAAO,EACnC/pH,EAAW+pH,EAAOlzJ,KAAK6e,IAAIm0I,EAAeE,EAAOC,EAAUA,GAAW,EAE5E,MAAO,CACLJ,UACAD,UACAK,UACAhqH,WACAiqH,MANYpzJ,KAAKopC,KAAKD,GAOtBn3B,MAAOkhJ,EAEX,EAIAnqC,EAAUsqC,kBAAoB,SAAUnkC,GAEtC,MAAMokC,EAAa,GACnB,IAAIC,EAFqBrqC,UAAUvlH,OAAS,QAAsB5C,IAAjBmoH,UAAU,GAAmBA,UAAU,GAAK,EAM7F,IAAK,IAAIz0E,EAAM,EAAGA,EAAM,IAAKA,EAC3B6+G,EAAW7+G,GAAO8+G,EAClBA,GAAQrkC,EAAa,EAANz6E,EAAU,GAAKy6E,EAAa,EAANz6E,GAAW,EAElD,OAAO6+G,CACT,EAMAvqC,EAAUyqC,mBAAqBC,IAC7B,IAAKhnJ,EAAGuI,EAAGI,GAAKq+I,EAChB,MAAMvkC,EAASnG,EAAUv9F,YACnBxjB,EAAqB+gH,EAAUh5E,eAAeC,aAAa0jH,wBAC3DJ,EAAavqC,EAAUsqC,kBAAkBnkC,EAAQlnH,GAIvD,OAAOhI,KAAK+Q,OAAO/Q,KAAKgmB,MAAMvZ,GAAKyiH,EAAO,IAAMokC,EAAW,IAAMtzJ,KAAKgmB,MAAMhR,GAAKk6G,EAAO,IAAMokC,EAAW,IAAMtzJ,KAAKgmB,MAAM5Q,GAAK85G,EAAO,IAAMokC,EAAW,KAOzJvqC,EAAU4qC,wBAA0BhiJ,IAClC,MAAMu9G,EAASnG,EAAUv9F,YACnBjgB,EAAQw9G,EAAU5rF,aAAaxrB,GAGrC,IAAK,IAAI8iC,EAAM,EAAGA,EAAM,IAAKA,EAC3B,GAAIlpC,EAAMkpC,GAAOy6E,EAAa,EAANz6E,IAAYlpC,EAAMkpC,GAAOy6E,EAAa,EAANz6E,EAAU,GAEhE,OADA27G,EAAc,2BAA2B7kJ,wCAA4C2jH,KAC9EsgB,IAKX,OAAOzmB,EAAUyqC,mBAAmBjoJ,IAOtCw9G,EAAU+2B,wBAA0B,SAAUnuI,GAC5C,IAAIoF,EAAOmyG,UAAUvlH,OAAS,QAAsB5C,IAAjBmoH,UAAU,GAAmBA,UAAU,GAAK,EAC/E,MAAMlhH,EAAqB+gH,EAAUh5E,eAAeC,aAAa0jH,wBACjE,GAAI38I,EAAO,GAAKA,GAAQ/O,EAEtB,OADAooJ,EAAc,sCAAsCr5I,8DAAiE/O,KAC9GwnI,IAET,MAAMokB,EAAc7qC,EAAU4qC,wBAAwBhiJ,GACtD,OAAI5C,OAAOwQ,MAAMq0I,GAERA,EAEF7qC,EAAUh5E,eAAeC,aAAa6jH,aAAaD,EAAa78I,EACzE,CACF,CA0CEm7B,CAAa62E,EAAWC,EAC1B,CAQA,IAAI8qC,EAAiB,CACnB9oC,YALkB,EAAA7B,EAAM6B,YAAY7mH,EAAQ,gBAM5CA,S,+FC5WF,MAAM,WACJ4vJ,EAAU,MACVC,GACE,MACE,oBACJC,GACE,MACE,cACJC,EAAa,cACb9D,EAAa,gBACb+D,GACE,EAAAhrC,EASJ,SAASirC,EAAiCC,EAAKC,GAC7C,MAAMC,EAAIF,EAAI,GACRp1I,EAAIo1I,EAAI,GACRp6I,EAAIo6I,EAAI,GACRG,EAAIx0J,KAAKopC,KAAKmrH,EAAIA,EAAIt1I,EAAIA,EAAIhF,EAAIA,GAClCuqC,EAAIgwG,EAAI,KAAQx0J,KAAKiqD,KAAKsqG,EAAIC,GAAK,EACnC59D,EAAIpyC,EAAI,KAAQxkD,KAAKi5C,MAAMh/B,EAAGgF,GAAK,EACzCq1I,EAAI,GAAKE,EACTF,EAAI,GAAK9vG,EACT8vG,EAAI,GAAK19D,CACX,CAYA,SAAS69D,EAAkCH,EAAKI,GAC9C,GAAIJ,EAAI,IAAMI,EAAS,GAErB,OAAOJ,EAAI,GAKb,MAAMK,EAAUL,EAAI,GAAKt0J,KAAKopC,KAAKsrH,EAASA,EAASJ,EAAI,GAAKA,EAAI,KAAOA,EAAI,GAAKt0J,KAAK86F,IAAIw5D,EAAI,KAE/F,OAAIA,EAAI,IAAM,GAAMt0J,KAAKC,GAChBq0J,EAAI,GAAKK,EAEXL,EAAI,GAAKK,CAClB,CAgBA,SAASC,EAA6CpwG,EAAGqwG,EAAMC,EAAMxzH,GACnE,MAAMyzH,EAAO,GACPC,EAAO,IACb,OAAQH,EAAME,IACd,OAAQD,EAAME,GACd,MAAMC,EAAO,GACPC,EAAO,GACbd,EAAiCW,EAAME,GACvCb,EAAiCY,EAAME,GAIvC,IAAIC,EAAS3wG,EACb,GAAIywG,EAAK,GAAK,KAAQC,EAAK,GAAK,KA5BlC,SAA2CrxE,EAAIG,GAC7C,IAAIoxE,EAAQvxE,EAAKG,EAIjB,IAHIoxE,EAAQ,IACVA,GAASA,GAEJA,GAAS,EAAMp1J,KAAKC,IACzBm1J,GAAS,EAAMp1J,KAAKC,GAKtB,OAHIm1J,EAAQp1J,KAAKC,KACfm1J,EAAQ,EAAMp1J,KAAKC,GAAKm1J,GAEnBA,CACT,CAgB0CC,CAAkCJ,EAAK,GAAIC,EAAK,IAAM,IAAOl1J,KAAKC,GAAI,CAG5G,IAAIq1J,EAAOt1J,KAAKkS,IAAI+iJ,EAAK,GAAIC,EAAK,IAClCI,EAAOt1J,KAAKkS,IAAI,GAAMojJ,GAClB9wG,EAAI,IACN0wG,EAAK,GAAKI,EACVJ,EAAK,GAAK,EACVA,EAAK,GAAK,EACVC,GAAU,IAEVF,EAAK,GAAKK,EACVL,EAAK,GAAK,EACVA,EAAK,GAAK,EACVE,EAAS,EAAMA,EAAS,EAE5B,CAKIF,EAAK,GAAK,KAAQC,EAAK,GAAK,IAC9BD,EAAK,GAAKR,EAAkCS,EAAMD,EAAK,IAC9CC,EAAK,GAAK,KAAQD,EAAK,GAAK,MACrCC,EAAK,GAAKT,EAAkCQ,EAAMC,EAAK,KAEzD,MAAMK,EAAS,GACfA,EAAO,IAAM,EAAIJ,GAAUF,EAAK,GAAKE,EAASD,EAAK,GACnDK,EAAO,IAAM,EAAIJ,GAAUF,EAAK,GAAKE,EAASD,EAAK,GACnDK,EAAO,IAAM,EAAIJ,GAAUF,EAAK,GAAKE,EAASD,EAAK,GAGnD,MAAMM,EAAS,IAtFjB,SAA0ClB,EAAKD,GAC7C,MAAMG,EAAIF,EAAI,GACR9vG,EAAI8vG,EAAI,GACR19D,EAAI09D,EAAI,GACdD,EAAI,GAAKG,EAAIx0J,KAAK66F,IAAIr2C,GACtB6vG,EAAI,GAAKG,EAAIx0J,KAAK86F,IAAIt2C,GAAKxkD,KAAK66F,IAAIjE,GACpCy9D,EAAI,GAAKG,EAAIx0J,KAAK86F,IAAIt2C,GAAKxkD,KAAK86F,IAAIlE,EACtC,CAgFE6+D,CAAiCF,EAAQC,IACzC,OAAQA,EAAQl0H,EAClB,CAsgCA,MAAMwnF,EAAiB,CACrB4sC,UAAU,EACVC,WAAY5B,EAAW6B,IACvBC,SAAS,EACTt2J,MAAOy0J,EAAMn2I,OACbi4I,SAAU,KACVC,gBAAiB,KACjBC,gBAAiB,KACjBC,oBAAoB,EACpBC,oBAAoB,EACpBC,uBAAuB,EACvBnzI,MAAO,KACPozI,UAAW,EACXC,UAAW,KACXtkH,MAAO,KACPukH,YAAY,EACZC,eAAgB,KAKlB,SAASpyJ,EAAO4kH,EAAWC,GACzB,IAAIC,EAAgBC,UAAUvlH,OAAS,QAAsB5C,IAAjBmoH,UAAU,GAAmBA,UAAU,GAAK,CAAC,EACzFvmH,OAAOm3E,OAAOkvC,EAAOF,EAAgBG,GAGrC,YAA0BF,EAAWC,EAAOC,GAG5CD,EAAMhmG,MAAQ,GACdgmG,EAAMj3E,MAAQ,GACdi3E,EAAM8sC,SAAW,CAAC,GAAK,EAAK,EAAK,GACjC9sC,EAAM+sC,gBAAkB,CAAC,EAAK,EAAK,EAAK,GACxC/sC,EAAMgtC,gBAAkB,CAAC,EAAK,EAAK,EAAK,GACxChtC,EAAMqtC,UAAY,CAAC,EACnB,EAAAltC,EAAM1lG,IAAIulG,EAAMqtC,WAGhB,EAAAltC,EAAMhmH,IAAI4lH,EAAWC,EAAO,CAAC,YAAa,iBAG1C,EAAAG,EAAMqtC,OAAOztC,EAAWC,EAAO,CAAC,qBAAsB,qBAAsB,aAAc,iBAAkB,CAC1Gn/G,KAAM,OACNxG,KAAM,aACNozJ,KAAM1C,GACL,CACDlqJ,KAAM,OACNxG,KAAM,QACNozJ,KAAMzC,KAER,EAAA7qC,EAAMutC,SAAS3tC,EAAWC,EAAO,CAAC,WAAY,kBAAmB,mBAAoB,GAGrF,EAAAG,EAAMsnC,SAAS1nC,EAAWC,EAAO,CAAC,WAAY,kBAAmB,oBArjCnE,SAAkCD,EAAWC,GAE3CA,EAAM0nC,eAAehlJ,KAAK,4BAG1Bq9G,EAAUx5F,QAAU,IAAMy5F,EAAMj3E,MAAMpuC,OAItColH,EAAU3uG,YAAc,CAAC/Z,EAAG0Z,EAAGC,EAAGC,IAAM8uG,EAAU4tC,gBAAgBt2J,EAAG0Z,EAAGC,EAAGC,EAAG,GAAK,GAInF8uG,EAAU4tC,gBAAkB,SAAUt2J,EAAG0Z,EAAGC,EAAGC,GAC7C,IAAIywE,EAAWw+B,UAAUvlH,OAAS,QAAsB5C,IAAjBmoH,UAAU,GAAmBA,UAAU,GAAK,GAC/E0tC,EAAY1tC,UAAUvlH,OAAS,QAAsB5C,IAAjBmoH,UAAU,GAAmBA,UAAU,GAAK,EAEpF,GAAIx+B,EAAW,GAAOA,EAAW,EAE/B,OADA0lE,EAAc,sCACN,EAEV,GAAIwG,EAAY,GAAOA,EAAY,EAEjC,OADAxG,EAAc,uCACN,EAILpnC,EAAMmtC,uBACTptC,EAAU8tC,YAAYx2J,GAIxB,MAAM2xC,EAAO,CACX3xC,IACA0Z,IACAC,IACAC,IACAywE,WACAksE,aAIF5tC,EAAMj3E,MAAMrmC,KAAKsmC,GACjB+2E,EAAU+tC,qBAIV,IAAIrqJ,EAAI,EACR,KAAOA,EAAIu8G,EAAMj3E,MAAMpuC,QACjBqlH,EAAMj3E,MAAMtlC,GAAGpM,IAAMA,EADIoM,KAQ/B,OAAIA,EAAIu8G,EAAMj3E,MAAMpuC,OACX8I,GAED,CACV,EAIAs8G,EAAUguC,YAAc,CAAC12J,EAAGu2F,EAAGpyC,EAAGhyC,IAAMu2G,EAAUiuC,gBAAgB32J,EAAGu2F,EAAGpyC,EAAGhyC,EAAG,GAAK,GAInFu2G,EAAUiuC,gBAAkB,SAAU32J,EAAGu2F,EAAGpyC,EAAGhyC,GAC7C,IAAIk4E,EAAWw+B,UAAUvlH,OAAS,QAAsB5C,IAAjBmoH,UAAU,GAAmBA,UAAU,GAAK,GAC/E0tC,EAAY1tC,UAAUvlH,OAAS,QAAsB5C,IAAjBmoH,UAAU,GAAmBA,UAAU,GAAK,EACpF,MAAM+tC,EAAM,GACNC,EAAM,CAACtgE,EAAGpyC,EAAGhyC,GAEnB,OADA,IAAAokF,GAAQsgE,EAAKD,GACNluC,EAAU3uG,YAAY/Z,EAAG42J,EAAI,GAAIA,EAAI,GAAIA,EAAI,GAAIvsE,EAAUksE,EACpE,EAIA7tC,EAAUouC,SAAWplH,IACnB,GAAIi3E,EAAMj3E,QAAUA,EAAO,CACzB,MAAMqlH,EAASx1H,KAAKC,UAAUmnF,EAAMj3E,OACpCi3E,EAAMj3E,MAAQA,EACd,MAAMslH,EAAQz1H,KAAKC,UAAUmnF,EAAMj3E,OACnC,GAAIg3E,EAAU+tC,sBAAwBM,IAAWC,EAE/C,OADAtuC,EAAU/1E,YACH,CAEX,CACA,OAAO,GAMT+1E,EAAU+tC,mBAAqB,KAC7B,MAAMM,EAASx1H,KAAKC,UAAUmnF,EAAMj3E,OACpCi3E,EAAMj3E,MAAM/yB,KAAK,CAACC,EAAGhF,IAAMgF,EAAE5e,EAAI4Z,EAAE5Z,GACnC,MAAMg3J,EAAQz1H,KAAKC,UAAUmnF,EAAMj3E,OAC7BulH,EAAkBvuC,EAAUwuC,cAElC,OAAKD,GAAmBF,IAAWC,EAI5BC,GAHLvuC,EAAU/1E,YACH,IAMX+1E,EAAUwuC,YAAc,KACtB,MAAMC,EAAW,CAAC,GAClBA,EAAS,GAAKxuC,EAAMyuC,aAAa,GACjCD,EAAS,GAAKxuC,EAAMyuC,aAAa,GACjC,MAAMlqI,EAAOy7F,EAAMj3E,MAAMpuC,OAUzB,OATI4pB,GACFy7F,EAAMyuC,aAAa,GAAKzuC,EAAMj3E,MAAM,GAAG1xC,EACvC2oH,EAAMyuC,aAAa,GAAKzuC,EAAMj3E,MAAMxkB,EAAO,GAAGltB,IAE9C2oH,EAAMyuC,aAAa,GAAK,EACxBzuC,EAAMyuC,aAAa,GAAK,IAItBD,EAAS,KAAOxuC,EAAMyuC,aAAa,IAAMD,EAAS,KAAOxuC,EAAMyuC,aAAa,MAGhF1uC,EAAU/1E,YACH,IAKT+1E,EAAU8tC,YAAcx2J,IAGtB,IAAIoM,EAAI,EACR,KAAOA,EAAIu8G,EAAMj3E,MAAMpuC,QACjBqlH,EAAMj3E,MAAMtlC,GAAGpM,IAAMA,EADIoM,KAK/B,MAAMirJ,EAASjrJ,EAGf,GAAIA,GAAKu8G,EAAMj3E,MAAMpuC,OACnB,OAAQ,EAKV,IAAI2zJ,GAAkB,EAQtB,OAPAtuC,EAAMj3E,MAAM/7B,OAAOvJ,EAAG,GACZ,IAANA,GAAWA,IAAMu8G,EAAMj3E,MAAMpuC,SAC/B2zJ,EAAkBvuC,EAAUwuC,eAEzBD,GACHvuC,EAAU/1E,WAEL0kH,GAIT3uC,EAAU4uC,UAAY,CAACC,EAAMC,KAC3B,GAAID,IAASC,EAAb,CAIA9uC,EAAU8tC,YAAYgB,GACtB,IAAK,IAAIprJ,EAAI,EAAGA,EAAIu8G,EAAMj3E,MAAMpuC,OAAQ8I,IACtC,GAAIu8G,EAAMj3E,MAAMtlC,GAAGpM,IAAMu3J,EAAM,CAC7B5uC,EAAMj3E,MAAMtlC,GAAGpM,EAAIw3J,EACnB9uC,EAAU+tC,qBACV,KACF,CAPF,GAaF/tC,EAAU5uG,gBAAkB,KAC1B6uG,EAAMj3E,MAAQ,GACdg3E,EAAU+tC,sBAKZ/tC,EAAU+uC,cAAgB,CAAC7sI,EAAI8sI,EAAIC,EAAIl0E,EAAIvhE,EAAI01I,EAAIC,EAAIj0E,KAErD8kC,EAAU+tC,qBACV,IAAK,IAAIrqJ,EAAI,EAAGA,EAAIu8G,EAAMj3E,MAAMpuC,QAC1BqlH,EAAMj3E,MAAMtlC,GAAGpM,GAAK4qB,GAAM+9F,EAAMj3E,MAAMtlC,GAAGpM,GAAKkiB,EAChDymG,EAAMj3E,MAAM/7B,OAAOvJ,EAAG,GAEtBA,IAKJs8G,EAAU4tC,gBAAgB1rI,EAAI8sI,EAAIC,EAAIl0E,EAAI,GAAK,GAC/CilC,EAAU4tC,gBAAgBp0I,EAAI01I,EAAIC,EAAIj0E,EAAI,GAAK,GAC/C8kC,EAAU/1E,YAKZ+1E,EAAUovC,cAAgB,CAACltI,EAAImtI,EAAIC,EAAIznI,EAAIrO,EAAI+1I,EAAI7zG,EAAI5zB,KACrD,MAAM0nI,EAAO,CAACH,EAAIC,EAAIznI,GAChB4nI,EAAO,CAACF,EAAI7zG,EAAI5zB,GAChBgkI,EAAO,GACPC,EAAO,IACb,IAAAl+D,GAAQ2hE,EAAM1D,IACd,IAAAj+D,GAAQ4hE,EAAM1D,GACd/rC,EAAU+uC,cAAc7sI,EAAI4pI,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAItyI,EAAIuyI,EAAK,GAAIA,EAAK,GAAIA,EAAK,KAKpF/rC,EAAU0vC,SAAWp4J,IACnB,MAAM42J,EAAM,GAEZ,OADAluC,EAAUxiC,SAASlmF,EAAG42J,GACf,CAACj3J,KAAK+Q,MAAM,IAAQkmJ,EAAI,GAAK,IAAMj3J,KAAK+Q,MAAM,IAAQkmJ,EAAI,GAAK,IAAMj3J,KAAK+Q,MAAM,IAAQkmJ,EAAI,GAAK,IAAM,MAKhHluC,EAAUxiC,SAAW,CAAClmF,EAAG42J,KACvB,GAAIjuC,EAAM0vC,cAAe,CACvB,MAAMC,EAAW5vC,EAAUx5F,UAErBklB,EAAMs0E,EAAU6vC,+BAA+Bv4J,GACrD,GAAIo0C,EAAM,GAAkB,IAAbkkH,EAAgB,CAC7B,MAAM7C,EAAW/sC,EAAU8vC,yBAC3B5B,EAAI,GAAKnB,EAAS,GAClBmB,EAAI,GAAKnB,EAAS,GAClBmB,EAAI,GAAKnB,EAAS,EACpB,KAAO,CACL,MAAMgD,EAAU,GAChB/vC,EAAUt5F,aAAaglB,EAAMkkH,EAAUG,GAEvC7B,EAAI,GAAK6B,EAAQ,GACjB7B,EAAI,GAAK6B,EAAQ,GACjB7B,EAAI,GAAK6B,EAAQ,EACnB,CACA,MACF,CACA/vC,EAAUj+F,SAASzqB,EAAGA,EAAG,EAAG42J,IAK9BluC,EAAUgwC,YAAc14J,IACtB,MAAM42J,EAAM,GAEZ,OADAluC,EAAUxiC,SAASlmF,EAAG42J,GACfA,EAAI,IAKbluC,EAAUiwC,cAAgB34J,IACxB,MAAM42J,EAAM,GAEZ,OADAluC,EAAUxiC,SAASlmF,EAAG42J,GACfA,EAAI,IAKbluC,EAAUkwC,aAAe54J,IACvB,MAAM42J,EAAM,GAEZ,OADAluC,EAAUxiC,SAASlmF,EAAG42J,GACfA,EAAI,IAKbluC,EAAUj+F,SAAW,CAACouI,EAASC,EAAO5rI,EAAMvK,KAE1C,MAAMo2I,EAASrqJ,OAAOmqJ,GAChBG,EAAOtqJ,OAAOoqJ,GAKpB,IAAI,IAAA1sJ,GAAM2sJ,KAAW,IAAA3sJ,GAAM4sJ,GAAO,CAChC,IAAK,IAAI5sJ,EAAI,EAAGA,EAAI8gB,EAAM9gB,IACxBuW,EAAU,EAAJvW,EAAQ,GAAKu8G,EAAM8sC,SAAS,GAClC9yI,EAAU,EAAJvW,EAAQ,GAAKu8G,EAAM8sC,SAAS,GAClC9yI,EAAU,EAAJvW,EAAQ,GAAKu8G,EAAM8sC,SAAS,GAEpC,MACF,CACA,IAAIrhH,EAAM,EACV,MAAMkkH,EAAW3vC,EAAMj3E,MAAMpuC,OAK7B,IAAI21J,EAAQ,EACRC,EAAQ,EACRC,EAAQ,EACK,IAAbb,IACFW,EAAQtwC,EAAMj3E,MAAM4mH,EAAW,GAAG5+I,EAClCw/I,EAAQvwC,EAAMj3E,MAAM4mH,EAAW,GAAG3+I,EAClCw/I,EAAQxwC,EAAMj3E,MAAM4mH,EAAW,GAAG1+I,GAEpC,IAAI5Z,EAAI,EACJ4qB,EAAK,EACL1I,EAAK,EACT,MAAMsyI,EAAO,CAAC,EAAK,EAAK,GAClBC,EAAO,CAAC,EAAK,EAAK,GACxB,IAAIpqE,EAAW,EACXksE,EAAY,EAChB,MAAM6C,EAAS,GAGf,IAAIC,EAAgB1wC,EAAMzpH,QAAUy0J,EAAM2F,MACtCD,IAEFA,EAAgB1wC,EAAMyuC,aAAa,GAAK,GAE1C,IAAImC,EAAW,EACXC,EAAS,EACTC,EAAO,EACPJ,IACFE,EAAW55J,KAAK+5J,MAAMX,GACtBS,EAAS75J,KAAK+5J,MAAMV,IAItB,IAAK,IAAI5sJ,EAAI,EAAGA,EAAI8gB,EAAM9gB,IAAK,CAE7B,MAAMutJ,EAAO,EAAIvtJ,EAsBjB,GAjBI8gB,EAAO,EACLmsI,GACFI,EAAOF,EAAWntJ,GAAK8gB,EAAO,IAAQssI,EAASD,GAC/Cv5J,EAAI,IAAQy5J,GAEZz5J,EAAI+4J,EAAS3sJ,GAAK8gB,EAAO,IAAQ8rI,EAAOD,GAEjCM,GACTI,EAAO,IAAOF,EAAWC,GACzBx5J,EAAI,IAAQy5J,GAEZz5J,EAAI,IAAO+4J,EAASC,GAMlBrwC,EAAMstC,WAAY,CACpB,MAAMznJ,EAAQm6G,EAAMyuC,aACpB,GAAIp3J,GAAKwO,EAAM,IAAMxO,GAAKwO,EAAM,GAAI,CAClC,MAAM0nJ,EAAiBvtC,EAAMutC,eACvB0D,EAAaprJ,EAAM,GAAKA,EAAM,GACpC,GAAI0nJ,GAAkB,EACpBl2J,EAAIwO,EAAM,GAAKorJ,EAAa,MACvB,CAEL,MAAMC,GAAM75J,EAAIwO,EAAM,IAAMorJ,EAEtBE,GAAkB,OAAM5D,EAAiB2D,GAE/C75J,EAAIwO,EAAM,GAAKsrJ,GAAmB5D,EAAiB,GAAK0D,CAC1D,CACF,CACF,CAGA,KAAOxlH,EAAMkkH,GAAYt4J,EAAI2oH,EAAMj3E,MAAM0C,GAAKp0C,GAC5Co0C,IAKIA,EAAMkkH,IACR1tI,EAAK+9F,EAAMj3E,MAAM0C,EAAM,GAAGp0C,EAC1BkiB,EAAKymG,EAAMj3E,MAAM0C,GAAKp0C,EAClBq5J,IACFzuI,EAAKjrB,KAAK+5J,MAAM9uI,GAChB1I,EAAKviB,KAAK+5J,MAAMx3I,IAElBsyI,EAAK,GAAK7rC,EAAMj3E,MAAM0C,EAAM,GAAG16B,EAC/B+6I,EAAK,GAAK9rC,EAAMj3E,MAAM0C,GAAK16B,EAC3B86I,EAAK,GAAK7rC,EAAMj3E,MAAM0C,EAAM,GAAGz6B,EAC/B86I,EAAK,GAAK9rC,EAAMj3E,MAAM0C,GAAKz6B,EAC3B66I,EAAK,GAAK7rC,EAAMj3E,MAAM0C,EAAM,GAAGx6B,EAC/B66I,EAAK,GAAK9rC,EAAMj3E,MAAM0C,GAAKx6B,EAI3BywE,EAAWs+B,EAAMj3E,MAAM0C,EAAM,GAAGi2C,SAChCksE,EAAY5tC,EAAMj3E,MAAM0C,EAAM,GAAGmiH,UAI7BlsE,EAAW,OACbA,EAAW,MAETA,EAAW,SACbA,EAAW,SAMjB,GAAIrqF,EAAI2oH,EAAMyuC,aAAa,GACzBz0I,EAAMg3I,GAAQ,EACdh3I,EAAMg3I,EAAO,GAAK,EAClBh3I,EAAMg3I,EAAO,GAAK,EACdhxC,EAAM0sC,WACJ3sC,EAAUqxC,yBACZp3I,EAAMg3I,GAAQhxC,EAAMgtC,gBAAgB,GACpChzI,EAAMg3I,EAAO,GAAKhxC,EAAMgtC,gBAAgB,GACxChzI,EAAMg3I,EAAO,GAAKhxC,EAAMgtC,gBAAgB,KAExChzI,EAAMg3I,GAAQV,EACdt2I,EAAMg3I,EAAO,GAAKT,EAClBv2I,EAAMg3I,EAAO,GAAKR,SAGjB,GAAIn5J,EAAI2oH,EAAMyuC,aAAa,KAAM,OAAMp3J,IAAMA,EAAI,EAGtD2iB,EAAMg3I,GAAQ,EACdh3I,EAAMg3I,EAAO,GAAK,EAClBh3I,EAAMg3I,EAAO,GAAK,EACdhxC,EAAM0sC,WACJ3sC,EAAUsxC,yBACZr3I,EAAMg3I,GAAQhxC,EAAM+sC,gBAAgB,GACpC/yI,EAAMg3I,EAAO,GAAKhxC,EAAM+sC,gBAAgB,GACxC/yI,EAAMg3I,EAAO,GAAKhxC,EAAM+sC,gBAAgB,IAC/B4C,EAAW,IACpB31I,EAAMg3I,GAAQhxC,EAAMj3E,MAAM,GAAGh4B,EAC7BiJ,EAAMg3I,EAAO,GAAKhxC,EAAMj3E,MAAM,GAAG/3B,EACjCgJ,EAAMg3I,EAAO,GAAKhxC,EAAMj3E,MAAM,GAAG93B,SAGhC,GAAY,IAARw6B,IAAcz0C,KAAK6e,IAAIxe,EAAI+4J,GAAU,MAAQpwC,EAAMstC,YACxDqC,EAAW,GACb31I,EAAMg3I,GAAQhxC,EAAMj3E,MAAM,GAAGh4B,EAC7BiJ,EAAMg3I,EAAO,GAAKhxC,EAAMj3E,MAAM,GAAG/3B,EACjCgJ,EAAMg3I,EAAO,GAAKhxC,EAAMj3E,MAAM,GAAG93B,IAEjC+I,EAAMg3I,GAAQ,EACdh3I,EAAMg3I,EAAO,GAAK,EAClBh3I,EAAMg3I,EAAO,GAAK,OAEf,CAML,IAAIx1G,EAAI,EAgBR,GAdEA,EADEk1G,GACGI,EAAO7uI,IAAO1I,EAAK0I,IAEnB5qB,EAAI4qB,IAAO1I,EAAK0I,GAKrBu5B,EADEA,EAAIkmC,EACF,GAAMlmC,EAAIkmC,EAEV,GAAM,IAAOlmC,EAAIkmC,IAAa,EAAMA,GAKtCksE,EAAY,IAAM,CAEpB,GAAIpyG,EAAI,GAAK,CACXxhC,EAAMg3I,GAAQnF,EAAK,GACnB7xI,EAAMg3I,EAAO,GAAKnF,EAAK,GACvB7xI,EAAMg3I,EAAO,GAAKnF,EAAK,GACvB,QACF,CAEE7xI,EAAMg3I,GAAQlF,EAAK,GACnB9xI,EAAMg3I,EAAO,GAAKlF,EAAK,GACvB9xI,EAAMg3I,EAAO,GAAKlF,EAAK,GACvB,QAEJ,CAIA,GAAI8B,EAAY,IAAM,CAEpB,GAAI5tC,EAAM2sC,aAAe5B,EAAW6B,IAClC5yI,EAAMg3I,IAAS,EAAIx1G,GAAKqwG,EAAK,GAAKrwG,EAAIswG,EAAK,GAC3C9xI,EAAMg3I,EAAO,IAAM,EAAIx1G,GAAKqwG,EAAK,GAAKrwG,EAAIswG,EAAK,GAC/C9xI,EAAMg3I,EAAO,IAAM,EAAIx1G,GAAKqwG,EAAK,GAAKrwG,EAAIswG,EAAK,QAC1C,GAAI9rC,EAAM2sC,aAAe5B,EAAWuG,IAAK,CAC9C,MAAM/B,EAAO,GACPC,EAAO,IACb,OAAQ3D,EAAM0D,IACd,OAAQzD,EAAM0D,GACVxvC,EAAM6sC,UAAY0C,EAAK,GAAKC,EAAK,GAAK,IAAOA,EAAK,GAAKD,EAAK,GAAK,MAC/DA,EAAK,GAAKC,EAAK,GACjBD,EAAK,IAAM,EAEXC,EAAK,IAAM,GAGf,MAAM+B,EAAS,GACfA,EAAO,IAAM,EAAM/1G,GAAK+zG,EAAK,GAAK/zG,EAAIg0G,EAAK,GACvC+B,EAAO,GAAK,IACdA,EAAO,IAAM,GAEfA,EAAO,IAAM,EAAM/1G,GAAK+zG,EAAK,GAAK/zG,EAAIg0G,EAAK,GAC3C+B,EAAO,IAAM,EAAM/1G,GAAK+zG,EAAK,GAAK/zG,EAAIg0G,EAAK,IAG3C,IAAA5hE,GAAQ2jE,EAAQd,GAChBz2I,EAAMg3I,GAAQP,EAAO,GACrBz2I,EAAMg3I,EAAO,GAAKP,EAAO,GACzBz2I,EAAMg3I,EAAO,GAAKP,EAAO,EAC3B,MAAO,GAAIzwC,EAAM2sC,aAAe5B,EAAWyG,IAAK,CAC9C,MAAMzF,EAAO,GACPC,EAAO,IACb,OAAQH,EAAME,IACd,OAAQD,EAAME,GACd,MAAMQ,EAAS,GACfA,EAAO,IAAM,EAAIhxG,GAAKuwG,EAAK,GAAKvwG,EAAIwwG,EAAK,GACzCQ,EAAO,IAAM,EAAIhxG,GAAKuwG,EAAK,GAAKvwG,EAAIwwG,EAAK,GACzCQ,EAAO,IAAM,EAAIhxG,GAAKuwG,EAAK,GAAKvwG,EAAIwwG,EAAK,IAGzC,OAAQQ,EAAQiE,GAChBz2I,EAAMg3I,GAAQP,EAAO,GACrBz2I,EAAMg3I,EAAO,GAAKP,EAAO,GACzBz2I,EAAMg3I,EAAO,GAAKP,EAAO,EAC3B,MAAWzwC,EAAM2sC,aAAe5B,EAAW0G,WACzC7F,EAA6CpwG,EAAGqwG,EAAMC,EAAM2E,GAC5Dz2I,EAAMg3I,GAAQP,EAAO,GACrBz2I,EAAMg3I,EAAO,GAAKP,EAAO,GACzBz2I,EAAMg3I,EAAO,GAAKP,EAAO,IAEzBrJ,EAAc,mCAAoCpnC,EAAM2sC,YAE1D,QACF,CASInxG,EAAI,GACNA,EAAI,IAAW,EAAJA,KAAa,EAAM,GAAOoyG,GAC5BpyG,EAAI,KACbA,EAAI,EAAM,IAAmB,GAAX,EAAMA,MAAY,EAAI,GAAOoyG,IAIjD,MAAM8D,EAAKl2G,EAAIA,EACTm2G,EAAMD,EAAKl2G,EACX4zG,EAAK,EAAMuC,EAAM,EAAID,EAAK,EAC1BpC,GAAM,EAAIqC,EAAM,EAAID,EACpBE,EAAKD,EAAM,EAAID,EAAKl2G,EACpBq2G,EAAKF,EAAMD,EACjB,IAAI9tJ,EACAohC,EACJ,GAAIg7E,EAAM2sC,aAAe5B,EAAW6B,IAClC,IAAK,IAAI5gJ,EAAI,EAAGA,EAAI,EAAGA,IAErBpI,EAAQkoJ,EAAK9/I,GAAK6/I,EAAK7/I,GACvBg5B,GAAK,EAAM4oH,GAAahqJ,EAGxBoW,EAAMg3I,EAAOhlJ,GAAKojJ,EAAKvD,EAAK7/I,GAAKsjJ,EAAKxD,EAAK9/I,GAAK4lJ,EAAK5sH,EAAI6sH,EAAK7sH,OAE3D,GAAIg7E,EAAM2sC,aAAe5B,EAAWuG,IAAK,CAC9C,MAAM/B,EAAO,GACPC,EAAO,IACb,OAAQ3D,EAAM0D,IACd,OAAQzD,EAAM0D,GACVxvC,EAAM6sC,UAAY0C,EAAK,GAAKC,EAAK,GAAK,IAAOA,EAAK,GAAKD,EAAK,GAAK,MAC/DA,EAAK,GAAKC,EAAK,GACjBD,EAAK,IAAM,EAEXC,EAAK,IAAM,GAGf,MAAM+B,EAAS,GACf,IAAK,IAAIvlJ,EAAI,EAAGA,EAAI,EAAGA,IAErBpI,EAAQ4rJ,EAAKxjJ,GAAKujJ,EAAKvjJ,GACvBg5B,GAAK,EAAM4oH,GAAahqJ,EAGxB2tJ,EAAOvlJ,GAAKojJ,EAAKG,EAAKvjJ,GAAKsjJ,EAAKE,EAAKxjJ,GAAK4lJ,EAAK5sH,EAAI6sH,EAAK7sH,EAC9C,IAANh5B,GAAWulJ,EAAOvlJ,GAAK,IACzBulJ,EAAOvlJ,IAAM,IAIjB,IAAA4hF,GAAQ2jE,EAAQd,GAChBz2I,EAAMg3I,GAAQP,EAAO,GACrBz2I,EAAMg3I,EAAO,GAAKP,EAAO,GACzBz2I,EAAMg3I,EAAO,GAAKP,EAAO,EAC3B,MAAO,GAAIzwC,EAAM2sC,aAAe5B,EAAWyG,IAAK,CAC9C,MAAMzF,EAAO,GACPC,EAAO,IACb,OAAQH,EAAME,IACd,OAAQD,EAAME,GACd,MAAMQ,EAAS,GACf,IAAK,IAAIxgJ,EAAI,EAAGA,EAAI,EAAGA,IAErBpI,EAAQooJ,EAAKhgJ,GAAK+/I,EAAK//I,GACvBg5B,GAAK,EAAM4oH,GAAahqJ,EAGxB4oJ,EAAOxgJ,GAAKojJ,EAAKrD,EAAK//I,GAAKsjJ,EAAKtD,EAAKhgJ,GAAK4lJ,EAAK5sH,EAAI6sH,EAAK7sH,GAG1D,OAAQwnH,EAAQiE,GAChBz2I,EAAMg3I,GAAQP,EAAO,GACrBz2I,EAAMg3I,EAAO,GAAKP,EAAO,GACzBz2I,EAAMg3I,EAAO,GAAKP,EAAO,EAC3B,MAAWzwC,EAAM2sC,aAAe5B,EAAW0G,WAIzC7F,EAA6CpwG,EAAGqwG,EAAMC,EAAM2E,GAC5Dz2I,EAAMg3I,GAAQP,EAAO,GACrBz2I,EAAMg3I,EAAO,GAAKP,EAAO,GACzBz2I,EAAMg3I,EAAO,GAAKP,EAAO,IAEzBrJ,EAAc,oCAIhB,IAAK,IAAIp7I,EAAI,EAAGA,EAAI,EAAGA,IACrBgO,EAAMg3I,EAAOhlJ,GAAKgO,EAAMg3I,EAAOhlJ,GAAK,EAAM,EAAMgO,EAAMg3I,EAAOhlJ,GAC7DgO,EAAMg3I,EAAOhlJ,GAAKgO,EAAMg3I,EAAOhlJ,GAAK,EAAM,EAAMgO,EAAMg3I,EAAOhlJ,EAEjE,CACF,GAIF+zG,EAAU+xC,cAAgB,SAAU1B,EAAQC,EAAM9rI,GAChD,IAAIwtI,EAAY7xC,UAAUvlH,OAAS,QAAsB5C,IAAjBmoH,UAAU,IAAmBA,UAAU,GAC/E,GAAIH,EAAUiyC,YAAchyC,EAAMqtC,WAAartC,EAAMotC,YAAc7oI,GAAQy7F,EAAMiyC,iBAAmBF,EAClG,OAAO/xC,EAAMhmG,MAEf,GAA2B,IAAvBgmG,EAAMj3E,MAAMpuC,OAEd,OADAysJ,EAAc,+DACPpnC,EAAMhmG,MAEf,MAAMk4I,EAAaH,EAAY,EAAI,EAC/B/xC,EAAMotC,YAAc7oI,GAAQy7F,EAAMiyC,iBAAmBF,IACvD/xC,EAAMhmG,MAAQ,IAAIjX,WAAWwhB,EAAO2tI,GACpClyC,EAAMotC,UAAY7oI,EAClBy7F,EAAMiyC,eAAiBF,GAEzB,MAAMI,EAAW,GACjBpyC,EAAUj+F,SAASsuI,EAAQC,EAAM9rI,EAAM4tI,GACvC,IAAK,IAAI1uJ,EAAI,EAAGA,EAAI8gB,EAAM9gB,IACxBu8G,EAAMhmG,MAAMvW,EAAIyuJ,EAAa,GAAKl7J,KAAK+Q,MAA4B,IAAtBoqJ,EAAa,EAAJ1uJ,EAAQ,GAAa,IAC3Eu8G,EAAMhmG,MAAMvW,EAAIyuJ,EAAa,GAAKl7J,KAAK+Q,MAA4B,IAAtBoqJ,EAAa,EAAJ1uJ,EAAQ,GAAa,IAC3Eu8G,EAAMhmG,MAAMvW,EAAIyuJ,EAAa,GAAKl7J,KAAK+Q,MAA4B,IAAtBoqJ,EAAa,EAAJ1uJ,EAAQ,GAAa,IACvEsuJ,IACF/xC,EAAMhmG,MAAMvW,EAAIyuJ,EAAa,GAAK,KAItC,OADAlyC,EAAMqtC,UAAUrjH,WACTg2E,EAAMhmG,KACf,EACA+lG,EAAU5lG,uBAAyBpT,IACjCg5G,EAAU5uG,kBACV,MAAMihJ,EAAgBrrJ,EAAM2jJ,wBAC5B,IAAK,IAAIjnJ,EAAI,EAAGA,EAAIsD,EAAMsrJ,oBAAqB5uJ,IAC7C,OAAQ2uJ,GACN,KAAK,EAEDpyC,EAAMj3E,MAAMrmC,KAAK,CACfrL,EAAGoM,EACHsN,EAAGhK,EAAM8jJ,aAAapnJ,EAAG,GACzBuN,EAAGjK,EAAM8jJ,aAAapnJ,EAAG,GACzBwN,EAAGlK,EAAM8jJ,aAAapnJ,EAAG,GACzBi+E,SAAU,GACVksE,UAAW,IAEb,MAEJ,KAAK,EAED5tC,EAAMj3E,MAAMrmC,KAAK,CACfrL,EAAG0P,EAAM8jJ,aAAapnJ,EAAG,GACzBsN,EAAGhK,EAAM8jJ,aAAapnJ,EAAG,GACzBuN,EAAGjK,EAAM8jJ,aAAapnJ,EAAG,GACzBwN,EAAGlK,EAAM8jJ,aAAapnJ,EAAG,GACzBi+E,SAAU,GACVksE,UAAW,IAEb,MAEJ,KAAK,EAED5tC,EAAMj3E,MAAMrmC,KAAK,CACfrL,EAAGoM,EACHsN,EAAGhK,EAAM8jJ,aAAapnJ,EAAG,GACzBuN,EAAGjK,EAAM8jJ,aAAapnJ,EAAG,GACzBwN,EAAGlK,EAAM8jJ,aAAapnJ,EAAG,GACzBi+E,SAAU36E,EAAM8jJ,aAAapnJ,EAAG,GAChCmqJ,UAAW7mJ,EAAM8jJ,aAAapnJ,EAAG,KAEnC,MAEJ,KAAK,EAEDu8G,EAAMj3E,MAAMrmC,KAAK,CACfrL,EAAG0P,EAAM8jJ,aAAapnJ,EAAG,GACzBsN,EAAGhK,EAAM8jJ,aAAapnJ,EAAG,GACzBuN,EAAGjK,EAAM8jJ,aAAapnJ,EAAG,GACzBwN,EAAGlK,EAAM8jJ,aAAapnJ,EAAG,GACzBi+E,SAAU36E,EAAM8jJ,aAAapnJ,EAAG,GAChCmqJ,UAAW7mJ,EAAM8jJ,aAAapnJ,EAAG,KAM3Cs8G,EAAU+tC,sBAIZ/tC,EAAUuyC,uBAAyB,CAAClC,EAAQC,EAAM9rI,EAAMvK,KACtD,IAAI4gC,EAAM,EACVmlE,EAAU5uG,kBACNoT,EAAO,IACTq2B,GAAOy1G,EAAOD,IAAW7rI,EAAO,IAElC,IAAK,IAAI9gB,EAAI,EAAGA,EAAI8gB,EAAM9gB,IAAK,CAC7B,MAAMulC,EAAO,CACX3xC,EAAG+4J,EAASx1G,EAAMn3C,EAClBsN,EAAGiJ,EAAU,EAAJvW,GACTuN,EAAGgJ,EAAU,EAAJvW,EAAQ,GACjBwN,EAAG+I,EAAU,EAAJvW,EAAQ,GACjBmqJ,UAAW,EACXlsE,SAAU,IAEZs+B,EAAMj3E,MAAMrmC,KAAKsmC,EACnB,CACA+2E,EAAU+tC,sBAKZ/tC,EAAUt5F,aAAe,CAAClkB,EAAOg5B,IAC3Bh5B,EAAQ,GAAKA,GAASy9G,EAAMj3E,MAAMpuC,QACpCysJ,EAAc,wBACN,IAEV7rH,EAAI,GAAKykF,EAAMj3E,MAAMxmC,GAAOlL,EAC5BkkC,EAAI,GAAKykF,EAAMj3E,MAAMxmC,GAAOwO,EAC5BwqB,EAAI,GAAKykF,EAAMj3E,MAAMxmC,GAAOyO,EAC5BuqB,EAAI,GAAKykF,EAAMj3E,MAAMxmC,GAAO0O,EAC5BsqB,EAAI,GAAKykF,EAAMj3E,MAAMxmC,GAAOm/E,SAC5BnmD,EAAI,GAAKykF,EAAMj3E,MAAMxmC,GAAOqrJ,UACrB,GAKT7tC,EAAUr5F,aAAe,CAACnkB,EAAOg5B,KAC/B,GAAIh5B,EAAQ,GAAKA,GAASy9G,EAAMj3E,MAAMpuC,OAEpC,OADAysJ,EAAc,wBACN,EAEV,MAAMwH,EAAO5uC,EAAMj3E,MAAMxmC,GAAOlL,EAgBhC,OAfA2oH,EAAMj3E,MAAMxmC,GAAOlL,EAAIkkC,EAAI,GAC3BykF,EAAMj3E,MAAMxmC,GAAOwO,EAAIwqB,EAAI,GAC3BykF,EAAMj3E,MAAMxmC,GAAOyO,EAAIuqB,EAAI,GAC3BykF,EAAMj3E,MAAMxmC,GAAO0O,EAAIsqB,EAAI,GAC3BykF,EAAMj3E,MAAMxmC,GAAOm/E,SAAWnmD,EAAI,GAClCykF,EAAMj3E,MAAMxmC,GAAOqrJ,UAAYryH,EAAI,GAC/BqzH,IAASrzH,EAAI,GAGfwkF,EAAU+tC,qBAIV/tC,EAAU/1E,WAEL,GAIT+1E,EAAUwyC,2BAA6B,KACrC,GAAIvyC,EAAM0vC,eAAiB3vC,EAAUx5F,UACnC,OAAOw5F,EAAUx5F,UAEnB,GAAIy5F,EAAMotC,UAIR,OAAOptC,EAAMotC,UAEf,MAAMoF,EAASxyC,EAAMj3E,OAAOpuC,QAAU,EAEtC,OAAO3D,KAAKkS,IAAI,KAAMspJ,IAIxBzyC,EAAU0yC,gBAAkB,CAAChnH,EAAK3nC,KAChC,MAAMyjB,EAAIw4F,EAAUx5F,UACpB,GAAIgB,EAAI,GAAKkkB,GAAO,EAAG,CACrB,MAAMinH,EAAY,GAClB3yC,EAAUt5F,aAAaglB,EAAMlkB,EAAGmrI,GAChC,IAAK,IAAI1mJ,EAAI,EAAGA,EAAI,IAAKA,EACvBlI,EAAKkI,GAAK0mJ,EAAU1mJ,EAAI,GAG1B,YADAlI,EAAK,GAAK,EAEZ,CACA,MAAMgpJ,EAAW/sC,EAAU8vC,yBAC3B/rJ,EAAK,GAAKgpJ,EAAS,GACnBhpJ,EAAK,GAAKgpJ,EAAS,GACnBhpJ,EAAK,GAAKgpJ,EAAS,GACnBhpJ,EAAK,GAAK,GAIZi8G,EAAU4yC,oBAAsB,CAACC,EAAIC,KACnC,KAAID,GAAM,IAAMC,EAAhB,CAGA9yC,EAAU5uG,kBACV,IAAK,IAAI1N,EAAI,EAAGA,EAAImvJ,EAAInvJ,IACtBs8G,EAAU3uG,YAAYyhJ,EAAQ,EAAJpvJ,GAAQovJ,EAAQ,EAAJpvJ,EAAQ,GAAIovJ,EAAQ,EAAJpvJ,EAAQ,GAAIovJ,EAAQ,EAAJpvJ,EAAQ,GAHhF,GAQFs8G,EAAUvnG,gBAAkB,CAAC3gB,EAAKqR,KAChC,MAAMrD,EAAQ,CAAChO,EAAKqR,GACd4pJ,EAAgB/yC,EAAU7mG,WAChC,GAAI45I,EAAc,KAAOjtJ,EAAM,IAAMitJ,EAAc,KAAOjtJ,EAAM,GAC9D,OAEF,GAAIA,EAAM,KAAOA,EAAM,GAErB,YADAuhJ,EAAc,yCAGhB,MAAM7wJ,GAASsP,EAAM,GAAKA,EAAM,KAAOitJ,EAAc,GAAKA,EAAc,IAClExlC,EAAQznH,EAAM,GAAKitJ,EAAc,GAAKv8J,EAC5C,IAAK,IAAIkN,EAAI,EAAGA,EAAIu8G,EAAMj3E,MAAMpuC,SAAU8I,EACxCu8G,EAAMj3E,MAAMtlC,GAAGpM,EAAI2oH,EAAMj3E,MAAMtlC,GAAGpM,EAAId,EAAQ+2H,EAEhDtN,EAAMyuC,aAAa,GAAK5oJ,EAAM,GAC9Bm6G,EAAMyuC,aAAa,GAAK5oJ,EAAM,GAC9Bk6G,EAAU/1E,YAIZ+1E,EAAUgzC,YAAcltJ,IACtB,MAAMmtJ,EAAgBjzC,EAAU7mG,WAG1B+0I,EAAM,GACR+E,EAAc,GAAKntJ,EAAM,IAC3Bk6G,EAAUxiC,SAAS13E,EAAM,GAAIooJ,GAC7BluC,EAAU3uG,YAAYvL,EAAM,GAAIooJ,EAAI,GAAIA,EAAI,GAAIA,EAAI,MAEpDluC,EAAUxiC,SAASy1E,EAAc,GAAI/E,GACrCluC,EAAU3uG,YAAYvL,EAAM,GAAIooJ,EAAI,GAAIA,EAAI,GAAIA,EAAI,KAElD+E,EAAc,GAAKntJ,EAAM,IAC3Bk6G,EAAUxiC,SAAS13E,EAAM,GAAIooJ,GAC7BluC,EAAU3uG,YAAYvL,EAAM,GAAIooJ,EAAI,GAAIA,EAAI,GAAIA,EAAI,MAEpDluC,EAAUxiC,SAASy1E,EAAc,GAAI/E,GACrCluC,EAAU3uG,YAAYvL,EAAM,GAAIooJ,EAAI,GAAIA,EAAI,GAAIA,EAAI,KAItDluC,EAAU+tC,qBACV,IAAK,IAAIrqJ,EAAI,EAAGA,EAAIu8G,EAAMj3E,MAAMpuC,QAC1BqlH,EAAMj3E,MAAMtlC,GAAGpM,GAAKwO,EAAM,IAAMm6G,EAAMj3E,MAAMtlC,GAAGpM,GAAKwO,EAAM,GAC5Dm6G,EAAMj3E,MAAM/7B,OAAOvJ,EAAG,KAEpBA,EAGN,OAAO,GAITs8G,EAAUkzC,2BAA6B,CAAChxI,EAAI1I,KAC1C,MAAMm4B,EAAIquE,EAAUmzC,uBACpB,OAAOl8J,KAAK6qI,MAAMtoH,EAAK0I,GAAMyvB,IAI/BquE,EAAUmzC,qBAAuB,KAC/B,GAAIlzC,EAAMj3E,MAAMpuC,OAAS,EACvB,OAAQ,EAEV,IAAIob,EAAWhQ,OAAOo8F,UACtB,IAAK,IAAI1+F,EAAI,EAAGA,EAAIu8G,EAAMj3E,MAAMpuC,OAAS,EAAG8I,IAAK,CAC/C,MAAM0vJ,EAAcnzC,EAAMj3E,MAAMtlC,EAAI,GAAGpM,EAAI2oH,EAAMj3E,MAAMtlC,GAAGpM,EACtD87J,EAAcp9I,IAChBA,EAAWo9I,EAEf,CACA,OAAOp9I,GAETgqG,EAAUqzC,uBAAyB,CAACjwI,EAAOq9F,EAAQ6yC,EAAWC,KAChC,IAAxBvzC,EAAUx5F,UAIVy5F,EAAM0vC,cACR3vC,EAAUwzC,eAAepwI,EAAOq9F,EAAQ6yC,EAAWC,GAEnDvzC,EAAUx3G,QAAQ4a,EAAOq9F,EAAQ6yC,EAAWC,GAN5CpI,EAAc,qCAWlBnrC,EAAUx3G,QAAU,CAAC4a,EAAOq9F,EAAQ6yC,EAAWC,KAC7C,GAA4B,IAAxBvzC,EAAUx5F,UAEZ,YADA4kI,EAAgB,oCAGlB,MAAMqI,EAAQx8J,KAAK+Q,MAA6B,IAAvBg4G,EAAU0zC,WAAqB,IAClD94J,EAASwoB,EAAMkvI,oBACfqB,EAASvwI,EAAMunI,wBACfiJ,EAAUnzC,EAAOv5E,UACjB2sH,EAASzwI,EAAM8jB,UACfgnH,EAAM,GACZ,GAAIoF,IAAcpI,EAAoB4I,KACpC,IAAK,IAAIpwJ,EAAI,EAAGA,EAAI9I,EAAQ8I,IAAK,CAC/B,MAAMpM,EAAIu8J,EAAOnwJ,EAAIiwJ,EAASJ,GAC9BvzC,EAAUxiC,SAASlmF,EAAG42J,GACtB0F,EAAY,EAAJlwJ,GAASzM,KAAK+Q,MAAe,IAATkmJ,EAAI,GAAa,IAC7C0F,EAAY,EAAJlwJ,EAAQ,GAAKzM,KAAK+Q,MAAe,IAATkmJ,EAAI,GAAa,IACjD0F,EAAY,EAAJlwJ,EAAQ,GAAKzM,KAAK+Q,MAAe,IAATkmJ,EAAI,GAAa,IACjD0F,EAAY,EAAJlwJ,EAAQ,GAAK+vJ,CACvB,CAEF,GAAIH,IAAcpI,EAAoB2B,IACpC,IAAK,IAAInpJ,EAAI,EAAGA,EAAI9I,EAAQ8I,IAAK,CAC/B,MAAMpM,EAAIu8J,EAAOnwJ,EAAIiwJ,EAASJ,GAC9BvzC,EAAUxiC,SAASlmF,EAAG42J,GACtB0F,EAAY,EAAJlwJ,GAASzM,KAAK+Q,MAAe,IAATkmJ,EAAI,GAAa,IAC7C0F,EAAY,EAAJlwJ,EAAQ,GAAKzM,KAAK+Q,MAAe,IAATkmJ,EAAI,GAAa,IACjD0F,EAAY,EAAJlwJ,EAAQ,GAAKzM,KAAK+Q,MAAe,IAATkmJ,EAAI,GAAa,GACnD,CAEF,GAAIoF,IAAcpI,EAAoB6I,UACpC,IAAK,IAAIrwJ,EAAI,EAAGA,EAAI9I,EAAQ8I,IAAK,CAC/B,MAAMpM,EAAIu8J,EAAOnwJ,EAAIiwJ,EAASJ,GAC9BvzC,EAAUxiC,SAASlmF,EAAG42J,GACtB0F,EAAQlwJ,GAAKzM,KAAK+Q,MAAe,KAATkmJ,EAAI,GAAqB,OAATA,EAAI,GAAuB,MAATA,EAAI,GAAa,GAC7E,CAEF,GAAIoF,IAAcpI,EAAoB8I,gBACpC,IAAK,IAAItwJ,EAAI,EAAGA,EAAI9I,EAAQ8I,IAAK,CAC/B,MAAMpM,EAAIu8J,EAAOnwJ,EAAIiwJ,EAASJ,GAC9BvzC,EAAUxiC,SAASlmF,EAAG42J,GACtB0F,EAAY,EAAJlwJ,GAASzM,KAAK+Q,MAAe,KAATkmJ,EAAI,GAAqB,OAATA,EAAI,GAAuB,MAATA,EAAI,GAAa,IAC/E0F,EAAY,EAAJlwJ,EAAQ,GAAK+vJ,CACvB,GAKJzzC,EAAUxnG,cAAgBy7I,IACxB,MAAMC,EAAgBr7H,KAAKC,UAAUmnF,EAAM2sC,YACvCqH,EAASjJ,aACX/qC,EAAM2sC,WAAa5B,EAAWiJ,EAASjJ,WAAW/1F,oBACzBj9D,IAArBioH,EAAM2sC,aACRvF,EAAc,cAAc4M,EAASjJ,+CACrC/qC,EAAM2sC,WAAa5B,EAAW6B,MAGlC,IAAIsH,EAAaD,IAAkBr7H,KAAKC,UAAUmnF,EAAM2sC,YACxD,MAAMwH,EAAcD,GAAct7H,KAAKC,UAAUmnF,EAAM8sC,UACvD,GAAIkH,EAASI,SAEX,IADAp0C,EAAM8sC,SAAW,GAAGt1I,OAAOw8I,EAASI,UAC7Bp0C,EAAM8sC,SAASnyJ,OAAS,GAC7BqlH,EAAM8sC,SAASpqJ,KAAK,GAGxBwxJ,EAAaA,GAAcC,IAAgBv7H,KAAKC,UAAUmnF,EAAM8sC,UAChE,MAAMuH,EAAWH,GAAct7H,KAAKC,UAAUmnF,EAAMj3E,OACpD,GAAIirH,EAASt8I,UAAW,CACtB,MAAM6M,EAAOyvI,EAASt8I,UAAU/c,OAChCqlH,EAAMj3E,MAAQ,GACd,MAAM24C,EAAW,GACXksE,EAAY,EAClB,IAAK,IAAInqJ,EAAI,EAAGA,EAAI8gB,EAAM9gB,GAAK,EAC7Bu8G,EAAMj3E,MAAMrmC,KAAK,CACfrL,EAAG28J,EAASt8I,UAAUjU,GACtBsN,EAAGijJ,EAASt8I,UAAUjU,EAAI,GAC1BuN,EAAGgjJ,EAASt8I,UAAUjU,EAAI,GAC1BwN,EAAG+iJ,EAASt8I,UAAUjU,EAAI,GAC1Bi+E,WACAksE,aAGN,CACA,MAAMU,EAAkBvuC,EAAU+tC,qBAC5BwG,GAAgBhG,IAAoB4F,GAAcG,IAAaz7H,KAAKC,UAAUmnF,EAAMj3E,QAE1F,OADIurH,GAAcv0C,EAAU/1E,WACrBskH,GAAmBgG,EAE9B,CAgEEC,CAAyBx0C,EAAWC,EACtC,CAQA,IAAIw0C,EAA6B,CAC/BxyC,YALkB,EAAA7B,EAAM6B,YAAY7mH,EAAQ,4BAM5CA,YACG,K,ksBC7rCE,SAASvB,IACd,IAAI66J,EAAM,IAAI,aAAoB,GAQlC,OANI,cAAuBzxJ,eACzByxJ,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,GAGJA,CACT,CAQO,SAAS/wI,EAAMzN,GACpB,IAAIw+I,EAAM,IAAI,aAAoB,GAIlC,OAHAA,EAAI,GAAKx+I,EAAE,GACXw+I,EAAI,GAAKx+I,EAAE,GACXw+I,EAAI,GAAKx+I,EAAE,GACJw+I,CACT,CAQO,SAAS95J,EAAOsb,GACrB,IAAI5e,EAAI4e,EAAE,GACN1e,EAAI0e,EAAE,GACNrN,EAAIqN,EAAE,GACV,OAAOjf,KAAK47C,MAAMv7C,EAAGE,EAAGqR,EAC1B,CAUO,SAAS8rJ,EAAWr9J,EAAGE,EAAGqR,GAC/B,IAAI6rJ,EAAM,IAAI,aAAoB,GAIlC,OAHAA,EAAI,GAAKp9J,EACTo9J,EAAI,GAAKl9J,EACTk9J,EAAI,GAAK7rJ,EACF6rJ,CACT,CASO,SAASE,EAAKF,EAAKx+I,GAIxB,OAHAw+I,EAAI,GAAKx+I,EAAE,GACXw+I,EAAI,GAAKx+I,EAAE,GACXw+I,EAAI,GAAKx+I,EAAE,GACJw+I,CACT,CAWO,SAASx6J,EAAIw6J,EAAKp9J,EAAGE,EAAGqR,GAI7B,OAHA6rJ,EAAI,GAAKp9J,EACTo9J,EAAI,GAAKl9J,EACTk9J,EAAI,GAAK7rJ,EACF6rJ,CACT,CAUO,SAASp3J,EAAIo3J,EAAKx+I,EAAGhF,GAI1B,OAHAwjJ,EAAI,GAAKx+I,EAAE,GAAKhF,EAAE,GAClBwjJ,EAAI,GAAKx+I,EAAE,GAAKhF,EAAE,GAClBwjJ,EAAI,GAAKx+I,EAAE,GAAKhF,EAAE,GACXwjJ,CACT,CAUO,SAASG,EAASH,EAAKx+I,EAAGhF,GAI/B,OAHAwjJ,EAAI,GAAKx+I,EAAE,GAAKhF,EAAE,GAClBwjJ,EAAI,GAAKx+I,EAAE,GAAKhF,EAAE,GAClBwjJ,EAAI,GAAKx+I,EAAE,GAAKhF,EAAE,GACXwjJ,CACT,CAUO,SAASI,EAASJ,EAAKx+I,EAAGhF,GAI/B,OAHAwjJ,EAAI,GAAKx+I,EAAE,GAAKhF,EAAE,GAClBwjJ,EAAI,GAAKx+I,EAAE,GAAKhF,EAAE,GAClBwjJ,EAAI,GAAKx+I,EAAE,GAAKhF,EAAE,GACXwjJ,CACT,CAUO,SAASK,EAAOL,EAAKx+I,EAAGhF,GAI7B,OAHAwjJ,EAAI,GAAKx+I,EAAE,GAAKhF,EAAE,GAClBwjJ,EAAI,GAAKx+I,EAAE,GAAKhF,EAAE,GAClBwjJ,EAAI,GAAKx+I,EAAE,GAAKhF,EAAE,GACXwjJ,CACT,CASO,SAAS5yB,EAAK4yB,EAAKx+I,GAIxB,OAHAw+I,EAAI,GAAKz9J,KAAK6qI,KAAK5rH,EAAE,IACrBw+I,EAAI,GAAKz9J,KAAK6qI,KAAK5rH,EAAE,IACrBw+I,EAAI,GAAKz9J,KAAK6qI,KAAK5rH,EAAE,IACdw+I,CACT,CASO,SAAS1sJ,EAAM0sJ,EAAKx+I,GAIzB,OAHAw+I,EAAI,GAAKz9J,KAAK+Q,MAAMkO,EAAE,IACtBw+I,EAAI,GAAKz9J,KAAK+Q,MAAMkO,EAAE,IACtBw+I,EAAI,GAAKz9J,KAAK+Q,MAAMkO,EAAE,IACfw+I,CACT,CAUO,SAAS58J,EAAI48J,EAAKx+I,EAAGhF,GAI1B,OAHAwjJ,EAAI,GAAKz9J,KAAKa,IAAIoe,EAAE,GAAIhF,EAAE,IAC1BwjJ,EAAI,GAAKz9J,KAAKa,IAAIoe,EAAE,GAAIhF,EAAE,IAC1BwjJ,EAAI,GAAKz9J,KAAKa,IAAIoe,EAAE,GAAIhF,EAAE,IACnBwjJ,CACT,CAUO,SAASvrJ,EAAIurJ,EAAKx+I,EAAGhF,GAI1B,OAHAwjJ,EAAI,GAAKz9J,KAAKkS,IAAI+M,EAAE,GAAIhF,EAAE,IAC1BwjJ,EAAI,GAAKz9J,KAAKkS,IAAI+M,EAAE,GAAIhF,EAAE,IAC1BwjJ,EAAI,GAAKz9J,KAAKkS,IAAI+M,EAAE,GAAIhF,EAAE,IACnBwjJ,CACT,CASO,SAASz3I,EAAMy3I,EAAKx+I,GAIzB,OAHAw+I,EAAI,GAAKz9J,KAAKgmB,MAAM/G,EAAE,IACtBw+I,EAAI,GAAKz9J,KAAKgmB,MAAM/G,EAAE,IACtBw+I,EAAI,GAAKz9J,KAAKgmB,MAAM/G,EAAE,IACfw+I,CACT,CAUO,SAASl+J,EAAMk+J,EAAKx+I,EAAGhF,GAI5B,OAHAwjJ,EAAI,GAAKx+I,EAAE,GAAKhF,EAChBwjJ,EAAI,GAAKx+I,EAAE,GAAKhF,EAChBwjJ,EAAI,GAAKx+I,EAAE,GAAKhF,EACTwjJ,CACT,CAWO,SAASM,EAAYN,EAAKx+I,EAAGhF,EAAG1a,GAIrC,OAHAk+J,EAAI,GAAKx+I,EAAE,GAAKhF,EAAE,GAAK1a,EACvBk+J,EAAI,GAAKx+I,EAAE,GAAKhF,EAAE,GAAK1a,EACvBk+J,EAAI,GAAKx+I,EAAE,GAAKhF,EAAE,GAAK1a,EAChBk+J,CACT,CASO,SAAS1+I,EAASE,EAAGhF,GAC1B,IAAI5Z,EAAI4Z,EAAE,GAAKgF,EAAE,GACb1e,EAAI0Z,EAAE,GAAKgF,EAAE,GACbrN,EAAIqI,EAAE,GAAKgF,EAAE,GACjB,OAAOjf,KAAK47C,MAAMv7C,EAAGE,EAAGqR,EAC1B,CASO,SAASosJ,EAAgB/+I,EAAGhF,GACjC,IAAI5Z,EAAI4Z,EAAE,GAAKgF,EAAE,GACb1e,EAAI0Z,EAAE,GAAKgF,EAAE,GACbrN,EAAIqI,EAAE,GAAKgF,EAAE,GACjB,OAAO5e,EAAIA,EAAIE,EAAIA,EAAIqR,EAAIA,CAC7B,CAQO,SAASqsJ,EAAch/I,GAC5B,IAAI5e,EAAI4e,EAAE,GACN1e,EAAI0e,EAAE,GACNrN,EAAIqN,EAAE,GACV,OAAO5e,EAAIA,EAAIE,EAAIA,EAAIqR,EAAIA,CAC7B,CASO,SAASssJ,EAAOT,EAAKx+I,GAI1B,OAHAw+I,EAAI,IAAMx+I,EAAE,GACZw+I,EAAI,IAAMx+I,EAAE,GACZw+I,EAAI,IAAMx+I,EAAE,GACLw+I,CACT,CASO,SAASU,EAAQV,EAAKx+I,GAI3B,OAHAw+I,EAAI,GAAK,EAAMx+I,EAAE,GACjBw+I,EAAI,GAAK,EAAMx+I,EAAE,GACjBw+I,EAAI,GAAK,EAAMx+I,EAAE,GACVw+I,CACT,CASO,SAASW,EAAUX,EAAKx+I,GAC7B,IAAI5e,EAAI4e,EAAE,GACN1e,EAAI0e,EAAE,GACNrN,EAAIqN,EAAE,GACNu/B,EAAMn+C,EAAIA,EAAIE,EAAIA,EAAIqR,EAAIA,EAU9B,OARI4sC,EAAM,IAERA,EAAM,EAAIx+C,KAAKopC,KAAKoV,IAGtBi/G,EAAI,GAAKx+I,EAAE,GAAKu/B,EAChBi/G,EAAI,GAAKx+I,EAAE,GAAKu/B,EAChBi/G,EAAI,GAAKx+I,EAAE,GAAKu/B,EACTi/G,CACT,CASO,SAAS1zG,EAAI9qC,EAAGhF,GACrB,OAAOgF,EAAE,GAAKhF,EAAE,GAAKgF,EAAE,GAAKhF,EAAE,GAAKgF,EAAE,GAAKhF,EAAE,EAC9C,CAUO,SAASqtD,EAAMm2F,EAAKx+I,EAAGhF,GAC5B,IAAI02E,EAAK1xE,EAAE,GACP2xE,EAAK3xE,EAAE,GACP4xE,EAAK5xE,EAAE,GACPo/I,EAAKpkJ,EAAE,GACPqkJ,EAAKrkJ,EAAE,GACPskJ,EAAKtkJ,EAAE,GAIX,OAHAwjJ,EAAI,GAAK7sE,EAAK2tE,EAAK1tE,EAAKytE,EACxBb,EAAI,GAAK5sE,EAAKwtE,EAAK1tE,EAAK4tE,EACxBd,EAAI,GAAK9sE,EAAK2tE,EAAK1tE,EAAKytE,EACjBZ,CACT,CAWO,SAASe,EAAKf,EAAKx+I,EAAGhF,EAAG+zB,GAC9B,IAAI2iD,EAAK1xE,EAAE,GACP2xE,EAAK3xE,EAAE,GACP4xE,EAAK5xE,EAAE,GAIX,OAHAw+I,EAAI,GAAK9sE,EAAK3iD,GAAK/zB,EAAE,GAAK02E,GAC1B8sE,EAAI,GAAK7sE,EAAK5iD,GAAK/zB,EAAE,GAAK22E,GAC1B6sE,EAAI,GAAK5sE,EAAK7iD,GAAK/zB,EAAE,GAAK42E,GACnB4sE,CACT,CAaO,SAASgB,EAAQhB,EAAKx+I,EAAGhF,EAAGinB,EAAGwZ,EAAG1M,GACvC,IAAI0wH,EAAe1wH,EAAIA,EACnB2wH,EAAUD,GAAgB,EAAI1wH,EAAI,GAAK,EACvC4wH,EAAUF,GAAgB1wH,EAAI,GAAKA,EACnC6wH,EAAUH,GAAgB1wH,EAAI,GAC9B8wH,EAAUJ,GAAgB,EAAI,EAAI1wH,GAItC,OAHAyvH,EAAI,GAAKx+I,EAAE,GAAK0/I,EAAU1kJ,EAAE,GAAK2kJ,EAAU19H,EAAE,GAAK29H,EAAUnkH,EAAE,GAAKokH,EACnErB,EAAI,GAAKx+I,EAAE,GAAK0/I,EAAU1kJ,EAAE,GAAK2kJ,EAAU19H,EAAE,GAAK29H,EAAUnkH,EAAE,GAAKokH,EACnErB,EAAI,GAAKx+I,EAAE,GAAK0/I,EAAU1kJ,EAAE,GAAK2kJ,EAAU19H,EAAE,GAAK29H,EAAUnkH,EAAE,GAAKokH,EAC5DrB,CACT,CAaO,SAASsB,EAAOtB,EAAKx+I,EAAGhF,EAAGinB,EAAGwZ,EAAG1M,GACtC,IAAIgxH,EAAgB,EAAIhxH,EACpBixH,EAAwBD,EAAgBA,EACxCN,EAAe1wH,EAAIA,EACnB2wH,EAAUM,EAAwBD,EAClCJ,EAAU,EAAI5wH,EAAIixH,EAClBJ,EAAU,EAAIH,EAAeM,EAC7BF,EAAUJ,EAAe1wH,EAI7B,OAHAyvH,EAAI,GAAKx+I,EAAE,GAAK0/I,EAAU1kJ,EAAE,GAAK2kJ,EAAU19H,EAAE,GAAK29H,EAAUnkH,EAAE,GAAKokH,EACnErB,EAAI,GAAKx+I,EAAE,GAAK0/I,EAAU1kJ,EAAE,GAAK2kJ,EAAU19H,EAAE,GAAK29H,EAAUnkH,EAAE,GAAKokH,EACnErB,EAAI,GAAKx+I,EAAE,GAAK0/I,EAAU1kJ,EAAE,GAAK2kJ,EAAU19H,EAAE,GAAK29H,EAAUnkH,EAAE,GAAKokH,EAC5DrB,CACT,CASO,SAASz8H,EAAOy8H,EAAKl+J,GAC1BA,EAAQA,GAAS,EACjB,IAAIwa,EAAwB,EAApB,WAA0B/Z,KAAKC,GACnC2R,EAAwB,EAApB,WAA0B,EAC9BstJ,EAASl/J,KAAKopC,KAAK,EAAMx3B,EAAIA,GAAKrS,EAItC,OAHAk+J,EAAI,GAAKz9J,KAAK66F,IAAI9gF,GAAKmlJ,EACvBzB,EAAI,GAAKz9J,KAAK86F,IAAI/gF,GAAKmlJ,EACvBzB,EAAI,GAAK7rJ,EAAIrS,EACNk+J,CACT,CAWO,SAAS0B,EAAc1B,EAAKx+I,EAAGkqG,GACpC,IAAI9oH,EAAI4e,EAAE,GACN1e,EAAI0e,EAAE,GACNrN,EAAIqN,EAAE,GACN03E,EAAIwyB,EAAE,GAAK9oH,EAAI8oH,EAAE,GAAK5oH,EAAI4oH,EAAE,IAAMv3G,EAAIu3G,EAAE,IAK5C,OAJAxyB,EAAIA,GAAK,EACT8mE,EAAI,IAAMt0C,EAAE,GAAK9oH,EAAI8oH,EAAE,GAAK5oH,EAAI4oH,EAAE,GAAKv3G,EAAIu3G,EAAE,KAAOxyB,EACpD8mE,EAAI,IAAMt0C,EAAE,GAAK9oH,EAAI8oH,EAAE,GAAK5oH,EAAI4oH,EAAE,GAAKv3G,EAAIu3G,EAAE,KAAOxyB,EACpD8mE,EAAI,IAAMt0C,EAAE,GAAK9oH,EAAI8oH,EAAE,GAAK5oH,EAAI4oH,EAAE,IAAMv3G,EAAIu3G,EAAE,KAAOxyB,EAC9C8mE,CACT,CAUO,SAAS2B,EAAc3B,EAAKx+I,EAAGkqG,GACpC,IAAI9oH,EAAI4e,EAAE,GACN1e,EAAI0e,EAAE,GACNrN,EAAIqN,EAAE,GAIV,OAHAw+I,EAAI,GAAKp9J,EAAI8oH,EAAE,GAAK5oH,EAAI4oH,EAAE,GAAKv3G,EAAIu3G,EAAE,GACrCs0C,EAAI,GAAKp9J,EAAI8oH,EAAE,GAAK5oH,EAAI4oH,EAAE,GAAKv3G,EAAIu3G,EAAE,GACrCs0C,EAAI,GAAKp9J,EAAI8oH,EAAE,GAAK5oH,EAAI4oH,EAAE,GAAKv3G,EAAIu3G,EAAE,GAC9Bs0C,CACT,CAWO,SAAS4B,EAAc5B,EAAKx+I,EAAGqgJ,GAEpC,IAAIC,EAAKD,EAAE,GACPE,EAAKF,EAAE,GACPG,EAAKH,EAAE,GACPI,EAAKJ,EAAE,GACPj/J,EAAI4e,EAAE,GACN1e,EAAI0e,EAAE,GACNrN,EAAIqN,EAAE,GAGN0gJ,EAAMH,EAAK5tJ,EAAI6tJ,EAAKl/J,EACpBq/J,EAAMH,EAAKp/J,EAAIk/J,EAAK3tJ,EACpBiuJ,EAAMN,EAAKh/J,EAAIi/J,EAAKn/J,EAEpBy/J,EAAON,EAAKK,EAAMJ,EAAKG,EACvBG,EAAON,EAAKE,EAAMJ,EAAKM,EACvBG,EAAOT,EAAKK,EAAMJ,EAAKG,EAEvBM,EAAU,EAALP,EAYT,OAXAC,GAAOM,EACPL,GAAOK,EACPJ,GAAOI,EAEPH,GAAQ,EACRC,GAAQ,EACRC,GAAQ,EAERvC,EAAI,GAAKp9J,EAAIs/J,EAAMG,EACnBrC,EAAI,GAAKl9J,EAAIq/J,EAAMG,EACnBtC,EAAI,GAAK7rJ,EAAIiuJ,EAAMG,EACZvC,CACT,CAUO,SAASyC,EAAQzC,EAAKx+I,EAAGhF,EAAGq2F,GACjC,IAAI7+F,EAAI,GACJsI,EAAI,GAaR,OAXAtI,EAAE,GAAKwN,EAAE,GAAKhF,EAAE,GAChBxI,EAAE,GAAKwN,EAAE,GAAKhF,EAAE,GAChBxI,EAAE,GAAKwN,EAAE,GAAKhF,EAAE,GAEhBF,EAAE,GAAKtI,EAAE,GACTsI,EAAE,GAAKtI,EAAE,GAAKzR,KAAK66F,IAAIyV,GAAO7+F,EAAE,GAAKzR,KAAK86F,IAAIwV,GAC9Cv2F,EAAE,GAAKtI,EAAE,GAAKzR,KAAK86F,IAAIwV,GAAO7+F,EAAE,GAAKzR,KAAK66F,IAAIyV,GAE9CmtD,EAAI,GAAK1jJ,EAAE,GAAKE,EAAE,GAClBwjJ,EAAI,GAAK1jJ,EAAE,GAAKE,EAAE,GAClBwjJ,EAAI,GAAK1jJ,EAAE,GAAKE,EAAE,GACXwjJ,CACT,CAUO,SAAS0C,EAAQ1C,EAAKx+I,EAAGhF,EAAGq2F,GACjC,IAAI7+F,EAAI,GACJsI,EAAI,GAaR,OAXAtI,EAAE,GAAKwN,EAAE,GAAKhF,EAAE,GAChBxI,EAAE,GAAKwN,EAAE,GAAKhF,EAAE,GAChBxI,EAAE,GAAKwN,EAAE,GAAKhF,EAAE,GAEhBF,EAAE,GAAKtI,EAAE,GAAKzR,KAAK86F,IAAIwV,GAAO7+F,EAAE,GAAKzR,KAAK66F,IAAIyV,GAC9Cv2F,EAAE,GAAKtI,EAAE,GACTsI,EAAE,GAAKtI,EAAE,GAAKzR,KAAK66F,IAAIyV,GAAO7+F,EAAE,GAAKzR,KAAK86F,IAAIwV,GAE9CmtD,EAAI,GAAK1jJ,EAAE,GAAKE,EAAE,GAClBwjJ,EAAI,GAAK1jJ,EAAE,GAAKE,EAAE,GAClBwjJ,EAAI,GAAK1jJ,EAAE,GAAKE,EAAE,GACXwjJ,CACT,CAUO,SAASz6C,EAAQy6C,EAAKx+I,EAAGhF,EAAGq2F,GACjC,IAAI7+F,EAAI,GACJsI,EAAI,GAaR,OAXAtI,EAAE,GAAKwN,EAAE,GAAKhF,EAAE,GAChBxI,EAAE,GAAKwN,EAAE,GAAKhF,EAAE,GAChBxI,EAAE,GAAKwN,EAAE,GAAKhF,EAAE,GAEhBF,EAAE,GAAKtI,EAAE,GAAKzR,KAAK66F,IAAIyV,GAAO7+F,EAAE,GAAKzR,KAAK86F,IAAIwV,GAC9Cv2F,EAAE,GAAKtI,EAAE,GAAKzR,KAAK86F,IAAIwV,GAAO7+F,EAAE,GAAKzR,KAAK66F,IAAIyV,GAC9Cv2F,EAAE,GAAKtI,EAAE,GAETgsJ,EAAI,GAAK1jJ,EAAE,GAAKE,EAAE,GAClBwjJ,EAAI,GAAK1jJ,EAAE,GAAKE,EAAE,GAClBwjJ,EAAI,GAAK1jJ,EAAE,GAAKE,EAAE,GACXwjJ,CACT,CAQO,SAAS59J,EAAMof,EAAGhF,GACvB,IAAI02E,EAAK1xE,EAAE,GACP2xE,EAAK3xE,EAAE,GACP4xE,EAAK5xE,EAAE,GACPo/I,EAAKpkJ,EAAE,GACPqkJ,EAAKrkJ,EAAE,GACPskJ,EAAKtkJ,EAAE,GAGPmmJ,EAFOpgK,KAAKopC,KAAKunD,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GACnC7wF,KAAKopC,KAAKi1H,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GAE1C8B,EAASD,GAAOr2G,EAAI9qC,EAAGhF,GAAKmmJ,EAChC,OAAOpgK,KAAKiqD,KAAKjqD,KAAKa,IAAIb,KAAKkS,IAAImuJ,GAAS,GAAI,GAClD,CAQO,SAASC,EAAK7C,GAInB,OAHAA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,CACT,CAQO,SAAS75I,EAAI3E,GAClB,MAAO,QAAUA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,GACtD,CASO,SAASshJ,EAAYthJ,EAAGhF,GAC7B,OAAOgF,EAAE,KAAOhF,EAAE,IAAMgF,EAAE,KAAOhF,EAAE,IAAMgF,EAAE,KAAOhF,EAAE,EACtD,CASO,SAASqjI,EAAOr+H,EAAGhF,GACxB,IAAIumJ,EAAKvhJ,EAAE,GACP4kE,EAAK5kE,EAAE,GACP+kE,EAAK/kE,EAAE,GACPwhJ,EAAKxmJ,EAAE,GACP6pE,EAAK7pE,EAAE,GACPgqE,EAAKhqE,EAAE,GACX,OAAOja,KAAK6e,IAAI2hJ,EAAKC,IAAO,UAAmBzgK,KAAKkS,IAAI,EAAKlS,KAAK6e,IAAI2hJ,GAAKxgK,KAAK6e,IAAI4hJ,KAAQzgK,KAAK6e,IAAIglE,EAAKC,IAAO,UAAmB9jF,KAAKkS,IAAI,EAAKlS,KAAK6e,IAAIglE,GAAK7jF,KAAK6e,IAAIilE,KAAQ9jF,KAAK6e,IAAImlE,EAAKC,IAAO,UAAmBjkF,KAAKkS,IAAI,EAAKlS,KAAK6e,IAAImlE,GAAKhkF,KAAK6e,IAAIolE,GAChQ,CAMO,IAmDD+lE,EAnDKlxH,EAAM8kI,EAMN8C,EAAM7C,EAMN8C,EAAM7C,EAMN/9E,EAAOhhE,EAMP6hJ,EAAU5C,EAMVx/G,EAAM76C,EAMNk9J,EAAS5C,EAcTj6J,GACLgmJ,EAAMpnJ,IACH,SAAUqc,EAAG6hJ,EAAQzwJ,EAAQ2B,EAAOggH,EAAI+uC,GAC7C,IAAIt0J,EAAGu0J,EAgBP,IAdKF,IACHA,EAAS,GAGNzwJ,IACHA,EAAS,GAIT2wJ,EADEhvJ,EACEhS,KAAKa,IAAImR,EAAQ8uJ,EAASzwJ,EAAQ4O,EAAEtb,QAEpCsb,EAAEtb,OAGH8I,EAAI4D,EAAQ5D,EAAIu0J,EAAGv0J,GAAKq0J,EAC3B9W,EAAI,GAAK/qI,EAAExS,GACXu9I,EAAI,GAAK/qI,EAAExS,EAAI,GACfu9I,EAAI,GAAK/qI,EAAExS,EAAI,GACfulH,EAAGg4B,EAAKA,EAAK+W,GACb9hJ,EAAExS,GAAKu9I,EAAI,GACX/qI,EAAExS,EAAI,GAAKu9I,EAAI,GACf/qI,EAAExS,EAAI,GAAKu9I,EAAI,GAGjB,OAAO/qI,CACT,E,0EC9wBa,SAASgiJ,EAAS3vJ,GAC/B,IAAI4vJ,EAAUC,EAAU7oJ,EAiBxB,SAAS+sD,EAAKpmD,EAAG5e,EAAG+gK,EAAK,EAAGC,EAAKpiJ,EAAEtb,QACjC,GAAIy9J,EAAKC,EAAI,CACX,GAAuB,IAAnBH,EAAS7gK,EAAGA,GAAU,OAAOghK,EACjC,EAAG,CACD,MAAMC,EAAOF,EAAKC,IAAQ,EACtBF,EAASliJ,EAAEqiJ,GAAMjhK,GAAK,EAAG+gK,EAAKE,EAAM,EACnCD,EAAKC,CACZ,OAASF,EAAKC,EAChB,CACA,OAAOD,CACT,CAmBA,OAvCiB,IAAb9vJ,EAAE3N,QACJu9J,EAAW,IACXC,EAAW,CAACzmH,EAAGr6C,KAAM,OAAUiR,EAAEopC,GAAIr6C,GACrCiY,EAAQ,CAACoiC,EAAGr6C,IAAMiR,EAAEopC,GAAKr6C,IAEzB6gK,EAAW5vJ,IAAM,KAAaA,IAAM,IAAaA,EAAIgvJ,EACrDa,EAAW7vJ,EACXgH,EAAQhH,GAgCH,CAAC+zD,OAAM1rD,OALd,SAAgBsF,EAAG5e,EAAG+gK,EAAK,EAAGC,EAAKpiJ,EAAEtb,QACnC,MAAM8I,EAAI44D,EAAKpmD,EAAG5e,EAAG+gK,EAAIC,EAAK,GAC9B,OAAO50J,EAAI20J,GAAM9oJ,EAAM2G,EAAExS,EAAI,GAAIpM,IAAMiY,EAAM2G,EAAExS,GAAIpM,GAAKoM,EAAI,EAAIA,CAClE,EAEsBw7E,MAjBtB,SAAehpE,EAAG5e,EAAG+gK,EAAK,EAAGC,EAAKpiJ,EAAEtb,QAClC,GAAIy9J,EAAKC,EAAI,CACX,GAAuB,IAAnBH,EAAS7gK,EAAGA,GAAU,OAAOghK,EACjC,EAAG,CACD,MAAMC,EAAOF,EAAKC,IAAQ,EACtBF,EAASliJ,EAAEqiJ,GAAMjhK,IAAM,EAAG+gK,EAAKE,EAAM,EACpCD,EAAKC,CACZ,OAASF,EAAKC,EAChB,CACA,OAAOD,CACT,EAQF,CAEA,SAASd,IACP,OAAO,CACT,C,+DCrDe,SAASiB,IACtB,OAAO,OAAUr4C,UACnB,C,gDCJA,QAAe7oH,GAAK,IAAMA,C,+BCAX,WAAS4e,EAAGhF,GACzB,OAAOgF,GAAKA,EAAGhF,GAAKA,EAAG,SAAS+zB,GAC9B,OAAO/uB,GAAK,EAAI+uB,GAAK/zB,EAAI+zB,CAC3B,CACF,C,+CCJe,WAASwzH,EAAcjxI,GAEpC,IADA,IAAIkxI,EAAU,IAAIhgK,MAAM8uB,GACf9jB,EAAI,EAAGA,EAAI8jB,IAAK9jB,EAAGg1J,EAAQh1J,GAAK+0J,EAAa/0J,GAAK8jB,EAAI,IAC/D,OAAOkxI,CACT,C,+CCJe,WAASxiJ,EAAGhF,GACzB,OAAOgF,GAAKA,EAAGhF,GAAKA,EAAG,SAAS+zB,GAC9B,OAAOhuC,KAAKgmB,MAAM/G,GAAK,EAAI+uB,GAAK/zB,EAAI+zB,EACtC,CACF,C","sources":["webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/RenderingEngine/helpers/cpuFallback/drawImageSync.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/RenderingEngine/helpers/cpuFallback/rendering/calculateTransform.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/RenderingEngine/helpers/cpuFallback/rendering/getDefaultViewport.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/enums/GenerateImageType.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/Settings.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/loaders/imageLoader.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/FrameRange.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/PointsManager.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/ProgressiveIterator.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/RLEVoxelMap.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/actorCheck.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/applyPreset.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/autoLoad.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/buildMetadata.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/calculateSpacingBetweenImageIds.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/clamp.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/colormap.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/createLinearRGBTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/createSigmoidRGBTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/decimate.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/deepClone.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/fnv1aHash.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getClosestImageId.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getImageDataMetadata.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getImageSliceDataForVolumeViewport.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getScalingParameters.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getSliceRange.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getSpacingInNormalDirection.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getTargetVolumeAndSpacingInNormalDir.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportsWithVolumeId.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVoiFromSigmoidRGBTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeActorCorners.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeId.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeSliceRangeInfo.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeViewportScrollInfo.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/hasFloatScalingParameters.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/hasNaNValues.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/imageIdToURI.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/imageRetrieveMetadataProvider.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/eventListener/TargetEventListeners.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/eventListener/MultiTargetEventListenerManager.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/scaleRgbTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getMinMax.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getRuntimeId.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/calibratedPixelSpacingMetadataProvider.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isOpposite.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/indexWithinDimensions.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeViewportsContainingSameVolumes.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isPTPrescaledWithSUV.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/renderToCanvasGPU.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/renderToCanvasCPU.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/loadImageToCanvas.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/asArray.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/historyMemo/index.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/worldToImageCoords.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/imageToWorldCoords.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportsWithImageURI.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getClosestStackImageIndexForPoint.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getCurrentVolumeViewportSlice.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/spatialRegistrationMetadataProvider.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/calculateViewportsSpatialRegistration.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportImageCornersInWorld.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getImageLegacy.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isValidVolume.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isVideoTransferSyntax.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/convertStackToVolumeViewport.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/convertVolumeToStackViewport.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/roundNumber.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/convertToGrayscale.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportImageIds.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getRandomSampleFromArray.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/color.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/deepEqual.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/splitImageIdsBy4DTags.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getDynamicVolumeInfo.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/scaleArray.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/clip.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/scroll.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/jumpToSlice.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/createSubVolume.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeDirectionVectors.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/calculateNeighborhoodStats.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getPixelSpacingInformation.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/index.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportModality.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/invertRgbTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isEqual.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/logger.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/makeVolumeMetadata.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/planar.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/pointInShapeCallback.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/snapFocalPointToSlice.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/sortImageIdsAndGetSpacing.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/transferFunctionUtils.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/transformCanvasToIJK.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/transformIndexToWorld.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/transformWorldToIndex.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/updatePlaneRestriction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/updateVTKImageDataWithCornerstoneImage.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/windowLevel.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/cameraModifiedEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/imageSpacingCalibratedEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/annotationInterpolationEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/cameraResetEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createCameraPositionSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createPresentationViewSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createZoomPanSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createImageSliceSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createSlabThicknessSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/calibrateImageSpacing.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/events.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/playClip.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/rectangleROITool/isAxisAlignedRectangle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/stackPrefetch/stackPrefetch.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/stackPrefetch/stackContextPrefetch.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/dynamicVolume/generateImageFromTimeData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/polyData/utils.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/Colorbar.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/ViewportColorbar.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/windowlevel/extractWindowLevelRegionToolData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/pointInSurroundingSphereCallback.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/setAnnotationLabel.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/calculateFanShapeCorners.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/deriveFanGeometry.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/fanExtraction.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/segmentLargestUSOutlineFromBuffer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/generateConvexHullFromContour.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/Spline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/CubicSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/BSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/CardinalSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/CatmullRomSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/LinearSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/PanTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/TrackballRotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/VolumeCroppingTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/VolumeCroppingControlTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/WindowLevelTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/WindowLevelRegionTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/windowlevel/getLuminanceFromRegion.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/windowlevel/calculateMinMaxMean.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/StackScrollTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/PlanarRotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ZoomTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/MIPJumpToClickTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/CrosshairsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/MagnifyTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/AdvancedMagnifyTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ReferenceLinesTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/OverlayGridTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/SegmentationIntersectionTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/pointToString.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ReferenceCursors.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ScaleOverlayTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/SculptorTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/VolumeRotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LabelTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LengthTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/HeightTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ProbeTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/DragProbeTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/EllipticalROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/CircleROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ETDRSGridTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/SplineROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/SplineContourSegmentationTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LivewireContourTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LivewireContourSegmentationTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ArrowAnnotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/AngleTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/CobbAngleTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundDirectionalTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/UltrasoundPleuraBLineTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/KeyImageTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/AnnotationEraserTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RegionSegmentTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RegionSegmentPlusTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/WholeBodySegmentTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleScissorsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/CircleScissorsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SphereScissorsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/CircleROIStartEndThresholdTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/PaintFillTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/OrientationMarkerTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SegmentSelectTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SegmentBidirectionalTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SegmentLabelTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/LabelmapEditWithContour.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/VideoRedactionTool.js","webpack:///../../../node_modules/@kitware/vtk.js/Filters/General/ContourLoopExtraction.js","webpack:///../../../node_modules/@cornerstonejs/polymorphic-segmentation/dist/esm/workers/polySegConverters.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/constants/COLOR_LUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/getSvgDrawingHelper.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/draw.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawCircle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawEllipseByCoordinates.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawHandles.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLink.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLinkedTextBox.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawRect.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawHeight.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawFan.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawArrow.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawRedactionRect.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ChangeTypes.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Touch.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/imageChangeEventListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationRenderingEngine.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationStateManager.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationStyle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/activeSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/setActiveSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addColorLUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addSegmentationRepresentationsToViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/normalizeSegmentationInput.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addSegmentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationColor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/events/triggerSegmentationDataModified.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getActiveSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getNextColorLUTIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentationRepresentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentationRepresentationVisibility.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getViewportSegmentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/computeStackLabelmapFromVolume.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/computeVolumeLabelmapFromStack.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/internalAddRepresentationData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/internalAddSegmentationRepresentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeSegmentationRepresentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentLocking.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeColorLUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getStackSegmentationImageIdsForViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/updateLabelmapSegmentationImageReferences.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/getAnnotationsUIDMapFromSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getToolGroupForViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/svgNodeCache.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/BidirectionalTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/PlanarFreehandContourSegmentationTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/PlanarFreehandROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RectangleROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/BrushTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/LabelmapBaseTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillCircle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillRectangle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/annotationHydration.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/extend2DBoundingBoxInViewAxis.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/getBoundingBoxAroundShape.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/convertContourSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/findHandlePolylineIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/debounce.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/drawing/getTextBoxCoordsCanvas.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getCalibratedUnits.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getSphereBoundsInfo.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getViewportForAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/isObject.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/sphere/pointInSphere.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/SegmentStatsCalculator.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/floodFill.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getBrushToolInstances.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getHoveredContourSegmentationAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getSegmentIndexAtLabelmapBorder.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getSegmentIndexAtWorldPoint.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/growCutShader.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runGrowCut.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runGrowCutForBoundingBox.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runGrowCutForSphere.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runOneClickGrowCut.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/invalidateBrushCursor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/throttle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/touch/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForToolGroupIds.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewport/isViewportPreScaled.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/enums/ColorbarRangeTextPosition.js","webpack:///../../../node_modules/@kitware/vtk.js/Common/DataModel/DataSetAttributes/Constants.js","webpack:///../../../node_modules/@kitware/vtk.js/Common/DataModel/ImageData.js","webpack:///../../../node_modules/@kitware/vtk.js/Rendering/Core/ColorTransferFunction.js","webpack:///../../../node_modules/gl-matrix/esm/vec3.js","webpack:///../../../node_modules/d3-array/src/bisector.js","webpack:///../../../node_modules/d3-array/src/zip.js","webpack:///../../../node_modules/d3-interpolate/src/constant.js","webpack:///../../../node_modules/d3-interpolate/src/number.js","webpack:///../../../node_modules/d3-interpolate/src/quantize.js","webpack:///../../../node_modules/d3-interpolate/src/round.js"],"sourcesContent":["import now from './rendering/now';\nimport { renderColorImage } from './rendering/renderColorImage';\nimport { renderGrayscaleImage } from './rendering/renderGrayscaleImage';\nimport { renderPseudoColorImage } from './rendering/renderPseudoColorImage';\nexport default function (enabledElement, invalidated) {\n    const image = enabledElement.image;\n    if (!enabledElement.canvas || !enabledElement.image) {\n        return;\n    }\n    const start = now();\n    image.stats = {\n        lastGetPixelDataTime: -1.0,\n        lastStoredPixelDataToCanvasImageDataTime: -1.0,\n        lastPutImageDataTime: -1.0,\n        lastRenderTime: -1.0,\n        lastLutGenerateTime: -1.0,\n    };\n    if (image) {\n        let render = image.render;\n        if (!render) {\n            if (enabledElement.viewport.colormap) {\n                render = renderPseudoColorImage;\n            }\n            else if (image.color) {\n                render = renderColorImage;\n            }\n            else {\n                render = renderGrayscaleImage;\n            }\n        }\n        render(enabledElement, invalidated);\n    }\n    const renderTimeInMs = now() - start;\n    image.stats.lastRenderTime = renderTimeInMs;\n    enabledElement.invalid = false;\n    enabledElement.needsRedraw = false;\n}\n","import { Transform } from './transform';\nexport default function (enabledElement, scale) {\n    const transform = new Transform();\n    if (!enabledElement.viewport.displayedArea) {\n        return transform;\n    }\n    transform.translate(enabledElement.canvas.width / 2, enabledElement.canvas.height / 2);\n    const angle = enabledElement.viewport.rotation;\n    if (angle !== 0) {\n        transform.rotate((angle * Math.PI) / 180);\n    }\n    let widthScale = enabledElement.viewport.scale;\n    let heightScale = enabledElement.viewport.scale;\n    const width = enabledElement.viewport.displayedArea.brhc.x -\n        (enabledElement.viewport.displayedArea.tlhc.x - 1);\n    const height = enabledElement.viewport.displayedArea.brhc.y -\n        (enabledElement.viewport.displayedArea.tlhc.y - 1);\n    if (enabledElement.viewport.displayedArea.presentationSizeMode === 'NONE') {\n        if (enabledElement.image.rowPixelSpacing <\n            enabledElement.image.columnPixelSpacing) {\n            widthScale *=\n                enabledElement.image.columnPixelSpacing /\n                    enabledElement.image.rowPixelSpacing;\n        }\n        else if (enabledElement.image.columnPixelSpacing <\n            enabledElement.image.rowPixelSpacing) {\n            heightScale *=\n                enabledElement.image.rowPixelSpacing /\n                    enabledElement.image.columnPixelSpacing;\n        }\n    }\n    else {\n        widthScale = enabledElement.viewport.displayedArea.columnPixelSpacing;\n        heightScale = enabledElement.viewport.displayedArea.rowPixelSpacing;\n        if (enabledElement.viewport.displayedArea.presentationSizeMode ===\n            'SCALE TO FIT') {\n            const verticalScale = enabledElement.canvas.height / (height * heightScale);\n            const horizontalScale = enabledElement.canvas.width / (width * widthScale);\n            widthScale = heightScale = Math.min(horizontalScale, verticalScale);\n            if (enabledElement.viewport.displayedArea.rowPixelSpacing <\n                enabledElement.viewport.displayedArea.columnPixelSpacing) {\n                widthScale *=\n                    enabledElement.viewport.displayedArea.columnPixelSpacing /\n                        enabledElement.viewport.displayedArea.rowPixelSpacing;\n            }\n            else if (enabledElement.viewport.displayedArea.columnPixelSpacing <\n                enabledElement.viewport.displayedArea.rowPixelSpacing) {\n                heightScale *=\n                    enabledElement.viewport.displayedArea.rowPixelSpacing /\n                        enabledElement.viewport.displayedArea.columnPixelSpacing;\n            }\n        }\n    }\n    transform.scale(widthScale, heightScale);\n    if (angle !== 0) {\n        transform.rotate((-angle * Math.PI) / 180);\n    }\n    transform.translate(enabledElement.viewport.translation.x, enabledElement.viewport.translation.y);\n    if (angle !== 0) {\n        transform.rotate((angle * Math.PI) / 180);\n    }\n    if (scale !== undefined) {\n        transform.scale(scale, scale);\n    }\n    if (enabledElement.viewport.hflip) {\n        transform.scale(-1, 1);\n    }\n    if (enabledElement.viewport.vflip) {\n        transform.scale(1, -1);\n    }\n    transform.translate(-width / 2, -height / 2);\n    return transform;\n}\n","import createViewport from './createViewport';\nimport getImageFitScale from './getImageFitScale';\nexport default function (canvas, image, modality, colormap) {\n    if (canvas === undefined) {\n        throw new Error('getDefaultViewport: parameter canvas must not be undefined');\n    }\n    if (image === undefined) {\n        return createViewport();\n    }\n    const scale = getImageFitScale(canvas, image, 0).scaleFactor;\n    let voi;\n    if (modality === 'PT' && image.isPreScaled) {\n        voi = {\n            windowWidth: 5,\n            windowCenter: 2.5,\n        };\n    }\n    else if (image.windowWidth !== undefined &&\n        image.windowCenter !== undefined) {\n        voi = {\n            windowWidth: Array.isArray(image.windowWidth)\n                ? image.windowWidth[0]\n                : image.windowWidth,\n            windowCenter: Array.isArray(image.windowCenter)\n                ? image.windowCenter[0]\n                : image.windowCenter,\n        };\n    }\n    return {\n        scale,\n        translation: {\n            x: 0,\n            y: 0,\n        },\n        voi,\n        invert: image.invert,\n        pixelReplication: false,\n        rotation: 0,\n        hflip: false,\n        vflip: false,\n        modalityLUT: image.modalityLUT,\n        modality,\n        voiLUT: image.voiLUT,\n        colormap: colormap !== undefined ? colormap : image.colormap,\n        displayedArea: {\n            tlhc: {\n                x: 1,\n                y: 1,\n            },\n            brhc: {\n                x: image.columns,\n                y: image.rows,\n            },\n            rowPixelSpacing: image.rowPixelSpacing === undefined ? 1 : image.rowPixelSpacing,\n            columnPixelSpacing: image.columnPixelSpacing === undefined ? 1 : image.columnPixelSpacing,\n            presentationSizeMode: 'NONE',\n        },\n    };\n}\n","export var GenerateImageType;\n(function (GenerateImageType) {\n    GenerateImageType[\"SUM\"] = \"SUM\";\n    GenerateImageType[\"SUBTRACT\"] = \"SUBTRACT\";\n    GenerateImageType[\"AVERAGE\"] = \"AVERAGE\";\n})(GenerateImageType || (GenerateImageType = {}));\n","const DEFAULT_SETTINGS = Symbol('DefaultSettings');\nconst RUNTIME_SETTINGS = Symbol('RuntimeSettings');\nconst OBJECT_SETTINGS_MAP = Symbol('ObjectSettingsMap');\nconst DICTIONARY = Symbol('Dictionary');\nexport default class Settings {\n    constructor(base) {\n        const dictionary = Object.create((base instanceof Settings && DICTIONARY in base\n            ? base[DICTIONARY]\n            : null));\n        Object.seal(Object.defineProperty(this, DICTIONARY, {\n            value: dictionary,\n        }));\n    }\n    set(key, value) {\n        return set(this[DICTIONARY], key, value, null);\n    }\n    get(key) {\n        return get(this[DICTIONARY], key);\n    }\n    unset(key) {\n        return unset(this[DICTIONARY], key + '');\n    }\n    forEach(callback) {\n        iterate(this[DICTIONARY], callback);\n    }\n    extend() {\n        return new Settings(this);\n    }\n    import(root) {\n        if (isPlainObject(root)) {\n            Object.keys(root).forEach((key) => {\n                set(this[DICTIONARY], key, root[key], null);\n            });\n        }\n    }\n    dump() {\n        const context = {};\n        iterate(this[DICTIONARY], (key, value) => {\n            if (typeof value !== 'undefined') {\n                deepSet(context, key, value);\n            }\n        });\n        return context;\n    }\n    static assert(subject) {\n        return subject instanceof Settings\n            ? subject\n            : Settings.getRuntimeSettings();\n    }\n    static getDefaultSettings(subfield = null) {\n        let defaultSettings = Settings[DEFAULT_SETTINGS];\n        if (!(defaultSettings instanceof Settings)) {\n            defaultSettings = new Settings();\n            Settings[DEFAULT_SETTINGS] = defaultSettings;\n        }\n        if (subfield) {\n            const settingObj = {};\n            defaultSettings.forEach((name) => {\n                if (name.startsWith(subfield)) {\n                    const setting = name.split(`${subfield}.`)[1];\n                    settingObj[setting] = defaultSettings.get(name);\n                }\n            });\n            return settingObj;\n        }\n        return defaultSettings;\n    }\n    static getRuntimeSettings() {\n        let runtimeSettings = Settings[RUNTIME_SETTINGS];\n        if (!(runtimeSettings instanceof Settings)) {\n            runtimeSettings = new Settings(Settings.getDefaultSettings());\n            Settings[RUNTIME_SETTINGS] = runtimeSettings;\n        }\n        return runtimeSettings;\n    }\n    static getObjectSettings(subject, from) {\n        let settings = null;\n        if (subject instanceof Settings) {\n            settings = subject;\n        }\n        else if (typeof subject === 'object' && subject !== null) {\n            let objectSettingsMap = Settings[OBJECT_SETTINGS_MAP];\n            if (!(objectSettingsMap instanceof WeakMap)) {\n                objectSettingsMap = new WeakMap();\n                Settings[OBJECT_SETTINGS_MAP] = objectSettingsMap;\n            }\n            settings = objectSettingsMap.get(subject);\n            if (!(settings instanceof Settings)) {\n                settings = new Settings(Settings.assert(Settings.getObjectSettings(from)));\n                objectSettingsMap.set(subject, settings);\n            }\n        }\n        return settings;\n    }\n    static extendRuntimeSettings() {\n        return Settings.getRuntimeSettings().extend();\n    }\n}\nfunction unset(dictionary, name) {\n    if (name.endsWith('.')) {\n        let deleteCount = 0;\n        const namespace = name;\n        const base = namespace.slice(0, -1);\n        const deleteAll = base.length === 0;\n        for (const key in dictionary) {\n            if (Object.prototype.hasOwnProperty.call(dictionary, key) &&\n                (deleteAll || key.startsWith(namespace) || key === base)) {\n                delete dictionary[key];\n                ++deleteCount;\n            }\n        }\n        return deleteCount > 0;\n    }\n    return delete dictionary[name];\n}\nfunction iterate(dictionary, callback) {\n    for (const key in dictionary) {\n        callback(key, dictionary[key]);\n    }\n}\nfunction setAll(dictionary, prefix, record, references) {\n    let failCount;\n    if (references.has(record)) {\n        return set(dictionary, prefix, null, references);\n    }\n    references.add(record);\n    failCount = 0;\n    for (const field in record) {\n        if (Object.prototype.hasOwnProperty.call(record, field)) {\n            const key = field.length === 0 ? prefix : `${prefix}.${field}`;\n            if (!set(dictionary, key, record[field], references)) {\n                ++failCount;\n            }\n        }\n    }\n    references.delete(record);\n    return failCount === 0;\n}\nfunction set(dictionary, key, value, references) {\n    if (isValidKey(key)) {\n        if (isPlainObject(value)) {\n            return setAll(dictionary, key, value, references instanceof WeakSet ? references : new WeakSet());\n        }\n        dictionary[key] = value;\n        return true;\n    }\n    return false;\n}\nfunction get(dictionary, key) {\n    return dictionary[key];\n}\nfunction isValidKey(key) {\n    let last, current, previous;\n    if (typeof key !== 'string' || (last = key.length - 1) < 0) {\n        return false;\n    }\n    previous = -1;\n    while ((current = key.indexOf('.', previous + 1)) >= 0) {\n        if (current - previous < 2 || current === last) {\n            return false;\n        }\n        previous = current;\n    }\n    return true;\n}\nfunction isPlainObject(subject) {\n    if (typeof subject === 'object' && subject !== null) {\n        const prototype = Object.getPrototypeOf(subject);\n        if (prototype === Object.prototype || prototype === null) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction deepSet(context, key, value) {\n    const separator = key.indexOf('.');\n    if (separator >= 0) {\n        const subKey = key.slice(0, separator);\n        let subContext = context[subKey];\n        if (typeof subContext !== 'object' || subContext === null) {\n            const subContextValue = subContext;\n            subContext = {};\n            if (typeof subContextValue !== 'undefined') {\n                subContext[''] = subContextValue;\n            }\n            context[subKey] = subContext;\n        }\n        deepSet(subContext, key.slice(separator + 1, key.length), value);\n    }\n    else {\n        context[key] = value;\n    }\n}\nSettings.getDefaultSettings().set('useCursors', true);\n","import cache from '../cache/cache';\nimport Events from '../enums/Events';\nimport eventTarget from '../eventTarget';\nimport genericMetadataProvider from '../utilities/genericMetadataProvider';\nimport { getBufferConfiguration } from '../utilities/getBufferConfiguration';\nimport triggerEvent from '../utilities/triggerEvent';\nimport uuidv4 from '../utilities/uuidv4';\nimport VoxelManager from '../utilities/VoxelManager';\nimport imageLoadPoolManager from '../requestPool/imageLoadPoolManager';\nimport * as metaData from '../metaData';\nimport VoxelManagerEnum from '../enums/VoxelManagerEnum';\nconst imageLoaders = {};\nlet unknownImageLoader;\nfunction loadImageFromImageLoader(imageId, options) {\n    const cachedImageLoadObject = cache.getImageLoadObject(imageId);\n    if (cachedImageLoadObject) {\n        handleImageLoadPromise(cachedImageLoadObject.promise, imageId);\n        return cachedImageLoadObject;\n    }\n    const scheme = imageId.split(':')[0];\n    const loader = imageLoaders[scheme] || unknownImageLoader;\n    if (!loader) {\n        throw new Error(`loadImageFromImageLoader: No image loader found for scheme '${scheme}'`);\n    }\n    const imageLoadObject = loader(imageId, options);\n    handleImageLoadPromise(imageLoadObject.promise, imageId);\n    return imageLoadObject;\n}\nfunction handleImageLoadPromise(imagePromise, imageId) {\n    Promise.resolve(imagePromise)\n        .then((image) => {\n        ensureVoxelManager(image);\n        triggerEvent(eventTarget, Events.IMAGE_LOADED, { image });\n    })\n        .catch((error) => {\n        const errorDetails = {\n            imageId,\n            error,\n        };\n        triggerEvent(eventTarget, Events.IMAGE_LOAD_FAILED, errorDetails);\n    });\n}\nfunction ensureVoxelManager(image) {\n    if (!image.voxelManager) {\n        const { width, height, numberOfComponents } = image;\n        const voxelManager = VoxelManager.createImageVoxelManager({\n            scalarData: image.getPixelData(),\n            width,\n            height,\n            numberOfComponents,\n        });\n        image.voxelManager = voxelManager;\n        image.getPixelData = () => voxelManager.getScalarData();\n        delete image.imageFrame.pixelData;\n    }\n}\nexport function loadImage(imageId, options = { priority: 0, requestType: 'prefetch' }) {\n    if (imageId === undefined) {\n        throw new Error('loadImage: parameter imageId must not be undefined');\n    }\n    return loadImageFromImageLoader(imageId, options).promise;\n}\nexport function loadAndCacheImage(imageId, options = { priority: 0, requestType: 'prefetch' }) {\n    if (imageId === undefined) {\n        throw new Error('loadAndCacheImage: parameter imageId must not be undefined');\n    }\n    const imageLoadObject = loadImageFromImageLoader(imageId, options);\n    if (!cache.getImageLoadObject(imageId)) {\n        cache.putImageLoadObject(imageId, imageLoadObject);\n    }\n    return imageLoadObject.promise;\n}\nexport function loadAndCacheImages(imageIds, options = { priority: 0, requestType: 'prefetch' }) {\n    if (!imageIds || imageIds.length === 0) {\n        throw new Error('loadAndCacheImages: parameter imageIds must be list of image Ids');\n    }\n    const allPromises = imageIds.map((imageId) => {\n        return loadAndCacheImage(imageId, options);\n    });\n    return allPromises;\n}\nexport function createAndCacheDerivedImage(referencedImageId, options = {}) {\n    if (referencedImageId === undefined) {\n        throw new Error('createAndCacheDerivedImage: parameter imageId must not be undefined');\n    }\n    if (options.imageId === undefined) {\n        options.imageId = `derived:${uuidv4()}`;\n    }\n    const { imageId, skipCreateBuffer, onCacheAdd, voxelRepresentation } = options;\n    const imagePlaneModule = metaData.get('imagePlaneModule', referencedImageId);\n    const length = imagePlaneModule.rows * imagePlaneModule.columns;\n    const { TypedArrayConstructor } = getBufferConfiguration(options.targetBuffer?.type, length);\n    const imageScalarData = new TypedArrayConstructor(skipCreateBuffer ? 1 : length);\n    const derivedImageId = imageId;\n    const referencedImagePlaneMetadata = metaData.get('imagePlaneModule', referencedImageId);\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'imagePlaneModule',\n        metadata: referencedImagePlaneMetadata,\n    });\n    const referencedImageGeneralSeriesMetadata = metaData.get('generalSeriesModule', referencedImageId);\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'generalSeriesModule',\n        metadata: referencedImageGeneralSeriesMetadata,\n    });\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'generalImageModule',\n        metadata: {\n            instanceNumber: options.instanceNumber,\n        },\n    });\n    const imagePixelModule = metaData.get('imagePixelModule', referencedImageId);\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'imagePixelModule',\n        metadata: {\n            ...imagePixelModule,\n            bitsAllocated: 8,\n            bitsStored: 8,\n            highBit: 7,\n            samplesPerPixel: 1,\n            pixelRepresentation: 0,\n        },\n    });\n    const localImage = createAndCacheLocalImage(imageId, {\n        scalarData: imageScalarData,\n        onCacheAdd,\n        skipCreateBuffer,\n        targetBuffer: {\n            type: imageScalarData.constructor.name,\n        },\n        voxelRepresentation,\n        dimensions: [imagePlaneModule.columns, imagePlaneModule.rows],\n        spacing: [\n            imagePlaneModule.columnPixelSpacing,\n            imagePlaneModule.rowPixelSpacing,\n        ],\n        origin: imagePlaneModule.imagePositionPatient,\n        direction: imagePlaneModule.imageOrientationPatient,\n        frameOfReferenceUID: imagePlaneModule.frameOfReferenceUID,\n        referencedImageId: referencedImageId,\n    });\n    localImage.referencedImageId = referencedImageId;\n    if (!cache.getImageLoadObject(imageId)) {\n        cache.putImageSync(imageId, localImage);\n    }\n    return localImage;\n}\nexport function createAndCacheDerivedImages(referencedImageIds, options = {}) {\n    if (referencedImageIds.length === 0) {\n        throw new Error('createAndCacheDerivedImages: parameter imageIds must be list of image Ids');\n    }\n    const derivedImageIds = [];\n    const images = referencedImageIds.map((referencedImageId, index) => {\n        const newOptions = {\n            imageId: options?.getDerivedImageId?.(referencedImageId) ||\n                `derived:${uuidv4()}`,\n            ...options,\n        };\n        derivedImageIds.push(newOptions.imageId);\n        return createAndCacheDerivedImage(referencedImageId, {\n            ...newOptions,\n            instanceNumber: index + 1,\n        });\n    });\n    return images;\n}\nexport function createAndCacheLocalImage(imageId, options) {\n    const { scalarData, origin, direction, targetBuffer, skipCreateBuffer, onCacheAdd, frameOfReferenceUID, voxelRepresentation, referencedImageId, } = options;\n    const dimensions = options.dimensions;\n    const spacing = options.spacing;\n    if (!dimensions || !spacing) {\n        throw new Error('createAndCacheLocalImage: dimensions and spacing are required');\n    }\n    const width = dimensions[0];\n    const height = dimensions[1];\n    const columnPixelSpacing = spacing[0];\n    const rowPixelSpacing = spacing[1];\n    const imagePlaneModule = {\n        frameOfReferenceUID,\n        rows: height,\n        columns: width,\n        imageOrientationPatient: direction ?? [1, 0, 0, 0, 1, 0],\n        rowCosines: direction ? direction.slice(0, 3) : [1, 0, 0],\n        columnCosines: direction ? direction.slice(3, 6) : [0, 1, 0],\n        imagePositionPatient: origin ?? [0, 0, 0],\n        pixelSpacing: [rowPixelSpacing, columnPixelSpacing],\n        rowPixelSpacing: rowPixelSpacing,\n        columnPixelSpacing: columnPixelSpacing,\n    };\n    const length = width * height;\n    const numberOfComponents = scalarData.length / length;\n    let scalarDataToUse;\n    if (scalarData) {\n        if (!(scalarData instanceof Uint8Array ||\n            scalarData instanceof Float32Array ||\n            scalarData instanceof Uint16Array ||\n            scalarData instanceof Int16Array)) {\n            throw new Error('createAndCacheLocalImage: scalarData must be of type Uint8Array, Uint16Array, Int16Array or Float32Array');\n        }\n        scalarDataToUse = scalarData;\n    }\n    else if (!skipCreateBuffer) {\n        const { TypedArrayConstructor } = getBufferConfiguration(targetBuffer?.type, length);\n        const imageScalarData = new TypedArrayConstructor(length);\n        scalarDataToUse = imageScalarData;\n    }\n    let bitsAllocated, bitsStored, highBit;\n    if (scalarDataToUse instanceof Uint8Array) {\n        bitsAllocated = 8;\n        bitsStored = 8;\n        highBit = 7;\n    }\n    else if (scalarDataToUse instanceof Uint16Array) {\n        bitsAllocated = 16;\n        bitsStored = 16;\n        highBit = 15;\n    }\n    else if (scalarDataToUse instanceof Int16Array) {\n        bitsAllocated = 16;\n        bitsStored = 16;\n        highBit = 15;\n    }\n    else if (scalarDataToUse instanceof Float32Array) {\n        bitsAllocated = 32;\n        bitsStored = 32;\n        highBit = 31;\n    }\n    else {\n        throw new Error('Unsupported scalarData type');\n    }\n    const imagePixelModule = {\n        samplesPerPixel: 1,\n        photometricInterpretation: scalarDataToUse.length > dimensions[0] * dimensions[1]\n            ? 'RGB'\n            : 'MONOCHROME2',\n        rows: height,\n        columns: width,\n        bitsAllocated,\n        bitsStored,\n        highBit,\n    };\n    const metadata = {\n        imagePlaneModule,\n        imagePixelModule,\n    };\n    ['imagePlaneModule', 'imagePixelModule'].forEach((type) => {\n        genericMetadataProvider.add(imageId, {\n            type,\n            metadata: metadata[type] || {},\n        });\n    });\n    const id = imageId;\n    const voxelManager = (voxelRepresentation === VoxelManagerEnum.RLE &&\n        VoxelManager.createRLEImageVoxelManager({ dimensions, id })) ||\n        VoxelManager.createImageVoxelManager({\n            height,\n            width,\n            numberOfComponents,\n            scalarData: scalarDataToUse,\n            id,\n        });\n    let minPixelValue = scalarDataToUse[0];\n    let maxPixelValue = scalarDataToUse[0];\n    for (let i = 1; i < scalarDataToUse.length; i++) {\n        if (scalarDataToUse[i] < minPixelValue) {\n            minPixelValue = scalarDataToUse[i];\n        }\n        if (scalarDataToUse[i] > maxPixelValue) {\n            maxPixelValue = scalarDataToUse[i];\n        }\n    }\n    const image = {\n        imageId: imageId,\n        intercept: 0,\n        windowCenter: 0,\n        windowWidth: 0,\n        color: imagePixelModule.photometricInterpretation === 'RGB',\n        numberOfComponents: imagePixelModule.samplesPerPixel,\n        dataType: targetBuffer?.type,\n        slope: 1,\n        minPixelValue,\n        maxPixelValue,\n        rows: imagePixelModule.rows,\n        columns: imagePixelModule.columns,\n        getCanvas: undefined,\n        height: imagePixelModule.rows,\n        width: imagePixelModule.columns,\n        rgba: undefined,\n        columnPixelSpacing: imagePlaneModule.columnPixelSpacing,\n        rowPixelSpacing: imagePlaneModule.rowPixelSpacing,\n        FrameOfReferenceUID: imagePlaneModule.frameOfReferenceUID,\n        invert: false,\n        getPixelData: () => voxelManager.getScalarData(),\n        voxelManager,\n        sizeInBytes: scalarData.byteLength,\n        referencedImageId,\n    };\n    onCacheAdd?.(image);\n    cache.putImageSync(image.imageId, image);\n    return image;\n}\nexport function cancelLoadImage(imageId) {\n    const filterFunction = ({ additionalDetails }) => {\n        if (additionalDetails.imageId) {\n            return additionalDetails.imageId !== imageId;\n        }\n        return true;\n    };\n    imageLoadPoolManager.filterRequests(filterFunction);\n    const imageLoadObject = cache.getImageLoadObject(imageId);\n    if (imageLoadObject) {\n        imageLoadObject.cancelFn();\n    }\n}\nexport function cancelLoadImages(imageIds) {\n    imageIds.forEach((imageId) => {\n        cancelLoadImage(imageId);\n    });\n}\nexport function cancelLoadAll() {\n    const requestPool = imageLoadPoolManager.getRequestPool();\n    Object.keys(requestPool).forEach((type) => {\n        const requests = requestPool[type];\n        Object.keys(requests).forEach((priority) => {\n            const requestDetails = requests[priority].pop();\n            if (!requestDetails) {\n                return;\n            }\n            const additionalDetails = requestDetails.additionalDetails;\n            const { imageId, volumeId } = additionalDetails;\n            let loadObject;\n            if (imageId) {\n                loadObject = cache.getImageLoadObject(imageId);\n            }\n            else if (volumeId) {\n                loadObject = cache.getVolumeLoadObject(volumeId);\n            }\n            if (loadObject) {\n                loadObject.cancel();\n            }\n        });\n        imageLoadPoolManager.clearRequestStack(type);\n    });\n}\nexport function registerImageLoader(scheme, imageLoader) {\n    imageLoaders[scheme] = imageLoader;\n}\nexport function registerUnknownImageLoader(imageLoader) {\n    const oldImageLoader = unknownImageLoader;\n    unknownImageLoader = imageLoader;\n    return oldImageLoader;\n}\nexport function unregisterAllImageLoaders() {\n    Object.keys(imageLoaders).forEach((imageLoader) => delete imageLoaders[imageLoader]);\n    unknownImageLoader = undefined;\n}\nexport function createAndCacheDerivedLabelmapImages(referencedImageIds, options = {}) {\n    return createAndCacheDerivedImages(referencedImageIds, {\n        ...options,\n        targetBuffer: { type: 'Uint8Array' },\n    });\n}\nexport function createAndCacheDerivedLabelmapImage(referencedImageId, options = {}) {\n    return createAndCacheDerivedImage(referencedImageId, {\n        ...options,\n        targetBuffer: { type: 'Uint8Array' },\n    });\n}\n","export default class FrameRange {\n    static { this.frameRangeExtractor = /(\\/frames\\/|[&?]frameNumber=)([^/&?]*)/i; }\n    static imageIdToFrames(imageId) {\n        const match = imageId.match(this.frameRangeExtractor);\n        if (!match || !match[2]) {\n            return null;\n        }\n        const range = match[2].split('-').map((it) => Number(it));\n        if (range.length === 1) {\n            return range[0];\n        }\n        return range;\n    }\n    static imageIdToFrameEnd(imageId) {\n        const range = this.imageIdToFrames(imageId);\n        return Array.isArray(range) ? range[1] : range;\n    }\n    static imageIdToFrameStart(imageId) {\n        const range = this.imageIdToFrames(imageId);\n        return Array.isArray(range) ? range[0] : range;\n    }\n    static framesToString(range) {\n        if (Array.isArray(range)) {\n            return `${range[0]}-${range[1]}`;\n        }\n        return String(range);\n    }\n    static framesToImageId(imageId, range) {\n        const match = imageId.match(this.frameRangeExtractor);\n        if (!match || !match[2]) {\n            return null;\n        }\n        const newRangeString = this.framesToString(range);\n        return imageId.replace(this.frameRangeExtractor, `${match[1]}${newRangeString}`);\n    }\n}\n","export default class PointsManager {\n    constructor(configuration = {}) {\n        this._dimensions = 3;\n        this._length = 0;\n        this._byteSize = 4;\n        this.growSize = 128;\n        const { initialSize = 1024, dimensions = 3, growSize = 128, } = configuration;\n        const itemLength = initialSize * dimensions;\n        this.growSize = growSize;\n        this.array = new ArrayBuffer(itemLength * this._byteSize);\n        this.data = new Float32Array(this.array);\n        this._dimensions = dimensions;\n    }\n    forEach(func) {\n        for (let i = 0; i < this._length; i++) {\n            func(this.getPoint(i), i);\n        }\n    }\n    get length() {\n        return this._length;\n    }\n    get dimensions() {\n        return this._dimensions;\n    }\n    get dimensionLength() {\n        return this._length * this._dimensions;\n    }\n    getPoint(index) {\n        if (index < 0) {\n            index += this._length;\n        }\n        if (index < 0 || index >= this._length) {\n            return;\n        }\n        const offset = this._dimensions * index;\n        return this.data.subarray(offset, offset + this._dimensions);\n    }\n    getPointArray(index) {\n        const array = [];\n        if (index < 0) {\n            index += this._length;\n        }\n        if (index < 0 || index >= this._length) {\n            return;\n        }\n        const offset = this._dimensions * index;\n        for (let i = 0; i < this._dimensions; i++) {\n            array.push(this.data[i + offset]);\n        }\n        return array;\n    }\n    grow(additionalSize = 1, growSize = this.growSize) {\n        if (this.dimensionLength + additionalSize * this._dimensions <=\n            this.data.length) {\n            return;\n        }\n        const newSize = this.data.length + growSize;\n        const newArray = new ArrayBuffer(newSize * this._dimensions * this._byteSize);\n        const newData = new Float32Array(newArray);\n        newData.set(this.data);\n        this.data = newData;\n        this.array = newArray;\n    }\n    reverse() {\n        const midLength = Math.floor(this._length / 2);\n        for (let i = 0; i < midLength; i++) {\n            const indexStart = i * this._dimensions;\n            const indexEnd = (this._length - 1 - i) * this._dimensions;\n            for (let dimension = 0; dimension < this._dimensions; dimension++) {\n                const valueStart = this.data[indexStart + dimension];\n                this.data[indexStart + dimension] = this.data[indexEnd + dimension];\n                this.data[indexEnd + dimension] = valueStart;\n            }\n        }\n    }\n    getTypedArray() {\n        return this.data;\n    }\n    push(point) {\n        this.grow(1);\n        const offset = this.length * this._dimensions;\n        for (let i = 0; i < this._dimensions; i++) {\n            this.data[i + offset] = point[i];\n        }\n        this._length++;\n    }\n    map(f) {\n        const mapData = [];\n        for (let i = 0; i < this._length; i++) {\n            mapData.push(f(this.getPoint(i), i));\n        }\n        return mapData;\n    }\n    get points() {\n        return this.map((p) => p);\n    }\n    toXYZ() {\n        const xyz = { x: [], y: [] };\n        if (this._dimensions >= 3) {\n            xyz.z = [];\n        }\n        const { x, y, z } = xyz;\n        this.forEach((p) => {\n            x.push(p[0]);\n            y.push(p[1]);\n            if (z) {\n                z.push(p[2]);\n            }\n        });\n        return xyz;\n    }\n    static fromXYZ({ x, y, z }) {\n        const array = PointsManager.create3(x.length);\n        let offset = 0;\n        for (let i = 0; i < x.length; i++) {\n            array.data[offset++] = x[i];\n            array.data[offset++] = y[i];\n            array.data[offset++] = z ? z[i] : 0;\n        }\n        array._length = x.length;\n        return array;\n    }\n    subselect(count = 10, offset = 0) {\n        const selected = new PointsManager({\n            initialSize: count,\n            dimensions: this._dimensions,\n        });\n        for (let i = 0; i < count; i++) {\n            const index = (offset + Math.floor((this.length * i) / count)) % this.length;\n            selected.push(this.getPoint(index));\n        }\n        return selected;\n    }\n    static create3(initialSize = 128, points) {\n        initialSize = Math.max(initialSize, points?.length || 0);\n        const newPoints = new PointsManager({ initialSize, dimensions: 3 });\n        if (points) {\n            points.forEach((point) => newPoints.push(point));\n        }\n        return newPoints;\n    }\n    static create2(initialSize = 128) {\n        return new PointsManager({ initialSize, dimensions: 2 });\n    }\n}\n","export class PromiseIterator extends Promise {\n}\nexport default class ProgressiveIterator {\n    constructor(name) {\n        this.name = name || 'unknown';\n    }\n    static as(promise) {\n        if (promise.iterator) {\n            return promise.iterator;\n        }\n        const iterator = new ProgressiveIterator('as iterator');\n        promise.then((v) => {\n            try {\n                iterator.add(v, true);\n            }\n            catch (e) {\n                iterator.reject(e);\n            }\n        }, (reason) => {\n            iterator.reject(reason);\n        });\n        return iterator;\n    }\n    add(x, done = false) {\n        this.nextValue = x;\n        this.done ||= done;\n        if (this.waiting) {\n            this.waiting.resolve(x);\n            this.waiting = undefined;\n        }\n    }\n    resolve() {\n        this.done = true;\n        if (this.waiting) {\n            this.waiting.resolve(this.nextValue);\n            this.waiting = undefined;\n        }\n    }\n    reject(reason) {\n        this.rejectReason = reason;\n        this.waiting?.reject(reason);\n    }\n    getRecent() {\n        if (this.rejectReason) {\n            throw this.rejectReason;\n        }\n        return this.nextValue;\n    }\n    async *[Symbol.asyncIterator]() {\n        while (!this.done) {\n            if (this.rejectReason) {\n                throw this.rejectReason;\n            }\n            if (this.nextValue !== undefined) {\n                yield this.nextValue;\n                if (this.done) {\n                    break;\n                }\n            }\n            if (!this.waiting) {\n                this.waiting = {};\n                this.waiting.promise = new Promise((resolve, reject) => {\n                    this.waiting.resolve = resolve;\n                    this.waiting.reject = reject;\n                });\n            }\n            await this.waiting.promise;\n        }\n        yield this.nextValue;\n    }\n    async forEach(callback, errorCallback) {\n        let index = 0;\n        try {\n            for await (const value of this) {\n                const { done } = this;\n                try {\n                    await callback(value, done, index);\n                    index++;\n                }\n                catch (e) {\n                    if (!done) {\n                        console.warn('Caught exception in intermediate value', e);\n                        continue;\n                    }\n                    if (errorCallback) {\n                        errorCallback(e, done);\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            }\n        }\n        catch (e) {\n            if (errorCallback) {\n                errorCallback(e, true);\n            }\n            else {\n                throw e;\n            }\n        }\n    }\n    generate(processFunction, errorCallback) {\n        return processFunction(this, this.reject.bind(this)).then(() => {\n            if (!this.done) {\n                this.resolve();\n            }\n        }, (reason) => {\n            this.reject(reason);\n            if (errorCallback) {\n                errorCallback(reason);\n            }\n            else {\n                console.warn(\"Couldn't process because\", reason);\n            }\n        });\n    }\n    async nextPromise() {\n        for await (const i of this) {\n            if (i) {\n                return i;\n            }\n        }\n        return this.nextValue;\n    }\n    async donePromise() {\n        for await (const i of this) {\n        }\n        return this.nextValue;\n    }\n    getNextPromise() {\n        const promise = this.nextPromise();\n        promise.iterator = this;\n        return promise;\n    }\n    getDonePromise() {\n        const promise = this.donePromise();\n        promise.iterator = this;\n        return promise;\n    }\n}\n","const ADJACENT_ALL = [\n    [0, -1, 0],\n    [0, 1, 0],\n    [0, 0, -1],\n    [0, 0, 1],\n];\nconst ADJACENT_SINGLE_PLANE = [\n    [0, -1, 0],\n    [0, 1, 0],\n];\nconst ADJACENT_IN = [\n    [0, -1, 0],\n    [0, 1, 0],\n    [0, 0, -1],\n];\nconst ADJACENT_OUT = [\n    [0, -1, 0],\n    [0, 1, 0],\n    [0, 0, 1],\n];\nexport default class RLEVoxelMap {\n    static copyMap(destination, source) {\n        for (const [index, row] of source.rows) {\n            destination.rows.set(index, structuredClone(row));\n        }\n    }\n    constructor(width, height, depth = 1) {\n        this.rows = new Map();\n        this.height = 1;\n        this.width = 1;\n        this.depth = 1;\n        this.jMultiple = 1;\n        this.kMultiple = 1;\n        this.numComps = 1;\n        this.pixelDataConstructor = Uint8Array;\n        this.updateScalarData = function (scalarData) {\n            scalarData.fill(0);\n            const callback = (index, rle, row) => {\n                const { start, end, value } = rle;\n                for (let i = start; i < end; i++) {\n                    scalarData[index + i] = value;\n                }\n            };\n            this.forEach(callback);\n        };\n        this.get = (index) => {\n            const i = index % this.jMultiple;\n            const j = (index - i) / this.jMultiple;\n            const rle = this.getRLE(i, j);\n            return rle?.value ?? this.defaultValue;\n        };\n        this.getRun = (j, k) => {\n            const runIndex = j + k * this.height;\n            return this.rows.get(runIndex);\n        };\n        this.set = (index, value) => {\n            if (value === undefined) {\n                return;\n            }\n            const i = index % this.width;\n            const j = (index - i) / this.width;\n            const row = this.rows.get(j);\n            if (!row) {\n                this.rows.set(j, [{ start: i, end: i + 1, value }]);\n                return;\n            }\n            const rleIndex = this.findIndex(row, i);\n            const rle1 = row[rleIndex];\n            const rle0 = row[rleIndex - 1];\n            if (!rle1) {\n                if (!rle0 || rle0.value !== value || rle0.end !== i) {\n                    row[rleIndex] = { start: i, end: i + 1, value };\n                    return;\n                }\n                rle0.end++;\n                return;\n            }\n            const { start, end, value: oldValue } = rle1;\n            if (value === oldValue && i >= start) {\n                return;\n            }\n            const rleInsert = { start: i, end: i + 1, value };\n            const isAfter = i > start;\n            const insertIndex = isAfter ? rleIndex + 1 : rleIndex;\n            const rlePrev = isAfter ? rle1 : rle0;\n            let rleNext = isAfter ? row[rleIndex + 1] : rle1;\n            if (rlePrev?.value === value && rlePrev?.end === i) {\n                rlePrev.end++;\n                if (rleNext?.value === value && rleNext.start === i + 1) {\n                    rlePrev.end = rleNext.end;\n                    row.splice(rleIndex, 1);\n                }\n                else if (rleNext?.start === i) {\n                    rleNext.start++;\n                    if (rleNext.start === rleNext.end) {\n                        row.splice(rleIndex, 1);\n                        rleNext = row[rleIndex];\n                        if (rleNext?.start === i + 1 && rleNext.value === value) {\n                            rlePrev.end = rleNext.end;\n                            row.splice(rleIndex, 1);\n                        }\n                    }\n                }\n                return;\n            }\n            if (rleNext?.value === value && rleNext.start === i + 1) {\n                rleNext.start--;\n                if (rlePrev?.end > i) {\n                    rlePrev.end = i;\n                    if (rlePrev.end === rlePrev.start) {\n                        row.splice(rleIndex, 1);\n                    }\n                }\n                return;\n            }\n            if (rleNext?.start === i && rleNext.end === i + 1) {\n                rleNext.value = value;\n                const nextnext = row[rleIndex + 1];\n                if (nextnext?.start == i + 1 && nextnext.value === value) {\n                    row.splice(rleIndex + 1, 1);\n                    rleNext.end = nextnext.end;\n                }\n                return;\n            }\n            if (i === rleNext?.start) {\n                rleNext.start++;\n            }\n            if (isAfter && end > i + 1) {\n                row.splice(insertIndex, 0, rleInsert, {\n                    start: i + 1,\n                    end: rlePrev.end,\n                    value: rlePrev.value,\n                });\n            }\n            else {\n                row.splice(insertIndex, 0, rleInsert);\n            }\n            if (rlePrev?.end > i) {\n                rlePrev.end = i;\n            }\n        };\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n        this.jMultiple = width;\n        this.kMultiple = this.jMultiple * height;\n    }\n    static { this.getScalarData = function (ArrayType = Uint8ClampedArray) {\n        const scalarData = new ArrayType(this.frameSize);\n        this.map.updateScalarData(scalarData);\n        return scalarData;\n    }; }\n    toIJK(index) {\n        const i = index % this.jMultiple;\n        const j = ((index - i) / this.jMultiple) % this.height;\n        const k = Math.floor(index / this.kMultiple);\n        return [i, j, k];\n    }\n    toIndex([i, j, k]) {\n        return i + k * this.kMultiple + j * this.jMultiple;\n    }\n    getRLE(i, j, k = 0) {\n        const row = this.rows.get(j + k * this.height);\n        if (!row) {\n            return;\n        }\n        const index = this.findIndex(row, i);\n        const rle = row[index];\n        return i >= rle?.start ? rle : undefined;\n    }\n    has(index) {\n        const i = index % this.jMultiple;\n        const j = (index - i) / this.jMultiple;\n        const rle = this.getRLE(i, j);\n        return rle?.value !== undefined;\n    }\n    delete(index) {\n        const i = index % this.width;\n        const j = (index - i) / this.width;\n        const row = this.rows.get(j);\n        if (!row) {\n            return;\n        }\n        const rleIndex = this.findIndex(row, i);\n        const rle = row[rleIndex];\n        if (!rle || rle.start > i) {\n            return;\n        }\n        if (rle.end === i + 1) {\n            rle.end--;\n            if (rle.start >= rle.end) {\n                row.splice(rleIndex, 1);\n                if (!row.length) {\n                    this.rows.delete(j);\n                }\n            }\n            return;\n        }\n        if (rle.start === i) {\n            rle.start++;\n            return;\n        }\n        const newRle = {\n            value: rle.value,\n            start: i + 1,\n            end: rle.end,\n        };\n        rle.end = i;\n        row.splice(rleIndex + 1, 0, newRle);\n    }\n    findIndex(row, i) {\n        for (let index = 0; index < row.length; index++) {\n            const { end: iEnd } = row[index];\n            if (i < iEnd) {\n                return index;\n            }\n        }\n        return row.length;\n    }\n    forEach(callback, options) {\n        const rowModified = options?.rowModified;\n        for (const [baseIndex, row] of this.rows) {\n            const rowToUse = rowModified ? [...row] : row;\n            for (const rle of rowToUse) {\n                callback(baseIndex * this.width, rle, row);\n            }\n        }\n    }\n    forEachRow(callback) {\n        for (const [baseIndex, row] of this.rows) {\n            callback(baseIndex * this.width, row);\n        }\n    }\n    clear() {\n        this.rows.clear();\n    }\n    keys() {\n        return [...this.rows.keys()];\n    }\n    getPixelData(k = 0, pixelData) {\n        if (!pixelData) {\n            pixelData = new this.pixelDataConstructor(this.width * this.height * this.numComps);\n        }\n        else {\n            pixelData.fill(0);\n        }\n        const { width, height, numComps } = this;\n        for (let j = 0; j < height; j++) {\n            const row = this.getRun(j, k);\n            if (!row) {\n                continue;\n            }\n            if (numComps === 1) {\n                for (const rle of row) {\n                    const rowOffset = j * width;\n                    const { start, end, value } = rle;\n                    for (let i = start; i < end; i++) {\n                        pixelData[rowOffset + i] = value;\n                    }\n                }\n            }\n            else {\n                for (const rle of row) {\n                    const rowOffset = j * width * numComps;\n                    const { start, end, value } = rle;\n                    for (let i = start; i < end; i += numComps) {\n                        for (let comp = 0; comp < numComps; comp++) {\n                            pixelData[rowOffset + i + comp] = value[comp];\n                        }\n                    }\n                }\n            }\n        }\n        return pixelData;\n    }\n    floodFill(i, j, k, value, options) {\n        const rle = this.getRLE(i, j, k);\n        if (!rle) {\n            throw new Error(`Initial point ${i},${j},${k} isn't in the RLE`);\n        }\n        const stack = [[rle, j, k]];\n        const replaceValue = rle.value;\n        if (replaceValue === value) {\n            throw new Error(`source (${replaceValue}) and destination (${value}) are identical`);\n        }\n        return this.flood(stack, replaceValue, value, options);\n    }\n    flood(stack, sourceValue, value, options) {\n        let sum = 0;\n        const { planar = true, diagonals = true, singlePlane = false, } = options || {};\n        const childOptions = { planar, diagonals, singlePlane };\n        while (stack.length) {\n            const top = stack.pop();\n            const [current] = top;\n            if (current.value !== sourceValue) {\n                continue;\n            }\n            current.value = value;\n            sum += current.end - current.start;\n            const adjacents = this.findAdjacents(top, childOptions).filter((adjacent) => adjacent && adjacent[0].value === sourceValue);\n            stack.push(...adjacents);\n        }\n        return sum;\n    }\n    fillFrom(getter, boundsIJK) {\n        for (let k = boundsIJK[2][0]; k <= boundsIJK[2][1]; k++) {\n            for (let j = boundsIJK[1][0]; j <= boundsIJK[1][1]; j++) {\n                let rle;\n                let row;\n                for (let i = boundsIJK[0][0]; i <= boundsIJK[0][1]; i++) {\n                    const value = getter(i, j, k);\n                    if (value === undefined) {\n                        rle = undefined;\n                        continue;\n                    }\n                    if (!row) {\n                        row = [];\n                        this.rows.set(j + k * this.height, row);\n                    }\n                    if (rle && rle.value !== value) {\n                        rle = undefined;\n                    }\n                    if (!rle) {\n                        rle = { start: i, end: i, value };\n                        row.push(rle);\n                    }\n                    rle.end++;\n                }\n            }\n        }\n    }\n    findAdjacents(item, { diagonals = true, planar = true, singlePlane = false }) {\n        const [rle, j, k, adjacentsDelta] = item;\n        const { start, end } = rle;\n        const leftRle = start > 0 && this.getRLE(start - 1, j, k);\n        const rightRle = end < this.width && this.getRLE(end, j, k);\n        const range = diagonals\n            ? [start > 0 ? start - 1 : start, end < this.width ? end + 1 : end]\n            : [start, end];\n        const adjacents = [];\n        if (leftRle) {\n            adjacents.push([leftRle, j, k]);\n        }\n        if (rightRle) {\n            adjacents.push([rightRle, j, k]);\n        }\n        for (const delta of adjacentsDelta ||\n            (singlePlane ? ADJACENT_SINGLE_PLANE : ADJACENT_ALL)) {\n            const [, delta1, delta2] = delta;\n            const testJ = delta1 + j;\n            const testK = delta2 + k;\n            if (testJ < 0 || testJ >= this.height) {\n                continue;\n            }\n            if (testK < 0 || testK >= this.depth) {\n                continue;\n            }\n            const row = this.getRun(testJ, testK);\n            if (!row) {\n                continue;\n            }\n            for (const testRle of row) {\n                const newAdjacentDelta = adjacentsDelta ||\n                    (singlePlane && ADJACENT_SINGLE_PLANE) ||\n                    (planar && delta2 > 0 && ADJACENT_OUT) ||\n                    (planar && delta2 < 0 && ADJACENT_IN) ||\n                    ADJACENT_ALL;\n                if (!(testRle.end <= range[0] || testRle.start >= range[1])) {\n                    adjacents.push([testRle, testJ, testK, newAdjacentDelta]);\n                }\n            }\n        }\n        return adjacents;\n    }\n}\n","export function isImageActor(actorEntry) {\n    return (actorIsA(actorEntry, 'vtkVolume') || actorIsA(actorEntry, 'vtkImageSlice'));\n}\nexport function actorIsA(actorEntry, actorType) {\n    const actorToCheck = 'isA' in actorEntry ? actorEntry : actorEntry.actor;\n    if (!actorToCheck) {\n        return false;\n    }\n    return !!actorToCheck.isA(actorType);\n}\n","import vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nexport default function applyPreset(actor, preset) {\n    const colorTransferArray = preset.colorTransfer\n        .split(' ')\n        .splice(1)\n        .map(parseFloat);\n    const { shiftRange } = getShiftRange(colorTransferArray);\n    const min = shiftRange[0];\n    const width = shiftRange[1] - shiftRange[0];\n    const cfun = vtkColorTransferFunction.newInstance();\n    const normColorTransferValuePoints = [];\n    for (let i = 0; i < colorTransferArray.length; i += 4) {\n        let value = colorTransferArray[i];\n        const r = colorTransferArray[i + 1];\n        const g = colorTransferArray[i + 2];\n        const b = colorTransferArray[i + 3];\n        value = (value - min) / width;\n        normColorTransferValuePoints.push([value, r, g, b]);\n    }\n    applyPointsToRGBFunction(normColorTransferValuePoints, shiftRange, cfun);\n    actor.getProperty().setRGBTransferFunction(0, cfun);\n    const scalarOpacityArray = preset.scalarOpacity\n        .split(' ')\n        .splice(1)\n        .map(parseFloat);\n    const ofun = vtkPiecewiseFunction.newInstance();\n    const normPoints = [];\n    for (let i = 0; i < scalarOpacityArray.length; i += 2) {\n        let value = scalarOpacityArray[i];\n        const opacity = scalarOpacityArray[i + 1];\n        value = (value - min) / width;\n        normPoints.push([value, opacity]);\n    }\n    applyPointsToPiecewiseFunction(normPoints, shiftRange, ofun);\n    const property = actor.getProperty();\n    property.setScalarOpacity(0, ofun);\n    const [gradientMinValue, gradientMinOpacity, gradientMaxValue, gradientMaxOpacity,] = preset.gradientOpacity.split(' ').splice(1).map(parseFloat);\n    property.setUseGradientOpacity(0, true);\n    property.setGradientOpacityMinimumValue(0, gradientMinValue);\n    property.setGradientOpacityMinimumOpacity(0, gradientMinOpacity);\n    property.setGradientOpacityMaximumValue(0, gradientMaxValue);\n    property.setGradientOpacityMaximumOpacity(0, gradientMaxOpacity);\n    if (preset.interpolation === '1') {\n        property.setInterpolationTypeToFastLinear();\n    }\n    property.setShade(preset.shade === '1');\n    const ambient = parseFloat(preset.ambient);\n    const diffuse = parseFloat(preset.diffuse);\n    const specular = parseFloat(preset.specular);\n    const specularPower = parseFloat(preset.specularPower);\n    property.setAmbient(ambient);\n    property.setDiffuse(diffuse);\n    property.setSpecular(specular);\n    property.setSpecularPower(specularPower);\n}\nfunction getShiftRange(colorTransferArray) {\n    let min = Infinity;\n    let max = -Infinity;\n    for (let i = 0; i < colorTransferArray.length; i += 4) {\n        min = Math.min(min, colorTransferArray[i]);\n        max = Math.max(max, colorTransferArray[i]);\n    }\n    const center = (max - min) / 2;\n    return {\n        shiftRange: [-center, center],\n        min,\n        max,\n    };\n}\nfunction applyPointsToRGBFunction(points, range, cfun) {\n    const width = range[1] - range[0];\n    const rescaled = points.map(([x, r, g, b]) => [\n        x * width + range[0],\n        r,\n        g,\n        b,\n    ]);\n    cfun.removeAllPoints();\n    rescaled.forEach(([x, r, g, b]) => cfun.addRGBPoint(x, r, g, b));\n    return rescaled;\n}\nfunction applyPointsToPiecewiseFunction(points, range, pwf) {\n    const width = range[1] - range[0];\n    const rescaled = points.map(([x, y]) => [x * width + range[0], y]);\n    pwf.removeAllPoints();\n    rescaled.forEach(([x, y]) => pwf.addPoint(x, y));\n    return rescaled;\n}\n","import { getRenderingEngines } from '../RenderingEngine/getRenderingEngine';\nimport getViewportsWithVolumeId from './getViewportsWithVolumeId';\nconst autoLoad = (volumeId) => {\n    const renderingEngineAndViewportIds = getRenderingEngineAndViewportsContainingVolume(volumeId);\n    if (!renderingEngineAndViewportIds?.length) {\n        return;\n    }\n    renderingEngineAndViewportIds.forEach(({ renderingEngine, viewportIds }) => {\n        if (!renderingEngine.hasBeenDestroyed) {\n            renderingEngine.renderViewports(viewportIds);\n        }\n    });\n};\nfunction getRenderingEngineAndViewportsContainingVolume(volumeId) {\n    const renderingEnginesArray = getRenderingEngines();\n    const renderingEngineAndViewportIds = [];\n    renderingEnginesArray.forEach((renderingEngine) => {\n        const viewports = getViewportsWithVolumeId(volumeId);\n        if (viewports.length) {\n            renderingEngineAndViewportIds.push({\n                renderingEngine,\n                viewportIds: viewports.map((viewport) => viewport.id),\n            });\n        }\n    });\n    return renderingEngineAndViewportIds;\n}\nexport default autoLoad;\n","import * as metaData from '../metaData';\nimport { MetadataModules, VOILUTFunctionType } from '../enums';\nexport function getValidVOILUTFunction(voiLUTFunction) {\n    if (!Object.values(VOILUTFunctionType).includes(voiLUTFunction)) {\n        return VOILUTFunctionType.LINEAR;\n    }\n    return voiLUTFunction;\n}\nexport function getImagePlaneModule(imageId) {\n    const imagePlaneModule = metaData.get(MetadataModules.IMAGE_PLANE, imageId);\n    const newImagePlaneModule = {\n        ...imagePlaneModule,\n    };\n    if (!newImagePlaneModule.columnPixelSpacing) {\n        newImagePlaneModule.columnPixelSpacing = 1;\n    }\n    if (!newImagePlaneModule.rowPixelSpacing) {\n        newImagePlaneModule.rowPixelSpacing = 1;\n    }\n    if (!newImagePlaneModule.columnCosines) {\n        newImagePlaneModule.columnCosines = [0, 1, 0];\n    }\n    if (!newImagePlaneModule.rowCosines) {\n        newImagePlaneModule.rowCosines = [1, 0, 0];\n    }\n    if (!newImagePlaneModule.imagePositionPatient) {\n        newImagePlaneModule.imagePositionPatient = [0, 0, 0];\n    }\n    if (!newImagePlaneModule.imageOrientationPatient) {\n        newImagePlaneModule.imageOrientationPatient = new Float32Array([\n            1, 0, 0, 0, 1, 0,\n        ]);\n    }\n    return newImagePlaneModule;\n}\nexport function calibrateImagePlaneModule(imageId, imagePlaneModule, currentCalibration) {\n    const calibration = metaData.get('calibratedPixelSpacing', imageId);\n    const isUpdated = currentCalibration !== calibration;\n    const { scale } = calibration || {};\n    const hasPixelSpacing = scale > 0 || imagePlaneModule.rowPixelSpacing > 0;\n    imagePlaneModule.calibration = calibration;\n    if (!isUpdated) {\n        return { imagePlaneModule, hasPixelSpacing };\n    }\n    return {\n        imagePlaneModule,\n        hasPixelSpacing,\n        calibrationEvent: {\n            scale,\n            calibration,\n        },\n    };\n}\nexport function buildMetadata(image) {\n    const imageId = image.imageId;\n    const { pixelRepresentation, bitsAllocated, bitsStored, highBit, photometricInterpretation, samplesPerPixel, } = metaData.get('imagePixelModule', imageId);\n    const { windowWidth, windowCenter, voiLUTFunction } = image;\n    const { modality } = metaData.get('generalSeriesModule', imageId);\n    const imageIdScalingFactor = metaData.get('scalingModule', imageId);\n    const calibration = metaData.get(MetadataModules.CALIBRATION, imageId);\n    const voiLUTFunctionEnum = getValidVOILUTFunction(voiLUTFunction);\n    const imagePlaneModule = getImagePlaneModule(imageId);\n    return {\n        calibration,\n        scalingFactor: imageIdScalingFactor,\n        voiLUTFunction: voiLUTFunctionEnum,\n        modality,\n        imagePlaneModule,\n        imagePixelModule: {\n            bitsAllocated,\n            bitsStored,\n            samplesPerPixel,\n            highBit,\n            photometricInterpretation,\n            pixelRepresentation,\n            windowWidth: windowWidth,\n            windowCenter: windowCenter,\n            modality,\n            voiLUTFunction: voiLUTFunctionEnum,\n        },\n    };\n}\n","import { vec3 } from 'gl-matrix';\nimport * as metaData from '../metaData';\nimport { getConfiguration } from '../init';\nexport default function calculateSpacingBetweenImageIds(imageIds) {\n    const { imagePositionPatient: referenceImagePositionPatient, imageOrientationPatient, } = metaData.get('imagePlaneModule', imageIds[0]);\n    const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n    const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n    const scanAxisNormal = vec3.create();\n    vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n    const refIppVec = vec3.fromValues(referenceImagePositionPatient[0], referenceImagePositionPatient[1], referenceImagePositionPatient[2]);\n    const usingWadoUri = imageIds[0].split(':')[0] === 'wadouri';\n    let spacing;\n    function getDistance(imageId) {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n        const positionVector = vec3.create();\n        const ippVec = vec3.fromValues(imagePositionPatient[0], imagePositionPatient[1], imagePositionPatient[2]);\n        vec3.sub(positionVector, refIppVec, ippVec);\n        return vec3.dot(positionVector, scanAxisNormal);\n    }\n    if (!usingWadoUri) {\n        const distanceImagePairs = imageIds.map((imageId) => {\n            const distance = getDistance(imageId);\n            return {\n                distance,\n                imageId,\n            };\n        });\n        distanceImagePairs.sort((a, b) => b.distance - a.distance);\n        const numImages = distanceImagePairs.length;\n        spacing =\n            Math.abs(distanceImagePairs[numImages - 1].distance -\n                distanceImagePairs[0].distance) /\n                (numImages - 1);\n    }\n    else {\n        const prefetchedImageIds = [\n            imageIds[0],\n            imageIds[Math.floor(imageIds.length / 2)],\n        ];\n        const firstImageDistance = getDistance(prefetchedImageIds[0]);\n        const middleImageDistance = getDistance(prefetchedImageIds[1]);\n        const metadataForMiddleImage = metaData.get('imagePlaneModule', prefetchedImageIds[1]);\n        if (!metadataForMiddleImage) {\n            throw new Error('Incomplete metadata required for volume construction.');\n        }\n        const positionVector = vec3.create();\n        const middleIppVec = vec3.fromValues(metadataForMiddleImage.imagePositionPatient[0], metadataForMiddleImage.imagePositionPatient[1], metadataForMiddleImage.imagePositionPatient[2]);\n        vec3.sub(positionVector, refIppVec, middleIppVec);\n        const distanceBetweenFirstAndMiddleImages = vec3.dot(positionVector, scanAxisNormal);\n        spacing =\n            Math.abs(distanceBetweenFirstAndMiddleImages) /\n                Math.floor(imageIds.length / 2);\n    }\n    const { sliceThickness, spacingBetweenSlices } = metaData.get('imagePlaneModule', imageIds[0]);\n    const { strictZSpacingForVolumeViewport } = getConfiguration().rendering;\n    if ((spacing === 0 || isNaN(spacing)) && !strictZSpacingForVolumeViewport) {\n        if (spacingBetweenSlices) {\n            console.debug('Could not calculate spacing. Using spacingBetweenSlices');\n            spacing = spacingBetweenSlices;\n        }\n        else if (sliceThickness) {\n            console.debug('Could not calculate spacing and no spacingBetweenSlices. Using sliceThickness');\n            spacing = sliceThickness;\n        }\n        else {\n            console.debug('Could not calculate spacing. The VolumeViewport visualization is compromised. Setting spacing to 1 to render');\n            spacing = 1;\n        }\n    }\n    return spacing;\n}\n","function clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\nexport { clamp as default, clamp };\n","import vtkColorMaps from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction/ColorMaps';\nimport vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nimport isEqual from './isEqual';\nimport { actorIsA } from './actorCheck';\nconst _colormaps = new Map();\nfunction registerColormap(colormap) {\n    colormap.name = colormap.name || colormap.Name;\n    _colormaps.set(colormap.name, colormap);\n}\nfunction getColormap(name) {\n    return _colormaps.get(name);\n}\nfunction getColormapNames() {\n    return Array.from(_colormaps.keys());\n}\nfunction findMatchingColormap(rgbPoints, actor) {\n    const colormapsVTK = vtkColorMaps.rgbPresetNames.map((presetName) => vtkColorMaps.getPresetByName(presetName));\n    const colormapsCS3D = getColormapNames().map((colormapName) => getColormap(colormapName));\n    const colormaps = colormapsVTK.concat(colormapsCS3D);\n    const matchedColormap = colormaps.find((colormap) => {\n        const { RGBPoints: presetRGBPoints } = colormap;\n        if (presetRGBPoints.length !== rgbPoints.length) {\n            return false;\n        }\n        for (let i = 0; i < presetRGBPoints.length; i += 4) {\n            if (!isEqual(presetRGBPoints.slice(i + 1, i + 4), rgbPoints.slice(i + 1, i + 4))) {\n                return false;\n            }\n        }\n        return true;\n    });\n    if (!matchedColormap) {\n        return null;\n    }\n    const opacity = [];\n    if (actorIsA(actor, 'vtkVolume')) {\n        const opacityPoints = actor\n            .getProperty()\n            .getScalarOpacity(0)\n            .getDataPointer();\n        if (!opacityPoints) {\n            return {\n                name: matchedColormap.Name,\n            };\n        }\n        for (let i = 0; i < opacityPoints.length; i += 2) {\n            opacity.push({\n                value: opacityPoints[i],\n                opacity: opacityPoints[i + 1],\n            });\n        }\n    }\n    const result = {\n        name: matchedColormap.Name,\n        ...(Array.isArray(opacity) && opacity.length > 0 && { opacity }),\n        ...(typeof opacity === 'number' && { opacity }),\n    };\n    return result;\n}\nexport function setColorMapTransferFunctionForVolumeActor(volumeInfo) {\n    const { volumeActor, preset, opacity = 0.9, threshold = null, colorRange = [0, 5], } = volumeInfo;\n    const mapper = volumeActor.getMapper();\n    mapper.setSampleDistance(1.0);\n    const cfun = vtkColorTransferFunction.newInstance();\n    const presetToUse = preset || vtkColorMaps.getPresetByName('hsv');\n    cfun.applyColorMap(presetToUse);\n    cfun.setMappingRange(colorRange[0], colorRange[1]);\n    volumeActor.getProperty().setRGBTransferFunction(0, cfun);\n    updateOpacityWithThreshold(volumeActor, opacity, threshold);\n}\nexport function updateOpacity(volumeActor, newOpacity) {\n    const currentThreshold = getThresholdValue(volumeActor);\n    updateOpacityWithThreshold(volumeActor, newOpacity, currentThreshold);\n}\nexport function updateThreshold(volumeActor, newThreshold) {\n    const currentOpacity = getMaxOpacity(volumeActor);\n    updateOpacityWithThreshold(volumeActor, currentOpacity, newThreshold);\n}\nfunction updateOpacityWithThreshold(volumeActor, opacity, threshold) {\n    const meta = volumeActor.getMapper().getInputData().get('voxelManager');\n    if (!meta?.voxelManager) {\n        throw new Error('No voxel manager was found for the volume actor, or you cannot yet update opacity with a threshold using stacked images');\n    }\n    const range = meta.voxelManager.getRange();\n    const ofun = vtkPiecewiseFunction.newInstance();\n    if (threshold !== null) {\n        const delta = Math.abs(range[1] - range[0]) * 0.001;\n        const thresholdValue = Math.max(range[0], Math.min(range[1], threshold));\n        ofun.addPoint(range[0], 0);\n        ofun.addPoint(thresholdValue - delta, 0);\n        ofun.addPoint(thresholdValue, opacity);\n        ofun.addPoint(range[1], opacity);\n    }\n    else {\n        ofun.addPoint(range[0], opacity);\n        ofun.addPoint(range[1], opacity);\n    }\n    volumeActor.getProperty().setScalarOpacity(0, ofun);\n}\nfunction getThresholdValue(volumeActor) {\n    const opacityFunction = volumeActor.getProperty().getScalarOpacity(0);\n    if (!opacityFunction) {\n        return null;\n    }\n    const dataArray = opacityFunction.getDataPointer();\n    if (!dataArray || dataArray.length <= 4) {\n        return null;\n    }\n    for (let i = 0; i < dataArray.length - 2; i += 2) {\n        const x1 = dataArray[i];\n        const y1 = dataArray[i + 1];\n        const x2 = dataArray[i + 2];\n        const y2 = dataArray[i + 3];\n        if (y1 === 0 && y2 > 0) {\n            return x2;\n        }\n    }\n    return null;\n}\nfunction getMaxOpacity(volumeActor) {\n    const opacityFunction = volumeActor.getProperty().getScalarOpacity(0);\n    if (!opacityFunction) {\n        return 1.0;\n    }\n    const dataArray = opacityFunction.getDataPointer();\n    if (!dataArray || dataArray.length === 0) {\n        return 1.0;\n    }\n    let maxOpacity = 0;\n    for (let i = 1; i < dataArray.length; i += 2) {\n        if (dataArray[i] > maxOpacity) {\n            maxOpacity = dataArray[i];\n        }\n    }\n    return maxOpacity;\n}\nexport { getColormap, getColormapNames, registerColormap, findMatchingColormap, getThresholdValue, getMaxOpacity, };\n","import vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nexport default function createLinearRGBTransferFunction(voiRange) {\n    const cfun = vtkColorTransferFunction.newInstance();\n    let lower = 0;\n    let upper = 1024;\n    if (voiRange.lower !== undefined && voiRange.upper !== undefined) {\n        lower = voiRange.lower;\n        upper = voiRange.upper;\n    }\n    cfun.addRGBPoint(lower, 0.0, 0.0, 0.0);\n    cfun.addRGBPoint(upper, 1.0, 1.0, 1.0);\n    return cfun;\n}\n","import vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport * as windowLevelUtil from './windowLevel';\nimport { logit } from './logit';\nexport default function createSigmoidRGBTransferFunction(voiRange, approximationNodes = 1024) {\n    const { windowWidth, windowCenter } = windowLevelUtil.toWindowLevel(voiRange.lower, voiRange.upper);\n    const range = Array.from({ length: approximationNodes }, (_, i) => (i + 1) / (approximationNodes + 2));\n    const table = range.flatMap((y) => {\n        const x = logit(y, windowCenter, windowWidth);\n        return [x, y, y, y, 0.5, 0.0];\n    });\n    const cfun = vtkColorTransferFunction.newInstance();\n    cfun.buildFunctionFromArray(vtkDataArray.newInstance({\n        values: table,\n        numberOfComponents: 6,\n    }));\n    return cfun;\n}\n","export default function decimate(list, interleave, offset = 0) {\n    const interleaveIndices = [];\n    for (let i = offset; i < list.length; i += interleave) {\n        interleaveIndices.push(i);\n    }\n    return interleaveIndices;\n}\n","export function deepClone(obj) {\n    if (obj === null || typeof obj !== 'object') {\n        return obj;\n    }\n    if (typeof obj === 'function') {\n        return obj;\n    }\n    if (typeof structuredClone === 'function') {\n        return obj;\n    }\n    if (Array.isArray(obj)) {\n        return obj.map(deepClone);\n    }\n    else {\n        const clonedObj = {};\n        for (const key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                clonedObj[key] = deepClone(obj[key]);\n            }\n        }\n        return clonedObj;\n    }\n}\n","export default function fnv1aHash(str) {\n    let hash = 0x811c9dc5;\n    for (let i = 0; i < str.length; i++) {\n        hash ^= str.charCodeAt(i);\n        hash +=\n            (hash << 1) + (hash << 4) + (hash << 7) + (hash << 8) + (hash << 24);\n    }\n    return (hash >>> 0).toString(36);\n}\n","import { vec3 } from 'gl-matrix';\nimport * as metaData from '../metaData';\nimport { coreLog } from './logger';\nimport getSpacingInNormalDirection from './getSpacingInNormalDirection';\nimport { EPSILON } from '../constants';\nconst log = coreLog.getLogger('utilities', 'getClosestImageId');\nexport default function getClosestImageId(imageVolume, worldPos, viewPlaneNormal, options) {\n    const { direction, spacing, imageIds } = imageVolume;\n    const { ignoreSpacing = false } = options || {};\n    if (!imageIds?.length) {\n        return;\n    }\n    const kVector = direction.slice(6, 9);\n    const dotProduct = vec3.dot(kVector, viewPlaneNormal);\n    if (Math.abs(dotProduct) < 1 - EPSILON) {\n        return;\n    }\n    let halfSpacingInNormalDirection;\n    if (!ignoreSpacing) {\n        const spacingInNormalDirection = getSpacingInNormalDirection({ direction, spacing }, viewPlaneNormal);\n        halfSpacingInNormalDirection = spacingInNormalDirection / 2;\n    }\n    let closestImageId;\n    let minDistance = Infinity;\n    for (let i = 0; i < imageIds.length; i++) {\n        const imageId = imageIds[i];\n        const imagePlaneModule = metaData.get('imagePlaneModule', imageId);\n        if (!imagePlaneModule?.imagePositionPatient) {\n            log.warn(`Missing imagePositionPatient for imageId: ${imageId}`);\n            continue;\n        }\n        const { imagePositionPatient } = imagePlaneModule;\n        const dir = vec3.create();\n        vec3.sub(dir, worldPos, imagePositionPatient);\n        const distance = Math.abs(vec3.dot(dir, viewPlaneNormal));\n        if (ignoreSpacing) {\n            if (distance < minDistance) {\n                minDistance = distance;\n                closestImageId = imageId;\n            }\n        }\n        else {\n            if (distance < halfSpacingInNormalDirection && distance < minDistance) {\n                minDistance = distance;\n                closestImageId = imageId;\n            }\n        }\n    }\n    if (closestImageId === undefined) {\n        log.warn('No imageId found within the specified criteria (half spacing or absolute closest).');\n    }\n    return closestImageId;\n}\n","import { vec3 } from 'gl-matrix';\nimport { EPSILON } from '../constants';\nimport { buildMetadata } from './buildMetadata';\nexport function getImageDataMetadata(image) {\n    const { imagePlaneModule, imagePixelModule, voiLUTFunction, modality, scalingFactor, calibration, } = buildMetadata(image);\n    let { rowCosines, columnCosines } = imagePlaneModule;\n    if (rowCosines == null || columnCosines == null) {\n        rowCosines = [1, 0, 0];\n        columnCosines = [0, 1, 0];\n    }\n    const rowCosineVec = vec3.fromValues(rowCosines[0], rowCosines[1], rowCosines[2]);\n    const colCosineVec = vec3.fromValues(columnCosines[0], columnCosines[1], columnCosines[2]);\n    const scanAxisNormal = vec3.create();\n    vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n    let origin = imagePlaneModule.imagePositionPatient;\n    if (origin == null) {\n        origin = [0, 0, 0];\n    }\n    const xSpacing = imagePlaneModule.columnPixelSpacing || image.columnPixelSpacing;\n    const ySpacing = imagePlaneModule.rowPixelSpacing || image.rowPixelSpacing;\n    const xVoxels = image.columns;\n    const yVoxels = image.rows;\n    const zSpacing = EPSILON;\n    const zVoxels = 1;\n    if (!imagePixelModule.photometricInterpretation &&\n        image.sizeInBytes === 3 * image.width * image.height) {\n        image.numberOfComponents = 3;\n    }\n    const numberOfComponents = image.numberOfComponents ||\n        _getNumCompsFromPhotometricInterpretation(imagePixelModule.photometricInterpretation);\n    return {\n        numberOfComponents,\n        origin,\n        direction: [...rowCosineVec, ...colCosineVec, ...scanAxisNormal],\n        dimensions: [xVoxels, yVoxels, zVoxels],\n        spacing: [xSpacing, ySpacing, zSpacing],\n        numVoxels: xVoxels * yVoxels * zVoxels,\n        imagePlaneModule,\n        imagePixelModule,\n        bitsAllocated: imagePixelModule.bitsAllocated,\n        voiLUTFunction,\n        modality,\n        scalingFactor,\n        calibration,\n        scanAxisNormal: scanAxisNormal,\n    };\n}\nfunction _getNumCompsFromPhotometricInterpretation(photometricInterpretation) {\n    let numberOfComponents = 1;\n    if (photometricInterpretation === 'RGB' ||\n        photometricInterpretation?.includes('YBR') ||\n        photometricInterpretation === 'PALETTE COLOR') {\n        numberOfComponents = 3;\n    }\n    return numberOfComponents;\n}\n","import getSliceRange from './getSliceRange';\nimport getTargetVolumeAndSpacingInNormalDir from './getTargetVolumeAndSpacingInNormalDir';\nfunction getImageSliceDataForVolumeViewport(viewport) {\n    const camera = viewport.getCamera();\n    const { spacingInNormalDirection, imageVolume } = getTargetVolumeAndSpacingInNormalDir(viewport, camera);\n    if (!imageVolume) {\n        return;\n    }\n    const { viewPlaneNormal, focalPoint } = camera;\n    const actorEntry = viewport\n        .getActors()\n        .find((a) => a.referencedId === imageVolume.volumeId ||\n        a.uid === imageVolume.volumeId);\n    if (!actorEntry) {\n        console.warn('No actor found for with actorUID of', imageVolume.volumeId);\n    }\n    const volumeActor = actorEntry.actor;\n    const sliceRange = getSliceRange(volumeActor, viewPlaneNormal, focalPoint);\n    const { min, max, current } = sliceRange;\n    const numberOfSlices = Math.round((max - min) / spacingInNormalDirection) + 1;\n    let imageIndex = ((current - min) / (max - min)) * numberOfSlices;\n    imageIndex = Math.floor(imageIndex);\n    if (imageIndex > numberOfSlices - 1) {\n        imageIndex = numberOfSlices - 1;\n    }\n    else if (imageIndex < 0) {\n        imageIndex = 0;\n    }\n    return {\n        numberOfSlices,\n        imageIndex,\n    };\n}\nexport default getImageSliceDataForVolumeViewport;\n","import * as metaData from '../metaData';\nexport default function getScalingParameters(imageId) {\n    const modalityLutModule = metaData.get('modalityLutModule', imageId) || {};\n    const generalSeriesModule = metaData.get('generalSeriesModule', imageId) || {};\n    const { modality } = generalSeriesModule;\n    const scalingParameters = {\n        rescaleSlope: modalityLutModule.rescaleSlope || 1,\n        rescaleIntercept: modalityLutModule.rescaleIntercept ?? 0,\n        modality,\n    };\n    const scalingModules = metaData.get('scalingModule', imageId) || {};\n    return {\n        ...scalingParameters,\n        ...(modality === 'PT' && {\n            suvbw: scalingModules.suvbw,\n            suvbsa: scalingModules.suvbsa,\n            suvlbm: scalingModules.suvlbm,\n        }),\n        ...(modality === 'RTDOSE' && {\n            doseGridScaling: scalingModules.DoseGridScaling,\n            doseSummation: scalingModules.DoseSummation,\n            doseType: scalingModules.DoseType,\n            doseUnit: scalingModules.DoseUnit,\n        }),\n    };\n}\n","import vtkMatrixBuilder from '@kitware/vtk.js/Common/Core/MatrixBuilder';\nimport getVolumeActorCorners from './getVolumeActorCorners';\nimport { EPSILON } from '../constants';\nconst SMALL_EPSILON = EPSILON * EPSILON;\nconst isOne = (v) => Math.abs(Math.abs(v) - 1) < SMALL_EPSILON;\nconst isUnit = (v, off) => isOne(v[off]) || isOne(v[off + 1]) || isOne(v[off + 2]);\nconst isOrthonormal = (v) => isUnit(v, 0) && isUnit(v, 3) && isUnit(v, 6);\nexport default function getSliceRange(volumeActor, viewPlaneNormal, focalPoint) {\n    const imageData = volumeActor.getMapper().getInputData();\n    let corners;\n    const direction = imageData.getDirection();\n    if (isOrthonormal(direction)) {\n        corners = getVolumeActorCorners(volumeActor);\n    }\n    else {\n        const [dx, dy, dz] = imageData.getDimensions();\n        const cornersIdx = [\n            [0, 0, 0],\n            [dx - 1, 0, 0],\n            [0, dy - 1, 0],\n            [dx - 1, dy - 1, 0],\n            [0, 0, dz - 1],\n            [dx - 1, 0, dz - 1],\n            [0, dy - 1, dz - 1],\n            [dx - 1, dy - 1, dz - 1],\n        ];\n        corners = cornersIdx.map((it) => imageData.indexToWorld(it));\n    }\n    const transform = vtkMatrixBuilder\n        .buildFromDegree()\n        .identity()\n        .rotateFromDirections(viewPlaneNormal, [1, 0, 0]);\n    corners.forEach((pt) => transform.apply(pt));\n    const transformedFocalPoint = [...focalPoint];\n    transform.apply(transformedFocalPoint);\n    const currentSlice = transformedFocalPoint[0];\n    let minX = Infinity;\n    let maxX = -Infinity;\n    for (let i = 0; i < 8; i++) {\n        const x = corners[i][0];\n        if (x > maxX) {\n            maxX = x;\n        }\n        if (x < minX) {\n            minX = x;\n        }\n    }\n    return {\n        min: minX,\n        max: maxX,\n        current: currentSlice,\n        actor: volumeActor,\n        viewPlaneNormal,\n        focalPoint,\n    };\n}\n","import { vec3 } from 'gl-matrix';\nexport default function getSpacingInNormalDirection(imageVolume, viewPlaneNormal) {\n    const { direction, spacing } = imageVolume;\n    const iVector = direction.slice(0, 3);\n    const jVector = direction.slice(3, 6);\n    const kVector = direction.slice(6, 9);\n    const dotProducts = [\n        vec3.dot(iVector, viewPlaneNormal),\n        vec3.dot(jVector, viewPlaneNormal),\n        vec3.dot(kVector, viewPlaneNormal),\n    ];\n    const projectedSpacing = vec3.create();\n    vec3.set(projectedSpacing, dotProducts[0] * spacing[0], dotProducts[1] * spacing[1], dotProducts[2] * spacing[2]);\n    const spacingInNormalDirection = vec3.length(projectedSpacing);\n    return spacingInNormalDirection;\n}\n","import cache from '../cache/cache';\nimport { EPSILON } from '../constants';\nimport getSpacingInNormalDirection from './getSpacingInNormalDirection';\nimport { getVolumeLoaderSchemes } from '../loaders/volumeLoader';\nimport { getVolumeId } from './getVolumeId';\nconst EPSILON_PART = 1 + EPSILON;\nconst startsWith = (str, starts) => starts === str.substring(0, Math.min(str.length, starts.length));\nconst isPrimaryVolume = (volume) => !!getVolumeLoaderSchemes().find((scheme) => startsWith(volume.volumeId, scheme));\nexport default function getTargetVolumeAndSpacingInNormalDir(viewport, camera, targetId, useSlabThickness = false) {\n    const { viewPlaneNormal } = camera;\n    const volumeActors = viewport.getActors();\n    if (!volumeActors.length) {\n        return {\n            spacingInNormalDirection: null,\n            imageVolume: null,\n            actorUID: null,\n        };\n    }\n    const imageVolumes = volumeActors\n        .map((va) => {\n        const actorUID = va.referencedId ?? va.uid;\n        return cache.getVolume(actorUID);\n    })\n        .filter((iv) => !!iv);\n    if (targetId) {\n        const targetVolumeId = getVolumeId(targetId);\n        const imageVolumeIndex = imageVolumes.findIndex((iv) => targetVolumeId.includes(iv.volumeId));\n        const imageVolume = imageVolumes[imageVolumeIndex];\n        const { uid: actorUID } = volumeActors[imageVolumeIndex];\n        const spacingInNormalDirection = getSpacingInNormal(imageVolume, viewPlaneNormal, viewport, useSlabThickness);\n        return { imageVolume, spacingInNormalDirection, actorUID };\n    }\n    if (!imageVolumes.length) {\n        return {\n            spacingInNormalDirection: null,\n            imageVolume: null,\n            actorUID: null,\n        };\n    }\n    const smallest = {\n        spacingInNormalDirection: Infinity,\n        imageVolume: null,\n        actorUID: null,\n    };\n    const hasPrimaryVolume = imageVolumes.find(isPrimaryVolume);\n    for (let i = 0; i < imageVolumes.length; i++) {\n        const imageVolume = imageVolumes[i];\n        if (hasPrimaryVolume && !isPrimaryVolume(imageVolume)) {\n            continue;\n        }\n        const spacingInNormalDirection = getSpacingInNormal(imageVolume, viewPlaneNormal, viewport);\n        if (spacingInNormalDirection * EPSILON_PART <\n            smallest.spacingInNormalDirection) {\n            smallest.spacingInNormalDirection = spacingInNormalDirection;\n            smallest.imageVolume = imageVolume;\n            smallest.actorUID = volumeActors[i].uid;\n        }\n    }\n    return smallest;\n}\nfunction getSpacingInNormal(imageVolume, viewPlaneNormal, viewport, useSlabThickness = false) {\n    const { slabThickness } = viewport.getProperties();\n    let spacingInNormalDirection = slabThickness;\n    if (!slabThickness || !useSlabThickness) {\n        spacingInNormalDirection = getSpacingInNormalDirection(imageVolume, viewPlaneNormal);\n    }\n    return spacingInNormalDirection;\n}\n","import { getRenderingEngines } from '../RenderingEngine/getRenderingEngine';\nfunction getViewportsWithVolumeId(volumeId) {\n    const renderingEngines = getRenderingEngines();\n    const targetViewports = [];\n    renderingEngines.forEach((renderingEngine) => {\n        const viewports = renderingEngine.getVolumeViewports();\n        const filteredViewports = viewports.filter((vp) => vp.hasVolumeId(volumeId));\n        targetViewports.push(...filteredViewports);\n    });\n    return targetViewports;\n}\nexport default getViewportsWithVolumeId;\n","export default function getVoiFromSigmoidRGBTransferFunction(cfun) {\n    let cfunRange = [];\n    const [lower, upper] = cfun.getRange();\n    cfun.getTable(lower, upper, 1024, cfunRange);\n    cfunRange = cfunRange.filter((v, k) => k % 3 === 0);\n    const cfunDomain = [...Array(1024).keys()].map((v, k) => {\n        return lower + ((upper - lower) / (1024 - 1)) * k;\n    });\n    const y1 = cfunRange[256];\n    const logy1 = Math.log((1 - y1) / y1);\n    const x1 = cfunDomain[256];\n    const y2 = cfunRange[256 * 3];\n    const logy2 = Math.log((1 - y2) / y2);\n    const x2 = cfunDomain[256 * 3];\n    const ww = Math.round((4 * (x2 - x1)) / (logy1 - logy2));\n    const wc = Math.round(x1 + (ww * logy1) / 4);\n    return [Math.round(wc - ww / 2), Math.round(wc + ww / 2)];\n}\n","export default function getVolumeActorCorners(volumeActor) {\n    const imageData = volumeActor.getMapper().getInputData();\n    const bounds = imageData.extentToBounds(imageData.getExtent());\n    return [\n        [bounds[0], bounds[2], bounds[4]],\n        [bounds[0], bounds[2], bounds[5]],\n        [bounds[0], bounds[3], bounds[4]],\n        [bounds[0], bounds[3], bounds[5]],\n        [bounds[1], bounds[2], bounds[4]],\n        [bounds[1], bounds[2], bounds[5]],\n        [bounds[1], bounds[3], bounds[4]],\n        [bounds[1], bounds[3], bounds[5]],\n    ];\n}\n","export const getVolumeId = (targetId) => {\n    const prefix = 'volumeId:';\n    const str = targetId.includes(prefix)\n        ? targetId.substring(prefix.length)\n        : targetId;\n    const index = str.indexOf('sliceIndex=');\n    return index === -1 ? str : str.substring(0, index - 1);\n};\n","import getSliceRange from './getSliceRange';\nimport getTargetVolumeAndSpacingInNormalDir from './getTargetVolumeAndSpacingInNormalDir';\nfunction getVolumeSliceRangeInfo(viewport, volumeId, useSlabThickness = false) {\n    const camera = viewport.getCamera();\n    const { focalPoint, viewPlaneNormal } = camera;\n    const { spacingInNormalDirection, actorUID } = getTargetVolumeAndSpacingInNormalDir(viewport, camera, volumeId, useSlabThickness);\n    if (!actorUID) {\n        throw new Error(`Could not find image volume with id ${volumeId} in the viewport`);\n    }\n    const actorEntry = viewport.getActor(actorUID);\n    if (!actorEntry) {\n        console.warn('No actor found for with actorUID of', actorUID);\n        return null;\n    }\n    const volumeActor = actorEntry.actor;\n    const sliceRange = getSliceRange(volumeActor, viewPlaneNormal, focalPoint);\n    return {\n        sliceRange,\n        spacingInNormalDirection,\n        camera,\n    };\n}\nexport default getVolumeSliceRangeInfo;\n","import getVolumeSliceRangeInfo from './getVolumeSliceRangeInfo';\nfunction getVolumeViewportScrollInfo(viewport, volumeId, useSlabThickness = false) {\n    const { sliceRange, spacingInNormalDirection, camera } = getVolumeSliceRangeInfo(viewport, volumeId, useSlabThickness);\n    const { min, max, current } = sliceRange;\n    const numScrollSteps = Math.round((max - min) / spacingInNormalDirection);\n    const fraction = (current - min) / (max - min);\n    const floatingStepNumber = fraction * numScrollSteps;\n    const currentStepIndex = Math.round(floatingStepNumber);\n    return {\n        numScrollSteps,\n        currentStepIndex,\n        sliceRangeInfo: {\n            sliceRange,\n            spacingInNormalDirection,\n            camera,\n        },\n    };\n}\nexport default getVolumeViewportScrollInfo;\n","export const hasFloatScalingParameters = (scalingParameters) => {\n    const hasFloatRescale = Object.values(scalingParameters).some((value) => typeof value === 'number' && !Number.isInteger(value));\n    return hasFloatRescale;\n};\n","export default function hasNaNValues(input) {\n    if (Array.isArray(input)) {\n        return input.some((value) => Number.isNaN(value));\n    }\n    return Number.isNaN(input);\n}\n","export default function imageIdToURI(imageId) {\n    const colonIndex = imageId.indexOf(':');\n    return imageId.substring(colonIndex + 1);\n}\n","import { addProvider } from '../metaData';\nconst retrieveConfigurationState = new Map();\nconst IMAGE_RETRIEVE_CONFIGURATION = 'imageRetrieveConfiguration';\nconst imageRetrieveMetadataProvider = {\n    IMAGE_RETRIEVE_CONFIGURATION,\n    clear: () => {\n        retrieveConfigurationState.clear();\n    },\n    add: (key, payload) => {\n        retrieveConfigurationState.set(key, payload);\n    },\n    clone: () => {\n        return new Map(retrieveConfigurationState);\n    },\n    restore: (state) => {\n        retrieveConfigurationState.clear();\n        state.forEach((value, key) => {\n            retrieveConfigurationState.set(key, value);\n        });\n    },\n    get: (type, ...queries) => {\n        if (type === IMAGE_RETRIEVE_CONFIGURATION) {\n            return queries\n                .map((query) => retrieveConfigurationState.get(query))\n                .find((it) => it !== undefined);\n        }\n    },\n};\naddProvider(imageRetrieveMetadataProvider.get.bind(imageRetrieveMetadataProvider));\nexport default imageRetrieveMetadataProvider;\n","var EventListenerPhases;\n(function (EventListenerPhases) {\n    EventListenerPhases[EventListenerPhases[\"None\"] = 0] = \"None\";\n    EventListenerPhases[EventListenerPhases[\"Capture\"] = 1] = \"Capture\";\n    EventListenerPhases[EventListenerPhases[\"Bubble\"] = 2] = \"Bubble\";\n})(EventListenerPhases || (EventListenerPhases = {}));\nclass TargetEventListeners {\n    constructor(target) {\n        this._eventListeners = new Map();\n        this._children = new Map();\n        this._target = target;\n    }\n    get isEmpty() {\n        return this._eventListeners.size === 0 && this._children.size === 0;\n    }\n    addEventListener(type, callback, options) {\n        const dotIndex = type.indexOf('.');\n        const isNamespace = dotIndex !== -1;\n        if (isNamespace) {\n            const namespaceToken = type.substring(0, dotIndex);\n            let childElementEventListener = this._children.get(namespaceToken);\n            if (!childElementEventListener) {\n                childElementEventListener = new TargetEventListeners(this._target);\n                this._children.set(namespaceToken, childElementEventListener);\n            }\n            type = type.substring(dotIndex + 1);\n            childElementEventListener.addEventListener(type, callback, options);\n        }\n        else {\n            this._addEventListener(type, callback, options);\n        }\n    }\n    removeEventListener(type, callback, options) {\n        const dotIndex = type.indexOf('.');\n        const isNamespace = dotIndex !== -1;\n        if (isNamespace) {\n            const namespaceToken = type.substring(0, dotIndex);\n            const childElementEventListener = this._children.get(namespaceToken);\n            if (!childElementEventListener) {\n                return;\n            }\n            type = type.substring(dotIndex + 1);\n            childElementEventListener.removeEventListener(type, callback, options);\n            if (childElementEventListener.isEmpty) {\n                this._children.delete(namespaceToken);\n            }\n        }\n        else {\n            this._removeEventListener(type, callback, options);\n        }\n    }\n    reset() {\n        Array.from(this._children.entries()).forEach(([namespace, child]) => {\n            child.reset();\n            if (child.isEmpty) {\n                this._children.delete(namespace);\n            }\n            else {\n                throw new Error('Child is not empty and cannot be removed');\n            }\n        });\n        this._unregisterAllEvents();\n    }\n    _addEventListener(type, callback, options) {\n        let listenersMap = this._eventListeners.get(type);\n        if (!listenersMap) {\n            listenersMap = new Map();\n            this._eventListeners.set(type, listenersMap);\n        }\n        const useCapture = options?.capture ?? false;\n        const listenerPhase = useCapture\n            ? EventListenerPhases.Capture\n            : EventListenerPhases.Bubble;\n        const registeredPhases = listenersMap.get(callback) ?? EventListenerPhases.None;\n        if (registeredPhases & listenerPhase) {\n            console.warn('A listener is already registered for this phase');\n            return;\n        }\n        listenersMap.set(callback, registeredPhases | listenerPhase);\n        this._target.addEventListener(type, callback, options);\n    }\n    _removeEventListener(type, callback, options) {\n        const useCapture = options?.capture ?? false;\n        const listenerPhase = useCapture\n            ? EventListenerPhases.Capture\n            : EventListenerPhases.Bubble;\n        const listenersMap = this._eventListeners.get(type);\n        if (!listenersMap) {\n            return;\n        }\n        const callbacks = callback ? [callback] : Array.from(listenersMap.keys());\n        callbacks.forEach((callbackItem) => {\n            const registeredPhases = listenersMap.get(callbackItem) ?? EventListenerPhases.None;\n            const phaseRegistered = !!(registeredPhases & listenerPhase);\n            if (!phaseRegistered) {\n                return;\n            }\n            this._target.removeEventListener(type, callbackItem, options);\n            const newListenerPhase = registeredPhases ^ listenerPhase;\n            if (newListenerPhase === EventListenerPhases.None) {\n                listenersMap.delete(callbackItem);\n            }\n            else {\n                listenersMap.set(callbackItem, newListenerPhase);\n            }\n        });\n        if (!listenersMap.size) {\n            this._eventListeners.delete(type);\n        }\n    }\n    _unregisterAllListeners(type, listenersMap) {\n        Array.from(listenersMap.entries()).forEach(([listener, eventPhases]) => {\n            const startPhase = EventListenerPhases.Capture;\n            for (let currentPhase = startPhase; eventPhases; currentPhase <<= 1) {\n                if (!(eventPhases & currentPhase)) {\n                    continue;\n                }\n                const useCapture = currentPhase === EventListenerPhases.Capture ? true : false;\n                this.removeEventListener(type, listener, { capture: useCapture });\n                eventPhases ^= currentPhase;\n            }\n        });\n    }\n    _unregisterAllEvents() {\n        Array.from(this._eventListeners.entries()).forEach(([type, listenersMap]) => {\n            this._unregisterAllListeners(type, listenersMap);\n        });\n    }\n}\nexport { TargetEventListeners as default, TargetEventListeners };\n","import TargetEventListeners from './TargetEventListeners';\nclass MultiTargetEventListenerManager {\n    constructor() {\n        this._targetsEventListeners = new Map();\n    }\n    addEventListener(target, type, callback, options) {\n        let eventListeners = this._targetsEventListeners.get(target);\n        if (!eventListeners) {\n            eventListeners = new TargetEventListeners(target);\n            this._targetsEventListeners.set(target, eventListeners);\n        }\n        eventListeners.addEventListener(type, callback, options);\n    }\n    removeEventListener(target, type, callback, options) {\n        const eventListeners = this._targetsEventListeners.get(target);\n        if (!eventListeners) {\n            return;\n        }\n        eventListeners.removeEventListener(type, callback, options);\n        if (eventListeners.isEmpty) {\n            this._targetsEventListeners.delete(target);\n        }\n    }\n    reset() {\n        Array.from(this._targetsEventListeners.entries()).forEach(([target, targetEventListeners]) => {\n            targetEventListeners.reset();\n            this._targetsEventListeners.delete(target);\n        });\n    }\n}\nexport { MultiTargetEventListenerManager as default, MultiTargetEventListenerManager, };\n","export default function scaleRGBTransferFunction(rgbTransferFunction, scalingFactor) {\n    const size = rgbTransferFunction.getSize();\n    for (let index = 0; index < size; index++) {\n        const nodeValue1 = [];\n        rgbTransferFunction.getNodeValue(index, nodeValue1);\n        nodeValue1[1] = nodeValue1[1] * scalingFactor;\n        nodeValue1[2] = nodeValue1[2] * scalingFactor;\n        nodeValue1[3] = nodeValue1[3] * scalingFactor;\n        rgbTransferFunction.setNodeValue(index, nodeValue1);\n    }\n}\n","export default function getMinMax(storedPixelData) {\n    let min = storedPixelData[0];\n    let max = storedPixelData[0];\n    let storedPixel;\n    const numPixels = storedPixelData.length;\n    for (let index = 1; index < numPixels; index++) {\n        storedPixel = storedPixelData[index];\n        min = Math.min(min, storedPixel);\n        max = Math.max(max, storedPixel);\n    }\n    return {\n        min,\n        max,\n    };\n}\n","const LAST_RUNTIME_ID = Symbol('LastRuntimeId');\nconst GLOBAL_CONTEXT = {};\nconst DEFAULT_MAX = 0xffffffff;\nconst DEFAULT_SEPARATOR = '-';\nexport default function getRuntimeId(context, separator, max) {\n    return getNextRuntimeId(context !== null && typeof context === 'object' ? context : GLOBAL_CONTEXT, LAST_RUNTIME_ID, (typeof max === 'number' && max > 0 ? max : DEFAULT_MAX) >>> 0).join(typeof separator === 'string' ? separator : DEFAULT_SEPARATOR);\n}\nfunction getNextRuntimeId(context, symbol, max) {\n    let idComponents = context[symbol];\n    if (!(idComponents instanceof Array)) {\n        idComponents = [0];\n        Object.defineProperty(context, symbol, { value: idComponents });\n    }\n    for (let carry = true, i = 0; carry && i < idComponents.length; ++i) {\n        let n = idComponents[i] | 0;\n        if (n < max) {\n            carry = false;\n            n = n + 1;\n        }\n        else {\n            n = 0;\n            if (i + 1 === idComponents.length) {\n                idComponents.push(0);\n            }\n        }\n        idComponents[i] = n;\n    }\n    return idComponents;\n}\n","import imageIdToURI from './imageIdToURI';\nconst state = {};\nconst metadataProvider = {\n    add: (imageId, payload) => {\n        const imageURI = imageIdToURI(imageId);\n        state[imageURI] = payload;\n    },\n    get: (type, imageId) => {\n        if (type === 'calibratedPixelSpacing') {\n            const imageURI = imageIdToURI(imageId);\n            return state[imageURI];\n        }\n    },\n};\nexport default metadataProvider;\n","export default function isOpposite(v1, v2, tolerance = 1e-5) {\n    return (Math.abs(v1[0] + v2[0]) < tolerance &&\n        Math.abs(v1[1] + v2[1]) < tolerance &&\n        Math.abs(v1[2] + v2[2]) < tolerance);\n}\n","export default function indexWithinDimensions(index, dimensions) {\n    if (index[0] < 0 ||\n        index[0] >= dimensions[0] ||\n        index[1] < 0 ||\n        index[1] >= dimensions[1] ||\n        index[2] < 0 ||\n        index[2] >= dimensions[2]) {\n        return false;\n    }\n    return true;\n}\n","import { getRenderingEngines, getRenderingEngine, } from '../RenderingEngine/getRenderingEngine';\nfunction getVolumeViewportsContainingSameVolumes(targetViewport, renderingEngineId) {\n    let renderingEngines;\n    if (renderingEngineId) {\n        renderingEngines = [getRenderingEngine(renderingEngineId)];\n    }\n    else {\n        renderingEngines = getRenderingEngines();\n    }\n    const sameVolumesViewports = [];\n    renderingEngines.forEach((renderingEngine) => {\n        const targetActors = targetViewport.getActors();\n        const viewports = renderingEngine.getVolumeViewports();\n        for (const vp of viewports) {\n            const vpActors = vp.getActors();\n            if (vpActors.length !== targetActors.length) {\n                continue;\n            }\n            const sameVolumes = targetActors.every(({ uid }) => vpActors.find((vpActor) => uid === vpActor.uid));\n            if (sameVolumes) {\n                sameVolumesViewports.push(vp);\n            }\n        }\n    });\n    return sameVolumesViewports;\n}\nexport default getVolumeViewportsContainingSameVolumes;\n","const isPTPrescaledWithSUV = (image) => {\n    return image.preScale.scaled && image.preScale.scalingParameters.suvbw;\n};\nexport default isPTPrescaledWithSUV;\n","import { vec3 } from 'gl-matrix';\nimport getOrCreateCanvas, { EPSILON, } from '../RenderingEngine/helpers/getOrCreateCanvas';\nimport { ViewportType, Events } from '../enums';\nimport { getRenderingEngine } from '../RenderingEngine/getRenderingEngine';\nimport TiledRenderingEngine from '../RenderingEngine/TiledRenderingEngine';\nimport isPTPrescaledWithSUV from './isPTPrescaledWithSUV';\nexport default function renderToCanvasGPU(canvas, imageOrVolume, modality = undefined, renderingEngineId = '_thumbnails', viewportOptions = {\n    displayArea: { imageArea: [1, 1] },\n}) {\n    if (!canvas || !(canvas instanceof HTMLCanvasElement)) {\n        throw new Error('canvas element is required');\n    }\n    const isVolume = !imageOrVolume.imageId;\n    const image = !isVolume && imageOrVolume;\n    const volume = isVolume && imageOrVolume;\n    const imageIdToPrint = image.imageId || volume.volumeId;\n    const viewportId = `renderGPUViewport-${imageIdToPrint}`;\n    const element = document.createElement('div');\n    const devicePixelRatio = window.devicePixelRatio || 1;\n    if (!viewportOptions.displayArea) {\n        viewportOptions.displayArea = { imageArea: [1, 1] };\n    }\n    const originalWidth = canvas.width;\n    const originalHeight = canvas.height;\n    element.style.width = `${originalWidth / devicePixelRatio + EPSILON}px`;\n    element.style.height = `${originalHeight / devicePixelRatio + EPSILON}px`;\n    element.style.visibility = 'hidden';\n    element.style.position = 'absolute';\n    document.body.appendChild(element);\n    const uniqueId = viewportId.split(':').join('-');\n    element.setAttribute('viewport-id-for-remove', uniqueId);\n    const temporaryCanvas = getOrCreateCanvas(element);\n    const renderingEngine = getRenderingEngine(renderingEngineId) ||\n        new TiledRenderingEngine(renderingEngineId);\n    let viewport = renderingEngine.getViewport(viewportId);\n    if (!viewport) {\n        const viewportInput = {\n            viewportId,\n            type: isVolume ? ViewportType.ORTHOGRAPHIC : ViewportType.STACK,\n            element,\n            defaultOptions: {\n                ...viewportOptions,\n                suppressEvents: true,\n            },\n        };\n        renderingEngine.enableElement(viewportInput);\n        viewport = renderingEngine.getViewport(viewportId);\n    }\n    return new Promise((resolve) => {\n        let elementRendered = false;\n        let { viewReference } = viewportOptions;\n        const onImageRendered = (eventDetail) => {\n            if (elementRendered) {\n                return;\n            }\n            if (viewReference) {\n                const useViewRef = viewReference;\n                viewReference = null;\n                viewport.setViewReference(useViewRef);\n                viewport.render();\n                return;\n            }\n            const context = canvas.getContext('2d');\n            context.drawImage(temporaryCanvas, 0, 0, temporaryCanvas.width, temporaryCanvas.height, 0, 0, canvas.width, canvas.height);\n            const origin = viewport.canvasToWorld([0, 0]);\n            const topRight = viewport.canvasToWorld([\n                temporaryCanvas.width / devicePixelRatio,\n                0,\n            ]);\n            const bottomLeft = viewport.canvasToWorld([\n                0,\n                temporaryCanvas.height / devicePixelRatio,\n            ]);\n            const rightVector = vec3.sub([0, 0, 0], viewport.canvasToWorld([1 / devicePixelRatio, 0]), origin);\n            const downVector = vec3.sub([0, 0, 0], viewport.canvasToWorld([0, 1 / devicePixelRatio]), origin);\n            const thicknessMm = 1;\n            elementRendered = true;\n            element.removeEventListener(Events.IMAGE_RENDERED, onImageRendered);\n            setTimeout(() => {\n                renderingEngine.disableElement(viewportId);\n                const elements = document.querySelectorAll(`[viewport-id-for-remove=\"${uniqueId}\"]`);\n                elements.forEach((element) => {\n                    element.remove();\n                });\n            }, 0);\n            resolve({\n                origin,\n                bottomLeft,\n                topRight,\n                thicknessMm,\n                rightVector,\n                downVector,\n            });\n        };\n        element.addEventListener(Events.IMAGE_RENDERED, onImageRendered);\n        if (isVolume) {\n            viewport.setVolumes([volume], false, true);\n        }\n        else {\n            viewport.renderImageObject(imageOrVolume);\n        }\n        viewport.resetCamera();\n        if (modality === 'PT' && !isPTPrescaledWithSUV(image)) {\n            viewport.setProperties({\n                voiRange: {\n                    lower: image.minPixelValue,\n                    upper: image.maxPixelValue,\n                },\n            });\n        }\n        viewport.render();\n    });\n}\n","import getDefaultViewport from '../RenderingEngine/helpers/cpuFallback/rendering/getDefaultViewport';\nimport calculateTransform from '../RenderingEngine/helpers/cpuFallback/rendering/calculateTransform';\nimport drawImageSync from '../RenderingEngine/helpers/cpuFallback/drawImageSync';\nexport default function renderToCanvasCPU(canvas, imageOrVolume, modality, _renderingEngineId, _viewportOptions) {\n    const volume = imageOrVolume;\n    if (volume.volumeId) {\n        throw new Error('Unsupported volume rendering for CPU');\n    }\n    const image = imageOrVolume;\n    const viewport = getDefaultViewport(canvas, image, modality);\n    const enabledElement = {\n        canvas,\n        viewport,\n        image,\n        renderingTools: {},\n    };\n    enabledElement.transform = calculateTransform(enabledElement);\n    const invalidated = true;\n    return new Promise((resolve, reject) => {\n        drawImageSync(enabledElement, invalidated);\n        resolve(null);\n    });\n}\n","import { loadAndCacheImage } from '../loaders/imageLoader';\nimport * as metaData from '../metaData';\nimport { RequestType } from '../enums';\nimport imageLoadPoolManager from '../requestPool/imageLoadPoolManager';\nimport renderToCanvasGPU from './renderToCanvasGPU';\nimport renderToCanvasCPU from './renderToCanvasCPU';\nimport cache from '../cache/cache';\nexport default function loadImageToCanvas(options) {\n    const { canvas, imageId, viewReference, requestType = RequestType.Thumbnail, priority = -5, renderingEngineId = '_thumbnails', useCPURendering = false, thumbnail = false, imageAspect = false, viewportOptions: baseViewportOptions, } = options;\n    const volumeId = viewReference?.volumeId;\n    const isVolume = volumeId && !imageId;\n    const viewportOptions = viewReference && baseViewportOptions\n        ? { ...baseViewportOptions, viewReference }\n        : baseViewportOptions;\n    const renderFn = useCPURendering ? renderToCanvasCPU : renderToCanvasGPU;\n    return new Promise((resolve, reject) => {\n        function successCallback(imageOrVolume, imageId) {\n            const { modality } = metaData.get('generalSeriesModule', imageId) || {};\n            const image = !isVolume && imageOrVolume;\n            const volume = isVolume && imageOrVolume;\n            if (image) {\n                image.isPreScaled = image.isPreScaled || image.preScale?.scaled;\n            }\n            if (thumbnail) {\n                canvas.height = 256;\n                canvas.width = 256;\n            }\n            if (imageAspect && image) {\n                canvas.width = image && (canvas.height * image.width) / image.height;\n            }\n            canvas.style.width = `${canvas.width / devicePixelRatio}px`;\n            canvas.style.height = `${canvas.height / devicePixelRatio}px`;\n            if (volume && useCPURendering) {\n                reject(new Error('CPU rendering of volume not supported'));\n            }\n            renderFn(canvas, imageOrVolume, modality, renderingEngineId, viewportOptions).then(resolve);\n        }\n        function errorCallback(error, imageId) {\n            console.error(error, imageId);\n            reject(error);\n        }\n        function sendRequest(imageId, imageIdIndex, options) {\n            return loadAndCacheImage(imageId, options).then((image) => {\n                successCallback.call(this, image, imageId);\n            }, (error) => {\n                errorCallback.call(this, error, imageId);\n            });\n        }\n        const options = {\n            useRGBA: !!useCPURendering,\n            requestType,\n        };\n        if (volumeId) {\n            const volume = cache.getVolume(volumeId);\n            if (!volume) {\n                reject(new Error(`Volume id ${volumeId} not found in cache`));\n            }\n            const useImageId = volume.imageIds[0];\n            successCallback(volume, useImageId);\n        }\n        else {\n            imageLoadPoolManager.addRequest(sendRequest.bind(null, imageId, null, options), requestType, { imageId }, priority);\n        }\n    });\n}\n","export function asArray(item) {\n    if (Array.isArray(item)) {\n        return item;\n    }\n    return [item];\n}\n","import eventTarget from '../../eventTarget';\nimport { asArray } from '../asArray';\nconst Events = {\n    HISTORY_UNDO: 'CORNERSTONE_TOOLS_HISTORY_UNDO',\n    HISTORY_REDO: 'CORNERSTONE_TOOLS_HISTORY_REDO',\n};\nexport class HistoryMemo {\n    constructor(label = 'Tools', size = 50) {\n        this.position = -1;\n        this.redoAvailable = 0;\n        this.undoAvailable = 0;\n        this.ring = new Array();\n        this.isRecordingGrouped = false;\n        this.label = label;\n        this._size = size;\n    }\n    get size() {\n        return this._size;\n    }\n    set size(newSize) {\n        this.ring = new Array(newSize);\n        this._size = newSize;\n        this.position = -1;\n        this.redoAvailable = 0;\n        this.undoAvailable = 0;\n    }\n    get canUndo() {\n        return this.undoAvailable > 0;\n    }\n    get canRedo() {\n        return this.redoAvailable > 0;\n    }\n    undo(items = 1) {\n        while (items > 0 && this.undoAvailable > 0) {\n            const item = this.ring[this.position];\n            for (const subitem of asArray(item).reverse()) {\n                subitem.restoreMemo(true);\n                this.dispatchHistoryEvent({ item: subitem, isUndo: true });\n            }\n            items--;\n            this.redoAvailable++;\n            this.undoAvailable--;\n            this.position = (this.position - 1 + this.size) % this.size;\n        }\n    }\n    undoIf(condition) {\n        if (this.undoAvailable > 0 && condition(this.ring[this.position])) {\n            this.undo();\n            return true;\n        }\n        return false;\n    }\n    dispatchHistoryEvent({ item, isUndo }) {\n        if (item.id) {\n            eventTarget.dispatchEvent(new CustomEvent(isUndo ? Events.HISTORY_UNDO : Events.HISTORY_REDO, {\n                detail: {\n                    isUndo,\n                    id: item.id,\n                    operationType: item.operationType || 'annotation',\n                    memo: item,\n                },\n            }));\n        }\n    }\n    redo(items = 1) {\n        while (items > 0 && this.redoAvailable > 0) {\n            const newPosition = (this.position + 1) % this.size;\n            const item = this.ring[newPosition];\n            for (const subitem of asArray(item).reverse()) {\n                subitem.restoreMemo(false);\n                this.dispatchHistoryEvent({ item: subitem, isUndo: false });\n            }\n            items--;\n            this.position = newPosition;\n            this.undoAvailable++;\n            this.redoAvailable--;\n        }\n    }\n    initializeGroupItem() {\n        this.redoAvailable = 0;\n        if (this.undoAvailable < this._size) {\n            this.undoAvailable++;\n        }\n        this.position = (this.position + 1) % this._size;\n        this.ring[this.position] = [];\n    }\n    startGroupRecording() {\n        this.isRecordingGrouped = true;\n        this.initializeGroupItem();\n    }\n    rollbackUnusedGroupItem() {\n        this.ring[this.position] = undefined;\n        this.position = (this.position - 1) % this._size;\n        this.undoAvailable--;\n    }\n    endGroupRecording() {\n        this.isRecordingGrouped = false;\n        const lastItem = this.ring[this.position];\n        const lastItemIsEmpty = Array.isArray(lastItem) && lastItem.length === 0;\n        if (lastItemIsEmpty) {\n            this.rollbackUnusedGroupItem();\n        }\n    }\n    pushGrouped(memo) {\n        const lastMemo = this.ring[this.position];\n        if (Array.isArray(lastMemo)) {\n            lastMemo.push(memo);\n            return memo;\n        }\n        throw new Error('Last item should be an array for grouped memos.');\n    }\n    push(item) {\n        if (!item) {\n            return;\n        }\n        const memo = item.restoreMemo\n            ? item\n            : item.createMemo?.();\n        if (!memo) {\n            return;\n        }\n        if (this.isRecordingGrouped) {\n            return this.pushGrouped(memo);\n        }\n        this.redoAvailable = 0;\n        if (this.undoAvailable < this._size) {\n            this.undoAvailable++;\n        }\n        this.position = (this.position + 1) % this._size;\n        this.ring[this.position] = memo;\n        return memo;\n    }\n}\nconst DefaultHistoryMemo = new HistoryMemo();\nexport { DefaultHistoryMemo };\n","import { vec3 } from 'gl-matrix';\nimport { get } from '../metaData';\nfunction worldToImageCoords(imageId, worldCoords) {\n    const imagePlaneModule = get('imagePlaneModule', imageId);\n    if (!imagePlaneModule) {\n        throw new Error(`No imagePlaneModule found for imageId: ${imageId}`);\n    }\n    const { columnCosines, rowCosines, imagePositionPatient: origin, } = imagePlaneModule;\n    let { columnPixelSpacing, rowPixelSpacing } = imagePlaneModule;\n    columnPixelSpacing ||= 1;\n    rowPixelSpacing ||= 1;\n    const newOrigin = vec3.create();\n    vec3.scaleAndAdd(newOrigin, origin, columnCosines, -columnPixelSpacing / 2);\n    vec3.scaleAndAdd(newOrigin, newOrigin, rowCosines, -rowPixelSpacing / 2);\n    const sub = vec3.create();\n    vec3.sub(sub, worldCoords, newOrigin);\n    const rowDistance = vec3.dot(sub, rowCosines);\n    const columnDistance = vec3.dot(sub, columnCosines);\n    const imageCoords = [\n        rowDistance / rowPixelSpacing,\n        columnDistance / columnPixelSpacing,\n    ];\n    return imageCoords;\n}\nexport default worldToImageCoords;\n","import { vec3 } from 'gl-matrix';\nimport { get } from '../metaData';\nexport default function imageToWorldCoords(imageId, imageCoords) {\n    const imagePlaneModule = get('imagePlaneModule', imageId);\n    if (!imagePlaneModule) {\n        throw new Error(`No imagePlaneModule found for imageId: ${imageId}`);\n    }\n    const { columnCosines, rowCosines, imagePositionPatient: origin, } = imagePlaneModule;\n    let { columnPixelSpacing, rowPixelSpacing } = imagePlaneModule;\n    columnPixelSpacing ||= 1;\n    rowPixelSpacing ||= 1;\n    const imageCoordsInWorld = vec3.create();\n    vec3.scaleAndAdd(imageCoordsInWorld, origin, rowCosines, rowPixelSpacing * (imageCoords[0] - 0.5));\n    vec3.scaleAndAdd(imageCoordsInWorld, imageCoordsInWorld, columnCosines, columnPixelSpacing * (imageCoords[1] - 0.5));\n    return Array.from(imageCoordsInWorld);\n}\n","import { getRenderingEngines } from '../RenderingEngine/getRenderingEngine';\nexport default function getViewportsWithImageURI(imageURI) {\n    const renderingEngines = getRenderingEngines();\n    const viewports = [];\n    renderingEngines.forEach((renderingEngine) => {\n        const viewportsForRenderingEngine = renderingEngine.getViewports();\n        viewportsForRenderingEngine.forEach((viewport) => {\n            if (viewport.hasImageURI(imageURI)) {\n                viewports.push(viewport);\n            }\n        });\n    });\n    return viewports;\n}\n","import { vec3 } from 'gl-matrix';\nimport * as planar from './planar';\nimport * as metaData from '../metaData';\nexport default function getClosestStackImageIndexForPoint(point, viewport) {\n    const minimalDistance = calculateMinimalDistanceForStackViewport(point, viewport);\n    return minimalDistance ? minimalDistance.index : null;\n}\nexport function calculateMinimalDistanceForStackViewport(point, viewport) {\n    const imageIds = viewport.getImageIds();\n    const currentImageIdIndex = viewport.getCurrentImageIdIndex();\n    if (imageIds.length === 0) {\n        return null;\n    }\n    const getDistance = (imageId) => {\n        const planeMetadata = getPlaneMetadata(imageId);\n        if (!planeMetadata) {\n            return null;\n        }\n        const plane = planar.planeEquation(planeMetadata.planeNormal, planeMetadata.imagePositionPatient);\n        const distance = planar.planeDistanceToPoint(plane, point);\n        return distance;\n    };\n    const closestStack = {\n        distance: getDistance(imageIds[currentImageIdIndex]) ?? Infinity,\n        index: currentImageIdIndex,\n    };\n    const higherImageIds = imageIds.slice(currentImageIdIndex + 1);\n    for (let i = 0; i < higherImageIds.length; i++) {\n        const id = higherImageIds[i];\n        const distance = getDistance(id);\n        if (distance === null) {\n            continue;\n        }\n        if (distance <= closestStack.distance) {\n            closestStack.distance = distance;\n            closestStack.index = i + currentImageIdIndex + 1;\n        }\n        else {\n            break;\n        }\n    }\n    const lowerImageIds = imageIds.slice(0, currentImageIdIndex);\n    for (let i = lowerImageIds.length - 1; i >= 0; i--) {\n        const id = lowerImageIds[i];\n        const distance = getDistance(id);\n        if (distance === null || distance === closestStack.distance) {\n            continue;\n        }\n        if (distance < closestStack.distance) {\n            closestStack.distance = distance;\n            closestStack.index = i;\n        }\n        else {\n            break;\n        }\n    }\n    return closestStack.distance === Infinity ? null : closestStack;\n}\nfunction getPlaneMetadata(imageId) {\n    const targetImagePlane = metaData.get('imagePlaneModule', imageId);\n    if (!targetImagePlane ||\n        !(targetImagePlane.rowCosines instanceof Array &&\n            targetImagePlane.rowCosines.length === 3) ||\n        !(targetImagePlane.columnCosines instanceof Array &&\n            targetImagePlane.columnCosines.length === 3) ||\n        !(targetImagePlane.imagePositionPatient instanceof Array &&\n            targetImagePlane.imagePositionPatient.length === 3)) {\n        return null;\n    }\n    const { rowCosines, columnCosines, imagePositionPatient, } = targetImagePlane;\n    const rowVec = vec3.set(vec3.create(), ...rowCosines);\n    const colVec = vec3.set(vec3.create(), ...columnCosines);\n    const planeNormal = vec3.cross(vec3.create(), rowVec, colVec);\n    return { rowCosines, columnCosines, imagePositionPatient, planeNormal };\n}\n","import { glMatrix, vec3 } from 'gl-matrix';\nimport { transformCanvasToIJK } from './transformCanvasToIJK';\nfunction getCurrentVolumeViewportSlice(viewport) {\n    const { width: canvasWidth, height: canvasHeight } = viewport.getCanvas();\n    const { sliceToIndexMatrix, indexToSliceMatrix } = viewport.getSliceViewInfo();\n    const ijkOriginPoint = transformCanvasToIJK(viewport, [0, 0]);\n    const ijkRowPoint = transformCanvasToIJK(viewport, [canvasWidth - 1, 0]);\n    const ijkColPoint = transformCanvasToIJK(viewport, [0, canvasHeight - 1]);\n    const ijkRowVec = vec3.sub(vec3.create(), ijkRowPoint, ijkOriginPoint);\n    const ijkColVec = vec3.sub(vec3.create(), ijkColPoint, ijkOriginPoint);\n    const ijkSliceVec = vec3.cross(vec3.create(), ijkRowVec, ijkColVec);\n    vec3.normalize(ijkRowVec, ijkRowVec);\n    vec3.normalize(ijkColVec, ijkColVec);\n    vec3.normalize(ijkSliceVec, ijkSliceVec);\n    const maxIJKRowVec = Math.max(Math.abs(ijkRowVec[0]), Math.abs(ijkRowVec[1]), Math.abs(ijkRowVec[2]));\n    const maxIJKColVec = Math.max(Math.abs(ijkColVec[0]), Math.abs(ijkColVec[1]), Math.abs(ijkColVec[2]));\n    if (!glMatrix.equals(1, maxIJKRowVec) || !glMatrix.equals(1, maxIJKColVec)) {\n        throw new Error('Livewire is not available for rotate/oblique viewports');\n    }\n    const { voxelManager } = viewport.getImageData();\n    const sliceViewInfo = viewport.getSliceViewInfo();\n    const scalarData = voxelManager.getSliceData(sliceViewInfo);\n    return {\n        width: sliceViewInfo.width,\n        height: sliceViewInfo.height,\n        scalarData,\n        sliceToIndexMatrix,\n        indexToSliceMatrix,\n    };\n}\nexport { getCurrentVolumeViewportSlice as default, getCurrentVolumeViewportSlice, };\n","import { mat4 } from 'gl-matrix';\nimport { addProvider } from '../metaData';\nconst state = {};\nconst spatialRegistrationMetadataProvider = {\n    add: (query, payload) => {\n        const [viewportId1, viewportId2] = query;\n        const entryId = `${viewportId1}_${viewportId2}`;\n        if (!state[entryId]) {\n            state[entryId] = {};\n        }\n        state[entryId] = payload;\n    },\n    get: (type, viewportId1, viewportId2) => {\n        if (type !== 'spatialRegistrationModule') {\n            return;\n        }\n        const entryId = `${viewportId1}_${viewportId2}`;\n        if (state[entryId]) {\n            return state[entryId];\n        }\n        const entryIdReverse = `${viewportId2}_${viewportId1}`;\n        if (state[entryIdReverse]) {\n            return mat4.invert(mat4.create(), state[entryIdReverse]);\n        }\n    },\n};\naddProvider(spatialRegistrationMetadataProvider.get.bind(spatialRegistrationMetadataProvider));\nexport default spatialRegistrationMetadataProvider;\n","import { vec3, mat4 } from 'gl-matrix';\nimport spatialRegistrationMetadataProvider from './spatialRegistrationMetadataProvider';\nimport { get } from '../metaData';\nconst ALLOWED_DELTA = 0.05;\nfunction calculateViewportsSpatialRegistration(viewport1, viewport2) {\n    const imageId1 = viewport1.getSliceIndex();\n    const imageId2 = viewport2.getSliceIndex();\n    const imagePlaneModule1 = get('imagePlaneModule', imageId1.toString());\n    const imagePlaneModule2 = get('imagePlaneModule', imageId2.toString());\n    if (!imagePlaneModule1 || !imagePlaneModule2) {\n        console.log('Viewport spatial registration requires image plane module');\n        return;\n    }\n    const { imageOrientationPatient: iop2 } = imagePlaneModule2;\n    const isSameImagePlane = imagePlaneModule1.imageOrientationPatient.every((v, i) => Math.abs(v - iop2[i]) < ALLOWED_DELTA);\n    if (!isSameImagePlane) {\n        console.log('Viewport spatial registration only supported for same orientation (hence translation only) for now', imagePlaneModule1?.imageOrientationPatient, imagePlaneModule2?.imageOrientationPatient);\n        return;\n    }\n    const imagePositionPatient1 = imagePlaneModule1.imagePositionPatient;\n    const imagePositionPatient2 = imagePlaneModule2.imagePositionPatient;\n    const translation = vec3.subtract(vec3.create(), imagePositionPatient1, imagePositionPatient2);\n    const mat = mat4.fromTranslation(mat4.create(), translation);\n    spatialRegistrationMetadataProvider.add([viewport1.id, viewport2.id], mat);\n}\nexport default calculateViewportsSpatialRegistration;\n","export default function getViewportImageCornersInWorld(viewport) {\n    const { imageData, dimensions } = viewport.getImageData() || {};\n    if (!imageData || !dimensions) {\n        return [];\n    }\n    const { canvas } = viewport;\n    const ratio = window.devicePixelRatio;\n    const topLeftCanvas = [0, 0];\n    const topRightCanvas = [canvas.width / ratio, 0];\n    const bottomRightCanvas = [\n        canvas.width / ratio,\n        canvas.height / ratio,\n    ];\n    const bottomLeftCanvas = [0, canvas.height / ratio];\n    const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n    const topRightWorld = viewport.canvasToWorld(topRightCanvas);\n    const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n    const bottomLeftWorld = viewport.canvasToWorld(bottomLeftCanvas);\n    const topLeftImage = imageData.worldToIndex(topLeftWorld);\n    const topRightImage = imageData.worldToIndex(topRightWorld);\n    const bottomRightImage = imageData.worldToIndex(bottomRightWorld);\n    const bottomLeftImage = imageData.worldToIndex(bottomLeftWorld);\n    return _getStackViewportImageCorners({\n        dimensions,\n        imageData,\n        topLeftImage,\n        topRightImage,\n        bottomRightImage,\n        bottomLeftImage,\n        topLeftWorld,\n        topRightWorld,\n        bottomRightWorld,\n        bottomLeftWorld,\n    });\n}\nfunction _getStackViewportImageCorners({ dimensions, imageData, topLeftImage, topRightImage, bottomRightImage, bottomLeftImage, topLeftWorld, topRightWorld, bottomRightWorld, bottomLeftWorld, }) {\n    const topLeftImageWorld = _isInBounds(topLeftImage, dimensions)\n        ? topLeftWorld\n        : imageData.indexToWorld([0, 0, 0]);\n    const topRightImageWorld = _isInBounds(topRightImage, dimensions)\n        ? topRightWorld\n        : imageData.indexToWorld([dimensions[0] - 1, 0, 0]);\n    const bottomRightImageWorld = _isInBounds(bottomRightImage, dimensions)\n        ? bottomRightWorld\n        : imageData.indexToWorld([\n            dimensions[0] - 1,\n            dimensions[1] - 1,\n            0,\n        ]);\n    const bottomLeftImageWorld = _isInBounds(bottomLeftImage, dimensions)\n        ? bottomLeftWorld\n        : imageData.indexToWorld([0, dimensions[1] - 1, 0]);\n    return [\n        topLeftImageWorld,\n        topRightImageWorld,\n        bottomLeftImageWorld,\n        bottomRightImageWorld,\n    ];\n}\nfunction _isInBounds(imageCoord, dimensions) {\n    return (imageCoord[0] > 0 ||\n        imageCoord[0] < dimensions[0] - 1 ||\n        imageCoord[1] > 0 ||\n        imageCoord[1] < dimensions[1] - 1 ||\n        imageCoord[2] > 0 ||\n        imageCoord[2] < dimensions[2] - 1);\n}\n","import StackViewport from '../RenderingEngine/StackViewport';\nimport getEnabledElement from '../getEnabledElement';\nfunction getImageLegacy(element) {\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        return;\n    }\n    const { viewport } = enabledElement;\n    if (!(viewport instanceof StackViewport)) {\n        throw new Error(`An image can only be fetched for a stack viewport and not for a viewport of type: ${viewport.type}`);\n    }\n    return viewport.getCornerstoneImage();\n}\nexport default getImageLegacy;\n","import * as metaData from '../metaData';\nimport isEqual from './isEqual';\nfunction isValidVolume(imageIds) {\n    if (imageIds.length <= 1) {\n        return false;\n    }\n    const imageId0 = imageIds[0];\n    const { modality, seriesInstanceUID } = metaData.get('generalSeriesModule', imageId0);\n    const { imageOrientationPatient, pixelSpacing, frameOfReferenceUID, columns, rows, usingDefaultValues, } = metaData.get('imagePlaneModule', imageId0);\n    if (usingDefaultValues) {\n        return false;\n    }\n    const baseMetadata = {\n        modality,\n        imageOrientationPatient,\n        pixelSpacing,\n        frameOfReferenceUID,\n        columns,\n        rows,\n        seriesInstanceUID,\n    };\n    let validVolume = true;\n    for (let i = 0; i < imageIds.length; i++) {\n        const imageId = imageIds[i];\n        const { modality, seriesInstanceUID } = metaData.get('generalSeriesModule', imageId);\n        const { imageOrientationPatient, pixelSpacing, columns, rows } = metaData.get('imagePlaneModule', imageId);\n        if (seriesInstanceUID !== baseMetadata.seriesInstanceUID) {\n            validVolume = false;\n            break;\n        }\n        if (modality !== baseMetadata.modality) {\n            validVolume = false;\n            break;\n        }\n        if (columns !== baseMetadata.columns) {\n            validVolume = false;\n            break;\n        }\n        if (rows !== baseMetadata.rows) {\n            validVolume = false;\n            break;\n        }\n        if (!isEqual(imageOrientationPatient, baseMetadata.imageOrientationPatient)) {\n            validVolume = false;\n            break;\n        }\n        if (!isEqual(pixelSpacing, baseMetadata.pixelSpacing)) {\n            validVolume = false;\n            break;\n        }\n    }\n    return validVolume;\n}\nexport { isValidVolume };\n","export const videoUIDs = new Set([\n    '1.2.840.10008.1.2.4.100',\n    '1.2.840.10008.1.2.4.100.1',\n    '1.2.840.10008.1.2.4.101',\n    '1.2.840.10008.1.2.4.101.1',\n    '1.2.840.10008.1.2.4.102',\n    '1.2.840.10008.1.2.4.102.1',\n    '1.2.840.10008.1.2.4.103',\n    '1.2.840.10008.1.2.4.103.1',\n    '1.2.840.10008.1.2.4.104',\n    '1.2.840.10008.1.2.4.104.1',\n    '1.2.840.10008.1.2.4.105',\n    '1.2.840.10008.1.2.4.105.1',\n    '1.2.840.10008.1.2.4.106',\n    '1.2.840.10008.1.2.4.106.1',\n    '1.2.840.10008.1.2.4.107',\n    '1.2.840.10008.1.2.4.108',\n]);\nexport default function isVideoTransferSyntax(uidOrUids) {\n    if (!uidOrUids) {\n        return false;\n    }\n    const uids = Array.isArray(uidOrUids) ? uidOrUids : [uidOrUids];\n    return uids.find((uid) => videoUIDs.has(uid));\n}\n","import { setVolumesForViewports } from '../RenderingEngine/helpers';\nimport { createAndCacheVolume, getUnknownVolumeLoaderSchema, } from '../loaders/volumeLoader';\nimport { Events, ViewportType } from '../enums';\nimport uuidv4 from './uuidv4';\nasync function convertStackToVolumeViewport({ viewport, options = {}, }) {\n    const renderingEngine = viewport.getRenderingEngine();\n    let volumeId = options.volumeId || `${uuidv4()}`;\n    if (volumeId.split(':').length === 0) {\n        const schema = getUnknownVolumeLoaderSchema();\n        volumeId = `${schema}:${volumeId}`;\n    }\n    const { id, element } = viewport;\n    const viewportId = options.viewportId || id;\n    const imageIds = viewport.getImageIds();\n    const prevViewPresentation = viewport.getViewPresentation();\n    const prevViewReference = viewport.getViewReference();\n    renderingEngine.enableElement({\n        viewportId,\n        type: ViewportType.ORTHOGRAPHIC,\n        element,\n        defaultOptions: {\n            background: options.background,\n            orientation: options.orientation,\n        },\n    });\n    const volume = (await createAndCacheVolume(volumeId, {\n        imageIds,\n    }));\n    volume.load();\n    const volumeViewport = renderingEngine.getViewport(viewportId);\n    await setVolumesForViewports(renderingEngine, [\n        {\n            volumeId,\n        },\n    ], [viewportId]);\n    const volumeViewportNewVolumeHandler = () => {\n        volumeViewport.render();\n        element.removeEventListener(Events.VOLUME_VIEWPORT_NEW_VOLUME, volumeViewportNewVolumeHandler);\n    };\n    const addVolumeViewportNewVolumeListener = () => {\n        element.addEventListener(Events.VOLUME_VIEWPORT_NEW_VOLUME, volumeViewportNewVolumeHandler);\n    };\n    addVolumeViewportNewVolumeListener();\n    volumeViewport.setViewPresentation(prevViewPresentation);\n    volumeViewport.setViewReference(prevViewReference);\n    volumeViewport.render();\n    return volumeViewport;\n}\nexport { convertStackToVolumeViewport };\n","import cache from '../cache/cache';\nimport { ImageVolume } from '../cache/classes/ImageVolume';\nimport { ViewportType } from '../enums';\nasync function convertVolumeToStackViewport({ viewport, options, }) {\n    const volumeViewport = viewport;\n    const { id, element } = volumeViewport;\n    const renderingEngine = viewport.getRenderingEngine();\n    const { background } = options;\n    const viewportId = options.viewportId || id;\n    const volume = cache.getVolume(volumeViewport.getVolumeId());\n    if (!(volume instanceof ImageVolume)) {\n        throw new Error('Currently, you cannot decache a volume that is not an ImageVolume. So, unfortunately, volumes such as nifti  (which are basic Volume, without imageIds) cannot be decached.');\n    }\n    const viewportInput = {\n        viewportId,\n        type: ViewportType.STACK,\n        element,\n        defaultOptions: {\n            background,\n        },\n    };\n    const prevView = volumeViewport.getViewReference();\n    renderingEngine.enableElement(viewportInput);\n    const stackViewport = renderingEngine.getViewport(viewportId);\n    await stackViewport.setStack(volume.imageIds);\n    stackViewport.setViewReference(prevView);\n    stackViewport.render();\n    return stackViewport;\n}\nexport { convertVolumeToStackViewport };\n","import { EPSILON } from '../constants';\nfunction roundNumber(value, precision = 2) {\n    if (Array.isArray(value)) {\n        return value.map((v) => roundNumber(v, precision)).join(', ');\n    }\n    if (value === undefined || value === null || value === '') {\n        return 'NaN';\n    }\n    value = Number(value);\n    const absValue = Math.abs(value);\n    if (absValue < 0.0001) {\n        return `${value}`;\n    }\n    const fixedPrecision = absValue >= 100\n        ? precision - 2\n        : absValue >= 10\n            ? precision - 1\n            : absValue >= 1\n                ? precision\n                : absValue >= 0.1\n                    ? precision + 1\n                    : absValue >= 0.01\n                        ? precision + 2\n                        : absValue >= 0.001\n                            ? precision + 3\n                            : precision + 4;\n    return value.toFixed(fixedPrecision);\n}\nfunction roundToPrecision(value) {\n    return Math.round(value / EPSILON) * EPSILON;\n}\nexport { roundToPrecision };\nexport default roundNumber;\n","export default function convertToGrayscale(scalarData, width, height) {\n    const isRGBA = scalarData.length === width * height * 4;\n    const isRGB = scalarData.length === width * height * 3;\n    if (isRGBA || isRGB) {\n        const newScalarData = new Float32Array(width * height);\n        let offset = 0;\n        let destOffset = 0;\n        const increment = isRGBA ? 4 : 3;\n        for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n                const r = scalarData[offset];\n                const g = scalarData[offset + 1];\n                const b = scalarData[offset + 2];\n                newScalarData[destOffset] = (r + g + b) / 3;\n                offset += increment;\n                destOffset++;\n            }\n        }\n        return newScalarData;\n    }\n    else {\n        return scalarData;\n    }\n}\n","import { VolumeViewport } from '../RenderingEngine';\nimport cache from '../cache/cache';\nfunction getViewportImageIds(viewport) {\n    if (viewport instanceof VolumeViewport) {\n        const volume = cache.getVolume(viewport.getVolumeId());\n        return volume.imageIds;\n    }\n    else if (viewport.getImageIds) {\n        return viewport.getImageIds();\n    }\n}\nexport default getViewportImageIds;\n","export function getRandomSampleFromArray(array, size) {\n    const clonedArray = [...array];\n    if (size >= clonedArray.length) {\n        shuffleArray(clonedArray);\n        return clonedArray;\n    }\n    shuffleArray(clonedArray);\n    return clonedArray.slice(0, size);\n}\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}\n","function componentToHex(c) {\n    const hex = c.toString(16);\n    return hex.length == 1 ? '0' + hex : hex;\n}\nfunction rgbToHex(r, g, b) {\n    return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b);\n}\nfunction hexToRgb(hex) {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n        ? {\n            r: parseInt(result[1], 16),\n            g: parseInt(result[2], 16),\n            b: parseInt(result[3], 16),\n        }\n        : null;\n}\nexport { hexToRgb, rgbToHex };\n","export function deepEqual(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n    if (obj1 == null || obj2 == null) {\n        return false;\n    }\n    try {\n        return JSON.stringify(obj1) === JSON.stringify(obj2);\n    }\n    catch (error) {\n        console.debug('Error in JSON.stringify during deep comparison:', error);\n        return obj1 === obj2;\n    }\n}\n","import * as metaData from '../metaData';\nconst groupBy = (array, key) => {\n    return array.reduce((rv, x) => {\n        (rv[x[key]] = rv[x[key]] || []).push(x);\n        return rv;\n    }, {});\n};\nfunction getIPPGroups(imageIds) {\n    const ippMetadata = imageIds.map((imageId) => {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId) || {};\n        return { imageId, imagePositionPatient };\n    });\n    if (!ippMetadata.every((item) => item.imagePositionPatient)) {\n        return null;\n    }\n    const positionGroups = groupBy(ippMetadata, 'imagePositionPatient');\n    const positions = Object.keys(positionGroups);\n    const frame_count = positionGroups[positions[0]].length;\n    if (frame_count === 1) {\n        return null;\n    }\n    const frame_count_equal = positions.every((k) => positionGroups[k].length === frame_count);\n    if (!frame_count_equal) {\n        return null;\n    }\n    return positionGroups;\n}\nfunction test4DTag(IPPGroups, value_getter) {\n    const frame_groups = {};\n    let first_frame_value_set = [];\n    const positions = Object.keys(IPPGroups);\n    for (let i = 0; i < positions.length; i++) {\n        const frame_value_set = new Set();\n        const frames = IPPGroups[positions[i]];\n        for (let j = 0; j < frames.length; j++) {\n            const frame_value = value_getter(frames[j].imageId) || 0;\n            frame_groups[frame_value] = frame_groups[frame_value] || [];\n            frame_groups[frame_value].push({ imageId: frames[j].imageId });\n            frame_value_set.add(frame_value);\n            if (frame_value_set.size - 1 < j) {\n                return undefined;\n            }\n        }\n        if (i == 0) {\n            first_frame_value_set = Array.from(frame_value_set);\n        }\n        else if (!setEquals(first_frame_value_set, frame_value_set)) {\n            return undefined;\n        }\n    }\n    return frame_groups;\n}\nfunction getTagValue(imageId, tag) {\n    const value = metaData.get(tag, imageId);\n    try {\n        return parseFloat(value);\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction getPhilipsPrivateBValue(imageId) {\n    const value = metaData.get('20011003', imageId);\n    try {\n        const { InlineBinary } = value;\n        if (InlineBinary) {\n            const value_bytes = atob(InlineBinary);\n            const ary_buf = new ArrayBuffer(value_bytes.length);\n            const dv = new DataView(ary_buf);\n            for (let i = 0; i < value_bytes.length; i++) {\n                dv.setUint8(i, value_bytes.charCodeAt(i));\n            }\n            return new Float32Array(ary_buf)[0];\n        }\n        return parseFloat(value);\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction getSiemensPrivateBValue(imageId) {\n    let value = metaData.get('0019100c', imageId) || metaData.get('0019100C', imageId);\n    try {\n        const { InlineBinary } = value;\n        if (InlineBinary) {\n            value = atob(InlineBinary);\n        }\n        return parseFloat(value);\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction getGEPrivateBValue(imageId) {\n    let value = metaData.get('00431039', imageId);\n    try {\n        const { InlineBinary } = value;\n        if (InlineBinary) {\n            value = atob(InlineBinary).split('//');\n        }\n        return parseFloat(value[0]) % 100000;\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction setEquals(set_a, set_b) {\n    if (set_a.length != set_b.size) {\n        return false;\n    }\n    for (let i = 0; i < set_a.length; i++) {\n        if (!set_b.has(set_a[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction getPetFrameReferenceTime(imageId) {\n    const moduleInfo = metaData.get('petImageModule', imageId);\n    return moduleInfo ? moduleInfo['frameReferenceTime'] : 0;\n}\nfunction splitImageIdsBy4DTags(imageIds) {\n    const positionGroups = getIPPGroups(imageIds);\n    if (!positionGroups) {\n        return { imageIdGroups: [imageIds], splittingTag: null };\n    }\n    const tags = [\n        'TemporalPositionIdentifier',\n        'DiffusionBValue',\n        'TriggerTime',\n        'EchoTime',\n        'EchoNumber',\n        'PhilipsPrivateBValue',\n        'SiemensPrivateBValue',\n        'GEPrivateBValue',\n        'PetFrameReferenceTime',\n    ];\n    const fncList2 = [\n        (imageId) => getTagValue(imageId, tags[0]),\n        (imageId) => getTagValue(imageId, tags[1]),\n        (imageId) => getTagValue(imageId, tags[2]),\n        (imageId) => getTagValue(imageId, tags[3]),\n        (imageId) => getTagValue(imageId, tags[4]),\n        getPhilipsPrivateBValue,\n        getSiemensPrivateBValue,\n        getGEPrivateBValue,\n        getPetFrameReferenceTime,\n    ];\n    for (let i = 0; i < fncList2.length; i++) {\n        const frame_groups = test4DTag(positionGroups, fncList2[i]);\n        if (frame_groups) {\n            const sortedKeys = Object.keys(frame_groups)\n                .map(Number.parseFloat)\n                .sort((a, b) => a - b);\n            const imageIdGroups = sortedKeys.map((key) => frame_groups[key].map((item) => item.imageId));\n            return { imageIdGroups, splittingTag: tags[i] };\n        }\n    }\n    return { imageIdGroups: [imageIds], splittingTag: null };\n}\nexport default splitImageIdsBy4DTags;\n","import splitImageIdsBy4DTags from './splitImageIdsBy4DTags';\nfunction getDynamicVolumeInfo(imageIds) {\n    const { imageIdGroups: timePoints, splittingTag } = splitImageIdsBy4DTags(imageIds);\n    const isDynamicVolume = timePoints.length > 1;\n    return { isDynamicVolume, timePoints, splittingTag };\n}\nexport default getDynamicVolumeInfo;\n","export default function scaleArray(array, scalingParameters) {\n    const arrayLength = array.length;\n    const { rescaleSlope, rescaleIntercept, suvbw } = scalingParameters;\n    if (scalingParameters.modality === 'PT' && typeof suvbw === 'number') {\n        for (let i = 0; i < arrayLength; i++) {\n            array[i] = suvbw * (array[i] * rescaleSlope + rescaleIntercept);\n        }\n    }\n    else {\n        for (let i = 0; i < arrayLength; i++) {\n            array[i] = array[i] * rescaleSlope + rescaleIntercept;\n        }\n    }\n    return array;\n}\n","export function clip(val, low, high) {\n    return Math.min(Math.max(low, val), high);\n}\nexport function clipToBox(point, box) {\n    point.x = clip(point.x, 0, box.width);\n    point.y = clip(point.y, 0, box.height);\n}\nexport default clip;\n","import { Events } from '../enums';\nimport { StackViewport, VolumeViewport } from '../RenderingEngine';\nimport getVolumeViewportScrollInfo from './getVolumeViewportScrollInfo';\nimport snapFocalPointToSlice from './snapFocalPointToSlice';\nimport getEnabledElement from '../getEnabledElement';\nimport triggerEvent from './triggerEvent';\nimport eventTarget from '../eventTarget';\nexport default function scroll(viewport, options) {\n    const enabledElement = getEnabledElement(viewport.element);\n    if (!enabledElement) {\n        throw new Error('Scroll::Viewport is not enabled (it might be disabled)');\n    }\n    if (viewport instanceof StackViewport &&\n        viewport.getImageIds().length === 0) {\n        throw new Error('Scroll::Stack Viewport has no images');\n    }\n    const { volumeId, delta, scrollSlabs } = options;\n    if (viewport instanceof VolumeViewport) {\n        scrollVolume(viewport, volumeId, delta, scrollSlabs);\n    }\n    else {\n        const imageIdIndex = viewport.getCurrentImageIdIndex();\n        if (imageIdIndex + delta >\n            viewport.getImageIds().length - 1 ||\n            imageIdIndex + delta < 0) {\n            const eventData = {\n                imageIdIndex,\n                direction: delta,\n            };\n            triggerEvent(eventTarget, Events.STACK_SCROLL_OUT_OF_BOUNDS, eventData);\n        }\n        viewport.scroll(delta, options.debounceLoading, options.loop);\n    }\n}\nexport function scrollVolume(viewport, volumeId, delta, scrollSlabs = false) {\n    const useSlabThickness = scrollSlabs;\n    const { numScrollSteps, currentStepIndex, sliceRangeInfo } = getVolumeViewportScrollInfo(viewport, volumeId, useSlabThickness);\n    if (!sliceRangeInfo) {\n        return;\n    }\n    const { sliceRange, spacingInNormalDirection, camera } = sliceRangeInfo;\n    const { focalPoint, viewPlaneNormal, position } = camera;\n    const { newFocalPoint, newPosition } = snapFocalPointToSlice(focalPoint, position, sliceRange, viewPlaneNormal, spacingInNormalDirection, delta);\n    viewport.setCamera({\n        focalPoint: newFocalPoint,\n        position: newPosition,\n    });\n    viewport.render();\n    const desiredStepIndex = currentStepIndex + delta;\n    const VolumeScrollEventDetail = {\n        volumeId,\n        viewport,\n        delta,\n        desiredStepIndex,\n        currentStepIndex,\n        numScrollSteps,\n        currentImageId: viewport.getCurrentImageId(),\n    };\n    if ((desiredStepIndex > numScrollSteps || desiredStepIndex < 0) &&\n        viewport.getCurrentImageId()) {\n        triggerEvent(eventTarget, Events.VOLUME_VIEWPORT_SCROLL_OUT_OF_BOUNDS, VolumeScrollEventDetail);\n    }\n    else {\n        triggerEvent(eventTarget, Events.VOLUME_VIEWPORT_SCROLL, VolumeScrollEventDetail);\n    }\n}\n","import clip from './clip';\nimport scroll from './scroll';\nimport getEnabledElement from '../getEnabledElement';\nimport StackViewport from '../RenderingEngine/StackViewport';\nasync function jumpToSlice(element, options = {}) {\n    const { imageIndex, debounceLoading, volumeId } = options;\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        throw new Error('Element has been disabled');\n    }\n    const { viewport } = enabledElement;\n    const { imageIndex: currentImageIndex, numberOfSlices } = _getImageSliceData(viewport, debounceLoading);\n    const imageIndexToJump = _getImageIndexToJump(numberOfSlices, imageIndex);\n    const delta = imageIndexToJump - currentImageIndex;\n    scroll(viewport, { delta, debounceLoading, volumeId });\n}\nfunction _getImageSliceData(viewport, debounceLoading) {\n    if (viewport instanceof StackViewport) {\n        return {\n            numberOfSlices: viewport.getImageIds().length,\n            imageIndex: debounceLoading\n                ? viewport.getTargetImageIdIndex()\n                : viewport.getCurrentImageIdIndex(),\n        };\n    }\n    return {\n        numberOfSlices: viewport.getNumberOfSlices(),\n        imageIndex: viewport.getSliceIndex(),\n    };\n}\nfunction _getImageIndexToJump(numberOfSlices, imageIndex) {\n    const lastSliceIndex = numberOfSlices - 1;\n    return clip(imageIndex, 0, lastSliceIndex);\n}\nexport { jumpToSlice };\n","import transformWorldToIndex from './transformWorldToIndex';\nimport transformIndexToWorld from './transformIndexToWorld';\nimport uuidv4 from './uuidv4';\nimport { createLocalVolume } from '../loaders/volumeLoader';\nimport cache from '../cache/cache';\nfunction createSubVolume(referencedVolumeId, boundsIJK, options = {}) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    if (!referencedVolume) {\n        throw new Error(`Referenced volume with id ${referencedVolumeId} does not exist.`);\n    }\n    const { metadata, spacing, direction, dimensions: refVolumeDim, } = referencedVolume;\n    const { minX, maxX, minY, maxY, minZ, maxZ } = boundsIJK;\n    const ijkTopLeft = [\n        Math.min(minX, maxX),\n        Math.min(minY, maxY),\n        Math.min(minZ, maxZ),\n    ];\n    const boundingBoxOriginWorld = transformIndexToWorld(referencedVolume.imageData, ijkTopLeft);\n    const dimensions = [\n        Math.abs(maxX - minX) + 1,\n        Math.abs(maxY - minY) + 1,\n        Math.abs(maxZ - minZ) + 1,\n    ];\n    const { targetBuffer } = options;\n    const subVolumeOptions = {\n        metadata,\n        dimensions,\n        spacing,\n        origin: boundingBoxOriginWorld,\n        direction,\n        targetBuffer,\n        scalarData: targetBuffer?.type === 'Float32Array'\n            ? new Float32Array(dimensions[0] * dimensions[1] * dimensions[2])\n            : undefined,\n    };\n    const subVolume = createLocalVolume(uuidv4(), subVolumeOptions);\n    const subVolumeData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const subVolumeSliceSize = dimensions[0] * dimensions[1];\n    const refVolumeSliceSize = refVolumeDim[0] * refVolumeDim[1];\n    const refVolumeData = referencedVolume.voxelManager.getCompleteScalarDataArray();\n    for (let z = 0; z < dimensions[2]; z++) {\n        for (let y = 0; y < dimensions[1]; y++) {\n            const rowStartWorld = transformIndexToWorld(subVolume.imageData, [\n                0,\n                y,\n                z,\n            ]);\n            const refVolumeRowStartIJK = transformWorldToIndex(referencedVolume.imageData, rowStartWorld);\n            const refVolumeRowStartOffset = refVolumeRowStartIJK[2] * refVolumeSliceSize +\n                refVolumeRowStartIJK[1] * refVolumeDim[0] +\n                refVolumeRowStartIJK[0];\n            const rowData = refVolumeData.slice(refVolumeRowStartOffset, refVolumeRowStartOffset + dimensions[0]);\n            const subVolumeLineStartOffset = z * subVolumeSliceSize + y * dimensions[0];\n            subVolumeData.set(rowData, subVolumeLineStartOffset);\n        }\n    }\n    subVolume.voxelManager.setCompleteScalarDataArray(subVolumeData);\n    return subVolume;\n}\nexport { createSubVolume as default, createSubVolume };\n","import { vec3 } from 'gl-matrix';\nimport { transformWorldToIndexContinuous } from './transformWorldToIndex';\nfunction getVolumeDirectionVectors(imageData, camera) {\n    const { viewUp, viewPlaneNormal } = camera;\n    const ijkOrigin = transformWorldToIndexContinuous(imageData, [0, 0, 0]);\n    const worldVecColDir = vec3.negate(vec3.create(), viewUp);\n    const worldVecSliceDir = vec3.negate(vec3.create(), viewPlaneNormal);\n    const worldVecRowDir = vec3.cross(vec3.create(), worldVecColDir, worldVecSliceDir);\n    const ijkVecColDir = vec3.sub(vec3.create(), transformWorldToIndexContinuous(imageData, worldVecColDir), ijkOrigin);\n    const ijkVecSliceDir = vec3.sub(vec3.create(), transformWorldToIndexContinuous(imageData, worldVecSliceDir), ijkOrigin);\n    vec3.normalize(ijkVecColDir, ijkVecColDir);\n    vec3.normalize(ijkVecSliceDir, ijkVecSliceDir);\n    const ijkVecRowDir = vec3.cross(vec3.create(), ijkVecColDir, ijkVecSliceDir);\n    return {\n        worldVecRowDir,\n        worldVecColDir,\n        worldVecSliceDir,\n        ijkVecRowDir,\n        ijkVecColDir,\n        ijkVecSliceDir,\n    };\n}\nexport { getVolumeDirectionVectors as default, getVolumeDirectionVectors };\n","export function calculateNeighborhoodStats(scalarData, dimensions, centerIjk, radius) {\n    const [width, height, numSlices] = dimensions;\n    const numPixelsPerSlice = width * height;\n    let sum = 0;\n    let sumSq = 0;\n    let count = 0;\n    const [cx, cy, cz] = centerIjk.map(Math.round);\n    for (let z = cz - radius; z <= cz + radius; z++) {\n        if (z < 0 || z >= numSlices) {\n            continue;\n        }\n        for (let y = cy - radius; y <= cy + radius; y++) {\n            if (y < 0 || y >= height) {\n                continue;\n            }\n            for (let x = cx - radius; x <= cx + radius; x++) {\n                if (x < 0 || x >= width) {\n                    continue;\n                }\n                const index = z * numPixelsPerSlice + y * width + x;\n                const value = scalarData[index];\n                sum += value;\n                sumSq += value * value;\n                count++;\n            }\n        }\n    }\n    if (count === 0) {\n        const centerIndex = cz * numPixelsPerSlice + cy * width + cx;\n        if (centerIndex >= 0 && centerIndex < scalarData.length) {\n            const centerValue = scalarData[centerIndex];\n            return { mean: centerValue, stdDev: 0, count: 1 };\n        }\n        else {\n            return { mean: 0, stdDev: 0, count: 0 };\n        }\n    }\n    const mean = sum / count;\n    const variance = sumSq / count - mean * mean;\n    const stdDev = Math.sqrt(Math.max(0, variance));\n    return { mean, stdDev, count };\n}\n","import { isEqual } from './isEqual';\nimport { CalibrationTypes } from '../enums';\nconst projectionRadiographSOPClassUIDs = new Set([\n    '1.2.840.10008.5.1.4.1.1.1',\n    '1.2.840.10008.5.1.4.1.1.1.1',\n    '1.2.840.10008.5.1.4.1.1.1.1.1',\n    '1.2.840.10008.5.1.4.1.1.1.2',\n    '1.2.840.10008.5.1.4.1.1.1.2.1',\n    '1.2.840.10008.5.1.4.1.1.1.3',\n    '1.2.840.10008.5.1.4.1.1.1.3.1',\n    '1.2.840.10008.5.1.4.1.1.12.1',\n    '1.2.840.10008.5.1.4.1.1.12.1.1',\n    '1.2.840.10008.5.1.4.1.1.12.2',\n    '1.2.840.10008.5.1.4.1.1.12.2.1',\n    '1.2.840.10008.5.1.4.1.1.12.3',\n]);\nfunction calculateRadiographicPixelSpacing(instance) {\n    const { PixelSpacing, ImagerPixelSpacing, EstimatedRadiographicMagnificationFactor, PixelSpacingCalibrationType, PixelSpacingCalibrationDescription, } = instance;\n    const isProjection = true;\n    if (!ImagerPixelSpacing) {\n        return {\n            PixelSpacing,\n            type: CalibrationTypes.UNKNOWN,\n            isProjection,\n        };\n    }\n    if (!PixelSpacing) {\n        if (!EstimatedRadiographicMagnificationFactor) {\n            console.warn('EstimatedRadiographicMagnificationFactor was not present. Unable to correct ImagerPixelSpacing.');\n            return {\n                PixelSpacing: ImagerPixelSpacing,\n                type: CalibrationTypes.PROJECTION,\n                isProjection,\n            };\n        }\n        const correctedPixelSpacing = ImagerPixelSpacing.map((pixelSpacing) => pixelSpacing / EstimatedRadiographicMagnificationFactor);\n        return {\n            PixelSpacing: correctedPixelSpacing,\n            type: CalibrationTypes.ERMF,\n            isProjection,\n        };\n    }\n    if (isEqual(PixelSpacing, ImagerPixelSpacing)) {\n        return {\n            PixelSpacing,\n            type: CalibrationTypes.PROJECTION,\n            isProjection,\n        };\n    }\n    if (PixelSpacingCalibrationType || PixelSpacingCalibrationDescription) {\n        return {\n            PixelSpacing,\n            type: CalibrationTypes.CALIBRATED,\n            isProjection,\n            PixelSpacingCalibrationType,\n            PixelSpacingCalibrationDescription,\n        };\n    }\n    return {\n        PixelSpacing,\n        type: CalibrationTypes.UNKNOWN,\n        isProjection,\n    };\n}\nfunction calculateUSPixelSpacing(instance) {\n    const { SequenceOfUltrasoundRegions } = instance;\n    const isArrayOfSequences = Array.isArray(SequenceOfUltrasoundRegions);\n    if (isArrayOfSequences && SequenceOfUltrasoundRegions.length > 1) {\n        console.warn('Sequence of Ultrasound Regions > one entry. This is not yet implemented, all measurements will be shown in pixels.');\n        return;\n    }\n    const { PhysicalDeltaX, PhysicalDeltaY } = isArrayOfSequences\n        ? SequenceOfUltrasoundRegions[0]\n        : SequenceOfUltrasoundRegions;\n    const USPixelSpacing = [\n        Math.abs(PhysicalDeltaX) * 10,\n        Math.abs(PhysicalDeltaY) * 10,\n    ];\n    return {\n        PixelSpacing: USPixelSpacing,\n    };\n}\nexport default function getPixelSpacingInformation(instance) {\n    const { PixelSpacing, SOPClassUID, SequenceOfUltrasoundRegions } = instance;\n    if (SequenceOfUltrasoundRegions) {\n        return calculateUSPixelSpacing(instance);\n    }\n    const isProjection = projectionRadiographSOPClassUIDs.has(SOPClassUID);\n    if (isProjection) {\n        return calculateRadiographicPixelSpacing(instance);\n    }\n    return {\n        PixelSpacing,\n        type: CalibrationTypes.NOT_APPLICABLE,\n        isProjection: false,\n    };\n}\n","import * as eventListener from './eventListener';\nimport csUtils from './invertRgbTransferFunction';\nimport createSigmoidRGBTransferFunction from './createSigmoidRGBTransferFunction';\nimport getVoiFromSigmoidRGBTransferFunction from './getVoiFromSigmoidRGBTransferFunction';\nimport createLinearRGBTransferFunction from './createLinearRGBTransferFunction';\nimport scaleRgbTransferFunction from './scaleRgbTransferFunction';\nimport triggerEvent from './triggerEvent';\nimport uuidv4 from './uuidv4';\nimport getMinMax from './getMinMax';\nimport getRuntimeId from './getRuntimeId';\nimport imageIdToURI from './imageIdToURI';\nimport calibratedPixelSpacingMetadataProvider from './calibratedPixelSpacingMetadataProvider';\nimport clamp from './clamp';\nimport isOpposite from './isOpposite';\nimport getClosestImageId from './getClosestImageId';\nimport getSpacingInNormalDirection from './getSpacingInNormalDirection';\nimport getTargetVolumeAndSpacingInNormalDir from './getTargetVolumeAndSpacingInNormalDir';\nimport getVolumeActorCorners from './getVolumeActorCorners';\nimport indexWithinDimensions from './indexWithinDimensions';\nimport getVolumeViewportsContainingSameVolumes from './getVolumeViewportsContainingSameVolumes';\nimport getViewportsWithVolumeId from './getViewportsWithVolumeId';\nimport transformWorldToIndex, { transformWorldToIndexContinuous, } from './transformWorldToIndex';\nimport transformIndexToWorld from './transformIndexToWorld';\nimport loadImageToCanvas from './loadImageToCanvas';\nimport * as HistoryMemo from './historyMemo';\nimport renderToCanvasCPU from './renderToCanvasCPU';\nimport renderToCanvasGPU from './renderToCanvasGPU';\nimport worldToImageCoords from './worldToImageCoords';\nimport imageToWorldCoords from './imageToWorldCoords';\nimport getVolumeSliceRangeInfo from './getVolumeSliceRangeInfo';\nimport getVolumeViewportScrollInfo from './getVolumeViewportScrollInfo';\nimport getSliceRange from './getSliceRange';\nimport snapFocalPointToSlice from './snapFocalPointToSlice';\nimport getImageSliceDataForVolumeViewport from './getImageSliceDataForVolumeViewport';\nimport { isImageActor, actorIsA } from './actorCheck';\nimport getViewportsWithImageURI from './getViewportsWithImageURI';\nimport getClosestStackImageIndexForPoint from './getClosestStackImageIndexForPoint';\nimport getCurrentVolumeViewportSlice from './getCurrentVolumeViewportSlice';\nimport calculateViewportsSpatialRegistration from './calculateViewportsSpatialRegistration';\nimport spatialRegistrationMetadataProvider from './spatialRegistrationMetadataProvider';\nimport getViewportImageCornersInWorld from './getViewportImageCornersInWorld';\nimport hasNaNValues from './hasNaNValues';\nimport applyPreset from './applyPreset';\nimport PointsManager from './PointsManager';\nimport deepMerge from './deepMerge';\nimport getScalingParameters from './getScalingParameters';\nimport isPTPrescaledWithSUV from './isPTPrescaledWithSUV';\nimport getImageLegacy from './getImageLegacy';\nimport sortImageIdsAndGetSpacing from './sortImageIdsAndGetSpacing';\nimport makeVolumeMetadata from './makeVolumeMetadata';\nimport genericMetadataProvider from './genericMetadataProvider';\nimport { isValidVolume } from './isValidVolume';\nimport { updateVTKImageDataWithCornerstoneImage } from './updateVTKImageDataWithCornerstoneImage';\nimport ProgressiveIterator from './ProgressiveIterator';\nimport decimate from './decimate';\nimport imageRetrieveMetadataProvider from './imageRetrieveMetadataProvider';\nimport isVideoTransferSyntax from './isVideoTransferSyntax';\nimport { getBufferConfiguration } from './getBufferConfiguration';\nimport { generateVolumePropsFromImageIds } from './generateVolumePropsFromImageIds';\nimport { convertStackToVolumeViewport } from './convertStackToVolumeViewport';\nimport { convertVolumeToStackViewport } from './convertVolumeToStackViewport';\nimport VoxelManager from './VoxelManager';\nimport RLEVoxelMap from './RLEVoxelMap';\nimport roundNumber, { roundToPrecision } from './roundNumber';\nimport convertToGrayscale from './convertToGrayscale';\nimport getViewportImageIds from './getViewportImageIds';\nimport { getRandomSampleFromArray } from './getRandomSampleFromArray';\nimport { getVolumeId } from './getVolumeId';\nimport { hasFloatScalingParameters } from './hasFloatScalingParameters';\nimport { pointInShapeCallback } from './pointInShapeCallback';\nexport * as planar from './planar';\nimport * as windowLevel from './windowLevel';\nimport * as colormap from './colormap';\nimport * as transferFunctionUtils from './transferFunctionUtils';\nimport * as color from './color';\nimport { deepEqual } from './deepEqual';\nimport FrameRange from './FrameRange';\nimport fnv1aHash from './fnv1aHash';\nimport { getImageDataMetadata } from './getImageDataMetadata';\nimport { buildMetadata } from './buildMetadata';\nimport { _getViewportModality } from './getViewportModality';\nimport cache from '../cache/cache';\nimport getDynamicVolumeInfo from './getDynamicVolumeInfo';\nimport autoLoad from './autoLoad';\nimport scaleArray from './scaleArray';\nimport splitImageIdsBy4DTags from './splitImageIdsBy4DTags';\nimport { deepClone } from './deepClone';\nimport { jumpToSlice } from './jumpToSlice';\nimport scroll from './scroll';\nimport clip from './clip';\nimport createSubVolume from './createSubVolume';\nimport getVolumeDirectionVectors from './getVolumeDirectionVectors';\nimport calculateSpacingBetweenImageIds from './calculateSpacingBetweenImageIds';\nexport * as logger from './logger';\nimport { calculateNeighborhoodStats } from './calculateNeighborhoodStats';\nimport getPixelSpacingInformation from './getPixelSpacingInformation';\nimport { asArray } from './asArray';\nexport { updatePlaneRestriction } from './updatePlaneRestriction';\nconst getViewportModality = (viewport, volumeId) => _getViewportModality(viewport, volumeId, cache.getVolume);\nexport * from './isEqual';\nexport { FrameRange, eventListener, csUtils as invertRgbTransferFunction, createSigmoidRGBTransferFunction, getVoiFromSigmoidRGBTransferFunction, createLinearRGBTransferFunction, scaleRgbTransferFunction, triggerEvent, imageIdToURI, fnv1aHash, calibratedPixelSpacingMetadataProvider, clamp, uuidv4, getMinMax, getRuntimeId, isOpposite, getViewportModality, windowLevel, convertToGrayscale, getClosestImageId, getSpacingInNormalDirection, getTargetVolumeAndSpacingInNormalDir, getVolumeActorCorners, indexWithinDimensions, getVolumeViewportsContainingSameVolumes, getViewportsWithVolumeId, transformWorldToIndex, transformIndexToWorld, loadImageToCanvas, renderToCanvasCPU, renderToCanvasGPU, worldToImageCoords, imageToWorldCoords, getVolumeSliceRangeInfo, getVolumeViewportScrollInfo, getSliceRange, snapFocalPointToSlice, getImageSliceDataForVolumeViewport, isImageActor, isPTPrescaledWithSUV, actorIsA, getViewportsWithImageURI, getClosestStackImageIndexForPoint, getCurrentVolumeViewportSlice, calculateViewportsSpatialRegistration, spatialRegistrationMetadataProvider, getViewportImageCornersInWorld, hasNaNValues, applyPreset, deepMerge, PointsManager, getScalingParameters, colormap, getImageLegacy, ProgressiveIterator, decimate, imageRetrieveMetadataProvider, transferFunctionUtils, updateVTKImageDataWithCornerstoneImage, sortImageIdsAndGetSpacing, makeVolumeMetadata, isValidVolume, genericMetadataProvider, isVideoTransferSyntax, HistoryMemo, generateVolumePropsFromImageIds, getBufferConfiguration, VoxelManager, RLEVoxelMap, convertStackToVolumeViewport, convertVolumeToStackViewport, roundNumber, roundToPrecision, getViewportImageIds, getRandomSampleFromArray, getVolumeId, color, hasFloatScalingParameters, getDynamicVolumeInfo, autoLoad, scaleArray, deepClone, splitImageIdsBy4DTags, pointInShapeCallback, deepEqual, jumpToSlice, scroll, clip, transformWorldToIndexContinuous, createSubVolume, getVolumeDirectionVectors, calculateSpacingBetweenImageIds, getImageDataMetadata, buildMetadata, calculateNeighborhoodStats, getPixelSpacingInformation, asArray, };\n","function _getViewportModality(viewport, volumeId, getVolume) {\n    if (!getVolume) {\n        throw new Error('getVolume is required, use the utilities export instead ');\n    }\n    if (viewport.modality) {\n        return viewport.modality;\n    }\n    if (viewport.setVolumes) {\n        volumeId = volumeId ?? viewport.getVolumeId();\n        if (!volumeId || !getVolume) {\n            return;\n        }\n        const volume = getVolume(volumeId);\n        return volume.metadata.Modality;\n    }\n    throw new Error('Invalid viewport type');\n}\nexport { _getViewportModality };\n","export default function invertRgbTransferFunction(rgbTransferFunction) {\n    if (!rgbTransferFunction) {\n        return;\n    }\n    const size = rgbTransferFunction.getSize();\n    for (let index = 0; index < size; index++) {\n        const nodeValue1 = [];\n        rgbTransferFunction.getNodeValue(index, nodeValue1);\n        nodeValue1[1] = 1 - nodeValue1[1];\n        nodeValue1[2] = 1 - nodeValue1[2];\n        nodeValue1[3] = 1 - nodeValue1[3];\n        rgbTransferFunction.setNodeValue(index, nodeValue1);\n    }\n}\n","function areNumbersEqualWithTolerance(num1, num2, tolerance) {\n    return Math.abs(num1 - num2) <= tolerance;\n}\nfunction areArraysEqual(arr1, arr2, tolerance = 1e-5) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        if (!areNumbersEqualWithTolerance(arr1[i], arr2[i], tolerance)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isNumberType(value) {\n    return typeof value === 'number';\n}\nfunction isNumberArrayLike(value) {\n    return (value &&\n        typeof value === 'object' &&\n        'length' in value &&\n        typeof value.length === 'number' &&\n        value.length > 0 &&\n        typeof value[0] === 'number');\n}\nexport function isEqual(v1, v2, tolerance = 1e-5) {\n    if (typeof v1 !== typeof v2 || v1 === null || v2 === null) {\n        return false;\n    }\n    if (isNumberType(v1) && isNumberType(v2)) {\n        return areNumbersEqualWithTolerance(v1, v2, tolerance);\n    }\n    if (isNumberArrayLike(v1) && isNumberArrayLike(v2)) {\n        return areArraysEqual(v1, v2, tolerance);\n    }\n    return false;\n}\nconst negative = (v) => typeof v === 'number' ? -v : v?.map ? v.map(negative) : !v;\nconst abs = (v) => typeof v === 'number' ? Math.abs(v) : v?.map ? v.map(abs) : v;\nexport const isEqualNegative = (v1, v2, tolerance = undefined) => isEqual(v1, negative(v2), tolerance);\nexport const isEqualAbs = (v1, v2, tolerance = undefined) => isEqual(abs(v1), abs(v2), tolerance);\nexport function isNumber(n) {\n    if (Array.isArray(n)) {\n        return isNumber(n[0]);\n    }\n    return isFinite(n) && !isNaN(n);\n}\nexport default isEqual;\n","import loglevelImport from 'loglevel';\nconst loglevel = loglevelImport.noConflict();\nif (typeof window !== 'undefined') {\n    window.log = loglevel;\n}\nexport function getRootLogger(name) {\n    const logger = loglevel.getLogger(name[0]);\n    logger.getLogger = (...names) => {\n        return getRootLogger(`${name}.${names.join('.')}`);\n    };\n    return logger;\n}\nexport function getLogger(...name) {\n    return getRootLogger(name.join('.'));\n}\nexport const cs3dLog = getRootLogger('cs3d');\nexport const coreLog = cs3dLog.getLogger('core');\nexport const toolsLog = cs3dLog.getLogger('tools');\nexport const loaderLog = cs3dLog.getLogger('dicomImageLoader');\nexport const aiLog = cs3dLog.getLogger('ai');\nexport const examplesLog = cs3dLog.getLogger('examples');\nexport const dicomConsistencyLog = getLogger('consistency', 'dicom');\nexport const imageConsistencyLog = getLogger('consistency', 'image');\n","import { get } from '../metaData';\nexport default function makeVolumeMetadata(imageIds) {\n    const imageId0 = imageIds[0];\n    const { pixelRepresentation, bitsAllocated, bitsStored, highBit, photometricInterpretation, samplesPerPixel, } = get('imagePixelModule', imageId0);\n    const voiLut = [];\n    const voiLutModule = get('voiLutModule', imageId0);\n    let voiLUTFunction;\n    if (voiLutModule) {\n        const { windowWidth, windowCenter } = voiLutModule;\n        voiLUTFunction = voiLutModule?.voiLUTFunction;\n        if (Array.isArray(windowWidth)) {\n            for (let i = 0; i < windowWidth.length; i++) {\n                voiLut.push({\n                    windowWidth: windowWidth[i],\n                    windowCenter: windowCenter[i],\n                });\n            }\n        }\n        else {\n            voiLut.push({\n                windowWidth: windowWidth,\n                windowCenter: windowCenter,\n            });\n        }\n    }\n    else {\n        voiLut.push({\n            windowWidth: undefined,\n            windowCenter: undefined,\n        });\n    }\n    const { modality, seriesInstanceUID } = get('generalSeriesModule', imageId0);\n    const { imageOrientationPatient, pixelSpacing, frameOfReferenceUID, columns, rows, } = get('imagePlaneModule', imageId0);\n    return {\n        BitsAllocated: bitsAllocated,\n        BitsStored: bitsStored,\n        SamplesPerPixel: samplesPerPixel,\n        HighBit: highBit,\n        PhotometricInterpretation: photometricInterpretation,\n        PixelRepresentation: pixelRepresentation,\n        Modality: modality,\n        ImageOrientationPatient: imageOrientationPatient,\n        PixelSpacing: pixelSpacing,\n        FrameOfReferenceUID: frameOfReferenceUID,\n        Columns: columns,\n        Rows: rows,\n        voiLut,\n        VOILUTFunction: voiLUTFunction,\n        SeriesInstanceUID: seriesInstanceUID,\n    };\n}\n","import { mat3 } from 'gl-matrix';\nimport { EPSILON } from '../constants';\nfunction linePlaneIntersection(p0, p1, plane) {\n    const [x0, y0, z0] = p0;\n    const [x1, y1, z1] = p1;\n    const [A, B, C, D] = plane;\n    const a = x1 - x0;\n    const b = y1 - y0;\n    const c = z1 - z0;\n    const t = (-1 * (A * x0 + B * y0 + C * z0 - D)) / (A * a + B * b + C * c);\n    const X = a * t + x0;\n    const Y = b * t + y0;\n    const Z = c * t + z0;\n    return [X, Y, Z];\n}\nfunction planeEquation(normal, point, normalized = false) {\n    const [A, B, C] = normal;\n    const D = A * point[0] + B * point[1] + C * point[2];\n    if (normalized) {\n        const length = Math.sqrt(A * A + B * B + C * C);\n        return [A / length, B / length, C / length, D / length];\n    }\n    return [A, B, C, D];\n}\nfunction threePlaneIntersection(firstPlane, secondPlane, thirdPlane) {\n    const [A1, B1, C1, D1] = firstPlane;\n    const [A2, B2, C2, D2] = secondPlane;\n    const [A3, B3, C3, D3] = thirdPlane;\n    const m0 = mat3.fromValues(A1, A2, A3, B1, B2, B3, C1, C2, C3);\n    const m1 = mat3.fromValues(D1, D2, D3, B1, B2, B3, C1, C2, C3);\n    const m2 = mat3.fromValues(A1, A2, A3, D1, D2, D3, C1, C2, C3);\n    const m3 = mat3.fromValues(A1, A2, A3, B1, B2, B3, D1, D2, D3);\n    const x = mat3.determinant(m1) / mat3.determinant(m0);\n    const y = mat3.determinant(m2) / mat3.determinant(m0);\n    const z = mat3.determinant(m3) / mat3.determinant(m0);\n    return [x, y, z];\n}\nfunction planeDistanceToPoint(plane, point, signed = false) {\n    const [A, B, C, D] = plane;\n    const [x, y, z] = point;\n    const numerator = A * x + B * y + C * z - D;\n    const distance = Math.abs(numerator) / Math.sqrt(A * A + B * B + C * C);\n    const sign = signed ? Math.sign(numerator) : 1;\n    return sign * distance;\n}\nfunction isPointOnPlane(point, plane, tolerance = EPSILON) {\n    return planeDistanceToPoint(plane, point) < tolerance;\n}\nexport { linePlaneIntersection, planeEquation, threePlaneIntersection, planeDistanceToPoint, isPointOnPlane, };\n","import { createPositionCallback } from './createPositionCallback';\nexport function pointInShapeCallback(imageData, options) {\n    const { pointInShapeFn, callback, boundsIJK, returnPoints = false } = options;\n    let scalarData;\n    if (imageData.getScalarData) {\n        scalarData = imageData.getScalarData();\n    }\n    else {\n        const scalars = imageData.getPointData().getScalars();\n        if (scalars) {\n            scalarData = scalars.getData();\n        }\n        else {\n            const { voxelManager } = imageData.get('voxelManager') || {};\n            if (voxelManager) {\n                scalarData = voxelManager.getCompleteScalarDataArray();\n            }\n        }\n    }\n    const dimensions = imageData.getDimensions();\n    const defaultBoundsIJK = [\n        [0, dimensions[0]],\n        [0, dimensions[1]],\n        [0, dimensions[2]],\n    ];\n    const bounds = boundsIJK || defaultBoundsIJK;\n    const pointsInShape = iterateOverPointsInShape({\n        imageData,\n        bounds,\n        scalarData,\n        pointInShapeFn,\n        callback,\n    });\n    return returnPoints ? pointsInShape : undefined;\n}\nexport function iterateOverPointsInShape({ imageData, bounds, scalarData, pointInShapeFn, callback, }) {\n    const [[iMin, iMax], [jMin, jMax], [kMin, kMax]] = bounds;\n    const { numComps } = imageData;\n    const dimensions = imageData.getDimensions();\n    const indexToWorld = createPositionCallback(imageData);\n    const pointIJK = [0, 0, 0];\n    const xMultiple = numComps ||\n        scalarData.length / dimensions[2] / dimensions[1] / dimensions[0];\n    const yMultiple = dimensions[0] * xMultiple;\n    const zMultiple = dimensions[1] * yMultiple;\n    const pointsInShape = [];\n    for (let k = kMin; k <= kMax; k++) {\n        pointIJK[2] = k;\n        const indexK = k * zMultiple;\n        for (let j = jMin; j <= jMax; j++) {\n            pointIJK[1] = j;\n            const indexJK = indexK + j * yMultiple;\n            for (let i = iMin; i <= iMax; i++) {\n                pointIJK[0] = i;\n                const pointLPS = indexToWorld(pointIJK);\n                if (pointInShapeFn(pointLPS, pointIJK)) {\n                    const index = indexJK + i * xMultiple;\n                    let value;\n                    if (xMultiple > 2) {\n                        value = [\n                            scalarData[index],\n                            scalarData[index + 1],\n                            scalarData[index + 2],\n                        ];\n                    }\n                    else {\n                        value = scalarData[index];\n                    }\n                    pointsInShape.push({\n                        value,\n                        index,\n                        pointIJK,\n                        pointLPS: pointLPS.slice(),\n                    });\n                    callback({ value, index, pointIJK, pointLPS });\n                }\n            }\n        }\n    }\n    return pointsInShape;\n}\nexport function iterateOverPointsInShapeVoxelManager({ voxelManager, bounds, imageData, pointInShapeFn, callback, returnPoints, }) {\n    const [[iMin, iMax], [jMin, jMax], [kMin, kMax]] = bounds;\n    const indexToWorld = createPositionCallback(imageData);\n    const pointIJK = [0, 0, 0];\n    const pointsInShape = [];\n    for (let k = kMin; k <= kMax; k++) {\n        pointIJK[2] = k;\n        for (let j = jMin; j <= jMax; j++) {\n            pointIJK[1] = j;\n            for (let i = iMin; i <= iMax; i++) {\n                pointIJK[0] = i;\n                const pointLPS = indexToWorld(pointIJK);\n                if (pointInShapeFn(pointLPS, pointIJK)) {\n                    const index = voxelManager.toIndex(pointIJK);\n                    const value = voxelManager.getAtIndex(index);\n                    if (returnPoints) {\n                        pointsInShape.push({\n                            value,\n                            index,\n                            pointIJK: [...pointIJK],\n                            pointLPS: pointLPS.slice(),\n                        });\n                    }\n                    callback?.({ value, index, pointIJK, pointLPS });\n                }\n            }\n        }\n    }\n    return pointsInShape;\n}\n","import { vec3 } from 'gl-matrix';\nexport default function snapFocalPointToSlice(focalPoint, position, sliceRange, viewPlaneNormal, spacingInNormalDirection, deltaFrames) {\n    const { min, max, current } = sliceRange;\n    const posDiffFromFocalPoint = vec3.create();\n    vec3.sub(posDiffFromFocalPoint, position, focalPoint);\n    const steps = Math.round((max - min) / spacingInNormalDirection);\n    const fraction = (current - min) / (max - min);\n    const floatingStepNumber = fraction * steps;\n    let frameIndex = Math.round(floatingStepNumber);\n    let newFocalPoint = [\n        focalPoint[0] -\n            viewPlaneNormal[0] * floatingStepNumber * spacingInNormalDirection,\n        focalPoint[1] -\n            viewPlaneNormal[1] * floatingStepNumber * spacingInNormalDirection,\n        focalPoint[2] -\n            viewPlaneNormal[2] * floatingStepNumber * spacingInNormalDirection,\n    ];\n    frameIndex += deltaFrames;\n    if (frameIndex > steps) {\n        frameIndex = steps;\n    }\n    else if (frameIndex < 0) {\n        frameIndex = 0;\n    }\n    const newSlicePosFromMin = frameIndex * spacingInNormalDirection;\n    newFocalPoint = [\n        newFocalPoint[0] + viewPlaneNormal[0] * newSlicePosFromMin,\n        newFocalPoint[1] + viewPlaneNormal[1] * newSlicePosFromMin,\n        newFocalPoint[2] + viewPlaneNormal[2] * newSlicePosFromMin,\n    ];\n    const newPosition = [\n        newFocalPoint[0] + posDiffFromFocalPoint[0],\n        newFocalPoint[1] + posDiffFromFocalPoint[1],\n        newFocalPoint[2] + posDiffFromFocalPoint[2],\n    ];\n    return { newFocalPoint, newPosition };\n}\n","import { vec3 } from 'gl-matrix';\nimport * as metaData from '../metaData';\nimport calculateSpacingBetweenImageIds from './calculateSpacingBetweenImageIds';\nexport default function sortImageIdsAndGetSpacing(imageIds, scanAxisNormal) {\n    const { imagePositionPatient: referenceImagePositionPatient, imageOrientationPatient, } = metaData.get('imagePlaneModule', imageIds[0]);\n    if (!scanAxisNormal) {\n        const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n        const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n        scanAxisNormal = vec3.create();\n        vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n    }\n    const usingWadoUri = imageIds[0].split(':')[0] === 'wadouri';\n    const zSpacing = calculateSpacingBetweenImageIds(imageIds);\n    let sortedImageIds;\n    function getDistance(imageId) {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n        const positionVector = vec3.create();\n        vec3.sub(positionVector, referenceImagePositionPatient, imagePositionPatient);\n        return vec3.dot(positionVector, scanAxisNormal);\n    }\n    if (!usingWadoUri) {\n        const distanceImagePairs = imageIds.map((imageId) => {\n            const distance = getDistance(imageId);\n            return {\n                distance,\n                imageId,\n            };\n        });\n        distanceImagePairs.sort((a, b) => b.distance - a.distance);\n        sortedImageIds = distanceImagePairs.map((a) => a.imageId);\n    }\n    else {\n        const prefetchedImageIds = [\n            imageIds[0],\n            imageIds[Math.floor(imageIds.length / 2)],\n        ];\n        sortedImageIds = imageIds;\n        const firstImageDistance = getDistance(prefetchedImageIds[0]);\n        const middleImageDistance = getDistance(prefetchedImageIds[1]);\n        if (firstImageDistance - middleImageDistance < 0) {\n            sortedImageIds.reverse();\n        }\n    }\n    const { imagePositionPatient: origin } = metaData.get('imagePlaneModule', sortedImageIds[0]);\n    const result = {\n        zSpacing,\n        origin,\n        sortedImageIds,\n    };\n    return result;\n}\n","function getTransferFunctionNodes(transferFunction) {\n    const size = transferFunction.getSize();\n    const values = [];\n    for (let index = 0; index < size; index++) {\n        const nodeValue1 = [];\n        transferFunction.getNodeValue(index, nodeValue1);\n        values.push(nodeValue1);\n    }\n    return values;\n}\nfunction setTransferFunctionNodes(transferFunction, nodes) {\n    if (!nodes?.length) {\n        return;\n    }\n    transferFunction.removeAllPoints();\n    nodes.forEach((node) => {\n        transferFunction.addRGBPoint(...node);\n    });\n}\nexport { getTransferFunctionNodes, setTransferFunctionNodes };\n","import transformWorldToIndex from './transformWorldToIndex';\nexport function transformCanvasToIJK(viewport, canvasPoint) {\n    const { imageData: vtkImageData } = viewport.getImageData();\n    const worldPoint = viewport.canvasToWorld(canvasPoint);\n    return transformWorldToIndex(vtkImageData, worldPoint);\n}\n","export default function transformIndexToWorld(imageData, voxelPos) {\n    return imageData.indexToWorld(voxelPos);\n}\n","export default function transformWorldToIndex(imageData, worldPos) {\n    const continuousIndex = imageData.worldToIndex(worldPos);\n    const index = continuousIndex.map(Math.round);\n    return index;\n}\nexport function transformWorldToIndexContinuous(imageData, worldPos) {\n    return imageData.worldToIndex(worldPos);\n}\n","import { isEqual } from '../utilities/isEqual';\nimport { vec3 } from 'gl-matrix';\nconst ORTHOGONAL_TEST_VALUE = 0.95;\nexport function updatePlaneRestriction(points, reference) {\n    if (!points?.length || !reference.FrameOfReferenceUID) {\n        return;\n    }\n    reference.planeRestriction ||= {\n        FrameOfReferenceUID: reference.FrameOfReferenceUID,\n        point: points[0],\n        inPlaneVector1: null,\n        inPlaneVector2: null,\n    };\n    const { planeRestriction } = reference;\n    if (points.length === 1) {\n        planeRestriction.inPlaneVector1 = null;\n        planeRestriction.inPlaneVector2 = null;\n        return planeRestriction;\n    }\n    const v1 = vec3.sub(vec3.create(), points[0], points[Math.floor(points.length / 2)]);\n    vec3.normalize(v1, v1);\n    planeRestriction.inPlaneVector1 = v1;\n    planeRestriction.inPlaneVector2 = null;\n    const n = points.length;\n    if (n > 2) {\n        for (let i = Math.floor(n / 3); i < n; i++) {\n            const testVector = vec3.sub(vec3.create(), points[i], points[0]);\n            const length = vec3.length(testVector);\n            if (isEqual(length, 0)) {\n                continue;\n            }\n            if (vec3.dot(testVector, planeRestriction.inPlaneVector1) <\n                length * ORTHOGONAL_TEST_VALUE) {\n                vec3.normalize(testVector, testVector);\n                planeRestriction.inPlaneVector2 = testVector;\n                return planeRestriction;\n            }\n        }\n    }\n    return planeRestriction;\n}\n","function updateVTKImageDataWithCornerstoneImage(sourceImageData, image) {\n    const pixelData = image.voxelManager.getScalarData();\n    if (!sourceImageData.getPointData) {\n        return;\n    }\n    const scalarData = sourceImageData\n        .getPointData()\n        .getScalars()\n        .getData();\n    if (image.color && image.rgba) {\n        const newPixelData = new Uint8Array(image.columns * image.rows * 3);\n        for (let i = 0; i < image.columns * image.rows; i++) {\n            newPixelData[i * 3] = pixelData[i * 4];\n            newPixelData[i * 3 + 1] = pixelData[i * 4 + 1];\n            newPixelData[i * 3 + 2] = pixelData[i * 4 + 2];\n        }\n        image.rgba = false;\n        image.getPixelData = () => newPixelData;\n        scalarData.set(newPixelData);\n    }\n    else {\n        scalarData.set(pixelData);\n    }\n    sourceImageData.modified();\n}\nexport { updateVTKImageDataWithCornerstoneImage };\n","import VOILUTFunctionType from '../enums/VOILUTFunctionType';\nimport { logit } from './logit';\nfunction toWindowLevel(low, high) {\n    const windowWidth = Math.abs(high - low) + 1;\n    const windowCenter = (low + high + 1) / 2;\n    return { windowWidth, windowCenter };\n}\nfunction toLowHighRange(windowWidth, windowCenter, voiLUTFunction = VOILUTFunctionType.LINEAR) {\n    if (voiLUTFunction === VOILUTFunctionType.LINEAR ||\n        voiLUTFunction === VOILUTFunctionType.SAMPLED_SIGMOID) {\n        return {\n            lower: windowCenter - 0.5 - (windowWidth - 1) / 2,\n            upper: windowCenter - 0.5 + (windowWidth - 1) / 2,\n        };\n    }\n    else if (voiLUTFunction === VOILUTFunctionType.LINEAR_EXACT) {\n        return {\n            lower: windowCenter - windowWidth / 2,\n            upper: windowCenter + windowWidth / 2,\n        };\n    }\n    else {\n        throw new Error('Invalid VOI LUT function');\n    }\n}\nexport { toWindowLevel, toLowHighRange };\n","import { Enums } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\nconst { Active, Passive, Enabled } = ToolModes;\nconst onCameraModified = function (evt) {\n    const enabledTools = getToolsWithModesForMouseEvent(evt, [\n        Active,\n        Passive,\n        Enabled,\n    ]);\n    enabledTools.forEach((tool) => {\n        if (tool.onCameraModified) {\n            tool.onCameraModified(evt);\n        }\n    });\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.CAMERA_MODIFIED, onCameraModified);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.CAMERA_MODIFIED, onCameraModified);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { Enums } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\nconst { Active, Passive, Enabled } = ToolModes;\nconst onImageSpacingCalibrated = function (evt) {\n    const enabledTools = getToolsWithModesForMouseEvent(evt, [\n        Active,\n        Passive,\n        Enabled,\n    ]);\n    enabledTools.forEach((tool) => {\n        if (tool.onImageSpacingCalibrated) {\n            tool.onImageSpacingCalibrated(evt);\n        }\n    });\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.IMAGE_SPACING_CALIBRATED, onImageSpacingCalibrated);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.IMAGE_SPACING_CALIBRATED, onImageSpacingCalibrated);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { eventTarget } from '@cornerstonejs/core';\nimport Events from '../enums/Events';\nimport InterpolationManager from '../utilities/segmentation/InterpolationManager/InterpolationManager';\nconst enable = function () {\n    eventTarget.addEventListener(Events.ANNOTATION_COMPLETED, InterpolationManager.handleAnnotationCompleted);\n    eventTarget.addEventListener(Events.ANNOTATION_MODIFIED, InterpolationManager.handleAnnotationUpdate);\n    eventTarget.addEventListener(Events.ANNOTATION_REMOVED, InterpolationManager.handleAnnotationDelete);\n};\nconst disable = function () {\n    eventTarget.removeEventListener(Events.ANNOTATION_COMPLETED, InterpolationManager.handleAnnotationCompleted);\n    eventTarget.removeEventListener(Events.ANNOTATION_MODIFIED, InterpolationManager.handleAnnotationUpdate);\n    eventTarget.removeEventListener(Events.ANNOTATION_REMOVED, InterpolationManager.handleAnnotationDelete);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { Enums } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\nconst { Active, Passive, Enabled } = ToolModes;\nconst onCameraReset = function (evt) {\n    const enabledTools = getToolsWithModesForMouseEvent(evt, [\n        Active,\n        Passive,\n        Enabled,\n    ]);\n    enabledTools.forEach((tool) => {\n        if (tool.onResetCamera) {\n            tool.onResetCamera(evt);\n        }\n    });\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.CAMERA_RESET, onCameraReset);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.CAMERA_RESET, onCameraReset);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport cameraSyncCallback from '../callbacks/cameraSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createCameraPositionSynchronizer(synchronizerName) {\n    const cameraPositionSynchronizer = createSynchronizer(synchronizerName, CAMERA_MODIFIED, cameraSyncCallback);\n    return cameraPositionSynchronizer;\n}\n","import { Enums } from '@cornerstonejs/core';\nimport { createSynchronizer } from '../../store/SynchronizerManager';\nimport presentationViewSyncCallback from '../callbacks/presentationViewSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createPresentationViewSynchronizer(synchronizerName, options) {\n    const presentationView = createSynchronizer(synchronizerName, CAMERA_MODIFIED, presentationViewSyncCallback, { viewPresentation: options });\n    return presentationView;\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport zoomPanSyncCallback from '../callbacks/zoomPanSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createZoomPanSynchronizer(synchronizerName) {\n    const zoomPanSynchronizer = createSynchronizer(synchronizerName, CAMERA_MODIFIED, zoomPanSyncCallback);\n    return zoomPanSynchronizer;\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport imageSliceSyncCallback from '../callbacks/imageSliceSyncCallback';\nconst { STACK_NEW_IMAGE, VOLUME_NEW_IMAGE } = Enums.Events;\nexport default function createImageSliceSynchronizer(synchronizerName) {\n    const stackImageSynchronizer = createSynchronizer(synchronizerName, STACK_NEW_IMAGE, imageSliceSyncCallback, {\n        auxiliaryEvents: [\n            {\n                name: 'VOLUME_NEW_IMAGE',\n            },\n        ],\n    });\n    return stackImageSynchronizer;\n}\n","import { Enums } from '@cornerstonejs/core';\nimport { createSynchronizer } from '../../store/SynchronizerManager';\nimport slabThicknessSyncCallback from '../callbacks/slabThicknessSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createPresentationViewSynchronizer(synchronizerName) {\n    const presentationView = createSynchronizer(synchronizerName, CAMERA_MODIFIED, slabThicknessSyncCallback);\n    return presentationView;\n}\n","import { utilities, Enums } from '@cornerstonejs/core';\nconst { calibratedPixelSpacingMetadataProvider } = utilities;\nexport default function calibrateImageSpacing(imageId, renderingEngine, calibrationOrScale) {\n    if (typeof calibrationOrScale === 'number') {\n        calibrationOrScale = {\n            type: Enums.CalibrationTypes.USER,\n            scale: calibrationOrScale,\n        };\n    }\n    calibratedPixelSpacingMetadataProvider.add(imageId, calibrationOrScale);\n    const viewports = renderingEngine.getStackViewports();\n    viewports.forEach((viewport) => {\n        const imageIds = viewport.getImageIds();\n        if (imageIds.includes(imageId)) {\n            viewport.calibrateSpacing(imageId);\n        }\n    });\n}\n","var Events;\n(function (Events) {\n    Events[\"CLIP_STOPPED\"] = \"CORNERSTONE_CINE_TOOL_STOPPED\";\n    Events[\"CLIP_STARTED\"] = \"CORNERSTONE_CINE_TOOL_STARTED\";\n})(Events || (Events = {}));\nexport default Events;\n","import { glMatrix, vec3 } from 'gl-matrix';\nimport { utilities as csUtils, getEnabledElement, StackViewport, VideoViewport, VolumeViewport, cache, BaseVolumeViewport, Enums, } from '@cornerstonejs/core';\nimport CINE_EVENTS from './events';\nimport { addToolState, getToolState, getToolStateByViewportId } from './state';\nconst { ViewportStatus } = Enums;\nconst { triggerEvent } = csUtils;\nconst debounced = true;\nconst dynamicVolumesPlayingMap = new Map();\nfunction playClip(element, playClipOptions) {\n    let playClipTimeouts;\n    let playClipIsTimeVarying;\n    if (element === undefined) {\n        throw new Error('playClip: element must not be undefined');\n    }\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        throw new Error('playClip: element must be a valid Cornerstone enabled element');\n    }\n    if (!playClipOptions) {\n        playClipOptions = {};\n    }\n    playClipOptions.dynamicCineEnabled =\n        playClipOptions.dynamicCineEnabled ?? true;\n    const { viewport } = enabledElement;\n    const playClipContext = _createCinePlayContext(viewport, playClipOptions);\n    let playClipData = getToolState(element);\n    const isDynamicCinePlaying = playClipOptions.dynamicCineEnabled;\n    if (isDynamicCinePlaying) {\n        _stopDynamicVolumeCine(element);\n    }\n    if (!playClipData) {\n        playClipData = {\n            intervalId: undefined,\n            framesPerSecond: 30,\n            lastFrameTimeStamp: undefined,\n            ignoreFrameTimeVector: false,\n            usingFrameTimeVector: false,\n            frameTimeVector: playClipOptions.frameTimeVector ?? undefined,\n            speed: playClipOptions.frameTimeVectorSpeedMultiplier ?? 1,\n            reverse: playClipOptions.reverse ?? false,\n            loop: playClipOptions.loop ?? true,\n            bounce: playClipOptions.bounce ?? false,\n        };\n        addToolState(element, playClipData);\n    }\n    else {\n        _stopClip(element, {\n            stopDynamicCine: !isDynamicCinePlaying,\n            viewportId: viewport.id,\n        });\n    }\n    playClipData.dynamicCineEnabled = playClipOptions.dynamicCineEnabled;\n    if (playClipOptions.framesPerSecond < 0 ||\n        playClipOptions.framesPerSecond > 0) {\n        playClipData.framesPerSecond = Number(playClipOptions.framesPerSecond);\n        playClipData.reverse = playClipData.framesPerSecond < 0;\n        playClipData.ignoreFrameTimeVector = true;\n    }\n    if (playClipData.ignoreFrameTimeVector !== true &&\n        playClipData.frameTimeVector &&\n        playClipData.frameTimeVector.length === playClipContext.numScrollSteps &&\n        playClipContext.frameTimeVectorEnabled) {\n        const { timeouts, isTimeVarying } = _getPlayClipTimeouts(playClipData.frameTimeVector, playClipData.speed);\n        playClipTimeouts = timeouts;\n        playClipIsTimeVarying = isTimeVarying;\n    }\n    if (playClipOptions.bounce !== undefined) {\n        playClipData.bounce = playClipOptions.bounce;\n    }\n    const playClipAction = () => {\n        const { numScrollSteps, currentStepIndex } = playClipContext;\n        let newStepIndex = currentStepIndex + (playClipData.reverse ? -1 : 1);\n        const outOfRange = newStepIndex < 0 || newStepIndex >= numScrollSteps;\n        if (outOfRange) {\n            if (playClipData.bounce) {\n                playClipData.reverse = !playClipData.reverse;\n                newStepIndex = currentStepIndex + (playClipData.reverse ? -1 : 1);\n                newStepIndex = Math.max(0, Math.min(numScrollSteps - 1, newStepIndex));\n            }\n            else if (!playClipData.loop) {\n                _stopClip(element, {\n                    stopDynamicCine: !isDynamicCinePlaying,\n                    viewportId: viewport.id,\n                });\n                triggerEvent(element, CINE_EVENTS.CLIP_STOPPED, { element });\n                return;\n            }\n            else {\n                newStepIndex = playClipData.reverse ? numScrollSteps - 1 : 0;\n            }\n        }\n        const delta = newStepIndex - currentStepIndex;\n        if (delta) {\n            try {\n                playClipContext.scroll(delta);\n            }\n            catch (e) {\n                console.warn('Play clip not scrolling', e);\n                _stopClipWithData(playClipData);\n                triggerEvent(element, CINE_EVENTS.CLIP_STOPPED, { element });\n            }\n        }\n    };\n    if (isDynamicCinePlaying) {\n        const volume = _getVolumeFromViewport(viewport);\n        if (volume) {\n            dynamicVolumesPlayingMap.set(volume.volumeId, element);\n        }\n    }\n    if (playClipContext.play) {\n        playClipData.framesPerSecond = playClipContext.play(playClipOptions.framesPerSecond);\n    }\n    else if (playClipTimeouts &&\n        playClipTimeouts.length > 0 &&\n        playClipIsTimeVarying) {\n        playClipData.usingFrameTimeVector = true;\n        playClipData.intervalId = window.setTimeout(function playClipTimeoutHandler() {\n            playClipData.intervalId = window.setTimeout(playClipTimeoutHandler, playClipTimeouts[playClipContext.currentStepIndex]);\n            playClipAction();\n        }, 0);\n    }\n    else {\n        playClipData.usingFrameTimeVector = false;\n        playClipData.intervalId = window.setInterval(playClipAction, 1000 / Math.abs(playClipData.framesPerSecond));\n    }\n    const eventDetail = {\n        element,\n    };\n    triggerEvent(element, CINE_EVENTS.CLIP_STARTED, eventDetail);\n}\nfunction stopClip(element, options = {}) {\n    _stopClip(element, {\n        stopDynamicCine: true,\n        ...options,\n    });\n}\nfunction _stopClip(element, options = { stopDynamicCine: true, viewportId: undefined }) {\n    const { stopDynamicCine, viewportId } = options;\n    const enabledElement = getEnabledElement(element);\n    let toolState;\n    const viewport = enabledElement?.viewport;\n    if (!enabledElement) {\n        if (viewportId) {\n            toolState = getToolStateByViewportId(viewportId);\n        }\n        else {\n            return;\n        }\n    }\n    else {\n        const { viewport } = enabledElement;\n        toolState = getToolState(viewport.element);\n    }\n    if (toolState) {\n        _stopClipWithData(toolState);\n    }\n    if (viewport instanceof VideoViewport) {\n        viewport.pause();\n    }\n    else if (stopDynamicCine && viewport instanceof BaseVolumeViewport) {\n        _stopDynamicVolumeCine(element);\n    }\n}\nfunction _stopDynamicVolumeCine(element) {\n    const { viewport } = getEnabledElement(element);\n    if (viewport instanceof VolumeViewport) {\n        const volume = _getVolumeFromViewport(viewport);\n        if (volume?.isDynamicVolume()) {\n            const dynamicCineElement = dynamicVolumesPlayingMap.get(volume.volumeId);\n            dynamicVolumesPlayingMap.delete(volume.volumeId);\n            if (dynamicCineElement && dynamicCineElement !== element) {\n                stopClip(dynamicCineElement);\n            }\n        }\n    }\n}\nfunction _getPlayClipTimeouts(vector, speed) {\n    let i;\n    let sample;\n    let delay;\n    let sum = 0;\n    const limit = vector.length;\n    const timeouts = [];\n    let isTimeVarying = false;\n    if (typeof speed !== 'number' || speed <= 0) {\n        speed = 1;\n    }\n    for (i = 1; i < limit; i++) {\n        delay = (Number(vector[i]) / speed) | 0;\n        timeouts.push(delay);\n        if (i === 1) {\n            sample = delay;\n        }\n        else if (delay !== sample) {\n            isTimeVarying = true;\n        }\n        sum += delay;\n    }\n    if (timeouts.length > 0) {\n        if (isTimeVarying) {\n            delay = (sum / timeouts.length) | 0;\n        }\n        else {\n            delay = timeouts[0];\n        }\n        timeouts.push(delay);\n    }\n    return { timeouts, isTimeVarying };\n}\nfunction _stopClipWithData(playClipData) {\n    const id = playClipData.intervalId;\n    if (typeof id !== 'undefined') {\n        playClipData.intervalId = undefined;\n        if (playClipData.usingFrameTimeVector) {\n            clearTimeout(id);\n        }\n        else {\n            clearInterval(id);\n        }\n    }\n}\nfunction _getVolumeFromViewport(viewport) {\n    if (!(viewport instanceof VolumeViewport)) {\n        return undefined;\n    }\n    const volumeIds = viewport.getAllVolumeIds();\n    if (!volumeIds?.length) {\n        return undefined;\n    }\n    const dynamicVolumeId = volumeIds.find((volumeId) => cache.getVolume(volumeId)?.isDynamicVolume());\n    const volumeId = dynamicVolumeId ?? volumeIds[0];\n    return cache.getVolume(volumeId);\n}\nfunction _createStackViewportCinePlayContext(viewport, waitForRendered) {\n    const imageIds = viewport.getImageIds();\n    return {\n        get numScrollSteps() {\n            return imageIds.length;\n        },\n        get currentStepIndex() {\n            return viewport.getTargetImageIdIndex();\n        },\n        get frameTimeVectorEnabled() {\n            return true;\n        },\n        waitForRenderedCount: 0,\n        scroll(delta) {\n            if (this.waitForRenderedCount <= waitForRendered &&\n                viewport.viewportStatus !== ViewportStatus.RENDERED) {\n                this.waitForRenderedCount++;\n                return;\n            }\n            this.waitForRenderedCount = 0;\n            csUtils.scroll(viewport, { delta, debounceLoading: debounced });\n        },\n    };\n}\nfunction _createVideoViewportCinePlayContext(viewport, waitForRendered) {\n    return {\n        get numScrollSteps() {\n            return viewport.getNumberOfSlices();\n        },\n        get currentStepIndex() {\n            return viewport.getSliceIndex();\n        },\n        get frameTimeVectorEnabled() {\n            return true;\n        },\n        waitForRenderedCount: 0,\n        scroll(delta) {\n            if (this.waitForRenderedCount <= waitForRendered &&\n                viewport.viewportStatus !== ViewportStatus.RENDERED) {\n                this.waitForRenderedCount++;\n                return;\n            }\n            this.waitForRenderedCount = 0;\n            csUtils.scroll(viewport, { delta, debounceLoading: debounced });\n        },\n        play(fps) {\n            if (fps) {\n                viewport.setPlaybackRate(fps / 24);\n            }\n            viewport.play();\n            return viewport.getFrameRate();\n        },\n    };\n}\nfunction _createVolumeViewportCinePlayContext(viewport, volume) {\n    const { volumeId } = volume;\n    const cachedScrollInfo = {\n        viewPlaneNormal: vec3.create(),\n        scrollInfo: null,\n    };\n    const getScrollInfo = () => {\n        const camera = viewport.getCamera();\n        const updateCache = !cachedScrollInfo.scrollInfo ||\n            !vec3.equals(camera.viewPlaneNormal, cachedScrollInfo.viewPlaneNormal);\n        if (updateCache) {\n            const scrollInfo = csUtils.getVolumeViewportScrollInfo(viewport, volumeId);\n            cachedScrollInfo.viewPlaneNormal = camera.viewPlaneNormal;\n            cachedScrollInfo.scrollInfo = scrollInfo;\n        }\n        return cachedScrollInfo.scrollInfo;\n    };\n    return {\n        get numScrollSteps() {\n            return getScrollInfo().numScrollSteps;\n        },\n        get currentStepIndex() {\n            return getScrollInfo().currentStepIndex;\n        },\n        get frameTimeVectorEnabled() {\n            const camera = viewport.getCamera();\n            const volumeViewPlaneNormal = volume.direction\n                .slice(6, 9)\n                .map((x) => -x);\n            const dot = vec3.dot(volumeViewPlaneNormal, camera.viewPlaneNormal);\n            return glMatrix.equals(dot, 1);\n        },\n        scroll(delta) {\n            getScrollInfo().currentStepIndex += delta;\n            csUtils.scroll(viewport, { delta });\n        },\n    };\n}\nfunction _createDynamicVolumeViewportCinePlayContext(volume) {\n    return {\n        get numScrollSteps() {\n            return volume.numDimensionGroups;\n        },\n        get currentStepIndex() {\n            return volume.dimensionGroupNumber - 1;\n        },\n        get frameTimeVectorEnabled() {\n            return false;\n        },\n        scroll(delta) {\n            volume.scroll(delta);\n        },\n    };\n}\nfunction _createCinePlayContext(viewport, playClipOptions) {\n    if (viewport instanceof StackViewport) {\n        return _createStackViewportCinePlayContext(viewport, playClipOptions.waitForRendered ?? 30);\n    }\n    if (viewport instanceof VolumeViewport) {\n        const volume = _getVolumeFromViewport(viewport);\n        if (playClipOptions.dynamicCineEnabled && volume?.isDynamicVolume()) {\n            return _createDynamicVolumeViewportCinePlayContext(volume);\n        }\n        return _createVolumeViewportCinePlayContext(viewport, volume);\n    }\n    if (viewport instanceof VideoViewport) {\n        return _createVideoViewportCinePlayContext(viewport, playClipOptions.waitForRendered ?? 30);\n    }\n    throw new Error('Unknown viewport type');\n}\nexport { playClip, stopClip };\n","import smoothAnnotation from './smoothAnnotation';\nexport default {\n    smoothAnnotation,\n};\nexport { smoothAnnotation };\n","import { vec3 } from 'gl-matrix';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nconst { isEqual } = csUtils;\nconst iAxis = vec3.fromValues(1, 0, 0);\nconst jAxis = vec3.fromValues(0, 1, 0);\nconst kAxis = vec3.fromValues(0, 0, 1);\nconst axisList = [iAxis, jAxis, kAxis];\nfunction isAxisAlignedRectangle(rectangleCornersIJK) {\n    const rectangleVec1 = vec3.subtract(vec3.create(), rectangleCornersIJK[0], rectangleCornersIJK[1]);\n    const rectangleVec2 = vec3.subtract(vec3.create(), rectangleCornersIJK[0], rectangleCornersIJK[2]);\n    const anglesVec1 = calculateAnglesWithAxes(rectangleVec1, axisList);\n    const anglesVec2 = calculateAnglesWithAxes(rectangleVec2, axisList);\n    const isAligned = [...anglesVec1, ...anglesVec2].every((angle) => isEqual(angle, 0) ||\n        isEqual(angle, 90) ||\n        isEqual(angle, 180) ||\n        isEqual(angle, 270));\n    return isAligned;\n}\nfunction calculateAnglesWithAxes(vec, axes) {\n    return axes.map((axis) => (vec3.angle(vec, axis) * 180) / Math.PI);\n}\nexport { isAxisAlignedRectangle };\n","import { imageLoader, Enums, eventTarget, imageLoadPoolManager, cache, metaData, utilities, triggerEvent, } from '@cornerstonejs/core';\nimport { addToolState, getToolState } from './state';\nimport { getStackData, requestType, priority, getPromiseRemovedHandler, nearestIndex, range, } from './stackPrefetchUtils';\nimport { Events } from '../../enums';\nconst { imageRetrieveMetadataProvider } = utilities;\nlet configuration = {\n    maxImagesToPrefetch: Infinity,\n    preserveExistingPool: true,\n};\nlet resetPrefetchTimeout;\nconst resetPrefetchDelay = 10;\nfunction prefetch(element) {\n    const stackPrefetchData = getToolState(element);\n    if (!stackPrefetchData) {\n        return;\n    }\n    const stackPrefetch = (stackPrefetchData || {});\n    const stack = getStackData(element);\n    if (!stack?.imageIds?.length) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    const { currentImageIdIndex } = stack;\n    stackPrefetch.enabled =\n        stackPrefetch.enabled && (stackPrefetch.indicesToRequest?.length ?? 0) > 0;\n    if (stackPrefetch.enabled === false) {\n        return;\n    }\n    function removeFromList(imageIdIndex) {\n        const index = stackPrefetch.indicesToRequest.indexOf(imageIdIndex);\n        if (index > -1) {\n            stackPrefetch.indicesToRequest.splice(index, 1);\n        }\n    }\n    stackPrefetchData.indicesToRequest.sort((a, b) => a - b);\n    const indicesToRequestCopy = stackPrefetch.indicesToRequest.slice();\n    indicesToRequestCopy.forEach(function (imageIdIndex) {\n        const imageId = stack.imageIds[imageIdIndex];\n        if (!imageId) {\n            return;\n        }\n        const distance = Math.abs(currentImageIdIndex - imageIdIndex);\n        const imageCached = distance < 6\n            ? cache.getImageLoadObject(imageId)\n            : cache.isLoaded(imageId);\n        if (imageCached) {\n            removeFromList(imageIdIndex);\n        }\n    });\n    if (!stackPrefetch.indicesToRequest.length) {\n        return;\n    }\n    if (!configuration.preserveExistingPool) {\n        imageLoadPoolManager.clearRequestStack(requestType);\n    }\n    const nearest = nearestIndex(stackPrefetch.indicesToRequest, stack.currentImageIdIndex);\n    let imageId;\n    let nextImageIdIndex;\n    const preventCache = false;\n    function doneCallback(imageId) {\n        console.log('prefetch done: %s', imageId);\n        const imageIdIndex = stack.imageIds.indexOf(imageId);\n        removeFromList(imageIdIndex);\n        if (stackPrefetch.indicesToRequest.length === 0) {\n            const eventDetail = {\n                element: element,\n                lastPrefetchedImageId: imageId,\n            };\n            triggerEvent(eventTarget, Events.STACK_PREFETCH_COMPLETE, eventDetail);\n        }\n    }\n    let lowerIndex = nearest.low;\n    let higherIndex = nearest.high;\n    const imageIdsToPrefetch = [];\n    while (lowerIndex >= 0 ||\n        higherIndex < stackPrefetch.indicesToRequest.length) {\n        const currentIndex = stack.currentImageIdIndex;\n        const shouldSkipLower = currentIndex - stackPrefetch.indicesToRequest[lowerIndex] >\n            configuration.maxImagesToPrefetch;\n        const shouldSkipHigher = stackPrefetch.indicesToRequest[higherIndex] - currentIndex >\n            configuration.maxImagesToPrefetch;\n        const shouldLoadLower = !shouldSkipLower && lowerIndex >= 0;\n        const shouldLoadHigher = !shouldSkipHigher && higherIndex < stackPrefetch.indicesToRequest.length;\n        if (!shouldLoadHigher && !shouldLoadLower) {\n            break;\n        }\n        if (shouldLoadLower) {\n            nextImageIdIndex = stackPrefetch.indicesToRequest[lowerIndex--];\n            imageId = stack.imageIds[nextImageIdIndex];\n            imageIdsToPrefetch.push(imageId);\n        }\n        if (shouldLoadHigher) {\n            nextImageIdIndex = stackPrefetch.indicesToRequest[higherIndex++];\n            imageId = stack.imageIds[nextImageIdIndex];\n            imageIdsToPrefetch.push(imageId);\n        }\n    }\n    const requestFn = (imageId, options) => {\n        const { retrieveOptions = {} } = metaData.get(imageRetrieveMetadataProvider.IMAGE_RETRIEVE_CONFIGURATION, imageId, 'stack') || {};\n        options.retrieveOptions = {\n            ...options.retrieveOptions,\n            ...(retrieveOptions.default || Object.values(retrieveOptions)?.[0] || {}),\n        };\n        return imageLoader\n            .loadAndCacheImage(imageId, options)\n            .then(() => doneCallback(imageId));\n    };\n    imageIdsToPrefetch.forEach((imageId) => {\n        const options = {\n            requestType,\n        };\n        imageLoadPoolManager.addRequest(requestFn.bind(null, imageId, options), requestType, {\n            imageId,\n        }, priority);\n    });\n}\nfunction onImageUpdated(e) {\n    clearTimeout(resetPrefetchTimeout);\n    resetPrefetchTimeout = setTimeout(function () {\n        const element = e.target;\n        try {\n            prefetch(element);\n        }\n        catch (error) {\n            return;\n        }\n    }, resetPrefetchDelay);\n}\nfunction enable(element) {\n    const stack = getStackData(element);\n    if (!stack || !stack.imageIds || stack.imageIds.length === 0) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    const stackPrefetchData = {\n        indicesToRequest: range(0, stack.imageIds.length - 1),\n        enabled: true,\n        direction: 1,\n    };\n    const indexOfCurrentImage = stackPrefetchData.indicesToRequest.indexOf(stack.currentImageIdIndex);\n    stackPrefetchData.indicesToRequest.splice(indexOfCurrentImage, 1);\n    addToolState(element, stackPrefetchData);\n    prefetch(element);\n    element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    element.addEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    const promiseRemovedHandler = getPromiseRemovedHandler(element);\n    eventTarget.removeEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n    eventTarget.addEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n}\nfunction disable(element) {\n    clearTimeout(resetPrefetchTimeout);\n    element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    const promiseRemovedHandler = getPromiseRemovedHandler(element);\n    eventTarget.removeEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n    const stackPrefetchData = getToolState(element);\n    if (stackPrefetchData && stackPrefetchData.indicesToRequest.length) {\n        stackPrefetchData.enabled = false;\n        imageLoadPoolManager.clearRequestStack(requestType);\n    }\n}\nfunction getConfiguration() {\n    return configuration;\n}\nfunction setConfiguration(config) {\n    configuration = config;\n}\nconst stackPrefetch = { enable, disable, getConfiguration, setConfiguration };\nexport default stackPrefetch;\n","import { imageLoader, Enums, eventTarget, imageLoadPoolManager, cache, metaData, utilities, triggerEvent, } from '@cornerstonejs/core';\nimport { addToolState, getToolState } from './state';\nimport { getStackData, requestType, clearFromImageIds, getPromiseRemovedHandler, } from './stackPrefetchUtils';\nimport { Events } from '../../enums';\nconst { imageRetrieveMetadataProvider } = utilities;\nlet configuration = {\n    maxImagesToPrefetch: Infinity,\n    minBefore: 2,\n    maxAfter: 2,\n    directionExtraImages: 10,\n    preserveExistingPool: false,\n};\nlet resetPrefetchTimeout;\nconst resetPrefetchDelay = 5;\nconst priorities = {};\nconst enable = (element, priority = 0) => {\n    const stack = getStackData(element);\n    if (!stack) {\n        return;\n    }\n    if (!stack.imageIds?.length) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    updateToolState(element);\n    priorities[element] = priority;\n    prefetch(element, priority);\n    element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    element.addEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    const promiseRemovedHandler = getPromiseRemovedHandler(element);\n    eventTarget.removeEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n    eventTarget.addEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n};\nfunction prefetch(element, priority = 0) {\n    const stack = getStackData(element);\n    if (!stack) {\n        return;\n    }\n    if (!stack?.imageIds?.length) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    const stackPrefetchData = getToolState(element);\n    if (!stackPrefetchData) {\n        return;\n    }\n    const stackPrefetch = (stackPrefetchData || {});\n    stackPrefetch.enabled =\n        stackPrefetch.enabled && (stackPrefetch.indicesToRequest?.length ?? 0) > 0;\n    if (stackPrefetch.enabled === false) {\n        return;\n    }\n    function removeFromList(imageIdIndex) {\n        const index = stackPrefetch.indicesToRequest.indexOf(imageIdIndex);\n        if (index > -1) {\n            stackPrefetch.indicesToRequest.splice(index, 1);\n        }\n    }\n    const indicesToRequestCopy = stackPrefetch.indicesToRequest.slice();\n    const { currentImageIdIndex } = stack;\n    indicesToRequestCopy.forEach((imageIdIndex) => {\n        const imageId = stack.imageIds[imageIdIndex];\n        if (!imageId) {\n            return;\n        }\n        const distance = Math.abs(currentImageIdIndex - imageIdIndex);\n        const imageCached = distance < 6\n            ? cache.getImageLoadObject(imageId)\n            : cache.isLoaded(imageId);\n        if (imageCached) {\n            removeFromList(imageIdIndex);\n        }\n    });\n    if (!stackPrefetch.indicesToRequest.length) {\n        return;\n    }\n    if (!configuration.preserveExistingPool) {\n        imageLoadPoolManager.filterRequests(clearFromImageIds(stack));\n    }\n    function doneCallback(imageId) {\n        const imageIdIndex = stack.imageIds.indexOf(imageId);\n        removeFromList(imageIdIndex);\n        const image = cache.getCachedImageBasedOnImageURI(imageId);\n        const { stats } = stackPrefetch;\n        const decodeTimeInMS = image?.image?.decodeTimeInMS || 0;\n        if (decodeTimeInMS) {\n            stats.imageIds.set(imageId, decodeTimeInMS);\n            stats.decodeTimeInMS += decodeTimeInMS;\n            const loadTimeInMS = image?.image?.loadTimeInMS || 0;\n            stats.loadTimeInMS += loadTimeInMS;\n        }\n        if (!stackPrefetch.indicesToRequest.length) {\n            if (image?.sizeInBytes) {\n                const { sizeInBytes } = image;\n                const usage = cache.getMaxCacheSize() / 4 / sizeInBytes;\n                if (!stackPrefetch.cacheFill) {\n                    stats.initialTime = Date.now() - stats.start;\n                    stats.initialSize = stats.imageIds.size;\n                    updateToolState(element, usage);\n                    prefetch(element, priority);\n                }\n                else if (stats.imageIds.size) {\n                    stats.fillTime = Date.now() - stats.start;\n                    const { size } = stats.imageIds;\n                    stats.fillSize = size;\n                }\n            }\n        }\n        if (stackPrefetch.indicesToRequest.length === 0) {\n            const eventDetail = {\n                element: element,\n                lastPrefetchedImageId: imageId,\n            };\n            triggerEvent(eventTarget, Events.STACK_PREFETCH_COMPLETE, eventDetail);\n        }\n    }\n    const requestFn = (imageId, options) => {\n        const { retrieveOptions = {} } = metaData.get(imageRetrieveMetadataProvider.IMAGE_RETRIEVE_CONFIGURATION, imageId, 'stack') || {};\n        options.retrieveOptions = {\n            ...options.retrieveOptions,\n            ...(retrieveOptions.default || Object.values(retrieveOptions)?.[0] || {}),\n        };\n        return imageLoader\n            .loadAndCacheImage(imageId, options)\n            .then(() => doneCallback(imageId));\n    };\n    stackPrefetch.indicesToRequest.forEach((imageIdIndex) => {\n        const imageId = stack.imageIds[imageIdIndex];\n        const options = {\n            requestType,\n        };\n        imageLoadPoolManager.addRequest(requestFn.bind(null, imageId, options), requestType, {\n            imageId,\n        }, priority);\n    });\n}\nfunction onImageUpdated(e) {\n    clearTimeout(resetPrefetchTimeout);\n    resetPrefetchTimeout = setTimeout(function () {\n        const element = e.target;\n        try {\n            updateToolState(element);\n            prefetch(element, priorities[element]);\n        }\n        catch (error) {\n            return;\n        }\n    }, resetPrefetchDelay);\n}\nconst signum = (x) => (x < 0 ? -1 : 1);\nconst updateToolState = (element, usage) => {\n    const stack = getStackData(element);\n    if (!stack) {\n        return;\n    }\n    if (!stack.imageIds?.length) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    const { currentImageIdIndex } = stack;\n    let { maxAfter = 2, minBefore = 2 } = configuration;\n    const { directionExtraImages = 10 } = configuration;\n    const stackPrefetchData = getToolState(element) ||\n        {\n            indicesToRequest: [],\n            currentImageIdIndex,\n            stackCount: 0,\n            enabled: true,\n            direction: 1,\n            stats: {\n                start: Date.now(),\n                imageIds: new Map(),\n                decodeTimeInMS: 0,\n                loadTimeInMS: 0,\n                totalBytes: 0,\n            },\n        };\n    const delta = currentImageIdIndex - stackPrefetchData.currentImageIdIndex;\n    stackPrefetchData.direction = signum(delta);\n    stackPrefetchData.currentImageIdIndex = currentImageIdIndex;\n    stackPrefetchData.enabled = true;\n    if (stackPrefetchData.stackCount < 100) {\n        stackPrefetchData.stackCount += directionExtraImages;\n    }\n    if (Math.abs(delta) > maxAfter || !delta) {\n        stackPrefetchData.stackCount = 0;\n        if (usage) {\n            const positionFraction = currentImageIdIndex / stack.imageIds.length;\n            minBefore = Math.ceil(usage * positionFraction);\n            maxAfter = Math.ceil(usage * (1 - positionFraction));\n            stackPrefetchData.cacheFill = true;\n        }\n        else {\n            stackPrefetchData.cacheFill = false;\n        }\n    }\n    else if (delta < 0) {\n        minBefore += stackPrefetchData.stackCount;\n        maxAfter = 0;\n    }\n    else {\n        maxAfter += stackPrefetchData.stackCount;\n        minBefore = 0;\n    }\n    const minIndex = Math.max(0, currentImageIdIndex - minBefore);\n    const maxIndex = Math.min(stack.imageIds.length - 1, currentImageIdIndex + maxAfter);\n    const indicesToRequest = [];\n    for (let i = currentImageIdIndex + 1; i <= maxIndex; i++) {\n        indicesToRequest.push(i);\n    }\n    for (let i = currentImageIdIndex - 1; i >= minIndex; i--) {\n        indicesToRequest.push(i);\n    }\n    stackPrefetchData.indicesToRequest = indicesToRequest;\n    addToolState(element, stackPrefetchData);\n};\nfunction disable(element) {\n    clearTimeout(resetPrefetchTimeout);\n    element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    const promiseRemovedHandler = getPromiseRemovedHandler(element);\n    eventTarget.removeEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n    const stackPrefetchData = getToolState(element);\n    if (stackPrefetchData) {\n        stackPrefetchData.enabled = false;\n    }\n}\nfunction getConfiguration() {\n    return configuration;\n}\nfunction setConfiguration(config) {\n    configuration = config;\n}\nconst stackContextPrefetch = {\n    enable,\n    disable,\n    getConfiguration,\n    setConfiguration,\n};\nexport default stackContextPrefetch;\n","import { Enums } from '@cornerstonejs/core';\nfunction sumOverDimensionGroups(voxelManager, dimensionGroups) {\n    const arrayLength = voxelManager.getScalarDataLength();\n    const resultArray = new Float32Array(arrayLength);\n    for (const dimensionGroupNumber of dimensionGroups) {\n        const scalarData = voxelManager.getDimensionGroupScalarData(dimensionGroupNumber);\n        for (let i = 0; i < arrayLength; i++) {\n            resultArray[i] += scalarData[i];\n        }\n    }\n    return resultArray;\n}\nfunction averageOverDimensionGroups(voxelManager, dimensionGroups) {\n    const sumArray = sumOverDimensionGroups(voxelManager, dimensionGroups);\n    const numDimensionGroups = dimensionGroups.length;\n    for (let i = 0; i < sumArray.length; i++) {\n        sumArray[i] /= numDimensionGroups;\n    }\n    return sumArray;\n}\nconst operationFunctions = {\n    [Enums.GenerateImageType.SUM]: (voxelManager, dimensionGroups, callback) => {\n        const resultArray = sumOverDimensionGroups(voxelManager, dimensionGroups);\n        for (let i = 0; i < resultArray.length; i++) {\n            callback(i, resultArray[i]);\n        }\n    },\n    [Enums.GenerateImageType.AVERAGE]: (voxelManager, dimensionGroups, callback) => {\n        const resultArray = averageOverDimensionGroups(voxelManager, dimensionGroups);\n        for (let i = 0; i < resultArray.length; i++) {\n            callback(i, resultArray[i]);\n        }\n    },\n    [Enums.GenerateImageType.SUBTRACT]: (voxelManager, dimensionGroups, callback) => {\n        if (dimensionGroups.length !== 2) {\n            throw new Error('Please provide only 2 dimension groups for subtraction.');\n        }\n        const arrayLength = voxelManager.getScalarDataLength();\n        const scalarData1 = voxelManager.getDimensionGroupScalarData(dimensionGroups[0]);\n        const scalarData2 = voxelManager.getDimensionGroupScalarData(dimensionGroups[1]);\n        for (let i = 0; i < arrayLength; i++) {\n            const difference = scalarData1[i] - scalarData2[i];\n            callback(i, difference);\n        }\n    },\n};\nfunction generateImageFromTimeData(dynamicVolume, operation, options) {\n    const { dimensionGroupNumbers, frameNumbers } = options;\n    if (frameNumbers) {\n        console.warn('Warning: frameNumbers parameter is deprecated. Please use dimensionGroupNumbers instead.');\n    }\n    const dimensionGroups = dimensionGroupNumbers ||\n        frameNumbers ||\n        Array.from({ length: dynamicVolume.numDimensionGroups }, (_, i) => i + 1);\n    if (dimensionGroups.length <= 1) {\n        throw new Error('Please provide two or more dimension groups');\n    }\n    const voxelManager = dynamicVolume.voxelManager;\n    const arrayLength = voxelManager.getScalarDataLength();\n    const operationFunction = operationFunctions[operation];\n    if (!operationFunction) {\n        throw new Error(`Unsupported operation: ${operation}`);\n    }\n    const resultArray = new Float32Array(arrayLength);\n    operationFunction(voxelManager, dimensionGroups, (index, value) => {\n        resultArray[index] = value;\n    });\n    return resultArray;\n}\nfunction updateVolumeFromTimeData(dynamicVolume, operation, options) {\n    const { dimensionGroupNumbers, frameNumbers, targetVolume } = options;\n    if (!targetVolume) {\n        throw new Error('A target volume must be provided');\n    }\n    if (frameNumbers) {\n        console.warn('Warning: frameNumbers parameter is deprecated. Please use dimensionGroupNumbers instead.');\n    }\n    const dimensionGroups = dimensionGroupNumbers ||\n        frameNumbers ||\n        Array.from({ length: dynamicVolume.numDimensionGroups }, (_, i) => i + 1);\n    if (dimensionGroups.length <= 1) {\n        throw new Error('Please provide two or more dimension groups');\n    }\n    const voxelManager = dynamicVolume.voxelManager;\n    const targetVoxelManager = targetVolume.voxelManager;\n    const operationFunction = operationFunctions[operation];\n    if (!operationFunction) {\n        throw new Error(`Unsupported operation: ${operation}`);\n    }\n    operationFunction(voxelManager, dimensionGroups, (index, value) => {\n        targetVoxelManager.setAtIndex(index, value);\n    });\n    targetVoxelManager.resetModifiedSlices();\n    for (let k = 0; k < targetVolume.dimensions[2]; k++) {\n        targetVoxelManager.modifiedSlices.add(k);\n    }\n}\nexport { generateImageFromTimeData, updateVolumeFromTimeData };\n","import { vec3 } from 'gl-matrix';\nexport function getPoint(points, idx) {\n    const idx3 = idx * 3;\n    if (idx3 < points.length) {\n        return vec3.fromValues(points[idx3], points[idx3 + 1], points[idx3 + 2]);\n    }\n}\nexport function getPolyDataPointIndexes(polyData) {\n    const linesData = polyData.getLines().getData();\n    let idx = 0;\n    const lineSegments = new Map();\n    while (idx < linesData.length) {\n        const segmentSize = linesData[idx++];\n        const segment = [];\n        for (let i = 0; i < segmentSize; i++) {\n            segment.push(linesData[idx + i]);\n        }\n        lineSegments.set(segment[0], segment);\n        idx += segmentSize;\n    }\n    const contours = [];\n    const findStartingPoint = (map) => {\n        for (const [key, value] of map.entries()) {\n            if (value !== undefined) {\n                return key;\n            }\n        }\n        return -1;\n    };\n    let startPoint = findStartingPoint(lineSegments);\n    while (startPoint !== -1) {\n        const contour = [startPoint];\n        while (lineSegments.has(startPoint)) {\n            const nextPoint = lineSegments.get(startPoint)[1];\n            if (lineSegments.has(nextPoint)) {\n                contour.push(nextPoint);\n            }\n            lineSegments.delete(startPoint);\n            startPoint = nextPoint;\n        }\n        contours.push(contour);\n        startPoint = findStartingPoint(lineSegments);\n    }\n    return contours.length ? contours : undefined;\n}\nexport function getPolyDataPoints(polyData) {\n    const contoursIndexes = getPolyDataPointIndexes(polyData);\n    if (!contoursIndexes) {\n        return;\n    }\n    const rawPointsData = polyData.getPoints().getData();\n    return contoursIndexes.map((contourIndexes) => contourIndexes.map((index) => getPoint(rawPointsData, index)));\n}\n","import { vec2 } from 'gl-matrix';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport { isRangeValid, areColorbarRangesEqual } from './common';\nimport { ColorbarRangeTextPosition } from './enums/ColorbarRangeTextPosition';\nimport { ColorbarCanvas } from './ColorbarCanvas';\nimport { ColorbarTicks } from './ColorbarTicks';\nimport isRangeTextPositionValid from './common/isRangeTextPositionValid';\nimport Widget from '../../../widgets/Widget';\nconst DEFAULTS = {\n    MULTIPLIER: 1,\n    RANGE_TEXT_POSITION: ColorbarRangeTextPosition.Right,\n    TICKS_BAR_SIZE: 50,\n};\nclass Colorbar extends Widget {\n    constructor(props) {\n        super(props);\n        this._isMouseOver = false;\n        this._isInteracting = false;\n        this._mouseOverCallback = (evt) => {\n            this._isMouseOver = true;\n            this.showTicks();\n            evt.stopPropagation();\n        };\n        this._mouseOutCallback = (evt) => {\n            this._isMouseOver = false;\n            this.hideTicks();\n            evt.stopPropagation();\n        };\n        this._mouseDownCallback = (evt) => {\n            this._isInteracting = true;\n            this.showTicks();\n            this._addVOIEventListeners(evt);\n            evt.stopPropagation();\n        };\n        this._mouseDragCallback = (evt, initialState) => {\n            const multipliers = this.getVOIMultipliers();\n            const currentPoints = this._getPointsFromMouseEvent(evt);\n            const { points: startPoints, voiRange: startVOIRange } = initialState;\n            const canvasDelta = vec2.sub(vec2.create(), currentPoints.local, startPoints.local);\n            const wwDelta = canvasDelta[0] * multipliers[0];\n            const wcDelta = canvasDelta[1] * multipliers[1];\n            if (!wwDelta && !wcDelta) {\n                return;\n            }\n            const { lower: voiLower, upper: voiUpper } = startVOIRange;\n            let { windowWidth, windowCenter } = csUtils.windowLevel.toWindowLevel(voiLower, voiUpper);\n            windowWidth = Math.max(windowWidth + wwDelta, 1);\n            windowCenter += wcDelta;\n            const newVoiRange = csUtils.windowLevel.toLowHighRange(windowWidth, windowCenter);\n            this.voiRange = newVoiRange;\n            evt.stopPropagation();\n            evt.preventDefault();\n        };\n        this._mouseUpCallback = (evt) => {\n            this._isInteracting = false;\n            this.hideTicks();\n            this._removeVOIEventListeners();\n            evt.stopPropagation();\n        };\n        this._eventListenersManager =\n            new csUtils.eventListener.MultiTargetEventListenerManager();\n        this._colormaps = Colorbar.getColormapsMap(props);\n        this._activeColormapName = Colorbar.getInitialColormapName(props);\n        this._canvas = this._createCanvas(props);\n        this._ticksBar = this._createTicksBar(props);\n        this._rangeTextPosition =\n            props.ticks?.position ?? DEFAULTS.RANGE_TEXT_POSITION;\n        this._canvas.appendTo(this.rootElement);\n        this._ticksBar.appendTo(this.rootElement);\n        this._addRootElementEventListeners();\n    }\n    get activeColormapName() {\n        return this._activeColormapName;\n    }\n    set activeColormapName(colormapName) {\n        if (colormapName === this._activeColormapName) {\n            return;\n        }\n        const colormap = this._colormaps.get(colormapName);\n        if (!colormap) {\n            console.warn(`Invalid colormap name (${colormapName})`);\n            return;\n        }\n        this._activeColormapName = colormapName;\n        this._canvas.colormap = colormap;\n    }\n    get imageRange() {\n        return this._canvas.imageRange;\n    }\n    set imageRange(imageRange) {\n        this._canvas.imageRange = imageRange;\n        this._ticksBar.imageRange = imageRange;\n    }\n    get voiRange() {\n        return this._canvas.voiRange;\n    }\n    set voiRange(voiRange) {\n        const { voiRange: currentVoiRange } = this._canvas;\n        if (!isRangeValid(voiRange) ||\n            areColorbarRangesEqual(voiRange, currentVoiRange)) {\n            return;\n        }\n        this._canvas.voiRange = voiRange;\n        this._ticksBar.voiRange = voiRange;\n        this.onVoiChange(voiRange);\n    }\n    get showFullImageRange() {\n        return this._canvas.showFullImageRange;\n    }\n    set showFullImageRange(value) {\n        this._canvas.showFullImageRange = value;\n        this._ticksBar.showFullPixelValueRange = value;\n    }\n    destroy() {\n        super.destroy();\n        this._eventListenersManager.reset();\n    }\n    createRootElement() {\n        const rootElement = document.createElement('div');\n        Object.assign(rootElement.style, {\n            position: 'relative',\n            fontSize: '0',\n            width: '100%',\n            height: '100%',\n        });\n        return rootElement;\n    }\n    onContainerResize() {\n        super.onContainerResize();\n        this.updateTicksBar();\n        this._canvas.size = this.containerSize;\n    }\n    getVOIMultipliers() {\n        return [DEFAULTS.MULTIPLIER, DEFAULTS.MULTIPLIER];\n    }\n    onVoiChange(voiRange) {\n    }\n    showTicks() {\n        this.updateTicksBar();\n        this._ticksBar.visible = true;\n    }\n    hideTicks() {\n        if (this._isInteracting || this._isMouseOver) {\n            return;\n        }\n        this._ticksBar.visible = false;\n    }\n    static getColormapsMap(props) {\n        const { colormaps } = props;\n        return colormaps.reduce((items, item) => items.set(item.Name, item), new Map());\n    }\n    static getInitialColormapName(props) {\n        const { activeColormapName, colormaps } = props;\n        const colormapExists = !!activeColormapName &&\n            colormaps.some((cm) => cm.Name === activeColormapName);\n        return colormapExists ? activeColormapName : colormaps[0].Name;\n    }\n    _createCanvas(props) {\n        const { imageRange, voiRange, showFullPixelValueRange } = props;\n        const colormap = this._colormaps.get(this._activeColormapName);\n        return new ColorbarCanvas({\n            colormap,\n            imageRange,\n            voiRange: voiRange,\n            showFullPixelValueRange,\n        });\n    }\n    _createTicksBar(props) {\n        const ticksProps = props.ticks;\n        return new ColorbarTicks({\n            imageRange: props.imageRange,\n            voiRange: props.voiRange,\n            ticks: ticksProps,\n            showFullPixelValueRange: props.showFullPixelValueRange,\n        });\n    }\n    _getPointsFromMouseEvent(evt) {\n        const { rootElement: element } = this;\n        const clientPoint = [evt.clientX, evt.clientY];\n        const pagePoint = [evt.pageX, evt.pageY];\n        const rect = element.getBoundingClientRect();\n        const localPoints = [\n            pagePoint[0] - rect.left - window.pageXOffset,\n            pagePoint[1] - rect.top - window.pageYOffset,\n        ];\n        return { client: clientPoint, page: pagePoint, local: localPoints };\n    }\n    updateTicksBar() {\n        const { width: containerWidth, height: containerHeight } = this.containerSize;\n        if (containerWidth === 0 && containerHeight === 0) {\n            return;\n        }\n        const { _ticksBar: ticksBar, _rangeTextPosition: rangeTextPosition } = this;\n        const isHorizontal = containerWidth >= containerHeight;\n        const width = isHorizontal ? containerWidth : DEFAULTS.TICKS_BAR_SIZE;\n        const height = isHorizontal ? DEFAULTS.TICKS_BAR_SIZE : containerHeight;\n        if (!isRangeTextPositionValid(containerWidth, containerHeight, rangeTextPosition)) {\n            throw new Error('Invalid rangeTextPosition value for the current colobar orientation');\n        }\n        let ticksBarTop;\n        let ticksBarLeft;\n        ticksBar.size = { width, height };\n        if (isHorizontal) {\n            ticksBarLeft = 0;\n            ticksBarTop =\n                rangeTextPosition === ColorbarRangeTextPosition.Top\n                    ? -height\n                    : containerHeight;\n        }\n        else {\n            ticksBarTop = 0;\n            ticksBarLeft =\n                rangeTextPosition === ColorbarRangeTextPosition.Left\n                    ? -width\n                    : containerWidth;\n        }\n        ticksBar.top = ticksBarTop;\n        ticksBar.left = ticksBarLeft;\n    }\n    _addRootElementEventListeners() {\n        const { _eventListenersManager: manager } = this;\n        const { rootElement: element } = this;\n        manager.addEventListener(element, 'mouseover', this._mouseOverCallback);\n        manager.addEventListener(element, 'mouseout', this._mouseOutCallback);\n        manager.addEventListener(element, 'mousedown', this._mouseDownCallback);\n    }\n    _addVOIEventListeners(evt) {\n        const { _eventListenersManager: manager } = this;\n        const points = this._getPointsFromMouseEvent(evt);\n        const voiRange = { ...this._canvas.voiRange };\n        const initialDragState = { points, voiRange };\n        this._removeVOIEventListeners();\n        manager.addEventListener(document, 'voi.mouseup', this._mouseUpCallback);\n        manager.addEventListener(document, 'voi.mousemove', (evt) => this._mouseDragCallback(evt, initialDragState));\n    }\n    _removeVOIEventListeners() {\n        const { _eventListenersManager: manager } = this;\n        manager.removeEventListener(document, 'voi.mouseup');\n        manager.removeEventListener(document, 'voi.mousemove');\n    }\n}\nexport { Colorbar as default, Colorbar };\n","import { eventTarget, VolumeViewport, StackViewport, Enums, utilities, getEnabledElement, cache, } from '@cornerstonejs/core';\nimport { Colorbar } from './Colorbar';\nimport { getVOIMultipliers } from '../../getVOIMultipliers';\nconst { Events } = Enums;\nconst defaultImageRange = { lower: -1000, upper: 1000 };\nclass ViewportColorbar extends Colorbar {\n    constructor(props) {\n        const { element, volumeId } = props;\n        const imageRange = ViewportColorbar._getImageRange(element, volumeId);\n        const voiRange = ViewportColorbar._getVOIRange(element, volumeId);\n        super({ ...props, imageRange, voiRange });\n        this.autoHideTicks = () => {\n            if (this._hideTicksTimeoutId) {\n                return;\n            }\n            const timeLeft = this._hideTicksTime - Date.now();\n            if (timeLeft <= 0) {\n                this.hideTicks();\n            }\n            else {\n                this._hideTicksTimeoutId = window.setTimeout(() => {\n                    this._hideTicksTimeoutId = 0;\n                    this.autoHideTicks();\n                }, timeLeft);\n            }\n        };\n        this._stackNewImageCallback = () => {\n            this.imageRange = ViewportColorbar._getImageRange(this._element);\n        };\n        this._imageVolumeModifiedCallback = (evt) => {\n            const { volumeId } = evt.detail;\n            if (volumeId !== this._volumeId) {\n                return;\n            }\n            const { _element: element } = this;\n            this.imageRange = ViewportColorbar._getImageRange(element, volumeId);\n        };\n        this._viewportVOIModifiedCallback = (evt) => {\n            const { viewportId, volumeId, range: voiRange, colormap } = evt.detail;\n            const { viewport } = this.enabledElement;\n            if (viewportId !== viewport.id || volumeId !== this._volumeId) {\n                return;\n            }\n            this.voiRange = voiRange;\n            if (colormap) {\n                this.activeColormapName = colormap.name;\n            }\n            this.showAndAutoHideTicks();\n        };\n        this._viewportColormapModifiedCallback = (evt) => {\n            const { viewportId, colormap, volumeId } = evt.detail;\n            const { viewport } = this.enabledElement;\n            if (viewportId !== viewport.id || volumeId !== this._volumeId) {\n                return;\n            }\n            this.activeColormapName = colormap.name;\n        };\n        this._element = element;\n        this._volumeId = volumeId;\n        this._addCornerstoneEventListener();\n    }\n    get element() {\n        return this._element;\n    }\n    get enabledElement() {\n        return getEnabledElement(this._element);\n    }\n    getVOIMultipliers() {\n        const { viewport } = this.enabledElement;\n        return getVOIMultipliers(viewport, this._volumeId);\n    }\n    onVoiChange(voiRange) {\n        super.onVoiChange(voiRange);\n        const { viewport } = this.enabledElement;\n        if (viewport instanceof StackViewport) {\n            viewport.setProperties({\n                voiRange: voiRange,\n            });\n            viewport.render();\n        }\n        else if (viewport instanceof VolumeViewport) {\n            const { _volumeId: volumeId } = this;\n            const viewportsContainingVolumeUID = utilities.getViewportsWithVolumeId(volumeId);\n            viewport.setProperties({ voiRange }, volumeId);\n            viewportsContainingVolumeUID.forEach((vp) => vp.render());\n        }\n    }\n    static _getImageRange(element, volumeId) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const actor = viewport.getImageActor(volumeId);\n        if (!actor) {\n            return defaultImageRange;\n        }\n        const imageData = actor.getMapper().getInputData();\n        const scalarData = imageData.getPointData().getScalars();\n        let imageRange;\n        if (!scalarData) {\n            if (!volumeId) {\n                throw new Error('volumeId is required when scalarData is not available');\n            }\n            const volume = cache.getVolume(volumeId);\n            const [minValue, maxValue] = volume.voxelManager.getRange();\n            imageRange = [minValue, maxValue];\n        }\n        else {\n            imageRange = scalarData.getRange();\n        }\n        return imageRange[0] === 0 && imageRange[1] === 0\n            ? defaultImageRange\n            : { lower: imageRange[0], upper: imageRange[1] };\n    }\n    static _getVOIRange(element, volumeId) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const actor = viewport.getImageActor(volumeId);\n        if (!actor) {\n            return defaultImageRange;\n        }\n        const voiRange = actor.getProperty().getRGBTransferFunction(0).getRange();\n        return voiRange[0] === 0 && voiRange[1] === 0\n            ? defaultImageRange\n            : { lower: voiRange[0], upper: voiRange[1] };\n    }\n    showAndAutoHideTicks(interval = 1000) {\n        this._hideTicksTime = Date.now() + interval;\n        this.showTicks();\n        this.autoHideTicks();\n    }\n    _addCornerstoneEventListener() {\n        const { _element: element } = this;\n        eventTarget.addEventListener(Events.IMAGE_VOLUME_MODIFIED, this._imageVolumeModifiedCallback);\n        element.addEventListener(Events.STACK_NEW_IMAGE, this._stackNewImageCallback);\n        element.addEventListener(Events.VOI_MODIFIED, this._viewportVOIModifiedCallback);\n        element.addEventListener(Events.COLORMAP_MODIFIED, this._viewportColormapModifiedCallback);\n    }\n    destroy() {\n        super.destroy();\n        const { _element: element } = this;\n        eventTarget.removeEventListener(Events.IMAGE_VOLUME_MODIFIED, this._imageVolumeModifiedCallback);\n        element.removeEventListener(Events.STACK_NEW_IMAGE, this._stackNewImageCallback);\n        element.removeEventListener(Events.VOI_MODIFIED, this._viewportVOIModifiedCallback);\n        element.removeEventListener(Events.COLORMAP_MODIFIED, this._viewportColormapModifiedCallback);\n    }\n}\nexport { ViewportColorbar as default, ViewportColorbar };\n","import { utilities as csUtils, StackViewport, VolumeViewport, } from '@cornerstonejs/core';\nfunction extractWindowLevelRegionToolData(viewport) {\n    if (viewport instanceof VolumeViewport) {\n        return extractImageDataVolume(viewport);\n    }\n    if (viewport instanceof StackViewport) {\n        return extractImageDataStack(viewport);\n    }\n    throw new Error('Viewport not supported');\n}\nfunction extractImageDataVolume(viewport) {\n    const { scalarData, width, height } = csUtils.getCurrentVolumeViewportSlice(viewport);\n    const { min: minPixelValue, max: maxPixelValue } = csUtils.getMinMax(scalarData);\n    return {\n        scalarData,\n        minPixelValue,\n        maxPixelValue,\n        width,\n        height,\n        rows: width,\n        columns: height,\n    };\n}\nfunction extractImageDataStack(viewport) {\n    const imageData = viewport.getImageData();\n    const { scalarData } = imageData;\n    const { min: minPixelValue, max: maxPixelValue } = csUtils.getMinMax(scalarData);\n    const width = imageData.dimensions[0];\n    const height = imageData.dimensions[1];\n    const { rows, columns, color } = viewport.getCornerstoneImage();\n    return {\n        scalarData,\n        width,\n        height,\n        minPixelValue,\n        maxPixelValue,\n        rows,\n        columns,\n        color,\n    };\n}\nexport { extractWindowLevelRegionToolData };\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { pointInSphere } from './math/sphere';\nimport { getBoundingBoxAroundShape } from './boundingBox';\nconst { transformWorldToIndex } = csUtils;\nexport function pointInSurroundingSphereCallback(imageData, circlePoints, callback, viewport) {\n    const { boundsIJK, centerWorld, radiusWorld } = _getBounds(circlePoints, imageData, viewport);\n    const sphereObj = {\n        center: centerWorld,\n        radius: radiusWorld,\n    };\n    const dimensions = imageData.getDimensions();\n    const voxelManager = csUtils.VoxelManager.createScalarVolumeVoxelManager({\n        dimensions: dimensions,\n        scalarData: imageData.getPointData().getScalars().getData(),\n    });\n    voxelManager.forEach(callback, {\n        boundsIJK,\n        isInObject: (pointLPS) => pointInSphere(sphereObj, pointLPS),\n        imageData,\n    });\n}\nfunction _getBounds(circlePoints, imageData, viewport) {\n    const [bottom, top] = circlePoints;\n    const centerWorld = vec3.fromValues((bottom[0] + top[0]) / 2, (bottom[1] + top[1]) / 2, (bottom[2] + top[2]) / 2);\n    const radiusWorld = vec3.distance(bottom, top) / 2;\n    let boundsIJK;\n    if (!viewport) {\n        const centerIJK = transformWorldToIndex(imageData, centerWorld);\n        const spacings = imageData.getSpacing();\n        const minSpacing = Math.min(...spacings);\n        const maxRadiusIJK = Math.ceil(radiusWorld / minSpacing);\n        boundsIJK = [\n            [centerIJK[0] - maxRadiusIJK, centerIJK[0] + maxRadiusIJK],\n            [centerIJK[1] - maxRadiusIJK, centerIJK[1] + maxRadiusIJK],\n            [centerIJK[2] - maxRadiusIJK, centerIJK[2] + maxRadiusIJK],\n        ];\n        return {\n            boundsIJK,\n            centerWorld: centerWorld,\n            radiusWorld,\n        };\n    }\n    boundsIJK = _computeBoundsIJKWithCamera(imageData, viewport, circlePoints, centerWorld, radiusWorld);\n    return {\n        boundsIJK,\n        centerWorld: centerWorld,\n        radiusWorld,\n    };\n}\nfunction _computeBoundsIJKWithCamera(imageData, viewport, circlePoints, centerWorld, radiusWorld) {\n    const [bottom, top] = circlePoints;\n    const dimensions = imageData.getDimensions();\n    const camera = viewport.getCamera();\n    const viewUp = vec3.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);\n    const viewPlaneNormal = vec3.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);\n    const viewRight = vec3.create();\n    vec3.cross(viewRight, viewUp, viewPlaneNormal);\n    const topLeftWorld = vec3.create();\n    const bottomRightWorld = vec3.create();\n    vec3.scaleAndAdd(topLeftWorld, top, viewPlaneNormal, radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottom, viewPlaneNormal, -radiusWorld);\n    vec3.scaleAndAdd(topLeftWorld, topLeftWorld, viewRight, -radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, viewRight, radiusWorld);\n    const sphereCornersIJK = [\n        transformWorldToIndex(imageData, topLeftWorld),\n        (transformWorldToIndex(imageData, bottomRightWorld)),\n    ];\n    const boundsIJK = getBoundingBoxAroundShape(sphereCornersIJK, dimensions);\n    return boundsIJK;\n}\n","import { triggerAnnotationModified } from '../stateManagement/annotation/helpers/state';\nimport { ChangeTypes } from '../enums';\nexport default function setAnnotationLabel(annotation, element, updatedLabel) {\n    annotation.data.label = updatedLabel;\n    triggerAnnotationModified(annotation, element, ChangeTypes.LabelChange);\n}\n","export function pickPoints(hull, slack = 7) {\n    if (!hull.length) {\n        throw new Error('Convex hull is empty');\n    }\n    const n = hull.length;\n    const next = (i) => (i + 1) % n;\n    const walk = (from, to) => {\n        const idx = [];\n        for (let i = from;; i = next(i)) {\n            idx.push(i);\n            if (i === to) {\n                break;\n            }\n        }\n        return idx;\n    };\n    let i2 = 0, i3 = 0;\n    for (let i = 1; i < n; i++) {\n        if (hull[i][0] < hull[i2][0]) {\n            i2 = i;\n        }\n        if (hull[i][0] > hull[i3][0]) {\n            i3 = i;\n        }\n    }\n    const P2 = hull[i2];\n    const P3 = hull[i3];\n    const pathA = walk(i2, i3);\n    const pathB = walk(i3, i2);\n    const globalYmin = Math.min(...hull.map((p) => p[1]));\n    const upperPath = pathA.some((i) => hull[i][1] === globalYmin)\n        ? pathA\n        : pathB;\n    const topY = Math.min(...upperPath.map((i) => hull[i][1]));\n    let arcPts = upperPath\n        .map((i) => hull[i])\n        .filter((p) => Math.abs(p[1] - topY) <= slack);\n    if (arcPts.length < 2) {\n        arcPts = upperPath\n            .map((i) => hull[i])\n            .sort((a, b) => a[1] - b[1])\n            .slice(0, 2);\n    }\n    const P1 = arcPts.reduce((best, p) => (p[0] < best[0] ? p : best), arcPts[0]);\n    const P4 = arcPts.reduce((best, p) => (p[0] > best[0] ? p : best), arcPts[0]);\n    return { P1, P2, P3, P4 };\n}\nexport function computeEdgeBuffer(buffer, width, height) {\n    const total = width * height;\n    const channels = buffer.length / total;\n    if (![1, 3, 4].includes(channels)) {\n        throw new Error('Buffer must be 1,3 or 4 channels per pixel');\n    }\n    const gray = new Float32Array(total);\n    for (let i = 0; i < total; i++) {\n        if (channels === 1) {\n            gray[i] = buffer[i];\n        }\n        else {\n            const base = i * channels;\n            const r = buffer[base];\n            const g = buffer[base + 1];\n            const b = buffer[base + 2];\n            gray[i] = 0.299 * r + 0.587 * g + 0.114 * b;\n        }\n    }\n    const edgeBuf = new Float32Array(total);\n    for (let y = 1; y < height - 1; y++) {\n        for (let x = 1; x < width - 1; x++) {\n            const idx = y * width + x;\n            const i00 = idx - width - 1;\n            const i01 = idx - width;\n            const i02 = idx - width + 1;\n            const i10 = idx - 1;\n            const i11 = idx;\n            const i12 = idx + 1;\n            const i20 = idx + width - 1;\n            const i21 = idx + width;\n            const i22 = idx + width + 1;\n            const gx = -gray[i00] +\n                gray[i02] +\n                -2 * gray[i10] +\n                2 * gray[i12] +\n                -gray[i20] +\n                gray[i22];\n            const gy = gray[i00] +\n                2 * gray[i01] +\n                gray[i02] -\n                gray[i20] -\n                2 * gray[i21] -\n                gray[i22];\n            edgeBuf[idx] = Math.hypot(gx, gy);\n        }\n    }\n    return edgeBuf;\n}\nexport function refineCornersDirectional(edgeBuf, width, height, rough, contour, opts = {}) {\n    const { maxDist = 15, slack = 2 } = opts;\n    const directions = {\n        P1: { dx: -1, dy: -1 },\n        P2: { dx: -1, dy: +1 },\n        P3: { dx: +1, dy: +1 },\n        P4: { dx: +1, dy: -1 },\n    };\n    function snapQuadrant(pt, { dx, dy }, threshold = 5) {\n        const xmin = dx < 0 ? pt[0] - maxDist : pt[0] - slack;\n        const xmax = dx < 0 ? pt[0] + slack : pt[0] + maxDist;\n        const ymin = dy < 0 ? pt[1] - maxDist : pt[1] - slack;\n        const ymax = dy < 0 ? pt[1] + slack : pt[1] + maxDist;\n        let best = pt;\n        for (const [cx, cy] of contour) {\n            if (cx < xmin || cx > xmax || cy < ymin || cy > ymax) {\n                continue;\n            }\n            const xi = Math.round(cx);\n            const yi = Math.round(cy);\n            if (xi < 0 || xi >= width || yi < 0 || yi >= height) {\n                continue;\n            }\n            const xAlign = (xi - best[0]) * dx;\n            const yAlign = (yi - best[0]) * dy;\n            const v = edgeBuf[yi * width + xi];\n            if (v > threshold && (xAlign > 0 || yAlign > 0)) {\n                best = [cx, cy];\n            }\n        }\n        return best;\n    }\n    return {\n        P1: snapQuadrant(rough.P1, directions.P1),\n        P2: snapQuadrant(rough.P2, directions.P2),\n        P3: snapQuadrant(rough.P3, directions.P3),\n        P4: snapQuadrant(rough.P4, directions.P4),\n    };\n}\nexport function calculateFanShapeCorners(imageBuffer, width, height, hull, roughContour) {\n    const rough = pickPoints(hull);\n    const refined = refineCornersDirectional(imageBuffer, width, height, rough, roughContour, {\n        maxDist: 20,\n        step: 0.5,\n    });\n    return refined;\n}\n","import { intersectLine } from '../../../../utilities/math/line';\nfunction angleRad(center, p) {\n    return Math.atan2(p[1] - center[1], p[0] - center[0]);\n}\nexport function deriveFanGeometry(params) {\n    const { P1, P2, P3, P4 } = params;\n    const centerResult = intersectLine(P1, P2, P4, P3, true);\n    if (!centerResult) {\n        throw new Error('Fan edges appear parallel — no apex found');\n    }\n    const center = centerResult;\n    let startAngle = angleRad(center, P1) * (180 / Math.PI);\n    let endAngle = angleRad(center, P4) * (180 / Math.PI);\n    if (endAngle <= startAngle) {\n        const tempAngle = startAngle;\n        startAngle = endAngle;\n        endAngle = tempAngle;\n    }\n    const d1 = Math.hypot(P1[0] - center[0], P1[1] - center[1]);\n    const d4 = Math.hypot(P4[0] - center[0], P4[1] - center[1]);\n    const d2 = Math.hypot(P2[0] - center[0], P2[1] - center[1]);\n    const d3 = Math.hypot(P3[0] - center[0], P3[1] - center[1]);\n    const innerRadius = Math.min(d1, d4);\n    const outerRadius = Math.max(d2, d3);\n    return {\n        center,\n        startAngle,\n        endAngle,\n        innerRadius,\n        outerRadius,\n    };\n}\n","import { cache } from '@cornerstonejs/core';\nimport { segmentLargestUSOutlineFromBuffer } from './segmentLargestUSOutlineFromBuffer';\nimport { generateConvexHullFromContour } from './generateConvexHullFromContour';\nimport { calculateFanShapeCorners } from './calculateFanShapeCorners';\nimport { deriveFanGeometry } from './deriveFanGeometry';\nexport function exportContourJpeg(pixelData, width, height, contour, opts = {}) {\n    const { strokeStyle = '#f00', lineWidth = 2, quality = 0.92 } = opts;\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    const totalPixels = width * height;\n    const channels = pixelData.length / totalPixels;\n    const imgData = ctx.createImageData(width, height);\n    const out = imgData.data;\n    for (let i = 0; i < totalPixels; i++) {\n        const baseIn = i * channels;\n        const baseOut = i * 4;\n        if (channels === 1) {\n            const v = pixelData[baseIn];\n            out[baseOut] = v;\n            out[baseOut + 1] = v;\n            out[baseOut + 2] = v;\n            out[baseOut + 3] = 255;\n        }\n        else {\n            out[baseOut] = pixelData[baseIn];\n            out[baseOut + 1] = pixelData[baseIn + 1];\n            out[baseOut + 2] = pixelData[baseIn + 2];\n            out[baseOut + 3] = channels === 4 ? pixelData[baseIn + 3] : 255;\n        }\n    }\n    ctx.putImageData(imgData, 0, 0);\n    if (contour.length > 0) {\n        ctx.strokeStyle = strokeStyle;\n        ctx.lineWidth = lineWidth;\n        ctx.beginPath();\n        ctx.moveTo(contour[0][0] + 0.5, contour[0][1] + 0.5);\n        for (let i = 1; i < contour.length; i++) {\n            ctx.lineTo(contour[i][0] + 0.5, contour[i][1] + 0.5);\n        }\n        ctx.closePath();\n        ctx.stroke();\n    }\n    return canvas.toDataURL('image/jpeg', quality);\n}\nexport function getPixelData(imageId) {\n    const image = cache.getImage(imageId);\n    if (!image) {\n        return;\n    }\n    const width = image.width;\n    const height = image.height;\n    const pixelData = image.getPixelData();\n    return {\n        pixelData,\n        width,\n        height,\n    };\n}\nexport default function saveBinaryData(url, filename) {\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.style.display = 'none';\n    a.click();\n    a.remove();\n}\nfunction exportFanJpeg(pixelData, width, height, fan, opts = {}) {\n    const { center, startAngle: startAngleInDegrees, endAngle: endAngleInDegrees, innerRadius, outerRadius, } = fan;\n    const { strokeStyle = '#0ff', lineWidth = 2, quality = 0.92 } = opts;\n    const startAngle = (startAngleInDegrees * Math.PI) / 180;\n    const endAngle = (endAngleInDegrees * Math.PI) / 180;\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    const total = width * height;\n    const channels = pixelData.length / total;\n    const imgData = ctx.createImageData(width, height);\n    const out = imgData.data;\n    for (let i = 0; i < total; i++) {\n        const baseOut = i * 4;\n        if (channels === 1) {\n            const v = pixelData[i];\n            out[baseOut] = v;\n            out[baseOut + 1] = v;\n            out[baseOut + 2] = v;\n            out[baseOut + 3] = 255;\n        }\n        else {\n            const baseIn = i * channels;\n            out[baseOut] = pixelData[baseIn];\n            out[baseOut + 1] = pixelData[baseIn + 1];\n            out[baseOut + 2] = pixelData[baseIn + 2];\n            out[baseOut + 3] = channels === 4 ? pixelData[baseIn + 3] : 255;\n        }\n    }\n    ctx.putImageData(imgData, 0, 0);\n    ctx.beginPath();\n    for (let a = startAngle; a <= endAngle; a += 0.01) {\n        const x = center[0] + innerRadius * Math.cos(a);\n        const y = center[1] + innerRadius * Math.sin(a);\n        if (a === startAngle) {\n            ctx.moveTo(x, y);\n        }\n        else {\n            ctx.lineTo(x, y);\n        }\n    }\n    for (let a = endAngle; a >= startAngle; a -= 0.01) {\n        const x = center[0] + outerRadius * Math.cos(a);\n        const y = center[1] + outerRadius * Math.sin(a);\n        ctx.lineTo(x, y);\n    }\n    ctx.closePath();\n    ctx.strokeStyle = strokeStyle;\n    ctx.lineWidth = lineWidth;\n    ctx.stroke();\n    return canvas.toDataURL('image/jpeg', quality);\n}\nexport function downloadFanJpeg(imageId, contourType = 5) {\n    const { contour, simplified, hull, refined, fanGeometry } = calculateFanGeometry(imageId);\n    const { pixelData, width, height } = getPixelData(imageId) || {};\n    if (!pixelData) {\n        return;\n    }\n    let jpegDataUrl;\n    if (contourType === 1) {\n        jpegDataUrl = exportContourJpeg(pixelData, width, height, contour);\n    }\n    else if (contourType === 2) {\n        jpegDataUrl = exportContourJpeg(pixelData, width, height, simplified);\n    }\n    else if (contourType === 3) {\n        jpegDataUrl = exportContourJpeg(pixelData, width, height, hull);\n    }\n    else if (contourType === 4) {\n        jpegDataUrl = exportContourJpeg(pixelData, width, height, [\n            refined.P1,\n            refined.P2,\n            refined.P3,\n            refined.P4,\n        ]);\n    }\n    else {\n        jpegDataUrl = exportFanJpeg(pixelData, width, height, fanGeometry, {\n            strokeStyle: '#f00',\n            lineWidth: 3,\n            quality: 0.95,\n        });\n    }\n    saveBinaryData(jpegDataUrl, 'contour.jpg');\n}\nexport function calculateFanGeometry(imageId) {\n    const { pixelData, width, height } = getPixelData(imageId) || {};\n    if (!pixelData) {\n        return;\n    }\n    const contour = segmentLargestUSOutlineFromBuffer(pixelData, width, height);\n    const { simplified, hull } = generateConvexHullFromContour(contour);\n    const refined = calculateFanShapeCorners(pixelData, width, height, hull, simplified);\n    const fanGeometry = deriveFanGeometry({\n        P1: refined.P1,\n        P2: refined.P2,\n        P3: refined.P3,\n        P4: refined.P4,\n    });\n    return { contour, simplified, hull, refined, fanGeometry };\n}\n","import { floodFill } from '../../../../utilities/segmentation';\nexport function segmentLargestUSOutlineFromBuffer(buffer, width, height) {\n    const totalPixels = width * height;\n    const channelCount = buffer.length / totalPixels;\n    if (![1, 3, 4].includes(channelCount)) {\n        throw new Error('Buffer must be 1, 3, or 4 channels per pixel');\n    }\n    const mask = Array.from({ length: height }, () => new Array(width).fill(false));\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n            const pixelIndex = y * width + x;\n            const base = pixelIndex * channelCount;\n            let isForeground = false;\n            for (let c = 0; c < Math.min(3, channelCount); c++) {\n                if (buffer[base + c] > 0) {\n                    isForeground = true;\n                    break;\n                }\n            }\n            mask[y][x] = isForeground;\n        }\n    }\n    const labels = Array.from({ length: height }, () => new Array(width).fill(0));\n    let currentLabel = 0;\n    const regionSizes = {};\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n            if (mask[y][x] && labels[y][x] === 0) {\n                currentLabel++;\n                const getter = (px, py) => {\n                    if (px < 0 || px >= width || py < 0 || py >= height) {\n                        return false;\n                    }\n                    return mask[py][px] && labels[py][px] === 0;\n                };\n                let pixelCount = 0;\n                const options = {\n                    onFlood: (px, py) => {\n                        labels[py][px] = currentLabel;\n                        pixelCount++;\n                    },\n                    diagonals: false,\n                };\n                floodFill(getter, [x, y], options);\n                regionSizes[currentLabel] = pixelCount;\n            }\n        }\n    }\n    if (currentLabel === 0) {\n        return [];\n    }\n    const largestLabel = Object.keys(regionSizes).reduce((a, b) => regionSizes[a] > regionSizes[b] ? a : b);\n    function isBorder(x, y) {\n        if (labels[y][x] !== +largestLabel) {\n            return false;\n        }\n        for (const [dx, dy] of [\n            [1, 0],\n            [-1, 0],\n            [0, 1],\n            [0, -1],\n        ]) {\n            const nx = x + dx, ny = y + dy;\n            if (nx < 0 ||\n                nx >= width ||\n                ny < 0 ||\n                ny >= height ||\n                labels[ny][nx] !== +largestLabel) {\n                return true;\n            }\n        }\n        return false;\n    }\n    let start = null;\n    outer: for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n            if (isBorder(x, y)) {\n                start = [x, y];\n                break outer;\n            }\n        }\n    }\n    if (!start) {\n        return [];\n    }\n    const dirs = [\n        [1, 0],\n        [1, 1],\n        [0, 1],\n        [-1, 1],\n        [-1, 0],\n        [-1, -1],\n        [0, -1],\n        [1, -1],\n    ];\n    const contour = [];\n    let current = start;\n    let prev = [start[0] - 1, start[1]];\n    do {\n        contour.push([current[0], current[1]]);\n        const dx0 = prev[0] - current[0], dy0 = prev[1] - current[1];\n        let startDir = dirs.findIndex((d) => d[0] === dx0 && d[1] === dy0);\n        if (startDir < 0) {\n            startDir = 0;\n        }\n        let nextPt = null;\n        for (let k = 1; k <= 8; k++) {\n            const [dx, dy] = dirs[(startDir + k) % 8];\n            const nx = current[0] + dx, ny = current[1] + dy;\n            if (nx >= 0 && nx < width && ny >= 0 && ny < height && isBorder(nx, ny)) {\n                nextPt = [nx, ny];\n                const [bdx, bdy] = dirs[(startDir + k - 1 + 8) % 8];\n                prev = [current[0] + bdx, current[1] + bdy];\n                break;\n            }\n        }\n        if (!nextPt) {\n            break;\n        }\n        current = nextPt;\n    } while (current[0] !== start[0] || current[1] !== start[1]);\n    return contour;\n}\n","import * as math from '../../../../utilities/math';\nexport function generateConvexHullFromContour(contour) {\n    const simplified = math.polyline.decimate(contour, 2);\n    const hull = math.polyline.convexHull(simplified);\n    return { simplified, hull };\n}\n","import { utilities, triggerEvent } from '@cornerstonejs/core';\nimport { getAnnotationNearPoint, getAnnotationNearPointOnEnabledElement, } from './getAnnotationNearPoint';\nimport debounce from './debounce';\nimport throttle from './throttle';\nimport isObject from './isObject';\nimport calibrateImageSpacing from './calibrateImageSpacing';\nimport { getCalibratedLengthUnitsAndScale, getCalibratedProbeUnitsAndValue, getCalibratedAspect, } from './getCalibratedUnits';\nimport triggerAnnotationRenderForViewportIds from './triggerAnnotationRenderForViewportIds';\nimport triggerAnnotationRenderForToolGroupIds from './triggerAnnotationRenderForToolGroupIds';\nimport triggerAnnotationRender from './triggerAnnotationRender';\nimport { getSphereBoundsInfo } from './getSphereBoundsInfo';\nimport { pointToString } from './pointToString';\nimport AnnotationMultiSlice from './AnnotationMultiSlice';\nimport getViewportForAnnotation from './getViewportForAnnotation';\nimport { annotationHydration, getClosestImageIdForStackViewport, } from './annotationHydration';\nimport * as contours from './contours';\nimport * as segmentation from './segmentation';\nimport * as drawing from './drawing';\nimport * as math from './math';\nimport * as planar from './planar';\nimport * as viewportFilters from './viewportFilters';\nimport * as orientation from './orientation';\nimport * as cine from './cine';\nimport * as boundingBox from './boundingBox';\nimport * as planarFreehandROITool from './planarFreehandROITool';\nimport * as rectangleROITool from './rectangleROITool';\nimport { stackPrefetch, stackContextPrefetch } from './stackPrefetch';\nimport * as viewport from './viewport';\nimport * as touch from './touch';\nimport * as dynamicVolume from './dynamicVolume';\nimport * as polyDataUtils from './polyData/utils';\nimport * as voi from './voi';\nimport * as contourSegmentation from './contourSegmentation';\nimport { pointInSurroundingSphereCallback } from './pointInSurroundingSphereCallback';\nconst roundNumber = utilities.roundNumber;\nimport normalizeViewportPlane from './normalizeViewportPlane';\nimport IslandRemoval from './segmentation/islandRemoval';\nimport { getPixelValueUnits, getPixelValueUnitsImageId, } from './getPixelValueUnits';\nimport * as geometricSurfaceUtils from './geometricSurfaceUtils';\nimport setAnnotationLabel from './setAnnotationLabel';\nimport { moveAnnotationToViewPlane } from './moveAnnotationToViewPlane';\nimport getOrCreateImageVolume from './segmentation/getOrCreateImageVolume';\nimport * as usFanExtraction from '../tools/annotation/UltrasoundPleuraBLineTool/utils/fanExtraction';\nexport { math, planar, viewportFilters, drawing, debounce, dynamicVolume, throttle, orientation, isObject, touch, triggerEvent, calibrateImageSpacing, getCalibratedLengthUnitsAndScale, getCalibratedProbeUnitsAndValue, getCalibratedAspect, getPixelValueUnits, getPixelValueUnitsImageId, segmentation, contours, triggerAnnotationRenderForViewportIds, triggerAnnotationRenderForToolGroupIds, triggerAnnotationRender, getSphereBoundsInfo, getAnnotationNearPoint, getViewportForAnnotation, getAnnotationNearPointOnEnabledElement, viewport, cine, boundingBox, rectangleROITool, planarFreehandROITool, stackPrefetch, stackContextPrefetch, roundNumber, pointToString, polyDataUtils, voi, AnnotationMultiSlice, contourSegmentation, annotationHydration, getClosestImageIdForStackViewport, pointInSurroundingSphereCallback, normalizeViewportPlane, IslandRemoval, geometricSurfaceUtils, usFanExtraction, setAnnotationLabel, moveAnnotationToViewPlane, getOrCreateImageVolume, };\n","import * as math from '../../../utilities/math';\nclass Spline {\n    constructor(props) {\n        this._controlPoints = [];\n        this._invalidated = false;\n        this._length = 0;\n        this._controlPoints = [];\n        this._resolution = props?.resolution ?? 20;\n        this._fixedResolution = props?.fixedResolution ?? false;\n        this._closed = props?.closed ?? false;\n        this._invalidated = true;\n    }\n    get controlPoints() {\n        return this._controlPoints;\n    }\n    get numControlPoints() {\n        return this._controlPoints.length;\n    }\n    get resolution() {\n        return this._resolution;\n    }\n    set resolution(resolution) {\n        if (this._fixedResolution || this._resolution === resolution) {\n            return;\n        }\n        this._resolution = resolution;\n        this.invalidated = true;\n    }\n    get fixedResolution() {\n        return this._fixedResolution;\n    }\n    get closed() {\n        return this._closed;\n    }\n    set closed(closed) {\n        if (this._closed === closed) {\n            return;\n        }\n        this._closed = closed;\n        this.invalidated = true;\n    }\n    get aabb() {\n        this._update();\n        return this._aabb;\n    }\n    get length() {\n        this._update();\n        return this._length;\n    }\n    get invalidated() {\n        return this._invalidated;\n    }\n    set invalidated(invalidated) {\n        this._invalidated = invalidated;\n    }\n    hasTangentPoints() {\n        return false;\n    }\n    addControlPoint(point) {\n        this._controlPoints.push([point[0], point[1]]);\n        this.invalidated = true;\n    }\n    addControlPoints(points) {\n        points.forEach((point) => this.addControlPoint(point));\n    }\n    addControlPointAtU(u) {\n        const lineSegment = this._getLineSegmentAt(u);\n        const { start: startPoint, end: endPoint } = lineSegment.points;\n        const curveSegmentIndex = Math.floor(u);\n        const curveSegment = this._curveSegments[curveSegmentIndex];\n        const t = u - Math.floor(curveSegmentIndex);\n        const controlPointPos = [\n            startPoint[0] + t * (endPoint[0] - startPoint[0]),\n            startPoint[1] + t * (endPoint[1] - startPoint[1]),\n        ];\n        const insertIndex = this._controlPoints.indexOf(curveSegment.controlPoints.p1) + 1;\n        this._controlPoints.splice(insertIndex, 0, controlPointPos);\n        this.invalidated = true;\n        return {\n            index: insertIndex,\n            point: controlPointPos,\n        };\n    }\n    deleteControlPointByIndex(index) {\n        const minControlPoints = this._closed ? 3 : 1;\n        const canDelete = index >= 0 &&\n            index < this._controlPoints.length &&\n            this._controlPoints.length > minControlPoints;\n        if (!canDelete) {\n            return false;\n        }\n        this._controlPoints.splice(index, 1);\n        this.invalidated = true;\n        return true;\n    }\n    clearControlPoints() {\n        this._controlPoints = [];\n        this.invalidated = true;\n    }\n    setControlPoints(points) {\n        this.clearControlPoints();\n        this.addControlPoints(points);\n    }\n    updateControlPoint(index, newControlPoint) {\n        if (index < 0 || index >= this._controlPoints.length) {\n            throw new Error('Index out of bounds');\n        }\n        this._controlPoints[index] = [...newControlPoint];\n        this.invalidated = true;\n    }\n    getControlPoints() {\n        return this._controlPoints.map((controlPoint) => [\n            controlPoint[0],\n            controlPoint[1],\n        ]);\n    }\n    getClosestControlPoint(point) {\n        const controlPoints = this._controlPoints;\n        let minSquaredDist = Infinity;\n        let closestPointIndex = -1;\n        for (let i = 0, len = controlPoints.length; i < len; i++) {\n            const controlPoint = controlPoints[i];\n            const dx = point[0] - controlPoint[0];\n            const dy = point[1] - controlPoint[1];\n            const squaredDist = dx * dx + dy * dy;\n            if (squaredDist < minSquaredDist) {\n                minSquaredDist = squaredDist;\n                closestPointIndex = i;\n            }\n        }\n        return {\n            index: closestPointIndex,\n            point: closestPointIndex === -1\n                ? undefined\n                : [...controlPoints[closestPointIndex]],\n            distance: Math.sqrt(minSquaredDist),\n        };\n    }\n    getClosestControlPointWithinDistance(point, maxDist) {\n        const closestControlPoint = this.getClosestControlPoint(point);\n        return closestControlPoint.distance <= maxDist\n            ? closestControlPoint\n            : undefined;\n    }\n    getClosestPoint(point) {\n        this._update();\n        const curveSegmentsDistInfo = this._getCurveSegmmentsDistanceSquaredInfo(point);\n        if (!curveSegmentsDistInfo.length) {\n            return;\n        }\n        curveSegmentsDistInfo.sort((csA, csB) => csA.distanceSquared - csB.distanceSquared);\n        let closestPoint;\n        let closestPointCurveSegmentIndex = -1;\n        let minDistSquared = Infinity;\n        let minDistCurveSegment;\n        let minDistLineSegment;\n        for (let i = 0; i < curveSegmentsDistInfo.length; i++) {\n            const curveSegmentDistInfo = curveSegmentsDistInfo[i];\n            if (curveSegmentDistInfo.distanceSquared > minDistSquared) {\n                continue;\n            }\n            const { curveSegmentIndex, curveSegment } = curveSegmentDistInfo;\n            const { lineSegments } = curveSegment;\n            for (let j = 0; j < lineSegments.length; j++) {\n                const lineSegment = lineSegments[j];\n                const { point: lineSegPoint, distanceSquared: lineSegDistSquared } = math.lineSegment.distanceToPointSquaredInfo(lineSegment.points.start, lineSegment.points.end, point);\n                if (lineSegDistSquared < minDistSquared) {\n                    minDistLineSegment = lineSegment;\n                    closestPointCurveSegmentIndex = curveSegmentIndex;\n                    minDistCurveSegment = curveSegmentDistInfo.curveSegment;\n                    closestPoint = lineSegPoint;\n                    minDistSquared = lineSegDistSquared;\n                }\n            }\n        }\n        const curveSegmentLengthToPoint = minDistLineSegment.previousLineSegmentsLength +\n            math.point.distanceToPoint(minDistLineSegment.points.start, closestPoint);\n        const t = curveSegmentLengthToPoint / minDistCurveSegment.length;\n        const u = closestPointCurveSegmentIndex + t;\n        return {\n            point: closestPoint,\n            uValue: u,\n            distance: Math.sqrt(minDistSquared),\n        };\n    }\n    getClosestPointOnControlPointLines(point) {\n        const linePoints = [...this._controlPoints];\n        if (this._closed) {\n            linePoints.push(this._controlPoints[0]);\n        }\n        if (!linePoints.length) {\n            return;\n        }\n        let closestPoint;\n        let minDistSquared = Infinity;\n        let startPoint = linePoints[0];\n        for (let i = 1, len = linePoints.length; i < len; i++) {\n            const endPoint = linePoints[i];\n            const { point: lineSegPoint, distanceSquared: lineSegDistSquared } = math.lineSegment.distanceToPointSquaredInfo(startPoint, endPoint, point);\n            if (lineSegDistSquared < minDistSquared) {\n                closestPoint = lineSegPoint;\n                minDistSquared = lineSegDistSquared;\n            }\n            startPoint = endPoint;\n        }\n        return {\n            point: closestPoint,\n            distance: Math.sqrt(minDistSquared),\n        };\n    }\n    getPolylinePoints() {\n        this._update();\n        return this._convertCurveSegmentsToPolyline(this._curveSegments);\n    }\n    getPreviewPolylinePoints(controlPointPreview, closeDistance) {\n        if (this._closed) {\n            return [];\n        }\n        this._update();\n        const closestControlPoint = this.getClosestControlPointWithinDistance(controlPointPreview, closeDistance);\n        const closeSpline = closestControlPoint?.index === 0;\n        const previewCurveSegments = this.getPreviewCurveSegments(controlPointPreview, closeSpline);\n        return previewCurveSegments?.length\n            ? this._convertCurveSegmentsToPolyline(previewCurveSegments)\n            : [];\n    }\n    isPointNearCurve(point, maxDist) {\n        this._update();\n        const curveSegments = this._getCurveSegmmentsWithinDistance(point, maxDist);\n        const maxDistSquared = maxDist * maxDist;\n        for (let i = 0; i < curveSegments.length; i++) {\n            const { lineSegments } = curveSegments[i];\n            for (let j = 0; j < lineSegments.length; j++) {\n                const lineSegment = lineSegments[j];\n                const lineDistSquared = math.lineSegment.distanceToPointSquared(lineSegment.points.start, lineSegment.points.end, point);\n                if (lineDistSquared <= maxDistSquared) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    containsPoint(point) {\n        this._update();\n        const controlPoints = this._controlPoints;\n        if (controlPoints.length < 3) {\n            return false;\n        }\n        const curveSegments = [...this._curveSegments];\n        const closingCurveSegment = this._getClosingCurveSegmentWithStraightLineSegment();\n        if (closingCurveSegment) {\n            curveSegments.push(closingCurveSegment);\n        }\n        let numIntersections = 0;\n        for (let i = 0; i < curveSegments.length; i++) {\n            const curveSegment = curveSegments[i];\n            const { aabb: curveSegAABB } = curveSegment;\n            const mayIntersectCurveSegment = point[0] <= curveSegAABB.maxX &&\n                point[1] >= curveSegAABB.minY &&\n                point[1] < curveSegAABB.maxY;\n            if (!mayIntersectCurveSegment) {\n                continue;\n            }\n            const { lineSegments } = curveSegment;\n            for (let i = 0; i < lineSegments.length; i++) {\n                const lineSegment = lineSegments[i];\n                const { aabb: lineSegmentAABB } = lineSegment;\n                const mayIntersectLineSegment = point[0] <= lineSegmentAABB.maxX &&\n                    point[1] >= lineSegmentAABB.minY &&\n                    point[1] < lineSegmentAABB.maxY;\n                if (mayIntersectLineSegment) {\n                    const { start: p1, end: p2 } = lineSegment.points;\n                    const isVerticalLine = p1[0] === p2[0];\n                    const xIntersection = ((point[1] - p1[1]) * (p2[0] - p1[0])) / (p2[1] - p1[1]) + p1[0];\n                    numIntersections +=\n                        isVerticalLine || point[0] <= xIntersection ? 1 : 0;\n                }\n            }\n        }\n        return numIntersections % 2 === 1;\n    }\n    _update() {\n        if (!this._invalidated) {\n            return;\n        }\n        const curveSegments = this.getSplineCurves();\n        let length = 0;\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n        for (let i = 0, len = curveSegments.length; i < len; i++) {\n            const { aabb: curveSegAABB, length: curveSegLength } = curveSegments[i];\n            minX = minX <= curveSegAABB.minX ? minX : curveSegAABB.minX;\n            minY = minY <= curveSegAABB.minY ? minY : curveSegAABB.minY;\n            maxX = maxX >= curveSegAABB.maxX ? maxX : curveSegAABB.maxX;\n            maxY = maxY >= curveSegAABB.maxY ? maxY : curveSegAABB.maxY;\n            length += curveSegLength;\n        }\n        this._curveSegments = curveSegments;\n        this._aabb = { minX, minY, maxX, maxY };\n        this._length = length;\n        this._invalidated = false;\n    }\n    _convertCurveSegmentsToPolyline(curveSegments) {\n        this._update();\n        const polylinePoints = [];\n        curveSegments.forEach(({ lineSegments }, curveSegIndex) => {\n            lineSegments.forEach((lineSegment, lineSegIndex) => {\n                if (curveSegIndex === 0 && lineSegIndex === 0) {\n                    polylinePoints.push([...lineSegment.points.start]);\n                }\n                polylinePoints.push([...lineSegment.points.end]);\n            });\n        });\n        return polylinePoints;\n    }\n    _getCurveSegmmentsDistanceSquaredInfo(point) {\n        this._update();\n        const curveSegmentsDistanceSquared = [];\n        const { _curveSegments: curveSegments } = this;\n        for (let i = 0; i < curveSegments.length; i++) {\n            const curveSegment = curveSegments[i];\n            const distanceSquared = math.aabb.distanceToPointSquared(curveSegment.aabb, point);\n            curveSegmentsDistanceSquared.push({\n                curveSegmentIndex: i,\n                curveSegment,\n                distanceSquared,\n            });\n        }\n        return curveSegmentsDistanceSquared;\n    }\n    _getCurveSegmmentsWithinDistance(point, maxDist) {\n        this._update();\n        const maxDistSquared = maxDist * maxDist;\n        if (math.aabb.distanceToPointSquared(this.aabb, point) > maxDistSquared) {\n            return [];\n        }\n        const curveSegmentsDistance = this._getCurveSegmmentsDistanceSquaredInfo(point);\n        const curveSegmentsWithinRange = [];\n        for (let i = 0, len = curveSegmentsDistance.length; i < len; i++) {\n            const { curveSegment, distanceSquared: curveSegmentDistSquared } = curveSegmentsDistance[i];\n            if (curveSegmentDistSquared <= maxDistSquared) {\n                curveSegmentsWithinRange.push(curveSegment);\n            }\n        }\n        return curveSegmentsWithinRange;\n    }\n    _getLineSegmentAt(u) {\n        this._update();\n        const curveSegmentIndex = Math.floor(u);\n        const t = u - curveSegmentIndex;\n        const curveSegment = this._curveSegments[curveSegmentIndex];\n        const { lineSegments } = curveSegment;\n        const pointLength = curveSegment.length * t;\n        for (let i = 0; i < lineSegments.length; i++) {\n            const lineSegment = lineSegments[i];\n            const lengthEnd = lineSegment.previousLineSegmentsLength + lineSegment.length;\n            if (pointLength >= lineSegment.previousLineSegmentsLength &&\n                pointLength <= lengthEnd) {\n                return lineSegment;\n            }\n        }\n    }\n    _getClosingCurveSegmentWithStraightLineSegment() {\n        if (this.closed) {\n            return;\n        }\n        const controlPoints = this._controlPoints;\n        const startControlPoint = controlPoints[0];\n        const endControlPoint = controlPoints[controlPoints.length - 1];\n        const closingLineSegment = {\n            points: {\n                start: [...startControlPoint],\n                end: [...endControlPoint],\n            },\n            aabb: {\n                minX: Math.min(startControlPoint[0], endControlPoint[0]),\n                minY: Math.min(startControlPoint[1], endControlPoint[1]),\n                maxX: Math.max(startControlPoint[0], endControlPoint[0]),\n                maxY: Math.max(startControlPoint[1], endControlPoint[1]),\n            },\n        };\n        return {\n            aabb: {\n                minX: closingLineSegment.aabb.minX,\n                minY: closingLineSegment.aabb.minY,\n                maxX: closingLineSegment.aabb.maxX,\n                maxY: closingLineSegment.aabb.maxY,\n            },\n            lineSegments: [closingLineSegment],\n        };\n    }\n}\nexport { Spline as default, Spline };\n","import { vec4 } from 'gl-matrix';\nimport { Spline } from './Spline';\nimport * as math from '../../../utilities/math';\nconst MAX_U_ERROR = 1e-8;\nclass CubicSpline extends Spline {\n    getPreviewCurveSegments(controlPointPreview, closeSpline) {\n        const previewNumCurveSegments = this._getNumCurveSegments() + 1;\n        const startCurveSegIndex = Math.max(0, previewNumCurveSegments - 2);\n        const endCurveSegIndex = closeSpline\n            ? previewNumCurveSegments\n            : previewNumCurveSegments - 1;\n        const transformMatrix = this.getTransformMatrix();\n        const controlPoints = [...this.controlPoints];\n        const curveSegments = [];\n        if (!closeSpline) {\n            controlPoints.push(controlPointPreview);\n        }\n        for (let i = startCurveSegIndex; i <= endCurveSegIndex; i++) {\n            const curveSegment = this._getCurveSegment(i, transformMatrix, controlPoints, closeSpline);\n            curveSegments.push(curveSegment);\n        }\n        return curveSegments;\n    }\n    getSplineCurves() {\n        const numCurveSegments = this._getNumCurveSegments();\n        const curveSegments = new Array(numCurveSegments);\n        if (numCurveSegments <= 0) {\n            return [];\n        }\n        const transformMatrix = this.getTransformMatrix();\n        let previousCurveSegmentsLength = 0;\n        for (let i = 0; i < numCurveSegments; i++) {\n            const curveSegment = this._getCurveSegment(i, transformMatrix);\n            curveSegment.previousCurveSegmentsLength = previousCurveSegmentsLength;\n            curveSegments[i] = curveSegment;\n            previousCurveSegmentsLength += curveSegment.length;\n        }\n        return curveSegments;\n    }\n    _getNumCurveSegments(controlPoints = this.controlPoints, closed = this.closed) {\n        return closed\n            ? controlPoints.length\n            : Math.max(0, controlPoints.length - 1);\n    }\n    _getPoint(u, transformMatrix, controlPoints = this.controlPoints, closed = this.closed) {\n        const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n        const uInt = Math.floor(u);\n        let curveSegmentIndex = uInt % numCurveSegments;\n        const t = u - uInt;\n        const curveSegmentIndexOutOfBounds = curveSegmentIndex < 0 || curveSegmentIndex >= numCurveSegments;\n        if (curveSegmentIndexOutOfBounds) {\n            if (this.closed) {\n                curveSegmentIndex =\n                    (numCurveSegments + curveSegmentIndex) % numCurveSegments;\n            }\n            else {\n                return;\n            }\n        }\n        const { p0, p1, p2, p3 } = this._getCurveSegmentPoints(curveSegmentIndex, controlPoints, closed);\n        const tt = t * t;\n        const ttt = tt * t;\n        const tValues = vec4.fromValues(1, t, tt, ttt);\n        const qValues = vec4.transformMat4(vec4.create(), tValues, transformMatrix);\n        return [\n            vec4.dot(qValues, vec4.fromValues(p0[0], p1[0], p2[0], p3[0])),\n            vec4.dot(qValues, vec4.fromValues(p0[1], p1[1], p2[1], p3[1])),\n        ];\n    }\n    _getCurveSegmentPoints(curveSegmentIndex, controlPoints = this.controlPoints, closed = this.closed) {\n        const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n        const p1Index = curveSegmentIndex;\n        const p0Index = p1Index - 1;\n        const p2Index = closed ? (p1Index + 1) % numCurveSegments : p1Index + 1;\n        const p3Index = p2Index + 1;\n        const p1 = controlPoints[p1Index];\n        const p2 = controlPoints[p2Index];\n        let p0;\n        let p3;\n        if (p0Index >= 0) {\n            p0 = controlPoints[p0Index];\n        }\n        else {\n            p0 = closed\n                ? controlPoints[controlPoints.length - 1]\n                : math.point.mirror(p2, p1);\n        }\n        if (p3Index < controlPoints.length) {\n            p3 = controlPoints[p3Index];\n        }\n        else {\n            p3 = closed ? controlPoints[0] : math.point.mirror(p1, p2);\n        }\n        return { p0, p1, p2, p3 };\n    }\n    _getLineSegments(curveSegmentIndex, transformMatrix, controlPoints = this.controlPoints, closed = this.closed) {\n        const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n        const numLineSegments = this.resolution + 1;\n        const inc = 1 / numLineSegments;\n        const minU = curveSegmentIndex;\n        let maxU = minU + 1;\n        if (!closed && curveSegmentIndex === numCurveSegments - 1) {\n            maxU -= MAX_U_ERROR;\n        }\n        const lineSegments = [];\n        let startPoint;\n        let endPoint;\n        let previousLineSegmentsLength = 0;\n        for (let i = 0, u = minU; i <= numLineSegments; i++, u += inc) {\n            u = u > maxU ? maxU : u;\n            const point = this._getPoint(u, transformMatrix, controlPoints, closed);\n            if (!i) {\n                startPoint = point;\n                continue;\n            }\n            endPoint = point;\n            const dx = endPoint[0] - startPoint[0];\n            const dy = endPoint[1] - startPoint[1];\n            const length = Math.sqrt(dx ** 2 + dy ** 2);\n            const aabb = {\n                minX: startPoint[0] <= endPoint[0] ? startPoint[0] : endPoint[0],\n                maxX: startPoint[0] >= endPoint[0] ? startPoint[0] : endPoint[0],\n                minY: startPoint[1] <= endPoint[1] ? startPoint[1] : endPoint[1],\n                maxY: startPoint[1] >= endPoint[1] ? startPoint[1] : endPoint[1],\n            };\n            lineSegments.push({\n                points: {\n                    start: startPoint,\n                    end: endPoint,\n                },\n                aabb,\n                length,\n                previousLineSegmentsLength,\n            });\n            startPoint = endPoint;\n            previousLineSegmentsLength += length;\n        }\n        return lineSegments;\n    }\n    _getCurveSegment(curveSegmentIndex, transformMatrix = this.getTransformMatrix(), controlPoints = this.controlPoints, closed = this.closed) {\n        const { p0, p1, p2, p3 } = this._getCurveSegmentPoints(curveSegmentIndex, controlPoints, closed);\n        const lineSegments = this._getLineSegments(curveSegmentIndex, transformMatrix, controlPoints, closed);\n        let curveSegmentLength = 0;\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n        lineSegments.forEach(({ aabb: lineSegAABB, length: lineSegLength }) => {\n            minX = Math.min(minX, lineSegAABB.minX);\n            minY = Math.min(minY, lineSegAABB.minY);\n            maxX = Math.max(maxX, lineSegAABB.maxX);\n            maxY = Math.max(maxY, lineSegAABB.maxY);\n            curveSegmentLength += lineSegLength;\n        });\n        return {\n            controlPoints: { p0, p1, p2, p3 },\n            aabb: { minX, minY, maxX, maxY },\n            length: curveSegmentLength,\n            previousCurveSegmentsLength: 0,\n            lineSegments,\n        };\n    }\n}\nexport { CubicSpline as default, CubicSpline };\n","import { mat4 } from 'gl-matrix';\nimport { CubicSpline } from './CubicSpline';\nconst TRANSFORM_MATRIX = mat4.multiplyScalar(mat4.create(), mat4.fromValues(1, 4, 1, 0, -3, 0, 3, 0, 3, -6, 3, 0, -1, 3, -3, 1), 1 / 6);\nclass BSpline extends CubicSpline {\n    getTransformMatrix() {\n        return TRANSFORM_MATRIX;\n    }\n}\nexport { BSpline as default, BSpline };\n","import { CubicSpline } from './CubicSpline';\nclass CardinalSpline extends CubicSpline {\n    constructor(props) {\n        super(props);\n        this._scale = props?.scale ?? 0.5;\n        this._fixedScale = props?.fixedScale ?? false;\n    }\n    get scale() {\n        return this._scale;\n    }\n    set scale(scale) {\n        if (this._fixedScale || this._scale === scale) {\n            return;\n        }\n        this._scale = scale;\n        this.invalidated = true;\n    }\n    get fixedScale() {\n        return this._fixedScale;\n    }\n    getTransformMatrix() {\n        const { scale: s } = this;\n        const s2 = 2 * s;\n        return [\n            0, 1, 0, 0,\n            -s, 0, s, 0,\n            s2, s - 3, 3 - s2, -s,\n            -s, 2 - s, s - 2, s\n        ];\n    }\n}\nexport { CardinalSpline as default, CardinalSpline };\n","import { CardinalSpline } from './CardinalSpline';\nclass CatmullRomSpline extends CardinalSpline {\n    constructor() {\n        super({ scale: 0.5, fixedScale: true });\n    }\n}\nexport { CatmullRomSpline as default, CatmullRomSpline };\n","import { CardinalSpline } from './CardinalSpline';\nclass LinearSpline extends CardinalSpline {\n    constructor() {\n        super({ resolution: 0, fixedResolution: true, scale: 0, fixedScale: true });\n    }\n}\nexport { LinearSpline as default, LinearSpline };\n","import { BaseTool } from './base';\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nclass PanTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            limitToViewport: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n    }\n    touchDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    mouseDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    _checkImageInViewport(viewport, deltaPointsCanvas) {\n        const { canvas } = viewport;\n        const ratio = window.devicePixelRatio;\n        const viewportLeft = 0;\n        const viewportRight = canvas.width / ratio;\n        const viewportTop = 0;\n        const viewportBottom = canvas.height / ratio;\n        const defaultActor = viewport.getDefaultActor();\n        const renderer = viewport.getRenderer();\n        let bounds;\n        if (defaultActor && csUtils.isImageActor(defaultActor)) {\n            const imageData = defaultActor.actor.getMapper().getInputData();\n            bounds = imageData.getBounds();\n        }\n        else {\n            bounds = renderer.computeVisiblePropBounds();\n        }\n        const [imageLeft, imageTop] = viewport.worldToCanvas([\n            bounds[0],\n            bounds[2],\n            bounds[4],\n        ]);\n        const [imageRight, imageBottom] = viewport.worldToCanvas([\n            bounds[1],\n            bounds[3],\n            bounds[5],\n        ]);\n        const zoom = viewport.getZoom();\n        if (zoom <= 1) {\n            if ((imageLeft + deltaPointsCanvas[0] < viewportLeft &&\n                deltaPointsCanvas[0] < 0) ||\n                (imageRight + deltaPointsCanvas[0] > viewportRight &&\n                    deltaPointsCanvas[0] > 0) ||\n                (imageTop + deltaPointsCanvas[1] < viewportTop &&\n                    deltaPointsCanvas[1] < 0) ||\n                (imageBottom + deltaPointsCanvas[1] > viewportBottom &&\n                    deltaPointsCanvas[1] > 0)) {\n                return false;\n            }\n        }\n        else {\n            if ((imageLeft + deltaPointsCanvas[0] > viewportLeft &&\n                deltaPointsCanvas[0] > 0) ||\n                (imageRight + deltaPointsCanvas[0] < viewportRight &&\n                    deltaPointsCanvas[0] < 0) ||\n                (imageTop + deltaPointsCanvas[1] > viewportTop &&\n                    deltaPointsCanvas[1] > 0) ||\n                (imageBottom + deltaPointsCanvas[1] < viewportBottom &&\n                    deltaPointsCanvas[1] < 0)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    _dragCallback(evt) {\n        const { element, deltaPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const deltaPointsWorld = deltaPoints.world;\n        const deltaPointsCanvas = deltaPoints.canvas;\n        if (deltaPointsWorld[0] === 0 &&\n            deltaPointsWorld[1] === 0 &&\n            deltaPointsWorld[2] === 0) {\n            return;\n        }\n        const viewport = enabledElement.viewport;\n        const camera = viewport.getCamera();\n        const { focalPoint, position } = camera;\n        if (this.configuration.limitToViewport &&\n            !this._checkImageInViewport(viewport, deltaPointsCanvas)) {\n            return;\n        }\n        const updatedPosition = [\n            position[0] - deltaPointsWorld[0],\n            position[1] - deltaPointsWorld[1],\n            position[2] - deltaPointsWorld[2],\n        ];\n        const updatedFocalPoint = [\n            focalPoint[0] - deltaPointsWorld[0],\n            focalPoint[1] - deltaPointsWorld[1],\n            focalPoint[2] - deltaPointsWorld[2],\n        ];\n        viewport.setCamera({\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n        viewport.render();\n    }\n}\nPanTool.toolName = 'Pan';\nexport default PanTool;\n","import vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { Events } from '../enums';\nimport { eventTarget, getEnabledElement, getEnabledElementByIds, } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { BaseTool } from './base';\nimport { getToolGroup } from '../store/ToolGroupManager';\nclass TrackballRotateTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            rotateIncrementDegrees: 2,\n            rotateSampleDistanceFactor: 2,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._resizeObservers = new Map();\n        this._hasResolutionChanged = false;\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const actorEntry = viewport.getDefaultActor();\n            const actor = actorEntry.actor;\n            const mapper = actor.getMapper();\n            const hasSampleDistance = 'getSampleDistance' in mapper || 'getCurrentSampleDistance' in mapper;\n            if (!hasSampleDistance) {\n                return true;\n            }\n            const originalSampleDistance = mapper.getSampleDistance();\n            if (!this._hasResolutionChanged) {\n                const { rotateSampleDistanceFactor } = this.configuration;\n                mapper.setSampleDistance(originalSampleDistance * rotateSampleDistanceFactor);\n                this._hasResolutionChanged = true;\n                if (this.cleanUp !== null) {\n                    document.removeEventListener('mouseup', this.cleanUp);\n                }\n                this.cleanUp = () => {\n                    mapper.setSampleDistance(originalSampleDistance);\n                    viewport.render();\n                    this._hasResolutionChanged = false;\n                };\n                document.addEventListener('mouseup', this.cleanUp, { once: true });\n            }\n            return true;\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.onSetToolActive = () => {\n            const subscribeToElementResize = () => {\n                const viewportsInfo = this._getViewportsInfo();\n                viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                    if (!this._resizeObservers.has(viewportId)) {\n                        const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId) || { viewport: null };\n                        if (!viewport) {\n                            return;\n                        }\n                        const { element } = viewport;\n                        const resizeObserver = new ResizeObserver(() => {\n                            const element = getEnabledElementByIds(viewportId, renderingEngineId);\n                            if (!element) {\n                                return;\n                            }\n                            const { viewport } = element;\n                            const viewPresentation = viewport.getViewPresentation();\n                            viewport.resetCamera();\n                            viewport.setViewPresentation(viewPresentation);\n                            viewport.render();\n                        });\n                        resizeObserver.observe(element);\n                        this._resizeObservers.set(viewportId, resizeObserver);\n                    }\n                });\n            };\n            subscribeToElementResize();\n            this._viewportAddedListener = (evt) => {\n                if (evt.detail.toolGroupId === this.toolGroupId) {\n                    subscribeToElementResize();\n                }\n            };\n            eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);\n        };\n        this.onSetToolDisabled = () => {\n            this._resizeObservers.forEach((resizeObserver, viewportId) => {\n                resizeObserver.disconnect();\n                this._resizeObservers.delete(viewportId);\n            });\n            if (this._viewportAddedListener) {\n                eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);\n                this._viewportAddedListener = null;\n            }\n        };\n        this.rotateCamera = (viewport, centerWorld, axis, angle) => {\n            const vtkCamera = viewport.getVtkActiveCamera();\n            const viewUp = vtkCamera.getViewUp();\n            const focalPoint = vtkCamera.getFocalPoint();\n            const position = vtkCamera.getPosition();\n            const newPosition = [0, 0, 0];\n            const newFocalPoint = [0, 0, 0];\n            const newViewUp = [0, 0, 0];\n            const transform = mat4.identity(new Float32Array(16));\n            mat4.translate(transform, transform, centerWorld);\n            mat4.rotate(transform, transform, angle, axis);\n            mat4.translate(transform, transform, [\n                -centerWorld[0],\n                -centerWorld[1],\n                -centerWorld[2],\n            ]);\n            vec3.transformMat4(newPosition, position, transform);\n            vec3.transformMat4(newFocalPoint, focalPoint, transform);\n            mat4.identity(transform);\n            mat4.rotate(transform, transform, angle, axis);\n            vec3.transformMat4(newViewUp, viewUp, transform);\n            viewport.setCamera({\n                position: newPosition,\n                viewUp: newViewUp,\n                focalPoint: newFocalPoint,\n            });\n        };\n        this.touchDragCallback = this._dragCallback.bind(this);\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    _dragCallback(evt) {\n        const { element, currentPoints, lastPoints } = evt.detail;\n        const currentPointsCanvas = currentPoints.canvas;\n        const lastPointsCanvas = lastPoints.canvas;\n        const { rotateIncrementDegrees } = this.configuration;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const width = element.clientWidth;\n        const height = element.clientHeight;\n        const normalizedPosition = [\n            currentPointsCanvas[0] / width,\n            currentPointsCanvas[1] / height,\n        ];\n        const normalizedPreviousPosition = [\n            lastPointsCanvas[0] / width,\n            lastPointsCanvas[1] / height,\n        ];\n        const center = [width * 0.5, height * 0.5];\n        const centerWorld = viewport.canvasToWorld(center);\n        const normalizedCenter = [0.5, 0.5];\n        const radsq = (1.0 + Math.abs(normalizedCenter[0])) ** 2.0;\n        const op = [normalizedPreviousPosition[0], 0, 0];\n        const oe = [normalizedPosition[0], 0, 0];\n        const opsq = op[0] ** 2;\n        const oesq = oe[0] ** 2;\n        const lop = opsq > radsq ? 0 : Math.sqrt(radsq - opsq);\n        const loe = oesq > radsq ? 0 : Math.sqrt(radsq - oesq);\n        const nop = [op[0], 0, lop];\n        vtkMath.normalize(nop);\n        const noe = [oe[0], 0, loe];\n        vtkMath.normalize(noe);\n        const dot = vtkMath.dot(nop, noe);\n        if (Math.abs(dot) > 0.0001) {\n            const angleX = -2 *\n                Math.acos(vtkMath.clampValue(dot, -1.0, 1.0)) *\n                Math.sign(normalizedPosition[0] - normalizedPreviousPosition[0]) *\n                rotateIncrementDegrees;\n            const upVec = camera.viewUp;\n            const atV = camera.viewPlaneNormal;\n            const rightV = [0, 0, 0];\n            const forwardV = [0, 0, 0];\n            vtkMath.cross(upVec, atV, rightV);\n            vtkMath.normalize(rightV);\n            vtkMath.cross(atV, rightV, forwardV);\n            vtkMath.normalize(forwardV);\n            vtkMath.normalize(upVec);\n            this.rotateCamera(viewport, centerWorld, forwardV, angleX);\n            const angleY = (normalizedPreviousPosition[1] - normalizedPosition[1]) *\n                rotateIncrementDegrees;\n            this.rotateCamera(viewport, centerWorld, rightV, angleY);\n            viewport.render();\n        }\n    }\n}\nTrackballRotateTool.toolName = 'TrackballRotate';\nexport default TrackballRotateTool;\n","import vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport vtkPoints from '@kitware/vtk.js/Common/Core/Points';\nimport vtkCellArray from '@kitware/vtk.js/Common/Core/CellArray';\nimport { mat3, mat4, vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkSphereSource from '@kitware/vtk.js/Filters/Sources/SphereSource';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport vtkPlane from '@kitware/vtk.js/Common/DataModel/Plane';\nimport { BaseTool } from './base';\nimport { getRenderingEngine, getEnabledElementByIds, getEnabledElement, Enums, triggerEvent, eventTarget, } from '@cornerstonejs/core';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport { Events } from '../enums';\nconst PLANEINDEX = {\n    XMIN: 0,\n    XMAX: 1,\n    YMIN: 2,\n    YMAX: 3,\n    ZMIN: 4,\n    ZMAX: 5,\n};\nconst SPHEREINDEX = {\n    XMIN: 0,\n    XMAX: 1,\n    YMIN: 2,\n    YMAX: 3,\n    ZMIN: 4,\n    ZMAX: 5,\n    XMIN_YMIN_ZMIN: 6,\n    XMIN_YMIN_ZMAX: 7,\n    XMIN_YMAX_ZMIN: 8,\n    XMIN_YMAX_ZMAX: 9,\n    XMAX_YMIN_ZMIN: 10,\n    XMAX_YMIN_ZMAX: 11,\n    XMAX_YMAX_ZMIN: 12,\n    XMAX_YMAX_ZMAX: 13,\n};\nclass VolumeCroppingTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            showCornerSpheres: true,\n            showHandles: true,\n            showClippingPlanes: true,\n            mobile: {\n                enabled: false,\n                opacity: 0.8,\n            },\n            initialCropFactor: 0.08,\n            sphereColors: {\n                SAGITTAL: [1.0, 1.0, 0.0],\n                CORONAL: [0.0, 1.0, 0.0],\n                AXIAL: [1.0, 0.0, 0.0],\n                CORNERS: [0.0, 0.0, 1.0],\n            },\n            sphereRadius: 8,\n            grabSpherePixelDistance: 20,\n            rotateIncrementDegrees: 2,\n            rotateSampleDistanceFactor: 2,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._resizeObservers = new Map();\n        this._hasResolutionChanged = false;\n        this.originalClippingPlanes = [];\n        this.draggingSphereIndex = null;\n        this.toolCenter = [0, 0, 0];\n        this.cornerDragOffset = null;\n        this.faceDragOffset = null;\n        this.sphereStates = [];\n        this.edgeLines = {};\n        this.onSetToolConfiguration = () => {\n            console.debug('Setting tool settoolconfiguration : volumeCropping');\n        };\n        this.onSetToolEnabled = () => {\n            console.debug('Setting tool enabled: volumeCropping');\n        };\n        this.onCameraModified = (evt) => {\n            const { element } = evt.currentTarget\n                ? { element: evt.currentTarget }\n                : evt.detail;\n            const enabledElement = getEnabledElement(element);\n            this._updateClippingPlanes(enabledElement.viewport);\n            enabledElement.viewport.render();\n        };\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const actorEntry = viewport.getDefaultActor();\n            const actor = actorEntry.actor;\n            const mapper = actor.getMapper();\n            const mouseCanvas = [\n                evt.detail.currentPoints.canvas[0],\n                evt.detail.currentPoints.canvas[1],\n            ];\n            this.draggingSphereIndex = null;\n            this.cornerDragOffset = null;\n            this.faceDragOffset = null;\n            for (let i = 0; i < this.sphereStates.length; ++i) {\n                const sphereCanvas = viewport.worldToCanvas(this.sphereStates[i].point);\n                const dist = Math.sqrt(Math.pow(mouseCanvas[0] - sphereCanvas[0], 2) +\n                    Math.pow(mouseCanvas[1] - sphereCanvas[1], 2));\n                if (dist < this.configuration.grabSpherePixelDistance) {\n                    this.draggingSphereIndex = i;\n                    element.style.cursor = 'grabbing';\n                    const sphereState = this.sphereStates[i];\n                    const mouseWorld = viewport.canvasToWorld(mouseCanvas);\n                    if (sphereState.isCorner) {\n                        this.cornerDragOffset = [\n                            sphereState.point[0] - mouseWorld[0],\n                            sphereState.point[1] - mouseWorld[1],\n                            sphereState.point[2] - mouseWorld[2],\n                        ];\n                        this.faceDragOffset = null;\n                    }\n                    else {\n                        const axisIdx = { x: 0, y: 1, z: 2 }[sphereState.axis];\n                        this.faceDragOffset =\n                            sphereState.point[axisIdx] - mouseWorld[axisIdx];\n                        this.cornerDragOffset = null;\n                    }\n                    return true;\n                }\n            }\n            const hasSampleDistance = 'getSampleDistance' in mapper || 'getCurrentSampleDistance' in mapper;\n            if (!hasSampleDistance) {\n                return true;\n            }\n            const originalSampleDistance = mapper.getSampleDistance();\n            if (!this._hasResolutionChanged) {\n                const { rotateSampleDistanceFactor } = this.configuration;\n                mapper.setSampleDistance(originalSampleDistance * rotateSampleDistanceFactor);\n                this._hasResolutionChanged = true;\n                if (this.cleanUp !== null) {\n                    document.removeEventListener('mouseup', this.cleanUp);\n                }\n                this.cleanUp = () => {\n                    mapper.setSampleDistance(originalSampleDistance);\n                    evt.target.style.cursor = '';\n                    if (this.draggingSphereIndex !== null) {\n                        const sphereState = this.sphereStates[this.draggingSphereIndex];\n                        const [viewport3D] = this._getViewportsInfo();\n                        const renderingEngine = getRenderingEngine(viewport3D.renderingEngineId);\n                        const viewport = renderingEngine.getViewport(viewport3D.viewportId);\n                        if (sphereState.isCorner) {\n                            this._updateCornerSpheres();\n                            this._updateFaceSpheresFromCorners();\n                            this._updateClippingPlanesFromFaceSpheres(viewport);\n                        }\n                    }\n                    this.draggingSphereIndex = null;\n                    this.cornerDragOffset = null;\n                    this.faceDragOffset = null;\n                    viewport.render();\n                    this._hasResolutionChanged = false;\n                };\n                document.addEventListener('mouseup', this.cleanUp, { once: true });\n            }\n            return true;\n        };\n        this._onMouseMoveSphere = (evt) => {\n            if (this.draggingSphereIndex === null) {\n                return false;\n            }\n            const sphereState = this.sphereStates[this.draggingSphereIndex];\n            if (!sphereState) {\n                return false;\n            }\n            const { viewport, world } = this._getViewportAndWorldCoords(evt);\n            if (!viewport || !world) {\n                return false;\n            }\n            if (sphereState.isCorner) {\n                const newCorner = this._calculateNewCornerPosition(world);\n                this._updateSpherePosition(sphereState, newCorner);\n                const axisFlags = this._parseCornerKey(sphereState.uid);\n                this._updateRelatedCorners(sphereState, newCorner, axisFlags);\n                this._updateFaceSpheresFromCorners();\n                this._updateCornerSpheres();\n            }\n            else {\n                const axisIdx = { x: 0, y: 1, z: 2 }[sphereState.axis];\n                let newValue = world[axisIdx];\n                if (this.faceDragOffset !== null) {\n                    newValue += this.faceDragOffset;\n                }\n                sphereState.point[axisIdx] = newValue;\n                sphereState.sphereSource.setCenter(...sphereState.point);\n                sphereState.sphereSource.modified();\n                this._updateCornerSpheresFromFaces();\n                this._updateFaceSpheresFromCorners();\n                this._updateCornerSpheres();\n            }\n            this._updateClippingPlanesFromFaceSpheres(viewport);\n            viewport.render();\n            this._triggerToolChangedEvent(sphereState);\n            return true;\n        };\n        this._onControlToolChange = (evt) => {\n            const viewport = this._getViewport();\n            if (!evt.detail.toolCenter) {\n                triggerEvent(eventTarget, Events.VOLUMECROPPING_TOOL_CHANGED, {\n                    originalClippingPlanes: this.originalClippingPlanes,\n                    viewportId: viewport.id,\n                    renderingEngineId: viewport.renderingEngineId,\n                    seriesInstanceUID: this.seriesInstanceUID,\n                });\n            }\n            else {\n                if (evt.detail.seriesInstanceUID !== this.seriesInstanceUID) {\n                    return;\n                }\n                const isMin = evt.detail.handleType === 'min';\n                const toolCenter = isMin\n                    ? evt.detail.toolCenterMin\n                    : evt.detail.toolCenterMax;\n                const normals = isMin\n                    ? [\n                        [1, 0, 0],\n                        [0, 1, 0],\n                        [0, 0, 1],\n                    ]\n                    : [\n                        [-1, 0, 0],\n                        [0, -1, 0],\n                        [0, 0, -1],\n                    ];\n                const planeIndices = isMin\n                    ? [PLANEINDEX.XMIN, PLANEINDEX.YMIN, PLANEINDEX.ZMIN]\n                    : [PLANEINDEX.XMAX, PLANEINDEX.YMAX, PLANEINDEX.ZMAX];\n                const sphereIndices = isMin\n                    ? [SPHEREINDEX.XMIN, SPHEREINDEX.YMIN, SPHEREINDEX.ZMIN]\n                    : [SPHEREINDEX.XMAX, SPHEREINDEX.YMAX, SPHEREINDEX.ZMAX];\n                const axes = ['x', 'y', 'z'];\n                const orientationAxes = [\n                    Enums.OrientationAxis.SAGITTAL,\n                    Enums.OrientationAxis.CORONAL,\n                    Enums.OrientationAxis.AXIAL,\n                ];\n                for (let i = 0; i < 3; ++i) {\n                    const origin = [0, 0, 0];\n                    origin[i] = toolCenter[i];\n                    const plane = vtkPlane.newInstance({\n                        origin,\n                        normal: normals[i],\n                    });\n                    this.originalClippingPlanes[planeIndices[i]].origin = plane.getOrigin();\n                    this.sphereStates[sphereIndices[i]].point[i] = plane.getOrigin()[i];\n                    this.sphereStates[sphereIndices[i]].sphereSource.setCenter(...this.sphereStates[sphereIndices[i]].point);\n                    this.sphereStates[sphereIndices[i]].sphereSource.modified();\n                    const otherSphere = this.sphereStates.find((s, idx) => s.axis === axes[i] && idx !== sphereIndices[i]);\n                    const newCenter = (otherSphere.point[i] + plane.getOrigin()[i]) / 2;\n                    this.sphereStates.forEach((state) => {\n                        if (!state.isCorner &&\n                            state.axis !== axes[i] &&\n                            !evt.detail.viewportOrientation.includes(orientationAxes[i])) {\n                            state.point[i] = newCenter;\n                            state.sphereSource.setCenter(state.point);\n                            state.sphereActor.getProperty().setColor(state.color);\n                            state.sphereSource.modified();\n                        }\n                    });\n                    const volumeActor = viewport.getDefaultActor()?.actor;\n                    if (volumeActor) {\n                        const mapper = volumeActor.getMapper();\n                        const clippingPlanes = mapper.getClippingPlanes();\n                        if (clippingPlanes) {\n                            clippingPlanes[planeIndices[i]].setOrigin(plane.getOrigin());\n                        }\n                    }\n                }\n                this._updateCornerSpheres();\n                viewport.render();\n            }\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this._initialize3DViewports = (viewportsInfo) => {\n            if (!viewportsInfo || !viewportsInfo.length || !viewportsInfo[0]) {\n                console.warn('VolumeCroppingTool: No viewportsInfo available for initialization of volumecroppingtool.');\n                return;\n            }\n            const viewport = this._getViewport();\n            const volumeActors = viewport.getActors();\n            if (!volumeActors || volumeActors.length === 0) {\n                console.warn('VolumeCroppingTool: No volume actors found in the viewport.');\n                return;\n            }\n            const imageData = volumeActors[0].actor.getMapper().getInputData();\n            if (!imageData) {\n                console.warn('VolumeCroppingTool: No image data found for volume actor.');\n                return;\n            }\n            this.seriesInstanceUID = imageData.seriesInstanceUID || 'unknown';\n            const worldBounds = imageData.getBounds();\n            const cropFactor = this.configuration.initialCropFactor || 0.1;\n            const xRange = worldBounds[1] - worldBounds[0];\n            const yRange = worldBounds[3] - worldBounds[2];\n            const zRange = worldBounds[5] - worldBounds[4];\n            const xMin = worldBounds[0] + cropFactor * xRange;\n            const xMax = worldBounds[1] - cropFactor * xRange;\n            const yMin = worldBounds[2] + cropFactor * yRange;\n            const yMax = worldBounds[3] - cropFactor * yRange;\n            const zMin = worldBounds[4] + cropFactor * zRange;\n            const zMax = worldBounds[5] - cropFactor * zRange;\n            const planes = [];\n            const planeXmin = vtkPlane.newInstance({\n                origin: [xMin, 0, 0],\n                normal: [1, 0, 0],\n            });\n            const planeXmax = vtkPlane.newInstance({\n                origin: [xMax, 0, 0],\n                normal: [-1, 0, 0],\n            });\n            const planeYmin = vtkPlane.newInstance({\n                origin: [0, yMin, 0],\n                normal: [0, 1, 0],\n            });\n            const planeYmax = vtkPlane.newInstance({\n                origin: [0, yMax, 0],\n                normal: [0, -1, 0],\n            });\n            const planeZmin = vtkPlane.newInstance({\n                origin: [0, 0, zMin],\n                normal: [0, 0, 1],\n            });\n            const planeZmax = vtkPlane.newInstance({\n                origin: [0, 0, zMax],\n                normal: [0, 0, -1],\n            });\n            const mapper = viewport\n                .getDefaultActor()\n                .actor.getMapper();\n            planes.push(planeXmin);\n            planes.push(planeXmax);\n            planes.push(planeYmin);\n            planes.push(planeYmax);\n            planes.push(planeZmin);\n            planes.push(planeZmax);\n            const originalPlanes = planes.map((plane) => ({\n                origin: [...plane.getOrigin()],\n                normal: [...plane.getNormal()],\n            }));\n            this.originalClippingPlanes = originalPlanes;\n            const sphereXminPoint = [xMin, (yMax + yMin) / 2, (zMax + zMin) / 2];\n            const sphereXmaxPoint = [xMax, (yMax + yMin) / 2, (zMax + zMin) / 2];\n            const sphereYminPoint = [(xMax + xMin) / 2, yMin, (zMax + zMin) / 2];\n            const sphereYmaxPoint = [(xMax + xMin) / 2, yMax, (zMax + zMin) / 2];\n            const sphereZminPoint = [(xMax + xMin) / 2, (yMax + yMin) / 2, zMin];\n            const sphereZmaxPoint = [(xMax + xMin) / 2, (yMax + yMin) / 2, zMax];\n            const adaptiveRadius = this._calculateAdaptiveSphereRadius(Math.sqrt(xRange * xRange + yRange * yRange + zRange * zRange));\n            this._addSphere(viewport, sphereXminPoint, 'x', 'min', null, adaptiveRadius);\n            this._addSphere(viewport, sphereXmaxPoint, 'x', 'max', null, adaptiveRadius);\n            this._addSphere(viewport, sphereYminPoint, 'y', 'min', null, adaptiveRadius);\n            this._addSphere(viewport, sphereYmaxPoint, 'y', 'max', null, adaptiveRadius);\n            this._addSphere(viewport, sphereZminPoint, 'z', 'min', null, adaptiveRadius);\n            this._addSphere(viewport, sphereZmaxPoint, 'z', 'max', null, adaptiveRadius);\n            const corners = [\n                [xMin, yMin, zMin],\n                [xMin, yMin, zMax],\n                [xMin, yMax, zMin],\n                [xMin, yMax, zMax],\n                [xMax, yMin, zMin],\n                [xMax, yMin, zMax],\n                [xMax, yMax, zMin],\n                [xMax, yMax, zMax],\n            ];\n            const cornerKeys = [\n                'XMIN_YMIN_ZMIN',\n                'XMIN_YMIN_ZMAX',\n                'XMIN_YMAX_ZMIN',\n                'XMIN_YMAX_ZMAX',\n                'XMAX_YMIN_ZMIN',\n                'XMAX_YMIN_ZMAX',\n                'XMAX_YMAX_ZMIN',\n                'XMAX_YMAX_ZMAX',\n            ];\n            for (let i = 0; i < corners.length; i++) {\n                this._addSphere(viewport, corners[i], 'corner', null, cornerKeys[i], adaptiveRadius);\n            }\n            const edgeCornerPairs = [\n                ['XMIN_YMIN_ZMIN', 'XMAX_YMIN_ZMIN'],\n                ['XMIN_YMIN_ZMAX', 'XMAX_YMIN_ZMAX'],\n                ['XMIN_YMAX_ZMIN', 'XMAX_YMAX_ZMIN'],\n                ['XMIN_YMAX_ZMAX', 'XMAX_YMAX_ZMAX'],\n                ['XMIN_YMIN_ZMIN', 'XMIN_YMAX_ZMIN'],\n                ['XMIN_YMIN_ZMAX', 'XMIN_YMAX_ZMAX'],\n                ['XMAX_YMIN_ZMIN', 'XMAX_YMAX_ZMIN'],\n                ['XMAX_YMIN_ZMAX', 'XMAX_YMAX_ZMAX'],\n                ['XMIN_YMIN_ZMIN', 'XMIN_YMIN_ZMAX'],\n                ['XMIN_YMAX_ZMIN', 'XMIN_YMAX_ZMAX'],\n                ['XMAX_YMIN_ZMIN', 'XMAX_YMIN_ZMAX'],\n                ['XMAX_YMAX_ZMIN', 'XMAX_YMAX_ZMAX'],\n            ];\n            edgeCornerPairs.forEach(([key1, key2], i) => {\n                const state1 = this.sphereStates.find((s) => s.uid === `corner_${key1}`);\n                const state2 = this.sphereStates.find((s) => s.uid === `corner_${key2}`);\n                if (state1 && state2) {\n                    const uid = `edge_${key1}_${key2}`;\n                    const { actor, source } = this._addLine3DBetweenPoints(viewport, state1.point, state2.point, [0.7, 0.7, 0.7], uid);\n                    this.edgeLines[uid] = { actor, source, key1, key2 };\n                }\n            });\n            mapper.addClippingPlane(planeXmin);\n            mapper.addClippingPlane(planeXmax);\n            mapper.addClippingPlane(planeYmin);\n            mapper.addClippingPlane(planeYmax);\n            mapper.addClippingPlane(planeZmin);\n            mapper.addClippingPlane(planeZmax);\n            eventTarget.addEventListener(Events.VOLUMECROPPINGCONTROL_TOOL_CHANGED, (evt) => {\n                this._onControlToolChange(evt);\n            });\n            viewport.render();\n        };\n        this._getViewportAndWorldCoords = (evt) => {\n            const viewport = this._getViewport();\n            const x = evt.detail.currentPoints.canvas[0];\n            const y = evt.detail.currentPoints.canvas[1];\n            const world = viewport.canvasToWorld([x, y]);\n            return { viewport, world };\n        };\n        this._getViewport = () => {\n            const [viewport3D] = this._getViewportsInfo();\n            const renderingEngine = getRenderingEngine(viewport3D.renderingEngineId);\n            return renderingEngine.getViewport(viewport3D.viewportId);\n        };\n        this._handleCornerSphereMovement = (sphereState, world, viewport) => {\n            const newCorner = this._calculateNewCornerPosition(world);\n            this._updateSpherePosition(sphereState, newCorner);\n            const axisFlags = this._parseCornerKey(sphereState.uid);\n            this._updateRelatedCorners(sphereState, newCorner, axisFlags);\n            this._updateAfterCornerMovement(viewport);\n        };\n        this._handleFaceSphereMovement = (sphereState, world, viewport) => {\n            const axisIdx = { x: 0, y: 1, z: 2 }[sphereState.axis];\n            let newValue = world[axisIdx];\n            if (this.faceDragOffset !== null) {\n                newValue += this.faceDragOffset;\n            }\n            sphereState.point[axisIdx] = newValue;\n            sphereState.sphereSource.setCenter(...sphereState.point);\n            sphereState.sphereSource.modified();\n            this._updateAfterFaceMovement(viewport);\n        };\n        this._calculateNewCornerPosition = (world) => {\n            let newCorner = [world[0], world[1], world[2]];\n            if (this.cornerDragOffset) {\n                newCorner = [\n                    world[0] + this.cornerDragOffset[0],\n                    world[1] + this.cornerDragOffset[1],\n                    world[2] + this.cornerDragOffset[2],\n                ];\n            }\n            return newCorner;\n        };\n        this._parseCornerKey = (uid) => {\n            const cornerKey = uid.replace('corner_', '');\n            return {\n                isXMin: cornerKey.includes('XMIN'),\n                isXMax: cornerKey.includes('XMAX'),\n                isYMin: cornerKey.includes('YMIN'),\n                isYMax: cornerKey.includes('YMAX'),\n                isZMin: cornerKey.includes('ZMIN'),\n                isZMax: cornerKey.includes('ZMAX'),\n            };\n        };\n        this._updateSpherePosition = (sphereState, newPosition) => {\n            sphereState.point = newPosition;\n            sphereState.sphereSource.setCenter(...newPosition);\n            sphereState.sphereSource.modified();\n        };\n        this._updateRelatedCorners = (draggedSphere, newCorner, axisFlags) => {\n            this.sphereStates.forEach((state) => {\n                if (!state.isCorner || state === draggedSphere) {\n                    return;\n                }\n                const key = state.uid.replace('corner_', '');\n                const shouldUpdate = this._shouldUpdateCorner(key, axisFlags);\n                if (shouldUpdate) {\n                    this._updateCornerCoordinates(state, newCorner, key, axisFlags);\n                }\n            });\n        };\n        this._shouldUpdateCorner = (cornerKey, axisFlags) => {\n            return ((axisFlags.isXMin && cornerKey.includes('XMIN')) ||\n                (axisFlags.isXMax && cornerKey.includes('XMAX')) ||\n                (axisFlags.isYMin && cornerKey.includes('YMIN')) ||\n                (axisFlags.isYMax && cornerKey.includes('YMAX')) ||\n                (axisFlags.isZMin && cornerKey.includes('ZMIN')) ||\n                (axisFlags.isZMax && cornerKey.includes('ZMAX')));\n        };\n        this._updateCornerCoordinates = (state, newCorner, cornerKey, axisFlags) => {\n            if ((axisFlags.isXMin && cornerKey.includes('XMIN')) ||\n                (axisFlags.isXMax && cornerKey.includes('XMAX'))) {\n                state.point[0] = newCorner[0];\n            }\n            if ((axisFlags.isYMin && cornerKey.includes('YMIN')) ||\n                (axisFlags.isYMax && cornerKey.includes('YMAX'))) {\n                state.point[1] = newCorner[1];\n            }\n            if ((axisFlags.isZMin && cornerKey.includes('ZMIN')) ||\n                (axisFlags.isZMax && cornerKey.includes('ZMAX'))) {\n                state.point[2] = newCorner[2];\n            }\n            state.sphereSource.setCenter(...state.point);\n            state.sphereSource.modified();\n        };\n        this._updateAfterCornerMovement = (viewport) => {\n            this._updateFaceSpheresFromCorners();\n            this._updateCornerSpheres();\n            this._updateClippingPlanesFromFaceSpheres(viewport);\n        };\n        this._updateAfterFaceMovement = (viewport) => {\n            this._updateCornerSpheresFromFaces();\n            this._updateClippingPlanesFromFaceSpheres(viewport);\n        };\n        this._triggerToolChangedEvent = (sphereState) => {\n            triggerEvent(eventTarget, Events.VOLUMECROPPING_TOOL_CHANGED, {\n                toolCenter: sphereState.point,\n                axis: sphereState.isCorner ? 'corner' : sphereState.axis,\n                draggingSphereIndex: this.draggingSphereIndex,\n                seriesInstanceUID: this.seriesInstanceUID,\n            });\n        };\n        this._onNewVolume = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            this.originalClippingPlanes = [];\n            this.sphereStates = [];\n            this.edgeLines = {};\n            this._initialize3DViewports(viewportsInfo);\n        };\n        this._rotateCamera = (viewport, centerWorld, axis, angle) => {\n            const vtkCamera = viewport.getVtkActiveCamera();\n            const viewUp = vtkCamera.getViewUp();\n            const focalPoint = vtkCamera.getFocalPoint();\n            const position = vtkCamera.getPosition();\n            const newPosition = [0, 0, 0];\n            const newFocalPoint = [0, 0, 0];\n            const newViewUp = [0, 0, 0];\n            const transform = mat4.identity(new Float32Array(16));\n            mat4.translate(transform, transform, centerWorld);\n            mat4.rotate(transform, transform, angle, axis);\n            mat4.translate(transform, transform, [\n                -centerWorld[0],\n                -centerWorld[1],\n                -centerWorld[2],\n            ]);\n            vec3.transformMat4(newPosition, position, transform);\n            vec3.transformMat4(newFocalPoint, focalPoint, transform);\n            mat4.identity(transform);\n            mat4.rotate(transform, transform, angle, axis);\n            vec3.transformMat4(newViewUp, viewUp, transform);\n            viewport.setCamera({\n                position: newPosition,\n                viewUp: newViewUp,\n                focalPoint: newFocalPoint,\n            });\n        };\n        this.touchDragCallback = this._dragCallback.bind(this);\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    onSetToolActive() {\n        if (this.sphereStates && this.sphereStates.length > 0) {\n            if (this.configuration.showHandles) {\n                this.setHandlesVisible(false);\n                this.setClippingPlanesVisible(false);\n            }\n            else {\n                this.setHandlesVisible(true);\n                this.setClippingPlanesVisible(true);\n            }\n        }\n        else {\n            const viewportsInfo = this._getViewportsInfo();\n            const subscribeToElementResize = () => {\n                viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                    if (!this._resizeObservers.has(viewportId)) {\n                        const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId) || { viewport: null };\n                        if (!viewport) {\n                            return;\n                        }\n                        const { element } = viewport;\n                        const resizeObserver = new ResizeObserver(() => {\n                            const element = getEnabledElementByIds(viewportId, renderingEngineId);\n                            if (!element) {\n                                return;\n                            }\n                            const { viewport } = element;\n                            const viewPresentation = viewport.getViewPresentation();\n                            viewport.resetCamera();\n                            viewport.setViewPresentation(viewPresentation);\n                            viewport.render();\n                        });\n                        resizeObserver.observe(element);\n                        this._resizeObservers.set(viewportId, resizeObserver);\n                    }\n                });\n            };\n            subscribeToElementResize();\n            this._viewportAddedListener = (evt) => {\n                if (evt.detail.toolGroupId === this.toolGroupId) {\n                    subscribeToElementResize();\n                }\n            };\n            eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);\n            this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n            this._subscribeToViewportNewVolumeSet(viewportsInfo);\n            this._initialize3DViewports(viewportsInfo);\n            if (this.sphereStates && this.sphereStates.length > 0) {\n                this.setHandlesVisible(true);\n            }\n            else {\n                this.originalClippingPlanes = [];\n                this._initialize3DViewports(viewportsInfo);\n            }\n        }\n    }\n    onSetToolDisabled() {\n        this._resizeObservers.forEach((resizeObserver, viewportId) => {\n            resizeObserver.disconnect();\n            this._resizeObservers.delete(viewportId);\n        });\n        if (this._viewportAddedListener) {\n            eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);\n            this._viewportAddedListener = null;\n        }\n        const viewportsInfo = this._getViewportsInfo();\n        this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n    }\n    setHandlesVisible(visible) {\n        this.configuration.showHandles = visible;\n        if (visible) {\n            this.sphereStates[SPHEREINDEX.XMIN].point[0] =\n                this.originalClippingPlanes[PLANEINDEX.XMIN].origin[0];\n            this.sphereStates[SPHEREINDEX.XMAX].point[0] =\n                this.originalClippingPlanes[PLANEINDEX.XMAX].origin[0];\n            this.sphereStates[SPHEREINDEX.YMIN].point[1] =\n                this.originalClippingPlanes[PLANEINDEX.YMIN].origin[1];\n            this.sphereStates[SPHEREINDEX.YMAX].point[1] =\n                this.originalClippingPlanes[PLANEINDEX.YMAX].origin[1];\n            this.sphereStates[SPHEREINDEX.ZMIN].point[2] =\n                this.originalClippingPlanes[PLANEINDEX.ZMIN].origin[2];\n            this.sphereStates[SPHEREINDEX.ZMAX].point[2] =\n                this.originalClippingPlanes[PLANEINDEX.ZMAX].origin[2];\n            [\n                SPHEREINDEX.XMIN,\n                SPHEREINDEX.XMAX,\n                SPHEREINDEX.YMIN,\n                SPHEREINDEX.YMAX,\n                SPHEREINDEX.ZMIN,\n                SPHEREINDEX.ZMAX,\n            ].forEach((idx) => {\n                const s = this.sphereStates[idx];\n                s.sphereSource.setCenter(...s.point);\n                s.sphereSource.modified();\n            });\n            this._updateCornerSpheres();\n        }\n        this._updateHandlesVisibility();\n        const viewportsInfo = this._getViewportsInfo();\n        const [viewport3D] = viewportsInfo;\n        const renderingEngine = getRenderingEngine(viewport3D.renderingEngineId);\n        const viewport = renderingEngine.getViewport(viewport3D.viewportId);\n        viewport.render();\n    }\n    getHandlesVisible() {\n        return this.configuration.showHandles;\n    }\n    getClippingPlanesVisible() {\n        return this.configuration.showClippingPlanes;\n    }\n    setClippingPlanesVisible(visible) {\n        this.configuration.showClippingPlanes = visible;\n        const viewport = this._getViewport();\n        this._updateClippingPlanes(viewport);\n        viewport.render();\n    }\n    _dragCallback(evt) {\n        const { element, currentPoints, lastPoints } = evt.detail;\n        if (this.draggingSphereIndex !== null) {\n            this._onMouseMoveSphere(evt);\n        }\n        else {\n            const currentPointsCanvas = currentPoints.canvas;\n            const lastPointsCanvas = lastPoints.canvas;\n            const { rotateIncrementDegrees } = this.configuration;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const width = element.clientWidth;\n            const height = element.clientHeight;\n            const normalizedPosition = [\n                currentPointsCanvas[0] / width,\n                currentPointsCanvas[1] / height,\n            ];\n            const normalizedPreviousPosition = [\n                lastPointsCanvas[0] / width,\n                lastPointsCanvas[1] / height,\n            ];\n            const center = [width * 0.5, height * 0.5];\n            const centerWorld = viewport.canvasToWorld(center);\n            const normalizedCenter = [0.5, 0.5];\n            const radsq = (1.0 + Math.abs(normalizedCenter[0])) ** 2.0;\n            const op = [normalizedPreviousPosition[0], 0, 0];\n            const oe = [normalizedPosition[0], 0, 0];\n            const opsq = op[0] ** 2;\n            const oesq = oe[0] ** 2;\n            const lop = opsq > radsq ? 0 : Math.sqrt(radsq - opsq);\n            const loe = oesq > radsq ? 0 : Math.sqrt(radsq - oesq);\n            const nop = [op[0], 0, lop];\n            vtkMath.normalize(nop);\n            const noe = [oe[0], 0, loe];\n            vtkMath.normalize(noe);\n            const dot = vtkMath.dot(nop, noe);\n            if (Math.abs(dot) > 0.0001) {\n                const angleX = -2 *\n                    Math.acos(vtkMath.clampValue(dot, -1.0, 1.0)) *\n                    Math.sign(normalizedPosition[0] - normalizedPreviousPosition[0]) *\n                    rotateIncrementDegrees;\n                const upVec = camera.viewUp;\n                const atV = camera.viewPlaneNormal;\n                const rightV = [0, 0, 0];\n                const forwardV = [0, 0, 0];\n                vtkMath.cross(upVec, atV, rightV);\n                vtkMath.normalize(rightV);\n                vtkMath.cross(atV, rightV, forwardV);\n                vtkMath.normalize(forwardV);\n                vtkMath.normalize(upVec);\n                this._rotateCamera(viewport, centerWorld, forwardV, angleX);\n                const angleY = (normalizedPreviousPosition[1] - normalizedPosition[1]) *\n                    rotateIncrementDegrees;\n                this._rotateCamera(viewport, centerWorld, rightV, angleY);\n            }\n            viewport.render();\n        }\n    }\n    _updateClippingPlanes(viewport) {\n        const actorEntry = viewport.getDefaultActor();\n        if (!actorEntry || !actorEntry.actor) {\n            if (!viewport._missingActorWarned) {\n                console.warn('VolumeCroppingTool._updateClippingPlanes: No default actor found in viewport.');\n                viewport._missingActorWarned = true;\n            }\n            return;\n        }\n        const actor = actorEntry.actor;\n        const mapper = actor.getMapper();\n        const matrix = actor.getMatrix();\n        if (!this.configuration.showClippingPlanes) {\n            mapper.removeAllClippingPlanes();\n            return;\n        }\n        const rot = mat3.create();\n        mat3.fromMat4(rot, matrix);\n        const normalMatrix = mat3.create();\n        mat3.invert(normalMatrix, rot);\n        mat3.transpose(normalMatrix, normalMatrix);\n        const originalPlanes = this.originalClippingPlanes;\n        if (!originalPlanes || !originalPlanes.length) {\n            return;\n        }\n        mapper.removeAllClippingPlanes();\n        const transformedOrigins = [];\n        const transformedNormals = [];\n        for (let i = 0; i < originalPlanes.length; ++i) {\n            const plane = originalPlanes[i];\n            const oVec = vec3.create();\n            vec3.transformMat4(oVec, new Float32Array(plane.origin), matrix);\n            const o = [oVec[0], oVec[1], oVec[2]];\n            const nVec = vec3.create();\n            vec3.transformMat3(nVec, new Float32Array(plane.normal), normalMatrix);\n            vec3.normalize(nVec, nVec);\n            const n = [nVec[0], nVec[1], nVec[2]];\n            transformedOrigins.push(o);\n            transformedNormals.push(n);\n        }\n        for (let i = 0; i < transformedOrigins.length; ++i) {\n            const planeInstance = vtkPlane.newInstance({\n                origin: transformedOrigins[i],\n                normal: transformedNormals[i],\n            });\n            mapper.addClippingPlane(planeInstance);\n        }\n    }\n    _updateHandlesVisibility() {\n        this.sphereStates.forEach((state) => {\n            if (state.sphereActor) {\n                state.sphereActor.setVisibility(this.configuration.showHandles);\n            }\n        });\n        Object.values(this.edgeLines).forEach(({ actor }) => {\n            if (actor) {\n                actor.setVisibility(this.configuration.showHandles);\n            }\n        });\n    }\n    _addLine3DBetweenPoints(viewport, point1, point2, color = [0.7, 0.7, 0.7], uid = '') {\n        if (point1[0] === point2[0] &&\n            point1[1] === point2[1] &&\n            point1[2] === point2[2]) {\n            return { actor: null, source: null };\n        }\n        const points = vtkPoints.newInstance();\n        points.setNumberOfPoints(2);\n        points.setPoint(0, point1[0], point1[1], point1[2]);\n        points.setPoint(1, point2[0], point2[1], point2[2]);\n        const lines = vtkCellArray.newInstance({ values: [2, 0, 1] });\n        const polyData = vtkPolyData.newInstance();\n        polyData.setPoints(points);\n        polyData.setLines(lines);\n        const mapper = vtkMapper.newInstance();\n        mapper.setInputData(polyData);\n        const actor = vtkActor.newInstance();\n        actor.setMapper(mapper);\n        actor.getProperty().setColor(...color);\n        actor.getProperty().setLineWidth(0.5);\n        actor.getProperty().setOpacity(1.0);\n        actor.getProperty().setInterpolationToFlat();\n        actor.getProperty().setAmbient(1.0);\n        actor.getProperty().setDiffuse(0.0);\n        actor.getProperty().setSpecular(0.0);\n        actor.setVisibility(this.configuration.showHandles);\n        viewport.addActor({ actor, uid });\n        return { actor, source: polyData };\n    }\n    _addSphere(viewport, point, axis, position, cornerKey = null, adaptiveRadius) {\n        const uid = cornerKey ? `corner_${cornerKey}` : `${axis}_${position}`;\n        const sphereState = this.sphereStates.find((s) => s.uid === uid);\n        if (sphereState) {\n            return;\n        }\n        const sphereSource = vtkSphereSource.newInstance();\n        sphereSource.setCenter(point);\n        sphereSource.setRadius(adaptiveRadius);\n        const sphereMapper = vtkMapper.newInstance();\n        sphereMapper.setInputConnection(sphereSource.getOutputPort());\n        const sphereActor = vtkActor.newInstance();\n        sphereActor.setMapper(sphereMapper);\n        let color = [0.0, 1.0, 0.0];\n        const sphereColors = this.configuration.sphereColors || {};\n        if (cornerKey) {\n            color = sphereColors.CORNERS || [0.0, 0.0, 1.0];\n        }\n        else if (axis === 'z') {\n            color = sphereColors.AXIAL || [1.0, 0.0, 0.0];\n        }\n        else if (axis === 'x') {\n            color = sphereColors.SAGITTAL || [1.0, 1.0, 0.0];\n        }\n        else if (axis === 'y') {\n            color = sphereColors.CORONAL || [0.0, 1.0, 0.0];\n        }\n        const idx = this.sphereStates.findIndex((s) => s.uid === uid);\n        if (idx === -1) {\n            this.sphereStates.push({\n                point: point.slice(),\n                axis,\n                uid,\n                sphereSource,\n                sphereActor,\n                isCorner: !!cornerKey,\n                color,\n            });\n        }\n        else {\n            this.sphereStates[idx].point = point.slice();\n            this.sphereStates[idx].sphereSource = sphereSource;\n        }\n        const existingActors = viewport.getActors();\n        const existing = existingActors.find((a) => a.uid === uid);\n        if (existing) {\n            return;\n        }\n        sphereActor.getProperty().setColor(color);\n        sphereActor.setVisibility(this.configuration.showHandles);\n        viewport.addActor({ actor: sphereActor, uid: uid });\n    }\n    _calculateAdaptiveSphereRadius(diagonal) {\n        const baseRadius = this.configuration.sphereRadius !== undefined\n            ? this.configuration.sphereRadius\n            : 8;\n        const scaleFactor = this.configuration.sphereRadiusScale || 0.01;\n        const adaptiveRadius = diagonal * scaleFactor;\n        const minRadius = this.configuration.minSphereRadius || 2;\n        const maxRadius = this.configuration.maxSphereRadius || 50;\n        return Math.max(minRadius, Math.min(maxRadius, adaptiveRadius));\n    }\n    _updateClippingPlanesFromFaceSpheres(viewport) {\n        const mapper = viewport.getDefaultActor().actor.getMapper();\n        this.originalClippingPlanes[0].origin = [\n            ...this.sphereStates[SPHEREINDEX.XMIN].point,\n        ];\n        this.originalClippingPlanes[1].origin = [\n            ...this.sphereStates[SPHEREINDEX.XMAX].point,\n        ];\n        this.originalClippingPlanes[2].origin = [\n            ...this.sphereStates[SPHEREINDEX.YMIN].point,\n        ];\n        this.originalClippingPlanes[3].origin = [\n            ...this.sphereStates[SPHEREINDEX.YMAX].point,\n        ];\n        this.originalClippingPlanes[4].origin = [\n            ...this.sphereStates[SPHEREINDEX.ZMIN].point,\n        ];\n        this.originalClippingPlanes[5].origin = [\n            ...this.sphereStates[SPHEREINDEX.ZMAX].point,\n        ];\n        mapper.removeAllClippingPlanes();\n        for (let i = 0; i < 6; ++i) {\n            const origin = this.originalClippingPlanes[i].origin;\n            const normal = this.originalClippingPlanes[i].normal;\n            const plane = vtkPlane.newInstance({\n                origin,\n                normal,\n            });\n            mapper.addClippingPlane(plane);\n        }\n    }\n    _updateCornerSpheresFromFaces() {\n        const xMin = this.sphereStates[SPHEREINDEX.XMIN].point[0];\n        const xMax = this.sphereStates[SPHEREINDEX.XMAX].point[0];\n        const yMin = this.sphereStates[SPHEREINDEX.YMIN].point[1];\n        const yMax = this.sphereStates[SPHEREINDEX.YMAX].point[1];\n        const zMin = this.sphereStates[SPHEREINDEX.ZMIN].point[2];\n        const zMax = this.sphereStates[SPHEREINDEX.ZMAX].point[2];\n        const corners = [\n            { key: 'XMIN_YMIN_ZMIN', pos: [xMin, yMin, zMin] },\n            { key: 'XMIN_YMIN_ZMAX', pos: [xMin, yMin, zMax] },\n            { key: 'XMIN_YMAX_ZMIN', pos: [xMin, yMax, zMin] },\n            { key: 'XMIN_YMAX_ZMAX', pos: [xMin, yMax, zMax] },\n            { key: 'XMAX_YMIN_ZMIN', pos: [xMax, yMin, zMin] },\n            { key: 'XMAX_YMIN_ZMAX', pos: [xMax, yMin, zMax] },\n            { key: 'XMAX_YMAX_ZMIN', pos: [xMax, yMax, zMin] },\n            { key: 'XMAX_YMAX_ZMAX', pos: [xMax, yMax, zMax] },\n        ];\n        for (const corner of corners) {\n            const state = this.sphereStates.find((s) => s.uid === `corner_${corner.key}`);\n            if (state) {\n                state.point[0] = corner.pos[0];\n                state.point[1] = corner.pos[1];\n                state.point[2] = corner.pos[2];\n                state.sphereSource.setCenter(...state.point);\n                state.sphereSource.modified();\n            }\n        }\n    }\n    _updateFaceSpheresFromCorners() {\n        const corners = [\n            this.sphereStates[SPHEREINDEX.XMIN_YMIN_ZMIN].point,\n            this.sphereStates[SPHEREINDEX.XMIN_YMIN_ZMAX].point,\n            this.sphereStates[SPHEREINDEX.XMIN_YMAX_ZMIN].point,\n            this.sphereStates[SPHEREINDEX.XMIN_YMAX_ZMAX].point,\n            this.sphereStates[SPHEREINDEX.XMAX_YMIN_ZMIN].point,\n            this.sphereStates[SPHEREINDEX.XMAX_YMIN_ZMAX].point,\n            this.sphereStates[SPHEREINDEX.XMAX_YMAX_ZMIN].point,\n            this.sphereStates[SPHEREINDEX.XMAX_YMAX_ZMAX].point,\n        ];\n        const xs = corners.map((p) => p[0]);\n        const ys = corners.map((p) => p[1]);\n        const zs = corners.map((p) => p[2]);\n        const xMin = Math.min(...xs), xMax = Math.max(...xs);\n        const yMin = Math.min(...ys), yMax = Math.max(...ys);\n        const zMin = Math.min(...zs), zMax = Math.max(...zs);\n        this.sphereStates[SPHEREINDEX.XMIN].point = [\n            xMin,\n            (yMin + yMax) / 2,\n            (zMin + zMax) / 2,\n        ];\n        this.sphereStates[SPHEREINDEX.XMAX].point = [\n            xMax,\n            (yMin + yMax) / 2,\n            (zMin + zMax) / 2,\n        ];\n        this.sphereStates[SPHEREINDEX.YMIN].point = [\n            (xMin + xMax) / 2,\n            yMin,\n            (zMin + zMax) / 2,\n        ];\n        this.sphereStates[SPHEREINDEX.YMAX].point = [\n            (xMin + xMax) / 2,\n            yMax,\n            (zMin + zMax) / 2,\n        ];\n        this.sphereStates[SPHEREINDEX.ZMIN].point = [\n            (xMin + xMax) / 2,\n            (yMin + yMax) / 2,\n            zMin,\n        ];\n        this.sphereStates[SPHEREINDEX.ZMAX].point = [\n            (xMin + xMax) / 2,\n            (yMin + yMax) / 2,\n            zMax,\n        ];\n        [\n            SPHEREINDEX.XMIN,\n            SPHEREINDEX.XMAX,\n            SPHEREINDEX.YMIN,\n            SPHEREINDEX.YMAX,\n            SPHEREINDEX.ZMIN,\n            SPHEREINDEX.ZMAX,\n        ].forEach((idx) => {\n            const s = this.sphereStates[idx];\n            s.sphereSource.setCenter(...s.point);\n            s.sphereSource.modified();\n        });\n    }\n    _updateCornerSpheres() {\n        const xMin = this.sphereStates[SPHEREINDEX.XMIN].point[0];\n        const xMax = this.sphereStates[SPHEREINDEX.XMAX].point[0];\n        const yMin = this.sphereStates[SPHEREINDEX.YMIN].point[1];\n        const yMax = this.sphereStates[SPHEREINDEX.YMAX].point[1];\n        const zMin = this.sphereStates[SPHEREINDEX.ZMIN].point[2];\n        const zMax = this.sphereStates[SPHEREINDEX.ZMAX].point[2];\n        const corners = [\n            { key: 'XMIN_YMIN_ZMIN', pos: [xMin, yMin, zMin] },\n            { key: 'XMIN_YMIN_ZMAX', pos: [xMin, yMin, zMax] },\n            { key: 'XMIN_YMAX_ZMIN', pos: [xMin, yMax, zMin] },\n            { key: 'XMIN_YMAX_ZMAX', pos: [xMin, yMax, zMax] },\n            { key: 'XMAX_YMIN_ZMIN', pos: [xMax, yMin, zMin] },\n            { key: 'XMAX_YMIN_ZMAX', pos: [xMax, yMin, zMax] },\n            { key: 'XMAX_YMAX_ZMIN', pos: [xMax, yMax, zMin] },\n            { key: 'XMAX_YMAX_ZMAX', pos: [xMax, yMax, zMax] },\n        ];\n        for (const corner of corners) {\n            const state = this.sphereStates.find((s) => s.uid === `corner_${corner.key}`);\n            if (state) {\n                state.point[0] = corner.pos[0];\n                state.point[1] = corner.pos[1];\n                state.point[2] = corner.pos[2];\n                state.sphereSource.setCenter(...state.point);\n                state.sphereSource.modified();\n            }\n        }\n        Object.values(this.edgeLines).forEach(({ source, key1, key2 }) => {\n            const state1 = this.sphereStates.find((s) => s.uid === `corner_${key1}`);\n            const state2 = this.sphereStates.find((s) => s.uid === `corner_${key2}`);\n            if (state1 && state2) {\n                const points = source.getPoints();\n                points.setPoint(0, state1.point[0], state1.point[1], state1.point[2]);\n                points.setPoint(1, state2.point[0], state2.point[1], state2.point[2]);\n                points.modified();\n                source.modified();\n            }\n        });\n    }\n    _unsubscribeToViewportNewVolumeSet(viewportsInfo) {\n        viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.removeEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _subscribeToViewportNewVolumeSet(viewports) {\n        viewports.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.addEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n}\nVolumeCroppingTool.toolName = 'VolumeCropping';\nexport default VolumeCroppingTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { AnnotationTool } from './base';\nimport { getRenderingEngine, getEnabledElementByIds, getEnabledElement, utilities as csUtils, Enums, CONSTANTS, triggerEvent, eventTarget, } from '@cornerstonejs/core';\nimport { getToolGroup, getToolGroupForViewport, } from '../store/ToolGroupManager';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { drawCircle as drawCircleSvg, drawLine as drawLineSvg, } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport liangBarksyClip from '../utilities/math/vec2/liangBarksyClip';\nimport * as lineSegment from '../utilities/math/line';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nconst { RENDERING_DEFAULTS } = CONSTANTS;\nfunction defaultReferenceLineColor() {\n    return 'rgb(0, 200, 0)';\n}\nfunction defaultReferenceLineControllable() {\n    return true;\n}\nconst OPERATION = {\n    DRAG: 1,\n    ROTATE: 2,\n    SLAB: 3,\n};\nclass VolumeCroppingControlTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse'],\n        configuration: {\n            viewportIndicators: false,\n            viewportIndicatorsConfig: {\n                radius: 5,\n                x: null,\n                y: null,\n            },\n            extendReferenceLines: true,\n            initialCropFactor: 0.2,\n            mobile: {\n                enabled: false,\n                opacity: 0.8,\n            },\n            lineColors: {\n                AXIAL: [1.0, 0.0, 0.0],\n                CORONAL: [0.0, 1.0, 0.0],\n                SAGITTAL: [1.0, 1.0, 0.0],\n                UNKNOWN: [0.0, 0.0, 1.0],\n            },\n            lineWidth: 1.5,\n            lineWidthActive: 2.5,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._virtualAnnotations = [];\n        this.sphereStates = [];\n        this.draggingSphereIndex = null;\n        this.toolCenter = [0, 0, 0];\n        this.toolCenterMin = [0, 0, 0];\n        this.toolCenterMax = [0, 0, 0];\n        this.initializeViewport = ({ renderingEngineId, viewportId, }) => {\n            if (!renderingEngineId || !viewportId) {\n                console.warn('VolumeCroppingControlTool: Missing renderingEngineId or viewportId');\n                return;\n            }\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (!enabledElement) {\n                return;\n            }\n            const { viewport } = enabledElement;\n            this._updateToolCentersFromViewport(viewport);\n            const { element } = viewport;\n            const { position, focalPoint, viewPlaneNormal } = viewport.getCamera();\n            let annotations = this._getAnnotations(enabledElement);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (annotations?.length) {\n                removeAnnotation(annotations[0].annotationUID);\n            }\n            const orientation = this._getOrientationFromNormal(viewport.getCamera().viewPlaneNormal);\n            const annotation = {\n                highlighted: false,\n                metadata: {\n                    cameraPosition: [...position],\n                    cameraFocalPoint: [...focalPoint],\n                    toolName: this.getToolName(),\n                },\n                data: {\n                    handles: {\n                        toolCenter: this.toolCenter,\n                        toolCenterMin: this.toolCenterMin,\n                        toolCenterMax: this.toolCenterMax,\n                    },\n                    activeOperation: null,\n                    activeViewportIds: [],\n                    viewportId,\n                    referenceLines: [],\n                    orientation,\n                },\n            };\n            addAnnotation(annotation, element);\n            return {\n                normal: viewPlaneNormal,\n                point: viewport.canvasToWorld([100, 100]),\n            };\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.resetCroppingSpheres = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            for (const viewportInfo of viewportsInfo) {\n                const { viewportId, renderingEngineId } = viewportInfo;\n                const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n                const viewport = enabledElement.viewport;\n                const resetPan = true;\n                const resetZoom = true;\n                const resetToCenter = true;\n                const resetRotation = true;\n                const suppressEvents = true;\n                viewport.resetCamera({\n                    resetPan,\n                    resetZoom,\n                    resetToCenter,\n                    resetRotation,\n                    suppressEvents,\n                });\n                viewport.resetSlabThickness();\n                const { element } = viewport;\n                let annotations = this._getAnnotations(enabledElement);\n                annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n                if (annotations.length) {\n                    removeAnnotation(annotations[0].annotationUID);\n                }\n                viewport.render();\n            }\n            this._computeToolCenter(viewportsInfo);\n        };\n        this.computeToolCenter = () => {\n            const viewportsInfo = this._getViewportsInfo();\n        };\n        this._computeToolCenter = (viewportsInfo) => {\n            if (!viewportsInfo || !viewportsInfo[0]) {\n                console.warn('  _computeToolCenter : No valid viewportsInfo for computeToolCenter.');\n                return;\n            }\n            const orientationIds = ['AXIAL', 'CORONAL', 'SAGITTAL'];\n            const presentOrientations = viewportsInfo\n                .map((vp) => {\n                if (vp.renderingEngineId) {\n                    const renderingEngine = getRenderingEngine(vp.renderingEngineId);\n                    const viewport = renderingEngine.getViewport(vp.viewportId);\n                    if (viewport && viewport.getCamera) {\n                        const orientation = this._getOrientationFromNormal(viewport.getCamera().viewPlaneNormal);\n                        if (orientation) {\n                            return orientation;\n                        }\n                    }\n                }\n                return null;\n            })\n                .filter(Boolean);\n            const missingOrientation = orientationIds.find((id) => !presentOrientations.includes(id));\n            const presentNormals = [];\n            const presentCenters = [];\n            const presentViewportInfos = viewportsInfo.filter((vp) => {\n                let orientation = null;\n                if (vp.renderingEngineId) {\n                    const renderingEngine = getRenderingEngine(vp.renderingEngineId);\n                    const viewport = renderingEngine.getViewport(vp.viewportId);\n                    if (viewport && viewport.getCamera) {\n                        orientation = this._getOrientationFromNormal(viewport.getCamera().viewPlaneNormal);\n                    }\n                }\n                return orientation && orientationIds.includes(orientation);\n            });\n            presentViewportInfos.forEach((vpInfo) => {\n                const { normal, point } = this.initializeViewport(vpInfo);\n                presentNormals.push(normal);\n                presentCenters.push(point);\n            });\n            if (presentViewportInfos.length === 2 && missingOrientation) {\n                const virtualNormal = [0, 0, 0];\n                vec3.cross(virtualNormal, presentNormals[0], presentNormals[1]);\n                vec3.normalize(virtualNormal, virtualNormal);\n                const virtualCenter = [\n                    (presentCenters[0][0] + presentCenters[1][0]) / 2,\n                    (presentCenters[0][1] + presentCenters[1][1]) / 2,\n                    (presentCenters[0][2] + presentCenters[1][2]) / 2,\n                ];\n                const orientation = null;\n                const virtualAnnotation = {\n                    highlighted: false,\n                    metadata: {\n                        cameraPosition: [...virtualCenter],\n                        cameraFocalPoint: [...virtualCenter],\n                        toolName: this.getToolName(),\n                    },\n                    data: {\n                        handles: {\n                            activeOperation: null,\n                            toolCenter: this.toolCenter,\n                            toolCenterMin: this.toolCenterMin,\n                            toolCenterMax: this.toolCenterMax,\n                        },\n                        activeViewportIds: [],\n                        viewportId: missingOrientation,\n                        referenceLines: [],\n                        orientation,\n                    },\n                    isVirtual: true,\n                    virtualNormal,\n                };\n                this._virtualAnnotations = [virtualAnnotation];\n            }\n            else if (presentViewportInfos.length === 1) {\n                let presentOrientation = null;\n                const vpInfo = presentViewportInfos[0];\n                if (vpInfo.renderingEngineId) {\n                    const renderingEngine = getRenderingEngine(vpInfo.renderingEngineId);\n                    const viewport = renderingEngine.getViewport(vpInfo.viewportId);\n                    if (viewport && viewport.getCamera) {\n                        presentOrientation = this._getOrientationFromNormal(viewport.getCamera().viewPlaneNormal);\n                    }\n                }\n                const presentCenter = presentCenters[0];\n                const canonicalNormals = {\n                    AXIAL: [0, 0, 1],\n                    CORONAL: [0, 1, 0],\n                    SAGITTAL: [1, 0, 0],\n                };\n                const missingIds = orientationIds.filter((id) => id !== presentOrientation);\n                const virtualAnnotations = missingIds.map((orientation) => {\n                    const normal = canonicalNormals[orientation];\n                    const virtualAnnotation = {\n                        highlighted: false,\n                        metadata: {\n                            cameraPosition: [...presentCenter],\n                            cameraFocalPoint: [...presentCenter],\n                            toolName: this.getToolName(),\n                        },\n                        data: {\n                            handles: {\n                                activeOperation: null,\n                                toolCenter: this.toolCenter,\n                                toolCenterMin: this.toolCenterMin,\n                                toolCenterMax: this.toolCenterMax,\n                            },\n                            activeViewportIds: [],\n                            viewportId: orientation,\n                            referenceLines: [],\n                            orientation,\n                        },\n                        isVirtual: true,\n                        virtualNormal: normal,\n                    };\n                    return virtualAnnotation;\n                });\n                this._virtualAnnotations = virtualAnnotations;\n            }\n            if (viewportsInfo && viewportsInfo.length) {\n                triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n            }\n        };\n        this.cancel = () => {\n            console.log('Not implemented yet');\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            if (this._pointNearTool(element, annotation, canvasCoords, 6)) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.onResetCamera = (evt) => {\n            this.resetCroppingSpheres();\n        };\n        this.mouseMoveCallback = (evt, filteredToolAnnotations) => {\n            if (!filteredToolAnnotations) {\n                return;\n            }\n            const { element, currentPoints } = evt.detail;\n            const canvasCoords = currentPoints.canvas;\n            let imageNeedsUpdate = false;\n            for (let i = 0; i < filteredToolAnnotations.length; i++) {\n                const annotation = filteredToolAnnotations[i];\n                if (isAnnotationLocked(annotation.annotationUID)) {\n                    continue;\n                }\n                const { data, highlighted } = annotation;\n                if (!data.handles) {\n                    continue;\n                }\n                const previousActiveOperation = data.handles.activeOperation;\n                const previousActiveViewportIds = data.activeViewportIds && data.activeViewportIds.length > 0\n                    ? [...data.activeViewportIds]\n                    : [];\n                data.activeViewportIds = [];\n                let near = false;\n                near = this._pointNearTool(element, annotation, canvasCoords, 6);\n                const nearToolAndNotMarkedActive = near && !highlighted;\n                const notNearToolAndMarkedActive = !near && highlighted;\n                if (nearToolAndNotMarkedActive || notNearToolAndMarkedActive) {\n                    annotation.highlighted = !highlighted;\n                    imageNeedsUpdate = true;\n                }\n            }\n            return imageNeedsUpdate;\n        };\n        this.filterInteractableAnnotationsForElement = (element, annotations) => {\n            if (!annotations || !annotations.length) {\n                return [];\n            }\n            const enabledElement = getEnabledElement(element);\n            let orientation = null;\n            if (enabledElement.viewport && enabledElement.viewport.getCamera) {\n                orientation = this._getOrientationFromNormal(enabledElement.viewport.getCamera().viewPlaneNormal);\n            }\n            const filtered = annotations.filter((annotation) => {\n                if (annotation.isVirtual) {\n                    return true;\n                }\n                if (annotation.data.orientation &&\n                    orientation &&\n                    annotation.data.orientation === orientation) {\n                    return true;\n                }\n                return false;\n            });\n            return filtered;\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            function lineIntersection2D(p1, p2, q1, q2) {\n                const s1_x = p2[0] - p1[0];\n                const s1_y = p2[1] - p1[1];\n                const s2_x = q2[0] - q1[0];\n                const s2_y = q2[1] - q1[1];\n                const denom = -s2_x * s1_y + s1_x * s2_y;\n                if (Math.abs(denom) < 1e-8) {\n                    return null;\n                }\n                const s = (-s1_y * (p1[0] - q1[0]) + s1_x * (p1[1] - q1[1])) / denom;\n                const t = (s2_x * (p1[1] - q1[1]) - s2_y * (p1[0] - q1[0])) / denom;\n                if (s >= 0 && s <= 1 && t >= 0 && t <= 1) {\n                    return [p1[0] + t * s1_x, p1[1] + t * s1_y];\n                }\n                return null;\n            }\n            const viewportsInfo = this._getViewportsInfo();\n            if (!viewportsInfo || viewportsInfo.length === 0) {\n                return false;\n            }\n            let renderStatus = false;\n            const { viewport, renderingEngine } = enabledElement;\n            const { element } = viewport;\n            let annotations = this._getAnnotations(enabledElement);\n            if (this._virtualAnnotations && this._virtualAnnotations.length) {\n                annotations = annotations.concat(this._virtualAnnotations);\n            }\n            const camera = viewport.getCamera();\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!viewportAnnotation || !viewportAnnotation.data) {\n                return renderStatus;\n            }\n            const annotationUID = viewportAnnotation.annotationUID;\n            const { clientWidth, clientHeight } = viewport.canvas;\n            const canvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n            const data = viewportAnnotation.data;\n            const otherViewportAnnotations = annotations;\n            const volumeCroppingCenterCanvasMin = viewport.worldToCanvas(this.toolCenterMin);\n            const volumeCroppingCenterCanvasMax = viewport.worldToCanvas(this.toolCenterMax);\n            const referenceLines = [];\n            const canvasBox = [0, 0, clientWidth, clientHeight];\n            otherViewportAnnotations.forEach((annotation) => {\n                const data = annotation.data;\n                const isVirtual = 'isVirtual' in annotation &&\n                    annotation.isVirtual === true;\n                data.handles.toolCenter = this.toolCenter;\n                let otherViewport, otherCamera, clientWidth, clientHeight, otherCanvasDiagonalLength, otherCanvasCenter, otherViewportCenterWorld;\n                if (isVirtual) {\n                    const realViewports = viewportsInfo.filter((vp) => vp.viewportId !== data.viewportId);\n                    if (realViewports.length === 2) {\n                        const vp1 = renderingEngine.getViewport(realViewports[0].viewportId);\n                        const vp2 = renderingEngine.getViewport(realViewports[1].viewportId);\n                        const normal1 = vp1.getCamera().viewPlaneNormal;\n                        const normal2 = vp2.getCamera().viewPlaneNormal;\n                        const virtualNormal = vec3.create();\n                        vec3.cross(virtualNormal, normal1, normal2);\n                        vec3.normalize(virtualNormal, virtualNormal);\n                        otherCamera = {\n                            viewPlaneNormal: virtualNormal,\n                            position: data.handles.toolCenter,\n                            focalPoint: data.handles.toolCenter,\n                            viewUp: [0, 1, 0],\n                        };\n                        clientWidth = viewport.canvas.clientWidth;\n                        clientHeight = viewport.canvas.clientHeight;\n                        otherCanvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n                        otherCanvasCenter = [clientWidth * 0.5, clientHeight * 0.5];\n                        otherViewportCenterWorld = data.handles.toolCenter;\n                        otherViewport = {\n                            id: data.viewportId,\n                            canvas: viewport.canvas,\n                            canvasToWorld: () => data.handles.toolCenter,\n                        };\n                    }\n                    else {\n                        const virtualNormal = annotation\n                            .virtualNormal ?? [0, 0, 1];\n                        otherCamera = {\n                            viewPlaneNormal: virtualNormal,\n                            position: data.handles.toolCenter,\n                            focalPoint: data.handles.toolCenter,\n                            viewUp: [0, 1, 0],\n                        };\n                        clientWidth = viewport.canvas.clientWidth;\n                        clientHeight = viewport.canvas.clientHeight;\n                        otherCanvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n                        otherCanvasCenter = [clientWidth * 0.5, clientHeight * 0.5];\n                        otherViewportCenterWorld = data.handles.toolCenter;\n                        otherViewport = {\n                            id: data.viewportId,\n                            canvas: viewport.canvas,\n                            canvasToWorld: () => data.handles.toolCenter,\n                        };\n                    }\n                }\n                else {\n                    otherViewport = renderingEngine.getViewport(data.viewportId);\n                    otherCamera = otherViewport.getCamera();\n                    clientWidth = otherViewport.canvas.clientWidth;\n                    clientHeight = otherViewport.canvas.clientHeight;\n                    otherCanvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n                    otherCanvasCenter = [clientWidth * 0.5, clientHeight * 0.5];\n                    otherViewportCenterWorld =\n                        otherViewport.canvasToWorld(otherCanvasCenter);\n                }\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const direction = [0, 0, 0];\n                vtkMath.cross(camera.viewPlaneNormal, otherCamera.viewPlaneNormal, direction);\n                vtkMath.normalize(direction);\n                vtkMath.multiplyScalar(direction, otherCanvasDiagonalLength);\n                const pointWorld0 = [0, 0, 0];\n                vtkMath.add(otherViewportCenterWorld, direction, pointWorld0);\n                const pointWorld1 = [0, 0, 0];\n                vtkMath.subtract(otherViewportCenterWorld, direction, pointWorld1);\n                const pointCanvas0 = viewport.worldToCanvas(pointWorld0);\n                const otherViewportCenterCanvas = viewport.worldToCanvas([\n                    otherViewportCenterWorld[0] ?? 0,\n                    otherViewportCenterWorld[1] ?? 0,\n                    otherViewportCenterWorld[2] ?? 0,\n                ]);\n                const canvasUnitVectorFromCenter = vec2.create();\n                vec2.subtract(canvasUnitVectorFromCenter, pointCanvas0, otherViewportCenterCanvas);\n                vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n                const canvasVectorFromCenterLong = vec2.create();\n                vec2.scale(canvasVectorFromCenterLong, canvasUnitVectorFromCenter, canvasDiagonalLength * 100);\n                const refLinesCenterMin = otherViewportControllable\n                    ? vec2.clone(volumeCroppingCenterCanvasMin)\n                    : vec2.clone(otherViewportCenterCanvas);\n                const refLinePointMinOne = vec2.create();\n                const refLinePointMinTwo = vec2.create();\n                vec2.add(refLinePointMinOne, refLinesCenterMin, canvasVectorFromCenterLong);\n                vec2.subtract(refLinePointMinTwo, refLinesCenterMin, canvasVectorFromCenterLong);\n                liangBarksyClip(refLinePointMinOne, refLinePointMinTwo, canvasBox);\n                referenceLines.push([\n                    otherViewport,\n                    refLinePointMinOne,\n                    refLinePointMinTwo,\n                    'min',\n                ]);\n                const refLinesCenterMax = otherViewportControllable\n                    ? vec2.clone(volumeCroppingCenterCanvasMax)\n                    : vec2.clone(otherViewportCenterCanvas);\n                const refLinePointMaxOne = vec2.create();\n                const refLinePointMaxTwo = vec2.create();\n                vec2.add(refLinePointMaxOne, refLinesCenterMax, canvasVectorFromCenterLong);\n                vec2.subtract(refLinePointMaxTwo, refLinesCenterMax, canvasVectorFromCenterLong);\n                liangBarksyClip(refLinePointMaxOne, refLinePointMaxTwo, canvasBox);\n                referenceLines.push([\n                    otherViewport,\n                    refLinePointMaxOne,\n                    refLinePointMaxTwo,\n                    'max',\n                ]);\n            });\n            data.referenceLines = referenceLines;\n            const viewportColor = this._getReferenceLineColor(viewport.id);\n            const color = viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n            referenceLines.forEach((line, lineIndex) => {\n                const intersections = [];\n                for (let j = 0; j < referenceLines.length; ++j) {\n                    if (j === lineIndex) {\n                        continue;\n                    }\n                    const otherLine = referenceLines[j];\n                    const intersection = lineIntersection2D(line[1], line[2], otherLine[1], otherLine[2]);\n                    if (intersection) {\n                        intersections.push({\n                            with: otherLine[3],\n                            point: intersection,\n                        });\n                    }\n                }\n                const otherViewport = line[0];\n                let orientation = null;\n                if (otherViewport && otherViewport.id) {\n                    const annotationForViewport = annotations.find((a) => a.data.viewportId === otherViewport.id);\n                    if (annotationForViewport && annotationForViewport.data.orientation) {\n                        orientation = String(annotationForViewport.data.orientation).toUpperCase();\n                    }\n                    else {\n                        const idUpper = otherViewport.id.toUpperCase();\n                        if (idUpper.includes('AXIAL')) {\n                            orientation = 'AXIAL';\n                        }\n                        else if (idUpper.includes('CORONAL')) {\n                            orientation = 'CORONAL';\n                        }\n                        else if (idUpper.includes('SAGITTAL')) {\n                            orientation = 'SAGITTAL';\n                        }\n                    }\n                }\n                const lineColors = this.configuration.lineColors || {};\n                const colorArr = lineColors[orientation] ||\n                    lineColors.unknown || [1.0, 0.0, 0.0];\n                const color = Array.isArray(colorArr)\n                    ? `rgb(${colorArr.map((v) => Math.round(v * 255)).join(',')})`\n                    : colorArr;\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const selectedViewportId = data.activeViewportIds.find((id) => id === otherViewport.id);\n                let lineWidth = this.configuration.lineWidth ?? 1.5;\n                const lineActive = data.handles.activeOperation !== null &&\n                    data.handles.activeOperation === OPERATION.DRAG &&\n                    selectedViewportId;\n                if (lineActive) {\n                    lineWidth = this.configuration.activeLineWidth ?? 2.5;\n                }\n                const lineUID = `${lineIndex}`;\n                if (viewportControllable) {\n                    if (intersections.length === 2) {\n                        drawLineSvg(svgDrawingHelper, annotationUID, lineUID, intersections[0].point, intersections[1].point, {\n                            color,\n                            lineWidth,\n                        });\n                    }\n                    if (this.configuration.extendReferenceLines &&\n                        intersections.length === 2) {\n                        if (this.configuration.extendReferenceLines &&\n                            intersections.length === 2) {\n                            const sortedIntersections = intersections\n                                .map((intersection) => ({\n                                ...intersection,\n                                distance: vec2.distance(line[1], intersection.point),\n                            }))\n                                .sort((a, b) => a.distance - b.distance);\n                            drawLineSvg(svgDrawingHelper, annotationUID, lineUID + '_dashed_before', line[1], sortedIntersections[0].point, { color, lineWidth, lineDash: [4, 4] });\n                            drawLineSvg(svgDrawingHelper, annotationUID, lineUID + '_dashed_after', sortedIntersections[1].point, line[2], { color, lineWidth, lineDash: [4, 4] });\n                        }\n                    }\n                }\n            });\n            renderStatus = true;\n            if (this.configuration.viewportIndicators) {\n                const { viewportIndicatorsConfig } = this.configuration;\n                const xOffset = viewportIndicatorsConfig?.xOffset || 0.95;\n                const yOffset = viewportIndicatorsConfig?.yOffset || 0.05;\n                const referenceColorCoordinates = [\n                    clientWidth * xOffset,\n                    clientHeight * yOffset,\n                ];\n                const circleRadius = viewportIndicatorsConfig?.circleRadius || canvasDiagonalLength * 0.01;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, referenceColorCoordinates, circleRadius, { color, fill: color });\n            }\n            return renderStatus;\n        };\n        this._getAnnotations = (enabledElement) => {\n            const { viewport } = enabledElement;\n            const annotations = getAnnotations(this.getToolName(), viewport.element) || [];\n            const viewportIds = this._getViewportsInfo().map(({ viewportId }) => viewportId);\n            const toolGroupAnnotations = annotations.filter((annotation) => {\n                const { data } = annotation;\n                return viewportIds.includes(data.viewportId);\n            });\n            return toolGroupAnnotations;\n        };\n        this._onSphereMoved = (evt) => {\n            if (evt.detail.originalClippingPlanes) {\n                this._syncWithVolumeCroppingTool(evt.detail.originalClippingPlanes);\n            }\n            else {\n                if (evt.detail.seriesInstanceUID !== this.seriesInstanceUID) {\n                    return;\n                }\n                const { draggingSphereIndex, toolCenter } = evt.detail;\n                const newMin = [...this.toolCenterMin];\n                const newMax = [...this.toolCenterMax];\n                if (draggingSphereIndex >= 0 && draggingSphereIndex <= 5) {\n                    const axis = Math.floor(draggingSphereIndex / 2);\n                    const isMin = draggingSphereIndex % 2 === 0;\n                    (isMin ? newMin : newMax)[axis] = toolCenter[axis];\n                    this.setToolCenter(newMin, 'min');\n                    this.setToolCenter(newMax, 'max');\n                    return;\n                }\n                if (draggingSphereIndex >= 6 && draggingSphereIndex <= 13) {\n                    const idx = draggingSphereIndex;\n                    if (idx < 10) {\n                        newMin[0] = toolCenter[0];\n                    }\n                    else {\n                        newMax[0] = toolCenter[0];\n                    }\n                    if ([6, 7, 10, 11].includes(idx)) {\n                        newMin[1] = toolCenter[1];\n                    }\n                    else {\n                        newMax[1] = toolCenter[1];\n                    }\n                    if (idx % 2 === 0) {\n                        newMin[2] = toolCenter[2];\n                    }\n                    else {\n                        newMax[2] = toolCenter[2];\n                    }\n                    this.setToolCenter(newMin, 'min');\n                    this.setToolCenter(newMax, 'max');\n                }\n            }\n        };\n        this._onNewVolume = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            if (viewportsInfo && viewportsInfo.length > 0) {\n                const { viewportId, renderingEngineId } = viewportsInfo[0];\n                const renderingEngine = getRenderingEngine(renderingEngineId);\n                const viewport = renderingEngine.getViewport(viewportId);\n                const volumeActors = viewport.getActors();\n                if (volumeActors.length > 0) {\n                    const imageData = volumeActors[0].actor.getMapper().getInputData();\n                    if (imageData) {\n                        this.seriesInstanceUID = imageData.seriesInstanceUID;\n                        this._updateToolCentersFromViewport(viewport);\n                        const annotations = getAnnotations(this.getToolName(), viewportId) || [];\n                        annotations.forEach((annotation) => {\n                            if (annotation.data && annotation.data.handles) {\n                                annotation.data.handles.toolCenter = [...this.toolCenter];\n                            }\n                        });\n                    }\n                }\n            }\n            this._computeToolCenter(viewportsInfo);\n            triggerEvent(eventTarget, Events.VOLUMECROPPINGCONTROL_TOOL_CHANGED, {\n                toolGroupId: this.toolGroupId,\n                viewportsInfo: viewportsInfo,\n                seriesInstanceUID: this.seriesInstanceUID,\n            });\n        };\n        this._getAnnotationsForViewportsWithDifferentCameras = (enabledElement, annotations) => {\n            const { viewportId, renderingEngine, viewport } = enabledElement;\n            const otherViewportAnnotations = annotations.filter((annotation) => annotation.data.viewportId !== viewportId);\n            if (!otherViewportAnnotations || !otherViewportAnnotations.length) {\n                return [];\n            }\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, position } = camera;\n            const viewportsWithDifferentCameras = otherViewportAnnotations.filter((annotation) => {\n                const { viewportId } = annotation.data;\n                const targetViewport = renderingEngine.getViewport(viewportId);\n                const cameraOfTarget = targetViewport.getCamera();\n                return !(csUtils.isEqual(cameraOfTarget.viewPlaneNormal, viewPlaneNormal, 1e-2) && csUtils.isEqual(cameraOfTarget.position, position, 1));\n            });\n            return viewportsWithDifferentCameras;\n        };\n        this._filterViewportWithSameOrientation = (enabledElement, referenceAnnotation, annotations) => {\n            const { renderingEngine } = enabledElement;\n            const { data } = referenceAnnotation;\n            const viewport = renderingEngine.getViewport(data.viewportId);\n            const linkedViewportAnnotations = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return otherViewportControllable === true;\n            });\n            if (!linkedViewportAnnotations || !linkedViewportAnnotations.length) {\n                return [];\n            }\n            const camera = viewport.getCamera();\n            const viewPlaneNormal = camera.viewPlaneNormal;\n            vtkMath.normalize(viewPlaneNormal);\n            const otherViewportsAnnotationsWithSameCameraDirection = linkedViewportAnnotations.filter((annotation) => {\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                return (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) &&\n                    csUtils.isEqual(camera.viewUp, otherCamera.viewUp, 1e-2));\n            });\n            return otherViewportsAnnotationsWithSameCameraDirection;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = !this.configuration.mobile?.enabled;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            this.editData.annotation.data.handles.activeOperation = null;\n            this.editData.annotation.data.activeViewportIds = [];\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            this.editData = null;\n            const requireSameOrientation = false;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), requireSameOrientation);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const delta = eventDetail.deltaPoints.world;\n            if (Math.abs(delta[0]) < 1e-3 &&\n                Math.abs(delta[1]) < 1e-3 &&\n                Math.abs(delta[2]) < 1e-3) {\n                return;\n            }\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            if (viewport.type === Enums.ViewportType.VOLUME_3D) {\n                return;\n            }\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!viewportAnnotation) {\n                return;\n            }\n            const { handles } = viewportAnnotation.data;\n            if (handles.activeOperation === OPERATION.DRAG) {\n                if (handles.activeType === 'min') {\n                    this.toolCenterMin[0] += delta[0];\n                    this.toolCenterMin[1] += delta[1];\n                    this.toolCenterMin[2] += delta[2];\n                }\n                else if (handles.activeType === 'max') {\n                    this.toolCenterMax[0] += delta[0];\n                    this.toolCenterMax[1] += delta[1];\n                    this.toolCenterMax[2] += delta[2];\n                }\n                else {\n                    this.toolCenter[0] += delta[0];\n                    this.toolCenter[1] += delta[1];\n                    this.toolCenter[2] += delta[2];\n                }\n                const viewportsInfo = this._getViewportsInfo();\n                triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n                triggerEvent(eventTarget, Events.VOLUMECROPPINGCONTROL_TOOL_CHANGED, {\n                    toolGroupId: this.toolGroupId,\n                    toolCenter: this.toolCenter,\n                    toolCenterMin: this.toolCenterMin,\n                    toolCenterMax: this.toolCenterMax,\n                    handleType: handles.activeType,\n                    viewportOrientation: [],\n                    seriesInstanceUID: this.seriesInstanceUID,\n                });\n            }\n        };\n        this._getReferenceLineColor =\n            toolProps.configuration?.getReferenceLineColor ||\n                defaultReferenceLineColor;\n        this._getReferenceLineControllable =\n            toolProps.configuration?.getReferenceLineControllable ||\n                defaultReferenceLineControllable;\n        const viewportsInfo = getToolGroup(this.toolGroupId)?.viewportsInfo;\n        eventTarget.addEventListener(Events.VOLUMECROPPING_TOOL_CHANGED, this._onSphereMoved);\n        if (viewportsInfo && viewportsInfo.length > 0) {\n            const { viewportId, renderingEngineId } = viewportsInfo[0];\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            const renderingEngine = getRenderingEngine(renderingEngineId);\n            const viewport = renderingEngine.getViewport(viewportId);\n            const volumeActors = viewport.getActors();\n            if (!volumeActors || !volumeActors.length) {\n                console.warn(`VolumeCroppingControlTool: No volume actors found in viewport ${viewportId}.`);\n                return;\n            }\n            const imageData = volumeActors[0].actor.getMapper().getInputData();\n            if (imageData) {\n                const dimensions = imageData.getDimensions();\n                const spacing = imageData.getSpacing();\n                const origin = imageData.getOrigin();\n                this.seriesInstanceUID = imageData.seriesInstanceUID || 'unknown';\n                const cropFactor = this.configuration.initialCropFactor ?? 0.2;\n                this.toolCenter = [\n                    origin[0] + cropFactor * (dimensions[0] - 1) * spacing[0],\n                    origin[1] + cropFactor * (dimensions[1] - 1) * spacing[1],\n                    origin[2] + cropFactor * (dimensions[2] - 1) * spacing[2],\n                ];\n                const maxCropFactor = 1 - cropFactor;\n                this.toolCenterMin = [\n                    origin[0] + cropFactor * (dimensions[0] - 1) * spacing[0],\n                    origin[1] + cropFactor * (dimensions[1] - 1) * spacing[1],\n                    origin[2] + cropFactor * (dimensions[2] - 1) * spacing[2],\n                ];\n                this.toolCenterMax = [\n                    origin[0] + maxCropFactor * (dimensions[0] - 1) * spacing[0],\n                    origin[1] + maxCropFactor * (dimensions[1] - 1) * spacing[1],\n                    origin[2] + maxCropFactor * (dimensions[2] - 1) * spacing[2],\n                ];\n            }\n        }\n    }\n    _updateToolCentersFromViewport(viewport) {\n        const volumeActors = viewport.getActors();\n        if (!volumeActors || !volumeActors.length) {\n            return;\n        }\n        const imageData = volumeActors[0].actor.getMapper().getInputData();\n        if (!imageData) {\n            return;\n        }\n        this.seriesInstanceUID = imageData.seriesInstanceUID || 'unknown';\n        const dimensions = imageData.getDimensions();\n        const spacing = imageData.getSpacing();\n        const origin = imageData.getOrigin();\n        const cropFactor = this.configuration.initialCropFactor ?? 0.2;\n        const cropStart = cropFactor / 2;\n        const cropEnd = 1 - cropFactor / 2;\n        this.toolCenter = [\n            origin[0] +\n                ((cropStart + cropEnd) / 2) * (dimensions[0] - 1) * spacing[0],\n            origin[1] +\n                ((cropStart + cropEnd) / 2) * (dimensions[1] - 1) * spacing[1],\n            origin[2] +\n                ((cropStart + cropEnd) / 2) * (dimensions[2] - 1) * spacing[2],\n        ];\n        this.toolCenterMin = [\n            origin[0] + cropStart * (dimensions[0] - 1) * spacing[0],\n            origin[1] + cropStart * (dimensions[1] - 1) * spacing[1],\n            origin[2] + cropStart * (dimensions[2] - 1) * spacing[2],\n        ];\n        this.toolCenterMax = [\n            origin[0] + cropEnd * (dimensions[0] - 1) * spacing[0],\n            origin[1] + cropEnd * (dimensions[1] - 1) * spacing[1],\n            origin[2] + cropEnd * (dimensions[2] - 1) * spacing[2],\n        ];\n    }\n    onSetToolInactive() {\n        console.debug(`VolumeCroppingControlTool: onSetToolInactive called for tool ${this.getToolName()}`);\n    }\n    onSetToolActive() {\n        const viewportsInfo = this._getViewportsInfo();\n        let anyAnnotationExists = false;\n        for (const vpInfo of viewportsInfo) {\n            const enabledElement = getEnabledElementByIds(vpInfo.viewportId, vpInfo.renderingEngineId);\n            const annotations = this._getAnnotations(enabledElement);\n            if (annotations && annotations.length > 0) {\n                anyAnnotationExists = true;\n                break;\n            }\n        }\n        if (!anyAnnotationExists) {\n            this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n            this._subscribeToViewportNewVolumeSet(viewportsInfo);\n            this._computeToolCenter(viewportsInfo);\n            triggerEvent(eventTarget, Events.VOLUMECROPPINGCONTROL_TOOL_CHANGED, {\n                toolGroupId: this.toolGroupId,\n                viewportsInfo: viewportsInfo,\n                seriesInstanceUID: this.seriesInstanceUID,\n            });\n        }\n        else {\n            for (const vpInfo of viewportsInfo) {\n                const enabledElement = getEnabledElementByIds(vpInfo.viewportId, vpInfo.renderingEngineId);\n                if (!enabledElement) {\n                    continue;\n                }\n                const annotations = this._getAnnotations(enabledElement);\n                if (annotations && annotations.length > 0) {\n                    annotations.forEach((annotation) => {\n                        removeAnnotation(annotation.annotationUID);\n                    });\n                }\n                enabledElement.viewport.render();\n            }\n        }\n    }\n    onSetToolEnabled() {\n        console.debug(`VolumeCroppingControlTool: onSetToolEnabled called for tool ${this.getToolName()}`);\n        const viewportsInfo = this._getViewportsInfo();\n    }\n    onSetToolDisabled() {\n        console.debug(`VolumeCroppingControlTool: onSetToolDisabled called for tool ${this.getToolName()}`);\n        const viewportsInfo = this._getViewportsInfo();\n        this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n        viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (!enabledElement) {\n                return;\n            }\n            const annotations = this._getAnnotations(enabledElement);\n            if (annotations?.length) {\n                annotations.forEach((annotation) => {\n                    removeAnnotation(annotation.annotationUID);\n                });\n            }\n        });\n    }\n    _getOrientationFromNormal(normal) {\n        if (!normal) {\n            return null;\n        }\n        const canonical = {\n            AXIAL: [0, 0, 1],\n            CORONAL: [0, 1, 0],\n            SAGITTAL: [1, 0, 0],\n        };\n        const tol = 1e-2;\n        for (const [key, value] of Object.entries(canonical)) {\n            if (Math.abs(normal[0] - value[0]) < tol &&\n                Math.abs(normal[1] - value[1]) < tol &&\n                Math.abs(normal[2] - value[2]) < tol) {\n                return key;\n            }\n            if (Math.abs(normal[0] + value[0]) < tol &&\n                Math.abs(normal[1] + value[1]) < tol &&\n                Math.abs(normal[2] + value[2]) < tol) {\n                return key;\n            }\n        }\n        return null;\n    }\n    _syncWithVolumeCroppingTool(originalClippingPlanes) {\n        const planes = originalClippingPlanes;\n        if (planes.length >= 6) {\n            this.toolCenterMin = [\n                planes[0].origin[0],\n                planes[2].origin[1],\n                planes[4].origin[2],\n            ];\n            this.toolCenterMax = [\n                planes[1].origin[0],\n                planes[3].origin[1],\n                planes[5].origin[2],\n            ];\n            this.toolCenter = [\n                (this.toolCenterMin[0] + this.toolCenterMax[0]) / 2,\n                (this.toolCenterMin[1] + this.toolCenterMax[1]) / 2,\n                (this.toolCenterMin[2] + this.toolCenterMax[2]) / 2,\n            ];\n            const viewportsInfo = this._getViewportsInfo();\n            viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n                if (enabledElement) {\n                    const annotations = this._getAnnotations(enabledElement);\n                    annotations.forEach((annotation) => {\n                        if (annotation.data &&\n                            annotation.data.handles &&\n                            annotation.data.orientation) {\n                            const orientation = annotation.data.orientation;\n                            if (orientation === 'AXIAL') {\n                                annotation.data.handles.toolCenterMin = [\n                                    planes[0].origin[0],\n                                    planes[2].origin[1],\n                                    annotation.data.handles.toolCenterMin[2],\n                                ];\n                                annotation.data.handles.toolCenterMax = [\n                                    planes[1].origin[0],\n                                    planes[3].origin[1],\n                                    annotation.data.handles.toolCenterMax[2],\n                                ];\n                            }\n                            else if (orientation === 'CORONAL') {\n                                annotation.data.handles.toolCenterMin = [\n                                    planes[0].origin[0],\n                                    annotation.data.handles.toolCenterMin[1],\n                                    planes[4].origin[2],\n                                ];\n                                annotation.data.handles.toolCenterMax = [\n                                    planes[1].origin[0],\n                                    annotation.data.handles.toolCenterMax[1],\n                                    planes[5].origin[2],\n                                ];\n                            }\n                            else if (orientation === 'SAGITTAL') {\n                                annotation.data.handles.toolCenterMin = [\n                                    annotation.data.handles.toolCenterMin[0],\n                                    planes[2].origin[1],\n                                    planes[4].origin[2],\n                                ];\n                                annotation.data.handles.toolCenterMax = [\n                                    annotation.data.handles.toolCenterMax[0],\n                                    planes[3].origin[1],\n                                    planes[5].origin[2],\n                                ];\n                            }\n                            annotation.data.handles.toolCenter = [\n                                (annotation.data.handles.toolCenterMin[0] +\n                                    annotation.data.handles.toolCenterMax[0]) /\n                                    2,\n                                (annotation.data.handles.toolCenterMin[1] +\n                                    annotation.data.handles.toolCenterMax[1]) /\n                                    2,\n                                (annotation.data.handles.toolCenterMin[2] +\n                                    annotation.data.handles.toolCenterMax[2]) /\n                                    2,\n                            ];\n                        }\n                    });\n                }\n            });\n            if (this._virtualAnnotations && this._virtualAnnotations.length > 0) {\n                this._virtualAnnotations.forEach((annotation) => {\n                    if (annotation.data &&\n                        annotation.data.handles &&\n                        annotation.data.orientation) {\n                        const orientation = annotation.data.orientation.toUpperCase();\n                        if (orientation === 'AXIAL') {\n                            annotation.data.handles.toolCenterMin = [\n                                planes[0].origin[0],\n                                planes[2].origin[1],\n                                annotation.data.handles.toolCenterMin[2],\n                            ];\n                            annotation.data.handles.toolCenterMax = [\n                                planes[1].origin[0],\n                                planes[3].origin[1],\n                                annotation.data.handles.toolCenterMax[2],\n                            ];\n                        }\n                        else if (orientation === 'CORONAL') {\n                            annotation.data.handles.toolCenterMin = [\n                                planes[0].origin[0],\n                                annotation.data.handles.toolCenterMin[1],\n                                planes[4].origin[2],\n                            ];\n                            annotation.data.handles.toolCenterMax = [\n                                planes[1].origin[0],\n                                annotation.data.handles.toolCenterMax[1],\n                                planes[5].origin[2],\n                            ];\n                        }\n                        else if (orientation === 'SAGITTAL') {\n                            annotation.data.handles.toolCenterMin = [\n                                annotation.data.handles.toolCenterMin[0],\n                                planes[2].origin[1],\n                                planes[4].origin[2],\n                            ];\n                            annotation.data.handles.toolCenterMax = [\n                                annotation.data.handles.toolCenterMax[0],\n                                planes[3].origin[1],\n                                planes[5].origin[2],\n                            ];\n                        }\n                        annotation.data.handles.toolCenter = [\n                            (annotation.data.handles.toolCenterMin[0] +\n                                annotation.data.handles.toolCenterMax[0]) /\n                                2,\n                            (annotation.data.handles.toolCenterMin[1] +\n                                annotation.data.handles.toolCenterMax[1]) /\n                                2,\n                            (annotation.data.handles.toolCenterMin[2] +\n                                annotation.data.handles.toolCenterMax[2]) /\n                                2,\n                        ];\n                    }\n                });\n            }\n            triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n        }\n    }\n    setToolCenter(toolCenter, handleType) {\n        if (handleType === 'min') {\n            this.toolCenterMin = [...toolCenter];\n        }\n        else if (handleType === 'max') {\n            this.toolCenterMax = [...toolCenter];\n        }\n        const viewportsInfo = this._getViewportsInfo();\n        triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const annotations = this._getAnnotations(enabledElement);\n        const filteredAnnotations = this.filterInteractableAnnotationsForElement(viewport.element, annotations);\n        if (!filteredAnnotations ||\n            filteredAnnotations.length === 0 ||\n            !filteredAnnotations[0]) {\n            return null;\n        }\n        const { data } = filteredAnnotations[0];\n        const viewportIdArray = [];\n        const referenceLines = data.referenceLines || [];\n        for (let i = 0; i < referenceLines.length; ++i) {\n            const otherViewport = referenceLines[i][0];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            if (!viewportControllable) {\n                continue;\n            }\n            viewportIdArray.push(otherViewport.id);\n            i++;\n        }\n        data.activeViewportIds = [...viewportIdArray];\n        data.handles.activeOperation = OPERATION.DRAG;\n        evt.preventDefault();\n        hideElementCursor(element);\n        this._activateModify(element);\n        return filteredAnnotations[0];\n    }\n    handleSelectedCallback(evt, annotation, handle, interactionType) {\n        this.toolSelectedCallback(evt, annotation, interactionType);\n    }\n    _unsubscribeToViewportNewVolumeSet(viewportsInfo) {\n        viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.removeEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _subscribeToViewportNewVolumeSet(viewports) {\n        viewports.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.addEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta) {\n        viewportsAnnotationsToUpdate.forEach((annotation) => {\n            this._applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta);\n        });\n    }\n    _applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta) {\n        const { data } = annotation;\n        const viewport = renderingEngine.getViewport(data.viewportId);\n        const camera = viewport.getCamera();\n        const normal = camera.viewPlaneNormal;\n        const dotProd = vtkMath.dot(delta, normal);\n        const projectedDelta = [...normal];\n        vtkMath.multiplyScalar(projectedDelta, dotProd);\n        if (Math.abs(projectedDelta[0]) > 1e-3 ||\n            Math.abs(projectedDelta[1]) > 1e-3 ||\n            Math.abs(projectedDelta[2]) > 1e-3) {\n            const newFocalPoint = [0, 0, 0];\n            const newPosition = [0, 0, 0];\n            vtkMath.add(camera.focalPoint, projectedDelta, newFocalPoint);\n            vtkMath.add(camera.position, projectedDelta, newPosition);\n            viewport.setCamera({\n                focalPoint: newFocalPoint,\n                position: newPosition,\n            });\n            viewport.render();\n        }\n    }\n    _pointNearTool(element, annotation, canvasCoords, proximity) {\n        const { data } = annotation;\n        const referenceLines = data.referenceLines;\n        const viewportIdArray = [];\n        if (referenceLines) {\n            for (let i = 0; i < referenceLines.length; ++i) {\n                const otherViewport = referenceLines[i][0];\n                const start1 = referenceLines[i][1];\n                const end1 = referenceLines[i][2];\n                const type = referenceLines[i][3];\n                const distance1 = lineSegment.distanceToPoint(start1, end1, [\n                    canvasCoords[0],\n                    canvasCoords[1],\n                ]);\n                if (distance1 <= proximity) {\n                    viewportIdArray.push(otherViewport.id);\n                    data.handles.activeOperation = 1;\n                    data.handles.activeType = type;\n                }\n            }\n        }\n        data.activeViewportIds = [...viewportIdArray];\n        this.editData = {\n            annotation,\n        };\n        return data.handles.activeOperation === 1 ? true : false;\n    }\n}\nVolumeCroppingControlTool.toolName = 'VolumeCroppingControl';\nexport default VolumeCroppingControlTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement, VolumeViewport, cache, utilities, } from '@cornerstonejs/core';\nconst DEFAULT_MULTIPLIER = 4;\nconst DEFAULT_IMAGE_DYNAMIC_RANGE = 1024;\nconst PT = 'PT';\nclass WindowLevelTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this._getImageDynamicRangeFromMiddleSlice = (scalarData, dimensions) => {\n            const middleSliceIndex = Math.floor(dimensions[2] / 2);\n            const frameLength = dimensions[0] * dimensions[1];\n            let bytesPerVoxel;\n            let TypedArrayConstructor;\n            if (scalarData instanceof Float32Array) {\n                bytesPerVoxel = 4;\n                TypedArrayConstructor = Float32Array;\n            }\n            else if (scalarData instanceof Uint8Array) {\n                bytesPerVoxel = 1;\n                TypedArrayConstructor = Uint8Array;\n            }\n            else if (scalarData instanceof Uint16Array) {\n                bytesPerVoxel = 2;\n                TypedArrayConstructor = Uint16Array;\n            }\n            else if (scalarData instanceof Int16Array) {\n                bytesPerVoxel = 2;\n                TypedArrayConstructor = Int16Array;\n            }\n            const buffer = scalarData.buffer;\n            const byteOffset = middleSliceIndex * frameLength * bytesPerVoxel;\n            const frame = new TypedArrayConstructor(buffer, byteOffset, frameLength);\n            const { max, min } = this._getMinMax(frame, frameLength);\n            return max - min;\n        };\n    }\n    touchDragCallback(evt) {\n        this.mouseDragCallback(evt);\n    }\n    mouseDragCallback(evt) {\n        const { element, deltaPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        let volumeId, lower, upper, modality, newRange, viewportsContainingVolumeUID;\n        let isPreScaled = false;\n        const properties = viewport.getProperties();\n        if (viewport instanceof VolumeViewport) {\n            volumeId = viewport.getVolumeId();\n            viewportsContainingVolumeUID =\n                utilities.getViewportsWithVolumeId(volumeId);\n            ({ lower, upper } = properties.voiRange);\n            const volume = cache.getVolume(volumeId);\n            if (!volume) {\n                throw new Error('Volume not found ' + volumeId);\n            }\n            modality = volume.metadata.Modality;\n            isPreScaled = volume.scaling && Object.keys(volume.scaling).length > 0;\n        }\n        else if (properties.voiRange) {\n            modality = viewport.modality;\n            ({ lower, upper } = properties.voiRange);\n            const { preScale = { scaled: false } } = viewport.getImageData?.() || {};\n            isPreScaled =\n                preScale.scaled && preScale.scalingParameters?.suvbw !== undefined;\n        }\n        else {\n            throw new Error('Viewport is not a valid type');\n        }\n        if (modality === PT && isPreScaled) {\n            newRange = this.getPTScaledNewRange({\n                deltaPointsCanvas: deltaPoints.canvas,\n                lower,\n                upper,\n                clientHeight: element.clientHeight,\n                isPreScaled,\n                viewport,\n                volumeId,\n            });\n        }\n        else {\n            newRange = this.getNewRange({\n                viewport,\n                deltaPointsCanvas: deltaPoints.canvas,\n                volumeId,\n                lower,\n                upper,\n            });\n        }\n        if (newRange.lower >= newRange.upper) {\n            return;\n        }\n        viewport.setProperties({\n            voiRange: newRange,\n        });\n        viewport.render();\n        if (viewport instanceof VolumeViewport) {\n            viewportsContainingVolumeUID.forEach((vp) => {\n                if (viewport !== vp) {\n                    vp.render();\n                }\n            });\n            return;\n        }\n    }\n    getPTScaledNewRange({ deltaPointsCanvas, lower, upper, clientHeight, viewport, volumeId, isPreScaled, }) {\n        let multiplier = DEFAULT_MULTIPLIER;\n        if (isPreScaled) {\n            multiplier = 5 / clientHeight;\n        }\n        else {\n            multiplier =\n                this._getMultiplierFromDynamicRange(viewport, volumeId) ||\n                    DEFAULT_MULTIPLIER;\n        }\n        const deltaY = deltaPointsCanvas[1];\n        const wcDelta = deltaY * multiplier;\n        upper -= wcDelta;\n        upper = isPreScaled ? Math.max(upper, 0.1) : upper;\n        return { lower, upper };\n    }\n    getNewRange({ viewport, deltaPointsCanvas, volumeId, lower, upper }) {\n        const multiplier = this._getMultiplierFromDynamicRange(viewport, volumeId) ||\n            DEFAULT_MULTIPLIER;\n        const wwDelta = deltaPointsCanvas[0] * multiplier;\n        const wcDelta = deltaPointsCanvas[1] * multiplier;\n        let { windowWidth, windowCenter } = utilities.windowLevel.toWindowLevel(lower, upper);\n        windowWidth += wwDelta;\n        windowCenter += wcDelta;\n        windowWidth = Math.max(windowWidth, 1);\n        const voiLutFunction = viewport.getProperties().VOILUTFunction;\n        return utilities.windowLevel.toLowHighRange(windowWidth, windowCenter, voiLutFunction);\n    }\n    _getMultiplierFromDynamicRange(viewport, volumeId) {\n        let imageDynamicRange;\n        if (volumeId) {\n            const imageVolume = cache.getVolume(volumeId);\n            const { voxelManager } = viewport.getImageData();\n            const middleSlicePixelData = voxelManager.getMiddleSliceData();\n            const calculatedDynamicRange = middleSlicePixelData.reduce((acc, pixel) => {\n                return [Math.min(acc[0], pixel), Math.max(acc[1], pixel)];\n            }, [Infinity, -Infinity]);\n            const BitsStored = imageVolume?.metadata?.BitsStored;\n            const metadataDynamicRange = BitsStored ? 2 ** BitsStored : Infinity;\n            const calculatedRange = calculatedDynamicRange[1] - calculatedDynamicRange[0];\n            imageDynamicRange = !Number.isFinite(calculatedRange)\n                ? metadataDynamicRange\n                : Math.min(calculatedRange, metadataDynamicRange);\n        }\n        else {\n            imageDynamicRange = this._getImageDynamicRangeFromViewport(viewport);\n        }\n        const ratio = imageDynamicRange / DEFAULT_IMAGE_DYNAMIC_RANGE;\n        return !Number.isFinite(ratio)\n            ? DEFAULT_IMAGE_DYNAMIC_RANGE\n            : ratio > 1\n                ? Math.round(ratio)\n                : ratio;\n    }\n    _getImageDynamicRangeFromViewport(viewport) {\n        const { imageData, voxelManager } = viewport.getImageData();\n        if (voxelManager?.getRange) {\n            const range = voxelManager.getRange();\n            return range[1] - range[0];\n        }\n        const dimensions = imageData.getDimensions();\n        if (imageData.getRange) {\n            const imageDataRange = imageData.getRange();\n            return imageDataRange[1] - imageDataRange[0];\n        }\n        let scalarData;\n        if (imageData.getScalarData) {\n            scalarData = imageData.getScalarData();\n        }\n        else {\n            scalarData = imageData.getPointData().getScalars().getData();\n        }\n        if (dimensions[2] !== 1) {\n            return this._getImageDynamicRangeFromMiddleSlice(scalarData, dimensions);\n        }\n        let range;\n        if (scalarData.getRange) {\n            range = scalarData.getRange();\n        }\n        else {\n            const { min, max } = this._getMinMax(scalarData, scalarData.length);\n            range = [min, max];\n        }\n        return range[1] - range[0];\n    }\n    _getMinMax(frame, frameLength) {\n        let min = Infinity;\n        let max = -Infinity;\n        for (let i = 0; i < frameLength; i++) {\n            const voxel = frame[i];\n            if (voxel < min) {\n                min = voxel;\n            }\n            if (voxel > max) {\n                max = voxel;\n            }\n        }\n        return { max, min };\n    }\n}\nWindowLevelTool.toolName = 'WindowLevel';\nexport default WindowLevelTool;\n","import { AnnotationTool } from './base';\nimport { getEnabledElement, utilities } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../stateManagement';\nimport { triggerAnnotationCompleted } from '../stateManagement/annotation/helpers/state';\nimport { drawRect as drawRectSvg } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { windowLevel } from '../utilities/voi';\nclass WindowLevelRegionTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            minWindowWidth: 10,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                    },\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender } = this.editData;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            removeAnnotation(annotation.annotationUID);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationCompleted(annotation);\n            this.applyWindowLevelRegion(annotation, element);\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            const { currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n            const worldPos = currentPoints.world;\n            const { points } = data.handles;\n            const DEFAULT_HANDLE_INDEX = 3;\n            points[DEFAULT_HANDLE_INDEX] = [...worldPos];\n            const bottomLeftCanvas = worldToCanvas(points[0]);\n            const topRightCanvas = worldToCanvas(points[3]);\n            const bottomRightCanvas = [\n                topRightCanvas[0],\n                bottomLeftCanvas[1],\n            ];\n            const topLeftCanvas = [\n                bottomLeftCanvas[0],\n                topRightCanvas[1],\n            ];\n            const bottomRightWorld = canvasToWorld(bottomRightCanvas);\n            const topLeftWorld = canvasToWorld(topLeftCanvas);\n            points[1] = bottomRightWorld;\n            points[2] = topLeftWorld;\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const dataId = `${annotationUID}-rect`;\n                const rectangleUID = '0';\n                drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n        this.applyWindowLevelRegion = (annotation, element) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const imageData = windowLevel.extractWindowLevelRegionToolData(viewport);\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const startCanvas = canvasCoordinates[0];\n            const endCanvas = canvasCoordinates[3];\n            let left = Math.min(startCanvas[0], endCanvas[0]);\n            let top = Math.min(startCanvas[1], endCanvas[1]);\n            let width = Math.abs(startCanvas[0] - endCanvas[0]);\n            let height = Math.abs(startCanvas[1] - endCanvas[1]);\n            left = utilities.clip(left, 0, imageData.width);\n            top = utilities.clip(top, 0, imageData.height);\n            width = Math.floor(Math.min(width, Math.abs(imageData.width - left)));\n            height = Math.floor(Math.min(height, Math.abs(imageData.height - top)));\n            const pixelLuminanceData = windowLevel.getLuminanceFromRegion(imageData, Math.round(left), Math.round(top), width, height);\n            const minMaxMean = windowLevel.calculateMinMaxMean(pixelLuminanceData, imageData.minPixelValue, imageData.maxPixelValue);\n            if (this.configuration.minWindowWidth === undefined) {\n                this.configuration.minWindowWidth = 10;\n            }\n            const windowWidth = Math.max(Math.abs(minMaxMean.max - minMaxMean.min), this.configuration.minWindowWidth);\n            const windowCenter = minMaxMean.mean;\n            const voiLutFunction = viewport.getProperties().VOILUTFunction;\n            const voiRange = utilities.windowLevel.toLowHighRange(windowWidth, windowCenter, voiLutFunction);\n            viewport.setProperties({ voiRange });\n            viewport.render();\n        };\n        this.cancel = () => {\n            return null;\n        };\n        this.isPointNearTool = () => {\n            return null;\n        };\n        this.toolSelectedCallback = () => {\n            return null;\n        };\n        this.handleSelectedCallback = () => {\n            return null;\n        };\n        this._activateModify = () => {\n            return null;\n        };\n        this._deactivateModify = () => {\n            return null;\n        };\n    }\n}\nWindowLevelRegionTool.toolName = 'WindowLevelRegion';\nexport default WindowLevelRegionTool;\n","function getLuminanceFromRegion(imageData, x, y, width, height) {\n    const luminance = [];\n    let index = 0;\n    const pixelData = imageData.scalarData;\n    let spIndex, row, column;\n    if (imageData.color) {\n        for (row = 0; row < height; row++) {\n            for (column = 0; column < width; column++) {\n                spIndex = ((row + y) * imageData.columns + (column + x)) * 4;\n                const red = pixelData[spIndex];\n                const green = pixelData[spIndex + 1];\n                const blue = pixelData[spIndex + 2];\n                luminance[index++] = 0.2126 * red + 0.7152 * green + 0.0722 * blue;\n            }\n        }\n    }\n    else {\n        for (row = 0; row < height; row++) {\n            for (column = 0; column < width; column++) {\n                spIndex = (row + y) * imageData.columns + (column + x);\n                luminance[index++] = pixelData[spIndex];\n            }\n        }\n    }\n    return luminance;\n}\nexport { getLuminanceFromRegion };\n","function calculateMinMaxMean(pixelLuminance, globalMin, globalMax) {\n    const numPixels = pixelLuminance.length;\n    let min = globalMax;\n    let max = globalMin;\n    let sum = 0;\n    if (numPixels < 2) {\n        return {\n            min,\n            max,\n            mean: (globalMin + globalMax) / 2,\n        };\n    }\n    for (let index = 0; index < numPixels; index++) {\n        const spv = pixelLuminance[index];\n        min = Math.min(min, spv);\n        max = Math.max(max, spv);\n        sum += spv;\n    }\n    return {\n        min,\n        max,\n        mean: sum / numPixels,\n    };\n}\nexport { calculateMinMaxMean };\n","import { getEnabledElementByIds, getEnabledElement, VolumeViewport, BaseVolumeViewport, utilities, } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nclass StackScrollTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            invert: false,\n            debounceIfNotLoaded: true,\n            loop: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.deltaY = 1;\n    }\n    mouseWheelCallback(evt) {\n        this._scroll(evt);\n    }\n    mouseDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    touchDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    _dragCallback(evt) {\n        this._scrollDrag(evt);\n    }\n    _scrollDrag(evt) {\n        const { deltaPoints, viewportId, renderingEngineId } = evt.detail;\n        const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n        const { debounceIfNotLoaded, invert, loop } = this.configuration;\n        const deltaPointY = deltaPoints.canvas[1];\n        let volumeId;\n        if (viewport instanceof VolumeViewport) {\n            volumeId = viewport.getVolumeId();\n        }\n        const pixelsPerImage = this._getPixelPerImage(viewport);\n        const deltaY = deltaPointY + this.deltaY;\n        if (!pixelsPerImage) {\n            return;\n        }\n        if (Math.abs(deltaY) >= pixelsPerImage) {\n            const imageIdIndexOffset = Math.round(deltaY / pixelsPerImage);\n            utilities.scroll(viewport, {\n                delta: invert ? -imageIdIndexOffset : imageIdIndexOffset,\n                volumeId,\n                debounceLoading: debounceIfNotLoaded,\n                loop: loop,\n            });\n            this.deltaY = deltaY % pixelsPerImage;\n        }\n        else {\n            this.deltaY = deltaY;\n        }\n    }\n    _scroll(evt) {\n        const { wheel, element } = evt.detail;\n        const { direction } = wheel;\n        const { invert } = this.configuration;\n        const { viewport } = getEnabledElement(element);\n        const delta = direction * (invert ? -1 : 1);\n        utilities.scroll(viewport, {\n            delta,\n            debounceLoading: this.configuration.debounceIfNotLoaded,\n            loop: this.configuration.loop,\n            volumeId: viewport instanceof BaseVolumeViewport\n                ? viewport.getVolumeId()\n                : undefined,\n            scrollSlabs: this.configuration.scrollSlabs,\n        });\n    }\n    _getPixelPerImage(viewport) {\n        const { element } = viewport;\n        const numberOfSlices = viewport.getNumberOfSlices();\n        return Math.max(2, element.offsetHeight / Math.max(numberOfSlices, 8));\n    }\n}\nStackScrollTool.toolName = 'StackScroll';\nexport default StackScrollTool;\n","import { BaseVolumeViewport, getEnabledElement } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { BaseTool } from './base';\nimport angleBetweenLines from '../utilities/math/angle/angleBetweenLines';\nclass PlanarRotateTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseWheelCallback = (evt) => {\n            const { element, wheel } = evt.detail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { invert } = this.configuration;\n            const angle = wheel.direction * 10 * (invert ? -1 : 1);\n            this.setAngle(viewport, angle);\n        };\n        this.touchDragCallback = this._dragCallback.bind(this);\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    _dragCallback(evt) {\n        const { element, currentPoints, startPoints } = evt.detail;\n        const currentPointWorld = currentPoints.world;\n        const startPointWorld = startPoints.world;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const width = element.clientWidth;\n        const height = element.clientHeight;\n        const centerCanvas = [width * 0.5, height * 0.5];\n        const centerWorld = viewport.canvasToWorld(centerCanvas);\n        let angle = angleBetweenLines([startPointWorld, centerWorld], [centerWorld, currentPointWorld]);\n        const { viewPlaneNormal } = camera;\n        const v1 = vec3.sub(vec3.create(), centerWorld, startPointWorld);\n        const v2 = vec3.sub(vec3.create(), centerWorld, currentPointWorld);\n        const cross = vec3.cross(vec3.create(), v1, v2);\n        if (vec3.dot(viewPlaneNormal, cross) > 0) {\n            angle = -angle;\n        }\n        if (Number.isNaN(angle)) {\n            return;\n        }\n        this.setAngle(viewport, angle);\n    }\n    setAngle(viewport, angle) {\n        const { viewPlaneNormal, viewUp } = viewport.getCamera();\n        if (viewport instanceof BaseVolumeViewport) {\n            const rotAngle = (((angle + 360) % 360) * Math.PI) / 180;\n            const rotMat = mat4.identity(new Float32Array(16));\n            mat4.rotate(rotMat, rotMat, rotAngle, viewPlaneNormal);\n            const rotatedViewUp = vec3.transformMat4(vec3.create(), viewUp, rotMat);\n            viewport.setCamera({ viewUp: rotatedViewUp });\n        }\n        else {\n            const { rotation } = viewport.getViewPresentation();\n            viewport.setViewPresentation({\n                rotation: (rotation + angle + 360) % 360,\n            });\n        }\n        viewport.render();\n    }\n}\nPlanarRotateTool.toolName = 'PlanarRotate';\nexport default PlanarRotateTool;\n","import { vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { getConfiguration } from '@cornerstonejs/core';\nimport { Enums, getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { Events } from '../enums';\nclass ZoomTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            zoomToCenter: false,\n            minZoomScale: 0.001,\n            maxZoomScale: 3000,\n            pinchToZoom: true,\n            pan: true,\n            invert: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const camera = enabledElement.viewport.getCamera();\n            const { focalPoint } = camera;\n            this.initialMousePosWorld = worldPos;\n            let dirVec = vec3.fromValues(focalPoint[0] - worldPos[0], focalPoint[1] - worldPos[1], focalPoint[2] - worldPos[2]);\n            dirVec = vec3.normalize(vec3.create(), dirVec);\n            this.dirVec = dirVec;\n            return false;\n        };\n        this.preTouchStartCallback = (evt) => {\n            if (!this.configuration.pinchToZoom) {\n                return this.preMouseDownCallback(evt);\n            }\n        };\n        this._dragParallelProjection = (evt, viewport, camera, pinch = false) => {\n            const { element, deltaPoints } = evt.detail;\n            const deltaY = pinch\n                ? evt.detail.deltaDistance.canvas\n                : deltaPoints.canvas[1];\n            const size = [element.clientWidth, element.clientHeight];\n            const { parallelScale, focalPoint, position } = camera;\n            const zoomScale = 5 / size[1];\n            const k = deltaY * zoomScale * (this.configuration.invert ? -1 : 1);\n            const parallelScaleToSet = (1.0 - k) * parallelScale;\n            let focalPointToSet = focalPoint;\n            let positionToSet = position;\n            if (!this.configuration.zoomToCenter) {\n                const distanceToCanvasCenter = vec3.distance(focalPoint, this.initialMousePosWorld);\n                positionToSet = vec3.scaleAndAdd(vec3.create(), position, this.dirVec, -distanceToCanvasCenter * k);\n                focalPointToSet = vec3.scaleAndAdd(vec3.create(), focalPoint, this.dirVec, -distanceToCanvasCenter * k);\n            }\n            const imageData = viewport.getImageData();\n            let spacing = [1, 1, 1];\n            let cappedParallelScale = parallelScaleToSet;\n            let thresholdExceeded = false;\n            if (imageData) {\n                spacing = imageData.spacing;\n                const { dimensions } = imageData;\n                const imageWidth = dimensions[0] * spacing[0];\n                const imageHeight = dimensions[1] * spacing[1];\n                const canvasAspect = size[0] / size[1];\n                const insetImageMultiplier = getConfiguration().rendering\n                    ?.useLegacyCameraFOV\n                    ? 1.1\n                    : 1;\n                const displayArea = viewport.options?.displayArea;\n                const imageAreaScaleX = displayArea?.imageArea?.[0] ?? insetImageMultiplier;\n                const imageAreaScaleY = displayArea?.imageArea?.[1] ?? insetImageMultiplier;\n                const scaledImageWidth = imageWidth * imageAreaScaleX;\n                const scaledImageHeight = imageHeight * imageAreaScaleY;\n                const scaledImageAspect = scaledImageWidth / scaledImageHeight;\n                let minParallelScaleRequired;\n                if (scaledImageAspect > canvasAspect) {\n                    minParallelScaleRequired = (scaledImageWidth / canvasAspect) * 0.5;\n                }\n                else {\n                    minParallelScaleRequired = scaledImageHeight * 0.5;\n                }\n                const { minZoomScale, maxZoomScale } = this.configuration;\n                const minScaleInWorld = minParallelScaleRequired / maxZoomScale;\n                const maxScaleInWorld = minParallelScaleRequired / minZoomScale;\n                if (parallelScaleToSet < minScaleInWorld) {\n                    cappedParallelScale = minScaleInWorld;\n                    thresholdExceeded = true;\n                }\n                else if (parallelScaleToSet > maxScaleInWorld) {\n                    cappedParallelScale = maxScaleInWorld;\n                    thresholdExceeded = true;\n                }\n            }\n            viewport.setCamera({\n                parallelScale: cappedParallelScale,\n                focalPoint: thresholdExceeded ? focalPoint : focalPointToSet,\n                position: thresholdExceeded ? position : positionToSet,\n            });\n        };\n        this._dragPerspectiveProjection = (evt, viewport, camera, pinch = false) => {\n            const { element, deltaPoints } = evt.detail;\n            const deltaY = pinch\n                ? evt.detail.deltaDistance.canvas\n                : deltaPoints.canvas[1];\n            const size = [element.clientWidth, element.clientHeight];\n            const { position, focalPoint, viewPlaneNormal } = camera;\n            const distance = vtkMath.distance2BetweenPoints(position, focalPoint);\n            const zoomScale = Math.sqrt(distance) / size[1];\n            const directionOfProjection = [\n                -viewPlaneNormal[0],\n                -viewPlaneNormal[1],\n                -viewPlaneNormal[2],\n            ];\n            const k = this.configuration.invert\n                ? deltaY / zoomScale\n                : deltaY * zoomScale;\n            let tmp = k * directionOfProjection[0];\n            position[0] += tmp;\n            focalPoint[0] += tmp;\n            tmp = k * directionOfProjection[1];\n            position[1] += tmp;\n            focalPoint[1] += tmp;\n            tmp = k * directionOfProjection[2];\n            position[2] += tmp;\n            focalPoint[2] += tmp;\n            viewport.setCamera({ position, focalPoint });\n        };\n        this.initialMousePosWorld = [0, 0, 0];\n        this.dirVec = [0, 0, 0];\n        if (this.configuration.pinchToZoom) {\n            this.touchDragCallback = this._pinchCallback.bind(this);\n        }\n        else {\n            this.touchDragCallback = this._dragCallback.bind(this);\n        }\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    mouseWheelCallback(evt) {\n        this._zoom(evt);\n    }\n    _pinchCallback(evt) {\n        const pointsList = evt.detail\n            .currentPointsList;\n        if (pointsList.length > 1) {\n            const { element, currentPoints } = evt.detail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const worldPos = currentPoints.world;\n            const { focalPoint } = camera;\n            this.initialMousePosWorld = worldPos;\n            let dirVec = vec3.fromValues(focalPoint[0] - worldPos[0], focalPoint[1] - worldPos[1], focalPoint[2] - worldPos[2]);\n            dirVec = vec3.normalize(vec3.create(), dirVec);\n            this.dirVec = dirVec;\n            if (camera.parallelProjection) {\n                this._dragParallelProjection(evt, viewport, camera, true);\n            }\n            else {\n                this._dragPerspectiveProjection(evt, viewport, camera, true);\n            }\n            viewport.render();\n        }\n        if (this.configuration.pan) {\n            this._panCallback(evt);\n        }\n    }\n    _dragCallback(evt) {\n        const { element } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        if (camera.parallelProjection) {\n            this._dragParallelProjection(evt, viewport, camera);\n        }\n        else {\n            this._dragPerspectiveProjection(evt, viewport, camera);\n        }\n        viewport.render();\n    }\n    _zoom(evt) {\n        const { element, points } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const wheelData = evt.detail.wheel;\n        const direction = wheelData.direction;\n        const eventDetails = {\n            detail: {\n                element,\n                eventName: Events.MOUSE_WHEEL,\n                renderingEngineId: enabledElement.renderingEngineId,\n                viewportId: viewport.id,\n                camera: {},\n                deltaPoints: {\n                    page: points.page,\n                    client: points.client,\n                    world: points.world,\n                    canvas: [0, -direction * 5],\n                },\n                startPoints: points,\n                lastPoints: points,\n                currentPoints: points,\n            },\n        };\n        if (viewport.type === Enums.ViewportType.STACK) {\n            this.preMouseDownCallback(eventDetails);\n        }\n        this._dragCallback(eventDetails);\n    }\n    _panCallback(evt) {\n        const { element, deltaPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const deltaPointsWorld = deltaPoints.world;\n        const camera = enabledElement.viewport.getCamera();\n        const { focalPoint, position } = camera;\n        const updatedPosition = [\n            position[0] - deltaPointsWorld[0],\n            position[1] - deltaPointsWorld[1],\n            position[2] - deltaPointsWorld[2],\n        ];\n        const updatedFocalPoint = [\n            focalPoint[0] - deltaPointsWorld[0],\n            focalPoint[1] - deltaPointsWorld[1],\n            focalPoint[2] - deltaPointsWorld[2],\n        ];\n        enabledElement.viewport.setCamera({\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n        enabledElement.viewport.render();\n    }\n}\nZoomTool.toolName = 'Zoom';\nexport default ZoomTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement, VolumeViewport } from '@cornerstonejs/core';\nimport { utilities } from '@cornerstonejs/core';\nimport { getPointInLineOfSightWithCriteria } from '../utilities/planar';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nclass MIPJumpToClickTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            targetViewportIds: [],\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n    }\n    mouseClickCallback(evt) {\n        const { element, currentPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        const volumeId = viewport.getVolumeId();\n        if (!volumeId) {\n            throw new Error(`MIPJumpToClickTool: targetId is not a volumeId, you should only use MIPJumpToClickTool with a volumeId as the targetId`);\n        }\n        let maxIntensity = -Infinity;\n        const maxFn = (intensity, point) => {\n            if (intensity > maxIntensity) {\n                maxIntensity = intensity;\n                return point;\n            }\n        };\n        const brightestPoint = getPointInLineOfSightWithCriteria(viewport, currentPoints.world, volumeId, maxFn);\n        if (!brightestPoint || !brightestPoint.length) {\n            return;\n        }\n        const { targetViewportIds, toolGroupId } = this.configuration;\n        const viewports = renderingEngine.getViewports().filter((vp) => {\n            if (targetViewportIds?.indexOf(vp.id) >= 0) {\n                return true;\n            }\n            const foundToolGroup = getToolGroupForViewport(vp.id, renderingEngine.id);\n            if (toolGroupId && toolGroupId === foundToolGroup?.id) {\n                return true;\n            }\n            return false;\n        });\n        viewports.forEach((viewport) => {\n            if (viewport instanceof VolumeViewport) {\n                viewport.jumpToWorld(brightestPoint);\n            }\n            else {\n                console.warn('Cannot jump to specified world coordinates for a viewport that is not a VolumeViewport');\n            }\n        });\n    }\n}\nMIPJumpToClickTool.toolName = 'MIPJumpToClickTool';\nexport default MIPJumpToClickTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport vtkMatrixBuilder from '@kitware/vtk.js/Common/Core/MatrixBuilder';\nimport { AnnotationTool } from './base';\nimport { getRenderingEngine } from '@cornerstonejs/core';\nimport { getEnabledElementByIds, getEnabledElement, utilities as csUtils, Enums, CONSTANTS, triggerEvent, eventTarget, } from '@cornerstonejs/core';\nimport { getToolGroup, getToolGroupForViewport, } from '../store/ToolGroupManager';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, drawLine as drawLineSvg, } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport liangBarksyClip from '../utilities/math/vec2/liangBarksyClip';\nimport * as lineSegment from '../utilities/math/line';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nconst { RENDERING_DEFAULTS } = CONSTANTS;\nfunction defaultReferenceLineColor() {\n    return 'rgb(0, 200, 0)';\n}\nfunction defaultReferenceLineControllable() {\n    return true;\n}\nfunction defaultReferenceLineDraggableRotatable() {\n    return true;\n}\nfunction defaultReferenceLineSlabThicknessControlsOn() {\n    return true;\n}\nconst OPERATION = {\n    DRAG: 1,\n    ROTATE: 2,\n    SLAB: 3,\n};\nclass CrosshairsTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse'],\n        configuration: {\n            shadow: true,\n            viewportIndicators: false,\n            viewportIndicatorsConfig: {\n                radius: 5,\n                x: null,\n                y: null,\n            },\n            autoPan: {\n                enabled: false,\n                panSize: 10,\n            },\n            handleRadius: 3,\n            enableHDPIHandles: false,\n            referenceLinesCenterGapRadius: 20,\n            referenceLinesCenterGapRatio: null,\n            filterActorUIDsToSetSlabThickness: [],\n            slabThicknessBlendMode: Enums.BlendModes.MAXIMUM_INTENSITY_BLEND,\n            mobile: {\n                enabled: false,\n                opacity: 0.8,\n                handleRadius: 9,\n                referenceLinesCenterGapRatio: 0.05,\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.toolCenter = [0, 0, 0];\n        this.initializeViewport = ({ renderingEngineId, viewportId, }) => {\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (!enabledElement) {\n                return;\n            }\n            const { FrameOfReferenceUID, viewport } = enabledElement;\n            const { element } = viewport;\n            const { position, focalPoint, viewPlaneNormal } = viewport.getCamera();\n            let annotations = this._getAnnotations(enabledElement);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (annotations?.length) {\n                removeAnnotation(annotations[0].annotationUID);\n            }\n            const annotation = {\n                highlighted: false,\n                metadata: {\n                    cameraPosition: [...position],\n                    cameraFocalPoint: [...focalPoint],\n                    FrameOfReferenceUID,\n                    toolName: this.getToolName(),\n                },\n                data: {\n                    handles: {\n                        rotationPoints: [],\n                        slabThicknessPoints: [],\n                        toolCenter: this.toolCenter,\n                    },\n                    activeOperation: null,\n                    activeViewportIds: [],\n                    viewportId,\n                },\n            };\n            addAnnotation(annotation, element);\n            return {\n                normal: viewPlaneNormal,\n                point: viewport.canvasToWorld([\n                    viewport.canvas.clientWidth / 2,\n                    viewport.canvas.clientHeight / 2,\n                ]),\n            };\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.resetCrosshairs = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            for (const viewportInfo of viewportsInfo) {\n                const { viewportId, renderingEngineId } = viewportInfo;\n                const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n                const viewport = enabledElement.viewport;\n                const resetPan = true;\n                const resetZoom = true;\n                const resetToCenter = true;\n                const resetRotation = true;\n                const suppressEvents = true;\n                viewport.resetCamera({\n                    resetPan,\n                    resetZoom,\n                    resetToCenter,\n                    resetRotation,\n                    suppressEvents,\n                });\n                viewport.resetSlabThickness();\n                const { element } = viewport;\n                let annotations = this._getAnnotations(enabledElement);\n                annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n                if (annotations.length) {\n                    removeAnnotation(annotations[0].annotationUID);\n                }\n                viewport.render();\n            }\n            this._computeToolCenter(viewportsInfo);\n        };\n        this.computeToolCenter = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            this._computeToolCenter(viewportsInfo);\n        };\n        this._computeToolCenter = (viewportsInfo) => {\n            if (!viewportsInfo.length || viewportsInfo.length === 1) {\n                console.warn('For crosshairs to operate, at least two viewports must be given.');\n                return;\n            }\n            const [firstViewport, secondViewport, thirdViewport] = viewportsInfo;\n            const { normal: normal1, point: point1 } = this.initializeViewport(firstViewport);\n            const { normal: normal2, point: point2 } = this.initializeViewport(secondViewport);\n            let normal3 = [0, 0, 0];\n            let point3 = vec3.create();\n            if (thirdViewport) {\n                ({ normal: normal3, point: point3 } =\n                    this.initializeViewport(thirdViewport));\n            }\n            else {\n                vec3.add(point3, point1, point2);\n                vec3.scale(point3, point3, 0.5);\n                vec3.cross(normal3, normal1, normal2);\n            }\n            const firstPlane = csUtils.planar.planeEquation(normal1, point1);\n            const secondPlane = csUtils.planar.planeEquation(normal2, point2);\n            const thirdPlane = csUtils.planar.planeEquation(normal3, point3);\n            const toolCenter = csUtils.planar.threePlaneIntersection(firstPlane, secondPlane, thirdPlane);\n            this.setToolCenter(toolCenter);\n        };\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const jumpWorld = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this._jump(enabledElement, jumpWorld);\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredAnnotations = this.filterInteractableAnnotationsForElement(viewport.element, annotations);\n            const { data } = filteredAnnotations[0];\n            const { rotationPoints } = data.handles;\n            const viewportIdArray = [];\n            for (let i = 0; i < rotationPoints.length - 1; ++i) {\n                const otherViewport = rotationPoints[i][1];\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                if (!viewportControllable || !viewportDraggableRotatable) {\n                    continue;\n                }\n                viewportIdArray.push(otherViewport.id);\n                i++;\n            }\n            data.activeViewportIds = [...viewportIdArray];\n            data.handles.activeOperation = OPERATION.DRAG;\n            evt.preventDefault();\n            hideElementCursor(element);\n            this._activateModify(element);\n            return filteredAnnotations[0];\n        };\n        this.cancel = () => {\n            console.log('Not implemented yet');\n        };\n        this.handleSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            if (this._pointNearTool(element, annotation, canvasCoords, 6)) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.onCameraModified = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            const viewport = enabledElement.viewport;\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!viewportAnnotation) {\n                return;\n            }\n            const currentCamera = viewport.getCamera();\n            const oldCameraPosition = viewportAnnotation.metadata.cameraPosition;\n            const deltaCameraPosition = [0, 0, 0];\n            vtkMath.subtract(currentCamera.position, oldCameraPosition, deltaCameraPosition);\n            const oldCameraFocalPoint = viewportAnnotation.metadata.cameraFocalPoint;\n            const deltaCameraFocalPoint = [0, 0, 0];\n            vtkMath.subtract(currentCamera.focalPoint, oldCameraFocalPoint, deltaCameraFocalPoint);\n            viewportAnnotation.metadata.cameraPosition = [...currentCamera.position];\n            viewportAnnotation.metadata.cameraFocalPoint = [\n                ...currentCamera.focalPoint,\n            ];\n            const viewportControllable = this._getReferenceLineControllable(viewport.id);\n            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(viewport.id);\n            if (!csUtils.isEqual(currentCamera.position, oldCameraPosition, 1e-3) &&\n                viewportControllable &&\n                viewportDraggableRotatable) {\n                let isRotation = false;\n                const cameraModifiedSameForPosAndFocalPoint = csUtils.isEqual(deltaCameraPosition, deltaCameraFocalPoint, 1e-3);\n                if (!cameraModifiedSameForPosAndFocalPoint) {\n                    isRotation = true;\n                }\n                const cameraModifiedInPlane = Math.abs(vtkMath.dot(deltaCameraPosition, currentCamera.viewPlaneNormal)) < 1e-2;\n                if (!isRotation && !cameraModifiedInPlane) {\n                    this.toolCenter[0] += deltaCameraPosition[0];\n                    this.toolCenter[1] += deltaCameraPosition[1];\n                    this.toolCenter[2] += deltaCameraPosition[2];\n                    triggerEvent(eventTarget, Events.CROSSHAIR_TOOL_CENTER_CHANGED, {\n                        toolGroupId: this.toolGroupId,\n                        toolCenter: this.toolCenter,\n                    });\n                }\n            }\n            if (this.configuration.autoPan?.enabled) {\n                const toolGroup = getToolGroupForViewport(viewport.id, renderingEngine.id);\n                const otherViewportIds = toolGroup\n                    .getViewportIds()\n                    .filter((id) => id !== viewport.id);\n                otherViewportIds.forEach((viewportId) => {\n                    this._autoPanViewportIfNecessary(viewportId, renderingEngine);\n                });\n            }\n            const requireSameOrientation = false;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), requireSameOrientation);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.onResetCamera = (evt) => {\n            this.resetCrosshairs();\n        };\n        this.mouseMoveCallback = (evt, filteredToolAnnotations) => {\n            const { element, currentPoints } = evt.detail;\n            const canvasCoords = currentPoints.canvas;\n            let imageNeedsUpdate = false;\n            for (let i = 0; i < filteredToolAnnotations.length; i++) {\n                const annotation = filteredToolAnnotations[i];\n                if (isAnnotationLocked(annotation.annotationUID)) {\n                    continue;\n                }\n                const { data, highlighted } = annotation;\n                if (!data.handles) {\n                    continue;\n                }\n                const previousActiveOperation = data.handles.activeOperation;\n                const previousActiveViewportIds = data.activeViewportIds && data.activeViewportIds.length > 0\n                    ? [...data.activeViewportIds]\n                    : [];\n                data.activeViewportIds = [];\n                data.handles.activeOperation = null;\n                const handleNearImagePoint = this.getHandleNearImagePoint(element, annotation, canvasCoords, 6);\n                let near = false;\n                if (handleNearImagePoint) {\n                    near = true;\n                }\n                else {\n                    near = this._pointNearTool(element, annotation, canvasCoords, 6);\n                }\n                const nearToolAndNotMarkedActive = near && !highlighted;\n                const notNearToolAndMarkedActive = !near && highlighted;\n                if (nearToolAndNotMarkedActive || notNearToolAndMarkedActive) {\n                    annotation.highlighted = !highlighted;\n                    imageNeedsUpdate = true;\n                }\n                else if (data.handles.activeOperation !== previousActiveOperation ||\n                    !this._areViewportIdArraysEqual(data.activeViewportIds, previousActiveViewportIds)) {\n                    imageNeedsUpdate = true;\n                }\n            }\n            return imageNeedsUpdate;\n        };\n        this.filterInteractableAnnotationsForElement = (element, annotations) => {\n            if (!annotations || !annotations.length) {\n                return [];\n            }\n            const enabledElement = getEnabledElement(element);\n            const { viewportId } = enabledElement;\n            const viewportUIDSpecificCrosshairs = annotations.filter((annotation) => annotation.data.viewportId === viewportId);\n            return viewportUIDSpecificCrosshairs;\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport, renderingEngine } = enabledElement;\n            const { element } = viewport;\n            const annotations = this._getAnnotations(enabledElement);\n            const camera = viewport.getCamera();\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!annotations?.length || !viewportAnnotation?.data) {\n                return renderStatus;\n            }\n            const annotationUID = viewportAnnotation.annotationUID;\n            const { clientWidth, clientHeight } = viewport.canvas;\n            const canvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n            const canvasMinDimensionLength = Math.min(clientWidth, clientHeight);\n            const data = viewportAnnotation.data;\n            const crosshairCenterCanvas = viewport.worldToCanvas(this.toolCenter);\n            const otherViewportAnnotations = this._filterAnnotationsByUniqueViewportOrientations(enabledElement, annotations);\n            const referenceLines = [];\n            const canvasBox = [0, 0, clientWidth, clientHeight];\n            otherViewportAnnotations.forEach((annotation) => {\n                const { data } = annotation;\n                data.handles.toolCenter = this.toolCenter;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                const otherViewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n                const { clientWidth, clientHeight } = otherViewport.canvas;\n                const otherCanvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n                const otherCanvasCenter = [\n                    clientWidth * 0.5,\n                    clientHeight * 0.5,\n                ];\n                const otherViewportCenterWorld = otherViewport.canvasToWorld(otherCanvasCenter);\n                const direction = [0, 0, 0];\n                vtkMath.cross(camera.viewPlaneNormal, otherCamera.viewPlaneNormal, direction);\n                vtkMath.normalize(direction);\n                vtkMath.multiplyScalar(direction, otherCanvasDiagonalLength);\n                const pointWorld0 = [0, 0, 0];\n                vtkMath.add(otherViewportCenterWorld, direction, pointWorld0);\n                const pointWorld1 = [0, 0, 0];\n                vtkMath.subtract(otherViewportCenterWorld, direction, pointWorld1);\n                const pointCanvas0 = viewport.worldToCanvas(pointWorld0);\n                const otherViewportCenterCanvas = viewport.worldToCanvas(otherViewportCenterWorld);\n                const canvasUnitVectorFromCenter = vec2.create();\n                vec2.subtract(canvasUnitVectorFromCenter, pointCanvas0, otherViewportCenterCanvas);\n                vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n                const canvasVectorFromCenterLong = vec2.create();\n                vec2.scale(canvasVectorFromCenterLong, canvasUnitVectorFromCenter, canvasDiagonalLength * 100);\n                const canvasVectorFromCenterMid = vec2.create();\n                vec2.scale(canvasVectorFromCenterMid, canvasUnitVectorFromCenter, canvasMinDimensionLength * 0.4);\n                const canvasVectorFromCenterShort = vec2.create();\n                vec2.scale(canvasVectorFromCenterShort, canvasUnitVectorFromCenter, canvasMinDimensionLength * 0.2);\n                const canvasVectorFromCenterStart = vec2.create();\n                const mobileConfig = this.configuration.mobile;\n                const { referenceLinesCenterGapRatio } = mobileConfig?.enabled\n                    ? mobileConfig\n                    : this.configuration;\n                const centerGap = referenceLinesCenterGapRatio > 0\n                    ? canvasMinDimensionLength * referenceLinesCenterGapRatio\n                    : this.configuration.referenceLinesCenterGapRadius;\n                vec2.scale(canvasVectorFromCenterStart, canvasUnitVectorFromCenter, otherViewportAnnotations.length === 2 ? centerGap : 0);\n                const refLinePointOne = vec2.create();\n                const refLinePointTwo = vec2.create();\n                const refLinePointThree = vec2.create();\n                const refLinePointFour = vec2.create();\n                let refLinesCenter = vec2.clone(crosshairCenterCanvas);\n                if (!otherViewportDraggableRotatable || !otherViewportControllable) {\n                    refLinesCenter = vec2.clone(otherViewportCenterCanvas);\n                }\n                vec2.add(refLinePointOne, refLinesCenter, canvasVectorFromCenterStart);\n                vec2.add(refLinePointTwo, refLinesCenter, canvasVectorFromCenterLong);\n                vec2.subtract(refLinePointThree, refLinesCenter, canvasVectorFromCenterStart);\n                vec2.subtract(refLinePointFour, refLinesCenter, canvasVectorFromCenterLong);\n                liangBarksyClip(refLinePointOne, refLinePointTwo, canvasBox);\n                liangBarksyClip(refLinePointThree, refLinePointFour, canvasBox);\n                const rotHandleOne = vec2.create();\n                vec2.subtract(rotHandleOne, crosshairCenterCanvas, canvasVectorFromCenterMid);\n                const rotHandleTwo = vec2.create();\n                vec2.add(rotHandleTwo, crosshairCenterCanvas, canvasVectorFromCenterMid);\n                let stHandlesCenterCanvas = vec2.clone(crosshairCenterCanvas);\n                if (!otherViewportDraggableRotatable &&\n                    otherViewportSlabThicknessControlsOn) {\n                    stHandlesCenterCanvas = vec2.clone(otherViewportCenterCanvas);\n                }\n                let stHandlesCenterWorld = [...this.toolCenter];\n                if (!otherViewportDraggableRotatable &&\n                    otherViewportSlabThicknessControlsOn) {\n                    stHandlesCenterWorld = [...otherViewportCenterWorld];\n                }\n                const worldUnitVectorFromCenter = [0, 0, 0];\n                vtkMath.subtract(pointWorld0, pointWorld1, worldUnitVectorFromCenter);\n                vtkMath.normalize(worldUnitVectorFromCenter);\n                const { viewPlaneNormal } = camera;\n                const { matrix } = vtkMatrixBuilder\n                    .buildFromDegree()\n                    .rotate(90, viewPlaneNormal);\n                const worldUnitOrthoVectorFromCenter = [0, 0, 0];\n                vec3.transformMat4(worldUnitOrthoVectorFromCenter, worldUnitVectorFromCenter, matrix);\n                const slabThicknessValue = otherViewport.getSlabThickness();\n                const worldOrthoVectorFromCenter = [\n                    ...worldUnitOrthoVectorFromCenter,\n                ];\n                vtkMath.multiplyScalar(worldOrthoVectorFromCenter, slabThicknessValue);\n                const worldVerticalRefPoint = [0, 0, 0];\n                vtkMath.add(stHandlesCenterWorld, worldOrthoVectorFromCenter, worldVerticalRefPoint);\n                const canvasVerticalRefPoint = viewport.worldToCanvas(worldVerticalRefPoint);\n                const canvasOrthoVectorFromCenter = vec2.create();\n                vec2.subtract(canvasOrthoVectorFromCenter, stHandlesCenterCanvas, canvasVerticalRefPoint);\n                const stLinePointOne = vec2.create();\n                vec2.subtract(stLinePointOne, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.add(stLinePointOne, stLinePointOne, canvasOrthoVectorFromCenter);\n                const stLinePointTwo = vec2.create();\n                vec2.add(stLinePointTwo, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.add(stLinePointTwo, stLinePointTwo, canvasOrthoVectorFromCenter);\n                liangBarksyClip(stLinePointOne, stLinePointTwo, canvasBox);\n                const stLinePointThree = vec2.create();\n                vec2.add(stLinePointThree, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.subtract(stLinePointThree, stLinePointThree, canvasOrthoVectorFromCenter);\n                const stLinePointFour = vec2.create();\n                vec2.subtract(stLinePointFour, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.subtract(stLinePointFour, stLinePointFour, canvasOrthoVectorFromCenter);\n                liangBarksyClip(stLinePointThree, stLinePointFour, canvasBox);\n                const stHandleOne = vec2.create();\n                const stHandleTwo = vec2.create();\n                const stHandleThree = vec2.create();\n                const stHandleFour = vec2.create();\n                vec2.subtract(stHandleOne, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.add(stHandleOne, stHandleOne, canvasOrthoVectorFromCenter);\n                vec2.add(stHandleTwo, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.add(stHandleTwo, stHandleTwo, canvasOrthoVectorFromCenter);\n                vec2.subtract(stHandleThree, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.subtract(stHandleThree, stHandleThree, canvasOrthoVectorFromCenter);\n                vec2.add(stHandleFour, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.subtract(stHandleFour, stHandleFour, canvasOrthoVectorFromCenter);\n                referenceLines.push([\n                    otherViewport,\n                    refLinePointOne,\n                    refLinePointTwo,\n                    refLinePointThree,\n                    refLinePointFour,\n                    stLinePointOne,\n                    stLinePointTwo,\n                    stLinePointThree,\n                    stLinePointFour,\n                    rotHandleOne,\n                    rotHandleTwo,\n                    stHandleOne,\n                    stHandleTwo,\n                    stHandleThree,\n                    stHandleFour,\n                ]);\n            });\n            const newRtpoints = [];\n            const newStpoints = [];\n            const viewportColor = this._getReferenceLineColor(viewport.id);\n            const color = viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n            referenceLines.forEach((line, lineIndex) => {\n                const otherViewport = line[0];\n                const viewportColor = this._getReferenceLineColor(otherViewport.id);\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id) ||\n                    this.configuration.mobile?.enabled;\n                const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id) ||\n                    this.configuration.mobile?.enabled;\n                const selectedViewportId = data.activeViewportIds.find((id) => id === otherViewport.id);\n                let color = viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n                let lineWidth = 1;\n                const lineActive = data.handles.activeOperation !== null &&\n                    data.handles.activeOperation === OPERATION.DRAG &&\n                    selectedViewportId;\n                if (lineActive) {\n                    lineWidth = 2.5;\n                }\n                let lineUID = `${lineIndex}`;\n                if (viewportControllable && viewportDraggableRotatable) {\n                    lineUID = `${lineIndex}One`;\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[1], line[2], {\n                        color,\n                        lineWidth,\n                    });\n                    lineUID = `${lineIndex}Two`;\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[3], line[4], {\n                        color,\n                        lineWidth,\n                    });\n                }\n                else {\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[2], line[4], {\n                        color,\n                        lineWidth,\n                    });\n                }\n                if (viewportControllable) {\n                    color =\n                        viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n                    const rotHandlesActive = data.handles.activeOperation === OPERATION.ROTATE;\n                    const rotationHandles = [line[9], line[10]];\n                    const rotHandleWorldOne = [\n                        viewport.canvasToWorld(line[9]),\n                        otherViewport,\n                        line[1],\n                        line[2],\n                    ];\n                    const rotHandleWorldTwo = [\n                        viewport.canvasToWorld(line[10]),\n                        otherViewport,\n                        line[3],\n                        line[4],\n                    ];\n                    newRtpoints.push(rotHandleWorldOne, rotHandleWorldTwo);\n                    const slabThicknessHandlesActive = data.handles.activeOperation === OPERATION.SLAB;\n                    const slabThicknessHandles = [line[11], line[12], line[13], line[14]];\n                    const slabThicknessHandleWorldOne = [\n                        viewport.canvasToWorld(line[11]),\n                        otherViewport,\n                        line[5],\n                        line[6],\n                    ];\n                    const slabThicknessHandleWorldTwo = [\n                        viewport.canvasToWorld(line[12]),\n                        otherViewport,\n                        line[5],\n                        line[6],\n                    ];\n                    const slabThicknessHandleWorldThree = [\n                        viewport.canvasToWorld(line[13]),\n                        otherViewport,\n                        line[7],\n                        line[8],\n                    ];\n                    const slabThicknessHandleWorldFour = [\n                        viewport.canvasToWorld(line[14]),\n                        otherViewport,\n                        line[7],\n                        line[8],\n                    ];\n                    newStpoints.push(slabThicknessHandleWorldOne, slabThicknessHandleWorldTwo, slabThicknessHandleWorldThree, slabThicknessHandleWorldFour);\n                    let handleRadius = this.configuration.handleRadius *\n                        (this.configuration.enableHDPIHandles ? window.devicePixelRatio : 1);\n                    let opacity = 1;\n                    if (this.configuration.mobile?.enabled) {\n                        handleRadius = this.configuration.mobile.handleRadius;\n                        opacity = this.configuration.mobile.opacity;\n                    }\n                    if ((lineActive || this.configuration.mobile?.enabled) &&\n                        !rotHandlesActive &&\n                        !slabThicknessHandlesActive &&\n                        viewportDraggableRotatable &&\n                        viewportSlabThicknessControlsOn) {\n                        let handleUID = `${lineIndex}One`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'circle',\n                        });\n                        handleUID = `${lineIndex}Two`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, slabThicknessHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'rect',\n                        });\n                    }\n                    else if (lineActive &&\n                        !rotHandlesActive &&\n                        !slabThicknessHandlesActive &&\n                        viewportDraggableRotatable) {\n                        const handleUID = `${lineIndex}`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'circle',\n                        });\n                    }\n                    else if (selectedViewportId &&\n                        !rotHandlesActive &&\n                        !slabThicknessHandlesActive &&\n                        viewportSlabThicknessControlsOn) {\n                        const handleUID = `${lineIndex}`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, slabThicknessHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'rect',\n                        });\n                    }\n                    else if (rotHandlesActive && viewportDraggableRotatable) {\n                        const handleUID = `${lineIndex}`;\n                        const handleRadius = this.configuration.handleRadius *\n                            (this.configuration.enableHDPIHandles\n                                ? window.devicePixelRatio\n                                : 1);\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {\n                            color,\n                            handleRadius,\n                            fill: color,\n                            type: 'circle',\n                        });\n                    }\n                    else if (slabThicknessHandlesActive &&\n                        selectedViewportId &&\n                        viewportSlabThicknessControlsOn) {\n                        const handleRadius = this.configuration.handleRadius *\n                            (this.configuration.enableHDPIHandles\n                                ? window.devicePixelRatio\n                                : 1);\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, lineUID, slabThicknessHandles, {\n                            color,\n                            handleRadius,\n                            fill: color,\n                            type: 'rect',\n                        });\n                    }\n                    const slabThicknessValue = otherViewport.getSlabThickness();\n                    if (slabThicknessValue > 0.5 && viewportSlabThicknessControlsOn) {\n                        lineUID = `${lineIndex}STOne`;\n                        drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[5], line[6], {\n                            color,\n                            width: 1,\n                            lineDash: [2, 3],\n                        });\n                        lineUID = `${lineIndex}STTwo`;\n                        drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[7], line[8], {\n                            color,\n                            width: line,\n                            lineDash: [2, 3],\n                        });\n                    }\n                }\n            });\n            renderStatus = true;\n            data.handles.rotationPoints = newRtpoints;\n            data.handles.slabThicknessPoints = newStpoints;\n            if (this.configuration.viewportIndicators) {\n                const { viewportIndicatorsConfig } = this.configuration;\n                const xOffset = viewportIndicatorsConfig?.xOffset || 0.95;\n                const yOffset = viewportIndicatorsConfig?.yOffset || 0.05;\n                const referenceColorCoordinates = [\n                    clientWidth * xOffset,\n                    clientHeight * yOffset,\n                ];\n                const circleRadius = viewportIndicatorsConfig?.circleRadius || canvasDiagonalLength * 0.01;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, referenceColorCoordinates, circleRadius, { color, fill: color });\n            }\n            return renderStatus;\n        };\n        this._getAnnotations = (enabledElement) => {\n            const { viewport } = enabledElement;\n            const annotations = getAnnotations(this.getToolName(), viewport.element) || [];\n            const viewportIds = this._getViewportsInfo().map(({ viewportId }) => viewportId);\n            const toolGroupAnnotations = annotations.filter((annotation) => {\n                const { data } = annotation;\n                return viewportIds.includes(data.viewportId);\n            });\n            return toolGroupAnnotations;\n        };\n        this._onNewVolume = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            this._computeToolCenter(viewportsInfo);\n        };\n        this._areViewportIdArraysEqual = (viewportIdArrayOne, viewportIdArrayTwo) => {\n            if (viewportIdArrayOne.length !== viewportIdArrayTwo.length) {\n                return false;\n            }\n            viewportIdArrayOne.forEach((id) => {\n                let itemFound = false;\n                for (let i = 0; i < viewportIdArrayTwo.length; ++i) {\n                    if (id === viewportIdArrayTwo[i]) {\n                        itemFound = true;\n                        break;\n                    }\n                }\n                if (itemFound === false) {\n                    return false;\n                }\n            });\n            return true;\n        };\n        this._getAnnotationsForViewportsWithDifferentCameras = (enabledElement, annotations) => {\n            const { viewportId, renderingEngine, viewport } = enabledElement;\n            const otherViewportAnnotations = annotations.filter((annotation) => annotation.data.viewportId !== viewportId);\n            if (!otherViewportAnnotations || !otherViewportAnnotations.length) {\n                return [];\n            }\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, position } = camera;\n            const viewportsWithDifferentCameras = otherViewportAnnotations.filter((annotation) => {\n                const { viewportId } = annotation.data;\n                const targetViewport = renderingEngine.getViewport(viewportId);\n                const cameraOfTarget = targetViewport.getCamera();\n                return !(csUtils.isEqual(cameraOfTarget.viewPlaneNormal, viewPlaneNormal, 1e-2) && csUtils.isEqual(cameraOfTarget.position, position, 1));\n            });\n            return viewportsWithDifferentCameras;\n        };\n        this._filterViewportWithSameOrientation = (enabledElement, referenceAnnotation, annotations) => {\n            const { renderingEngine } = enabledElement;\n            const { data } = referenceAnnotation;\n            const viewport = renderingEngine.getViewport(data.viewportId);\n            const linkedViewportAnnotations = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return otherViewportControllable === true;\n            });\n            if (!linkedViewportAnnotations || !linkedViewportAnnotations.length) {\n                return [];\n            }\n            const camera = viewport.getCamera();\n            const viewPlaneNormal = camera.viewPlaneNormal;\n            vtkMath.normalize(viewPlaneNormal);\n            const otherViewportsAnnotationsWithSameCameraDirection = linkedViewportAnnotations.filter((annotation) => {\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                return (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) &&\n                    csUtils.isEqual(camera.viewUp, otherCamera.viewUp, 1e-2));\n            });\n            return otherViewportsAnnotationsWithSameCameraDirection;\n        };\n        this._filterAnnotationsByUniqueViewportOrientations = (enabledElement, annotations) => {\n            const { renderingEngine, viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const viewPlaneNormal = camera.viewPlaneNormal;\n            vtkMath.normalize(viewPlaneNormal);\n            const otherLinkedViewportAnnotationsFromSameScene = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return (viewport !== otherViewport &&\n                    otherViewportControllable === true);\n            });\n            const otherViewportsAnnotationsWithUniqueCameras = [];\n            for (let i = 0; i < otherLinkedViewportAnnotationsFromSameScene.length; ++i) {\n                const annotation = otherLinkedViewportAnnotationsFromSameScene[i];\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                if (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n                    csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {\n                    continue;\n                }\n                let cameraFound = false;\n                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {\n                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n                    const { viewportId } = annotation.data;\n                    const stockedViewport = renderingEngine.getViewport(viewportId);\n                    const cameraOfStocked = stockedViewport.getCamera();\n                    if (csUtils.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&\n                        csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {\n                        cameraFound = true;\n                    }\n                }\n                if (!cameraFound) {\n                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n                }\n            }\n            const otherNonLinkedViewportAnnotationsFromSameScene = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return (viewport !== otherViewport &&\n                    otherViewportControllable !== true);\n            });\n            for (let i = 0; i < otherNonLinkedViewportAnnotationsFromSameScene.length; ++i) {\n                const annotation = otherNonLinkedViewportAnnotationsFromSameScene[i];\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                if (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n                    csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {\n                    continue;\n                }\n                let cameraFound = false;\n                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {\n                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n                    const { viewportId } = annotation.data;\n                    const stockedViewport = renderingEngine.getViewport(viewportId);\n                    const cameraOfStocked = stockedViewport.getCamera();\n                    if (csUtils.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&\n                        csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {\n                        cameraFound = true;\n                    }\n                }\n                if (!cameraFound) {\n                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n                }\n            }\n            const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n            for (let i = 0; i < otherViewportAnnotations.length; ++i) {\n                const annotation = otherViewportAnnotations[i];\n                if (otherViewportsAnnotationsWithUniqueCameras.some((element) => element === annotation)) {\n                    continue;\n                }\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                if (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n                    csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {\n                    continue;\n                }\n                let cameraFound = false;\n                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {\n                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n                    const { viewportId } = annotation.data;\n                    const stockedViewport = renderingEngine.getViewport(viewportId);\n                    const cameraOfStocked = stockedViewport.getCamera();\n                    if (csUtils.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&\n                        csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {\n                        cameraFound = true;\n                    }\n                }\n                if (!cameraFound) {\n                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n                }\n            }\n            return otherViewportsAnnotationsWithUniqueCameras;\n        };\n        this._checkIfViewportsRenderingSameScene = (viewport, otherViewport) => {\n            const volumeIds = viewport.getAllVolumeIds();\n            const otherVolumeIds = otherViewport.getAllVolumeIds();\n            return (volumeIds.length === otherVolumeIds.length &&\n                volumeIds.every((id) => otherVolumeIds.includes(id)));\n        };\n        this._jump = (enabledElement, jumpWorld) => {\n            state.isInteractingWithTool = true;\n            const { viewport, renderingEngine } = enabledElement;\n            const annotations = this._getAnnotations(enabledElement);\n            const delta = [0, 0, 0];\n            vtkMath.subtract(jumpWorld, this.toolCenter, delta);\n            const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n            const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const sameScene = this._checkIfViewportsRenderingSameScene(viewport, otherViewport);\n                return (this._getReferenceLineControllable(otherViewport.id) &&\n                    this._getReferenceLineDraggableRotatable(otherViewport.id) &&\n                    sameScene);\n            });\n            if (viewportsAnnotationsToUpdate.length === 0) {\n                state.isInteractingWithTool = false;\n                return false;\n            }\n            this._applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta);\n            state.isInteractingWithTool = false;\n            return true;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = !this.configuration.mobile?.enabled;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            this.editData.annotation.data.handles.activeOperation = null;\n            this.editData.annotation.data.activeViewportIds = [];\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            this.editData = null;\n            const requireSameOrientation = false;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), requireSameOrientation);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const delta = eventDetail.deltaPoints.world;\n            if (Math.abs(delta[0]) < 1e-3 &&\n                Math.abs(delta[1]) < 1e-3 &&\n                Math.abs(delta[2]) < 1e-3) {\n                return;\n            }\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!viewportAnnotation) {\n                return;\n            }\n            const { handles } = viewportAnnotation.data;\n            const { currentPoints } = evt.detail;\n            const canvasCoords = currentPoints.canvas;\n            if (handles.activeOperation === OPERATION.DRAG) {\n                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n                const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                    const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                    return (otherViewportControllable === true &&\n                        otherViewportDraggableRotatable === true &&\n                        viewportAnnotation.data.activeViewportIds.find((id) => id === otherViewport.id));\n                });\n                this._applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta);\n            }\n            else if (handles.activeOperation === OPERATION.ROTATE) {\n                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n                const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                    const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                    return (otherViewportControllable === true &&\n                        otherViewportDraggableRotatable === true);\n                });\n                const dir1 = vec2.create();\n                const dir2 = vec2.create();\n                const center = [\n                    this.toolCenter[0],\n                    this.toolCenter[1],\n                    this.toolCenter[2],\n                ];\n                const centerCanvas = viewport.worldToCanvas(center);\n                const finalPointCanvas = eventDetail.currentPoints.canvas;\n                const originalPointCanvas = vec2.create();\n                vec2.sub(originalPointCanvas, finalPointCanvas, eventDetail.deltaPoints.canvas);\n                vec2.sub(dir1, originalPointCanvas, centerCanvas);\n                vec2.sub(dir2, finalPointCanvas, centerCanvas);\n                let angle = vec2.angle(dir1, dir2);\n                if (this._isClockWise(centerCanvas, originalPointCanvas, finalPointCanvas)) {\n                    angle *= -1;\n                }\n                angle = Math.round(angle * 100) / 100;\n                const rotationAxis = viewport.getCamera().viewPlaneNormal;\n                const { matrix } = vtkMatrixBuilder\n                    .buildFromRadian()\n                    .translate(center[0], center[1], center[2])\n                    .rotate(angle, rotationAxis)\n                    .translate(-center[0], -center[1], -center[2]);\n                const otherViewportsIds = [];\n                viewportsAnnotationsToUpdate.forEach((annotation) => {\n                    const { data } = annotation;\n                    data.handles.toolCenter = center;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const camera = otherViewport.getCamera();\n                    const { viewUp, position, focalPoint } = camera;\n                    viewUp[0] += position[0];\n                    viewUp[1] += position[1];\n                    viewUp[2] += position[2];\n                    vec3.transformMat4(focalPoint, focalPoint, matrix);\n                    vec3.transformMat4(position, position, matrix);\n                    vec3.transformMat4(viewUp, viewUp, matrix);\n                    viewUp[0] -= position[0];\n                    viewUp[1] -= position[1];\n                    viewUp[2] -= position[2];\n                    otherViewport.setCamera({\n                        position,\n                        viewUp,\n                        focalPoint,\n                    });\n                    otherViewportsIds.push(otherViewport.id);\n                });\n                renderingEngine.renderViewports(otherViewportsIds);\n            }\n            else if (handles.activeOperation === OPERATION.SLAB) {\n                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n                const referenceAnnotations = otherViewportAnnotations.filter((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                    const otherViewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n                    return (otherViewportControllable === true &&\n                        otherViewportSlabThicknessControlsOn === true &&\n                        viewportAnnotation.data.activeViewportIds.find((id) => id === otherViewport.id));\n                });\n                if (referenceAnnotations.length === 0) {\n                    return;\n                }\n                const viewportsAnnotationsToUpdate = this._filterViewportWithSameOrientation(enabledElement, referenceAnnotations[0], annotations);\n                const viewportsIds = [];\n                viewportsIds.push(viewport.id);\n                viewportsAnnotationsToUpdate.forEach((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const camera = otherViewport.getCamera();\n                    const normal = camera.viewPlaneNormal;\n                    const dotProd = vtkMath.dot(delta, normal);\n                    const projectedDelta = [...normal];\n                    vtkMath.multiplyScalar(projectedDelta, dotProd);\n                    if (Math.abs(projectedDelta[0]) > 1e-3 ||\n                        Math.abs(projectedDelta[1]) > 1e-3 ||\n                        Math.abs(projectedDelta[2]) > 1e-3) {\n                        const mod = Math.sqrt(projectedDelta[0] * projectedDelta[0] +\n                            projectedDelta[1] * projectedDelta[1] +\n                            projectedDelta[2] * projectedDelta[2]);\n                        const currentPoint = eventDetail.lastPoints.world;\n                        const direction = [0, 0, 0];\n                        const currentCenter = [\n                            this.toolCenter[0],\n                            this.toolCenter[1],\n                            this.toolCenter[2],\n                        ];\n                        const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                        if (!viewportDraggableRotatable) {\n                            const { rotationPoints } = (this.editData.annotation.data).handles;\n                            const otherViewportRotationPoints = rotationPoints.filter((point) => point[1].uid === otherViewport.id);\n                            if (otherViewportRotationPoints.length === 2) {\n                                const point1 = viewport.canvasToWorld(otherViewportRotationPoints[0][3]);\n                                const point2 = viewport.canvasToWorld(otherViewportRotationPoints[1][3]);\n                                vtkMath.add(point1, point2, currentCenter);\n                                vtkMath.multiplyScalar(currentCenter, 0.5);\n                            }\n                        }\n                        vtkMath.subtract(currentPoint, currentCenter, direction);\n                        const dotProdDirection = vtkMath.dot(direction, normal);\n                        const projectedDirection = [...normal];\n                        vtkMath.multiplyScalar(projectedDirection, dotProdDirection);\n                        const normalizedProjectedDirection = [\n                            projectedDirection[0],\n                            projectedDirection[1],\n                            projectedDirection[2],\n                        ];\n                        vec3.normalize(normalizedProjectedDirection, normalizedProjectedDirection);\n                        const normalizedProjectedDelta = [\n                            projectedDelta[0],\n                            projectedDelta[1],\n                            projectedDelta[2],\n                        ];\n                        vec3.normalize(normalizedProjectedDelta, normalizedProjectedDelta);\n                        let slabThicknessValue = otherViewport.getSlabThickness();\n                        if (csUtils.isOpposite(normalizedProjectedDirection, normalizedProjectedDelta, 1e-3)) {\n                            slabThicknessValue -= mod;\n                        }\n                        else {\n                            slabThicknessValue += mod;\n                        }\n                        slabThicknessValue = Math.abs(slabThicknessValue);\n                        slabThicknessValue = Math.max(RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS, slabThicknessValue);\n                        const near = this._pointNearReferenceLine(viewportAnnotation, canvasCoords, 6, otherViewport);\n                        if (near) {\n                            slabThicknessValue = RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS;\n                        }\n                        const toolGroup = getToolGroupForViewport(otherViewport.id, renderingEngine.id);\n                        const crosshairsInstance = toolGroup.getToolInstance(this.getToolName());\n                        crosshairsInstance.setSlabThickness(otherViewport, slabThicknessValue);\n                        viewportsIds.push(otherViewport.id);\n                    }\n                });\n                renderingEngine.renderViewports(viewportsIds);\n            }\n        };\n        this._pointNearReferenceLine = (annotation, canvasCoords, proximity, lineViewport) => {\n            const { data } = annotation;\n            const { rotationPoints } = data.handles;\n            for (let i = 0; i < rotationPoints.length - 1; ++i) {\n                const otherViewport = rotationPoints[i][1];\n                if (otherViewport.id !== lineViewport.id) {\n                    continue;\n                }\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                if (!viewportControllable) {\n                    continue;\n                }\n                const lineSegment1 = {\n                    start: {\n                        x: rotationPoints[i][2][0],\n                        y: rotationPoints[i][2][1],\n                    },\n                    end: {\n                        x: rotationPoints[i][3][0],\n                        y: rotationPoints[i][3][1],\n                    },\n                };\n                const distanceToPoint1 = lineSegment.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);\n                const lineSegment2 = {\n                    start: {\n                        x: rotationPoints[i + 1][2][0],\n                        y: rotationPoints[i + 1][2][1],\n                    },\n                    end: {\n                        x: rotationPoints[i + 1][3][0],\n                        y: rotationPoints[i + 1][3][1],\n                    },\n                };\n                const distanceToPoint2 = lineSegment.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);\n                if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n                    return true;\n                }\n                i++;\n            }\n            return false;\n        };\n        this._getReferenceLineColor =\n            toolProps.configuration?.getReferenceLineColor ||\n                defaultReferenceLineColor;\n        this._getReferenceLineControllable =\n            toolProps.configuration?.getReferenceLineControllable ||\n                defaultReferenceLineControllable;\n        this._getReferenceLineDraggableRotatable =\n            toolProps.configuration?.getReferenceLineDraggableRotatable ||\n                defaultReferenceLineDraggableRotatable;\n        this._getReferenceLineSlabThicknessControlsOn =\n            toolProps.configuration?.getReferenceLineSlabThicknessControlsOn ||\n                defaultReferenceLineSlabThicknessControlsOn;\n    }\n    onSetToolActive() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n        this._subscribeToViewportNewVolumeSet(viewportsInfo);\n        this._computeToolCenter(viewportsInfo);\n    }\n    onSetToolPassive() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._computeToolCenter(viewportsInfo);\n    }\n    onSetToolEnabled() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._computeToolCenter(viewportsInfo);\n    }\n    onSetToolDisabled() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n        viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (!enabledElement) {\n                return;\n            }\n            const annotations = this._getAnnotations(enabledElement);\n            if (annotations?.length) {\n                annotations.forEach((annotation) => {\n                    removeAnnotation(annotation.annotationUID);\n                });\n            }\n        });\n    }\n    setToolCenter(toolCenter, suppressEvents = false) {\n        const viewportsInfo = this._getViewportsInfo();\n        viewportsInfo.map(({ renderingEngineId, viewportId }) => {\n            const renderingEngine = getRenderingEngine(renderingEngineId);\n            const viewport = renderingEngine.getViewport(viewportId);\n            const camera = viewport.getCamera();\n            const { focalPoint, position, viewPlaneNormal } = camera;\n            const delta = [\n                toolCenter[0] - focalPoint[0],\n                toolCenter[1] - focalPoint[1],\n                toolCenter[2] - focalPoint[2],\n            ];\n            const scroll = delta[0] * viewPlaneNormal[0] +\n                delta[1] * viewPlaneNormal[1] +\n                delta[2] * viewPlaneNormal[2];\n            const scrollDelta = [\n                scroll * viewPlaneNormal[0],\n                scroll * viewPlaneNormal[1],\n                scroll * viewPlaneNormal[2],\n            ];\n            const newFocalPoint = [\n                focalPoint[0] + scrollDelta[0],\n                focalPoint[1] + scrollDelta[1],\n                focalPoint[2] + scrollDelta[2],\n            ];\n            const newPosition = [\n                position[0] + scrollDelta[0],\n                position[1] + scrollDelta[1],\n                position[2] + scrollDelta[2],\n            ];\n            viewport.setCamera({\n                focalPoint: newFocalPoint,\n                position: newPosition,\n            });\n            viewport.render();\n        });\n        this.toolCenter = toolCenter;\n        if (!suppressEvents) {\n            triggerEvent(eventTarget, Events.CROSSHAIR_TOOL_CENTER_CHANGED, {\n                toolGroupId: this.toolGroupId,\n                toolCenter: this.toolCenter,\n            });\n        }\n    }\n    getHandleNearImagePoint(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        let point = this._getRotationHandleNearImagePoint(viewport, annotation, canvasCoords, proximity);\n        if (point !== null) {\n            return point;\n        }\n        point = this._getSlabThicknessHandleNearImagePoint(viewport, annotation, canvasCoords, proximity);\n        if (point !== null) {\n            return point;\n        }\n    }\n    _unsubscribeToViewportNewVolumeSet(viewportsInfo) {\n        viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.removeEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _subscribeToViewportNewVolumeSet(viewports) {\n        viewports.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.addEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _autoPanViewportIfNecessary(viewportId, renderingEngine) {\n        const viewport = renderingEngine.getViewport(viewportId);\n        const { clientWidth, clientHeight } = viewport.canvas;\n        const toolCenterCanvas = viewport.worldToCanvas(this.toolCenter);\n        const pan = this.configuration.autoPan.panSize;\n        const visiblePointCanvas = [\n            toolCenterCanvas[0],\n            toolCenterCanvas[1],\n        ];\n        if (toolCenterCanvas[0] < 0) {\n            visiblePointCanvas[0] = pan;\n        }\n        else if (toolCenterCanvas[0] > clientWidth) {\n            visiblePointCanvas[0] = clientWidth - pan;\n        }\n        if (toolCenterCanvas[1] < 0) {\n            visiblePointCanvas[1] = pan;\n        }\n        else if (toolCenterCanvas[1] > clientHeight) {\n            visiblePointCanvas[1] = clientHeight - pan;\n        }\n        if (visiblePointCanvas[0] === toolCenterCanvas[0] &&\n            visiblePointCanvas[1] === toolCenterCanvas[1]) {\n            return;\n        }\n        const visiblePointWorld = viewport.canvasToWorld(visiblePointCanvas);\n        const deltaPointsWorld = [\n            visiblePointWorld[0] - this.toolCenter[0],\n            visiblePointWorld[1] - this.toolCenter[1],\n            visiblePointWorld[2] - this.toolCenter[2],\n        ];\n        const camera = viewport.getCamera();\n        const { focalPoint, position } = camera;\n        const updatedPosition = [\n            position[0] - deltaPointsWorld[0],\n            position[1] - deltaPointsWorld[1],\n            position[2] - deltaPointsWorld[2],\n        ];\n        const updatedFocalPoint = [\n            focalPoint[0] - deltaPointsWorld[0],\n            focalPoint[1] - deltaPointsWorld[1],\n            focalPoint[2] - deltaPointsWorld[2],\n        ];\n        viewport.setCamera({\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n        viewport.render();\n    }\n    setSlabThickness(viewport, slabThickness) {\n        let actorUIDs;\n        const { filterActorUIDsToSetSlabThickness } = this.configuration;\n        if (filterActorUIDsToSetSlabThickness &&\n            filterActorUIDsToSetSlabThickness.length > 0) {\n            actorUIDs = filterActorUIDsToSetSlabThickness;\n        }\n        let blendModeToUse = this.configuration.slabThicknessBlendMode;\n        if (slabThickness === RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS) {\n            blendModeToUse = Enums.BlendModes.COMPOSITE;\n        }\n        const immediate = false;\n        viewport.setBlendMode(blendModeToUse, actorUIDs, immediate);\n        viewport.setSlabThickness(slabThickness, actorUIDs);\n    }\n    _isClockWise(a, b, c) {\n        return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]) > 0;\n    }\n    _applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta) {\n        viewportsAnnotationsToUpdate.forEach((annotation) => {\n            this._applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta);\n        });\n    }\n    _applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta) {\n        const { data } = annotation;\n        const viewport = renderingEngine.getViewport(data.viewportId);\n        const camera = viewport.getCamera();\n        const normal = camera.viewPlaneNormal;\n        const dotProd = vtkMath.dot(delta, normal);\n        const projectedDelta = [...normal];\n        vtkMath.multiplyScalar(projectedDelta, dotProd);\n        if (Math.abs(projectedDelta[0]) > 1e-3 ||\n            Math.abs(projectedDelta[1]) > 1e-3 ||\n            Math.abs(projectedDelta[2]) > 1e-3) {\n            const newFocalPoint = [0, 0, 0];\n            const newPosition = [0, 0, 0];\n            vtkMath.add(camera.focalPoint, projectedDelta, newFocalPoint);\n            vtkMath.add(camera.position, projectedDelta, newPosition);\n            viewport.setCamera({\n                focalPoint: newFocalPoint,\n                position: newPosition,\n            });\n            viewport.render();\n        }\n    }\n    _getRotationHandleNearImagePoint(viewport, annotation, canvasCoords, proximity) {\n        const { data } = annotation;\n        const { rotationPoints } = data.handles;\n        for (let i = 0; i < rotationPoints.length; i++) {\n            const point = rotationPoints[i][0];\n            const otherViewport = rotationPoints[i][1];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            if (!viewportControllable) {\n                continue;\n            }\n            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n            if (!viewportDraggableRotatable) {\n                continue;\n            }\n            const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n            if (vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {\n                data.handles.activeOperation = OPERATION.ROTATE;\n                this.editData = {\n                    annotation,\n                };\n                return point;\n            }\n        }\n        return null;\n    }\n    _getSlabThicknessHandleNearImagePoint(viewport, annotation, canvasCoords, proximity) {\n        const { data } = annotation;\n        const { slabThicknessPoints } = data.handles;\n        for (let i = 0; i < slabThicknessPoints.length; i++) {\n            const point = slabThicknessPoints[i][0];\n            const otherViewport = slabThicknessPoints[i][1];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            if (!viewportControllable) {\n                continue;\n            }\n            const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n            if (!viewportSlabThicknessControlsOn) {\n                continue;\n            }\n            const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n            if (vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {\n                data.handles.activeOperation = OPERATION.SLAB;\n                data.activeViewportIds = [otherViewport.id];\n                this.editData = {\n                    annotation,\n                };\n                return point;\n            }\n        }\n        return null;\n    }\n    _pointNearTool(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { clientWidth, clientHeight } = viewport.canvas;\n        const canvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n        const { data } = annotation;\n        const { rotationPoints } = data.handles;\n        const { slabThicknessPoints } = data.handles;\n        const viewportIdArray = [];\n        for (let i = 0; i < rotationPoints.length - 1; ++i) {\n            const otherViewport = rotationPoints[i][1];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n            if (!viewportControllable || !viewportDraggableRotatable) {\n                continue;\n            }\n            const lineSegment1 = {\n                start: {\n                    x: rotationPoints[i][2][0],\n                    y: rotationPoints[i][2][1],\n                },\n                end: {\n                    x: rotationPoints[i][3][0],\n                    y: rotationPoints[i][3][1],\n                },\n            };\n            const distanceToPoint1 = lineSegment.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            const lineSegment2 = {\n                start: {\n                    x: rotationPoints[i + 1][2][0],\n                    y: rotationPoints[i + 1][2][1],\n                },\n                end: {\n                    x: rotationPoints[i + 1][3][0],\n                    y: rotationPoints[i + 1][3][1],\n                },\n            };\n            const distanceToPoint2 = lineSegment.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n                viewportIdArray.push(otherViewport.id);\n                data.handles.activeOperation = OPERATION.DRAG;\n            }\n            i++;\n        }\n        for (let i = 0; i < slabThicknessPoints.length - 1; ++i) {\n            const otherViewport = slabThicknessPoints[i][1];\n            if (viewportIdArray.find((id) => id === otherViewport.id)) {\n                continue;\n            }\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n            if (!viewportControllable || !viewportSlabThicknessControlsOn) {\n                continue;\n            }\n            const stPointLineCanvas1 = slabThicknessPoints[i][2];\n            const stPointLineCanvas2 = slabThicknessPoints[i][3];\n            const centerCanvas = vec2.create();\n            vec2.add(centerCanvas, stPointLineCanvas1, stPointLineCanvas2);\n            vec2.scale(centerCanvas, centerCanvas, 0.5);\n            const canvasUnitVectorFromCenter = vec2.create();\n            vec2.subtract(canvasUnitVectorFromCenter, stPointLineCanvas1, centerCanvas);\n            vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n            const canvasVectorFromCenterStart = vec2.create();\n            vec2.scale(canvasVectorFromCenterStart, canvasUnitVectorFromCenter, canvasDiagonalLength * 0.05);\n            const stPointLineCanvas1Start = vec2.create();\n            const stPointLineCanvas2Start = vec2.create();\n            vec2.add(stPointLineCanvas1Start, centerCanvas, canvasVectorFromCenterStart);\n            vec2.subtract(stPointLineCanvas2Start, centerCanvas, canvasVectorFromCenterStart);\n            const lineSegment1 = {\n                start: {\n                    x: stPointLineCanvas1Start[0],\n                    y: stPointLineCanvas1Start[1],\n                },\n                end: {\n                    x: stPointLineCanvas1[0],\n                    y: stPointLineCanvas1[1],\n                },\n            };\n            const distanceToPoint1 = lineSegment.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            const lineSegment2 = {\n                start: {\n                    x: stPointLineCanvas2Start[0],\n                    y: stPointLineCanvas2Start[1],\n                },\n                end: {\n                    x: stPointLineCanvas2[0],\n                    y: stPointLineCanvas2[1],\n                },\n            };\n            const distanceToPoint2 = lineSegment.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n                viewportIdArray.push(otherViewport.id);\n                data.handles.activeOperation = null;\n            }\n            i++;\n        }\n        data.activeViewportIds = [...viewportIdArray];\n        this.editData = {\n            annotation,\n        };\n        return data.handles.activeOperation === OPERATION.DRAG ? true : false;\n    }\n}\nCrosshairsTool.toolName = 'Crosshairs';\nexport default CrosshairsTool;\n","import { BaseTool } from './base';\nimport { Events } from '../enums';\nimport { getEnabledElement, StackViewport, Enums } from '@cornerstonejs/core';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { state } from '../store/state';\nimport { hideElementCursor, resetElementCursor, } from '../cursors/elementCursor';\nconst MAGNIFY_VIEWPORT_ID = 'magnify-viewport';\nclass MagnifyTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            magnifySize: 10,\n            magnifyWidth: 250,\n            magnifyHeight: 250,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._hasBeenRemoved = false;\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            if (!(viewport instanceof StackViewport)) {\n                throw new Error('MagnifyTool only works on StackViewports');\n            }\n            const referencedImageId = this._getReferencedImageId(viewport);\n            if (!referencedImageId) {\n                throw new Error('MagnifyTool: No referenced image id found, reconstructed planes not supported yet');\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                referencedImageId,\n                viewportIdsToRender,\n                enabledElement,\n                renderingEngine,\n                currentPoints,\n            };\n            this._createMagnificationViewport();\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this.preTouchStartCallback = (evt) => {\n            this.preMouseDownCallback(evt);\n        };\n        this._createMagnificationViewport = () => {\n            const { enabledElement, referencedImageId, viewportIdsToRender, renderingEngine, currentPoints, } = this.editData;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            const viewportProperties = viewport.getProperties();\n            const { rotation: originalViewportRotation } = viewport.getViewPresentation();\n            const { canvas: canvasPos, world: worldPos } = currentPoints;\n            let magnifyToolElement;\n            magnifyToolElement = element.querySelector('.magnifyTool');\n            if (magnifyToolElement === null) {\n                const magnifyElement = document.createElement('div');\n                magnifyElement.classList.add('magnifyTool');\n                magnifyElement.style.display = 'block';\n                magnifyElement.style.width = `${this.configuration.magnifyWidth}px`;\n                magnifyElement.style.height = `${this.configuration.magnifyHeight}px`;\n                magnifyElement.style.position = 'absolute';\n                magnifyToolElement = magnifyElement;\n                const viewportElement = element.querySelector('.viewport-element');\n                viewportElement.appendChild(magnifyElement);\n                const viewportInput = {\n                    viewportId: MAGNIFY_VIEWPORT_ID,\n                    type: Enums.ViewportType.STACK,\n                    element: magnifyToolElement,\n                };\n                renderingEngine.enableElement(viewportInput);\n            }\n            magnifyToolElement.style.top = `${canvasPos[1] - this.configuration.magnifyHeight / 2}px`;\n            magnifyToolElement.style.left = `${canvasPos[0] - this.configuration.magnifyWidth / 2}px`;\n            const magnifyViewport = renderingEngine.getViewport(MAGNIFY_VIEWPORT_ID);\n            magnifyViewport.setStack([referencedImageId]).then(() => {\n                if (this._hasBeenRemoved) {\n                    return;\n                }\n                magnifyViewport.setProperties(viewportProperties);\n                magnifyViewport.setViewPresentation({\n                    rotation: originalViewportRotation,\n                });\n                const { parallelScale } = viewport.getCamera();\n                const { focalPoint, position, viewPlaneNormal } = magnifyViewport.getCamera();\n                const distance = Math.sqrt(Math.pow(focalPoint[0] - position[0], 2) +\n                    Math.pow(focalPoint[1] - position[1], 2) +\n                    Math.pow(focalPoint[2] - position[2], 2));\n                const updatedFocalPoint = [\n                    worldPos[0],\n                    worldPos[1],\n                    worldPos[2],\n                ];\n                const updatedPosition = [\n                    updatedFocalPoint[0] + distance * viewPlaneNormal[0],\n                    updatedFocalPoint[1] + distance * viewPlaneNormal[1],\n                    updatedFocalPoint[2] + distance * viewPlaneNormal[2],\n                ];\n                magnifyViewport.setCamera({\n                    parallelScale: parallelScale * (1 / this.configuration.magnifySize),\n                    focalPoint: updatedFocalPoint,\n                    position: updatedPosition,\n                });\n                magnifyViewport.render();\n            });\n            magnifyToolElement.style.display = 'block';\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._cancelCallback = (evt) => {\n            evt.preventDefault();\n            evt.stopPropagation();\n            this._dragEndCallback(evt);\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { deltaPoints, element, currentPoints } = eventDetail;\n            const deltaPointsWorld = deltaPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            const magnifyViewport = renderingEngine.getViewport(MAGNIFY_VIEWPORT_ID);\n            const magnifyElement = element.querySelector('.magnifyTool');\n            if (!magnifyElement) {\n                return;\n            }\n            magnifyElement.style.top = `${canvasPos[1] - this.configuration.magnifyHeight / 2}px`;\n            magnifyElement.style.left = `${canvasPos[0] - this.configuration.magnifyWidth / 2}px`;\n            const { focalPoint, position } = magnifyViewport.getCamera();\n            const updatedPosition = [\n                position[0] + deltaPointsWorld[0],\n                position[1] + deltaPointsWorld[1],\n                position[2] + deltaPointsWorld[2],\n            ];\n            const updatedFocalPoint = [\n                focalPoint[0] + deltaPointsWorld[0],\n                focalPoint[1] + deltaPointsWorld[1],\n                focalPoint[2] + deltaPointsWorld[2],\n            ];\n            magnifyViewport.setCamera({\n                focalPoint: updatedFocalPoint,\n                position: updatedPosition,\n            });\n            magnifyViewport.render();\n        };\n        this._dragEndCallback = (evt) => {\n            let { element } = evt.detail;\n            if (element === undefined) {\n                const { enabledElement } = this.editData;\n                const { viewport } = enabledElement;\n                element = viewport.element;\n            }\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            renderingEngine.disableElement(MAGNIFY_VIEWPORT_ID);\n            const viewportElement = element.querySelector('.viewport-element');\n            const magnifyToolElement = viewportElement.querySelector('.magnifyTool');\n            viewportElement.removeChild(magnifyToolElement);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this._hasBeenRemoved = true;\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            this._hasBeenRemoved = false;\n            element.addEventListener(Events.MOUSE_UP, this._dragEndCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._dragEndCallback);\n            element.addEventListener('contextmenu', this._cancelCallback);\n            element.addEventListener(Events.TOUCH_END, this._dragEndCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._dragEndCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._dragEndCallback);\n            element.removeEventListener('contextmenu', this._cancelCallback);\n            element.removeEventListener(Events.TOUCH_END, this._dragEndCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n    }\n    _getReferencedImageId(viewport) {\n        const targetId = this.getTargetId(viewport);\n        let referencedImageId;\n        if (viewport instanceof StackViewport) {\n            referencedImageId = targetId.split('imageId:')[1];\n        }\n        return referencedImageId;\n    }\n}\nMagnifyTool.toolName = 'Magnify';\nexport default MagnifyTool;\n","import { AnnotationTool } from './base';\nimport { getEnabledElement, utilities as csUtils, eventTarget, Enums, getRenderingEngine, CONSTANTS, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { addAnnotation, getAllAnnotations, getAnnotations, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted } from '../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events, MouseBindings, KeyboardBindings, Events as cstEvents, SegmentationRepresentations, ToolModes, } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { getCanvasCircleRadius } from '../utilities/math/circle';\nimport { vec2, vec3 } from 'gl-matrix';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nimport debounce from '../utilities/debounce';\nimport { distanceToPoint } from '../utilities/math/point';\nimport { addSegmentationRepresentations } from '../stateManagement/segmentation';\nconst MAGNIFY_CLASSNAME = 'advancedMagnifyTool';\nconst MAGNIFY_VIEWPORT_INITIAL_RADIUS = 125;\nconst { Events: csEvents } = Enums;\nconst isSegmentation = (actor) => actor.uid !== actor.referencedId;\nvar AdvancedMagnifyToolActions;\n(function (AdvancedMagnifyToolActions) {\n    AdvancedMagnifyToolActions[\"ShowZoomFactorsList\"] = \"showZoomFactorsList\";\n})(AdvancedMagnifyToolActions || (AdvancedMagnifyToolActions = {}));\nconst ADVANCED_MAGNIFY_TOOL_NAME = 'AdvancedMagnify';\nconst PARALLEL_THRESHOLD = 1 - CONSTANTS.EPSILON;\nclass AdvancedMagnifyTool extends AnnotationTool {\n    static { this.Actions = AdvancedMagnifyToolActions; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            magnifyingGlass: {\n                radius: 125,\n                zoomFactor: 3,\n                zoomFactorList: [1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5],\n                autoPan: {\n                    enabled: true,\n                    padding: 10,\n                },\n            },\n            actions: {\n                showZoomFactorsList: {\n                    method: 'showZoomFactorsList',\n                    bindings: [\n                        {\n                            mouseButton: MouseBindings.Secondary,\n                            modifierKey: KeyboardBindings.Shift,\n                        },\n                    ],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const { magnifyingGlass: config } = this.configuration;\n            const { radius, zoomFactor, autoPan } = config;\n            const canvasHandlePoints = this._getCanvasHandlePoints(canvasPos, radius);\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotationUID = csUtils.uuidv4();\n            const magnifyViewportId = csUtils.uuidv4();\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                annotationUID,\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    sourceViewportId: viewport.id,\n                    magnifyViewportId,\n                    zoomFactor,\n                    isCanvasAnnotation: true,\n                    handles: {\n                        points: canvasHandlePoints,\n                        activeHandleIndex: null,\n                    },\n                },\n            };\n            this.magnifyViewportManager.createViewport(annotation, {\n                magnifyViewportId,\n                sourceEnabledElement: enabledElement,\n                position: canvasPos,\n                radius,\n                zoomFactor,\n                autoPan: {\n                    enabled: autoPan.enabled,\n                    padding: autoPan.padding,\n                    callback: (data) => {\n                        const annotationPoints = annotation.data.handles.points;\n                        const { canvas: canvasDelta } = data.delta;\n                        for (let i = 0, len = annotationPoints.length; i < len; i++) {\n                            const point = annotationPoints[i];\n                            point[0] += canvasDelta[0];\n                            point[1] += canvasDelta[1];\n                            annotation.invalidated = true;\n                        }\n                    },\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.onSetToolDisabled = () => {\n            this.magnifyViewportManager.dispose();\n            const annotations = getAllAnnotations();\n            annotations.forEach((annotation) => {\n                if (annotation.metadata.toolName === this.getToolName()) {\n                    removeAnnotation(annotation.annotationUID);\n                }\n            });\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points;\n            const canvasTop = canvasCoordinates[0];\n            const canvasBottom = canvasCoordinates[2];\n            const canvasLeft = canvasCoordinates[3];\n            const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n            const center = [\n                canvasLeft[0] + radius,\n                canvasTop[1] + radius,\n            ];\n            const radiusPoint = getCanvasCircleRadius([center, canvasCoords]);\n            if (Math.abs(radiusPoint - radius) < proximity * 2) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            const { points } = data.handles;\n            const handleIndex = points.findIndex((p) => p === handle);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { deltaPoints } = eventDetail;\n            const canvasDelta = deltaPoints?.canvas ?? [0, 0, 0];\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { points } = annotation.data.handles;\n            points.forEach((point) => {\n                point[0] += canvasDelta[0];\n                point[1] += canvasDelta[1];\n            });\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n            const { data } = annotation;\n            if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const canvasDelta = deltaPoints.canvas;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += canvasDelta[0];\n                    point[1] += canvasDelta[1];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragHandle(evt);\n                annotation.invalidated = true;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { annotation } = this.editData;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points;\n            const canvasTop = canvasCoordinates[0];\n            const canvasBottom = canvasCoordinates[2];\n            const canvasLeft = canvasCoordinates[3];\n            const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n            const canvasCenter = [\n                canvasLeft[0] + radius,\n                canvasTop[1] + radius,\n            ];\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const newRadius = getCanvasCircleRadius([\n                canvasCenter,\n                currentCanvasPoints,\n            ]);\n            const newCanvasHandlePoints = this._getCanvasHandlePoints(canvasCenter, newRadius);\n            points[0] = newCanvasHandlePoints[0];\n            points[1] = newCanvasHandlePoints[1];\n            points[2] = newCanvasHandlePoints[2];\n            points[3] = newCanvasHandlePoints[3];\n        };\n        this.cancel = (element) => {\n            if (!this.isDrawing) {\n                return;\n            }\n            this.isDrawing = false;\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            return annotation.annotationUID;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = annotations?.filter((annotation) => annotation.data.sourceViewportId ===\n                viewport.id);\n            const filteredAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!filteredAnnotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < filteredAnnotations.length; i++) {\n                const annotation = filteredAnnotations[i];\n                const { annotationUID, data } = annotation;\n                const { magnifyViewportId, zoomFactor, handles } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const canvasCoordinates = points;\n                const canvasTop = canvasCoordinates[0];\n                const canvasBottom = canvasCoordinates[2];\n                const canvasLeft = canvasCoordinates[3];\n                const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n                const center = [\n                    canvasLeft[0] + radius,\n                    canvasTop[1] + radius,\n                ];\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-advancedMagnify`;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                    color,\n                    lineWidth: 5,\n                }, dataId);\n                const magnifyViewport = this.magnifyViewportManager.getViewport(magnifyViewportId);\n                magnifyViewport.position = center;\n                magnifyViewport.radius = radius;\n                magnifyViewport.zoomFactor = zoomFactor;\n                magnifyViewport.update();\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n        this._getCanvasHandlePoints = (canvasCenterPos, canvasRadius) => {\n            return [\n                [canvasCenterPos[0], canvasCenterPos[1] - canvasRadius, 0],\n                [canvasCenterPos[0] + canvasRadius, canvasCenterPos[1], 0],\n                [canvasCenterPos[0], canvasCenterPos[1] + canvasRadius, 0],\n                [canvasCenterPos[0] - canvasRadius, canvasCenterPos[1], 0],\n            ];\n        };\n        this.magnifyViewportManager = AdvancedMagnifyViewportManager.getInstance();\n    }\n    showZoomFactorsList(evt, annotation) {\n        const { element, currentPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { canvas: canvasPoint } = currentPoints;\n        const viewportElement = element.querySelector(':scope .viewport-element');\n        const currentZoomFactor = annotation.data.zoomFactor;\n        const remove = () => dropdown.parentElement.removeChild(dropdown);\n        const dropdown = this._getZoomFactorsListDropdown(currentZoomFactor, (newZoomFactor) => {\n            if (newZoomFactor !== undefined) {\n                annotation.data.zoomFactor = Number.parseFloat(newZoomFactor);\n                annotation.invalidated = true;\n            }\n            remove();\n            viewport.render();\n        });\n        Object.assign(dropdown.style, {\n            left: `${canvasPoint[0]}px`,\n            top: `${canvasPoint[1]}px`,\n        });\n        viewportElement.appendChild(dropdown);\n        dropdown.focus();\n    }\n    _getZoomFactorsListDropdown(currentZoomFactor, onChangeCallback) {\n        const { zoomFactorList } = this.configuration.magnifyingGlass;\n        const dropdown = document.createElement('select');\n        dropdown.size = 5;\n        Object.assign(dropdown.style, {\n            width: '50px',\n            position: 'absolute',\n        });\n        ['mousedown', 'mouseup', 'mousemove', 'click'].forEach((eventName) => {\n            dropdown.addEventListener(eventName, (evt) => evt.stopPropagation());\n        });\n        dropdown.addEventListener('change', (evt) => {\n            evt.stopPropagation();\n            onChangeCallback(dropdown.value);\n        });\n        dropdown.addEventListener('keydown', (evt) => {\n            const shouldCancel = (evt.keyCode ?? evt.which === 27) ||\n                evt.key?.toLowerCase() === 'escape';\n            if (shouldCancel) {\n                evt.stopPropagation();\n                onChangeCallback();\n            }\n        });\n        zoomFactorList.forEach((zoomFactor) => {\n            const option = document.createElement('option');\n            option.label = zoomFactor;\n            option.title = `Zoom factor ${zoomFactor.toFixed(1)}`;\n            option.value = zoomFactor;\n            option.defaultSelected = zoomFactor === currentZoomFactor;\n            dropdown.add(option);\n        });\n        return dropdown;\n    }\n}\nclass AdvancedMagnifyViewportManager {\n    constructor() {\n        this.createViewport = (annotation, viewportInfo) => {\n            const { magnifyViewportId, sourceEnabledElement, position, radius, zoomFactor, autoPan, } = viewportInfo;\n            const { viewport: sourceViewport } = sourceEnabledElement;\n            const { element: sourceElement } = sourceViewport;\n            const magnifyViewport = new AdvancedMagnifyViewport({\n                magnifyViewportId,\n                sourceEnabledElement,\n                radius,\n                position,\n                zoomFactor,\n                autoPan,\n            });\n            this._addSourceElementEventListener(sourceElement);\n            this._magnifyViewportsMap.set(magnifyViewport.viewportId, {\n                annotation,\n                magnifyViewport,\n                magnifyViewportInfo: viewportInfo,\n            });\n            return magnifyViewport;\n        };\n        this._annotationRemovedCallback = (evt) => {\n            const { annotation } = evt.detail;\n            if (annotation.metadata.toolName !== ADVANCED_MAGNIFY_TOOL_NAME) {\n                return;\n            }\n            this.destroyViewport(annotation.data.magnifyViewportId);\n        };\n        this._newStackImageCallback = (evt) => {\n            const { viewportId: sourceViewportId, imageId } = evt.detail;\n            const magnifyViewportsMapEntries = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n            const { viewport } = getEnabledElementByViewportId(sourceViewportId);\n            if (viewport.stackActorReInitialized) {\n                this._reset(sourceViewportId);\n            }\n            magnifyViewportsMapEntries.forEach(({ annotation }) => {\n                annotation.metadata.referencedImageId = imageId;\n                annotation.invalidated = true;\n            });\n        };\n        this._newVolumeImageCallback = (evt) => {\n            const { renderingEngineId, viewportId: sourceViewportId } = evt.detail;\n            const renderingEngine = getRenderingEngine(renderingEngineId);\n            const sourceViewport = renderingEngine.getViewport(sourceViewportId);\n            const { viewPlaneNormal: currentViewPlaneNormal } = sourceViewport.getCamera();\n            const magnifyViewportsMapEntries = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n            magnifyViewportsMapEntries.forEach(({ annotation }) => {\n                const { viewPlaneNormal } = annotation.metadata;\n                const isParallel = Math.abs(vec3.dot(viewPlaneNormal, currentViewPlaneNormal)) >\n                    PARALLEL_THRESHOLD;\n                if (!isParallel) {\n                    return;\n                }\n                const { handles } = annotation.data;\n                const worldImagePlanePoint = sourceViewport.canvasToWorld([0, 0]);\n                const vecHandleToImagePlane = vec3.sub(vec3.create(), worldImagePlanePoint, handles.points[0]);\n                const worldDist = vec3.dot(vecHandleToImagePlane, currentViewPlaneNormal);\n                const worldDelta = vec3.scale(vec3.create(), currentViewPlaneNormal, worldDist);\n                for (let i = 0, len = handles.points.length; i < len; i++) {\n                    const point = handles.points[i];\n                    point[0] += worldDelta[0];\n                    point[1] += worldDelta[1];\n                    point[2] += worldDelta[2];\n                }\n                annotation.invalidated = true;\n            });\n        };\n        this._magnifyViewportsMap = new Map();\n        this._initialize();\n    }\n    static getInstance() {\n        AdvancedMagnifyViewportManager._singleton =\n            AdvancedMagnifyViewportManager._singleton ??\n                new AdvancedMagnifyViewportManager();\n        return AdvancedMagnifyViewportManager._singleton;\n    }\n    getViewport(magnifyViewportId) {\n        return this._magnifyViewportsMap.get(magnifyViewportId)?.magnifyViewport;\n    }\n    dispose() {\n        this._removeEventListeners();\n        this._destroyViewports();\n    }\n    destroyViewport(magnifyViewportId) {\n        const magnifyViewportMapEntry = this._magnifyViewportsMap.get(magnifyViewportId);\n        if (magnifyViewportMapEntry) {\n            const { magnifyViewport } = magnifyViewportMapEntry;\n            const { viewport: sourceViewport } = magnifyViewport.sourceEnabledElement;\n            const { element: sourceElement } = sourceViewport;\n            this._removeSourceElementEventListener(sourceElement);\n            magnifyViewport.dispose();\n            this._magnifyViewportsMap.delete(magnifyViewportId);\n        }\n    }\n    _destroyViewports() {\n        const magnifyViewportIds = Array.from(this._magnifyViewportsMap.keys());\n        magnifyViewportIds.forEach((magnifyViewportId) => this.destroyViewport(magnifyViewportId));\n    }\n    _getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId) {\n        const magnifyViewportsMapEntries = Array.from(this._magnifyViewportsMap.values());\n        return magnifyViewportsMapEntries.filter(({ magnifyViewport }) => {\n            const { viewport } = magnifyViewport.sourceEnabledElement;\n            return viewport.id === sourceViewportId;\n        });\n    }\n    _reset(sourceViewportId) {\n        const magnifyViewports = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n        magnifyViewports.forEach(({ magnifyViewport, annotation, magnifyViewportInfo }) => {\n            this.destroyViewport(magnifyViewport.viewportId);\n            const newEnabledElement = getEnabledElementByViewportId(sourceViewportId);\n            this.createViewport(annotation, {\n                ...magnifyViewportInfo,\n                sourceEnabledElement: {\n                    ...newEnabledElement,\n                },\n            });\n        });\n    }\n    _addEventListeners() {\n        eventTarget.addEventListener(cstEvents.ANNOTATION_REMOVED, this._annotationRemovedCallback);\n    }\n    _removeEventListeners() {\n        eventTarget.removeEventListener(cstEvents.ANNOTATION_REMOVED, this._annotationRemovedCallback);\n    }\n    _addSourceElementEventListener(element) {\n        element.addEventListener(csEvents.STACK_NEW_IMAGE, this._newStackImageCallback);\n        const newStackHandler = (evt) => {\n            const { viewportId: sourceViewportId } = evt.detail;\n            this._reset(sourceViewportId);\n        };\n        element.addEventListener(csEvents.VIEWPORT_NEW_IMAGE_SET, newStackHandler);\n        const newVolumeHandler = (evt) => {\n            const { viewportId: sourceViewportId } = evt.detail;\n            this._reset(sourceViewportId);\n        };\n        element.addEventListener(csEvents.VOLUME_VIEWPORT_NEW_VOLUME, newVolumeHandler);\n        element.addEventListener(csEvents.VOLUME_NEW_IMAGE, this._newVolumeImageCallback);\n        element.newStackHandler = newStackHandler;\n        element.newVolumeHandler = newVolumeHandler;\n    }\n    _removeSourceElementEventListener(element) {\n        element.removeEventListener(csEvents.STACK_NEW_IMAGE, this._newStackImageCallback);\n        element.removeEventListener(csEvents.VOLUME_NEW_IMAGE, this._newVolumeImageCallback);\n        element.removeEventListener(csEvents.VIEWPORT_NEW_IMAGE_SET, element.newStackHandler);\n        element.removeEventListener(csEvents.VOLUME_VIEWPORT_NEW_VOLUME, element.newVolumeHandler);\n        delete element.newStackHandler;\n        delete element.newVolumeHandler;\n    }\n    _initialize() {\n        this._addEventListeners();\n    }\n}\nclass AdvancedMagnifyViewport {\n    constructor({ magnifyViewportId, sourceEnabledElement, radius = MAGNIFY_VIEWPORT_INITIAL_RADIUS, position = [0, 0], zoomFactor, autoPan, }) {\n        this._enabledElement = null;\n        this._sourceToolGroup = null;\n        this._magnifyToolGroup = null;\n        this._isViewportReady = false;\n        this._radius = 0;\n        this._resized = false;\n        this._canAutoPan = false;\n        this._viewportId = magnifyViewportId ?? csUtils.uuidv4();\n        this._sourceEnabledElement = sourceEnabledElement;\n        this._autoPan = autoPan;\n        this.radius = radius;\n        this.position = position;\n        this.zoomFactor = zoomFactor;\n        this.visible = true;\n        this._browserMouseDownCallback = this._browserMouseDownCallback.bind(this);\n        this._browserMouseUpCallback = this._browserMouseUpCallback.bind(this);\n        this._handleToolModeChanged = this._handleToolModeChanged.bind(this);\n        this._mouseDragCallback = this._mouseDragCallback.bind(this);\n        this._resizeViewportAsync = (debounce(this._resizeViewport.bind(this), 1));\n        this._initialize();\n    }\n    get sourceEnabledElement() {\n        return this._sourceEnabledElement;\n    }\n    get viewportId() {\n        return this._viewportId;\n    }\n    get radius() {\n        return this._radius;\n    }\n    set radius(radius) {\n        if (Math.abs(this._radius - radius) > 0.00001) {\n            this._radius = radius;\n            this._resized = true;\n        }\n    }\n    update() {\n        const { radius, position, visible } = this;\n        const { viewport } = this._enabledElement;\n        const { element } = viewport;\n        const size = 2 * radius;\n        const [x, y] = position;\n        if (this._resized) {\n            this._resizeViewportAsync();\n            this._resized = false;\n        }\n        Object.assign(element.style, {\n            display: visible ? 'block' : 'hidden',\n            width: `${size}px`,\n            height: `${size}px`,\n            left: `${-radius}px`,\n            top: `${-radius}px`,\n            transform: `translate(${x}px, ${y}px)`,\n        });\n        if (this._isViewportReady) {\n            this._syncViewports();\n            viewport.render();\n        }\n    }\n    dispose() {\n        const { viewport } = this._enabledElement;\n        const { element } = viewport;\n        const renderingEngine = viewport.getRenderingEngine();\n        this._removeEventListeners(element);\n        renderingEngine.disableElement(viewport.id);\n        if (element.parentNode) {\n            element.parentNode.removeChild(element);\n        }\n    }\n    _handleToolModeChanged(evt) {\n        const { _magnifyToolGroup: magnifyToolGroup } = this;\n        const { toolGroupId, toolName, mode, toolBindingsOptions } = evt.detail;\n        if (this._sourceToolGroup?.id !== toolGroupId) {\n            return;\n        }\n        switch (mode) {\n            case ToolModes.Active:\n                magnifyToolGroup.setToolActive(toolName, toolBindingsOptions);\n                break;\n            case ToolModes.Passive:\n                magnifyToolGroup.setToolPassive(toolName);\n                break;\n            case ToolModes.Enabled:\n                magnifyToolGroup.setToolEnabled(toolName);\n                break;\n            case ToolModes.Disabled:\n                magnifyToolGroup.setToolDisabled(toolName);\n                break;\n            default:\n                throw new Error(`Unknow tool mode (${mode})`);\n        }\n    }\n    _inheritBorderRadius(magnifyElement) {\n        const viewport = magnifyElement.querySelector('.viewport-element');\n        const canvas = magnifyElement.querySelector('.cornerstone-canvas');\n        viewport.style.borderRadius = 'inherit';\n        canvas.style.borderRadius = 'inherit';\n    }\n    _createViewportNode() {\n        const magnifyElement = document.createElement('div');\n        const { radius } = this;\n        const size = radius * 2;\n        magnifyElement.classList.add(MAGNIFY_CLASSNAME);\n        Object.assign(magnifyElement.style, {\n            display: 'block',\n            width: `${size}px`,\n            height: `${size}px`,\n            position: 'absolute',\n            overflow: 'hidden',\n            borderRadius: '50%',\n            boxSizing: 'border-box',\n            left: `${-radius}px`,\n            top: `${-radius}px`,\n            transform: `translate(-1000px, -1000px)`,\n        });\n        return magnifyElement;\n    }\n    _convertZoomFactorToParallelScale(viewport, magnifyViewport, zoomFactor) {\n        const { parallelScale } = viewport.getCamera();\n        const canvasRatio = magnifyViewport.canvas.offsetWidth / viewport.canvas.offsetWidth;\n        return parallelScale * (1 / zoomFactor) * canvasRatio;\n    }\n    _isStackViewport(viewport) {\n        return 'setStack' in viewport;\n    }\n    _isVolumeViewport(viewport) {\n        return 'addVolumes' in viewport;\n    }\n    _cloneToolGroups(sourceViewport, magnifyViewport) {\n        const sourceActors = sourceViewport.getActors();\n        const magnifyToolGroupId = `${magnifyViewport.id}-toolGroup`;\n        const sourceToolGroup = getToolGroupForViewport(sourceViewport.id, sourceViewport.renderingEngineId);\n        const magnifyToolGroup = sourceToolGroup.clone(magnifyToolGroupId, (toolName) => {\n            const toolInstance = sourceToolGroup.getToolInstance(toolName);\n            const isAnnotationTool = toolInstance instanceof AnnotationTool &&\n                !(toolInstance instanceof AdvancedMagnifyTool);\n            return isAnnotationTool;\n        });\n        magnifyToolGroup.addViewport(magnifyViewport.id, magnifyViewport.renderingEngineId);\n        sourceActors.filter(isSegmentation).forEach((actor) => {\n            addSegmentationRepresentations(this.viewportId, [\n                {\n                    segmentationId: actor.referencedId,\n                    type: SegmentationRepresentations.Labelmap,\n                },\n            ]);\n        });\n        return { sourceToolGroup, magnifyToolGroup };\n    }\n    _cloneStack(sourceViewport, magnifyViewport) {\n        const imageIds = sourceViewport.getImageIds();\n        magnifyViewport.setStack(imageIds).then(() => {\n            this._isViewportReady = true;\n            this.update();\n        });\n    }\n    _cloneVolumes(sourceViewport, magnifyViewport) {\n        const actors = sourceViewport.getActors();\n        const volumeInputArray = actors\n            .filter((actor) => !isSegmentation(actor))\n            .map((actor) => ({ volumeId: actor.uid }));\n        magnifyViewport.setVolumes(volumeInputArray).then(() => {\n            this._isViewportReady = true;\n            this.update();\n        });\n        return magnifyViewport;\n    }\n    _cloneViewport(sourceViewport, magnifyElement) {\n        const { viewportId: magnifyViewportId } = this;\n        const renderingEngine = sourceViewport.getRenderingEngine();\n        const { options: sourceViewportOptions } = sourceViewport;\n        const viewportInput = {\n            element: magnifyElement,\n            viewportId: magnifyViewportId,\n            type: sourceViewport.type,\n            defaultOptions: { ...sourceViewportOptions },\n        };\n        renderingEngine.enableElement(viewportInput);\n        const magnifyViewport = (renderingEngine.getViewport(magnifyViewportId));\n        if (this._isStackViewport(sourceViewport)) {\n            this._cloneStack(sourceViewport, magnifyViewport);\n        }\n        else if (this._isVolumeViewport(sourceViewport)) {\n            this._cloneVolumes(sourceViewport, magnifyViewport);\n        }\n        this._inheritBorderRadius(magnifyElement);\n        const toolGroups = this._cloneToolGroups(sourceViewport, magnifyViewport);\n        this._sourceToolGroup = toolGroups.sourceToolGroup;\n        this._magnifyToolGroup = toolGroups.magnifyToolGroup;\n    }\n    _cancelMouseEventCallback(evt) {\n        evt.stopPropagation();\n        evt.preventDefault();\n    }\n    _browserMouseUpCallback(evt) {\n        const { element } = this._enabledElement.viewport;\n        document.removeEventListener('mouseup', this._browserMouseUpCallback);\n        element.addEventListener('mouseup', this._cancelMouseEventCallback);\n        element.addEventListener('mousemove', this._cancelMouseEventCallback);\n    }\n    _browserMouseDownCallback(evt) {\n        const { element } = this._enabledElement.viewport;\n        this._canAutoPan = !!evt.target?.closest('.advancedMagnifyTool');\n        document.addEventListener('mouseup', this._browserMouseUpCallback);\n        element.removeEventListener('mouseup', this._cancelMouseEventCallback);\n        element.removeEventListener('mousemove', this._cancelMouseEventCallback);\n    }\n    _mouseDragCallback(evt) {\n        if (!state.isInteractingWithTool) {\n            return;\n        }\n        const { _autoPan: autoPan } = this;\n        if (!autoPan.enabled || !this._canAutoPan) {\n            return;\n        }\n        const { currentPoints } = evt.detail;\n        const { viewport } = this._enabledElement;\n        const { canvasToWorld } = viewport;\n        const { canvas: canvasCurrent } = currentPoints;\n        const { radius: magnifyRadius } = this;\n        const canvasCenter = [magnifyRadius, magnifyRadius];\n        const dist = distanceToPoint(canvasCenter, canvasCurrent);\n        const maxDist = magnifyRadius - autoPan.padding;\n        if (dist <= maxDist) {\n            return;\n        }\n        const panDist = dist - maxDist;\n        const canvasDeltaPos = vec2.sub(vec2.create(), canvasCurrent, canvasCenter);\n        vec2.normalize(canvasDeltaPos, canvasDeltaPos);\n        vec2.scale(canvasDeltaPos, canvasDeltaPos, panDist);\n        const newCanvasPosition = vec2.add(vec2.create(), this.position, canvasDeltaPos);\n        const currentWorldPos = canvasToWorld(this.position);\n        const newWorldPos = canvasToWorld(newCanvasPosition);\n        const worldDeltaPos = vec3.sub(vec3.create(), newWorldPos, currentWorldPos);\n        const autoPanCallbackData = {\n            points: {\n                currentPosition: {\n                    canvas: this.position,\n                    world: currentWorldPos,\n                },\n                newPosition: {\n                    canvas: newCanvasPosition,\n                    world: newWorldPos,\n                },\n            },\n            delta: {\n                canvas: canvasDeltaPos,\n                world: worldDeltaPos,\n            },\n        };\n        autoPan.callback(autoPanCallbackData);\n    }\n    _addBrowserEventListeners(element) {\n        document.addEventListener('mousedown', this._browserMouseDownCallback, true);\n        element.addEventListener('mousedown', this._cancelMouseEventCallback);\n        element.addEventListener('mouseup', this._cancelMouseEventCallback);\n        element.addEventListener('mousemove', this._cancelMouseEventCallback);\n        element.addEventListener('dblclick', this._cancelMouseEventCallback);\n    }\n    _removeBrowserEventListeners(element) {\n        document.removeEventListener('mousedown', this._browserMouseDownCallback, true);\n        document.removeEventListener('mouseup', this._browserMouseUpCallback);\n        element.removeEventListener('mousedown', this._cancelMouseEventCallback);\n        element.removeEventListener('mouseup', this._cancelMouseEventCallback);\n        element.removeEventListener('mousemove', this._cancelMouseEventCallback);\n        element.removeEventListener('dblclick', this._cancelMouseEventCallback);\n    }\n    _addEventListeners(element) {\n        eventTarget.addEventListener(cstEvents.TOOL_MODE_CHANGED, this._handleToolModeChanged);\n        element.addEventListener(cstEvents.MOUSE_MOVE, this._mouseDragCallback);\n        element.addEventListener(cstEvents.MOUSE_DRAG, this._mouseDragCallback);\n        this._addBrowserEventListeners(element);\n    }\n    _removeEventListeners(element) {\n        eventTarget.removeEventListener(cstEvents.TOOL_MODE_CHANGED, this._handleToolModeChanged);\n        element.addEventListener(cstEvents.MOUSE_MOVE, this._mouseDragCallback);\n        element.addEventListener(cstEvents.MOUSE_DRAG, this._mouseDragCallback);\n        this._removeBrowserEventListeners(element);\n    }\n    _initialize() {\n        const { _sourceEnabledElement: sourceEnabledElement } = this;\n        const { viewport: sourceViewport } = sourceEnabledElement;\n        const { canvas: sourceCanvas } = sourceViewport;\n        const magnifyElement = this._createViewportNode();\n        sourceCanvas.parentNode.appendChild(magnifyElement);\n        this._addEventListeners(magnifyElement);\n        this._cloneViewport(sourceViewport, magnifyElement);\n        this._enabledElement = getEnabledElement(magnifyElement);\n    }\n    _syncViewportsCameras(sourceViewport, magnifyViewport) {\n        const worldPos = sourceViewport.canvasToWorld(this.position);\n        const parallelScale = this._convertZoomFactorToParallelScale(sourceViewport, magnifyViewport, this.zoomFactor);\n        const { focalPoint, position, viewPlaneNormal } = magnifyViewport.getCamera();\n        const distance = Math.sqrt(Math.pow(focalPoint[0] - position[0], 2) +\n            Math.pow(focalPoint[1] - position[1], 2) +\n            Math.pow(focalPoint[2] - position[2], 2));\n        const updatedFocalPoint = [\n            worldPos[0],\n            worldPos[1],\n            worldPos[2],\n        ];\n        const updatedPosition = [\n            updatedFocalPoint[0] + distance * viewPlaneNormal[0],\n            updatedFocalPoint[1] + distance * viewPlaneNormal[1],\n            updatedFocalPoint[2] + distance * viewPlaneNormal[2],\n        ];\n        magnifyViewport.setCamera({\n            parallelScale,\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n    }\n    _syncStackViewports(sourceViewport, magnifyViewport) {\n        magnifyViewport.setImageIdIndex(sourceViewport.getCurrentImageIdIndex());\n    }\n    _syncViewports() {\n        const { viewport: sourceViewport } = this._sourceEnabledElement;\n        const { viewport: magnifyViewport } = this._enabledElement;\n        const sourceProperties = sourceViewport.getProperties();\n        const imageData = magnifyViewport.getImageData();\n        if (!imageData) {\n            return;\n        }\n        magnifyViewport.setProperties(sourceProperties);\n        this._syncViewportsCameras(sourceViewport, magnifyViewport);\n        if (this._isStackViewport(sourceViewport)) {\n            this._syncStackViewports(sourceViewport, magnifyViewport);\n        }\n        this._syncViewportsCameras(sourceViewport, magnifyViewport);\n        magnifyViewport.render();\n    }\n    _resizeViewport() {\n        const { viewport } = this._enabledElement;\n        const renderingEngine = viewport.getRenderingEngine();\n        renderingEngine.resize();\n    }\n}\nAdvancedMagnifyTool.toolName = 'AdvancedMagnify';\nexport { AdvancedMagnifyTool as default };\n","import { vec3 } from 'gl-matrix';\nimport { getRenderingEngines, CONSTANTS, utilities as csUtils, } from '@cornerstonejs/core';\nimport { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport { addAnnotation } from '../stateManagement/annotation/annotationState';\nimport { drawLine as drawLineSvg } from '../drawingSvg';\nimport { filterViewportsWithToolEnabled } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nconst { EPSILON } = CONSTANTS;\nclass ReferenceLines extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            sourceViewportId: '',\n            enforceSameFrameOfReference: true,\n            showFullDimension: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.editData = null;\n        this._init = () => {\n            const renderingEngines = getRenderingEngines();\n            const renderingEngine = renderingEngines[0];\n            if (!renderingEngine) {\n                return;\n            }\n            let viewports = renderingEngine.getViewports();\n            viewports = filterViewportsWithToolEnabled(viewports, this.getToolName());\n            const sourceViewport = renderingEngine.getViewport(this.configuration.sourceViewportId);\n            if (!sourceViewport?.getImageData()) {\n                return;\n            }\n            const { element } = sourceViewport;\n            const { viewUp, viewPlaneNormal } = sourceViewport.getCamera();\n            const sourceViewportCanvasCornersInWorld = csUtils.getViewportImageCornersInWorld(sourceViewport);\n            let annotation = this.editData?.annotation;\n            const FrameOfReferenceUID = sourceViewport.getFrameOfReferenceUID();\n            if (!annotation) {\n                const newAnnotation = {\n                    highlighted: true,\n                    invalidated: true,\n                    metadata: {\n                        toolName: this.getToolName(),\n                        viewPlaneNormal: [...viewPlaneNormal],\n                        viewUp: [...viewUp],\n                        FrameOfReferenceUID,\n                        referencedImageId: null,\n                    },\n                    data: {\n                        handles: {\n                            points: sourceViewportCanvasCornersInWorld,\n                        },\n                    },\n                };\n                addAnnotation(newAnnotation, element);\n                annotation = newAnnotation;\n            }\n            else {\n                this.editData.annotation.data.handles.points =\n                    sourceViewportCanvasCornersInWorld;\n            }\n            this.editData = {\n                sourceViewportId: sourceViewport.id,\n                renderingEngine,\n                annotation,\n            };\n            triggerAnnotationRenderForViewportIds(viewports\n                .filter((viewport) => viewport.id !== sourceViewport.id)\n                .map((viewport) => viewport.id));\n        };\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onSetToolConfiguration = () => {\n            this._init();\n        };\n        this.onCameraModified = (evt) => {\n            this._init();\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const { viewport: targetViewport } = enabledElement;\n            if (!this.editData) {\n                return false;\n            }\n            const { annotation, sourceViewportId } = this.editData;\n            let renderStatus = false;\n            const { viewport: sourceViewport } = getEnabledElementByViewportId(sourceViewportId) || {};\n            if (!sourceViewport) {\n                return renderStatus;\n            }\n            if (sourceViewport.id === targetViewport.id) {\n                return renderStatus;\n            }\n            if (!annotation || !annotation?.data?.handles?.points) {\n                return renderStatus;\n            }\n            if (this.configuration.enforceSameFrameOfReference &&\n                sourceViewport.getFrameOfReferenceUID() !==\n                    targetViewport.getFrameOfReferenceUID()) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const topLeft = annotation.data.handles.points[0];\n            const topRight = annotation.data.handles.points[1];\n            const bottomLeft = annotation.data.handles.points[2];\n            const bottomRight = annotation.data.handles.points[3];\n            const { focalPoint, viewPlaneNormal, viewUp } = targetViewport.getCamera();\n            const { viewPlaneNormal: sourceViewPlaneNormal } = sourceViewport.getCamera();\n            if (this.isParallel(viewPlaneNormal, sourceViewPlaneNormal)) {\n                return renderStatus;\n            }\n            const targetViewportPlane = csUtils.planar.planeEquation(viewPlaneNormal, focalPoint);\n            const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n            const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];\n            let pointSetToUse = pointSet1;\n            let topBottomVec = vec3.subtract(vec3.create(), pointSet1[0], pointSet1[1]);\n            topBottomVec = vec3.normalize(vec3.create(), topBottomVec);\n            let topRightVec = vec3.subtract(vec3.create(), pointSet1[2], pointSet1[0]);\n            topRightVec = vec3.normalize(vec3.create(), topRightVec);\n            const newNormal = vec3.cross(vec3.create(), topBottomVec, topRightVec);\n            if (this.isParallel(newNormal, viewPlaneNormal)) {\n                return renderStatus;\n            }\n            if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {\n                pointSetToUse = pointSet2;\n            }\n            const lineStartWorld = csUtils.planar.linePlaneIntersection(pointSetToUse[0], pointSetToUse[1], targetViewportPlane);\n            const lineEndWorld = csUtils.planar.linePlaneIntersection(pointSetToUse[2], pointSetToUse[3], targetViewportPlane);\n            const { annotationUID } = annotation;\n            styleSpecifier.annotationUID = annotationUID;\n            const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n            const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n            const color = this.getStyle('color', styleSpecifier, annotation);\n            const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n            let canvasCoordinates = [lineStartWorld, lineEndWorld].map((world) => targetViewport.worldToCanvas(world));\n            if (this.configuration.showFullDimension) {\n                canvasCoordinates = this.handleFullDimension(targetViewport, lineStartWorld, viewPlaneNormal, viewUp, lineEndWorld, canvasCoordinates);\n            }\n            if (canvasCoordinates.length < 2) {\n                return renderStatus;\n            }\n            const dataId = `${annotationUID}-line`;\n            const lineUID = '1';\n            drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                color,\n                width: lineWidth,\n                lineDash,\n                shadow,\n            }, dataId);\n            renderStatus = true;\n            return renderStatus;\n        };\n        this.isPerpendicular = (vec1, vec2) => {\n            const dot = vec3.dot(vec1, vec2);\n            return Math.abs(dot) < EPSILON;\n        };\n    }\n    handleFullDimension(targetViewport, lineStartWorld, viewPlaneNormal, viewUp, lineEndWorld, canvasCoordinates) {\n        const renderingEngine = targetViewport.getRenderingEngine();\n        const targetId = this.getTargetId(targetViewport);\n        const targetImage = this.getTargetImageData(targetId);\n        const referencedImageId = this.getReferencedImageId(targetViewport, lineStartWorld, viewPlaneNormal, viewUp);\n        if (referencedImageId && targetImage) {\n            try {\n                const { imageData, dimensions } = targetImage;\n                const [topLeftImageCoord, topRightImageCoord, bottomRightImageCoord, bottomLeftImageCoord,] = [\n                    imageData.indexToWorld([0, 0, 0]),\n                    imageData.indexToWorld([dimensions[0] - 1, 0, 0]),\n                    imageData.indexToWorld([\n                        dimensions[0] - 1,\n                        dimensions[1] - 1,\n                        0,\n                    ]),\n                    imageData.indexToWorld([0, dimensions[1] - 1, 0]),\n                ].map((world) => csUtils.worldToImageCoords(referencedImageId, world));\n                const [lineStartImageCoord, lineEndImageCoord] = [\n                    lineStartWorld,\n                    lineEndWorld,\n                ].map((world) => csUtils.worldToImageCoords(referencedImageId, world));\n                canvasCoordinates = [\n                    [topLeftImageCoord, topRightImageCoord],\n                    [topRightImageCoord, bottomRightImageCoord],\n                    [bottomLeftImageCoord, bottomRightImageCoord],\n                    [topLeftImageCoord, bottomLeftImageCoord],\n                ]\n                    .map(([start, end]) => this.intersectInfiniteLines(start, end, lineStartImageCoord, lineEndImageCoord))\n                    .filter((point) => point && this.isInBound(point, dimensions))\n                    .map((point) => {\n                    const world = csUtils.imageToWorldCoords(referencedImageId, point);\n                    return targetViewport.worldToCanvas(world);\n                });\n            }\n            catch (err) {\n                console.log(err);\n            }\n        }\n        return canvasCoordinates;\n    }\n    intersectInfiniteLines(line1Start, line1End, line2Start, line2End) {\n        const [x1, y1] = line1Start;\n        const [x2, y2] = line1End;\n        const [x3, y3] = line2Start;\n        const [x4, y4] = line2End;\n        const a1 = y2 - y1;\n        const b1 = x1 - x2;\n        const c1 = x2 * y1 - x1 * y2;\n        const a2 = y4 - y3;\n        const b2 = x3 - x4;\n        const c2 = x4 * y3 - x3 * y4;\n        if (Math.abs(a1 * b2 - a2 * b1) < EPSILON) {\n            return;\n        }\n        const x = (b1 * c2 - b2 * c1) / (a1 * b2 - a2 * b1);\n        const y = (a2 * c1 - a1 * c2) / (a1 * b2 - a2 * b1);\n        return [x, y];\n    }\n    isParallel(vec1, vec2) {\n        return Math.abs(vec3.dot(vec1, vec2)) > 1 - EPSILON;\n    }\n    isInBound(point, dimensions) {\n        return (point[0] >= 0 &&\n            point[0] <= dimensions[0] &&\n            point[1] >= 0 &&\n            point[1] <= dimensions[1]);\n    }\n}\nReferenceLines.toolName = 'ReferenceLines';\nexport default ReferenceLines;\n","import { vec3 } from 'gl-matrix';\nimport { metaData, CONSTANTS, getRenderingEngine, utilities as csUtils, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport { drawLine as drawLineSvg } from '../drawingSvg';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nconst { EPSILON } = CONSTANTS;\nclass OverlayGridTool extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            sourceImageIds: [],\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onSetToolActive = () => {\n            this._init();\n        };\n        this._init = () => {\n            const sourceImageIds = this.configuration.sourceImageIds;\n            if (!sourceImageIds?.length) {\n                console.warn('OverlayGridTool: No sourceImageIds provided in configuration');\n                return;\n            }\n            const imagePlaneModule = metaData.get('imagePlaneModule', sourceImageIds[0]);\n            if (!imagePlaneModule) {\n                console.warn('OverlayGridTool: No imagePlaneModule found for sourceImageIds');\n                return;\n            }\n            const { frameOfReferenceUID } = imagePlaneModule;\n            const viewportsInfo = getToolGroup(this.toolGroupId).viewportsInfo;\n            if (!viewportsInfo?.length) {\n                console.warn('OverlayGridTool: No viewports found');\n                return;\n            }\n            const annotations = getAnnotations(this.getToolName(), frameOfReferenceUID);\n            if (!annotations?.length) {\n                const pointSets = sourceImageIds.map((id) => {\n                    return this.calculateImageIdPointSets(id);\n                });\n                const newAnnotation = {\n                    highlighted: true,\n                    invalidated: true,\n                    metadata: {\n                        toolName: this.getToolName(),\n                        FrameOfReferenceUID: frameOfReferenceUID,\n                        referencedImageId: null,\n                    },\n                    data: {\n                        viewportData: new Map(),\n                        pointSets,\n                    },\n                };\n                addAnnotation(newAnnotation, frameOfReferenceUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n        };\n        this.calculateImageIdPointSets = (imageId) => {\n            const { imagePositionPatient, rows, columns, rowCosines, columnCosines, rowPixelSpacing, columnPixelSpacing, } = metaData.get('imagePlaneModule', imageId);\n            const topLeft = [...imagePositionPatient];\n            const topRight = [...imagePositionPatient];\n            const bottomLeft = [...imagePositionPatient];\n            const bottomRight = [...imagePositionPatient];\n            vec3.scaleAndAdd(topRight, imagePositionPatient, columnCosines, columns * columnPixelSpacing);\n            vec3.scaleAndAdd(bottomLeft, imagePositionPatient, rowCosines, rows * rowPixelSpacing);\n            vec3.scaleAndAdd(bottomRight, bottomLeft, columnCosines, columns * columnPixelSpacing);\n            const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n            const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];\n            return { pointSet1, pointSet2 };\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const sourceImageIds = this.configuration.sourceImageIds;\n            let renderStatus = false;\n            if (!sourceImageIds?.length) {\n                return renderStatus;\n            }\n            const { viewport: targetViewport, FrameOfReferenceUID } = enabledElement;\n            const targetImageIds = targetViewport.getImageIds();\n            if (targetImageIds.length < 2) {\n                return renderStatus;\n            }\n            const annotations = getAnnotations(this.getToolName(), FrameOfReferenceUID);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const annotation = annotations[0];\n            const { annotationUID } = annotation;\n            const { focalPoint, viewPlaneNormal } = targetViewport.getCamera();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const imageIdNormal = (this.getImageIdNormal(sourceImageIds[0]));\n            if (this.isParallel(viewPlaneNormal, imageIdNormal)) {\n                return renderStatus;\n            }\n            const targetViewportPlane = csUtils.planar.planeEquation(viewPlaneNormal, focalPoint);\n            const pointSets = annotation.data.pointSets;\n            const viewportData = annotation.data.viewportData;\n            for (let i = 0; i < sourceImageIds.length; i++) {\n                const { pointSet1, pointSet2 } = pointSets[i];\n                const targetData = viewportData.get(targetViewport.id) ||\n                    this.initializeViewportData(viewportData, targetViewport.id);\n                if (!targetData.pointSetsToUse[i]) {\n                    let pointSetToUse = pointSet1;\n                    let topBottomVec = vec3.subtract(vec3.create(), pointSet1[0], pointSet1[1]);\n                    topBottomVec = vec3.normalize(vec3.create(), topBottomVec);\n                    if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {\n                        pointSetToUse = pointSet2;\n                    }\n                    targetData.pointSetsToUse[i] = pointSetToUse;\n                    targetData.lineStartsWorld[i] = csUtils.planar.linePlaneIntersection(pointSetToUse[0], pointSetToUse[1], targetViewportPlane);\n                    targetData.lineEndsWorld[i] = csUtils.planar.linePlaneIntersection(pointSetToUse[2], pointSetToUse[3], targetViewportPlane);\n                }\n                const lineStartWorld = targetData.lineStartsWorld[i];\n                const lineEndWorld = targetData.lineEndsWorld[i];\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n                const canvasCoordinates = [lineStartWorld, lineEndWorld].map((world) => targetViewport.worldToCanvas(world));\n                const dataId = `${annotationUID}-line`;\n                const lineUID = `${i}`;\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId);\n            }\n            renderStatus = true;\n            return renderStatus;\n        };\n        this.initializeViewportData = (viewportData, id) => {\n            viewportData.set(id, {\n                pointSetsToUse: [],\n                lineStartsWorld: [],\n                lineEndsWorld: [],\n            });\n            return viewportData.get(id);\n        };\n        this.isPerpendicular = (vec1, vec2) => {\n            const dot = vec3.dot(vec1, vec2);\n            return Math.abs(dot) < EPSILON;\n        };\n    }\n    isParallel(vec1, vec2) {\n        return Math.abs(vec3.dot(vec1, vec2)) > 1 - EPSILON;\n    }\n    getImageIdNormal(imageId) {\n        const { imageOrientationPatient } = metaData.get('imagePlaneModule', imageId);\n        const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n        const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n        return vec3.cross(vec3.create(), rowCosineVec, colCosineVec);\n    }\n}\nOverlayGridTool.toolName = 'OverlayGrid';\nexport default OverlayGridTool;\n","import { getRenderingEngine } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { drawPath } from '../drawingSvg';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport { distanceToPoint } from '../utilities/math/point';\nimport { pointToString } from '../utilities/pointToString';\nimport { polyDataUtils } from '../utilities';\nclass SegmentationIntersectionTool extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            opacity: 0.5,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._init = () => {\n            const viewportsInfo = getToolGroup(this.toolGroupId).viewportsInfo;\n            if (!viewportsInfo?.length) {\n                console.warn(this.getToolName() + 'Tool: No viewports found');\n                return;\n            }\n            const firstViewport = getRenderingEngine(viewportsInfo[0].renderingEngineId)?.getViewport(viewportsInfo[0].viewportId);\n            if (!firstViewport) {\n                return;\n            }\n            const frameOfReferenceUID = firstViewport.getFrameOfReferenceUID();\n            const annotations = getAnnotations(this.getToolName(), frameOfReferenceUID);\n            if (!annotations?.length) {\n                const actorsWorldPointsMap = new Map();\n                calculateSurfaceSegmentationIntersections(actorsWorldPointsMap, viewportsInfo);\n                const newAnnotation = {\n                    highlighted: true,\n                    invalidated: true,\n                    metadata: {\n                        toolName: this.getToolName(),\n                        FrameOfReferenceUID: frameOfReferenceUID,\n                        referencedImageId: null,\n                    },\n                    data: {\n                        actorsWorldPointsMap,\n                    },\n                };\n                addAnnotation(newAnnotation, frameOfReferenceUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n        };\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onCameraModified = (evt) => {\n            this._init();\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const { viewport, FrameOfReferenceUID } = enabledElement;\n            let renderStatus = false;\n            const annotations = getAnnotations(this.getToolName(), FrameOfReferenceUID);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const annotation = annotations[0];\n            const { annotationUID } = annotation;\n            const actorsWorldPointsMap = (annotation).data.actorsWorldPointsMap;\n            calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport);\n            const actorEntries = viewport.getActors();\n            const cacheId = getCacheId(viewport);\n            actorEntries.forEach((actorEntry) => {\n                if (!actorEntry?.clippingFilter) {\n                    return;\n                }\n                const actorWorldPointMap = actorsWorldPointsMap.get(actorEntry.uid);\n                if (!actorWorldPointMap) {\n                    return;\n                }\n                if (!actorWorldPointMap.get(cacheId)) {\n                    return;\n                }\n                let polyLineIdx = 1;\n                const { worldPointsSet, color } = actorWorldPointMap.get(cacheId);\n                for (let i = 0; i < worldPointsSet.length; i++) {\n                    const worldPoints = worldPointsSet[i];\n                    const canvasPoints = worldPoints.map((point) => viewport.worldToCanvas(point));\n                    const options = {\n                        color: color,\n                        fillColor: color,\n                        fillOpacity: this.configuration.opacity,\n                        closePath: true,\n                        lineWidth: 2,\n                    };\n                    const polyLineUID = actorEntry.uid + '#' + polyLineIdx;\n                    drawPath(svgDrawingHelper, annotationUID, polyLineUID, canvasPoints, options);\n                    polyLineIdx++;\n                }\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nfunction calculateSurfaceSegmentationIntersections(actorsWorldPointsMap, viewportsInfo) {\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n        const viewport = getRenderingEngine(renderingEngineId)?.getViewport(viewportId);\n        calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport);\n    });\n}\nfunction calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport) {\n    const actorEntries = viewport.getActors();\n    const cacheId = getCacheId(viewport);\n    actorEntries.forEach((actorEntry) => {\n        if (!actorEntry?.clippingFilter) {\n            return;\n        }\n        let actorWorldPointsMap = actorsWorldPointsMap.get(actorEntry.uid);\n        if (!actorWorldPointsMap) {\n            actorWorldPointsMap = new Map();\n            actorsWorldPointsMap.set(actorEntry.uid, actorWorldPointsMap);\n        }\n        if (!actorWorldPointsMap.get(cacheId)) {\n            const polyData = actorEntry.clippingFilter.getOutputData();\n            const worldPointsSet = polyDataUtils.getPolyDataPoints(polyData);\n            if (!worldPointsSet) {\n                return;\n            }\n            const colorArray = actorEntry.actor.getProperty().getColor();\n            const color = colorToString(colorArray);\n            actorWorldPointsMap.set(cacheId, { worldPointsSet, color });\n        }\n    });\n}\nfunction getCacheId(viewport) {\n    const { viewPlaneNormal } = viewport.getCamera();\n    const imageIndex = viewport.getCurrentImageIdIndex();\n    return `${viewport.id}-${pointToString(viewPlaneNormal)}-${imageIndex}`;\n}\nfunction colorToString(colorArray) {\n    function colorComponentToString(component) {\n        let componentString = Math.floor(component * 255).toString(16);\n        if (componentString.length === 1) {\n            componentString = '0' + componentString;\n        }\n        return componentString;\n    }\n    return ('#' +\n        colorComponentToString(colorArray[0]) +\n        colorComponentToString(colorArray[1]) +\n        colorComponentToString(colorArray[2]));\n}\nfunction removeExtraPoints(viewport, worldPointsSet) {\n    return worldPointsSet.map((worldPoints) => {\n        const canvasPoints = worldPoints.map((point) => {\n            const canvasPoint = viewport.worldToCanvas(point);\n            return [Math.floor(canvasPoint[0]), Math.floor(canvasPoint[1])];\n        });\n        let lastPoint;\n        const newWorldPoints = [];\n        let newCanvasPoints = [];\n        for (let i = 0; i < worldPoints.length; i++) {\n            if (lastPoint) {\n                if (distanceToPoint(lastPoint, canvasPoints[i]) > 0) {\n                    newWorldPoints.push(worldPoints[i]);\n                    newCanvasPoints.push(canvasPoints[i]);\n                }\n            }\n            lastPoint = canvasPoints[i];\n        }\n        const firstPoint = newCanvasPoints[0];\n        for (let j = Math.min(30, newCanvasPoints.length); j < newCanvasPoints.length; j++) {\n            if (distanceToPoint(firstPoint, newCanvasPoints[j]) < 0.5) {\n                newCanvasPoints = newCanvasPoints.slice(0, j);\n                return newWorldPoints.slice(0, j);\n            }\n        }\n        return newWorldPoints;\n    });\n}\nSegmentationIntersectionTool.toolName = 'SegmentationIntersection';\nexport default SegmentationIntersectionTool;\n","export function pointToString(point, decimals = 5) {\n    return (parseFloat(point[0]).toFixed(decimals) +\n        ',' +\n        parseFloat(point[1]).toFixed(decimals) +\n        ',' +\n        parseFloat(point[2]).toFixed(decimals) +\n        ',');\n}\n","import { getEnabledElement, StackViewport, VolumeViewport, utilities, getEnabledElementByIds, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { isAnnotationVisible } from '../stateManagement/annotation/annotationVisibility';\nimport { drawLine } from '../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { vec3 } from 'gl-matrix';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { hideElementCursor, resetElementCursor, } from '../cursors/elementCursor';\nimport { getToolGroup } from '../store/ToolGroupManager';\nclass ReferenceCursors extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            displayThreshold: 5,\n            positionSync: true,\n            disableCursor: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isDrawing = false;\n        this.isHandleOutsideImage = false;\n        this._elementWithCursor = null;\n        this._currentCursorWorldPosition = null;\n        this._currentCanvasPosition = null;\n        this._disableCursorEnabled = false;\n        this.mouseMoveCallback = (evt) => {\n            const { detail } = evt;\n            const { element, currentPoints } = detail;\n            this._currentCursorWorldPosition = currentPoints.world;\n            this._currentCanvasPosition = currentPoints.canvas;\n            this._elementWithCursor = element;\n            const annotation = this.getActiveAnnotation(element);\n            if (annotation === null) {\n                this.createInitialAnnotation(currentPoints.world, element);\n                return false;\n            }\n            this.updateAnnotationPosition(element, annotation);\n            return false;\n        };\n        this.createInitialAnnotation = (worldPos, element) => {\n            const enabledElement = getEnabledElement(element);\n            if (!enabledElement) {\n                throw new Error('No enabled element found');\n            }\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            if (!viewPlaneNormal || !viewUp) {\n                throw new Error('Camera not found');\n            }\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        points: [[...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                },\n            };\n            const annotations = getAnnotations(this.getToolName(), element);\n            if (annotations.length > 0) {\n                return null;\n            }\n            const annotationId = addAnnotation(annotation, element);\n            if (annotationId === null) {\n                return;\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.onCameraModified = (evt) => {\n            const eventDetail = evt.detail;\n            const { element, previousCamera, camera } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const viewport = enabledElement.viewport;\n            if (element !== this._elementWithCursor) {\n                return;\n            }\n            const oldFocalPoint = previousCamera.focalPoint;\n            const cameraNormal = camera.viewPlaneNormal;\n            const newFocalPoint = camera.focalPoint;\n            const deltaCameraFocalPoint = [0, 0, 0];\n            vtkMath.subtract(newFocalPoint, oldFocalPoint, deltaCameraFocalPoint);\n            if (deltaCameraFocalPoint.reduce((a, b) => a + b, 0) === 0) {\n                return;\n            }\n            const dotProduct = vtkMath.dot(deltaCameraFocalPoint, cameraNormal);\n            if (Math.abs(dotProduct) < 1e-2) {\n                return;\n            }\n            if (!this._currentCanvasPosition) {\n                return;\n            }\n            const newWorldPos = viewport.canvasToWorld(this._currentCanvasPosition);\n            this._currentCursorWorldPosition = newWorldPos;\n            this.updateAnnotationPosition(element, this.getActiveAnnotation(element));\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport, FrameOfReferenceUID } = enabledElement;\n            const isElementWithCursor = this._elementWithCursor === viewport.element;\n            if (this.configuration.positionSync && !isElementWithCursor) {\n                this.updateViewportImage(viewport);\n            }\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points } = handles;\n                if (!annotationUID) {\n                    return renderStatus;\n                }\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidthBase = parseFloat(this.getStyle('lineWidth', styleSpecifier, annotation));\n                const lineWidth = typeof lineWidthBase === 'number' && isElementWithCursor\n                    ? lineWidthBase\n                    : lineWidthBase;\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                if (points[0].some((e) => isNaN(e))) {\n                    return renderStatus;\n                }\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                const crosshairUIDs = {\n                    upper: 'upper',\n                    right: 'right',\n                    lower: 'lower',\n                    left: 'left',\n                };\n                const [x, y] = canvasCoordinates[0];\n                const centerSpace = isElementWithCursor ? 20 : 7;\n                const lineLength = isElementWithCursor ? 5 : 7;\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.upper, [x, y - (centerSpace / 2 + lineLength)], [x, y - centerSpace / 2], { color, lineDash, lineWidth });\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.lower, [x, y + (centerSpace / 2 + lineLength)], [x, y + centerSpace / 2], { color, lineDash, lineWidth });\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.right, [x + (centerSpace / 2 + lineLength), y], [x + centerSpace / 2, y], { color, lineDash, lineWidth });\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.left, [x - (centerSpace / 2 + lineLength), y], [x - centerSpace / 2, y], { color, lineDash, lineWidth });\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n        this._disableCursorEnabled = this.configuration.disableCursor;\n    }\n    onSetToolActive() {\n        this._disableCursorEnabled = this.configuration.disableCursor;\n        if (!this._disableCursorEnabled) {\n            return;\n        }\n        const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n        if (!viewportIds) {\n            return;\n        }\n        const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));\n        enabledElements.forEach((element) => {\n            if (element) {\n                hideElementCursor(element.viewport.element);\n            }\n        });\n    }\n    onSetToolDisabled() {\n        if (!this._disableCursorEnabled) {\n            return;\n        }\n        const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n        if (!viewportIds) {\n            return;\n        }\n        const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));\n        enabledElements.forEach((element) => {\n            if (element) {\n                resetElementCursor(element.viewport.element);\n            }\n        });\n    }\n    getActiveAnnotation(element) {\n        const annotations = getAnnotations(this.getToolName(), element);\n        if (!annotations.length) {\n            return null;\n        }\n        const targetAnnotation = annotations[0];\n        return targetAnnotation;\n    }\n    updateAnnotationPosition(element, annotation) {\n        const worldPos = this._currentCursorWorldPosition;\n        if (!worldPos) {\n            return;\n        }\n        if (!annotation.data?.handles?.points) {\n            return;\n        }\n        annotation.data.handles.points = [[...worldPos]];\n        annotation.invalidated = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n    }\n    filterInteractableAnnotationsForElement(element, annotations) {\n        if (!(annotations instanceof Array) || annotations.length === 0) {\n            return [];\n        }\n        const annotation = annotations[0];\n        const viewport = getEnabledElement(element)?.viewport;\n        if (!viewport) {\n            return [];\n        }\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, focalPoint } = camera;\n        if (!viewPlaneNormal || !focalPoint) {\n            return [];\n        }\n        const points = annotation.data?.handles?.points;\n        if (!(points instanceof Array) || points.length !== 1) {\n            return [];\n        }\n        const worldPos = points[0];\n        const plane = utilities.planar.planeEquation(viewPlaneNormal, focalPoint);\n        const distance = utilities.planar.planeDistanceToPoint(plane, worldPos);\n        return distance < this.configuration.displayThreshold ? [annotation] : [];\n    }\n    updateViewportImage(viewport) {\n        const currentMousePosition = this._currentCursorWorldPosition;\n        if (!currentMousePosition || currentMousePosition.some((e) => isNaN(e))) {\n            return;\n        }\n        if (viewport instanceof StackViewport) {\n            const closestIndex = utilities.getClosestStackImageIndexForPoint(currentMousePosition, viewport);\n            if (closestIndex === null) {\n                return;\n            }\n            if (closestIndex !== viewport.getCurrentImageIdIndex()) {\n                viewport.setImageIdIndex(closestIndex);\n            }\n        }\n        else if (viewport instanceof VolumeViewport) {\n            const { focalPoint, viewPlaneNormal } = viewport.getCamera();\n            if (!focalPoint || !viewPlaneNormal) {\n                return;\n            }\n            const plane = utilities.planar.planeEquation(viewPlaneNormal, focalPoint);\n            const currentDistance = utilities.planar.planeDistanceToPoint(plane, currentMousePosition, true);\n            if (Math.abs(currentDistance) < 0.5) {\n                return;\n            }\n            const normalizedViewPlane = vec3.normalize(vec3.create(), vec3.fromValues(...viewPlaneNormal));\n            const scaledPlaneNormal = vec3.scale(vec3.create(), normalizedViewPlane, currentDistance);\n            const newFocalPoint = vec3.add(vec3.create(), vec3.fromValues(...focalPoint), scaledPlaneNormal);\n            const isInBounds = true;\n            if (isInBounds) {\n                viewport.setCamera({ focalPoint: newFocalPoint });\n                const renderingEngine = viewport.getRenderingEngine();\n                if (renderingEngine) {\n                    renderingEngine.renderViewport(viewport.id);\n                }\n            }\n        }\n    }\n}\nReferenceCursors.toolName = 'ReferenceCursors';\nexport default ReferenceCursors;\n","import AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport { vec3 } from 'gl-matrix';\nimport { getEnabledElementByIds, getRenderingEngines, utilities as csUtils, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { drawLine as drawLineSvg, drawTextBox as drawTextBoxSvg, } from '../drawingSvg';\nimport { getToolGroup } from '../store/ToolGroupManager';\nconst viewportsWithAnnotations = [];\nclass ScaleOverlayTool extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            viewportId: '',\n            scaleLocation: 'bottom',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.editData = null;\n        this._init = () => {\n            const renderingEngines = getRenderingEngines();\n            const renderingEngine = renderingEngines[0];\n            if (!renderingEngine) {\n                return;\n            }\n            const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n            if (!viewportIds) {\n                return;\n            }\n            const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));\n            let { viewport } = enabledElements[0];\n            const { FrameOfReferenceUID } = enabledElements[0];\n            if (this.configuration.viewportId) {\n                enabledElements.forEach((element) => {\n                    if (element.viewport.id == this.configuration.viewportId) {\n                        viewport = element.viewport;\n                    }\n                });\n            }\n            if (!viewport) {\n                return;\n            }\n            const { viewUp, viewPlaneNormal } = viewport.getCamera();\n            const viewportCanvasCornersInWorld = csUtils.getViewportImageCornersInWorld(viewport);\n            let annotation = this.editData?.annotation;\n            const annotations = getAnnotations(this.getToolName(), viewport.element);\n            if (annotations.length) {\n                annotation = annotations.filter((thisAnnotation) => thisAnnotation.data.viewportId == viewport.id)[0];\n            }\n            enabledElements.forEach((element) => {\n                const { viewport } = element;\n                if (!viewportsWithAnnotations.includes(viewport.id)) {\n                    const newAnnotation = {\n                        metadata: {\n                            toolName: this.getToolName(),\n                            viewPlaneNormal: [...viewPlaneNormal],\n                            viewUp: [...viewUp],\n                            FrameOfReferenceUID,\n                            referencedImageId: null,\n                        },\n                        data: {\n                            handles: {\n                                points: csUtils.getViewportImageCornersInWorld(viewport),\n                            },\n                            viewportId: viewport.id,\n                        },\n                    };\n                    viewportsWithAnnotations.push(viewport.id);\n                    addAnnotation(newAnnotation, viewport.element);\n                    annotation = newAnnotation;\n                }\n            });\n            if (this.editData?.annotation &&\n                this.editData.annotation.data.viewportId == viewport.id) {\n                this.editData.annotation.data.handles.points =\n                    viewportCanvasCornersInWorld;\n                this.editData.annotation.data.viewportId = viewport.id;\n            }\n            this.editData = {\n                viewport,\n                renderingEngine,\n                annotation,\n            };\n        };\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onCameraModified = (evt) => {\n            this.configuration.viewportId = evt.detail.viewportId;\n            this._init();\n        };\n        this.computeScaleSize = (worldWidthViewport, worldHeightViewport, location) => {\n            const scaleSizes = [\n                16000, 8000, 4000, 2000, 1000, 500, 250, 100, 50, 25, 10, 5, 2,\n            ];\n            let currentScaleSize;\n            if (location == 'top' || location == 'bottom') {\n                currentScaleSize = scaleSizes.filter((scaleSize) => scaleSize < worldWidthViewport * 0.6 &&\n                    scaleSize > worldWidthViewport * 0.2);\n            }\n            else {\n                currentScaleSize = scaleSizes.filter((scaleSize) => scaleSize < worldHeightViewport * 0.6 &&\n                    scaleSize > worldHeightViewport * 0.2);\n            }\n            return currentScaleSize[0];\n        };\n        this.computeEndScaleTicks = (canvasCoordinates, location) => {\n            const locationTickOffset = {\n                bottom: [\n                    [0, -10],\n                    [0, -10],\n                ],\n                top: [\n                    [0, 10],\n                    [0, 10],\n                ],\n                left: [\n                    [0, 0],\n                    [10, 0],\n                ],\n                right: [\n                    [0, 0],\n                    [-10, 0],\n                ],\n            };\n            const endTick1 = [\n                [\n                    canvasCoordinates[1][0] + locationTickOffset[location][0][0],\n                    canvasCoordinates[1][1] + locationTickOffset[location][0][0],\n                ],\n                [\n                    canvasCoordinates[1][0] + locationTickOffset[location][1][0],\n                    canvasCoordinates[1][1] + locationTickOffset[location][1][1],\n                ],\n            ];\n            const endTick2 = [\n                [\n                    canvasCoordinates[0][0] + locationTickOffset[location][0][0],\n                    canvasCoordinates[0][1] + locationTickOffset[location][0][0],\n                ],\n                [\n                    canvasCoordinates[0][0] + locationTickOffset[location][1][0],\n                    canvasCoordinates[0][1] + locationTickOffset[location][1][1],\n                ],\n            ];\n            return {\n                endTick1: endTick1,\n                endTick2: endTick2,\n            };\n        };\n        this.computeInnerScaleTicks = (scaleSize, location, annotationUID, leftTick, rightTick) => {\n            let canvasScaleSize;\n            if (location == 'bottom' || location == 'top') {\n                canvasScaleSize = rightTick[0][0] - leftTick[0][0];\n            }\n            else if (location == 'left' || location == 'right') {\n                canvasScaleSize = rightTick[0][1] - leftTick[0][1];\n            }\n            const tickIds = [];\n            const tickUIDs = [];\n            const tickCoordinates = [];\n            let numberSmallTicks = scaleSize;\n            if (scaleSize >= 50) {\n                numberSmallTicks = scaleSize / 10;\n            }\n            const tickSpacing = canvasScaleSize / numberSmallTicks;\n            for (let i = 0; i < numberSmallTicks - 1; i++) {\n                const locationOffset = {\n                    bottom: [\n                        [tickSpacing * (i + 1), 0],\n                        [tickSpacing * (i + 1), 5],\n                    ],\n                    top: [\n                        [tickSpacing * (i + 1), 0],\n                        [tickSpacing * (i + 1), -5],\n                    ],\n                    left: [\n                        [0, tickSpacing * (i + 1)],\n                        [-5, tickSpacing * (i + 1)],\n                    ],\n                    right: [\n                        [0, tickSpacing * (i + 1)],\n                        [5, tickSpacing * (i + 1)],\n                    ],\n                };\n                tickIds.push(`${annotationUID}-tick${i}`);\n                tickUIDs.push(`tick${i}`);\n                if ((i + 1) % 5 == 0) {\n                    tickCoordinates.push([\n                        [\n                            leftTick[0][0] + locationOffset[location][0][0],\n                            leftTick[0][1] + locationOffset[location][0][1],\n                        ],\n                        [\n                            leftTick[1][0] + locationOffset[location][0][0],\n                            leftTick[1][1] + locationOffset[location][0][1],\n                        ],\n                    ]);\n                }\n                else {\n                    tickCoordinates.push([\n                        [\n                            leftTick[0][0] + locationOffset[location][0][0],\n                            leftTick[0][1] + locationOffset[location][0][1],\n                        ],\n                        [\n                            leftTick[1][0] + locationOffset[location][1][0],\n                            leftTick[1][1] + locationOffset[location][1][1],\n                        ],\n                    ]);\n                }\n            }\n            return { tickIds, tickUIDs, tickCoordinates };\n        };\n        this.computeWorldScaleCoordinates = (scaleSize, location, pointSet) => {\n            let worldCoordinates;\n            let topBottomVec = vec3.subtract(vec3.create(), pointSet[0], pointSet[1]);\n            topBottomVec = vec3.normalize(vec3.create(), topBottomVec);\n            let topRightVec = vec3.subtract(vec3.create(), pointSet[2], pointSet[0]);\n            topRightVec = vec3.normalize(vec3.create(), topRightVec);\n            const midpointLocation = {\n                bottom: [pointSet[1], pointSet[2]],\n                top: [pointSet[0], pointSet[3]],\n                right: [pointSet[2], pointSet[3]],\n                left: [pointSet[0], pointSet[1]],\n            };\n            const midpoint = vec3\n                .add(vec3.create(), midpointLocation[location][0], midpointLocation[location][0])\n                .map((i) => i / 2);\n            const offset = scaleSize /\n                2 /\n                Math.sqrt(Math.pow(topBottomVec[0], 2) +\n                    Math.pow(topBottomVec[1], 2) +\n                    Math.pow(topBottomVec[2], 2));\n            if (location == 'top' || location == 'bottom') {\n                worldCoordinates = [\n                    vec3.subtract(vec3.create(), midpoint, topRightVec.map((i) => i * offset)),\n                    vec3.add(vec3.create(), midpoint, topRightVec.map((i) => i * offset)),\n                ];\n            }\n            else if (location == 'left' || location == 'right') {\n                worldCoordinates = [\n                    vec3.add(vec3.create(), midpoint, topBottomVec.map((i) => i * offset)),\n                    vec3.subtract(vec3.create(), midpoint, topBottomVec.map((i) => i * offset)),\n                ];\n            }\n            return worldCoordinates;\n        };\n        this.computeCanvasScaleCoordinates = (canvasSize, canvasCoordinates, vscaleBounds, hscaleBounds, location) => {\n            let scaleCanvasCoordinates;\n            if (location == 'top' || location == 'bottom') {\n                const worldDistanceOnCanvas = canvasCoordinates[0][0] - canvasCoordinates[1][0];\n                scaleCanvasCoordinates = [\n                    [canvasSize.width / 2 - worldDistanceOnCanvas / 2, vscaleBounds.height],\n                    [canvasSize.width / 2 + worldDistanceOnCanvas / 2, vscaleBounds.height],\n                ];\n            }\n            else if (location == 'left' || location == 'right') {\n                const worldDistanceOnCanvas = canvasCoordinates[0][1] - canvasCoordinates[1][1];\n                scaleCanvasCoordinates = [\n                    [hscaleBounds.width, canvasSize.height / 2 - worldDistanceOnCanvas / 2],\n                    [hscaleBounds.width, canvasSize.height / 2 + worldDistanceOnCanvas / 2],\n                ];\n            }\n            return scaleCanvasCoordinates;\n        };\n        this.computeScaleBounds = (canvasSize, horizontalReduction, verticalReduction, location) => {\n            const hReduction = horizontalReduction * Math.min(1000, canvasSize.width);\n            const vReduction = verticalReduction * Math.min(1000, canvasSize.height);\n            const locationBounds = {\n                bottom: [-vReduction, -hReduction],\n                top: [vReduction, hReduction],\n                left: [vReduction, hReduction],\n                right: [-vReduction, -hReduction],\n            };\n            const canvasBounds = {\n                bottom: [canvasSize.height, canvasSize.width],\n                top: [0, canvasSize.width],\n                left: [canvasSize.height, 0],\n                right: [canvasSize.height, canvasSize.width],\n            };\n            return {\n                height: canvasBounds[location][0] + locationBounds[location][0],\n                width: canvasBounds[location][1] + locationBounds[location][1],\n            };\n        };\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this.editData || !this.editData.viewport) {\n            return;\n        }\n        const location = this.configuration.scaleLocation;\n        const { viewport } = enabledElement;\n        const annotations = getAnnotations(this.getToolName(), viewport.element);\n        const annotation = annotations.filter((thisAnnotation) => thisAnnotation.data.viewportId == viewport.id)[0];\n        const canvas = enabledElement.viewport.canvas;\n        const renderStatus = false;\n        if (!viewport) {\n            return renderStatus;\n        }\n        const styleSpecifier = {\n            toolGroupId: this.toolGroupId,\n            toolName: this.getToolName(),\n            viewportId: enabledElement.viewport.id,\n        };\n        const canvasSize = {\n            width: canvas.width / window.devicePixelRatio || 1,\n            height: canvas.height / window.devicePixelRatio || 1,\n        };\n        const topLeft = annotation.data.handles.points[0];\n        const topRight = annotation.data.handles.points[1];\n        const bottomLeft = annotation.data.handles.points[2];\n        const bottomRight = annotation.data.handles.points[3];\n        const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n        const worldWidthViewport = vec3.distance(bottomLeft, bottomRight);\n        const worldHeightViewport = vec3.distance(topLeft, bottomLeft);\n        const hscaleBounds = this.computeScaleBounds(canvasSize, 0.05, 0.05, location);\n        const vscaleBounds = this.computeScaleBounds(canvasSize, 0.05, 0.05, location);\n        const scaleSize = this.computeScaleSize(worldWidthViewport, worldHeightViewport, location);\n        const canvasCoordinates = this.computeWorldScaleCoordinates(scaleSize, location, pointSet1).map((world) => viewport.worldToCanvas(world));\n        const scaleCanvasCoordinates = this.computeCanvasScaleCoordinates(canvasSize, canvasCoordinates, vscaleBounds, hscaleBounds, location);\n        const scaleTicks = this.computeEndScaleTicks(scaleCanvasCoordinates, location);\n        const { annotationUID } = annotation;\n        styleSpecifier.annotationUID = annotationUID;\n        const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n        const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n        const color = this.getStyle('color', styleSpecifier, annotation);\n        const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n        const scaleId = `${annotationUID}-scaleline`;\n        const scaleLineUID = '1';\n        drawLineSvg(svgDrawingHelper, annotationUID, scaleLineUID, scaleCanvasCoordinates[0], scaleCanvasCoordinates[1], {\n            color,\n            width: lineWidth,\n            lineDash,\n            shadow,\n        }, scaleId);\n        const leftTickId = `${annotationUID}-left`;\n        const leftTickUID = '2';\n        drawLineSvg(svgDrawingHelper, annotationUID, leftTickUID, scaleTicks.endTick1[0], scaleTicks.endTick1[1], {\n            color,\n            width: lineWidth,\n            lineDash,\n            shadow,\n        }, leftTickId);\n        const rightTickId = `${annotationUID}-right`;\n        const rightTickUID = '3';\n        drawLineSvg(svgDrawingHelper, annotationUID, rightTickUID, scaleTicks.endTick2[0], scaleTicks.endTick2[1], {\n            color,\n            width: lineWidth,\n            lineDash,\n            shadow,\n        }, rightTickId);\n        const locationTextOffest = {\n            bottom: [-10, -42],\n            top: [-12, -35],\n            left: [-40, -20],\n            right: [-50, -20],\n        };\n        const textCanvasCoordinates = [\n            scaleCanvasCoordinates[0][0] + locationTextOffest[location][0],\n            scaleCanvasCoordinates[0][1] + locationTextOffest[location][1],\n        ];\n        const textBoxLines = this._getTextLines(scaleSize);\n        const { tickIds, tickUIDs, tickCoordinates } = this.computeInnerScaleTicks(scaleSize, location, annotationUID, scaleTicks.endTick1, scaleTicks.endTick2);\n        for (let i = 0; i < tickUIDs.length; i++) {\n            drawLineSvg(svgDrawingHelper, annotationUID, tickUIDs[i], tickCoordinates[i][0], tickCoordinates[i][1], {\n                color,\n                width: lineWidth,\n                lineDash,\n                shadow,\n            }, tickIds[i]);\n        }\n        const textUID = 'text0';\n        drawTextBoxSvg(svgDrawingHelper, annotationUID, textUID, textBoxLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], {\n            fontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif',\n            fontSize: '14px',\n            lineDash: '2,3',\n            lineWidth: '1',\n            shadow: true,\n            color: color,\n        });\n        return renderStatus;\n    }\n    _getTextLines(scaleSize) {\n        let scaleSizeDisplayValue;\n        let scaleSizeUnits;\n        if (scaleSize >= 50) {\n            scaleSizeDisplayValue = scaleSize / 10;\n            scaleSizeUnits = ' cm';\n        }\n        else {\n            scaleSizeDisplayValue = scaleSize;\n            scaleSizeUnits = ' mm';\n        }\n        const textLines = [scaleSizeDisplayValue.toString().concat(scaleSizeUnits)];\n        return textLines;\n    }\n}\nScaleOverlayTool.toolName = 'ScaleOverlay';\nexport default ScaleOverlayTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { getAnnotations } from '../stateManagement';\nimport { point } from '../utilities/math';\nimport { Events, ToolModes, AnnotationStyleStates, ChangeTypes, } from '../enums';\nimport { triggerAnnotationRenderForViewportIds } from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { hideElementCursor, resetElementCursor, } from '../cursors/elementCursor';\nimport { getStyleProperty } from '../stateManagement/annotation/config/helpers';\nimport { triggerAnnotationModified } from '../stateManagement/annotation/helpers/state';\nimport CircleSculptCursor from './SculptorTool/CircleSculptCursor';\nimport { distancePointToContour } from './distancePointToContour';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nclass SculptorTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            minSpacing: 1,\n            referencedToolNames: [\n                'PlanarFreehandROI',\n                'PlanarFreehandContourSegmentationTool',\n            ],\n            toolShape: 'circle',\n            referencedToolName: 'PlanarFreehandROI',\n            updateCursorSize: 'dynamic',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.registeredShapes = new Map();\n        this.isActive = false;\n        this.commonData = {\n            activeAnnotationUID: null,\n            viewportIdsToRender: [],\n            isEditingOpenContour: false,\n            canvasLocation: undefined,\n        };\n        this.preMouseDownCallback = (evt) => {\n            const eventData = evt.detail;\n            const element = eventData.element;\n            this.configureToolSize(evt);\n            this.selectFreehandTool(eventData);\n            if (this.commonData.activeAnnotationUID === null) {\n                return;\n            }\n            this.isActive = true;\n            hideElementCursor(element);\n            this.activateModify(element);\n            return true;\n        };\n        this.mouseMoveCallback = (evt) => {\n            if (this.mode === ToolModes.Active) {\n                this.configureToolSize(evt);\n                this.updateCursor(evt);\n            }\n            else {\n                this.commonData.canvasLocation = undefined;\n            }\n        };\n        this.endCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const config = this.configuration;\n            const enabledElement = getEnabledElement(element);\n            this.isActive = false;\n            this.deactivateModify(element);\n            resetElementCursor(element);\n            const { renderingEngineId, viewportId } = enabledElement;\n            const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n            const toolInstance = toolGroup.getToolInstance(config.referencedToolName);\n            const annotations = this.filterSculptableAnnotationsForElement(element);\n            const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);\n            if (toolInstance.configuration.calculateStats) {\n                activeAnnotation.invalidated = true;\n            }\n            triggerAnnotationModified(activeAnnotation, element, ChangeTypes.HandlesUpdated);\n        };\n        this.dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const element = eventData.element;\n            this.updateCursor(evt);\n            const annotations = this.filterSculptableAnnotationsForElement(element);\n            const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);\n            if (!annotations?.length || !this.isActive) {\n                return;\n            }\n            const points = activeAnnotation.data.contour.polyline;\n            this.sculpt(eventData, points);\n        };\n        this.registerShapes(CircleSculptCursor.shapeName, CircleSculptCursor);\n        this.setToolShape(this.configuration.toolShape);\n    }\n    registerShapes(shapeName, shapeClass) {\n        const shape = new shapeClass();\n        this.registeredShapes.set(shapeName, shape);\n    }\n    sculpt(eventData, points) {\n        const config = this.configuration;\n        const element = eventData.element;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        this.sculptData = {\n            mousePoint: eventData.currentPoints.world,\n            mouseCanvasPoint: eventData.currentPoints.canvas,\n            deltaWorld: eventData.deltaPoints.world,\n            points,\n            maxSpacing: cursorShape.getMaxSpacing(config.minSpacing),\n            element: element,\n        };\n        const pushedHandles = cursorShape.pushHandles(viewport, this.sculptData);\n        if (pushedHandles.first !== undefined) {\n            this.insertNewHandles(pushedHandles);\n        }\n    }\n    interpolatePointsWithinMaxSpacing(i, points, indicesToInsertAfter, maxSpacing) {\n        const { element } = this.sculptData;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const nextHandleIndex = contourIndex(i + 1, points.length);\n        const currentCanvasPoint = viewport.worldToCanvas(points[i]);\n        const nextCanvasPoint = viewport.worldToCanvas(points[nextHandleIndex]);\n        const distanceToNextHandle = point.distanceToPoint(currentCanvasPoint, nextCanvasPoint);\n        if (distanceToNextHandle > maxSpacing) {\n            indicesToInsertAfter.push(i);\n        }\n    }\n    updateCursor(evt) {\n        const eventData = evt.detail;\n        const element = eventData.element;\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine, viewport } = enabledElement;\n        this.commonData.viewportIdsToRender = [viewport.id];\n        const annotations = this.filterSculptableAnnotationsForElement(element);\n        if (!annotations?.length) {\n            return;\n        }\n        const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);\n        this.commonData.canvasLocation = eventData.currentPoints.canvas;\n        if (this.isActive) {\n            activeAnnotation.highlighted = true;\n        }\n        else {\n            const cursorShape = this.registeredShapes.get(this.selectedShape);\n            const canvasCoords = eventData.currentPoints.canvas;\n            if (this.configuration.updateCursorSize === 'dynamic') {\n                cursorShape.updateToolSize(canvasCoords, viewport, activeAnnotation);\n            }\n        }\n        triggerAnnotationRenderForViewportIds(this.commonData.viewportIdsToRender);\n    }\n    filterSculptableAnnotationsForElement(element) {\n        const config = this.configuration;\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngineId, viewportId } = enabledElement;\n        const sculptableAnnotations = [];\n        const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n        const toolInstance = toolGroup.getToolInstance(config.referencedToolName);\n        config.referencedToolNames.forEach((referencedToolName) => {\n            const annotations = getAnnotations(referencedToolName, element);\n            if (annotations) {\n                sculptableAnnotations.push(...annotations);\n            }\n        });\n        return toolInstance.filterInteractableAnnotationsForElement(element, sculptableAnnotations);\n    }\n    configureToolSize(evt) {\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        cursorShape.configureToolSize(evt);\n    }\n    insertNewHandles(pushedHandles) {\n        const indicesToInsertAfter = this.findNewHandleIndices(pushedHandles);\n        let newIndexModifier = 0;\n        for (let i = 0; i < indicesToInsertAfter?.length; i++) {\n            const insertIndex = indicesToInsertAfter[i] + 1 + newIndexModifier;\n            this.insertHandleRadially(insertIndex);\n            newIndexModifier++;\n        }\n    }\n    findNewHandleIndices(pushedHandles) {\n        const { points, maxSpacing } = this.sculptData;\n        const indicesToInsertAfter = [];\n        for (let i = pushedHandles.first; i <= pushedHandles.last; i++) {\n            this.interpolatePointsWithinMaxSpacing(i, points, indicesToInsertAfter, maxSpacing);\n        }\n        return indicesToInsertAfter;\n    }\n    insertHandleRadially(insertIndex) {\n        const { points } = this.sculptData;\n        if (insertIndex > points.length - 1 &&\n            this.commonData.isEditingOpenContour) {\n            return;\n        }\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        const previousIndex = insertIndex - 1;\n        const nextIndex = contourIndex(insertIndex, points.length);\n        const insertPosition = cursorShape.getInsertPosition(previousIndex, nextIndex, this.sculptData);\n        const handleData = insertPosition;\n        points.splice(insertIndex, 0, handleData);\n    }\n    selectFreehandTool(eventData) {\n        const closestAnnotationUID = this.getClosestFreehandToolOnElement(eventData);\n        if (closestAnnotationUID === undefined) {\n            return;\n        }\n        this.commonData.activeAnnotationUID = closestAnnotationUID;\n    }\n    getClosestFreehandToolOnElement(eventData) {\n        const { element } = eventData;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const config = this.configuration;\n        const annotations = this.filterSculptableAnnotationsForElement(element);\n        if (!annotations?.length) {\n            return;\n        }\n        const canvasPoints = eventData.currentPoints.canvas;\n        const closest = {\n            distance: Infinity,\n            toolIndex: undefined,\n            annotationUID: undefined,\n        };\n        for (let i = 0; i < annotations?.length; i++) {\n            if (annotations[i].isLocked || !annotations[i].isVisible) {\n                continue;\n            }\n            const distanceFromTool = distancePointToContour(viewport, annotations[i], canvasPoints);\n            if (distanceFromTool === -1) {\n                continue;\n            }\n            if (distanceFromTool < closest.distance) {\n                closest.distance = distanceFromTool;\n                closest.toolIndex = i;\n                closest.annotationUID = annotations[i].annotationUID;\n            }\n        }\n        this.commonData.isEditingOpenContour =\n            !annotations[closest.toolIndex].data.contour.closed;\n        config.referencedToolName =\n            annotations[closest.toolIndex].metadata.toolName;\n        return closest.annotationUID;\n    }\n    activateModify(element) {\n        element.addEventListener(Events.MOUSE_UP, this.endCallback);\n        element.addEventListener(Events.MOUSE_CLICK, this.endCallback);\n        element.addEventListener(Events.MOUSE_DRAG, this.dragCallback);\n        element.addEventListener(Events.TOUCH_TAP, this.endCallback);\n        element.addEventListener(Events.TOUCH_END, this.endCallback);\n        element.addEventListener(Events.TOUCH_DRAG, this.dragCallback);\n    }\n    deactivateModify(element) {\n        element.removeEventListener(Events.MOUSE_UP, this.endCallback);\n        element.removeEventListener(Events.MOUSE_CLICK, this.endCallback);\n        element.removeEventListener(Events.MOUSE_DRAG, this.dragCallback);\n        element.removeEventListener(Events.TOUCH_TAP, this.endCallback);\n        element.removeEventListener(Events.TOUCH_END, this.endCallback);\n        element.removeEventListener(Events.TOUCH_DRAG, this.dragCallback);\n    }\n    setToolShape(toolShape) {\n        this.selectedShape =\n            this.registeredShapes.get(toolShape) ?? CircleSculptCursor.shapeName;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        const { viewport } = enabledElement;\n        const { element } = viewport;\n        const viewportIdsToRender = this.commonData.viewportIdsToRender;\n        if (!this.commonData.canvasLocation ||\n            this.mode !== ToolModes.Active ||\n            !viewportIdsToRender.includes(viewport.id)) {\n            return;\n        }\n        const annotations = this.filterSculptableAnnotationsForElement(element);\n        if (!annotations?.length) {\n            return;\n        }\n        const styleSpecifier = {\n            toolGroupId: this.toolGroupId,\n            toolName: this.getToolName(),\n            viewportId: enabledElement.viewport.id,\n        };\n        let color = getStyleProperty('color', styleSpecifier, AnnotationStyleStates.Default, this.mode);\n        if (this.isActive) {\n            color = getStyleProperty('color', styleSpecifier, AnnotationStyleStates.Highlighted, this.mode);\n        }\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        cursorShape.renderShape(svgDrawingHelper, this.commonData.canvasLocation, {\n            color,\n        });\n    }\n}\nexport const contourIndex = (i, length) => {\n    return (i + length) % length;\n};\nSculptorTool.toolName = 'SculptorTool';\nexport default SculptorTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nconst DIRECTIONS = {\n    X: [1, 0, 0],\n    Y: [0, 1, 0],\n    Z: [0, 0, 1],\n    CUSTOM: [],\n};\nclass VolumeRotateTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            direction: DIRECTIONS.Z,\n            rotateIncrementDegrees: 30,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n    }\n    mouseWheelCallback(evt) {\n        const { element, wheel } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { direction, rotateIncrementDegrees } = this.configuration;\n        const camera = viewport.getCamera();\n        const { viewUp, position, focalPoint } = camera;\n        const { direction: deltaY } = wheel;\n        const [cx, cy, cz] = focalPoint;\n        const [ax, ay, az] = direction;\n        const angle = (deltaY * (rotateIncrementDegrees * Math.PI)) / 180;\n        const newPosition = [0, 0, 0];\n        const newFocalPoint = [0, 0, 0];\n        const newViewUp = [0, 0, 0];\n        const transform = mat4.identity(new Float32Array(16));\n        mat4.translate(transform, transform, [cx, cy, cz]);\n        mat4.rotate(transform, transform, angle, [ax, ay, az]);\n        mat4.translate(transform, transform, [-cx, -cy, -cz]);\n        vec3.transformMat4(newPosition, position, transform);\n        vec3.transformMat4(newFocalPoint, focalPoint, transform);\n        mat4.identity(transform);\n        mat4.rotate(transform, transform, angle, [ax, ay, az]);\n        vec3.transformMat4(newViewUp, viewUp, transform);\n        viewport.setCamera({\n            position: newPosition,\n            viewUp: newViewUp,\n            focalPoint: newFocalPoint,\n        });\n        viewport.render();\n    }\n}\nVolumeRotateTool.toolName = 'VolumeRotateMouseWheel';\nexport default VolumeRotateTool;\n","import { vec2 } from 'gl-matrix';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { drawTextBox as drawTextBoxSvg } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nclass LabelTool extends AnnotationTool {\n    static { this.toolName = 'Label'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            getTextCallback,\n            changeTextCallback,\n            preventHandleOutsideImage: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { annotationUID } = annotation;\n            const point = annotation.data.handles.points[0];\n            const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n            const dist = vec2.distance(canvasCoords, annotationCanvasCoordinate);\n            if (dist < proximity) {\n                return true;\n            }\n            const svgLayer = element.querySelector('svg');\n            if (!svgLayer) {\n                return false;\n            }\n            const textGroup = svgLayer.querySelector(`g[data-annotation-uid=\"${annotationUID}\"]`);\n            if (!textGroup) {\n                return false;\n            }\n            const textGroupElement = textGroup;\n            const bbox = textGroupElement.getBBox();\n            const transform = textGroupElement.getAttribute('transform');\n            let translateX = 0;\n            let translateY = 0;\n            if (transform) {\n                const matches = transform.match(/translate\\(([-\\d.]+)\\s+([-\\d.]+)\\)/);\n                if (matches) {\n                    translateX = parseFloat(matches[1]);\n                    translateY = parseFloat(matches[2]);\n                }\n            }\n            const x = bbox.x + translateX;\n            const y = bbox.y + translateY;\n            const isNear = canvasCoords[0] >= x &&\n                canvasCoords[0] <= x + bbox.width &&\n                canvasCoords[1] >= y &&\n                canvasCoords[1] <= y + bbox.height;\n            return isNear;\n        };\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const annotation = (this.createAnnotation(evt, [\n                [...worldPos],\n                [...worldPos],\n            ]));\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                newAnnotation: true,\n                viewportIdsToRender,\n                offset: [0, 0, 0],\n            };\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.configuration.getTextCallback((label) => {\n                if (!label) {\n                    removeAnnotation(annotation.annotationUID);\n                    triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                    this.isDrawing = false;\n                    return;\n                }\n                resetElementCursor(element);\n                annotation.data.label = label;\n                triggerAnnotationCompleted(annotation);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            });\n            this.createMemo(element, annotation, { newAnnotation: true });\n            return annotation;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            let offset = [0, 0, 0];\n            if (currentPoints && currentPoints.world) {\n                const initialWorldPos = currentPoints.world;\n                const anchorWorldPos = annotation.data.handles.points[0];\n                offset = [\n                    anchorWorldPos[0] - initialWorldPos[0],\n                    anchorWorldPos[1] - initialWorldPos[1],\n                    anchorWorldPos[2] - initialWorldPos[2],\n                ];\n            }\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                offset,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            this._deactivateDraw(element);\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            if (newAnnotation) {\n                this.createMemo(element, annotation, { newAnnotation });\n            }\n            this.editData = null;\n            this.isDrawing = false;\n            this.doneEditMemo();\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { annotation, viewportIdsToRender, offset } = this.editData;\n            if (offset) {\n                annotation.data.handles.points[0] = [\n                    worldPos[0] + offset[0],\n                    worldPos[1] + offset[1],\n                    worldPos[2] + offset[2],\n                ];\n            }\n            else {\n                annotation.data.handles.points[0] = [...worldPos];\n            }\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.LabelChange);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const point = data.handles.points[0];\n                styleSpecifier.annotationUID = annotationUID;\n                const canvasCoordinates = viewport.worldToCanvas(point);\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!data.label) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                const textBoxUID = '1';\n                drawTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, [data.label], canvasCoordinates, {\n                    ...options,\n                    padding: 0,\n                });\n            }\n            return renderStatus;\n        };\n    }\n    static { this.hydrate = (viewportId, position, label, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n        const { viewPlaneNormal, viewUp } = viewport.getCamera();\n        const instance = new this();\n        const referencedImageId = instance.getReferencedImageId(viewport, position, viewPlaneNormal, viewUp);\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                label,\n                handles: {\n                    points: [position],\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...options,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(_evt, _annotation, _handle, _interactionType) { }\n    _doneChangingTextCallback(element, annotation, updatedLabel) {\n        annotation.data.label = updatedLabel;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        triggerAnnotationModified(annotation, element);\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction getTextCallback(doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nLabelTool.toolName = 'Label';\nexport default LabelTool;\n","import { Events, ChangeTypes } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, utilities, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { getStyleProperty } from '../../stateManagement/annotation/config/helpers';\nconst { transformWorldToIndex } = csUtils;\nclass LengthTool extends AnnotationTool {\n    static { this.toolName = 'Length'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            actions: {\n                undo: {\n                    method: 'undo',\n                    bindings: [{ key: 'z' }],\n                },\n                redo: {\n                    method: 'redo',\n                    bindings: [{ key: 'y' }],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const annotation = (this.createAnnotation(evt, [\n                [...worldPos],\n                [...worldPos],\n            ]));\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                const showHandlesAlways = Boolean(getStyleProperty('showHandlesAlways', {}));\n                if (activeHandleCanvasCoords || showHandlesAlways) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const dataId = `${annotationUID}-line`;\n                const lineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId);\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(LengthTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateLength(pos1, pos2) {\n        const dx = pos1[0] - pos2[0];\n        const dy = pos1[1] - pos2[1];\n        const dz = pos1[2] - pos2[2];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[1];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { imageData, dimensions } = image;\n            const index1 = transformWorldToIndex(imageData, worldPos1);\n            const index2 = transformWorldToIndex(imageData, worldPos2);\n            const handles = [index1, index2];\n            const { scale, unit } = getCalibratedLengthUnitsAndScale(image, handles);\n            const length = this._calculateLength(worldPos1, worldPos2) / scale;\n            if (this._isInsideVolume(index1, index2, dimensions)) {\n                this.isHandleOutsideImage = false;\n            }\n            else {\n                this.isHandleOutsideImage = true;\n            }\n            cachedStats[targetId] = {\n                length,\n                unit,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { length, unit } = cachedVolumeStats;\n    if (length === undefined || length === null || isNaN(length)) {\n        return;\n    }\n    const textLines = [`${csUtils.roundNumber(length)} ${unit}`];\n    return textLines;\n}\nexport default LengthTool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawHeight as drawHeightSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { getStyleProperty } from '../../stateManagement/annotation/config/helpers';\nconst { transformWorldToIndex } = csUtils;\nclass HeightTool extends AnnotationTool {\n    static { this.toolName = 'Height'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const annotation = (this.createAnnotation(evt, [\n                [...worldPos],\n                [...worldPos],\n            ]));\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                const enabledElement = getEnabledElement(element);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                let activeHandleCanvasCoords;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                const showHandlesAlways = Boolean(getStyleProperty('showHandlesAlways', {}));\n                if (activeHandleCanvasCoords || showHandlesAlways) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const heightUID = '0';\n                drawHeightSvg(svgDrawingHelper, annotationUID, heightUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash: lineDash,\n                });\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateHeight(pos1, pos2) {\n        const dx = pos2[0] - pos1[0];\n        const dy = pos2[1] - pos1[1];\n        const dz = pos2[2] - pos1[2];\n        if (dx == 0) {\n            if (dy != 0) {\n                return Math.abs(dz);\n            }\n            else {\n                return 0;\n            }\n        }\n        else if (dy == 0) {\n            return Math.abs(dz);\n        }\n        else if (dz == 0) {\n            return Math.abs(dy);\n        }\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[1];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { imageData, dimensions } = image;\n            const index1 = transformWorldToIndex(imageData, worldPos1);\n            const index2 = transformWorldToIndex(imageData, worldPos2);\n            const handles = [index1, index2];\n            const { scale, unit } = getCalibratedLengthUnitsAndScale(image, handles);\n            const height = this._calculateHeight(worldPos1, worldPos2) / scale;\n            const outside = this._isInsideVolume(index1, index2, dimensions);\n            this.isHandleOutsideImage = outside;\n            cachedStats[targetId] = {\n                height,\n                unit,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { height, unit } = cachedVolumeStats;\n    if (height === undefined || height === null || isNaN(height)) {\n        return;\n    }\n    const textLines = [`${csUtils.roundNumber(height)} ${unit}`];\n    return textLines;\n}\nexport default HeightTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { getCalibratedProbeUnitsAndValue } from '../../utilities/getCalibratedUnits';\nimport { drawHandles as drawHandlesSvg, drawTextBox as drawTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nconst { transformWorldToIndex } = csUtils;\nclass ProbeTool extends AnnotationTool {\n    static { this.toolName = 'Probe'; }\n    static { this.probeDefaults = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            handleRadius: '6',\n            textCanvasOffset: {\n                x: 6,\n                y: -6,\n            },\n        },\n    }; }\n    constructor(toolProps = {}, defaultToolProps) {\n        super(toolProps, AnnotationTool.mergeDefaultProps(ProbeTool.probeDefaults, defaultToolProps));\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const annotation = (this.constructor).createAnnotationForViewport(viewport, {\n                data: {\n                    handles: { points: [[...worldPos]] },\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                newAnnotation: true,\n                viewportIdsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { viewportId, renderingEngine } = getEnabledElement(element);\n            this.eventDispatchDetail = {\n                viewportId,\n                renderingEngineId: renderingEngine.id,\n            };\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            if (newAnnotation) {\n                this.createMemo(element, annotation, { newAnnotation });\n            }\n            this.editData = null;\n            this.isDrawing = false;\n            this.doneEditMemo();\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            data.handles.points[0] = [...worldPos];\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const annotationUID = annotation.annotationUID;\n                const data = annotation.data;\n                const point = data.handles.points[0];\n                const canvasCoordinates = viewport.worldToCanvas(point);\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                if (!data.cachedStats) {\n                    data.cachedStats = {};\n                }\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].value === null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        index: null,\n                        value: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement, ChangeTypes.StatsUpdated);\n                }\n                else if (annotation.invalidated) {\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                const handleGroupUID = '0';\n                drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, [canvasCoordinates], { color, lineWidth, handleRadius: this.configuration.handleRadius });\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (textLines) {\n                    const textCanvasCoordinates = [\n                        canvasCoordinates[0] + this.configuration.textCanvasOffset.x,\n                        canvasCoordinates[1] + this.configuration.textCanvasOffset.y,\n                    ];\n                    const textUID = '0';\n                    drawTextBoxSvg(svgDrawingHelper, annotationUID, textUID, textLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], options);\n                }\n            }\n            return renderStatus;\n        };\n    }\n    isPointNearTool(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { data } = annotation;\n        const point = data.handles.points[0];\n        const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n        return vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity;\n    }\n    toolSelectedCallback() { }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, viewUp, instance, viewport, } = this.hydrateBase(ProbeTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    getHandleNearImagePoint(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { data } = annotation;\n        const point = data.handles.points[0];\n        const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n        const near = vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity;\n        if (near === true) {\n            return point;\n        }\n    }\n    handleSelectedCallback(evt, annotation) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        annotation.highlighted = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement, changeType = ChangeTypes.StatsUpdated) {\n        const data = annotation.data;\n        const { renderingEngineId, viewport } = enabledElement;\n        const { element } = viewport;\n        const worldPos = data.handles.points[0];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const pixelUnitsOptions = {\n                isPreScaled: isViewportPreScaled(viewport, targetId),\n                isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n            };\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { dimensions, imageData, metadata, voxelManager } = image;\n            const modality = metadata.Modality;\n            let ijk = transformWorldToIndex(imageData, worldPos);\n            ijk = vec3.round(ijk, ijk);\n            if (csUtils.indexWithinDimensions(ijk, dimensions)) {\n                this.isHandleOutsideImage = false;\n                let value = voxelManager.getAtIJKPoint(ijk);\n                if (targetId.startsWith('imageId:')) {\n                    const imageId = targetId.split('imageId:')[1];\n                    const imageURI = csUtils.imageIdToURI(imageId);\n                    const viewports = csUtils.getViewportsWithImageURI(imageURI);\n                    const viewport = viewports[0];\n                    ijk[2] = viewport.getCurrentImageIdIndex();\n                }\n                let modalityUnit;\n                if (modality === 'US') {\n                    const calibratedResults = getCalibratedProbeUnitsAndValue(image, [\n                        ijk,\n                    ]);\n                    const hasEnhancedRegionValues = calibratedResults.values.every((value) => value !== null);\n                    value = (hasEnhancedRegionValues ? calibratedResults.values : value);\n                    modalityUnit = hasEnhancedRegionValues\n                        ? calibratedResults.units\n                        : 'raw';\n                }\n                else {\n                    modalityUnit = getPixelValueUnits(modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                }\n                cachedStats[targetId] = {\n                    index: ijk,\n                    value,\n                    Modality: modality,\n                    modalityUnit,\n                };\n                annotation.invalidated = true;\n            }\n            else {\n                this.isHandleOutsideImage = true;\n                cachedStats[targetId] = {\n                    index: ijk,\n                    Modality: modality,\n                };\n            }\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, changeType);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { index, value, modalityUnit } = cachedVolumeStats;\n    if (value === undefined || !index) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`(${index[0]}, ${index[1]}, ${index[2]})`);\n    if (value instanceof Array && modalityUnit instanceof Array) {\n        for (let i = 0; i < value.length; i++) {\n            textLines.push(`${csUtils.roundNumber(value[i])} ${modalityUnit[i]}`);\n        }\n    }\n    else {\n        textLines.push(`${csUtils.roundNumber(value)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nexport default ProbeTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { drawHandles as drawHandlesSvg, drawTextBox as drawTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport ProbeTool from './ProbeTool';\nclass DragProbeTool extends ProbeTool {\n    static { this.toolName = 'DragProbe'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.postMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                isVisible: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId,\n                },\n                data: {\n                    label: '',\n                    handles: { points: [[...worldPos]] },\n                    cachedStats: {},\n                },\n            };\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                newAnnotation: true,\n                viewportIdsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.postTouchStartCallback = (evt) => {\n            return this.postMouseDownCallback(evt);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const annotations = this.filterInteractableAnnotationsForElement(viewport.element, [this.editData.annotation]);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const annotation = this.editData.annotation;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const point = data.handles.points[0];\n            const canvasCoordinates = viewport.worldToCanvas(point);\n            styleSpecifier.annotationUID = annotationUID;\n            const { color } = this.getAnnotationStyle({\n                annotation,\n                styleSpecifier,\n            });\n            if (!data.cachedStats[targetId] ||\n                data.cachedStats[targetId].value === null) {\n                data.cachedStats[targetId] = {\n                    Modality: null,\n                    index: null,\n                    value: null,\n                };\n                this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n            }\n            else if (annotation.invalidated) {\n                this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n            }\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const handleGroupUID = '0';\n            drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, [canvasCoordinates], { color });\n            renderStatus = true;\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (textLines) {\n                const textCanvasCoordinates = [\n                    canvasCoordinates[0] + 6,\n                    canvasCoordinates[1] - 6,\n                ];\n                const textUID = '0';\n                drawTextBoxSvg(svgDrawingHelper, annotationUID, textUID, textLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], this.getLinkedTextBoxStyle(styleSpecifier, annotation));\n            }\n            return renderStatus;\n        };\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { index, value, modalityUnit } = cachedVolumeStats;\n    if (value === undefined) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`(${index[0]}, ${index[1]}, ${index[2]})`);\n    textLines.push(`${value.toFixed(2)} ${modalityUnit}`);\n    return textLines;\n}\nexport default DragProbeTool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, getEnabledElementByViewportId, EPSILON, } from '@cornerstonejs/core';\nimport { getCalibratedAspect, getCalibratedLengthUnitsAndScale, } from '../../utilities/getCalibratedUnits';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawEllipseByCoordinates as drawEllipseSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { pointInEllipse, getCanvasEllipseCorners, } from '../../utilities/math/ellipse';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport { vec2 } from 'gl-matrix';\nimport { getStyleProperty } from '../../stateManagement/annotation/config/helpers';\nconst { transformWorldToIndex } = csUtils;\nclass EllipticalROITool extends AnnotationTool {\n    static { this.toolName = 'EllipticalROI'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            storePointData: false,\n            centerPointRadius: 0,\n            calculateStats: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            this.isDrawing = true;\n            const annotation = (this.createAnnotation(evt, [\n                [...worldPos],\n                [...worldPos],\n                [...worldPos],\n                [...worldPos],\n            ]));\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                centerWorld: worldPos,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const [bottom, top, left, right] = canvasCoordinates;\n            const w = Math.hypot(left[0] - right[0], left[1] - right[1]);\n            const h = Math.hypot(top[0] - bottom[0], top[1] - bottom[1]);\n            const angle = Math.atan2(left[1] - right[1], left[0] - right[0]);\n            const center = [(left[0] + right[0]) / 2, (top[1] + bottom[1]) / 2];\n            const minorEllipse = {\n                center,\n                xRadius: (w - proximity) / 2,\n                yRadius: (h - proximity) / 2,\n                angle,\n            };\n            const majorEllipse = {\n                center,\n                xRadius: (w + proximity) / 2,\n                yRadius: (h + proximity) / 2,\n                angle,\n            };\n            const pointInMinorEllipse = this._pointInEllipseCanvas(minorEllipse, canvasCoords);\n            const pointInMajorEllipse = this._pointInEllipseCanvas(majorEllipse, canvasCoords);\n            if (pointInMajorEllipse && !pointInMinorEllipse) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            let centerCanvas;\n            let centerWorld;\n            let canvasWidth;\n            let canvasHeight;\n            let originalHandleCanvas;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                const { viewport } = getEnabledElement(element);\n                const { worldToCanvas, canvasToWorld } = viewport;\n                handleIndex = points.findIndex((p) => p === handle);\n                const pointsCanvas = points.map(worldToCanvas);\n                originalHandleCanvas = pointsCanvas[handleIndex];\n                canvasWidth = Math.abs(pointsCanvas[2][0] - pointsCanvas[3][0]);\n                canvasHeight = Math.abs(pointsCanvas[0][1] - pointsCanvas[1][1]);\n                centerCanvas = [\n                    (pointsCanvas[2][0] + pointsCanvas[3][0]) / 2,\n                    (pointsCanvas[0][1] + pointsCanvas[1][1]) / 2,\n                ];\n                centerWorld = canvasToWorld(centerCanvas);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                canvasWidth,\n                canvasHeight,\n                centerWorld,\n                originalHandleCanvas,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, centerWorld, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const centerCanvas = viewport.worldToCanvas(centerWorld);\n            const { data } = annotation;\n            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n            const bottomCanvas = [centerCanvas[0], centerCanvas[1] - dY];\n            const topCanvas = [centerCanvas[0], centerCanvas[1] + dY];\n            const leftCanvas = [centerCanvas[0] - dX, centerCanvas[1]];\n            const rightCanvas = [centerCanvas[0] + dX, centerCanvas[1]];\n            data.handles.points = [\n                canvasToWorld(bottomCanvas),\n                canvasToWorld(topCanvas),\n                canvasToWorld(leftCanvas),\n                canvasToWorld(rightCanvas),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragHandle(evt);\n                annotation.invalidated = true;\n            }\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { viewport } = getEnabledElement(element);\n            const { canvasToWorld, worldToCanvas } = viewport;\n            const { annotation, canvasWidth, canvasHeight, handleIndex, centerWorld, originalHandleCanvas, } = this.editData;\n            const centerCanvas = viewport.worldToCanvas(centerWorld);\n            const { data } = annotation;\n            const { points } = data.handles;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            if (handleIndex === 0 || handleIndex === 1) {\n                const dYCanvas = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n                const canvasBottom = [\n                    centerCanvas[0],\n                    centerCanvas[1] - dYCanvas,\n                ];\n                const canvasTop = [\n                    centerCanvas[0],\n                    centerCanvas[1] + dYCanvas,\n                ];\n                points[0] = canvasToWorld(canvasBottom);\n                points[1] = canvasToWorld(canvasTop);\n                const dXCanvas = currentCanvasPoints[0] - originalHandleCanvas[0];\n                const newHalfCanvasWidth = canvasWidth / 2 + dXCanvas;\n                const canvasLeft = [\n                    centerCanvas[0] - newHalfCanvasWidth,\n                    centerCanvas[1],\n                ];\n                const canvasRight = [\n                    centerCanvas[0] + newHalfCanvasWidth,\n                    centerCanvas[1],\n                ];\n                points[2] = canvasToWorld(canvasLeft);\n                points[3] = canvasToWorld(canvasRight);\n            }\n            else {\n                const dXCanvas = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n                const canvasLeft = [\n                    centerCanvas[0] - dXCanvas,\n                    centerCanvas[1],\n                ];\n                const canvasRight = [\n                    centerCanvas[0] + dXCanvas,\n                    centerCanvas[1],\n                ];\n                points[2] = canvasToWorld(canvasLeft);\n                points[3] = canvasToWorld(canvasRight);\n                const dYCanvas = currentCanvasPoints[1] - originalHandleCanvas[1];\n                const newHalfCanvasHeight = canvasHeight / 2 + dYCanvas;\n                const canvasBottom = [\n                    centerCanvas[0],\n                    centerCanvas[1] - newHalfCanvasHeight,\n                ];\n                const canvasTop = [\n                    centerCanvas[0],\n                    centerCanvas[1] + newHalfCanvasHeight,\n                ];\n                points[0] = canvasToWorld(canvasBottom);\n                points[1] = canvasToWorld(canvasTop);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const canvasCorners = (getCanvasEllipseCorners(canvasCoordinates));\n                const { centerPointRadius } = this.configuration;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].areaUnit == null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        area: null,\n                        max: null,\n                        mean: null,\n                        stdDev: null,\n                        areaUnit: null,\n                    };\n                    this._calculateCachedStats(annotation, viewport, renderingEngine);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                const showHandlesAlways = Boolean(getStyleProperty('showHandlesAlways', {}));\n                if (activeHandleCanvasCoords || showHandlesAlways) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, showHandlesAlways ? canvasCoordinates : activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-ellipse`;\n                const ellipseUID = '0';\n                drawEllipseSvg(svgDrawingHelper, annotationUID, ellipseUID, canvasCoordinates, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                if (centerPointRadius > 0) {\n                    const minRadius = Math.min(Math.abs(canvasCorners[0][0] - canvasCorners[1][0]) / 2, Math.abs(canvasCorners[0][1] - canvasCorners[1][1]) / 2);\n                    if (minRadius > 3 * centerPointRadius) {\n                        const centerPoint = this._getCanvasEllipseCenter(canvasCoordinates);\n                        drawCircleSvg(svgDrawingHelper, annotationUID, `${ellipseUID}-center`, centerPoint, centerPointRadius, {\n                            color,\n                            lineDash,\n                            lineWidth,\n                        });\n                    }\n                }\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._calculateCachedStats = (annotation, viewport, renderingEngine) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            const { element } = viewport;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const { viewPlaneNormal, viewUp } = viewport.getCamera();\n            const [topLeftCanvas, bottomRightCanvas] = (getCanvasEllipseCorners(canvasCoordinates));\n            const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n            const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            const worldPos1 = topLeftWorld;\n            const worldPos2 = bottomRightWorld;\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { dimensions, imageData, metadata, voxelManager } = image;\n                const pos1Index = transformWorldToIndex(imageData, worldPos1);\n                pos1Index[0] = Math.floor(pos1Index[0]);\n                pos1Index[1] = Math.floor(pos1Index[1]);\n                pos1Index[2] = Math.floor(pos1Index[2]);\n                const pos2Index = transformWorldToIndex(imageData, worldPos2);\n                pos2Index[0] = Math.floor(pos2Index[0]);\n                pos2Index[1] = Math.floor(pos2Index[1]);\n                pos2Index[2] = Math.floor(pos2Index[2]);\n                if (this._isInsideVolume(pos1Index, pos2Index, dimensions)) {\n                    const iMin = Math.min(pos1Index[0], pos2Index[0]);\n                    const iMax = Math.max(pos1Index[0], pos2Index[0]);\n                    const jMin = Math.min(pos1Index[1], pos2Index[1]);\n                    const jMax = Math.max(pos1Index[1], pos2Index[1]);\n                    const kMin = Math.min(pos1Index[2], pos2Index[2]);\n                    const kMax = Math.max(pos1Index[2], pos2Index[2]);\n                    const boundsIJK = [\n                        [iMin, iMax],\n                        [jMin, jMax],\n                        [kMin, kMax],\n                    ];\n                    const center = [\n                        (topLeftWorld[0] + bottomRightWorld[0]) / 2,\n                        (topLeftWorld[1] + bottomRightWorld[1]) / 2,\n                        (topLeftWorld[2] + bottomRightWorld[2]) / 2,\n                    ];\n                    const xRadius = Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2;\n                    const yRadius = Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2;\n                    const zRadius = Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2;\n                    const ellipseObj = {\n                        center,\n                        xRadius: xRadius < EPSILON / 2 ? 0 : xRadius,\n                        yRadius: yRadius < EPSILON / 2 ? 0 : yRadius,\n                        zRadius: zRadius < EPSILON / 2 ? 0 : zRadius,\n                    };\n                    const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                    const isEmptyArea = worldWidth === 0 && worldHeight === 0;\n                    const handles = [pos1Index, pos2Index];\n                    const { scale, unit, areaUnit } = getCalibratedLengthUnitsAndScale(image, handles);\n                    const aspect = getCalibratedAspect(image);\n                    const area = Math.abs(Math.PI *\n                        (worldWidth / scale / 2) *\n                        (worldHeight / aspect / scale / 2));\n                    const pixelUnitsOptions = {\n                        isPreScaled: isViewportPreScaled(viewport, targetId),\n                        isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                    };\n                    const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                    let pointsInShape;\n                    if (voxelManager) {\n                        pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                            isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS, { fast: true }),\n                            boundsIJK,\n                            imageData,\n                            returnPoints: this.configuration.storePointData,\n                        });\n                    }\n                    const stats = this.configuration.statsCalculator.getStatistics();\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                        area,\n                        mean: stats.mean?.value,\n                        max: stats.max?.value,\n                        min: stats.min?.value,\n                        stdDev: stats.stdDev?.value,\n                        statsArray: stats.array,\n                        pointsInShape,\n                        isEmptyArea,\n                        areaUnit,\n                        modalityUnit,\n                    };\n                }\n                else {\n                    this.isHandleOutsideImage = true;\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                    };\n                }\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(EllipticalROITool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    _pointInEllipseCanvas(ellipse, location) {\n        const { xRadius, yRadius, center, angle } = ellipse;\n        const rotLocation = vec2.rotate(vec2.create(), location, center, -angle);\n        if (xRadius <= 0.0 || yRadius <= 0.0) {\n            return false;\n        }\n        const normalized = [rotLocation[0] - center[0], rotLocation[1] - center[1]];\n        const inEllipse = (normalized[0] * normalized[0]) / (xRadius * xRadius) +\n            (normalized[1] * normalized[1]) / (yRadius * yRadius) <=\n            1.0;\n        return inEllipse;\n    }\n    _getCanvasEllipseCenter(ellipseCanvasPoints) {\n        const [bottom, top, left, right] = ellipseCanvasPoints;\n        const topLeft = [left[0], top[1]];\n        const bottomRight = [right[0], bottom[1]];\n        return [\n            (topLeft[0] + bottomRight[0]) / 2,\n            (topLeft[1] + bottomRight[1]) / 2,\n        ];\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, mean, stdDev, max, isEmptyArea, areaUnit, modalityUnit, min } = cachedVolumeStats;\n    const textLines = [];\n    if (csUtils.isNumber(area)) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    if (csUtils.isNumber(mean)) {\n        textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(max)) {\n        textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(min)) {\n        textLines.push(`Min: ${csUtils.roundNumber(min)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(stdDev)) {\n        textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nexport default EllipticalROITool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, getEnabledElementByViewportId, EPSILON, } from '@cornerstonejs/core';\nimport { getCalibratedAspect, getCalibratedLengthUnitsAndScale, } from '../../utilities/getCalibratedUnits';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { getCanvasCircleCorners, getCanvasCircleRadius, } from '../../utilities/math/circle';\nimport { pointInEllipse } from '../../utilities/math/ellipse';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport { vec2, vec3 } from 'gl-matrix';\nimport { getStyleProperty } from '../../stateManagement/annotation/config/helpers';\nconst { transformWorldToIndex } = csUtils;\nclass CircleROITool extends AnnotationTool {\n    static { this.toolName = 'CircleROI'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            storePointData: false,\n            centerPointRadius: 0,\n            calculateStats: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n            simplified: true,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            this.isDrawing = true;\n            let points;\n            if (this.configuration.simplified) {\n                points = [[...worldPos], [...worldPos]];\n            }\n            else {\n                points = [\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                ];\n            }\n            const annotation = this.createAnnotation(evt, points);\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { points } = annotation.data.handles;\n            const canvasHandles = points.map((p) => viewport.worldToCanvas(p));\n            const canvasCenter = canvasHandles[0];\n            const radius = getCanvasCircleRadius([canvasCenter, canvasHandles[1]]);\n            const radiusPoint = getCanvasCircleRadius([canvasCenter, canvasCoords]);\n            return Math.abs(radiusPoint - radius) < proximity / 2;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                handleIndex = points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const { world: worldPos, canvas: currentCanvasPoints } = currentPoints;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            const centerWorld = data.handles.points[0];\n            const centerCanvas = viewport.worldToCanvas(centerWorld);\n            if (this.configuration.simplified) {\n                data.handles.points[1] = worldPos;\n            }\n            else {\n                const radiusCanvas = vec2.distance(centerCanvas, currentCanvasPoints);\n                data.handles.points[0] = [...centerWorld];\n                data.handles.points[1] = canvasToWorld([\n                    centerCanvas[0],\n                    centerCanvas[1] - radiusCanvas,\n                ]);\n                data.handles.points[2] = canvasToWorld([\n                    centerCanvas[0],\n                    centerCanvas[1] + radiusCanvas,\n                ]);\n                data.handles.points[3] = canvasToWorld([\n                    centerCanvas[0] - radiusCanvas,\n                    centerCanvas[1],\n                ]);\n                data.handles.points[4] = canvasToWorld([\n                    centerCanvas[0] + radiusCanvas,\n                    centerCanvas[1],\n                ]);\n            }\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragHandle(evt);\n                annotation.invalidated = true;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { canvasToWorld, worldToCanvas } = enabledElement.viewport;\n            const { annotation, handleIndex } = this.editData;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const { currentPoints, deltaPoints } = eventDetail;\n            if (handleIndex === 0) {\n                const worldPosDelta = deltaPoints.world;\n                points.forEach((point) => {\n                    vec3.add(point, point, worldPosDelta);\n                });\n            }\n            else {\n                const centerWorld = points[0];\n                const centerCanvas = worldToCanvas(centerWorld);\n                const currentCanvasPoint = currentPoints.canvas;\n                const newRadiusCanvas = vec2.distance(centerCanvas, currentCanvasPoint);\n                points[1] = canvasToWorld([\n                    centerCanvas[0],\n                    centerCanvas[1] - newRadiusCanvas,\n                ]);\n                points[2] = canvasToWorld([\n                    centerCanvas[0],\n                    centerCanvas[1] + newRadiusCanvas,\n                ]);\n                points[3] = canvasToWorld([\n                    centerCanvas[0] - newRadiusCanvas,\n                    centerCanvas[1],\n                ]);\n                points[4] = canvasToWorld([\n                    centerCanvas[0] + newRadiusCanvas,\n                    centerCanvas[1],\n                ]);\n            }\n            annotation.invalidated = true;\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                annotation.highlighted = false;\n                annotation.data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const center = canvasCoordinates[0];\n                const radius = getCanvasCircleRadius([center, canvasCoordinates[1]]);\n                const canvasCorners = getCanvasCircleCorners([\n                    center,\n                    canvasCoordinates[1],\n                ]);\n                const { centerPointRadius } = this.configuration;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].areaUnit == null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        area: null,\n                        max: null,\n                        mean: null,\n                        stdDev: null,\n                        areaUnit: null,\n                        radius: null,\n                        radiusUnit: null,\n                        perimeter: null,\n                    };\n                    this._calculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    if (this.configuration.simplified) {\n                        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                    }\n                    else {\n                        activeHandleCanvasCoords = canvasCoordinates;\n                    }\n                }\n                const showHandlesAlways = Boolean(getStyleProperty('showHandlesAlways', {}));\n                if (activeHandleCanvasCoords || showHandlesAlways) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, showHandlesAlways ? canvasCoordinates : activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-circle`;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                if (centerPointRadius > 0) {\n                    if (radius > 3 * centerPointRadius) {\n                        drawCircleSvg(svgDrawingHelper, annotationUID, `${circleUID}-center`, center, centerPointRadius, {\n                            color,\n                            lineDash,\n                            lineWidth,\n                        });\n                    }\n                }\n                renderStatus = true;\n                if (this.configuration.calculateStats) {\n                    const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                    if (!options.visibility) {\n                        data.handles.textBox = {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        };\n                        continue;\n                    }\n                    const textLines = this.configuration.getTextLines(data, targetId);\n                    if (!textLines || textLines.length === 0) {\n                        continue;\n                    }\n                    let canvasTextBoxCoords;\n                    if (!data.handles.textBox.hasMoved) {\n                        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n                        data.handles.textBox.worldPosition =\n                            viewport.canvasToWorld(canvasTextBoxCoords);\n                    }\n                    const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                    const textBoxUID = '1';\n                    const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, [center, canvasCoordinates[1]], {}, options);\n                    const { x: left, y: top, width, height } = boundingBox;\n                    data.handles.textBox.worldBoundingBox = {\n                        topLeft: viewport.canvasToWorld([left, top]),\n                        topRight: viewport.canvasToWorld([left + width, top]),\n                        bottomLeft: viewport.canvasToWorld([left, top + height]),\n                        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                    };\n                }\n            }\n            return renderStatus;\n        };\n        this._calculateCachedStats = (annotation, viewport, renderingEngine, enabledElement) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            const { element } = viewport;\n            const wasInvalidated = annotation.invalidated;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const canvasCenter = canvasCoordinates[0];\n            const canvasTop = canvasCoordinates[1];\n            const { viewPlaneNormal, viewUp } = viewport.getCamera();\n            const [topLeftCanvas, bottomRightCanvas] = (getCanvasCircleCorners([canvasCenter, canvasTop]));\n            const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n            const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            const worldPos1 = topLeftWorld;\n            const worldPos2 = bottomRightWorld;\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { dimensions, imageData, metadata, voxelManager } = image;\n                const pos1Index = transformWorldToIndex(imageData, worldPos1);\n                pos1Index[0] = Math.floor(pos1Index[0]);\n                pos1Index[1] = Math.floor(pos1Index[1]);\n                pos1Index[2] = Math.floor(pos1Index[2]);\n                const pos2Index = transformWorldToIndex(imageData, worldPos2);\n                pos2Index[0] = Math.floor(pos2Index[0]);\n                pos2Index[1] = Math.floor(pos2Index[1]);\n                pos2Index[2] = Math.floor(pos2Index[2]);\n                if (this._isInsideVolume(pos1Index, pos2Index, dimensions)) {\n                    const iMin = Math.min(pos1Index[0], pos2Index[0]);\n                    const iMax = Math.max(pos1Index[0], pos2Index[0]);\n                    const jMin = Math.min(pos1Index[1], pos2Index[1]);\n                    const jMax = Math.max(pos1Index[1], pos2Index[1]);\n                    const kMin = Math.min(pos1Index[2], pos2Index[2]);\n                    const kMax = Math.max(pos1Index[2], pos2Index[2]);\n                    const boundsIJK = [\n                        [iMin, iMax],\n                        [jMin, jMax],\n                        [kMin, kMax],\n                    ];\n                    const center = points[0];\n                    const xRadius = Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2;\n                    const yRadius = Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2;\n                    const zRadius = Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2;\n                    const ellipseObj = {\n                        center,\n                        xRadius: xRadius < EPSILON / 2 ? 0 : xRadius,\n                        yRadius: yRadius < EPSILON / 2 ? 0 : yRadius,\n                        zRadius: zRadius < EPSILON / 2 ? 0 : zRadius,\n                    };\n                    const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                    const isEmptyArea = worldWidth === 0 && worldHeight === 0;\n                    const handles = [pos1Index, pos2Index];\n                    const { scale, unit, areaUnit } = getCalibratedLengthUnitsAndScale(image, handles);\n                    const aspect = getCalibratedAspect(image);\n                    const area = Math.abs(Math.PI *\n                        (worldWidth / scale / 2) *\n                        (worldHeight / aspect / scale / 2));\n                    const pixelUnitsOptions = {\n                        isPreScaled: isViewportPreScaled(viewport, targetId),\n                        isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                    };\n                    const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                    let pointsInShape;\n                    if (voxelManager) {\n                        pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                            isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS, { fast: true }),\n                            boundsIJK,\n                            imageData,\n                            returnPoints: this.configuration.storePointData,\n                        });\n                    }\n                    const stats = this.configuration.statsCalculator.getStatistics();\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                        area,\n                        mean: stats.mean?.value,\n                        max: stats.max?.value,\n                        min: stats.min?.value,\n                        pointsInShape,\n                        stdDev: stats.stdDev?.value,\n                        statsArray: stats.array,\n                        isEmptyArea,\n                        areaUnit,\n                        radius: worldWidth / 2 / scale,\n                        radiusUnit: unit,\n                        perimeter: (2 * Math.PI * (worldWidth / 2)) / scale,\n                        modalityUnit,\n                    };\n                }\n                else {\n                    this.isHandleOutsideImage = true;\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                    };\n                }\n            }\n            annotation.invalidated = false;\n            if (wasInvalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(CircleROITool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { radius, radiusUnit, area, mean, stdDev, max, min, isEmptyArea, areaUnit, modalityUnit, } = cachedVolumeStats;\n    const textLines = [];\n    if (csUtils.isNumber(radius)) {\n        const radiusLine = isEmptyArea\n            ? `Radius: Oblique not supported`\n            : `Radius: ${csUtils.roundNumber(radius)} ${radiusUnit}`;\n        textLines.push(radiusLine);\n    }\n    if (csUtils.isNumber(area)) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    if (csUtils.isNumber(mean)) {\n        textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(max)) {\n        textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(min)) {\n        textLines.push(`Min: ${csUtils.roundNumber(min)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(stdDev)) {\n        textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nexport default CircleROITool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted } from '../../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawLine } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getCanvasCircleRadius } from '../../utilities/math/circle';\nimport { vec3 } from 'gl-matrix';\nconst CROSSHAIR_SIZE = 5;\nclass ETDRSGridTool extends AnnotationTool {\n    static { this.toolName = 'ETDRSGrid'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            degrees: [45, 135, 225, 315],\n            diameters: [10, 30, 60],\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        points: [[...worldPos]],\n                    },\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                newAnnotation: true,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const center = viewport.worldToCanvas(points[0]);\n            const radius = getCanvasCircleRadius([center, canvasCoords]);\n            if (Math.abs(radius) < proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const { renderingEngine } = getEnabledElement(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            data.handles.points = [\n                canvasToWorld(currentCanvasPoints),\n                canvasToWorld(currentCanvasPoints),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            const { deltaPoints } = eventDetail;\n            const worldPosDelta = deltaPoints.world;\n            const points = data.handles.points;\n            points.forEach((point) => {\n                point[0] += worldPosDelta[0];\n                point[1] += worldPosDelta[1];\n                point[2] += worldPosDelta[2];\n            });\n            annotation.invalidated = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { canvasToWorld, worldToCanvas } = enabledElement.viewport;\n            const { annotation } = this.editData;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => worldToCanvas(p));\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const dXCanvas = currentCanvasPoints[0] - canvasCoordinates[0][0];\n            const dYCanvas = currentCanvasPoints[1] - canvasCoordinates[0][1];\n            const canvasCenter = currentCanvasPoints;\n            const canvasEnd = [\n                canvasCoordinates[1][0] + dXCanvas,\n                canvasCoordinates[1][1] + dYCanvas,\n            ];\n            points[0] = canvasToWorld(canvasCenter);\n            points[1] = canvasToWorld(canvasEnd);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                const { renderingEngine } = getEnabledElement(element);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const center = canvasCoordinates[0];\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                let lineUID = `${annotationUID}-crosshair-vertical`;\n                let start = [center[0], center[1] + CROSSHAIR_SIZE];\n                let end = [center[0], center[1] - CROSSHAIR_SIZE];\n                drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                });\n                lineUID = `${annotationUID}-crosshair-horizontal`;\n                start = [center[0] + CROSSHAIR_SIZE, center[1]];\n                end = [center[0] - CROSSHAIR_SIZE, center[1]];\n                drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                });\n                const diametersCanvas = this.configuration.diameters.map((diameter) => this.worldMeasureToCanvas(diameter, viewport));\n                for (let i = 0; i < diametersCanvas.length; i++) {\n                    const dataId = `${annotationUID}-circle-${i}`;\n                    const circleUID = `${annotationUID}-circle-${i}`;\n                    drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, diametersCanvas[i] / 2, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    }, dataId);\n                }\n                const degreesRad = (x) => (x * Math.PI) / 180;\n                const angleRadians = this.configuration.degrees.map((degree) => degreesRad(degree));\n                for (let i = 0; i < angleRadians.length; i++) {\n                    const lineUID = `${annotationUID}-line-${i}`;\n                    const start = [\n                        (Math.cos(angleRadians[i]) * diametersCanvas[0]) / 2 + center[0],\n                        (Math.sin(angleRadians[i]) * diametersCanvas[0]) / 2 + center[1],\n                    ];\n                    const end = [\n                        (Math.cos(angleRadians[i]) * diametersCanvas[2]) / 2 + center[0],\n                        (Math.sin(angleRadians[i]) * diametersCanvas[2]) / 2 + center[1],\n                    ];\n                    drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n    }\n    worldMeasureToCanvas(measurement, viewport) {\n        const p1 = viewport.canvasToWorld([\n            viewport.canvas.width / 2,\n            viewport.canvas.height / 2,\n        ]);\n        const { viewUp } = viewport.getCamera();\n        const p2 = vec3.scaleAndAdd(vec3.create(), p1, viewUp, measurement);\n        const p1Canvas = viewport.worldToCanvas(p1);\n        const p2Canvas = viewport.worldToCanvas(p2);\n        const distance = Math.sqrt(Math.pow(p2Canvas[0] - p1Canvas[0], 2) +\n            Math.pow(p2Canvas[1] - p1Canvas[1], 2));\n        return distance;\n    }\n}\nexport default ETDRSGridTool;\n","import { getEnabledElement, eventTarget, triggerEvent, utilities, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { addAnnotation, getChildAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { drawHandles as drawHandlesSvg, drawPolyline as drawPolylineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events, MouseBindings, KeyboardBindings, ChangeTypes, } from '../../enums';\nimport { resetElementCursor } from '../../cursors/elementCursor';\nimport * as math from '../../utilities/math';\nimport throttle from '../../utilities/throttle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport getMouseModifierKey from '../../eventDispatchers/shared/getMouseModifier';\nimport { ContourWindingDirection } from '../../types/ContourAnnotation';\nimport { CardinalSpline } from './splines/CardinalSpline';\nimport { LinearSpline } from './splines/LinearSpline';\nimport { CatmullRomSpline } from './splines/CatmullRomSpline';\nimport { BSpline } from './splines/BSpline';\nimport ContourSegmentationBaseTool from '../base/ContourSegmentationBaseTool';\nimport { triggerAnnotationRenderForViewportIds } from '../../utilities';\nimport { convertContourSegmentationAnnotation } from '../../utilities/contourSegmentation';\nconst SPLINE_MIN_POINTS = 3;\nconst SPLINE_CLICK_CLOSE_CURVE_DIST = 10;\nconst DEFAULT_SPLINE_CONFIG = {\n    resolution: 20,\n    controlPointAdditionDistance: 6,\n    controlPointDeletionDistance: 6,\n    showControlPointsConnectors: false,\n    controlPointAdditionEnabled: true,\n    controlPointDeletionEnabled: true,\n};\nvar SplineTypesEnum;\n(function (SplineTypesEnum) {\n    SplineTypesEnum[\"Cardinal\"] = \"CARDINAL\";\n    SplineTypesEnum[\"Linear\"] = \"LINEAR\";\n    SplineTypesEnum[\"CatmullRom\"] = \"CATMULLROM\";\n    SplineTypesEnum[\"BSpline\"] = \"BSPLINE\";\n})(SplineTypesEnum || (SplineTypesEnum = {}));\nvar SplineToolActions;\n(function (SplineToolActions) {\n    SplineToolActions[\"AddControlPoint\"] = \"addControlPoint\";\n    SplineToolActions[\"DeleteControlPoint\"] = \"deleteControlPoint\";\n})(SplineToolActions || (SplineToolActions = {}));\nconst splineToolNames = [\n    'CatmullRomSplineROI',\n    'LinearSplineROI',\n    'BSplineROI',\n    'CardinalSplineROI',\n];\nclass SplineROITool extends ContourSegmentationBaseTool {\n    static { this.toolName = 'SplineROI'; }\n    static { this.SplineTypes = SplineTypesEnum; }\n    static { this.Actions = SplineToolActions; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            calculateStats: true,\n            simplifiedSpline: false,\n            getTextLines: defaultGetTextLines,\n            contourHoleAdditionModifierKey: KeyboardBindings.Shift,\n            decimate: {\n                enabled: false,\n                epsilon: 0.1,\n            },\n            spline: {\n                configuration: {\n                    [SplineTypesEnum.Cardinal]: {\n                        Class: CardinalSpline,\n                        scale: 0.5,\n                    },\n                    [SplineTypesEnum.CatmullRom]: {\n                        Class: CatmullRomSpline,\n                    },\n                    [SplineTypesEnum.Linear]: {\n                        Class: LinearSpline,\n                    },\n                    [SplineTypesEnum.BSpline]: {\n                        Class: BSpline,\n                        controlPointAdditionEnabled: false,\n                        controlPointDeletionEnabled: false,\n                        showControlPointsConnectors: true,\n                    },\n                },\n                type: SplineTypesEnum.CatmullRom,\n                drawPreviewEnabled: true,\n                enableTwoPointPreview: false,\n                lastControlPointDeletionKeys: ['Backspace', 'Delete'],\n            },\n            actions: {\n                [SplineToolActions.AddControlPoint]: {\n                    method: 'addControlPointCallback',\n                    bindings: [\n                        {\n                            mouseButton: MouseBindings.Primary,\n                            modifierKey: KeyboardBindings.Shift,\n                        },\n                    ],\n                },\n                [SplineToolActions.DeleteControlPoint]: {\n                    method: 'deleteControlPointCallback',\n                    bindings: [\n                        {\n                            mouseButton: MouseBindings.Primary,\n                            modifierKey: KeyboardBindings.Ctrl,\n                        },\n                    ],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.splineToolNames = [\n            'CatmullRomSplineROI',\n            'LinearSplineROI',\n            'BSplineROI',\n            'CardinalSplineROI',\n        ];\n        this.isHandleOutsideImage = false;\n        this.fireChangeOnUpdate = null;\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const { instance: spline } = annotation.data.spline;\n            return spline.isPointNearCurve(canvasCoords, proximity);\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                handleIndex = points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, contourHoleProcessingEnabled, } = this.editData;\n            const { data } = annotation;\n            annotation.autoGenerated = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const image = this.getTargetImageData(this.getTargetId(enabledElement.viewport));\n            const { imageData, dimensions } = image;\n            this.isHandleOutsideImage = data.handles.points\n                .map((p) => utilities.transformWorldToIndex(imageData, p))\n                .some((index) => !utilities.indexWithinDimensions(index, dimensions));\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            const changeType = newAnnotation\n                ? ChangeTypes.Completed\n                : ChangeTypes.HandlesUpdated;\n            if (!this.fireChangeOnUpdate) {\n                this.fireChangeOnUpdate = {\n                    annotationUID: annotation.annotationUID,\n                    changeType,\n                    contourHoleProcessingEnabled,\n                };\n            }\n            else {\n                this.fireChangeOnUpdate.annotationUID = annotation.annotationUID;\n                this.fireChangeOnUpdate.changeType = changeType;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._keyDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const key = eventDetail.key ?? '';\n            const { lastControlPointDeletionKeys } = this.configuration.spline;\n            const deleteLastPoint = lastControlPointDeletionKeys.includes(key);\n            if (!deleteLastPoint) {\n                return;\n            }\n            const { annotation } = this.editData;\n            const { data } = annotation;\n            if (data.handles.points.length === SPLINE_MIN_POINTS) {\n                this.cancel(element);\n                return;\n            }\n            else {\n                const controlPointIndex = data.handles.points.length - 1;\n                this._deleteControlPointByIndex(element, annotation, controlPointIndex);\n            }\n            evt.preventDefault();\n        };\n        this._mouseMoveCallback = (evt) => {\n            const { drawPreviewEnabled } = this.configuration.spline;\n            if (!drawPreviewEnabled) {\n                return;\n            }\n            const { element } = evt.detail;\n            const { renderingEngine } = getEnabledElement(element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData.lastCanvasPoint = evt.detail.currentPoints.canvas;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._mouseDownCallback = (evt) => {\n            const doubleClick = evt.type === Events.MOUSE_DOUBLE_CLICK;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            if (data.contour.closed) {\n                return;\n            }\n            this.doneEditMemo();\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const { canvas: canvasPoint, world: worldPoint } = currentPoints;\n            let closeContour = data.handles.points.length >= 2 && doubleClick;\n            let addNewPoint = true;\n            if (data.handles.points.length) {\n                this.createMemo(element, annotation, {\n                    newAnnotation: data.handles.points.length === 1,\n                });\n            }\n            if (data.handles.points.length >= 3) {\n                this.createMemo(element, annotation);\n                const { instance: spline } = data.spline;\n                const closestControlPoint = spline.getClosestControlPointWithinDistance(canvasPoint, SPLINE_CLICK_CLOSE_CURVE_DIST);\n                if (closestControlPoint?.index === 0) {\n                    addNewPoint = false;\n                    closeContour = true;\n                }\n            }\n            if (addNewPoint) {\n                data.handles.points.push(worldPoint);\n            }\n            data.contour.closed = data.contour.closed || closeContour;\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (data.contour.closed) {\n                this._endCallback(evt);\n            }\n            evt.preventDefault();\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                this.moveAnnotation(annotation, worldPosDelta);\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.triggerAnnotationCompleted = (annotation, contourHoleProcessingEnabled) => {\n            const eventType = Events.ANNOTATION_COMPLETED;\n            const eventDetail = {\n                annotation,\n                changeType: ChangeTypes.Completed,\n                contourHoleProcessingEnabled,\n            };\n            triggerEvent(eventTarget, eventType, eventDetail);\n        };\n        this.triggerAnnotationModified = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated) => {\n            const { viewportId, renderingEngineId } = enabledElement;\n            const eventType = Events.ANNOTATION_MODIFIED;\n            const eventDetail = {\n                annotation,\n                viewportId,\n                renderingEngineId,\n                changeType,\n            };\n            triggerEvent(eventTarget, eventType, eventDetail);\n        };\n        this.triggerChangeEvent = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated, contourHoleProcessingEnabled) => {\n            if (changeType === ChangeTypes.Completed) {\n                this.triggerAnnotationCompleted(annotation, contourHoleProcessingEnabled);\n            }\n            else {\n                this.triggerAnnotationModified(annotation, enabledElement, changeType);\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.KEY_DOWN, this._keyDownCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.addEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.KEY_DOWN, this._keyDownCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.removeEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._renderStats = (annotation, viewport, svgDrawingHelper, textboxStyle) => {\n            const data = annotation.data;\n            const targetId = this.getTargetId(viewport);\n            if (!data.spline.instance.closed || !textboxStyle.visibility) {\n                return;\n            }\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (!textLines || textLines.length === 0) {\n                return;\n            }\n            const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));\n            if (!data.handles.textBox.hasMoved) {\n                const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                data.handles.textBox.worldPosition =\n                    viewport.canvasToWorld(canvasTextBoxCoords);\n            }\n            const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n            const textBoxUID = 'textBox';\n            const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotation.annotationUID ?? '', textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, textboxStyle);\n            const { x: left, y: top, width, height } = boundingBox;\n            data.handles.textBox.worldBoundingBox = {\n                topLeft: viewport.canvasToWorld([left, top]),\n                topRight: viewport.canvasToWorld([left + width, top]),\n                bottomLeft: viewport.canvasToWorld([left, top + height]),\n                bottomRight: viewport.canvasToWorld([left + width, top + height]),\n            };\n        };\n        this.addControlPointCallback = (evt, annotation) => {\n            const { data } = annotation;\n            const splineType = data.spline.type;\n            const splineConfig = this._getSplineConfig(splineType);\n            const maxDist = splineConfig.controlPointAdditionDistance;\n            if (splineConfig.controlPointAdditionEnabled === false) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { instance: spline } = data.spline;\n            const canvasPos = evt.detail.currentPoints.canvas;\n            const closestPointInfo = spline.getClosestPoint(canvasPos);\n            if (closestPointInfo.distance > maxDist) {\n                return;\n            }\n            const { index, point: canvasPoint } = spline.addControlPointAtU(closestPointInfo.uValue);\n            data.handles.points.splice(index, 0, canvasToWorld(canvasPoint));\n            annotation.invalidated = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.deleteControlPointCallback = (evt, annotation) => {\n            const splineType = annotation.data.spline.type;\n            const splineConfig = this._getSplineConfig(splineType);\n            const maxDist = splineConfig.controlPointDeletionDistance;\n            if (splineConfig.controlPointDeletionEnabled === false) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const { canvas: canvasPos } = currentPoints;\n            const { instance: spline } = annotation.data.spline;\n            const closestControlPoint = spline.getClosestControlPointWithinDistance(canvasPos, maxDist);\n            if (!closestControlPoint) {\n                return;\n            }\n            this._deleteControlPointByIndex(element, annotation, closestControlPoint.index);\n        };\n        this._calculateCachedStats = (annotation, element) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            if (!data.contour.closed) {\n                return;\n            }\n            const enabledElement = getEnabledElement(element);\n            if (!enabledElement) {\n                return;\n            }\n            const { viewport } = enabledElement;\n            const { cachedStats } = data;\n            const { polyline: points } = data.contour;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { metadata } = image;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const canvasPoint = canvasCoordinates[0];\n                const originalWorldPoint = viewport.canvasToWorld(canvasPoint);\n                const deltaXPoint = viewport.canvasToWorld([\n                    canvasPoint[0] + 1,\n                    canvasPoint[1],\n                ]);\n                const deltaYPoint = viewport.canvasToWorld([\n                    canvasPoint[0],\n                    canvasPoint[1] + 1,\n                ]);\n                const deltaInX = vec3.distance(originalWorldPoint, deltaXPoint);\n                const deltaInY = vec3.distance(originalWorldPoint, deltaYPoint);\n                const { imageData } = image;\n                const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, () => {\n                    const { maxX: canvasMaxX, maxY: canvasMaxY, minX: canvasMinX, minY: canvasMinY, } = math.polyline.getAABB(canvasCoordinates);\n                    const topLeftBBWorld = viewport.canvasToWorld([\n                        canvasMinX,\n                        canvasMinY,\n                    ]);\n                    const topLeftBBIndex = utilities.transformWorldToIndex(imageData, topLeftBBWorld);\n                    const bottomRightBBWorld = viewport.canvasToWorld([\n                        canvasMaxX,\n                        canvasMaxY,\n                    ]);\n                    const bottomRightBBIndex = utilities.transformWorldToIndex(imageData, bottomRightBBWorld);\n                    return [topLeftBBIndex, bottomRightBBIndex];\n                });\n                let area = math.polyline.getArea(canvasCoordinates) / scale / scale;\n                area *= deltaInX * deltaInY;\n                cachedStats[targetId] = {\n                    Modality: metadata.Modality,\n                    area,\n                    areaUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                this.triggerAnnotationModified(annotation, enabledElement, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n        this.annotationCompletedBinded = this.annotationCompleted.bind(this);\n    }\n    annotationCompleted(evt) {\n        const { sourceAnnotation: annotation } = evt.detail;\n        if (!this.splineToolNames.includes(annotation?.metadata?.toolName) ||\n            !this.configuration.simplifiedSpline ||\n            !this.isContourSegmentationTool()) {\n            return;\n        }\n        convertContourSegmentationAnnotation(annotation);\n    }\n    initializeListeners() {\n        eventTarget.addEventListener(Events.ANNOTATION_COMPLETED, this.annotationCompletedBinded);\n    }\n    removeListeners() {\n        eventTarget.removeEventListener(Events.ANNOTATION_COMPLETED, this.annotationCompletedBinded);\n    }\n    onSetToolEnabled() {\n        this.initializeListeners();\n    }\n    onSetToolActive() {\n        this.initializeListeners();\n    }\n    onSetToolDisabled() {\n        this.removeListeners();\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const { canvas: canvasPos } = currentPoints;\n        const contourHoleProcessingEnabled = getMouseModifierKey(evt.detail.event) ===\n            this.configuration.contourHoleAdditionModifierKey;\n        const annotation = this.createAnnotation(evt);\n        this.isDrawing = true;\n        this.addAnnotation(annotation, element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            movingTextBox: false,\n            newAnnotation: true,\n            hasMoved: false,\n            lastCanvasPoint: canvasPos,\n            contourHoleProcessingEnabled,\n        };\n        this._activateDraw(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        return annotation;\n    }\n    cancel(element) {\n        if (!this.isDrawing) {\n            return;\n        }\n        this.isDrawing = false;\n        this._deactivateDraw(element);\n        this._deactivateModify(element);\n        resetElementCursor(element);\n        const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n        if (newAnnotation) {\n            removeAnnotation(annotation.annotationUID);\n        }\n        super.cancelAnnotation(annotation);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        this.editData = null;\n        return annotation.annotationUID;\n    }\n    isContourSegmentationTool() {\n        return false;\n    }\n    renderAnnotationInstance(renderContext) {\n        const { enabledElement, targetId, svgDrawingHelper, annotationStyle } = renderContext;\n        const { viewport } = enabledElement;\n        const { worldToCanvas } = viewport;\n        const { element } = viewport;\n        const annotation = renderContext.annotation;\n        const { annotationUID, data, highlighted } = annotation;\n        const { handles } = data;\n        const { points: controlPoints, activeHandleIndex } = handles;\n        const newAnnotation = this.editData?.newAnnotation;\n        const { lineWidth, lineDash, color, locked: annotationLocked, } = annotationStyle;\n        const canvasCoordinates = controlPoints.map((p) => worldToCanvas(p));\n        const { drawPreviewEnabled } = this.configuration.spline;\n        const splineType = annotation.data.spline.type;\n        const splineConfig = this._getSplineConfig(splineType);\n        const spline = annotation.data.spline.instance;\n        const childAnnotations = getChildAnnotations(annotation);\n        const missingAnnotation = childAnnotations.findIndex((it) => !it);\n        if (missingAnnotation !== -1) {\n            throw new Error(`Can't find annotation for child ${annotation.childAnnotationUIDs.join()}`);\n        }\n        const splineAnnotationsGroup = [annotation, ...childAnnotations].filter((annotation) => this._isSplineROIAnnotation(annotation));\n        splineAnnotationsGroup.forEach((annotation) => {\n            const spline = this._updateSplineInstance(element, annotation);\n            const splinePolylineCanvas = spline.getPolylinePoints();\n            this.updateContourPolyline(annotation, {\n                points: splinePolylineCanvas,\n                closed: data.contour.closed,\n                targetWindingDirection: ContourWindingDirection.Clockwise,\n            }, viewport, { updateWindingDirection: data.contour.closed });\n        });\n        super.renderAnnotationInstance(renderContext);\n        if (!data.cachedStats[targetId] ||\n            data.cachedStats[targetId].areaUnit == null) {\n            data.cachedStats[targetId] = {\n                Modality: null,\n                area: null,\n                areaUnit: null,\n            };\n            this._calculateCachedStats(annotation, element);\n        }\n        else if (annotation.invalidated) {\n            this._throttledCalculateCachedStats(annotation, element);\n        }\n        let activeHandleCanvasCoords;\n        if (!annotationLocked && !this.editData && activeHandleIndex !== null) {\n            activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n        }\n        if (activeHandleCanvasCoords || newAnnotation || highlighted) {\n            const handleGroupUID = '0';\n            drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                color,\n                lineWidth,\n                handleRadius: '3',\n            });\n        }\n        if (drawPreviewEnabled &&\n            spline.numControlPoints >= 1 &&\n            this.editData?.lastCanvasPoint &&\n            !spline.closed) {\n            const { lastCanvasPoint } = this.editData;\n            const { enableTwoPointPreview } = this.configuration.spline;\n            if (spline.numControlPoints === 1 && enableTwoPointPreview) {\n                const firstPoint = canvasCoordinates[0];\n                const previewPolylinePoints = [firstPoint, lastCanvasPoint];\n                drawPolylineSvg(svgDrawingHelper, annotationUID, 'previewSplineChange', previewPolylinePoints, {\n                    color: '#9EA0CA',\n                    lineDash: lineDash,\n                    lineWidth: 1,\n                });\n            }\n            else if (spline.numControlPoints > 1) {\n                const previewPolylinePoints = spline.getPreviewPolylinePoints(lastCanvasPoint, SPLINE_CLICK_CLOSE_CURVE_DIST);\n                drawPolylineSvg(svgDrawingHelper, annotationUID, 'previewSplineChange', previewPolylinePoints, {\n                    color: '#9EA0CA',\n                    lineDash: lineDash,\n                    lineWidth: 1,\n                });\n            }\n        }\n        if (splineConfig.showControlPointsConnectors) {\n            const controlPointsConnectors = [...canvasCoordinates];\n            if (spline.closed) {\n                controlPointsConnectors.push(canvasCoordinates[0]);\n            }\n            drawPolylineSvg(svgDrawingHelper, annotationUID, 'controlPointsConnectors', controlPointsConnectors, {\n                color: 'rgba(255, 255, 255, 0.5)',\n                lineWidth: 1,\n            });\n        }\n        this._renderStats(annotation, viewport, svgDrawingHelper, annotationStyle.textbox);\n        if (this.fireChangeOnUpdate?.annotationUID === annotationUID) {\n            this.triggerChangeEvent(annotation, enabledElement, this.fireChangeOnUpdate.changeType, this.fireChangeOnUpdate.contourHoleProcessingEnabled);\n            this.fireChangeOnUpdate = null;\n        }\n        annotation.invalidated = false;\n        return true;\n    }\n    createInterpolatedSplineControl(annotation) {\n        if (annotation.data.handles.points?.length) {\n            return;\n        }\n        const { polyline } = annotation.data.contour;\n        if (!polyline || !polyline.length) {\n            return;\n        }\n        annotation.data.handles.points = [];\n        const { points } = annotation.data.handles;\n        const increment = Math.max(10, Math.floor(polyline.length / 20));\n        for (let i = 0; i < polyline.length - increment; i += increment) {\n            points.push(polyline[i]);\n        }\n        points.push(polyline[polyline.length - 1]);\n    }\n    isSplineAnnotation(annotation) {\n        return splineToolNames.includes(annotation?.metadata?.toolName);\n    }\n    createSplineObjectFromType(annotation, splineType) {\n        const splineConfig = this._getSplineConfig(splineType);\n        const spline = new splineConfig.Class();\n        annotation.data.spline = {\n            type: splineConfig.type,\n            instance: spline,\n            resolution: splineConfig.resolution,\n        };\n    }\n    createAnnotation(evt) {\n        const contourAnnotation = super.createAnnotation(evt);\n        const { world: worldPos } = evt.detail.currentPoints;\n        const { type: splineType } = this.configuration.spline;\n        const splineConfig = this._getSplineConfig(splineType);\n        const spline = new splineConfig.Class();\n        const createSpline = () => ({\n            type: splineConfig.type,\n            instance: spline,\n            resolution: splineConfig.resolution,\n        });\n        let onInterpolationComplete;\n        if (this.configuration.interpolation?.enabled) {\n            onInterpolationComplete = (annotation) => {\n                annotation.data.spline ||= createSpline();\n                this.createInterpolatedSplineControl(annotation);\n            };\n        }\n        return utilities.deepMerge(contourAnnotation, {\n            data: {\n                handles: {\n                    points: [[...worldPos]],\n                },\n                spline: createSpline(),\n                cachedStats: {},\n            },\n            onInterpolationComplete,\n        });\n    }\n    _deleteControlPointByIndex(element, annotation, controlPointIndex) {\n        const enabledElement = getEnabledElement(element);\n        const { points: controlPoints } = annotation.data.handles;\n        if (controlPoints.length === 3) {\n            removeAnnotation(annotation.annotationUID);\n        }\n        else {\n            controlPoints.splice(controlPointIndex, 1);\n        }\n        const { renderingEngine } = enabledElement;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        annotation.invalidated = true;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n    }\n    _isSplineROIAnnotation(annotation) {\n        return !!annotation.data?.spline;\n    }\n    _getSplineConfig(type) {\n        const { configuration: config } = this;\n        const splineConfigs = config.spline.configuration;\n        return Object.assign({ type }, DEFAULT_SPLINE_CONFIG, splineConfigs[type]);\n    }\n    _updateSplineInstance(element, annotation) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { worldToCanvas } = viewport;\n        const { data } = annotation;\n        const { type: splineType, instance: spline } = annotation.data.spline;\n        const splineConfig = this._getSplineConfig(splineType);\n        const worldPoints = data.handles.points;\n        const canvasPoints = worldPoints.map(worldToCanvas);\n        const resolution = splineConfig.resolution !== undefined\n            ? parseInt(splineConfig.resolution)\n            : undefined;\n        const scale = splineConfig.scale !== undefined\n            ? parseFloat(splineConfig.scale)\n            : undefined;\n        spline.setControlPoints(canvasPoints);\n        spline.closed = !!data.contour.closed;\n        if (!spline.fixedResolution &&\n            resolution !== undefined &&\n            spline.resolution !== resolution) {\n            spline.resolution = resolution;\n            annotation.invalidated = true;\n        }\n        if (spline instanceof CardinalSpline &&\n            !spline.fixedScale &&\n            scale !== undefined &&\n            spline.scale !== scale) {\n            spline.scale = scale;\n            annotation.invalidated = true;\n        }\n        return spline;\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        if (points.length < SPLINE_MIN_POINTS) {\n            console.warn('Spline requires at least 3 control points');\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, viewUp, instance, viewport, } = this.hydrateBase(SplineROITool, enabledElement, points, options);\n        const splineType = options?.splineType || SplineTypesEnum.CatmullRom;\n        const splineConfig = instance._getSplineConfig(splineType);\n        const SplineClass = splineConfig.Class;\n        const splineInstance = new SplineClass();\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n                label: '',\n                cachedStats: {},\n                spline: {\n                    type: splineType,\n                    instance: splineInstance,\n                },\n                contour: {\n                    closed: true,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: true,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, isEmptyArea, areaUnit } = cachedVolumeStats;\n    const textLines = [];\n    if (area) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${utilities.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    return textLines;\n}\nexport default SplineROITool;\n","import { eventTarget, utilities } from '@cornerstonejs/core';\nimport SplineROITool from './SplineROITool';\nimport { Events } from '../../enums';\nimport { convertContourSegmentationAnnotation } from '../../utilities/contourSegmentation';\nclass SplineContourSegmentationTool extends SplineROITool {\n    static { this.toolName = 'SplineContourSegmentationTool'; }\n    constructor(toolProps) {\n        const initialProps = utilities.deepMerge({\n            configuration: {\n                calculateStats: false,\n            },\n        }, toolProps);\n        super(initialProps);\n        this.annotationCutMergeCompletedBinded =\n            this.annotationCutMergeCompleted.bind(this);\n    }\n    isContourSegmentationTool() {\n        return true;\n    }\n    initializeListeners() {\n        eventTarget.addEventListener(Events.ANNOTATION_CUT_MERGE_PROCESS_COMPLETED, this.annotationCutMergeCompletedBinded);\n    }\n    removeListeners() {\n        eventTarget.removeEventListener(Events.ANNOTATION_CUT_MERGE_PROCESS_COMPLETED, this.annotationCutMergeCompletedBinded);\n    }\n    annotationCutMergeCompleted(evt) {\n        const { sourceAnnotation: annotation } = evt.detail;\n        if (this.toolName !== annotation?.metadata?.toolName ||\n            !this.splineToolNames.includes(annotation?.metadata?.toolName) ||\n            !this.configuration.simplifiedSpline) {\n            return;\n        }\n        convertContourSegmentationAnnotation(annotation);\n    }\n}\nexport default SplineContourSegmentationTool;\n","import { vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, VolumeViewport, utilities, triggerEvent, eventTarget, } from '@cornerstonejs/core';\nimport { removeAnnotation } from '../../stateManagement/annotation/annotationState';\nimport { drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events, KeyboardBindings, ChangeTypes } from '../../enums';\nimport { resetElementCursor } from '../../cursors/elementCursor';\nimport getMouseModifierKey from '../../eventDispatchers/shared/getMouseModifier';\nimport * as math from '../../utilities/math';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport findHandlePolylineIndex from '../../utilities/contours/findHandlePolylineIndex';\nimport { ContourWindingDirection } from '../../types/ContourAnnotation';\nimport { triggerAnnotationModified, triggerContourAnnotationCompleted, } from '../../stateManagement/annotation/helpers/state';\nimport { LivewireScissors } from '../../utilities/livewire/LivewireScissors';\nimport { LivewirePath } from '../../utilities/livewire/LiveWirePath';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport ContourSegmentationBaseTool from '../base/ContourSegmentationBaseTool';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { getCalibratedLengthUnitsAndScale, throttle } from '../../utilities';\nconst CLICK_CLOSE_CURVE_SQR_DIST = 10 ** 2;\nclass LivewireContourTool extends ContourSegmentationBaseTool {\n    static { this.toolName = 'LivewireContour'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            getTextLines: defaultGetTextLines,\n            calculateStats: true,\n            preventHandleOutsideImage: false,\n            contourHoleAdditionModifierKey: KeyboardBindings.Shift,\n            snapHandleNearby: 2,\n            interpolation: {\n                enabled: false,\n                nearestEdge: 2,\n                showInterpolationPolyline: false,\n            },\n            decimate: {\n                enabled: false,\n                epsilon: 0.1,\n            },\n            actions: {\n                cancelInProgress: {\n                    method: 'cancelInProgress',\n                    bindings: [\n                        {\n                            key: 'Escape',\n                        },\n                    ],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const proximitySquared = proximity * proximity;\n            const canvasPoints = annotation.data.contour.polyline.map((p) => viewport.worldToCanvas(p));\n            let startPoint = canvasPoints[canvasPoints.length - 1];\n            for (let i = 0; i < canvasPoints.length; i++) {\n                const endPoint = canvasPoints[i];\n                const distanceToPointSquared = math.lineSegment.distanceToPointSquared(startPoint, endPoint, canvasCoords);\n                if (distanceToPointSquared <= proximitySquared) {\n                    return true;\n                }\n                startPoint = endPoint;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                handleIndex = points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt, clearAnnotation = false) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, contourHoleProcessingEnabled, } = this.editData;\n            const { data } = annotation;\n            this.doneEditMemo();\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            if ((this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) ||\n                clearAnnotation) {\n                removeAnnotation(annotation.annotationUID);\n                this.clearEditData();\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                return;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            const changeType = newAnnotation\n                ? ChangeTypes.Completed\n                : ChangeTypes.HandlesUpdated;\n            this.triggerChangeEvent(annotation, enabledElement, changeType, contourHoleProcessingEnabled);\n            this.clearEditData();\n        };\n        this.triggerChangeEvent = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated, contourHoleProcessingEnabled = false) => {\n            if (changeType === ChangeTypes.Completed) {\n                triggerContourAnnotationCompleted(annotation, contourHoleProcessingEnabled);\n            }\n            else {\n                triggerAnnotationModified(annotation, enabledElement.viewport.element, changeType);\n            }\n        };\n        this._mouseDownCallback = (evt) => {\n            const doubleClick = evt.type === Events.MOUSE_DOUBLE_CLICK;\n            const { annotation, viewportIdsToRender, worldToSlice, sliceToWorld, newAnnotation, } = this.editData;\n            if (this.editData.closed) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const { canvas: canvasPos, world: worldPosOriginal } = currentPoints;\n            let worldPos = worldPosOriginal;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            const controlPoints = this.editData.currentPath.getControlPoints();\n            let closePath = controlPoints.length >= 2 && doubleClick;\n            this.doneEditMemo();\n            this.createMemo(element, annotation, {\n                newAnnotation: newAnnotation && controlPoints.length === 1,\n            });\n            if (controlPoints.length >= 2) {\n                const closestHandlePoint = {\n                    index: -1,\n                    distSquared: Infinity,\n                };\n                for (let i = 0, len = controlPoints.length; i < len; i++) {\n                    const controlPoint = controlPoints[i];\n                    const worldControlPoint = sliceToWorld(controlPoint);\n                    const canvasControlPoint = viewport.worldToCanvas(worldControlPoint);\n                    const distSquared = math.point.distanceToPointSquared(canvasPos, canvasControlPoint);\n                    if (distSquared <= CLICK_CLOSE_CURVE_SQR_DIST &&\n                        distSquared < closestHandlePoint.distSquared) {\n                        closestHandlePoint.distSquared = distSquared;\n                        closestHandlePoint.index = i;\n                    }\n                }\n                if (closestHandlePoint.index === 0) {\n                    closePath = true;\n                }\n            }\n            const { snapHandleNearby } = this.configuration;\n            if (snapHandleNearby && !this.editData.closed) {\n                const currentPath = new LivewirePath();\n                const snapPoint = this.scissors.findMinNearby(worldToSlice(worldPosOriginal), 1);\n                const pathPoints = this.scissors.findPathToPoint(snapPoint);\n                currentPath.addPoints(pathPoints);\n                currentPath.prependPath(this.editData.confirmedPath);\n                worldPos = sliceToWorld(snapPoint);\n                this.editData.currentPath = currentPath;\n            }\n            this.editData.closed = this.editData.closed || closePath;\n            this.editData.confirmedPath = this.editData.currentPath;\n            const lastPoint = this.editData.currentPath.getLastPoint();\n            this.editData.confirmedPath.addControlPoint(lastPoint);\n            annotation.data.handles.points.push(sliceToWorld(lastPoint));\n            this.scissors.startSearch(worldToSlice(worldPos));\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (this.editData.closed) {\n                this.updateAnnotation(this.editData.confirmedPath);\n                this._endCallback(evt);\n            }\n            evt.preventDefault();\n        };\n        this._mouseMoveCallback = (evt) => {\n            const { element, currentPoints } = evt.detail;\n            const { world: worldPos, canvas: canvasPos } = currentPoints;\n            const { renderingEngine } = getEnabledElement(element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData.lastCanvasPoint = canvasPos;\n            const { width: imgWidth, height: imgHeight } = this.scissors;\n            const { worldToSlice } = this.editData;\n            const slicePoint = worldToSlice(worldPos);\n            if (slicePoint[0] < 0 ||\n                slicePoint[1] < 0 ||\n                slicePoint[0] >= imgWidth ||\n                slicePoint[1] >= imgHeight) {\n                return;\n            }\n            const pathPoints = this.scissors.findPathToPoint(slicePoint);\n            const currentPath = new LivewirePath();\n            currentPath.addPoints(pathPoints);\n            currentPath.prependPath(this.editData.confirmedPath);\n            this.editData.currentPath = currentPath;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, movingTextBox, handleIndex, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                console.warn('Drag annotation not implemented');\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                this.editHandle(worldPos, element, annotation, handleIndex);\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (!this.isDrawing) {\n                return;\n            }\n            this.isDrawing = false;\n            this._deactivateDraw(element);\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            if (newAnnotation) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            this.scissors = null;\n            return annotation.annotationUID;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.addEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.removeEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._calculateCachedStats = (annotation, element) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            if (!data.contour.closed) {\n                return;\n            }\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            const { cachedStats } = data;\n            const { polyline: points } = data.contour;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { metadata } = image;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const canvasPoint = canvasCoordinates[0];\n                const originalWorldPoint = viewport.canvasToWorld(canvasPoint);\n                const deltaXPoint = viewport.canvasToWorld([\n                    canvasPoint[0] + 1,\n                    canvasPoint[1],\n                ]);\n                const deltaYPoint = viewport.canvasToWorld([\n                    canvasPoint[0],\n                    canvasPoint[1] + 1,\n                ]);\n                const deltaInX = vec3.distance(originalWorldPoint, deltaXPoint);\n                const deltaInY = vec3.distance(originalWorldPoint, deltaYPoint);\n                const { imageData } = image;\n                const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, () => {\n                    const { maxX: canvasMaxX, maxY: canvasMaxY, minX: canvasMinX, minY: canvasMinY, } = math.polyline.getAABB(canvasCoordinates);\n                    const topLeftBBWorld = viewport.canvasToWorld([\n                        canvasMinX,\n                        canvasMinY,\n                    ]);\n                    const topLeftBBIndex = utilities.transformWorldToIndex(imageData, topLeftBBWorld);\n                    const bottomRightBBWorld = viewport.canvasToWorld([\n                        canvasMaxX,\n                        canvasMaxY,\n                    ]);\n                    const bottomRightBBIndex = utilities.transformWorldToIndex(imageData, bottomRightBBWorld);\n                    return [topLeftBBIndex, bottomRightBBIndex];\n                });\n                let area = math.polyline.getArea(canvasCoordinates) / scale / scale;\n                area *= deltaInX * deltaInY;\n                cachedStats[targetId] = {\n                    Modality: metadata.Modality,\n                    area,\n                    areaUnit: areaUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                this.triggerAnnotationModified(annotation, enabledElement, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._renderStats = (annotation, viewport, svgDrawingHelper, textboxStyle) => {\n            const data = annotation.data;\n            const targetId = this.getTargetId(viewport);\n            if (!data.contour.closed || !textboxStyle.visibility) {\n                return;\n            }\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (!textLines || textLines.length === 0) {\n                return;\n            }\n            const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));\n            if (!data.handles.textBox.hasMoved) {\n                const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                data.handles.textBox.worldPosition =\n                    viewport.canvasToWorld(canvasTextBoxCoords);\n            }\n            const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n            const textBoxUID = 'textBox';\n            const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotation.annotationUID ?? '', textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, textboxStyle);\n            const { x: left, y: top, width, height } = boundingBox;\n            data.handles.textBox.worldBoundingBox = {\n                topLeft: viewport.canvasToWorld([left, top]),\n                topRight: viewport.canvasToWorld([left + width, top]),\n                bottomLeft: viewport.canvasToWorld([left, top + height]),\n                bottomRight: viewport.canvasToWorld([left + width, top + height]),\n            };\n        };\n        this.triggerAnnotationModified = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated) => {\n            const { viewportId, renderingEngineId } = enabledElement;\n            const eventType = Events.ANNOTATION_MODIFIED;\n            const eventDetail = {\n                annotation,\n                viewportId,\n                renderingEngineId,\n                changeType,\n            };\n            triggerEvent(eventTarget, eventType, eventDetail);\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    setupBaseEditData(worldPos, element, annotation, nextPos, contourHoleProcessingEnabled) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        this.isDrawing = true;\n        const viewportImageData = viewport.getImageData();\n        const { imageData: vtkImageData } = viewportImageData;\n        let worldToSlice;\n        let sliceToWorld;\n        let width;\n        let height;\n        let scalarData;\n        if (!(viewport instanceof VolumeViewport)) {\n            width = viewportImageData.dimensions[0];\n            height = viewportImageData.dimensions[1];\n            worldToSlice = (point) => {\n                const ijkPoint = csUtils.transformWorldToIndex(vtkImageData, point);\n                return [ijkPoint[0], ijkPoint[1]];\n            };\n            sliceToWorld = (point) => csUtils.transformIndexToWorld(vtkImageData, [point[0], point[1], 0]);\n            scalarData = viewportImageData.scalarData;\n        }\n        else if (viewport instanceof VolumeViewport) {\n            const sliceImageData = csUtils.getCurrentVolumeViewportSlice(viewport);\n            const { sliceToIndexMatrix, indexToSliceMatrix } = sliceImageData;\n            worldToSlice = (point) => {\n                const ijkPoint = csUtils.transformWorldToIndex(vtkImageData, point);\n                const slicePoint = vec3.transformMat4([0, 0, 0], ijkPoint, indexToSliceMatrix);\n                return [slicePoint[0], slicePoint[1]];\n            };\n            sliceToWorld = (point) => {\n                const ijkPoint = vec3.transformMat4([0, 0, 0], [point[0], point[1], 0], sliceToIndexMatrix);\n                return csUtils.transformIndexToWorld(vtkImageData, ijkPoint);\n            };\n            scalarData = sliceImageData.scalarData;\n            width = sliceImageData.width;\n            height = sliceImageData.height;\n        }\n        else {\n            throw new Error('Viewport not supported');\n        }\n        scalarData = csUtils.convertToGrayscale(scalarData, width, height);\n        const { voiRange } = viewport.getProperties();\n        const startPos = worldToSlice(worldPos);\n        this.scissors = LivewireScissors.createInstanceFromRawPixelData(scalarData, width, height, voiRange);\n        if (nextPos) {\n            this.scissorsNext = LivewireScissors.createInstanceFromRawPixelData(scalarData, width, height, voiRange);\n            this.scissorsNext.startSearch(worldToSlice(nextPos));\n        }\n        this.scissors.startSearch(startPos);\n        const newAnnotation = !nextPos;\n        const confirmedPath = new LivewirePath();\n        const currentPath = new LivewirePath();\n        const currentPathNext = newAnnotation ? undefined : new LivewirePath();\n        confirmedPath.addPoint(startPos);\n        confirmedPath.addControlPoint(startPos);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        const lastCanvasPoint = viewport.worldToCanvas(worldPos);\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            newAnnotation,\n            hasMoved: false,\n            lastCanvasPoint,\n            confirmedPath,\n            currentPath,\n            confirmedPathNext: currentPathNext,\n            closed: false,\n            handleIndex: this.editData?.handleIndex ?? annotation.handles?.activeHandleIndex,\n            worldToSlice,\n            sliceToWorld,\n            contourHoleProcessingEnabled,\n        };\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const { world: worldPos } = currentPoints;\n        const annotation = this.createAnnotation(evt);\n        const contourHoleProcessingEnabled = getMouseModifierKey(evt.detail.event) ===\n            this.configuration.contourHoleAdditionModifierKey;\n        this.setupBaseEditData(worldPos, element, annotation, undefined, contourHoleProcessingEnabled);\n        this.addAnnotation(annotation, element);\n        this._activateDraw(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(this.editData.viewportIdsToRender);\n        return annotation;\n    }\n    clearEditData() {\n        this.editData = null;\n        this.scissors = null;\n        this.scissorsNext = null;\n        this.isDrawing = false;\n    }\n    editHandle(worldPos, element, annotation, handleIndex) {\n        const { data } = annotation;\n        const { points: handlePoints } = data.handles;\n        const { length: numHandles } = handlePoints;\n        const previousHandle = handlePoints[(handleIndex - 1 + numHandles) % numHandles];\n        const nextHandle = handlePoints[(handleIndex + 1) % numHandles];\n        if (!this.editData?.confirmedPathNext) {\n            this.setupBaseEditData(previousHandle, element, annotation, nextHandle);\n            const { polyline } = data.contour;\n            const confirmedPath = new LivewirePath();\n            const confirmedPathNext = new LivewirePath();\n            const { worldToSlice } = this.editData;\n            const previousIndex = findHandlePolylineIndex(annotation, handleIndex - 1);\n            const nextIndex = findHandlePolylineIndex(annotation, handleIndex + 1);\n            if (nextIndex === -1 || previousIndex === -1) {\n                throw new Error(`Can't find handle index ${nextIndex === -1 && nextHandle} ${previousIndex === -1 && previousHandle}`);\n            }\n            if (handleIndex === 0) {\n                confirmedPathNext.addPoints(polyline.slice(nextIndex + 1, previousIndex).map(worldToSlice));\n            }\n            else {\n                confirmedPath.addPoints(polyline.slice(0, previousIndex + 1).map(worldToSlice));\n                confirmedPathNext.addPoints(polyline.slice(nextIndex, polyline.length).map(worldToSlice));\n            }\n            this.editData.confirmedPath = confirmedPath;\n            this.editData.confirmedPathNext = confirmedPathNext;\n        }\n        const { editData, scissors } = this;\n        const { worldToSlice, sliceToWorld } = editData;\n        const { activeHandleIndex } = data.handles;\n        if (activeHandleIndex === null || activeHandleIndex === undefined) {\n            data.handles.activeHandleIndex = handleIndex;\n        }\n        else if (activeHandleIndex !== handleIndex) {\n            throw new Error(`Trying to edit a different handle than the one currently being edited ${handleIndex}!==${data.handles.activeHandleIndex}`);\n        }\n        const slicePos = worldToSlice(worldPos);\n        if (slicePos[0] < 0 ||\n            slicePos[0] >= scissors.width ||\n            slicePos[1] < 0 ||\n            slicePos[1] >= scissors.height) {\n            return;\n        }\n        handlePoints[handleIndex] = sliceToWorld(slicePos);\n        const pathPointsLeft = scissors.findPathToPoint(slicePos);\n        const pathPointsRight = this.scissorsNext.findPathToPoint(slicePos);\n        const currentPath = new LivewirePath();\n        currentPath.prependPath(editData.confirmedPath);\n        if (handleIndex !== 0) {\n            currentPath.addPoints(pathPointsLeft);\n        }\n        currentPath.addPoints(pathPointsRight.reverse());\n        currentPath.appendPath(editData.confirmedPathNext);\n        if (handleIndex === 0) {\n            currentPath.addPoints(pathPointsLeft);\n        }\n        editData.currentPath = currentPath;\n        annotation.invalidated = true;\n        editData.hasMoved = true;\n        editData.closed = true;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        this.updateAnnotation(this.editData?.currentPath);\n        return super.renderAnnotation(enabledElement, svgDrawingHelper);\n    }\n    isContourSegmentationTool() {\n        return false;\n    }\n    createAnnotation(evt) {\n        const contourSegmentationAnnotation = super.createAnnotation(evt);\n        const { world: worldPos } = evt.detail.currentPoints;\n        const annotation = csUtils.deepMerge(contourSegmentationAnnotation, {\n            data: {\n                handles: {\n                    points: [[...worldPos]],\n                },\n            },\n        });\n        return annotation;\n    }\n    cancelInProgress(element, config, evt) {\n        if (!this.editData) {\n            this.undo();\n            return;\n        }\n        this._endCallback(evt, true);\n    }\n    renderAnnotationInstance(renderContext) {\n        const { annotation, enabledElement, svgDrawingHelper, annotationStyle, targetId, } = renderContext;\n        const { viewport } = enabledElement;\n        const { element } = viewport;\n        const { worldToCanvas } = viewport;\n        const { annotationUID, data, highlighted } = annotation;\n        const { handles } = data;\n        const newAnnotation = this.editData?.newAnnotation;\n        const { lineWidth, lineDash, color } = annotationStyle;\n        if (highlighted ||\n            (newAnnotation &&\n                annotation.annotationUID === this.editData?.annotation?.annotationUID)) {\n            const handleGroupUID = '0';\n            const canvasHandles = handles.points.map(worldToCanvas);\n            drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasHandles, {\n                color,\n                lineDash,\n                lineWidth,\n            });\n        }\n        super.renderAnnotationInstance(renderContext);\n        if (!data.cachedStats[targetId] ||\n            data.cachedStats[targetId]?.areaUnit === null) {\n            data.cachedStats[targetId] = {\n                Modality: null,\n                area: null,\n                areaUnit: null,\n            };\n            this._calculateCachedStats(annotation, element);\n        }\n        else if (annotation.invalidated) {\n            this._throttledCalculateCachedStats(annotation, element);\n        }\n        this._renderStats(annotation, viewport, svgDrawingHelper, annotationStyle.textbox);\n        return true;\n    }\n    updateAnnotation(livewirePath) {\n        if (!this.editData || !livewirePath) {\n            return;\n        }\n        const { annotation, sliceToWorld, worldToSlice, closed, newAnnotation } = this.editData;\n        let { pointArray: imagePoints } = livewirePath;\n        if (imagePoints.length > 1) {\n            imagePoints = [...imagePoints, imagePoints[0]];\n        }\n        const targetWindingDirection = newAnnotation && closed ? ContourWindingDirection.Clockwise : undefined;\n        this.updateContourPolyline(annotation, {\n            points: imagePoints,\n            closed,\n            targetWindingDirection,\n        }, {\n            canvasToWorld: sliceToWorld,\n            worldToCanvas: worldToSlice,\n        });\n    }\n}\nexport default LivewireContourTool;\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, areaUnit } = cachedVolumeStats;\n    const textLines = [];\n    if (area) {\n        const areaLine = `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    return textLines;\n}\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport LivewireContourTool from './LivewireContourTool';\nimport { LivewirePath } from '../../utilities/livewire/LiveWirePath';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nimport { ChangeTypes } from '../../enums';\nimport { drawPolyline as drawPolylineSvg } from '../../drawingSvg';\nclass LivewireContourSegmentationTool extends LivewireContourTool {\n    static { this.toolName = 'LivewireContourSegmentationTool'; }\n    updateInterpolatedAnnotation(annotation, enabledElement) {\n        if (this.editData ||\n            !annotation.invalidated ||\n            !annotation.data.handles.interpolationSources) {\n            return;\n        }\n        annotation.data.contour.originalPolyline = annotation.data.contour.polyline;\n        queueMicrotask(() => {\n            if (!annotation.data.handles.interpolationSources) {\n                return;\n            }\n            const { points } = annotation.data.handles;\n            const { element } = enabledElement.viewport;\n            this.setupBaseEditData(points[0], element, annotation);\n            const { length: count } = points;\n            const { scissors } = this;\n            const { nearestEdge, repeatInterpolation } = this.configuration.interpolation;\n            annotation.data.handles.originalPoints = points;\n            const { worldToSlice, sliceToWorld } = this.editData;\n            const handleSmoothing = [];\n            if (nearestEdge) {\n                let lastPoint = worldToSlice(points[points.length - 1]);\n                points.forEach((point, hIndex) => {\n                    const testPoint = worldToSlice(point);\n                    lastPoint = testPoint;\n                    handleSmoothing.push(testPoint);\n                    scissors.startSearch(lastPoint);\n                    scissors.findPathToPoint(testPoint);\n                    scissors.findPathToPoint(worldToSlice(points[(hIndex + 3) % points.length]));\n                    const minPoint = scissors.findMinNearby(testPoint, nearestEdge);\n                    if (!csUtils.isEqual(testPoint, minPoint)) {\n                        handleSmoothing[hIndex] = minPoint;\n                        lastPoint = minPoint;\n                        points[hIndex] = sliceToWorld(minPoint);\n                    }\n                });\n            }\n            const acceptedPath = new LivewirePath();\n            for (let i = 0; i < count; i++) {\n                scissors.startSearch(worldToSlice(points[i]));\n                const path = scissors.findPathToPoint(worldToSlice(points[(i + 1) % count]));\n                acceptedPath.addPoints(path);\n            }\n            this.updateAnnotation(acceptedPath);\n            this.scissors = null;\n            this.scissorsNext = null;\n            this.editData = null;\n            annotation.data.handles.interpolationSources = null;\n            if (repeatInterpolation) {\n                triggerAnnotationModified(annotation, enabledElement.viewport.element, ChangeTypes.InterpolationUpdated);\n            }\n        });\n    }\n    renderAnnotationInstance(renderContext) {\n        const { enabledElement, svgDrawingHelper } = renderContext;\n        const annotation = renderContext.annotation;\n        const { annotationUID } = annotation;\n        const { viewport } = enabledElement;\n        const { worldToCanvas } = viewport;\n        const { showInterpolationPolyline } = this.configuration.interpolation || {};\n        this.updateInterpolatedAnnotation?.(annotation, enabledElement);\n        const { originalPolyline } = annotation.data.contour;\n        const rendered = super.renderAnnotationInstance(renderContext);\n        if (showInterpolationPolyline &&\n            originalPolyline &&\n            annotation.autoGenerated) {\n            const polylineCanvasPoints = originalPolyline.map(worldToCanvas);\n            polylineCanvasPoints.push(polylineCanvasPoints[0]);\n            drawPolylineSvg(svgDrawingHelper, annotationUID, 'interpolationContour-0', polylineCanvasPoints, {\n                color: '#70ffff',\n                lineWidth: 1,\n                fillOpacity: 0,\n            });\n        }\n        return rendered;\n    }\n    isContourSegmentationTool() {\n        return true;\n    }\n}\nexport default LivewireContourSegmentationTool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawArrow as drawArrowSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { setAnnotationLabel } from '../../utilities';\nimport { getStyleProperty } from '../../stateManagement/annotation/config/helpers';\nclass ArrowAnnotateTool extends AnnotationTool {\n    static { this.toolName = 'ArrowAnnotate'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            getTextCallback,\n            changeTextCallback,\n            preventHandleOutsideImage: false,\n            arrowFirst: true,\n            arrowHeadStyle: 'legacy',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            this.startGroupRecording();\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const { arrowFirst } = this.configuration;\n            const annotation = this.createAnnotation(evt, [[...worldPos], [...worldPos]], {\n                data: {\n                    handles: {\n                        arrowFirst,\n                    },\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved, movingTextBox, } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            if (newAnnotation) {\n                this.configuration.getTextCallback((label) => {\n                    if (!label) {\n                        removeAnnotation(annotation.annotationUID);\n                        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                        this.editData = null;\n                        this.isDrawing = false;\n                        return;\n                    }\n                    annotation.data.label = label;\n                    triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n                    triggerAnnotationCompleted(annotation);\n                    this.createMemo(element, annotation, { newAnnotation: !!this.memo });\n                    setAnnotationLabel(annotation, element, label);\n                    this.endGroupRecording();\n                    this.doneEditMemo();\n                    triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                });\n            }\n            else if (!movingTextBox) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n            this.doneEditMemo();\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.touchTapCallback = (evt) => {\n            if (evt.detail.taps == 2) {\n                this.doubleClickCallback(evt);\n            }\n        };\n        this.doubleClickCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            let annotations = getAnnotations(this.getToolName(), element);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return;\n            }\n            const clickedAnnotation = annotations.find((annotation) => this.isPointNearTool(element, annotation, eventDetail.currentPoints.canvas, 6));\n            if (!clickedAnnotation) {\n                return;\n            }\n            const annotation = clickedAnnotation;\n            this.configuration.changeTextCallback(clickedAnnotation, evt.detail, this._doneChangingTextCallback.bind(this, element, annotation));\n            this.editData = null;\n            this.isDrawing = false;\n            evt.stopImmediatePropagation();\n            evt.preventDefault();\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles, label } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, markerSize } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                let activeHandleCanvasCoords;\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                const showHandlesAlways = Boolean(getStyleProperty('showHandlesAlways', {}));\n                if (activeHandleCanvasCoords || showHandlesAlways) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineWidth,\n                    });\n                }\n                const arrowUID = '1';\n                if (this.configuration.arrowFirst) {\n                    drawArrowSvg(svgDrawingHelper, annotationUID, arrowUID, canvasCoordinates[1], canvasCoordinates[0], {\n                        color,\n                        width: lineWidth,\n                        lineDash: lineDash,\n                        viaMarker: this.configuration.arrowHeadStyle !== 'legacy',\n                        markerSize,\n                    });\n                }\n                else {\n                    drawArrowSvg(svgDrawingHelper, annotationUID, arrowUID, canvasCoordinates[0], canvasCoordinates[1], {\n                        color,\n                        width: lineWidth,\n                        lineDash: lineDash,\n                        viaMarker: this.configuration.arrowHeadStyle !== 'legacy',\n                        markerSize,\n                    });\n                }\n                renderStatus = true;\n                if (!label) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = canvasCoordinates[1];\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, [label], textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n    }\n    static { this.hydrate = (viewportId, points, label, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(ArrowAnnotateTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = this.createAnnotation({\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                label: label || '',\n                handles: {\n                    points,\n                },\n            },\n            autoGenerated: false,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        });\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _doneChangingTextCallback(element, annotation, updatedLabel) {\n        annotation.data.label = updatedLabel;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        triggerAnnotationModified(annotation, element);\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction getTextCallback(doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nexport default ArrowAnnotateTool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\nimport angleBetweenLines from '../../utilities/math/angle/angleBetweenLines';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, drawPath as drawPathSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { getStyleProperty } from '../../stateManagement/annotation/config/helpers';\nclass AngleTool extends AnnotationTool {\n    static { this.toolName = 'Angle'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            showAngleArc: false,\n            arcOffset: 5,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            if (this.angleStartedNotYetCompleted) {\n                return;\n            }\n            this.angleStartedNotYetCompleted = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const annotation = (this.createAnnotation(evt, [\n                [...worldPos],\n                [...worldPos],\n            ]));\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2, point3] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line1 = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line1.start.x, line1.start.y], [line1.end.x, line1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            if (!point3) {\n                return false;\n            }\n            const canvasPoint3 = viewport.worldToCanvas(point3);\n            const line2 = {\n                start: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n                end: {\n                    x: canvasPoint3[0],\n                    y: canvasPoint3[1],\n                },\n            };\n            const distanceToPoint2 = lineSegment.distanceToPoint([line2.start.x, line2.start.y], [line2.end.x, line2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint2 <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            if (this.angleStartedNotYetCompleted && data.handles.points.length === 2) {\n                this.editData.handleIndex = 2;\n                return;\n            }\n            this.angleStartedNotYetCompleted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                this.angleStartedNotYetCompleted = false;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, angleArcLineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].angle == null) {\n                    data.cachedStats[targetId] = {\n                        angle: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationLocked(annotation.annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                const showHandlesAlways = Boolean(getStyleProperty('showHandlesAlways', {}));\n                if (activeHandleCanvasCoords || showHandlesAlways) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                let lineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                renderStatus = true;\n                if (canvasCoordinates.length !== 3) {\n                    return renderStatus;\n                }\n                lineUID = '2';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[1], canvasCoordinates[2], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                if (this.configuration.showAngleArc) {\n                    const center = canvasCoordinates[1];\n                    const offset = this.configuration.arcOffset;\n                    const radius = Math.min(lineSegment.distanceToPoint([center[0], center[1]], [canvasCoordinates[0][0], canvasCoordinates[0][1]], [canvasCoordinates[2][0], canvasCoordinates[2][1]]), lineSegment.distanceToPoint([center[0], center[1]], [canvasCoordinates[2][0], canvasCoordinates[2][1]], [canvasCoordinates[0][0], canvasCoordinates[0][1]])) / offset;\n                    const anglePoints = [];\n                    let startAngle = Math.atan2(canvasCoordinates[0][1] - center[1], canvasCoordinates[0][0] - center[0]);\n                    let endAngle = Math.atan2(canvasCoordinates[2][1] - center[1], canvasCoordinates[2][0] - center[0]);\n                    if (endAngle < startAngle) {\n                        endAngle += 2 * Math.PI;\n                    }\n                    const angleDifference = endAngle - startAngle;\n                    if (angleDifference > Math.PI) {\n                        const temp = startAngle;\n                        startAngle = endAngle;\n                        endAngle = temp + 2 * Math.PI;\n                    }\n                    const segments = 32;\n                    for (let i = 0; i <= segments; i++) {\n                        const angle = startAngle + (i / segments) * (endAngle - startAngle);\n                        anglePoints.push([\n                            center[0] + radius * Math.cos(angle),\n                            center[1] + radius * Math.sin(angle),\n                        ]);\n                    }\n                    drawPathSvg(svgDrawingHelper, annotationUID, '3', anglePoints, {\n                        color: color,\n                        width: lineWidth,\n                        lineDash: angleArcLineDash,\n                    });\n                }\n                if (!data.cachedStats[targetId]?.angle) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = canvasCoordinates[1];\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(AngleTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        if (data.handles.points.length !== 3) {\n            return;\n        }\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[1];\n        const worldPos3 = data.handles.points[2];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const angle = angleBetweenLines([worldPos1, worldPos2], [worldPos2, worldPos3]);\n            const { dimensions, imageData } = this.getTargetImageData(targetId);\n            this.isHandleOutsideImage = [worldPos1, worldPos2, worldPos3]\n                .map((worldPos) => csUtils.transformWorldToIndex(imageData, worldPos))\n                .some((index) => !csUtils.indexWithinDimensions(index, dimensions));\n            cachedStats[targetId] = {\n                angle: isNaN(angle) ? 'Incomplete Angle' : angle,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { angle } = cachedVolumeStats;\n    if (angle === undefined) {\n        return;\n    }\n    if (isNaN(angle)) {\n        return [`${angle}`];\n    }\n    const textLines = [\n        `${csUtils.roundNumber(angle)} ${String.fromCharCode(176)}`,\n    ];\n    return textLines;\n}\nexport default AngleTool;\n","import { vec3 } from 'gl-matrix';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../utilities/math/line';\nimport angleBetweenLines from '../../utilities/math/angle/angleBetweenLines';\nimport { midPoint2 } from '../../utilities/math/midPoint';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, drawTextBox as drawTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { getStyleProperty } from '../../stateManagement/annotation/config/helpers';\nclass CobbAngleTool extends AnnotationTool {\n    static { this.toolName = 'CobbAngle'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            showArcLines: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            if (this.angleStartedNotYetCompleted) {\n                return;\n            }\n            this.angleStartedNotYetCompleted = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const annotation = (this.createAnnotation(evt, [\n                [...worldPos],\n                [...worldPos],\n            ]));\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { distanceToPoint, distanceToPoint2 } = this.distanceToLines({\n                viewport,\n                points: data.handles.points,\n                canvasCoords,\n                proximity,\n            });\n            if (distanceToPoint <= proximity || distanceToPoint2 <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType, canvasCoords, proximity = 6) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { isNearFirstLine, isNearSecondLine } = this.distanceToLines({\n                viewport,\n                points: annotation.data.handles.points,\n                canvasCoords,\n                proximity,\n            });\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n                isNearFirstLine,\n                isNearSecondLine,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            if (this.angleStartedNotYetCompleted && data.handles.points.length < 4) {\n                resetElementCursor(element);\n                this.editData.handleIndex = data.handles.points.length;\n                return;\n            }\n            this.angleStartedNotYetCompleted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._mouseDownCallback = (evt) => {\n            const { annotation, handleIndex } = this.editData;\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { data } = annotation;\n            if (handleIndex === 1) {\n                data.handles.points[1] = worldPos;\n                this.editData.hasMoved =\n                    data.handles.points[1][0] !== data.handles.points[0][0] ||\n                        data.handles.points[1][1] !== data.handles.points[0][0];\n                return;\n            }\n            if (handleIndex === 3) {\n                data.handles.points[3] = worldPos;\n                this.editData.hasMoved =\n                    data.handles.points[3][0] !== data.handles.points[2][0] ||\n                        data.handles.points[3][1] !== data.handles.points[2][0];\n                this.angleStartedNotYetCompleted = false;\n                return;\n            }\n            this.editData.hasMoved = false;\n            hideElementCursor(element);\n            data.handles.points[2] = data.handles.points[3] = worldPos;\n            this.editData.handleIndex = data.handles.points.length - 1;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, isNearFirstLine, isNearSecondLine, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined &&\n                (isNearFirstLine || isNearSecondLine)) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                if (isNearFirstLine) {\n                    const firstLinePoints = [points[0], points[1]];\n                    firstLinePoints.forEach((point) => {\n                        point[0] += worldPosDelta[0];\n                        point[1] += worldPosDelta[1];\n                        point[2] += worldPosDelta[2];\n                    });\n                }\n                else if (isNearSecondLine) {\n                    const secondLinePoints = [points[2], points[3]];\n                    secondLinePoints.forEach((point) => {\n                        point[0] += worldPosDelta[0];\n                        point[1] += worldPosDelta[1];\n                        point[2] += worldPosDelta[2];\n                    });\n                }\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (!this.isDrawing) {\n                return;\n            }\n            this.isDrawing = false;\n            this._deactivateDraw(element);\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            if (data.handles.points.length < 4) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.angleStartedNotYetCompleted = false;\n            return annotation.annotationUID;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].angle == null) {\n                    data.cachedStats[targetId] = {\n                        angle: null,\n                        arc1Angle: null,\n                        arc2Angle: null,\n                        points: {\n                            world: {\n                                arc1Start: null,\n                                arc1End: null,\n                                arc2Start: null,\n                                arc2End: null,\n                                arc1Angle: null,\n                                arc2Angle: null,\n                            },\n                            canvas: {\n                                arc1Start: null,\n                                arc1End: null,\n                                arc2Start: null,\n                                arc2End: null,\n                                arc1Angle: null,\n                                arc2Angle: null,\n                            },\n                        },\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                const showHandlesAlways = Boolean(getStyleProperty('showHandlesAlways', {}));\n                if (activeHandleCanvasCoords || showHandlesAlways) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const firstLine = [canvasCoordinates[0], canvasCoordinates[1]];\n                const secondLine = [canvasCoordinates[2], canvasCoordinates[3]];\n                let lineUID = 'line1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, firstLine[0], firstLine[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                renderStatus = true;\n                if (canvasCoordinates.length < 4) {\n                    return renderStatus;\n                }\n                lineUID = 'line2';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, secondLine[0], secondLine[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                lineUID = 'linkLine';\n                const mid1 = midPoint2(firstLine[0], firstLine[1]);\n                const mid2 = midPoint2(secondLine[0], secondLine[1]);\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, mid1, mid2, {\n                    color,\n                    lineWidth: '1',\n                    lineDash: '1,4',\n                });\n                const { arc1Start, arc1End, arc2End, arc2Start } = data.cachedStats[targetId].points.canvas;\n                const { arc1Angle, arc2Angle } = data.cachedStats[targetId];\n                if (this.configuration.showArcLines) {\n                    lineUID = 'arc1';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, arc1Start, arc1End, {\n                        color,\n                        lineWidth: '1',\n                    });\n                    lineUID = 'arc2';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, arc2Start, arc2End, {\n                        color,\n                        lineWidth: '1',\n                    });\n                }\n                if (!data.cachedStats[targetId]?.angle) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = 'cobbAngleText';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n                if (this.configuration.showArcLines) {\n                    const arc1TextBoxUID = 'arcAngle1';\n                    const arc1TextLine = [\n                        `${arc1Angle.toFixed(2)} ${String.fromCharCode(176)}`,\n                    ];\n                    const arch1TextPosCanvas = midPoint2(arc1Start, arc1End);\n                    drawTextBoxSvg(svgDrawingHelper, annotationUID, arc1TextBoxUID, arc1TextLine, arch1TextPosCanvas, {\n                        ...options,\n                        padding: 3,\n                    });\n                    const arc2TextBoxUID = 'arcAngle2';\n                    const arc2TextLine = [\n                        `${arc2Angle.toFixed(2)} ${String.fromCharCode(176)}`,\n                    ];\n                    const arch2TextPosCanvas = midPoint2(arc2Start, arc2End);\n                    drawTextBoxSvg(svgDrawingHelper, annotationUID, arc2TextBoxUID, arc2TextLine, arch2TextPosCanvas, {\n                        ...options,\n                        padding: 3,\n                    });\n                }\n            }\n            return renderStatus;\n        };\n        this.distanceToLines = ({ viewport, points, canvasCoords, proximity }) => {\n            const [point1, point2, point3, point4] = points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const canvasPoint3 = viewport.worldToCanvas(point3);\n            const canvasPoint4 = viewport.worldToCanvas(point4);\n            const line1 = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const line2 = {\n                start: {\n                    x: canvasPoint3[0],\n                    y: canvasPoint3[1],\n                },\n                end: {\n                    x: canvasPoint4[0],\n                    y: canvasPoint4[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line1.start.x, line1.start.y], [line1.end.x, line1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            const distanceToPoint2 = lineSegment.distanceToPoint([line2.start.x, line2.start.y], [line2.end.x, line2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            let isNearFirstLine = false;\n            let isNearSecondLine = false;\n            if (distanceToPoint <= proximity) {\n                isNearFirstLine = true;\n            }\n            else if (distanceToPoint2 <= proximity) {\n                isNearSecondLine = true;\n            }\n            return {\n                distanceToPoint,\n                distanceToPoint2,\n                isNearFirstLine,\n                isNearSecondLine,\n            };\n        };\n        this.getArcsStartEndPoints = ({ firstLine, secondLine, mid1, mid2, }) => {\n            const linkLine = [mid1, mid2];\n            const arc1Angle = angleBetweenLines(firstLine, linkLine);\n            const arc2Angle = angleBetweenLines(secondLine, linkLine);\n            const arc1Side = arc1Angle > 90 ? 1 : 0;\n            const arc2Side = arc2Angle > 90 ? 0 : 1;\n            const midLinkLine = midPoint2(linkLine[0], linkLine[1]);\n            const linkLineLength = Math.sqrt((linkLine[1][0] - linkLine[0][0]) ** 2 +\n                (linkLine[1][1] - linkLine[0][1]) ** 2);\n            const ratio = 0.1;\n            const midFirstLine = midPoint2(firstLine[0], firstLine[1]);\n            const midSecondLine = midPoint2(secondLine[0], secondLine[1]);\n            const directionVectorStartArc1 = [\n                firstLine[arc1Side][0] - midFirstLine[0],\n                firstLine[arc1Side][1] - midFirstLine[1],\n            ];\n            const magnitudeStartArc1 = Math.sqrt(directionVectorStartArc1[0] ** 2 + directionVectorStartArc1[1] ** 2);\n            const normalizedDirectionStartArc1 = [\n                directionVectorStartArc1[0] / magnitudeStartArc1,\n                directionVectorStartArc1[1] / magnitudeStartArc1,\n            ];\n            const arc1Start = [\n                midFirstLine[0] +\n                    normalizedDirectionStartArc1[0] * linkLineLength * ratio,\n                midFirstLine[1] +\n                    normalizedDirectionStartArc1[1] * linkLineLength * ratio,\n            ];\n            const directionVectorEndArc1 = [\n                midLinkLine[0] - mid1[0],\n                midLinkLine[1] - mid1[1],\n            ];\n            const magnitudeEndArc1 = Math.sqrt(directionVectorEndArc1[0] ** 2 + directionVectorEndArc1[1] ** 2);\n            const normalizedDirectionEndArc1 = [\n                directionVectorEndArc1[0] / magnitudeEndArc1,\n                directionVectorEndArc1[1] / magnitudeEndArc1,\n            ];\n            const arc1End = [\n                mid1[0] + normalizedDirectionEndArc1[0] * linkLineLength * ratio,\n                mid1[1] + normalizedDirectionEndArc1[1] * linkLineLength * ratio,\n            ];\n            const directionVectorStartArc2 = [\n                secondLine[arc2Side][0] - midSecondLine[0],\n                secondLine[arc2Side][1] - midSecondLine[1],\n            ];\n            const magnitudeStartArc2 = Math.sqrt(directionVectorStartArc2[0] ** 2 + directionVectorStartArc2[1] ** 2);\n            const normalizedDirectionStartArc2 = [\n                directionVectorStartArc2[0] / magnitudeStartArc2,\n                directionVectorStartArc2[1] / magnitudeStartArc2,\n            ];\n            const arc2Start = [\n                midSecondLine[0] +\n                    normalizedDirectionStartArc2[0] * linkLineLength * ratio,\n                midSecondLine[1] +\n                    normalizedDirectionStartArc2[1] * linkLineLength * ratio,\n            ];\n            const directionVectorEndArc2 = [\n                midLinkLine[0] - mid2[0],\n                midLinkLine[1] - mid2[1],\n            ];\n            const magnitudeEndArc2 = Math.sqrt(directionVectorEndArc2[0] ** 2 + directionVectorEndArc2[1] ** 2);\n            const normalizedDirectionEndArc2 = [\n                directionVectorEndArc2[0] / magnitudeEndArc2,\n                directionVectorEndArc2[1] / magnitudeEndArc2,\n            ];\n            const arc2End = [\n                mid2[0] + normalizedDirectionEndArc2[0] * linkLineLength * ratio,\n                mid2[1] + normalizedDirectionEndArc2[1] * linkLineLength * ratio,\n            ];\n            return {\n                arc1Start,\n                arc1End,\n                arc2Start,\n                arc2End,\n                arc1Angle: arc1Angle > 90 ? 180 - arc1Angle : arc1Angle,\n                arc2Angle: arc2Angle > 90 ? 180 - arc2Angle : arc2Angle,\n            };\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 25, { trailing: true });\n    }\n    handleSelectedCallback(evt, annotation, handle, interactionType = 'mouse') {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        if (data.handles.points.length !== 4) {\n            return;\n        }\n        const seg1 = [null, null];\n        const seg2 = [null, null];\n        let minDist = Number.MAX_VALUE;\n        for (let i = 0; i < 2; i += 1) {\n            for (let j = 2; j < 4; j += 1) {\n                const dist = vec3.distance(data.handles.points[i], data.handles.points[j]);\n                if (dist < minDist) {\n                    minDist = dist;\n                    seg1[1] = data.handles.points[i];\n                    seg1[0] = data.handles.points[(i + 1) % 2];\n                    seg2[0] = data.handles.points[j];\n                    seg2[1] = data.handles.points[2 + ((j - 1) % 2)];\n                }\n            }\n        }\n        const { viewport } = enabledElement;\n        const { element } = viewport;\n        const canvasPoints = data.handles.points.map((p) => viewport.worldToCanvas(p));\n        const firstLine = [canvasPoints[0], canvasPoints[1]];\n        const secondLine = [canvasPoints[2], canvasPoints[3]];\n        const mid1 = midPoint2(firstLine[0], firstLine[1]);\n        const mid2 = midPoint2(secondLine[0], secondLine[1]);\n        const { arc1Start, arc1End, arc2End, arc2Start, arc1Angle, arc2Angle } = this.getArcsStartEndPoints({\n            firstLine,\n            secondLine,\n            mid1,\n            mid2,\n        });\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            cachedStats[targetId] = {\n                angle: angleBetweenLines(seg1, seg2),\n                arc1Angle,\n                arc2Angle,\n                points: {\n                    canvas: {\n                        arc1Start,\n                        arc1End,\n                        arc2End,\n                        arc2Start,\n                    },\n                    world: {\n                        arc1Start: viewport.canvasToWorld(arc1Start),\n                        arc1End: viewport.canvasToWorld(arc1End),\n                        arc2End: viewport.canvasToWorld(arc2End),\n                        arc2Start: viewport.canvasToWorld(arc2Start),\n                    },\n                },\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { angle } = cachedVolumeStats;\n    if (angle === undefined) {\n        return;\n    }\n    const textLines = [`${angle.toFixed(2)} ${String.fromCharCode(176)}`];\n    return textLines;\n}\nexport default CobbAngleTool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, StackViewport, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawHandle as drawHandleSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { distanceToPoint } from '../../utilities/math/point';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { getCalibratedProbeUnitsAndValue } from '../../utilities/getCalibratedUnits';\nimport { lineSegment } from '../../utilities/math';\nconst { transformWorldToIndex } = csUtils;\nclass UltrasoundDirectionalTool extends AnnotationTool {\n    static { this.toolName = 'UltrasoundDirectionalTool'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            displayBothAxesDistances: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            if (this.startedDrawing) {\n                return;\n            }\n            this.startedDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            if (!(viewport instanceof StackViewport)) {\n                throw new Error('UltrasoundDirectionalTool can only be used on a StackViewport');\n            }\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const annotation = (this.createAnnotation(evt, [\n                [...worldPos],\n                [...worldPos],\n            ]));\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            if (this.startedDrawing && data.handles.points.length === 1) {\n                this.editData.handleIndex = 1;\n                return;\n            }\n            this.startedDrawing = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                this.startedDrawing = false;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].xValues == null) {\n                    data.cachedStats[targetId] = {\n                        xValues: [0, 0],\n                        yValues: [0, 0],\n                        isHorizontal: false,\n                        units: [''],\n                        isUnitless: false,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let handleGroupUID = '0';\n                drawHandleSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates[0], {\n                    color,\n                }, 0);\n                renderStatus = true;\n                if (canvasCoordinates.length !== 2) {\n                    return renderStatus;\n                }\n                handleGroupUID = '1';\n                drawHandleSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates[1], {\n                    color,\n                }, 1);\n                const isUnitless = data.cachedStats[targetId].isUnitless;\n                if (!isUnitless) {\n                    const canvasPoint1 = canvasCoordinates[0];\n                    const canvasPoint2 = canvasCoordinates[1];\n                    const canvasDeltaY = canvasPoint2[1] - canvasPoint1[1];\n                    const canvasDeltaX = canvasPoint2[0] - canvasPoint1[0];\n                    const isHorizontal = data.cachedStats[targetId].isHorizontal;\n                    let projectedPointCanvas = [0, 0];\n                    if (isHorizontal) {\n                        projectedPointCanvas = [\n                            canvasPoint1[0] + canvasDeltaX,\n                            canvasPoint1[1],\n                        ];\n                    }\n                    else {\n                        projectedPointCanvas = [\n                            canvasPoint1[0],\n                            canvasPoint1[1] + canvasDeltaY,\n                        ];\n                    }\n                    let dataId = `${annotationUID}-line-1`;\n                    let lineUID = '1';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], projectedPointCanvas, {\n                        color,\n                        width: 1,\n                        shadow: this.configuration.shadow,\n                    }, dataId);\n                    dataId = `${annotationUID}-line-2`;\n                    lineUID = '2';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[1], projectedPointCanvas, {\n                        color,\n                        width: 1,\n                        lineDash: [1, 1],\n                        shadow: this.configuration.shadow,\n                    }, dataId);\n                }\n                else {\n                    const dataId = `${annotationUID}-line-1`;\n                    const lineUID = '1';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                        color,\n                        width: 1,\n                        shadow: this.configuration.shadow,\n                    }, dataId);\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId, this.configuration);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = canvasCoordinates[1];\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    toolSelectedCallback(evt, annotation, interactionType, canvasCoords) {\n        return;\n    }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        this.editData = {\n            handleIndex,\n            annotation,\n            viewportIdsToRender,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        if (data.handles.points.length !== 2) {\n            return;\n        }\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { imageData } = image;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[1];\n            const imageIndex1 = transformWorldToIndex(imageData, worldPos1);\n            const imageIndex2 = transformWorldToIndex(imageData, worldPos2);\n            const { values: values1, units: units1 } = getCalibratedProbeUnitsAndValue(image, [imageIndex1]);\n            const { values: values2, units: units2 } = getCalibratedProbeUnitsAndValue(image, [imageIndex2]);\n            let xValues, yValues, units, isHorizontal;\n            let isUnitless = false;\n            if (units1[0] !== units2[0] ||\n                units1[1] !== units2[1] ||\n                (units1[0] === 'raw' && units2[0] === 'raw')) {\n                const value = distanceToPoint(worldPos1, worldPos2);\n                xValues = [value, 0];\n                yValues = [value, 0];\n                units = ['px'];\n                isUnitless = true;\n            }\n            else {\n                const canvasPoint1 = enabledElement.viewport.worldToCanvas(worldPos1);\n                const canvasPoint2 = enabledElement.viewport.worldToCanvas(worldPos2);\n                const canvasDeltaY = canvasPoint2[1] - canvasPoint1[1];\n                const canvasDeltaX = canvasPoint2[0] - canvasPoint1[0];\n                isHorizontal = Math.abs(canvasDeltaX) > Math.abs(canvasDeltaY);\n                xValues = [values1[0], values2[0]];\n                yValues = [values1[1], values2[1]];\n                units = [units1[0], units1[1]];\n            }\n            cachedStats[targetId] = {\n                xValues,\n                yValues,\n                isHorizontal,\n                units,\n                isUnitless,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId, configuration) {\n    const cachedStats = data.cachedStats[targetId];\n    const { xValues, yValues, units, isUnitless, isHorizontal } = cachedStats;\n    if (isUnitless) {\n        return [`${csUtils.roundNumber(xValues[0])} px`];\n    }\n    if (configuration.displayBothAxesDistances) {\n        const dist1 = Math.abs(xValues[1] - xValues[0]);\n        const dist2 = Math.abs(yValues[1] - yValues[0]);\n        return [\n            `${csUtils.roundNumber(dist1)} ${units[0]}`,\n            `${csUtils.roundNumber(dist2)} ${units[1]}`,\n        ];\n    }\n    if (isHorizontal) {\n        const dist = Math.abs(xValues[1] - xValues[0]);\n        return [`${csUtils.roundNumber(dist)} ${units[0]}`];\n    }\n    else {\n        const dist = Math.abs(yValues[1] - yValues[0]);\n        return [`${csUtils.roundNumber(dist)} ${units[1]}`];\n    }\n}\nexport default UltrasoundDirectionalTool;\n","import { Events, ChangeTypes } from '../../../enums';\nimport { getEnabledElement, utilities, metaData, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawFan as drawFanSvg, } from '../../../drawingSvg';\nimport { state } from '../../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../../cursors/elementCursor';\nimport { angleFromCenter, calculateInnerFanPercentage, clipInterval, intervalFromPoints, mergeIntervals, subtractIntervals, } from '../../../utilities/math/fan/fanUtils';\nimport { calculateFanGeometry } from './utils/fanExtraction';\nconst { transformIndexToWorld } = utilities;\nclass UltrasoundPleuraBLineTool extends AnnotationTool {\n    static { this.toolName = 'UltrasoundPleuraBLineTool'; }\n    static { this.USPleuraBLineAnnotationType = {\n        BLINE: 'bLine',\n        PLEURA: 'pleura',\n    }; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            center: null,\n            innerRadius: null,\n            outerRadius: null,\n            startAngle: null,\n            endAngle: null,\n            bLineColor: 'rgb(60, 255, 60)',\n            pleuraColor: 'rgb(0, 4, 255)',\n            drawDepthGuide: true,\n            depth_ratio: 0.5,\n            depthGuideColor: 'rgb(0, 255, 255)',\n            depthGuideThickness: 4,\n            depthGuideDashLength: 20,\n            depthGuideDashGap: 16,\n            depthGuideOpacity: 0.2,\n            fanOpacity: 0.1,\n            showFanAnnotations: true,\n            updatePercentageCallback: null,\n            actions: {\n                undo: {\n                    method: 'undo',\n                    bindings: [{ key: 'z' }],\n                },\n                redo: {\n                    method: 'redo',\n                    bindings: [{ key: 'y' }],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.pleuraAnnotations = [];\n        this.bLineAnnotations = [];\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const { viewPlaneNormal, viewUp, position: cameraPosition, } = viewport.getCamera();\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                    toolName: this.getToolName(),\n                    referencedImageId,\n                    viewUp,\n                    cameraPosition,\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                    },\n                    annotationType: this.getActiveAnnotationType(),\n                    label: '',\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { viewport } = getEnabledElement(element) || {};\n            if (!viewport) {\n                return;\n            }\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                const allPointsInsideShape = points.every((point) => {\n                    const newPoint = [\n                        point[0] + worldPosDelta[0],\n                        point[1] + worldPosDelta[1],\n                        point[2] + worldPosDelta[2],\n                    ];\n                    return this.isInsideFanShape(viewport, newPoint);\n                });\n                if (allPointsInsideShape) {\n                    points.forEach((point) => {\n                        point[0] += worldPosDelta[0];\n                        point[1] += worldPosDelta[1];\n                        point[2] += worldPosDelta[2];\n                    });\n                    annotation.invalidated = true;\n                }\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                if (this.isInsideFanShape(viewport, worldPos)) {\n                    data.handles.points[handleIndex] = [...worldPos];\n                    annotation.invalidated = true;\n                }\n            }\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            if (!this.getFanShapeGeometryParameters(viewport)) {\n                return;\n            }\n            const { imageData } = viewport.getImageData() || {};\n            if (!imageData) {\n                return renderStatus;\n            }\n            if (this.configuration.drawDepthGuide) {\n                this.drawDepthGuide(svgDrawingHelper, viewport);\n            }\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const fanCenter = viewport.worldToCanvas(transformIndexToWorld(imageData, this.configuration.center));\n            const indexToCanvasRatio = this.getIndexToCanvasRatio(viewport);\n            const innerRadius = this.configuration.innerRadius * indexToCanvasRatio;\n            const outerRadius = this.configuration.outerRadius * indexToCanvasRatio;\n            const currentImageId = viewport.getCurrentImageId();\n            const unMergedPleuraIntervals = annotations\n                .filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA &&\n                annotation.metadata.referencedImageId === currentImageId)\n                .map((annotation) => {\n                const canvasCoordinates = annotation.data.handles.points.map((p) => viewport.worldToCanvas(p));\n                const interval = intervalFromPoints(fanCenter, canvasCoordinates);\n                return interval;\n            });\n            const mergedPleuraIntervals = mergeIntervals(unMergedPleuraIntervals);\n            const pleuraIntervalsDisplayed = [];\n            const bLineIntervalsDisplayed = [];\n            const drawAnnotation = (annotation) => {\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    return;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color: this.getColorForLineType(annotation),\n                        fill: this.getColorForLineType(annotation),\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const dataId = `${annotationUID}-line`;\n                const lineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color: this.getColorForLineType(annotation),\n                    width: lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId);\n                if (this.configuration.showFanAnnotations) {\n                    const lineInterval = intervalFromPoints(fanCenter, canvasCoordinates);\n                    let fanNumber = 0;\n                    if (annotation.data.annotationType ===\n                        UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {\n                        const uncoveredIntervals = subtractIntervals(bLineIntervalsDisplayed, lineInterval);\n                        uncoveredIntervals.forEach((interval) => {\n                            const clippedIntervals = clipInterval(interval, mergedPleuraIntervals);\n                            clippedIntervals.forEach((clippedInterval) => {\n                                fanNumber++;\n                                const fanIndex = fanNumber;\n                                const fanDataId = `${annotationUID}-fan-${fanIndex}`;\n                                const fanUID = `2-${fanIndex}`;\n                                drawFanSvg(svgDrawingHelper, annotationUID, fanUID, fanCenter, innerRadius, outerRadius, clippedInterval[0], clippedInterval[1], {\n                                    color: 'transparent',\n                                    fill: this.getColorForLineType(annotation),\n                                    fillOpacity: this.configuration.fanOpacity,\n                                    width: lineWidth,\n                                    lineDash,\n                                    shadow,\n                                }, fanDataId, 10);\n                                bLineIntervalsDisplayed.push(clippedInterval);\n                            });\n                        });\n                    }\n                    else if (annotation.data.annotationType ===\n                        UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\n                        const uncoveredIntervals = subtractIntervals(pleuraIntervalsDisplayed, lineInterval);\n                        uncoveredIntervals.forEach((interval, index) => {\n                            fanNumber++;\n                            const fanIndex = fanNumber;\n                            const fanDataId = `${annotationUID}-fan-${fanIndex}`;\n                            const fanUID = `2-${fanIndex}`;\n                            drawFanSvg(svgDrawingHelper, annotationUID, fanUID, fanCenter, innerRadius, outerRadius, interval[0], interval[1], {\n                                color: 'transparent',\n                                fill: this.getColorForLineType(annotation),\n                                fillOpacity: this.configuration.fanOpacity,\n                                width: lineWidth,\n                                lineDash,\n                                shadow,\n                            }, fanDataId, 5);\n                            pleuraIntervalsDisplayed.push(interval);\n                        });\n                    }\n                }\n            };\n            const pleuraAnnotationsToDraw = annotations.filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA &&\n                annotation.metadata.referencedImageId === currentImageId);\n            pleuraAnnotationsToDraw.forEach((annotation) => {\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                drawAnnotation(annotation);\n            });\n            const bLineAnnotationsToDraw = annotations.filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE &&\n                annotation.metadata.referencedImageId === currentImageId);\n            bLineAnnotationsToDraw.forEach((annotation) => {\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                drawAnnotation(annotation);\n            });\n            renderStatus = true;\n            if (this.configuration.updatePercentageCallback && viewport) {\n                this.configuration.updatePercentageCallback(this.calculateBLinePleuraPercentage(viewport));\n            }\n            return renderStatus;\n        };\n        this.activeAnnotationType =\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE;\n    }\n    static filterAnnotations(element, filterFunction = () => true) {\n        const annotations = getAnnotations(UltrasoundPleuraBLineTool.toolName, element);\n        if (!annotations?.length) {\n            return [];\n        }\n        const filteredAnnotations = annotations.filter((annotation) => {\n            const currentImageId = annotation.metadata.referencedImageId;\n            return filterFunction(currentImageId);\n        });\n        return filteredAnnotations;\n    }\n    static countAnnotations(element, filterFunction = () => true) {\n        const annotations = getAnnotations(UltrasoundPleuraBLineTool.toolName, element);\n        const { viewport } = getEnabledElement(element);\n        const imageIds = viewport.getImageIds();\n        const getImageIdIndex = (imageId) => {\n            const index = imageIds.findIndex((id) => id === imageId);\n            if (index === -1) {\n                return 0;\n            }\n            return index;\n        };\n        if (!annotations?.length) {\n            return;\n        }\n        const annotationMapping = new Map();\n        annotations.forEach((annotation) => {\n            const currentImageId = annotation.metadata.referencedImageId;\n            if (!filterFunction(currentImageId)) {\n                return;\n            }\n            const { annotationType } = annotation.data;\n            let counts;\n            if (annotationMapping.has(currentImageId)) {\n                counts = annotationMapping.get(currentImageId);\n            }\n            else {\n                counts = {\n                    frame: getImageIdIndex(currentImageId),\n                    bLine: 0,\n                    pleura: 0,\n                };\n            }\n            if (annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\n                counts.pleura++;\n            }\n            else if (annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {\n                counts.bLine++;\n            }\n            annotationMapping.set(currentImageId, counts);\n        });\n        return annotationMapping;\n    }\n    static deleteAnnotations(element, filterFunction = () => false) {\n        const annotations = getAnnotations(UltrasoundPleuraBLineTool.toolName, element);\n        if (!annotations?.length) {\n            return;\n        }\n        annotations.forEach((annotation) => {\n            if (!filterFunction(annotation.metadata.referencedImageId)) {\n                return;\n            }\n            removeAnnotation(annotation.annotationUID);\n        });\n    }\n    setActiveAnnotationType(type) {\n        this.activeAnnotationType = type;\n    }\n    getActiveAnnotationType() {\n        return this.activeAnnotationType;\n    }\n    deleteLastAnnotationType(element, type) {\n        let annotationList;\n        const annotations = getAnnotations(UltrasoundPleuraBLineTool.toolName, element);\n        if (type === UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\n            annotationList = annotations.filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA);\n        }\n        else if (type === UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {\n            annotationList = annotations.filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE);\n        }\n        if (annotationList?.length > 0) {\n            const annotation = annotationList.pop();\n            removeAnnotation(annotation.annotationUID);\n        }\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(UltrasoundPleuraBLineTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    isInsideFanShape(viewport, point) {\n        if (!this.getFanShapeGeometryParameters(viewport)) {\n            return false;\n        }\n        const { imageData } = viewport.getImageData() || {};\n        if (imageData) {\n            const fanCenter = viewport.worldToCanvas(imageData.indexToWorld(this.configuration.center));\n            const canvasCoordinates = viewport.worldToCanvas(point);\n            const angle = angleFromCenter(fanCenter, canvasCoordinates);\n            return (angle >= this.configuration.startAngle &&\n                angle <= this.configuration.endAngle);\n        }\n    }\n    updateFanGeometryConfiguration(fanGeometry) {\n        if (!fanGeometry) {\n            return;\n        }\n        if (this.isFanShapeGeometryParametersValid(fanGeometry)) {\n            this.configuration.center = [\n                fanGeometry.center[0],\n                fanGeometry.center[1],\n                0,\n            ];\n        }\n        this.configuration.innerRadius = fanGeometry.innerRadius;\n        this.configuration.outerRadius = fanGeometry.outerRadius;\n        this.configuration.startAngle = fanGeometry.startAngle;\n        this.configuration.endAngle = fanGeometry.endAngle;\n    }\n    deriveFanGeometryFromViewport(viewport) {\n        const imageId = viewport.getCurrentImageId();\n        const { fanGeometry } = calculateFanGeometry(imageId) || {};\n        if (fanGeometry) {\n            this.updateFanGeometryConfiguration(fanGeometry);\n        }\n    }\n    isFanShapeGeometryParametersValid(fanGeometry) {\n        if (!fanGeometry) {\n            fanGeometry = this.configuration;\n        }\n        return (fanGeometry?.center &&\n            fanGeometry?.innerRadius > 0 &&\n            fanGeometry?.outerRadius &&\n            fanGeometry?.startAngle > 0 &&\n            fanGeometry?.startAngle < 360 &&\n            fanGeometry?.endAngle > 0 &&\n            fanGeometry?.endAngle < 360);\n    }\n    getFanShapeGeometryParameters(viewport) {\n        if (this.isFanShapeGeometryParametersValid()) {\n            return true;\n        }\n        if (!this.isFanShapeGeometryParametersValid()) {\n            const imageId = viewport.getCurrentImageId();\n            const fanGeometry = metaData.get('ultrasoundFanShapeGeometry', imageId);\n            this.updateFanGeometryConfiguration(fanGeometry);\n        }\n        if (!this.isFanShapeGeometryParametersValid()) {\n            this.deriveFanGeometryFromViewport(viewport);\n        }\n        return this.isFanShapeGeometryParametersValid();\n    }\n    calculateBLinePleuraPercentage(viewport) {\n        if (!this.getFanShapeGeometryParameters(viewport)) {\n            return;\n        }\n        const { imageData } = viewport.getImageData() || {};\n        if (!imageData) {\n            return;\n        }\n        const { element } = viewport;\n        const fanCenter = viewport.worldToCanvas(imageData.indexToWorld(this.configuration.center));\n        const currentImageId = viewport.getCurrentImageId();\n        const annotations = getAnnotations(this.getToolName(), element) || [];\n        const pleuraIntervals = annotations\n            .filter((annotation) => annotation.data.annotationType ===\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA &&\n            annotation.metadata.referencedImageId === currentImageId)\n            .map((annotation) => {\n            const canvasCoordinates = annotation.data.handles.points.map((p) => viewport.worldToCanvas(p));\n            return canvasCoordinates;\n        });\n        const bLineIntervals = annotations\n            .filter((annotation) => annotation.data.annotationType ===\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE &&\n            annotation.metadata.referencedImageId === currentImageId)\n            .map((annotation) => {\n            const canvasCoordinates = annotation.data.handles.points.map((p) => viewport.worldToCanvas(p));\n            return canvasCoordinates;\n        });\n        return calculateInnerFanPercentage(fanCenter, pleuraIntervals, bLineIntervals);\n    }\n    getColorForLineType(annotation) {\n        const { annotationType } = annotation.data;\n        const { bLineColor, pleuraColor } = this.configuration;\n        if (annotationType ===\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {\n            return bLineColor;\n        }\n        if (annotationType ===\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\n            return pleuraColor;\n        }\n        return bLineColor;\n    }\n    getIndexToCanvasRatio(viewport) {\n        const { imageData } = viewport.getImageData() || {};\n        const v1 = viewport.worldToCanvas(imageData.indexToWorld([1, 0, 0]));\n        const v2 = viewport.worldToCanvas(imageData.indexToWorld([2, 0, 0]));\n        const diffVector = [v2[0] - v1[0], v2[1] - v1[1]];\n        const vectorSize = Math.sqrt(diffVector[0] * diffVector[0] + diffVector[1] * diffVector[1]);\n        return vectorSize;\n    }\n    drawDepthGuide(svgDrawingHelper, viewport) {\n        if (!this.getFanShapeGeometryParameters(viewport)) {\n            return;\n        }\n        const { imageData } = viewport.getImageData() || {};\n        if (!imageData) {\n            return;\n        }\n        const radToDegree = (rad) => (rad * 180) / Math.PI;\n        const degreeToRad = (degree) => (degree * Math.PI) / 180;\n        const indexToCanvas = (point) => {\n            return viewport.worldToCanvas(transformIndexToWorld(imageData, point));\n        };\n        const depth_radius = this.configuration.innerRadius +\n            this.configuration.depth_ratio *\n                (this.configuration.outerRadius - this.configuration.innerRadius);\n        const theta_start = this.configuration.startAngle;\n        const theta_end = this.configuration.endAngle;\n        const theta_range = theta_end - theta_start;\n        const arc_length = degreeToRad(theta_range) * depth_radius;\n        let num_dashes = Math.round(arc_length /\n            (this.configuration.depthGuideDashLength +\n                this.configuration.depthGuideDashGap));\n        if (num_dashes <= 0) {\n            num_dashes = Math.max(15, Math.round(theta_range / 5));\n        }\n        const theta_step = theta_range / num_dashes;\n        for (let i = 0; i < num_dashes; i++) {\n            const theta1 = degreeToRad(theta_start + i * theta_step);\n            const theta2 = degreeToRad(theta_start +\n                i * theta_step +\n                radToDegree(this.configuration.depthGuideDashLength) / depth_radius);\n            const start_point = [\n                this.configuration.center[0] + depth_radius * Math.cos(theta1),\n                this.configuration.center[1] + depth_radius * Math.sin(theta1),\n                0,\n            ];\n            const end_point = [\n                this.configuration.center[0] + depth_radius * Math.cos(theta2),\n                this.configuration.center[1] + depth_radius * Math.sin(theta2),\n                0,\n            ];\n            drawLineSvg(svgDrawingHelper, viewport.id, `depthGuide-${i}`, indexToCanvas(start_point), indexToCanvas(end_point), {\n                color: this.configuration.depthGuideColor,\n                lineWidth: this.configuration.depthGuideThickness,\n                strokeOpacity: this.configuration.depthGuideOpacity,\n            });\n        }\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (utilities.indexWithinDimensions(index1, dimensions) &&\n            utilities.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    return [''];\n}\nexport default UltrasoundPleuraBLineTool;\n","import { Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawArrow as drawArrowSvg, drawHandles as drawHandlesSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nclass KeyImageTool extends AnnotationTool {\n    static { this.toolName = 'KeyImage'; }\n    static { this.dataSeries = {\n        data: {\n            seriesLevel: true,\n        },\n    }; }\n    static { this.dataPoint = {\n        data: {\n            isPoint: true,\n        },\n    }; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            getTextCallback,\n            changeTextCallback,\n            canvasPosition: [10, 10],\n            canvasSize: 10,\n            handleRadius: '6',\n            seriesLevel: false,\n            isPoint: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const worldPos = currentPoints.world;\n            const annotation = (this.constructor).createAnnotationForViewport(viewport, {\n                data: {\n                    handles: { points: [[...worldPos]] },\n                    seriesLevel: this.configuration.seriesLevel,\n                    isPoint: this.configuration.isPoint,\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.configuration.getTextCallback((label) => {\n                if (!label) {\n                    removeAnnotation(annotation.annotationUID);\n                    triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                    this.isDrawing = false;\n                    return;\n                }\n                annotation.data.label = label;\n                triggerAnnotationCompleted(annotation);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            });\n            this.createMemo(element, annotation, { newAnnotation: true });\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            if (!data?.isPoint) {\n                return false;\n            }\n            const { canvasPosition, canvasSize } = this.configuration;\n            if (!canvasPosition?.length) {\n                return false;\n            }\n            if (Math.abs(canvasCoords[0] - canvasPosition[0] + canvasSize / 2) <=\n                canvasSize / 2 &&\n                Math.abs(canvasCoords[1] - canvasPosition[1] + canvasSize / 2) <=\n                    canvasSize / 2) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            annotation.highlighted = true;\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { viewportId, renderingEngine } = getEnabledElement(element);\n            this.eventDispatchDetail = {\n                viewportId,\n                renderingEngineId: renderingEngine.id,\n            };\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            if (newAnnotation) {\n                this.createMemo(element, annotation, { newAnnotation });\n            }\n            this.editData = null;\n            this.isDrawing = false;\n            this.doneEditMemo();\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this.doubleClickCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            let annotations = getAnnotations(this.getToolName(), element);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return;\n            }\n            const clickedAnnotation = annotations.find((annotation) => this.isPointNearTool(element, annotation, eventDetail.currentPoints.canvas, 6));\n            if (!clickedAnnotation) {\n                return;\n            }\n            const annotation = clickedAnnotation;\n            this.createMemo(element, annotation);\n            this.configuration.changeTextCallback(clickedAnnotation, evt.detail, this._doneChangingTextCallback.bind(this, element, annotation));\n            this.isDrawing = false;\n            this.doneEditMemo();\n            evt.stopImmediatePropagation();\n            evt.preventDefault();\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            data.handles.points[0] = [...worldPos];\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const { canvasPosition, canvasSize } = this.configuration;\n                const arrowUID = '1';\n                if (data?.isPoint) {\n                    const point = data.handles.points[0];\n                    const canvasCoordinates = viewport.worldToCanvas(point);\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, arrowUID, [canvasCoordinates], {\n                        color,\n                        lineWidth,\n                        handleRadius: this.configuration.handleRadius,\n                    });\n                }\n                else if (canvasPosition?.length) {\n                    drawArrowSvg(svgDrawingHelper, annotationUID, arrowUID, canvasPosition.map((it) => it + canvasSize), canvasPosition, {\n                        color,\n                        width: 1,\n                    });\n                }\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n            }\n            return renderStatus;\n        };\n    }\n    handleSelectedCallback(evt, annotation) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        annotation.highlighted = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    static setPoint(annotation, isPoint = !annotation.data.isPoint, element) {\n        annotation.data.isPoint = isPoint;\n        triggerAnnotationModified(annotation, element);\n    }\n    _doneChangingTextCallback(element, annotation, updatedText) {\n        annotation.data.label = updatedText;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        triggerAnnotationModified(annotation, element);\n    }\n    cancel(element) {\n        if (this.isDrawing) {\n            this.isDrawing = false;\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            return annotation.annotationUID;\n        }\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction getTextCallback(doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nexport default KeyImageTool;\n","import { BaseTool, AnnotationTool } from './base';\nimport { getAnnotations, getAnnotation, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { setAnnotationSelected } from '../stateManagement/annotation/annotationSelection';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nclass AnnotationEraserTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            return this._deleteNearbyAnnotations(evt, 'mouse');\n        };\n        this.preTouchStartCallback = (evt) => {\n            return this._deleteNearbyAnnotations(evt, 'touch');\n        };\n    }\n    _deleteNearbyAnnotations(evt, interactionType) {\n        const { renderingEngineId, viewportId, element, currentPoints } = evt.detail;\n        const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n        if (!toolGroup) {\n            return false;\n        }\n        const tools = toolGroup._toolInstances;\n        const annotationsToRemove = [];\n        for (const toolName in tools) {\n            const toolInstance = tools[toolName];\n            if (typeof toolInstance.isPointNearTool !== 'function' ||\n                typeof toolInstance.filterInteractableAnnotationsForElement !==\n                    'function') {\n                continue;\n            }\n            const annotations = getAnnotations(toolName, element);\n            const interactableAnnotations = toolInstance.filterInteractableAnnotationsForElement(element, annotations);\n            if (!interactableAnnotations) {\n                continue;\n            }\n            for (const annotation of interactableAnnotations) {\n                if (toolInstance.isPointNearTool(element, annotation, currentPoints.canvas, 10, interactionType)) {\n                    annotationsToRemove.push(annotation.annotationUID);\n                }\n            }\n        }\n        for (const annotationUID of annotationsToRemove) {\n            setAnnotationSelected(annotationUID);\n            const annotation = getAnnotation(annotationUID);\n            AnnotationTool.createAnnotationMemo(element, annotation, {\n                deleting: true,\n            });\n            removeAnnotation(annotationUID);\n        }\n        evt.preventDefault();\n        return true;\n    }\n}\nAnnotationEraserTool.toolName = 'Eraser';\nexport default AnnotationEraserTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, getRenderingEngine, } from '@cornerstonejs/core';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { Events } from '../../enums';\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { growCut } from '../../utilities/segmentation';\nimport GrowCutBaseTool from '../base/GrowCutBaseTool';\nclass RegionSegmentTool extends GrowCutBaseTool {\n    static { this.toolName = 'RegionSegment'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            isPartialVolume: true,\n            positiveSeedVariance: 0.5,\n            negativeSeedVariance: 0.9,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const { world: currentWorldPoint } = currentPoints;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.growCutData.circleBorderPoint = currentWorldPoint;\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._endCallback = async (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.runGrowCut();\n            this._deactivateDraw(element);\n            this.growCutData = null;\n            resetElementCursor(element);\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n    }\n    async preMouseDownCallback(evt) {\n        const eventData = evt.detail;\n        const { element, currentPoints } = eventData;\n        const { world: worldPoint } = currentPoints;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        await super.preMouseDownCallback(evt);\n        Object.assign(this.growCutData, {\n            circleCenterPoint: worldPoint,\n            circleBorderPoint: worldPoint,\n        });\n        this._activateDraw(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        return true;\n    }\n    async getGrowCutLabelmap(growCutData) {\n        const { segmentation: { referencedVolumeId }, renderingEngineId, viewportId, circleCenterPoint, circleBorderPoint, options, } = growCutData;\n        const renderingEngine = getRenderingEngine(renderingEngineId);\n        const viewport = renderingEngine.getViewport(viewportId);\n        const worldCircleRadius = vec3.len(vec3.sub(vec3.create(), circleCenterPoint, circleBorderPoint));\n        const sphereInfo = {\n            center: circleCenterPoint,\n            radius: worldCircleRadius,\n        };\n        return growCut.runGrowCutForSphere(referencedVolumeId, sphereInfo, viewport, options);\n    }\n    _activateDraw(element) {\n        element.addEventListener(Events.MOUSE_UP, this._endCallback);\n        element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n        element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this.growCutData) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const { segmentation: segmentationData, circleCenterPoint, circleBorderPoint, } = this.growCutData;\n        const canvasCenterPoint = viewport.worldToCanvas(circleCenterPoint);\n        const canvasBorderPoint = viewport.worldToCanvas(circleBorderPoint);\n        const vecCenterToBorder = vec2.sub(vec2.create(), canvasBorderPoint, canvasCenterPoint);\n        const circleRadius = vec2.len(vecCenterToBorder);\n        if (csUtils.isEqual(circleRadius, 0)) {\n            return;\n        }\n        const annotationUID = 'growcut';\n        const circleUID = '0';\n        const { color } = this.getSegmentStyle({\n            segmentationId: segmentationData.segmentationId,\n            segmentIndex: segmentationData.segmentIndex,\n            viewportId: viewport.id,\n        });\n        drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, canvasCenterPoint, circleRadius, {\n            color,\n        });\n    }\n}\nexport default RegionSegmentTool;\n","import { cache, utilities as csUtils, getEnabledElement, } from '@cornerstonejs/core';\nimport { growCut } from '../../utilities/segmentation';\nimport GrowCutBaseTool from '../base/GrowCutBaseTool';\nimport { calculateGrowCutSeeds } from '../../utilities/segmentation/growCut/runOneClickGrowCut';\nimport { ToolModes } from '../../enums';\nclass RegionSegmentPlusTool extends GrowCutBaseTool {\n    static { this.toolName = 'RegionSegmentPlus'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            isPartialVolume: false,\n            positiveSeedVariance: 0.4,\n            negativeSeedVariance: 0.9,\n            subVolumePaddingPercentage: 0.1,\n            islandRemoval: {\n                enabled: false,\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseTimer = null;\n        this.allowedToProceed = false;\n    }\n    mouseMoveCallback(evt) {\n        if (this.mode !== ToolModes.Active) {\n            return;\n        }\n        const eventData = evt.detail;\n        const { currentPoints, element } = eventData;\n        const { world: worldPoint } = currentPoints;\n        element.style.cursor = 'default';\n        if (this.mouseTimer !== null) {\n            window.clearTimeout(this.mouseTimer);\n            this.mouseTimer = null;\n        }\n        this.mouseTimer = window.setTimeout(() => {\n            this.onMouseStable(evt, worldPoint, element);\n        }, this.configuration.mouseStabilityDelay || 500);\n    }\n    async onMouseStable(evt, worldPoint, element) {\n        await super.preMouseDownCallback(evt);\n        const refVolume = cache.getVolume(this.growCutData.segmentation.referencedVolumeId);\n        const seeds = calculateGrowCutSeeds(refVolume, worldPoint, {}) || {\n            positiveSeedIndices: new Set(),\n            negativeSeedIndices: new Set(),\n        };\n        const { positiveSeedIndices, negativeSeedIndices } = seeds;\n        let cursor;\n        if (positiveSeedIndices.size / negativeSeedIndices.size > 20 ||\n            negativeSeedIndices.size < 30) {\n            cursor = 'not-allowed';\n            this.allowedToProceed = false;\n        }\n        else {\n            cursor = 'copy';\n            this.allowedToProceed = true;\n        }\n        const enabledElement = getEnabledElement(element);\n        if (element) {\n            element.style.cursor = cursor;\n            requestAnimationFrame(() => {\n                if (element.style.cursor !== cursor) {\n                    element.style.cursor = cursor;\n                }\n            });\n        }\n        if (this.allowedToProceed) {\n            this.seeds = seeds;\n        }\n        if (enabledElement && enabledElement.viewport) {\n            enabledElement.viewport.render();\n        }\n    }\n    async preMouseDownCallback(evt) {\n        if (!this.allowedToProceed) {\n            return false;\n        }\n        const eventData = evt.detail;\n        const { currentPoints, element } = eventData;\n        const enabledElement = getEnabledElement(element);\n        if (enabledElement) {\n            element.style.cursor = 'wait';\n            requestAnimationFrame(() => {\n                if (element.style.cursor !== 'wait') {\n                    element.style.cursor = 'wait';\n                }\n            });\n        }\n        const { world: worldPoint } = currentPoints;\n        await super.preMouseDownCallback(evt);\n        this.growCutData = csUtils.deepMerge(this.growCutData, {\n            worldPoint,\n            islandRemoval: {\n                worldIslandPoints: [worldPoint],\n            },\n        });\n        this.growCutData.worldPoint = worldPoint;\n        this.growCutData.islandRemoval = {\n            worldIslandPoints: [worldPoint],\n        };\n        await this.runGrowCut();\n        if (element) {\n            element.style.cursor = 'default';\n        }\n        return true;\n    }\n    getRemoveIslandData(growCutData) {\n        const { worldPoint } = growCutData;\n        return {\n            worldIslandPoints: [worldPoint],\n        };\n    }\n    async getGrowCutLabelmap(growCutData) {\n        const { segmentation: { referencedVolumeId }, worldPoint, options, } = growCutData;\n        const { subVolumePaddingPercentage } = this.configuration;\n        const mergedOptions = {\n            ...options,\n            subVolumePaddingPercentage,\n            seeds: this.seeds,\n        };\n        return growCut.runOneClickGrowCut({\n            referencedVolumeId,\n            worldPosition: worldPoint,\n            options: mergedOptions,\n        });\n    }\n}\nexport default RegionSegmentPlusTool;\n","import { vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, cache, getRenderingEngine, BaseVolumeViewport, } from '@cornerstonejs/core';\nimport { drawPolyline as drawPolylineSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { Events } from '../../enums';\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { growCut } from '../../utilities/segmentation';\nimport GrowCutBaseTool from '../base/GrowCutBaseTool';\nconst NEGATIVE_PIXEL_RANGE = [-Infinity, -995];\nconst POSITIVE_PIXEL_RANGE = [0, 1900];\nconst ISLAND_PIXEL_RANGE = [1000, 1900];\nconst { transformWorldToIndex, transformIndexToWorld } = csUtils;\nclass WholeBodySegmentTool extends GrowCutBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            isPartialVolume: true,\n            positivePixelRange: POSITIVE_PIXEL_RANGE,\n            negativePixelRange: NEGATIVE_PIXEL_RANGE,\n            islandRemoval: {\n                enabled: true,\n                islandPixelRange: ISLAND_PIXEL_RANGE,\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const { world: currentWorldPoint } = currentPoints;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const linePoints = this._getHorizontalLineWorldPoints(enabledElement, currentWorldPoint);\n            this.growCutData.horizontalLines[1] = linePoints;\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._endCallback = async (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            await this.runGrowCut();\n            this._deactivateDraw(element);\n            this.growCutData = null;\n            resetElementCursor(element);\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n    }\n    async preMouseDownCallback(evt) {\n        const eventData = evt.detail;\n        const { element, currentPoints } = eventData;\n        const { world: worldPoint } = currentPoints;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        const linePoints = this._getHorizontalLineWorldPoints(enabledElement, worldPoint);\n        await super.preMouseDownCallback(evt);\n        this.growCutData.horizontalLines = [linePoints, linePoints];\n        this._activateDraw(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        return true;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this.growCutData) {\n            return;\n        }\n        const { segmentation: segmentationData, horizontalLines } = this.growCutData;\n        if (horizontalLines.length !== 2) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const { segmentationId, segmentIndex } = segmentationData;\n        const [line1, line2] = horizontalLines;\n        const [worldLine1P1, worldLine1P2] = line1;\n        const [worldLine2P1, worldLine2P2] = line2;\n        const canvasPoints = [\n            worldLine1P1,\n            worldLine1P2,\n            worldLine2P2,\n            worldLine2P1,\n        ].map((worldPoint) => viewport.worldToCanvas(worldPoint));\n        const annotationUID = 'growCutRect';\n        const squareGroupUID = '0';\n        const { color, fillColor, lineWidth, fillOpacity, lineDash } = this.getSegmentStyle({\n            segmentationId,\n            segmentIndex,\n            viewportId: viewport.id,\n        });\n        drawPolylineSvg(svgDrawingHelper, annotationUID, squareGroupUID, canvasPoints, {\n            color,\n            fillColor,\n            fillOpacity,\n            lineWidth,\n            lineDash,\n            closePath: true,\n        });\n    }\n    async getGrowCutLabelmap(growCutData) {\n        const { segmentation: { segmentIndex, referencedVolumeId }, renderingEngineId, viewportId, horizontalLines, } = growCutData;\n        const renderingEngine = getRenderingEngine(renderingEngineId);\n        const viewport = renderingEngine.getViewport(viewportId);\n        const [line1, line2] = horizontalLines;\n        const worldSquarePoints = [line1[0], line1[1], line2[1], line2[0]];\n        const referencedVolume = cache.getVolume(referencedVolumeId);\n        const { topLeft: worldTopLeft, bottomRight: worldBottomRight } = this._getWorldBoundingBoxFromProjectedSquare(viewport, worldSquarePoints);\n        const ijkTopLeft = transformWorldToIndex(referencedVolume.imageData, worldTopLeft);\n        const ijkBottomRight = transformWorldToIndex(referencedVolume.imageData, worldBottomRight);\n        const boundingBoxInfo = {\n            boundingBox: {\n                ijkTopLeft,\n                ijkBottomRight,\n            },\n        };\n        const config = this.configuration;\n        const options = {\n            positiveSeedValue: segmentIndex,\n            negativeSeedValue: 255,\n            negativePixelRange: config.negativePixelRange,\n            positivePixelRange: config.positivePixelRange,\n        };\n        return growCut.runGrowCutForBoundingBox(referencedVolumeId, boundingBoxInfo, options);\n    }\n    getRemoveIslandData() {\n        const { segmentation: { segmentIndex, referencedVolumeId, labelmapVolumeId }, } = this.growCutData;\n        const referencedVolume = cache.getVolume(referencedVolumeId);\n        const labelmapVolume = cache.getVolume(labelmapVolumeId);\n        const referencedVolumeData = referencedVolume.voxelManager.getCompleteScalarDataArray();\n        const labelmapData = labelmapVolume.voxelManager.getCompleteScalarDataArray();\n        const { islandPixelRange } = this.configuration.islandRemoval;\n        const islandPointIndexes = [];\n        for (let i = 0, len = labelmapData.length; i < len; i++) {\n            if (labelmapData[i] !== segmentIndex) {\n                continue;\n            }\n            const pixelValue = referencedVolumeData[i];\n            if (pixelValue >= islandPixelRange[0] &&\n                pixelValue <= islandPixelRange[1]) {\n                islandPointIndexes.push(i);\n            }\n        }\n        return {\n            islandPointIndexes,\n        };\n    }\n    _activateDraw(element) {\n        element.addEventListener(Events.MOUSE_UP, this._endCallback);\n        element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n        element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n    }\n    _projectWorldPointAcrossSlices(viewport, worldEdgePoint, vecDirection) {\n        const volume = this._getViewportVolume(viewport);\n        const { dimensions } = volume;\n        const ijkPoint = transformWorldToIndex(volume.imageData, worldEdgePoint);\n        const axis = vecDirection.findIndex((n) => csUtils.isEqual(Math.abs(n), 1));\n        if (axis === -1) {\n            throw new Error('Non-orthogonal direction vector');\n        }\n        const ijkLineP1 = [...ijkPoint];\n        const ijkLineP2 = [...ijkPoint];\n        ijkLineP1[axis] = 0;\n        ijkLineP2[axis] = dimensions[axis] - 1;\n        return [ijkLineP1, ijkLineP2];\n    }\n    _getCuboidIJKEdgePointsFromProjectedWorldPoint(viewport, worldEdgePoint) {\n        const { viewPlaneNormal } = viewport.getCamera();\n        return this._projectWorldPointAcrossSlices(viewport, worldEdgePoint, viewPlaneNormal);\n    }\n    _getWorldCuboidCornerPoints(viewport, worldSquarePoints) {\n        const cuboidPoints = [];\n        const volume = this._getViewportVolume(viewport);\n        worldSquarePoints.forEach((worldSquarePoint) => {\n            const ijkEdgePoints = this._getCuboidIJKEdgePointsFromProjectedWorldPoint(viewport, worldSquarePoint);\n            const worldEdgePoints = ijkEdgePoints.map((ijkPoint) => transformIndexToWorld(volume.imageData, ijkPoint));\n            cuboidPoints.push(...worldEdgePoints);\n        });\n        return cuboidPoints;\n    }\n    _getWorldBoundingBoxFromProjectedSquare(viewport, worldSquarePoints) {\n        const worldCuboidPoints = this._getWorldCuboidCornerPoints(viewport, worldSquarePoints);\n        const topLeft = [...worldCuboidPoints[0]];\n        const bottomRight = [...worldCuboidPoints[0]];\n        worldCuboidPoints.forEach((worldPoint) => {\n            vec3.min(topLeft, topLeft, worldPoint);\n            vec3.max(bottomRight, bottomRight, worldPoint);\n        });\n        return { topLeft, bottomRight };\n    }\n    _getViewportVolume(viewport) {\n        if (!(viewport instanceof BaseVolumeViewport)) {\n            throw new Error('Viewport is not a BaseVolumeViewport');\n        }\n        const volumeId = viewport.getAllVolumeIds()[0];\n        return cache.getVolume(volumeId);\n    }\n    _getHorizontalLineIJKPoints(enabledElement, worldPoint) {\n        const { viewport } = enabledElement;\n        const volume = this._getViewportVolume(viewport);\n        const { dimensions } = volume;\n        const ijkPoint = transformWorldToIndex(volume.imageData, worldPoint);\n        const { viewUp, viewPlaneNormal } = viewport.getCamera();\n        const vecRow = vec3.cross(vec3.create(), viewUp, viewPlaneNormal);\n        const axis = vecRow.findIndex((n) => csUtils.isEqual(Math.abs(n), 1));\n        const ijkLineP1 = [...ijkPoint];\n        const ijkLineP2 = [...ijkPoint];\n        ijkLineP1[axis] = 0;\n        ijkLineP2[axis] = dimensions[axis] - 1;\n        return [ijkLineP1, ijkLineP2];\n    }\n    _getHorizontalLineWorldPoints(enabledElement, worldPoint) {\n        const { viewport } = enabledElement;\n        const volume = this._getViewportVolume(viewport);\n        const [ijkPoint1, ijkPoint2] = this._getHorizontalLineIJKPoints(enabledElement, worldPoint);\n        const worldPoint1 = transformIndexToWorld(volume.imageData, ijkPoint1);\n        const worldPoint2 = transformIndexToWorld(volume.imageData, ijkPoint2);\n        return [worldPoint1, worldPoint2];\n    }\n}\nWholeBodySegmentTool.toolName = 'WholeBodySegment';\nexport default WholeBodySegmentTool;\n","import { BaseVolumeViewport, cache, getEnabledElement, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { fillInsideRectangle } from './strategies/fillRectangle';\nimport { eraseInsideRectangle } from './strategies/eraseRectangle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { Events, SegmentationRepresentations } from '../../enums';\nimport { drawRect as drawRectSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { config as segmentationConfig, segmentLocking, segmentIndex as segmentIndexController, activeSegmentation, } from '../../stateManagement/segmentation';\nimport { getCurrentLabelmapImageIdForViewport, getSegmentation, } from '../../stateManagement/segmentation/segmentationState';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nclass RectangleScissorsTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE: fillInsideRectangle,\n                ERASE_INSIDE: eraseInsideRectangle,\n            },\n            defaultStrategy: 'FILL_INSIDE',\n            activeStrategy: 'FILL_INSIDE',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            if (this.isDrawing === true) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const activeLabelmapSegmentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeLabelmapSegmentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeLabelmapSegmentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const segmentColor = segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n            const { representationData } = getSegmentation(segmentationId);\n            const labelmapData = representationData[SegmentationRepresentations.Labelmap];\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId: '',\n                    toolName: this.getToolName(),\n                    segmentColor,\n                },\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                },\n            };\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                segmentIndex,\n                segmentationId,\n                segmentsLocked,\n                segmentColor,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n                volumeId: null,\n                referencedVolumeId: null,\n                imageId: null,\n            };\n            if (viewport instanceof BaseVolumeViewport) {\n                const { volumeId } = labelmapData;\n                const segmentation = cache.getVolume(volumeId);\n                this.editData = {\n                    ...this.editData,\n                    volumeId,\n                    referencedVolumeId: segmentation.referencedVolumeId,\n                };\n            }\n            else {\n                const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n                this.editData = {\n                    ...this.editData,\n                    imageId: segmentationImageId,\n                };\n            }\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n            const { data } = annotation;\n            const { currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n            const worldPos = currentPoints.world;\n            const { points } = data.handles;\n            points[handleIndex] = [...worldPos];\n            let bottomLeftCanvas;\n            let bottomRightCanvas;\n            let topLeftCanvas;\n            let topRightCanvas;\n            let bottomLeftWorld;\n            let bottomRightWorld;\n            let topLeftWorld;\n            let topRightWorld;\n            switch (handleIndex) {\n                case 0:\n                case 3:\n                    bottomLeftCanvas = worldToCanvas(points[0]);\n                    topRightCanvas = worldToCanvas(points[3]);\n                    bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n                    topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n                    bottomRightWorld = canvasToWorld(bottomRightCanvas);\n                    topLeftWorld = canvasToWorld(topLeftCanvas);\n                    points[1] = bottomRightWorld;\n                    points[2] = topLeftWorld;\n                    break;\n                case 1:\n                case 2:\n                    bottomRightCanvas = worldToCanvas(points[1]);\n                    topLeftCanvas = worldToCanvas(points[2]);\n                    bottomLeftCanvas = [\n                        topLeftCanvas[0],\n                        bottomRightCanvas[1],\n                    ];\n                    topRightCanvas = [bottomRightCanvas[0], topLeftCanvas[1]];\n                    bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n                    topRightWorld = canvasToWorld(topRightCanvas);\n                    points[0] = bottomLeftWorld;\n                    points[3] = topRightWorld;\n                    break;\n            }\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const operationData = {\n                ...this.editData,\n                points: data.handles.points,\n                createMemo: this.createMemo.bind(this),\n            };\n            this.editData = null;\n            this.isDrawing = false;\n            this.applyActiveStrategy(enabledElement, operationData);\n            this.doneEditMemo();\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const { viewport } = enabledElement;\n            const { annotation } = this.editData;\n            const toolMetadata = annotation.metadata;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const rectangleUID = '0';\n            drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                color,\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nRectangleScissorsTool.toolName = 'RectangleScissor';\nexport default RectangleScissorsTool;\n","import { BaseVolumeViewport, cache, getEnabledElement, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { fillInsideCircle } from './strategies/fillCircle';\nimport { eraseInsideCircle } from './strategies/eraseCircle';\nimport { Events } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { segmentLocking, activeSegmentation, segmentIndex as segmentIndexController, config as segmentationConfig, } from '../../stateManagement/segmentation';\nimport { getCurrentLabelmapImageIdForViewport, getSegmentation, } from '../../stateManagement/segmentation/segmentationState';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nclass CircleScissorsTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE: fillInsideCircle,\n                ERASE_INSIDE: eraseInsideCircle,\n            },\n            defaultStrategy: 'FILL_INSIDE',\n            activeStrategy: 'FILL_INSIDE',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            if (this.isDrawing === true) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const activeLabelmapSegmentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeLabelmapSegmentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeLabelmapSegmentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const segmentColor = segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n            const { representationData } = getSegmentation(segmentationId);\n            const labelmapData = representationData.Labelmap;\n            if (!labelmapData) {\n                throw new Error('No labelmap data found for the active segmentation, create one before using scissors tool');\n            }\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId: '',\n                    toolName: this.getToolName(),\n                    segmentColor,\n                },\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    isDrawing: true,\n                    cachedStats: {},\n                },\n            };\n            const viewportIdsToRender = [viewport.id];\n            this.editData = {\n                annotation,\n                centerCanvas: canvasPos,\n                segmentIndex,\n                segmentationId,\n                segmentsLocked,\n                segmentColor,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n                volumeId: null,\n                referencedVolumeId: null,\n                imageId: null,\n            };\n            if (viewport instanceof BaseVolumeViewport) {\n                const { volumeId } = labelmapData;\n                const segmentation = cache.getVolume(volumeId);\n                this.editData = {\n                    ...this.editData,\n                    volumeId,\n                    referencedVolumeId: segmentation.referencedVolumeId,\n                };\n            }\n            else {\n                const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n                this.editData = {\n                    ...this.editData,\n                    imageId: segmentationImageId,\n                };\n            }\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n            const { data } = annotation;\n            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n            const radius = Math.sqrt(dX * dX + dY * dY);\n            const bottomCanvas = [\n                centerCanvas[0],\n                centerCanvas[1] + radius,\n            ];\n            const topCanvas = [centerCanvas[0], centerCanvas[1] - radius];\n            const leftCanvas = [\n                centerCanvas[0] - radius,\n                centerCanvas[1],\n            ];\n            const rightCanvas = [\n                centerCanvas[0] + radius,\n                centerCanvas[1],\n            ];\n            data.handles.points = [\n                canvasToWorld(bottomCanvas),\n                canvasToWorld(topCanvas),\n                canvasToWorld(leftCanvas),\n                canvasToWorld(rightCanvas),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            const { viewPlaneNormal, viewUp } = annotation.metadata;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const operationData = {\n                ...this.editData,\n                points: data.handles.points,\n                viewPlaneNormal,\n                viewUp,\n                createMemo: this.createMemo.bind(this),\n            };\n            this.editData = null;\n            this.isDrawing = false;\n            this.applyActiveStrategy(enabledElement, operationData);\n            this.doneEditMemo();\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const { viewport } = enabledElement;\n            const { viewportIdsToRender } = this.editData;\n            if (!viewportIdsToRender.includes(viewport.id)) {\n                return renderStatus;\n            }\n            const { annotation } = this.editData;\n            const toolMetadata = annotation.metadata;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const bottom = canvasCoordinates[0];\n            const top = canvasCoordinates[1];\n            const center = [\n                Math.floor((bottom[0] + top[0]) / 2),\n                Math.floor((bottom[1] + top[1]) / 2),\n            ];\n            const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const circleUID = '0';\n            drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                color,\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nCircleScissorsTool.toolName = 'CircleScissor';\nexport default CircleScissorsTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { fillInsideSphere } from './strategies/fillSphere';\nimport { eraseInsideSphere } from './strategies/eraseSphere';\nimport { Events, SegmentationRepresentations } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { config as segmentationConfig, segmentLocking, segmentIndex as segmentIndexController, activeSegmentation, } from '../../stateManagement/segmentation';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nclass SphereScissorsTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE: fillInsideSphere,\n                ERASE_INSIDE: eraseInsideSphere,\n            },\n            defaultStrategy: 'FILL_INSIDE',\n            activeStrategy: 'FILL_INSIDE',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            if (this.isDrawing === true) {\n                return;\n            }\n            this.doneEditMemo();\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const activeSegmentationRepresentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeSegmentationRepresentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeSegmentationRepresentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const segmentColor = segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n            this.isDrawing = true;\n            const annotation = {\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId: '',\n                    toolName: this.getToolName(),\n                    segmentColor,\n                },\n                data: {\n                    invalidated: true,\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {},\n                    highlighted: true,\n                },\n            };\n            const viewportIdsToRender = [viewport.id];\n            this.editData = {\n                annotation,\n                centerCanvas: canvasPos,\n                segmentIndex,\n                segmentationId,\n                segmentsLocked,\n                segmentColor,\n                toolGroupId: this.toolGroupId,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n                volumeId: null,\n                referencedVolumeId: null,\n                imageId: null,\n            };\n            const { representationData } = getSegmentation(segmentationId);\n            const editData = this.getEditData({\n                viewport,\n                representationData,\n                segmentsLocked,\n                segmentationId,\n            });\n            this.editData = {\n                ...this.editData,\n                ...editData,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n            const { data } = annotation;\n            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n            const radius = Math.sqrt(dX * dX + dY * dY);\n            const bottomCanvas = [\n                centerCanvas[0],\n                centerCanvas[1] + radius,\n            ];\n            const topCanvas = [centerCanvas[0], centerCanvas[1] - radius];\n            const leftCanvas = [\n                centerCanvas[0] - radius,\n                centerCanvas[1],\n            ];\n            const rightCanvas = [\n                centerCanvas[0] + radius,\n                centerCanvas[1],\n            ];\n            data.handles.points = [\n                canvasToWorld(bottomCanvas),\n                canvasToWorld(topCanvas),\n                canvasToWorld(leftCanvas),\n                canvasToWorld(rightCanvas),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, newAnnotation, hasMoved, segmentIndex, segmentsLocked, } = this.editData;\n            const { data } = annotation;\n            const { viewPlaneNormal, viewUp } = annotation.metadata;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const operationData = {\n                ...this.editData,\n                points: data.handles.points,\n                segmentIndex,\n                segmentsLocked,\n                viewPlaneNormal,\n                viewUp,\n                createMemo: this.createMemo.bind(this),\n            };\n            this.editData = null;\n            this.isDrawing = false;\n            this.applyActiveStrategy(enabledElement, operationData);\n            this.doneEditMemo();\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const { viewport } = enabledElement;\n            const { viewportIdsToRender } = this.editData;\n            if (!viewportIdsToRender.includes(viewport.id)) {\n                return renderStatus;\n            }\n            const { annotation } = this.editData;\n            const toolMetadata = annotation.metadata;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const bottom = canvasCoordinates[0];\n            const top = canvasCoordinates[1];\n            const center = [\n                Math.floor((bottom[0] + top[0]) / 2),\n                Math.floor((bottom[1] + top[1]) / 2),\n            ];\n            const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const circleUID = '0';\n            drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                color,\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nSphereScissorsTool.toolName = 'SphereScissor';\nexport default SphereScissorsTool;\n","import { StackViewport, cache, getEnabledElement, utilities as csUtils, utilities as coreUtils, } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { addAnnotation, removeAnnotation, getAnnotations, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport throttle from '../../utilities/throttle';\nimport debounce from '../../utilities/debounce';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { hideElementCursor, resetElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport CircleROITool from '../annotation/CircleROITool';\nimport { getCanvasCircleCorners, getCanvasCircleRadius, } from '../../utilities/math/circle';\nimport { getCalibratedLengthUnitsAndScale, getCalibratedAspect, } from '../../utilities/getCalibratedUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { pointInEllipse } from '../../utilities/math/ellipse';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport { filterAnnotationsWithinSamePlane } from '../../utilities/planar';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nconst { transformWorldToIndex } = csUtils;\nclass CircleROIStartEndThresholdTool extends CircleROITool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            simplified: true,\n            storePointData: false,\n            numSlicesToPropagate: 10,\n            calculatePointsInsideVolume: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n            showTextBox: false,\n            throttleTimeout: 100,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            let referencedImageId, imageVolume, volumeId;\n            if (viewport instanceof StackViewport) {\n                throw new Error('Stack Viewport Not implemented');\n            }\n            else {\n                const targetId = this.getTargetId(viewport);\n                volumeId = csUtils.getVolumeId(targetId);\n                imageVolume = cache.getVolume(volumeId);\n                referencedImageId = csUtils.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n            }\n            const spacingInNormal = csUtils.getSpacingInNormalDirection(imageVolume, viewPlaneNormal);\n            const startCoord = this._getStartCoordinate(worldPos, spacingInNormal, viewPlaneNormal);\n            const endCoord = this._getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            let points;\n            if (this.configuration.simplified) {\n                points = [[...worldPos], [...worldPos]];\n            }\n            else {\n                points = [\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                ];\n            }\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    volumeId,\n                    spacingInNormal,\n                    enabledElement,\n                },\n                data: {\n                    label: '',\n                    startCoordinate: startCoord,\n                    endCoordinate: endCoord,\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                        points,\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {\n                        pointsInVolume: [],\n                        projectionPoints: [],\n                        statistics: [],\n                    },\n                    labelmapUID: null,\n                },\n            };\n            this._computeProjectionPoints(annotation, imageVolume);\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const { metadata } = annotation;\n            const { enabledElement } = metadata;\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            const targetId = this.getTargetId(enabledElement.viewport);\n            const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n            this._computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            else {\n                triggerAnnotationModified(annotation, element);\n            }\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            let annotations = getAnnotations(this.getToolName(), viewport.element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = filterAnnotationsWithinSamePlane(annotations, viewport.getCamera());\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data, metadata } = annotation;\n                const { startCoordinate, endCoordinate } = data;\n                const { points, activeHandleIndex } = data.handles;\n                const { enabledElement: annotationEnabledElement } = metadata;\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const center = canvasCoordinates[0];\n                const radius = getCanvasCircleRadius([\n                    canvasCoordinates[0],\n                    canvasCoordinates[1],\n                ]);\n                const { centerPointRadius } = this.configuration;\n                const canvasCorners = getCanvasCircleCorners([\n                    canvasCoordinates[0],\n                    canvasCoordinates[1],\n                ]);\n                const focalPoint = viewport.getCamera().focalPoint;\n                const viewplaneNormal = viewport.getCamera().viewPlaneNormal;\n                let tempStartCoordinate = startCoordinate;\n                let tempEndCoordinate = endCoordinate;\n                if (Array.isArray(startCoordinate)) {\n                    tempStartCoordinate = this._getCoordinateForViewplaneNormal(tempStartCoordinate, viewplaneNormal);\n                    data.startCoordinate = tempStartCoordinate;\n                }\n                if (Array.isArray(endCoordinate)) {\n                    tempEndCoordinate = this._getCoordinateForViewplaneNormal(tempEndCoordinate, viewplaneNormal);\n                    data.endCoordinate = tempEndCoordinate;\n                }\n                const roundedStartCoordinate = coreUtils.roundToPrecision(data.startCoordinate);\n                const roundedEndCoordinate = coreUtils.roundToPrecision(data.endCoordinate);\n                const cameraCoordinate = this._getCoordinateForViewplaneNormal(focalPoint, viewplaneNormal);\n                const roundedCameraCoordinate = coreUtils.roundToPrecision(cameraCoordinate);\n                if (roundedCameraCoordinate <\n                    Math.min(roundedStartCoordinate, roundedEndCoordinate) ||\n                    roundedCameraCoordinate >\n                        Math.max(roundedStartCoordinate, roundedEndCoordinate)) {\n                    continue;\n                }\n                const middleCoordinate = coreUtils.roundToPrecision((data.startCoordinate + data.endCoordinate) / 2);\n                let isMiddleSlice = false;\n                if (roundedCameraCoordinate === middleCoordinate) {\n                    isMiddleSlice = true;\n                }\n                data.handles.points[0][this._getIndexOfCoordinatesForViewplaneNormal(viewplaneNormal)] = middleCoordinate;\n                const iteratorVolumeIDs = annotationEnabledElement.viewport?.volumeIds.values();\n                for (const volumeId of iteratorVolumeIDs) {\n                    if (annotation.invalidated &&\n                        annotation.metadata.volumeId === volumeId) {\n                        this._throttledCalculateCachedStats(annotation, annotationEnabledElement);\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null &&\n                    isMiddleSlice) {\n                    if (this.configuration.simplified) {\n                        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                    }\n                    else {\n                        activeHandleCanvasCoords = canvasCoordinates;\n                    }\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                let lineWidthToUse = lineWidth;\n                let lineDashToUse = lineDash;\n                if (isMiddleSlice) {\n                    lineWidthToUse = lineWidth;\n                    lineDashToUse = [];\n                }\n                else {\n                    lineDashToUse = [5, 5];\n                }\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                    color,\n                    lineDash: lineDashToUse,\n                    lineWidth: lineWidthToUse,\n                });\n                if (centerPointRadius > 0) {\n                    if (radius > 3 * centerPointRadius) {\n                        drawCircleSvg(svgDrawingHelper, annotationUID, `${circleUID}-center`, center, centerPointRadius, {\n                            color,\n                            lineDash,\n                            lineWidth,\n                        });\n                    }\n                }\n                renderStatus = true;\n                if (this.configuration.showTextBox) {\n                    const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                    if (!options.visibility) {\n                        data.handles.textBox = {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        };\n                        continue;\n                    }\n                    const textLines = this.configuration.getTextLines(data, { metadata });\n                    if (!textLines || textLines.length === 0) {\n                        continue;\n                    }\n                    let canvasTextBoxCoords;\n                    if (!data.handles.textBox.hasMoved) {\n                        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n                        data.handles.textBox.worldPosition =\n                            viewport.canvasToWorld(canvasTextBoxCoords);\n                    }\n                    const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                    const textBoxUID = '1';\n                    const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, [canvasCoordinates[0], canvasCoordinates[1]], {}, options);\n                    const { x: left, y: top, width, height } = boundingBox;\n                    data.handles.textBox.worldBoundingBox = {\n                        topLeft: viewport.canvasToWorld([left, top]),\n                        topRight: viewport.canvasToWorld([left + width, top]),\n                        bottomLeft: viewport.canvasToWorld([left, top + height]),\n                        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                    };\n                }\n            }\n            return renderStatus;\n        };\n        if (this.configuration.calculatePointsInsideVolume) {\n            this._throttledCalculateCachedStats = throttle(this._calculateCachedStatsTool, this.configuration.throttleTimeout, { trailing: true });\n        }\n        else {\n            this._throttledCalculateCachedStats = debounce(this._calculateCachedStatsTool, this.configuration.throttleTimeout);\n        }\n    }\n    _computeProjectionPoints(annotation, imageVolume) {\n        const { data, metadata } = annotation;\n        const { viewPlaneNormal, spacingInNormal } = metadata;\n        const { startCoordinate, endCoordinate } = data;\n        const { points } = data.handles;\n        const projectionAxisIndex = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n        const startWorld = vec3.clone(points[0]);\n        startWorld[projectionAxisIndex] = startCoordinate;\n        const endWorld = vec3.clone(points[0]);\n        endWorld[projectionAxisIndex] = endCoordinate;\n        const direction = vec3.create();\n        vec3.subtract(direction, endWorld, startWorld);\n        const distance = vec3.length(direction);\n        if (distance === 0) {\n            const handlesOnStartPlane = points.map((p) => {\n                const newPoint = vec3.clone(p);\n                newPoint[projectionAxisIndex] = startCoordinate;\n                return Array.from(newPoint);\n            });\n            data.cachedStats.projectionPoints = [handlesOnStartPlane];\n            return;\n        }\n        vec3.normalize(direction, direction);\n        const handlesToStart = csUtils.deepClone(points);\n        handlesToStart[0][projectionAxisIndex] = startCoordinate;\n        handlesToStart[1][projectionAxisIndex] = startCoordinate;\n        const newProjectionPoints = [];\n        for (let dist = 0; dist <= distance + 1e-6; dist += spacingInNormal) {\n            newProjectionPoints.push(handlesToStart.map((point) => {\n                const newPoint = vec3.create();\n                vec3.scaleAndAdd(newPoint, point, direction, dist);\n                return Array.from(newPoint);\n            }));\n        }\n        data.cachedStats.projectionPoints = newProjectionPoints;\n    }\n    _computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement) {\n        const { data, metadata } = annotation;\n        const { viewPlaneNormal, viewUp } = metadata;\n        const { viewport } = enabledElement;\n        const projectionPoints = data.cachedStats.projectionPoints;\n        const pointsInsideVolume = [[]];\n        const image = this.getTargetImageData(targetId);\n        const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));\n        const baseTopLeftCanvas = getCanvasCircleCorners([\n            canvasCoordinates[0],\n            canvasCoordinates[1],\n        ])[0];\n        const baseBottomRightCanvas = getCanvasCircleCorners([\n            canvasCoordinates[0],\n            canvasCoordinates[1],\n        ])[1];\n        const basePos1 = viewport.canvasToWorld(baseTopLeftCanvas);\n        const basePos2 = viewport.canvasToWorld(baseBottomRightCanvas);\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, basePos1, basePos2);\n        const measureInfo = getCalibratedLengthUnitsAndScale(image, data.handles.points);\n        const aspect = getCalibratedAspect(image);\n        const area = Math.abs(Math.PI *\n            (worldWidth / measureInfo.scale / 2) *\n            (worldHeight / aspect / measureInfo.scale / 2));\n        const modalityUnitOptions = {\n            isPreScaled: isViewportPreScaled(viewport, targetId),\n            isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n        };\n        const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, modalityUnitOptions);\n        for (let i = 0; i < projectionPoints.length; i++) {\n            if (!imageVolume) {\n                continue;\n            }\n            const centerWorld = projectionPoints[i][0];\n            const currentCanvasCoordinates = projectionPoints[i].map((p) => viewport.worldToCanvas(p));\n            const [topLeftCanvas, bottomRightCanvas] = (getCanvasCircleCorners([\n                currentCanvasCoordinates[0],\n                currentCanvasCoordinates[1],\n            ]));\n            const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n            const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n            const worldPos1 = topLeftWorld;\n            const worldPos2 = bottomRightWorld;\n            const { dimensions, imageData, voxelManager } = imageVolume;\n            const worldPos1Index = transformWorldToIndex(imageData, worldPos1);\n            const worldProjectionPointIndex = transformWorldToIndex(imageData, centerWorld);\n            const indexOfProjection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n            worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n            worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n            worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n            worldPos1Index[indexOfProjection] =\n                worldProjectionPointIndex[indexOfProjection];\n            const worldPos2Index = transformWorldToIndex(imageData, worldPos2);\n            worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n            worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n            worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n            worldPos2Index[indexOfProjection] =\n                worldProjectionPointIndex[indexOfProjection];\n            if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n                const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n                const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n                const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n                const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n                const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n                const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n                const boundsIJK = [\n                    [iMin, iMax],\n                    [jMin, jMax],\n                    [kMin, kMax],\n                ];\n                const center = centerWorld;\n                const ellipseObj = {\n                    center,\n                    xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n                    yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n                    zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n                };\n                const pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                    isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS),\n                    boundsIJK,\n                    imageData,\n                    returnPoints: this.configuration.storePointData,\n                });\n                pointsInsideVolume.push(pointsInShape);\n            }\n        }\n        const stats = this.configuration.statsCalculator.getStatistics();\n        data.cachedStats.pointsInVolume = pointsInsideVolume;\n        data.cachedStats.statistics = {\n            Modality: metadata.Modality,\n            area,\n            mean: stats.mean?.value,\n            stdDev: stats.stdDev?.value,\n            max: stats.max?.value,\n            statsArray: stats.array,\n            areaUnit: measureInfo.areaUnit,\n            modalityUnit,\n        };\n    }\n    _calculateCachedStatsTool(annotation, enabledElement) {\n        const data = annotation.data;\n        const { viewport } = enabledElement;\n        const { cachedStats } = data;\n        const targetId = this.getTargetId(viewport);\n        const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n        this._computeProjectionPoints(annotation, imageVolume);\n        this._computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement);\n        annotation.invalidated = false;\n        triggerAnnotationModified(annotation, viewport.element);\n        return cachedStats;\n    }\n    _getStartCoordinate(worldPos, spacingInNormal, viewPlaneNormal) {\n        const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n        const numSlicesToPropagateFromStart = Math.round(numSlicesToPropagate / 2);\n        const startPos = vec3.create();\n        vec3.scaleAndAdd(startPos, worldPos, viewPlaneNormal, numSlicesToPropagateFromStart * -spacingInNormal);\n        const startCoord = this._getCoordinateForViewplaneNormal(startPos, viewPlaneNormal);\n        return startCoord;\n    }\n    _getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal) {\n        const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n        const numSlicesToPropagateToEnd = numSlicesToPropagate - Math.round(numSlicesToPropagate / 2);\n        const endPos = vec3.create();\n        vec3.scaleAndAdd(endPos, worldPos, viewPlaneNormal, numSlicesToPropagateToEnd * spacingInNormal);\n        const endCoord = this._getCoordinateForViewplaneNormal(endPos, viewPlaneNormal);\n        return endCoord;\n    }\n    _getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal) {\n        const viewplaneNormalAbs = [\n            Math.abs(viewPlaneNormal[0]),\n            Math.abs(viewPlaneNormal[1]),\n            Math.abs(viewPlaneNormal[2]),\n        ];\n        const indexOfDirection = viewplaneNormalAbs.indexOf(Math.max(...viewplaneNormalAbs));\n        return indexOfDirection;\n    }\n    _getCoordinateForViewplaneNormal(pos, viewPlaneNormal) {\n        const indexOfDirection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n        return pos[indexOfDirection];\n    }\n}\nfunction defaultGetTextLines(data, _context = {}) {\n    const cachedVolumeStats = data.cachedStats.statistics;\n    const { area, mean, max, stdDev, areaUnit, modalityUnit } = cachedVolumeStats;\n    if (mean === undefined) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`Area: ${csUtils.roundNumber(area)} ${areaUnit}`);\n    textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    return textLines;\n}\nCircleROIStartEndThresholdTool.toolName = 'CircleROIStartEndThreshold';\nexport default CircleROIStartEndThresholdTool;\n","import { cache, getEnabledElement, utilities as csUtils, BaseVolumeViewport, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { SegmentationRepresentations } from '../../enums';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { segmentLocking, activeSegmentation, segmentIndex as segmentIndexController, } from '../../stateManagement/segmentation';\nimport floodFill from '../../utilities/segmentation/floodFill';\nimport { getCurrentLabelmapImageIdForViewport, getSegmentation, } from '../../stateManagement/segmentation/segmentationState';\nconst { transformWorldToIndex, isEqual } = csUtils;\nclass PaintFillTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal } = camera;\n            const activeSegmentationRepresentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeSegmentationRepresentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeSegmentationRepresentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const { representationData } = getSegmentation(segmentationId);\n            let dimensions;\n            let direction;\n            let index;\n            let voxelManager;\n            this.doneEditMemo();\n            if (viewport instanceof BaseVolumeViewport) {\n                const { volumeId } = representationData[SegmentationRepresentations.Labelmap];\n                const segmentation = cache.getVolume(volumeId);\n                ({ dimensions, direction } = segmentation);\n                voxelManager = segmentation.voxelManager;\n                index = transformWorldToIndex(segmentation.imageData, worldPos);\n            }\n            else {\n                const currentSegmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n                if (!currentSegmentationImageId) {\n                    throw new Error('No active segmentation imageId detected, create one before using scissors tool');\n                }\n                const { imageData } = viewport.getImageData();\n                dimensions = imageData.getDimensions();\n                direction = imageData.getDirection();\n                const image = cache.getImage(currentSegmentationImageId);\n                voxelManager = image.voxelManager;\n                index = transformWorldToIndex(imageData, worldPos);\n            }\n            const fixedDimension = this.getFixedDimension(viewPlaneNormal, direction);\n            if (fixedDimension === undefined) {\n                console.warn('Oblique paint fill not yet supported');\n                return;\n            }\n            const { floodFillGetter, getLabelValue, getScalarDataPositionFromPlane, inPlaneSeedPoint, fixedDimensionValue, } = this.generateHelpers(voxelManager, dimensions, index, fixedDimension);\n            if (index[0] < 0 ||\n                index[0] >= dimensions[0] ||\n                index[1] < 0 ||\n                index[1] >= dimensions[1] ||\n                index[2] < 0 ||\n                index[2] >= dimensions[2]) {\n                return;\n            }\n            const clickedLabelValue = getLabelValue(index[0], index[1], index[2]);\n            if (segmentsLocked.includes(clickedLabelValue)) {\n                return;\n            }\n            const floodFillResult = floodFill(floodFillGetter, inPlaneSeedPoint);\n            const { flooded } = floodFillResult;\n            flooded.forEach((index) => {\n                const scalarDataIndex = getScalarDataPositionFromPlane(index[0], index[1]);\n                voxelManager.setAtIndex(scalarDataIndex, segmentIndex);\n            });\n            const framesModified = this.getFramesModified(fixedDimension, fixedDimensionValue, floodFillResult);\n            triggerSegmentationDataModified(segmentationId, framesModified);\n            return true;\n        };\n        this.getFramesModified = (fixedDimension, fixedDimensionValue, floodFillResult) => {\n            const { flooded: boundaries } = floodFillResult;\n            if (fixedDimension === 2) {\n                return [fixedDimensionValue];\n            }\n            let minJ = Infinity;\n            let maxJ = -Infinity;\n            for (let b = 0; b < boundaries.length; b++) {\n                const j = boundaries[b][1];\n                if (j < minJ) {\n                    minJ = j;\n                }\n                if (j > maxJ) {\n                    maxJ = j;\n                }\n            }\n            const framesModified = [];\n            for (let frame = minJ; frame <= maxJ; frame++) {\n                framesModified.push(frame);\n            }\n            return framesModified;\n        };\n        this.generateHelpers = (voxelManager, dimensions, seedIndex3D, fixedDimension = 2) => {\n            let fixedDimensionValue;\n            let inPlaneSeedPoint;\n            switch (fixedDimension) {\n                case 0:\n                    fixedDimensionValue = seedIndex3D[0];\n                    inPlaneSeedPoint = [seedIndex3D[1], seedIndex3D[2]];\n                    break;\n                case 1:\n                    fixedDimensionValue = seedIndex3D[1];\n                    inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[2]];\n                    break;\n                case 2:\n                    fixedDimensionValue = seedIndex3D[2];\n                    inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[1]];\n                    break;\n                default:\n                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n            }\n            const getScalarDataPosition = (x, y, z) => {\n                return voxelManager.toIndex([x, y, z]);\n            };\n            const getLabelValue = (x, y, z) => {\n                return voxelManager.getAtIJK(x, y, z);\n            };\n            const floodFillGetter = this.generateFloodFillGetter(dimensions, fixedDimension, fixedDimensionValue, getLabelValue);\n            const getScalarDataPositionFromPlane = this.generateGetScalarDataPositionFromPlane(getScalarDataPosition, fixedDimension, fixedDimensionValue);\n            return {\n                getScalarDataPositionFromPlane,\n                getLabelValue,\n                floodFillGetter,\n                inPlaneSeedPoint,\n                fixedDimensionValue,\n            };\n        };\n        this.generateFloodFillGetter = (dimensions, fixedDimension, fixedDimensionValue, getLabelValue) => {\n            let floodFillGetter;\n            switch (fixedDimension) {\n                case 0:\n                    floodFillGetter = (y, z) => {\n                        if (y >= dimensions[1] || y < 0 || z >= dimensions[2] || z < 0) {\n                            return;\n                        }\n                        return getLabelValue(fixedDimensionValue, y, z);\n                    };\n                    break;\n                case 1:\n                    floodFillGetter = (x, z) => {\n                        if (x >= dimensions[0] || x < 0 || z >= dimensions[2] || z < 0) {\n                            return;\n                        }\n                        return getLabelValue(x, fixedDimensionValue, z);\n                    };\n                    break;\n                case 2:\n                    floodFillGetter = (x, y) => {\n                        if (x >= dimensions[0] || x < 0 || y >= dimensions[1] || y < 0) {\n                            return;\n                        }\n                        return getLabelValue(x, y, fixedDimensionValue);\n                    };\n                    break;\n                default:\n                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n            }\n            return floodFillGetter;\n        };\n        this.generateGetScalarDataPositionFromPlane = (getScalarDataPosition, fixedDimension, fixedDimensionValue) => {\n            let getScalarDataPositionFromPlane;\n            switch (fixedDimension) {\n                case 0:\n                    getScalarDataPositionFromPlane = (y, z) => {\n                        return getScalarDataPosition(fixedDimensionValue, y, z);\n                    };\n                    break;\n                case 1:\n                    getScalarDataPositionFromPlane = (x, z) => {\n                        return getScalarDataPosition(x, fixedDimensionValue, z);\n                    };\n                    break;\n                case 2:\n                    getScalarDataPositionFromPlane = (x, y) => {\n                        return getScalarDataPosition(x, y, fixedDimensionValue);\n                    };\n                    break;\n                default:\n                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n            }\n            return getScalarDataPositionFromPlane;\n        };\n    }\n    getFixedDimension(viewPlaneNormal, direction) {\n        const xDirection = direction.slice(0, 3);\n        const yDirection = direction.slice(3, 6);\n        const zDirection = direction.slice(6, 9);\n        const absoluteOfViewPlaneNormal = [\n            Math.abs(viewPlaneNormal[0]),\n            Math.abs(viewPlaneNormal[1]),\n            Math.abs(viewPlaneNormal[2]),\n        ];\n        const absoluteOfXDirection = [\n            Math.abs(xDirection[0]),\n            Math.abs(xDirection[1]),\n            Math.abs(xDirection[2]),\n        ];\n        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfXDirection)) {\n            return 0;\n        }\n        const absoluteOfYDirection = [\n            Math.abs(yDirection[0]),\n            Math.abs(yDirection[1]),\n            Math.abs(yDirection[2]),\n        ];\n        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfYDirection)) {\n            return 1;\n        }\n        const absoluteOfZDirection = [\n            Math.abs(zDirection[0]),\n            Math.abs(zDirection[1]),\n            Math.abs(zDirection[2]),\n        ];\n        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfZDirection)) {\n            return 2;\n        }\n    }\n}\nPaintFillTool.toolName = 'PaintFill';\nexport default PaintFillTool;\n","import vtkOrientationMarkerWidget from '@kitware/vtk.js/Interaction/Widgets/OrientationMarkerWidget';\nimport vtkAnnotatedCubeActor from '@kitware/vtk.js/Rendering/Core/AnnotatedCubeActor';\nimport vtkAxesActor from '@kitware/vtk.js/Rendering/Core/AxesActor';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport vtkXMLPolyDataReader from '@kitware/vtk.js/IO/XML/XMLPolyDataReader';\nimport vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport { BaseTool } from './base';\nimport { Enums, eventTarget, getEnabledElementByIds, getRenderingEngines, } from '@cornerstonejs/core';\nimport { filterViewportsWithToolEnabled } from '../utilities/viewportFilters';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport { Events } from '../enums';\nvar OverlayMarkerType;\n(function (OverlayMarkerType) {\n    OverlayMarkerType[OverlayMarkerType[\"ANNOTATED_CUBE\"] = 1] = \"ANNOTATED_CUBE\";\n    OverlayMarkerType[OverlayMarkerType[\"AXES\"] = 2] = \"AXES\";\n    OverlayMarkerType[OverlayMarkerType[\"CUSTOM\"] = 3] = \"CUSTOM\";\n})(OverlayMarkerType || (OverlayMarkerType = {}));\nclass OrientationMarkerTool extends BaseTool {\n    static { this.CUBE = 1; }\n    static { this.AXIS = 2; }\n    static { this.VTPFILE = 3; }\n    static { this.OVERLAY_MARKER_TYPES = OverlayMarkerType; }\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            orientationWidget: {\n                enabled: true,\n                viewportCorner: vtkOrientationMarkerWidget.Corners.BOTTOM_RIGHT,\n                viewportSize: 0.15,\n                minPixelSize: 100,\n                maxPixelSize: 300,\n            },\n            overlayMarkerType: OrientationMarkerTool.OVERLAY_MARKER_TYPES.ANNOTATED_CUBE,\n            overlayConfiguration: {\n                [OrientationMarkerTool.OVERLAY_MARKER_TYPES.ANNOTATED_CUBE]: {\n                    faceProperties: {\n                        xPlus: { text: 'L', faceColor: '#ffff00', faceRotation: 90 },\n                        xMinus: { text: 'R', faceColor: '#ffff00', faceRotation: 270 },\n                        yPlus: {\n                            text: 'P',\n                            faceColor: '#00ffff',\n                            fontColor: 'white',\n                            faceRotation: 180,\n                        },\n                        yMinus: { text: 'A', faceColor: '#00ffff', fontColor: 'white' },\n                        zPlus: { text: 'S' },\n                        zMinus: { text: 'I' },\n                    },\n                    defaultStyle: {\n                        fontStyle: 'bold',\n                        fontFamily: 'Arial',\n                        fontColor: 'black',\n                        fontSizeScale: (res) => res / 2,\n                        faceColor: '#0000ff',\n                        edgeThickness: 0.1,\n                        edgeColor: 'black',\n                        resolution: 400,\n                    },\n                },\n                [OrientationMarkerTool.OVERLAY_MARKER_TYPES.AXES]: {},\n                [OrientationMarkerTool.OVERLAY_MARKER_TYPES.CUSTOM]: {\n                    polyDataURL: 'https://raw.githubusercontent.com/Slicer/Slicer/80ad0a04dacf134754459557bf2638c63f3d1d1b/Base/Logic/Resources/OrientationMarkers/Human.vtp',\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._resizeObservers = new Map();\n        this.onSetToolEnabled = () => {\n            this.initViewports();\n            this._subscribeToViewportEvents();\n        };\n        this.onSetToolActive = () => {\n            this.initViewports();\n            this._subscribeToViewportEvents();\n        };\n        this.onSetToolDisabled = () => {\n            this.cleanUpData();\n            this._unsubscribeToViewportNewVolumeSet();\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.resize = (viewportId) => {\n            const orientationMarker = this.orientationMarkers[viewportId];\n            if (!orientationMarker) {\n                return;\n            }\n            const { orientationWidget } = orientationMarker;\n            orientationWidget.updateViewport();\n        };\n        this.orientationMarkers = {};\n        this.updatingOrientationMarker = {};\n    }\n    _unsubscribeToViewportNewVolumeSet() {\n        const unsubscribe = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n                const { element } = viewport;\n                element.removeEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this.initViewports.bind(this));\n                const resizeObserver = this._resizeObservers.get(viewportId);\n                resizeObserver.unobserve(element);\n            });\n        };\n        eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, (evt) => {\n            if (evt.detail.toolGroupId !== this.toolGroupId) {\n                return;\n            }\n            unsubscribe();\n            this.initViewports();\n        });\n    }\n    _subscribeToViewportEvents() {\n        const subscribeToElementResize = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n                const { element } = viewport;\n                this.initViewports();\n                element.addEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this.initViewports.bind(this));\n                const resizeObserver = new ResizeObserver(() => {\n                    setTimeout(() => {\n                        const element = getEnabledElementByIds(viewportId, renderingEngineId);\n                        if (!element) {\n                            return;\n                        }\n                        const { viewport } = element;\n                        this.resize(viewportId);\n                        viewport.render();\n                    }, 100);\n                });\n                resizeObserver.observe(element);\n                this._resizeObservers.set(viewportId, resizeObserver);\n            });\n        };\n        subscribeToElementResize();\n        eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, (evt) => {\n            if (evt.detail.toolGroupId !== this.toolGroupId) {\n                return;\n            }\n            subscribeToElementResize();\n            this.initViewports();\n        });\n    }\n    cleanUpData() {\n        const renderingEngines = getRenderingEngines();\n        const renderingEngine = renderingEngines[0];\n        const viewports = renderingEngine.getViewports();\n        viewports.forEach((viewport) => {\n            const orientationMarker = this.orientationMarkers[viewport.id];\n            if (!orientationMarker) {\n                return;\n            }\n            const { actor, orientationWidget } = orientationMarker;\n            orientationWidget?.setEnabled(false);\n            orientationWidget?.delete();\n            actor?.delete();\n            const renderWindow = viewport\n                .getRenderingEngine()\n                .getOffscreenMultiRenderWindow(viewport.id)\n                .getRenderWindow();\n            renderWindow.render();\n            viewport.getRenderingEngine().render();\n            delete this.orientationMarkers[viewport.id];\n        });\n    }\n    initViewports() {\n        const renderingEngines = getRenderingEngines();\n        const renderingEngine = renderingEngines[0];\n        if (!renderingEngine) {\n            return;\n        }\n        let viewports = renderingEngine.getViewports();\n        viewports = filterViewportsWithToolEnabled(viewports, this.getToolName());\n        viewports.forEach((viewport) => {\n            const widget = viewport.getWidget(this.getToolName());\n            if (!widget || widget.isDeleted()) {\n                this.addAxisActorInViewport(viewport);\n            }\n        });\n    }\n    async addAxisActorInViewport(viewport) {\n        const viewportId = viewport.id;\n        if (!this.updatingOrientationMarker[viewportId]) {\n            this.updatingOrientationMarker[viewportId] = true;\n            const type = this.configuration.overlayMarkerType;\n            const overlayConfiguration = this.configuration.overlayConfiguration[type];\n            if (this.orientationMarkers[viewportId]) {\n                const { actor, orientationWidget } = this.orientationMarkers[viewportId];\n                viewport.getRenderer().removeActor(actor);\n                orientationWidget.setEnabled(false);\n            }\n            let actor;\n            if (type === 1) {\n                actor = this.createAnnotationCube(overlayConfiguration);\n            }\n            else if (type === 2) {\n                actor = vtkAxesActor.newInstance();\n            }\n            else if (type === 3) {\n                actor = await this.createCustomActor();\n            }\n            const renderer = viewport.getRenderer();\n            const renderWindow = viewport\n                .getRenderingEngine()\n                .getOffscreenMultiRenderWindow(viewportId)\n                .getRenderWindow();\n            const { enabled, viewportCorner, viewportSize, minPixelSize, maxPixelSize, } = this.configuration.orientationWidget;\n            const orientationWidget = vtkOrientationMarkerWidget.newInstance({\n                actor,\n                interactor: renderWindow.getInteractor(),\n                parentRenderer: renderer,\n            });\n            orientationWidget.setEnabled(enabled);\n            orientationWidget.setViewportCorner(viewportCorner);\n            orientationWidget.setViewportSize(viewportSize);\n            orientationWidget.setMinPixelSize(minPixelSize);\n            orientationWidget.setMaxPixelSize(maxPixelSize);\n            orientationWidget.updateMarkerOrientation();\n            this.orientationMarkers[viewportId] = {\n                orientationWidget,\n                actor,\n            };\n            viewport.addWidget(this.getToolName(), orientationWidget);\n            renderWindow.render();\n            viewport.getRenderingEngine().render();\n            this.updatingOrientationMarker[viewportId] = false;\n        }\n    }\n    async createCustomActor() {\n        const url = this.configuration.overlayConfiguration[OverlayMarkerType.CUSTOM]\n            .polyDataURL;\n        const response = await fetch(url);\n        const arrayBuffer = await response.arrayBuffer();\n        const vtpReader = vtkXMLPolyDataReader.newInstance();\n        vtpReader.parseAsArrayBuffer(arrayBuffer);\n        vtpReader.update();\n        const polyData = vtkPolyData.newInstance();\n        polyData.shallowCopy(vtpReader.getOutputData());\n        polyData.getPointData().setActiveScalars('Color');\n        const mapper = vtkMapper.newInstance();\n        mapper.setInputData(polyData);\n        mapper.setColorModeToDirectScalars();\n        const actor = vtkActor.newInstance();\n        actor.setMapper(mapper);\n        actor.rotateZ(180);\n        return actor;\n    }\n    createAnnotationCube(overlayConfiguration) {\n        const actor = vtkAnnotatedCubeActor.newInstance();\n        actor.setDefaultStyle({ ...overlayConfiguration.defaultStyle });\n        actor.setXPlusFaceProperty({\n            ...overlayConfiguration.faceProperties.xPlus,\n        });\n        actor.setXMinusFaceProperty({\n            ...overlayConfiguration.faceProperties.xMinus,\n        });\n        actor.setYPlusFaceProperty({\n            ...overlayConfiguration.faceProperties.yPlus,\n        });\n        actor.setYMinusFaceProperty({\n            ...overlayConfiguration.faceProperties.yMinus,\n        });\n        actor.setZPlusFaceProperty({\n            ...overlayConfiguration.faceProperties.zPlus,\n        });\n        actor.setZMinusFaceProperty({\n            ...overlayConfiguration.faceProperties.zMinus,\n        });\n        return actor;\n    }\n    async createAnnotatedCubeActor() {\n        const axes = vtkAnnotatedCubeActor.newInstance();\n        const { faceProperties, defaultStyle } = this.configuration.annotatedCube;\n        axes.setDefaultStyle(defaultStyle);\n        Object.keys(faceProperties).forEach((key) => {\n            const methodName = `set${key.charAt(0).toUpperCase() + key.slice(1)}FaceProperty`;\n            axes[methodName](faceProperties[key]);\n        });\n        return axes;\n    }\n}\nOrientationMarkerTool.toolName = 'OrientationMarker';\nexport default OrientationMarkerTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { triggerSegmentationModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getActiveSegmentation } from '../../stateManagement/segmentation/activeSegmentation';\nimport { setActiveSegmentIndex } from '../../stateManagement/segmentation/segmentIndex';\nimport { getHoveredContourSegmentationAnnotation, getSegmentIndexAtLabelmapBorder, getSegmentIndexAtWorldPoint, } from '../../utilities/segmentation';\nimport { state } from '../../store/state';\nimport { ToolModes } from '../../enums';\nclass SegmentSelectTool extends BaseTool {\n    static { this.SelectMode = {\n        Inside: 'Inside',\n        Border: 'Border',\n    }; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            hoverTimeout: 100,\n            mode: SegmentSelectTool.SelectMode.Border,\n            searchRadius: 6,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseMoveCallback = (evt) => {\n            if (this.mode !== ToolModes.Active) {\n                return;\n            }\n            if (this.hoverTimer) {\n                clearTimeout(this.hoverTimer);\n            }\n            this.hoverTimer = setTimeout(() => {\n                this._setActiveSegment(evt);\n                this.hoverTimer = null;\n            }, this.configuration.hoverTimeout);\n            return true;\n        };\n        this.onSetToolEnabled = () => {\n            this.onSetToolActive();\n        };\n        this.onSetToolActive = () => {\n            this.hoverTimer = null;\n        };\n        this.onSetToolDisabled = () => {\n            this.hoverTimer = null;\n        };\n        this.hoverTimer = null;\n    }\n    _setActiveSegment(evt = {}) {\n        if (state.isInteractingWithTool) {\n            return;\n        }\n        const { element, currentPoints } = evt.detail;\n        const worldPoint = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const activeSegmentation = getActiveSegmentation(viewport.id);\n        if (!activeSegmentation) {\n            return;\n        }\n        this._setActiveSegmentForType(activeSegmentation, worldPoint, viewport);\n    }\n    _setActiveSegmentForType(activeSegmentation, worldPoint, viewport) {\n        const imageDataInfo = viewport.getImageData();\n        if (!imageDataInfo) {\n            return;\n        }\n        const { segmentationId, representationData } = activeSegmentation;\n        let hoveredSegmentIndex;\n        if (this.configuration.mode === SegmentSelectTool.SelectMode.Inside) {\n            hoveredSegmentIndex = getSegmentIndexAtWorldPoint(segmentationId, worldPoint, {\n                viewport,\n            });\n        }\n        else {\n            if (representationData.Labelmap) {\n                hoveredSegmentIndex = getSegmentIndexAtLabelmapBorder(segmentationId, worldPoint, {\n                    viewport,\n                    searchRadius: this.configuration.searchRadius,\n                });\n            }\n            else if (representationData.Contour) {\n                hoveredSegmentIndex =\n                    getHoveredContourSegmentationAnnotation(segmentationId);\n            }\n            else if (representationData.Surface) {\n            }\n        }\n        if (!hoveredSegmentIndex || hoveredSegmentIndex === 0) {\n            return;\n        }\n        setActiveSegmentIndex(segmentationId, hoveredSegmentIndex);\n        const renderingEngine = viewport.getRenderingEngine();\n        const viewportIds = renderingEngine.getViewports().map((v) => v.id);\n        triggerSegmentationModified(segmentationId);\n        triggerAnnotationRenderForViewportIds(viewportIds);\n    }\n}\nSegmentSelectTool.toolName = 'SegmentSelectTool';\nexport default SegmentSelectTool;\n","import { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, utilities, } from '@cornerstonejs/core';\nimport { addAnnotation, getAllAnnotations, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { drawLine as drawLineSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport BidirectionalTool from '../annotation/BidirectionalTool';\nimport { getSegmentIndexColor } from '../../stateManagement/segmentation/config/segmentationColor';\nclass SegmentBidirectionalTool extends BidirectionalTool {\n    static { this.toolName = 'SegmentBidirectional'; }\n    constructor(toolProps = {}) {\n        super(toolProps);\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = true;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            const viewportId = viewport.id;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { segmentIndex, segmentationId } = annotation.metadata;\n                const { lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const colorArray = getSegmentIndexColor(viewportId, segmentationId, segmentIndex);\n                const color = `rgb(${colorArray.slice(0, 3).join(',')})`;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        width: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId1 = `${annotationUID}-line-1`;\n                const dataId2 = `${annotationUID}-line-2`;\n                const lineUID = '0';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId1);\n                const secondLineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, secondLineUID, canvasCoordinates[2], canvasCoordinates[3], {\n                    color,\n                    lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId2);\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                options.color = color;\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const worldPos = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        this.isDrawing = true;\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, viewUp } = camera;\n        const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n        const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n        const annotation = {\n            highlighted: true,\n            invalidated: true,\n            metadata: {\n                toolName: this.getToolName(),\n                viewPlaneNormal: [...viewPlaneNormal],\n                viewUp: [...viewUp],\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...viewport.getViewReference({ points: [worldPos] }),\n            },\n            data: {\n                handles: {\n                    points: [\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                    ],\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n        };\n        addAnnotation(annotation, element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex: 1,\n            movingTextBox: false,\n            newAnnotation: true,\n            hasMoved: false,\n        };\n        this._activateDraw(element);\n        hideElementCursor(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        return annotation;\n    }\n    static { this.hydrate = (viewportId, axis, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const existingAnnotations = getAllAnnotations();\n        const toolAnnotations = existingAnnotations.filter((annotation) => annotation.metadata.toolName === 'SegmentBidirectional');\n        const existingAnnotation = toolAnnotations.find((annotation) => {\n            const { metadata } = annotation;\n            if (metadata.segmentIndex === options?.segmentIndex &&\n                metadata.segmentationId === options?.segmentationId) {\n                return true;\n            }\n            return false;\n        });\n        if (existingAnnotation) {\n            removeAnnotation(existingAnnotation.annotationUID);\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, } = this.hydrateBase(SegmentBidirectionalTool, enabledElement, axis[0], options);\n        const [majorAxis, minorAxis] = axis;\n        const [major0, major1] = majorAxis;\n        const [minor0, minor1] = minorAxis;\n        const points = [major0, major1, minor0, minor1];\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                },\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                segmentIndex: options?.segmentIndex,\n                segmentationId: options?.segmentationId,\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n        return annotation;\n    }; }\n}\nexport default SegmentBidirectionalTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { config as segmentationConfig } from '../../stateManagement/segmentation';\nimport { BaseTool } from '../base';\nimport { triggerSegmentationModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getActiveSegmentation } from '../../stateManagement/segmentation/activeSegmentation';\nimport { getSegmentIndexAtWorldPoint } from '../../utilities/segmentation';\nimport { state } from '../../store/state';\nimport { drawTextBox as drawTextBoxSvg } from '../../drawingSvg';\nclass SegmentLabelTool extends BaseTool {\n    constructor(toolProps = {\n        data: {\n            handles: {\n                textBox: {\n                    worldPosition: [0, 0, 0],\n                    worldBoundingBox: {\n                        topLeft: [0, 0, 0],\n                        topRight: [0, 0, 0],\n                        bottomLeft: [0, 0, 0],\n                        bottomRight: [0, 0, 0],\n                    },\n                },\n            },\n        },\n    }, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            hoverTimeout: 100,\n            searchRadius: 6,\n            color: null,\n            background: null,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseMoveCallback = (evt) => {\n            if (this.hoverTimer) {\n                clearTimeout(this.hoverTimer);\n            }\n            this.hoverTimer = setTimeout(() => {\n                this._setHoveredSegment(evt);\n                this.hoverTimer = null;\n            }, this.configuration.hoverTimeout);\n            return true;\n        };\n        this.onSetToolEnabled = () => {\n            this.onSetToolActive();\n        };\n        this.onSetToolActive = () => {\n            this.hoverTimer = null;\n        };\n        this.onSetToolDisabled = () => {\n            this.hoverTimer = null;\n        };\n        this.data = toolProps.data ?? {\n            handles: {\n                textBox: {\n                    worldPosition: [0, 0, 0],\n                    worldBoundingBox: {\n                        topLeft: [0, 0, 0],\n                        topRight: [0, 0, 0],\n                        bottomLeft: [0, 0, 0],\n                        bottomRight: [0, 0, 0],\n                    },\n                },\n            },\n        };\n        this.hoverTimer = null;\n    }\n    _setHoveredSegment(evt = {}) {\n        if (state.isInteractingWithTool) {\n            return;\n        }\n        const { element, currentPoints } = evt.detail;\n        const worldPoint = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const activeSegmentation = getActiveSegmentation(viewport.id);\n        if (!activeSegmentation) {\n            return;\n        }\n        this._setHoveredSegmentForType(activeSegmentation, worldPoint, viewport);\n    }\n    _setHoveredSegmentForType(activeSegmentation, worldPoint, viewport) {\n        const imageDataInfo = viewport.getImageData();\n        if (!imageDataInfo) {\n            return;\n        }\n        const { segmentationId } = activeSegmentation;\n        const hoveredSegmentIndex = getSegmentIndexAtWorldPoint(segmentationId, worldPoint, {\n            viewport,\n        });\n        const segment = activeSegmentation.segments[hoveredSegmentIndex];\n        const color = this.configuration.color ??\n            segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, hoveredSegmentIndex);\n        const label = segment?.label;\n        const canvasCoordinates = viewport.worldToCanvas(worldPoint);\n        this._editData = {\n            hoveredSegmentIndex,\n            hoveredSegmentLabel: label,\n            canvasCoordinates,\n            color,\n        };\n        if (!hoveredSegmentIndex || hoveredSegmentIndex === 0) {\n            return;\n        }\n        const renderingEngine = viewport.getRenderingEngine();\n        const viewportIds = renderingEngine.getViewports().map((v) => v.id);\n        triggerSegmentationModified(segmentationId);\n        triggerAnnotationRenderForViewportIds(viewportIds);\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this._editData) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const { hoveredSegmentIndex, hoveredSegmentLabel, canvasCoordinates, color, } = this._editData;\n        if (!hoveredSegmentIndex) {\n            return;\n        }\n        const offset = -15;\n        const textBoxPosition = [\n            canvasCoordinates[0] + offset,\n            canvasCoordinates[1] + offset,\n        ];\n        const boundingBox = drawTextBoxSvg(svgDrawingHelper, 'segmentSelectLabelAnnotation', 'segmentSelectLabelTextBox', [hoveredSegmentLabel ?? '(unnamed segment)'], textBoxPosition, {\n            color: `rgba(${color[0]}, ${color[1]}, ${color[2]}, ${color[3]})`,\n            background: this.configuration.background ?? undefined,\n        });\n        const left = canvasCoordinates[0];\n        const top = canvasCoordinates[1];\n        const { width, height } = boundingBox;\n        this.data.handles.textBox.worldBoundingBox = {\n            topLeft: viewport.canvasToWorld([left, top]),\n            topRight: viewport.canvasToWorld([left + width, top]),\n            bottomLeft: viewport.canvasToWorld([left, top + height]),\n            bottomRight: viewport.canvasToWorld([left + width, top + height]),\n        };\n    }\n}\nSegmentLabelTool.toolName = 'SegmentLabelTool';\nexport default SegmentLabelTool;\n","import { Events, SegmentationRepresentations } from '../../enums';\nimport { eventTarget, utilities, getRenderingEngine, } from '@cornerstonejs/core';\nimport PlanarFreehandContourSegmentationTool from '../annotation/PlanarFreehandContourSegmentationTool';\nimport BrushTool from './BrushTool';\nimport * as segmentation from '../../stateManagement/segmentation';\nimport { getSegmentationRepresentationsBySegmentationId } from '../../stateManagement/segmentation/getSegmentationRepresentation';\nclass LabelMapEditWithContourTool extends PlanarFreehandContourSegmentationTool {\n    static { this.toolName = 'LabelMapEditWithContour'; }\n    static { this.annotationsToViewportMap = new Map(); }\n    static { this.viewportIdsChecked = []; }\n    constructor(toolProps = {}) {\n        const initialProps = utilities.deepMerge({\n            configuration: {\n                calculateStats: false,\n                allowOpenContours: false,\n            },\n        }, toolProps);\n        super(initialProps);\n        this.onViewportAddedToToolGroupBinded =\n            this.onViewportAddedToToolGroup.bind(this);\n        this.onSegmentationModifiedBinded = this.onSegmentationModified.bind(this);\n    }\n    initializeListeners() {\n        LabelMapEditWithContourTool.annotationsToViewportMap.clear();\n        LabelMapEditWithContourTool.viewportIdsChecked = [];\n        eventTarget.addEventListener(Events.ANNOTATION_MODIFIED, this.annotationModified);\n        eventTarget.addEventListener(Events.ANNOTATION_COMPLETED, this.annotationCompleted);\n        eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this.onViewportAddedToToolGroupBinded);\n        eventTarget.addEventListener(Events.SEGMENTATION_MODIFIED, this.onSegmentationModifiedBinded);\n        eventTarget.addEventListener(Events.SEGMENTATION_REPRESENTATION_MODIFIED, this.onSegmentationModifiedBinded);\n    }\n    cleanUpListeners() {\n        LabelMapEditWithContourTool.annotationsToViewportMap.clear();\n        LabelMapEditWithContourTool.viewportIdsChecked = [];\n        eventTarget.removeEventListener(Events.ANNOTATION_MODIFIED, this.annotationModified);\n        eventTarget.removeEventListener(Events.ANNOTATION_COMPLETED, this.annotationCompleted);\n        eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this.onViewportAddedToToolGroup.bind(this));\n        eventTarget.removeEventListener(Events.SEGMENTATION_MODIFIED, this.onSegmentationModified.bind(this));\n        eventTarget.removeEventListener(Events.SEGMENTATION_REPRESENTATION_MODIFIED, this.onSegmentationModified.bind(this));\n    }\n    async checkContourSegmentation(viewportId) {\n        if (LabelMapEditWithContourTool.viewportIdsChecked.includes(viewportId)) {\n            return;\n        }\n        const activeSeg = segmentation.getActiveSegmentation(viewportId);\n        if (!activeSeg) {\n            console.log('No active segmentation detected');\n            return false;\n        }\n        const segmentationId = activeSeg.segmentationId;\n        if (!activeSeg.representationData.Contour) {\n            LabelMapEditWithContourTool.viewportIdsChecked.push(viewportId);\n            await segmentation.addContourRepresentationToViewport(viewportId, [\n                {\n                    segmentationId,\n                    type: SegmentationRepresentations.Contour,\n                },\n            ]);\n            segmentation.addRepresentationData({\n                segmentationId,\n                type: SegmentationRepresentations.Contour,\n                data: {},\n            });\n        }\n        else {\n            LabelMapEditWithContourTool.viewportIdsChecked.push(viewportId);\n        }\n        return true;\n    }\n    onViewportAddedToToolGroup(evt) {\n        const { toolGroupId, viewportId } = evt.detail;\n        if (toolGroupId !== this.toolGroupId) {\n            return;\n        }\n        this.checkContourSegmentation(viewportId);\n    }\n    onSegmentationModified(evt) {\n        const { segmentationId } = evt.detail || {};\n        if (!segmentationId) {\n            return;\n        }\n        const representations = getSegmentationRepresentationsBySegmentationId(segmentationId);\n        if (!representations) {\n            return;\n        }\n        representations.forEach(async ({ viewportId }) => await this.checkContourSegmentation(viewportId));\n    }\n    onSetToolEnabled() {\n        this.initializeListeners();\n    }\n    onSetToolActive() {\n        this.initializeListeners();\n    }\n    onSetToolDisabled() {\n        this.cleanUpListeners();\n    }\n    annotationModified(evt) {\n        const { annotation, renderingEngineId, viewportId } = evt.detail;\n        const viewport = getRenderingEngine(renderingEngineId)?.getViewport(viewportId);\n        if (!viewport) {\n            return;\n        }\n        LabelMapEditWithContourTool.annotationsToViewportMap.set(annotation.annotationUID, viewport);\n    }\n    annotationCompleted(evt) {\n        const { annotation } = evt.detail;\n        const { polyline } = annotation.data?.contour || {};\n        if (annotation?.metadata?.toolName !== LabelMapEditWithContourTool.toolName) {\n            return;\n        }\n        if (!polyline) {\n            return;\n        }\n        if (LabelMapEditWithContourTool.annotationsToViewportMap.has(annotation.annotationUID)) {\n            const viewport = LabelMapEditWithContourTool.annotationsToViewportMap.get(annotation.annotationUID);\n            if (polyline.length > 3) {\n                BrushTool.viewportContoursToLabelmap(viewport);\n            }\n        }\n    }\n}\nexport default LabelMapEditWithContourTool;\n","import { vec3, vec2 } from 'gl-matrix';\nimport { getEnabledElement, triggerEvent, eventTarget, utilities as csUtils, cache, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement';\nimport { drawHandles as drawHandlesSvg, drawRedactionRect as drawRedactionRectSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as rectangle from '../../utilities/math/rectangle';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nclass VideoRedactionTool extends AnnotationTool {\n    static { this.toolName = 'VideoRedaction'; }\n    constructor(toolConfiguration = {}) {\n        super(toolConfiguration, {\n            supportedInteractionTypes: ['Mouse', 'Touch'],\n            configuration: { shadow: true, preventHandleOutsideImage: false },\n        });\n        this.addNewAnnotation = (evt) => {\n            const eventData = evt.detail;\n            const { currentPoints, element } = eventData;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const annotation = (this.constructor).createAnnotationForViewport(viewport, {\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                    },\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            this.editData = {\n                annotation,\n                viewportUIDsToRender,\n                handleIndex: 3,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n            return annotation;\n        };\n        this.getHandleNearImagePoint = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            for (let i = 0; i < points.length; i++) {\n                const point = points[i];\n                const toolDataCanvasCoordinate = viewport.worldToCanvas(point);\n                const near = vec2.distance(canvasCoords, toolDataCanvasCoordinate) < proximity;\n                if (near === true) {\n                    data.handles.activeHandleIndex = i;\n                    return point;\n                }\n            }\n            data.handles.activeHandleIndex = null;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasPoint1 = viewport.worldToCanvas(points[0]);\n            const canvasPoint2 = viewport.worldToCanvas(points[3]);\n            const rect = this._getRectangleImageCoordinates([\n                canvasPoint1,\n                canvasPoint2,\n            ]);\n            const point = [canvasCoords[0], canvasCoords[1]];\n            const { left, top, width, height } = rect;\n            const distanceToPoint = rectangle.distanceToPoint([left, top, width, height], point);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType = 'mouse') => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { data } = annotation;\n            data.active = true;\n            const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            this.editData = {\n                annotation,\n                viewportUIDsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle, interactionType = 'mouse') => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { data } = annotation;\n            data.active = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                handleIndex = data.handles.points.findIndex((p) => p === handle);\n            }\n            const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            this.editData = {\n                annotation,\n                viewportUIDsToRender,\n                handleIndex,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { annotation, viewportUIDsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            data.active = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { annotation, viewportUIDsToRender, handleIndex, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (handleIndex === undefined) {\n                const { deltaPoints } = eventData;\n                const worldPosDelta = deltaPoints.world;\n                const { points } = data.handles;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                data.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventData;\n                const enabledElement = getEnabledElement(element);\n                const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n                const worldPos = currentPoints.world;\n                const { points } = data.handles;\n                points[handleIndex] = [...worldPos];\n                let bottomLeftCanvas;\n                let bottomRightCanvas;\n                let topLeftCanvas;\n                let topRightCanvas;\n                let bottomLeftWorld;\n                let bottomRightWorld;\n                let topLeftWorld;\n                let topRightWorld;\n                switch (handleIndex) {\n                    case 0:\n                    case 3:\n                        bottomLeftCanvas = worldToCanvas(points[0]);\n                        topRightCanvas = worldToCanvas(points[3]);\n                        bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n                        topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n                        bottomRightWorld = canvasToWorld(bottomRightCanvas);\n                        topLeftWorld = canvasToWorld(topLeftCanvas);\n                        points[1] = bottomRightWorld;\n                        points[2] = topLeftWorld;\n                        break;\n                    case 1:\n                    case 2:\n                        bottomRightCanvas = worldToCanvas(points[1]);\n                        topLeftCanvas = worldToCanvas(points[2]);\n                        bottomLeftCanvas = [\n                            topLeftCanvas[0],\n                            bottomRightCanvas[1],\n                        ];\n                        topRightCanvas = [\n                            bottomRightCanvas[0],\n                            topLeftCanvas[1],\n                        ];\n                        bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n                        topRightWorld = canvasToWorld(topRightCanvas);\n                        points[0] = bottomLeftWorld;\n                        points[3] = topRightWorld;\n                        break;\n                }\n                data.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID } = annotation;\n                const data = annotation.data;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return;\n                }\n                let activeHandleCanvasCoords;\n                if (!this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const rectangleUID = '0';\n                drawRedactionRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                    color: 'black',\n                    lineDash,\n                    lineWidth,\n                });\n            }\n        };\n        this._getRectangleImageCoordinates = (points) => {\n            const [point0, point1] = points;\n            return {\n                left: Math.min(point0[0], point1[0]),\n                top: Math.min(point0[1], point1[1]),\n                width: Math.abs(point0[0] - point1[0]),\n                height: Math.abs(point0[1] - point1[1]),\n            };\n        };\n        this._calculateCachedStats = (annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement) => {\n            const { data } = annotation;\n            const { viewportUID, renderingEngineUID, sceneUID } = enabledElement;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[3];\n            const { cachedStats } = data;\n            const targetUIDs = Object.keys(cachedStats);\n            for (let i = 0; i < targetUIDs.length; i++) {\n                const targetUID = targetUIDs[i];\n                const { imageVolume } = this._getImageVolumeFromTargetUID(targetUID, renderingEngine);\n                const { dimensions, scalarData, vtkImageData: imageData, metadata, } = imageVolume;\n                const worldPos1Index = vec3.fromValues(0, 0, 0);\n                const worldPos2Index = vec3.fromValues(0, 0, 0);\n                imageData.worldToIndexVec3(worldPos1, worldPos1Index);\n                worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n                worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n                worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n                imageData.worldToIndexVec3(worldPos2, worldPos2Index);\n                worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n                worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n                worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n                if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n                    this.isHandleOutsideImage = false;\n                    const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n                    const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n                    const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n                    const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n                    const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n                    const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n                    const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                    const area = worldWidth * worldHeight;\n                    let count = 0;\n                    let mean = 0;\n                    let stdDev = 0;\n                    const yMultiple = dimensions[0];\n                    const zMultiple = dimensions[0] * dimensions[1];\n                    for (let k = kMin; k <= kMax; k++) {\n                        for (let j = jMin; j <= jMax; j++) {\n                            for (let i = iMin; i <= iMax; i++) {\n                                const value = scalarData[k * zMultiple + j * yMultiple + i];\n                                count++;\n                                mean += value;\n                            }\n                        }\n                    }\n                    mean /= count;\n                    for (let k = kMin; k <= kMax; k++) {\n                        for (let j = jMin; j <= jMax; j++) {\n                            for (let i = iMin; i <= iMax; i++) {\n                                const value = scalarData[k * zMultiple + j * yMultiple + i];\n                                const valueMinusMean = value - mean;\n                                stdDev += valueMinusMean * valueMinusMean;\n                            }\n                        }\n                    }\n                    stdDev /= count;\n                    stdDev = Math.sqrt(stdDev);\n                    cachedStats[targetUID] = {\n                        Modality: metadata.Modality,\n                        area,\n                        mean,\n                        stdDev,\n                    };\n                }\n                else {\n                    this.isHandleOutsideImage = true;\n                    cachedStats[targetUID] = {\n                        Modality: metadata.Modality,\n                    };\n                }\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                const eventType = Events.ANNOTATION_MODIFIED;\n                const eventDetail = {\n                    annotation,\n                    viewportUID,\n                    renderingEngineUID,\n                    sceneUID: sceneUID,\n                    changeType: ChangeTypes.StatsUpdated,\n                };\n                triggerEvent(eventTarget, eventType, eventDetail);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._getTargetVolumeUID = (scene) => {\n            if (this.configuration.volumeUID) {\n                return this.configuration.volumeUID;\n            }\n            const volumeActors = scene.getVolumeActors();\n            if (!volumeActors && !volumeActors.length) {\n                return;\n            }\n            return volumeActors[0].uid;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    cancel(element) {\n        if (!this.isDrawing) {\n            return;\n        }\n        this.isDrawing = false;\n        this._deactivateDraw(element);\n        this._deactivateModify(element);\n        resetElementCursor(element);\n        const { annotation, viewportUIDsToRender } = this.editData;\n        const { data } = annotation;\n        data.active = false;\n        data.handles.activeHandleIndex = null;\n        triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n        this.editData = null;\n        return annotation.annotationUID;\n    }\n    _getImageVolumeFromTargetUID(targetUID, renderingEngine) {\n        let imageVolume, viewport;\n        if (targetUID.startsWith('stackTarget')) {\n            const coloneIndex = targetUID.indexOf(':');\n            const viewportUID = targetUID.substring(coloneIndex + 1);\n            const viewport = renderingEngine.getViewport(viewportUID);\n            imageVolume = viewport.getImageData();\n        }\n        else {\n            imageVolume = cache.getVolume(targetUID);\n        }\n        return { imageVolume, viewport };\n    }\n    _getTargetStackUID(viewport) {\n        return `stackTarget:${viewport.uid}`;\n    }\n}\nexport default VideoRedactionTool;\n","import { m as macro } from '../../macros2.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\n\nconst Dir = {\n  Forward: 1,\n  Backward: -1\n};\nconst visited = new Set();\nfunction vtkContourLoopExtraction(publicAPI, model) {\n  publicAPI.requestData = (inData, outData) => {\n    const [input] = inData;\n    if (!outData[0]) {\n      outData[0] = vtkPolyData.newInstance();\n    }\n    const [output] = outData;\n    publicAPI.extractContours(input, output);\n    output.modified();\n  };\n  publicAPI.traverseLoop = (pd, dir, startLineId, startPtId, loopPoints) => {\n    let lineId = startLineId;\n    let lastPtId = startPtId;\n    let terminated = false;\n    let numInserted = 0;\n    while (!terminated) {\n      const {\n        cellPointIds\n      } = pd.getCellPoints(lineId);\n      if (!cellPointIds) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n      lastPtId = cellPointIds[0] !== lastPtId ? cellPointIds[0] : cellPointIds[1];\n      numInserted++;\n\n      // parametric point value\n      const t = dir * numInserted;\n      loopPoints.push({\n        t,\n        ptId: lastPtId\n      });\n      const lineCell = pd.getPointCells(lastPtId);\n      if (lineCell.length !== 2 || lastPtId === startPtId) {\n        // looped\n        return lastPtId;\n      }\n      if (lineCell.length === 2) {\n        // continue along loop\n        lineId = lineCell[0] !== lineId ? lineCell[0] : lineCell[1];\n        visited.add(lineId);\n      } else {\n        // empty or invalid cell\n        terminated = true;\n      }\n    }\n    return lastPtId;\n  };\n  publicAPI.extractContours = (input, output) => {\n    const loops = [];\n    visited.clear();\n    const inLines = input.getLines();\n    output.getPoints().setData(Float32Array.from(input.getPoints().getData()));\n\n    // TODO skip if cached input mtime hasn't changed.\n    // iterate over input lines\n    for (let li = 0; li < inLines.getNumberOfCells(); li++) {\n      if (visited.has(li)) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n      const {\n        cellPointIds\n      } = input.getCellPoints(li);\n      if (!cellPointIds) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n      visited.add(li);\n      const startPtId = cellPointIds[0];\n      const loopPoints = [];\n      loopPoints.push({\n        t: 0,\n        ptId: startPtId\n      });\n      const endPtId = publicAPI.traverseLoop(input, Dir.Forward, li, startPtId, loopPoints);\n      if (startPtId !== endPtId) {\n        // didn't find a loop. Go other direction to see where we end up\n        publicAPI.traverseLoop(input, Dir.Backward, li, startPtId, loopPoints);\n        loopPoints.sort((a, b) => a.t < b.t ? -1 : 1);\n        // make closed contour\n        if (loopPoints.length && loopPoints[0].ptId !== loopPoints[loopPoints.length - 1]?.ptId) {\n          loopPoints.push({\n            ...loopPoints[loopPoints.length - 1]\n          });\n        }\n      }\n      if (loopPoints.length) {\n        loops.push(loopPoints);\n      }\n    }\n\n    // clear output lines\n    const outLines = output.getLines();\n    outLines.resize(0);\n    loops.forEach(loop => {\n      outLines.insertNextCell(loop.map(pt => pt.ptId));\n    });\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  macro.obj(publicAPI, model);\n  macro.algo(publicAPI, model, 1, 1);\n  vtkContourLoopExtraction(publicAPI);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkContourLoopExtraction');\n\n// ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance,\n  extend\n};\n\nexport { index as default, extend, newInstance };\n","import { expose } from 'comlink';\nimport { utilities } from '@cornerstonejs/core';\nimport { utilities as ToolsUtilities } from '@cornerstonejs/tools';\nimport vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkPlane from '@kitware/vtk.js/Common/DataModel/Plane';\nimport vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport vtkContourLoopExtraction from '@kitware/vtk.js/Filters/General/ContourLoopExtraction';\nimport vtkCutter from '@kitware/vtk.js/Filters/Core/Cutter';\nconst { math: { polyline: { containsPoint, getAABB, projectTo2D }, }, geometricSurfaceUtils: { checkStandardBasis, rotatePoints }, boundingBox: { getBoundingBoxAroundShapeWorld }, planar: { isPlaneIntersectingAABB }, } = ToolsUtilities;\nasync function peerImport(moduleId) {\n    try {\n        if (moduleId === '@icr/polyseg-wasm') {\n            return import('@icr/polyseg-wasm');\n        }\n    }\n    catch (error) {\n        console.warn('Error importing module:', error);\n        return null;\n    }\n}\nconst polySegConverters = {\n    polySeg: null,\n    polySegInitializing: false,\n    polySegInitializingPromise: null,\n    async initializePolySeg(progressCallback) {\n        let ICRPolySeg;\n        try {\n            ICRPolySeg = (await peerImport('@icr/polyseg-wasm')).default;\n        }\n        catch (error) {\n            console.error(error);\n            console.debug(\"Warning: '@icr/polyseg-wasm' module not found. Please install it separately.\");\n            return;\n        }\n        if (this.polySegInitializing) {\n            await this.polySegInitializingPromise;\n            return;\n        }\n        if (this.polySeg?.instance) {\n            return;\n        }\n        this.polySegInitializing = true;\n        this.polySegInitializingPromise = new Promise((resolve) => {\n            this.polySeg = new ICRPolySeg();\n            this.polySeg\n                .initialize({\n                updateProgress: progressCallback,\n            })\n                .then(() => {\n                this.polySegInitializing = false;\n                resolve();\n            });\n        });\n        await this.polySegInitializingPromise;\n    },\n    async convertContourToSurface(args, ...callbacks) {\n        const { polylines, numPointsArray } = args;\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const results = await this.polySeg.instance.convertContourRoiToSurface(polylines, numPointsArray);\n        return results;\n    },\n    async convertLabelmapToSurface(args, ...callbacks) {\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const results = this.polySeg.instance.convertLabelmapToSurface(args.scalarData, args.dimensions, args.spacing, args.direction, args.origin, [args.segmentIndex]);\n        const rotationInfo = checkStandardBasis(args.direction);\n        if (!rotationInfo.isStandard) {\n            const rotatedPoints = rotatePoints(rotationInfo.rotationMatrix, args.origin, results.points);\n            results.points = [...rotatedPoints];\n        }\n        return results;\n    },\n    async convertContourToVolumeLabelmap(args, ...callbacks) {\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const { segmentIndices, scalarData, annotationUIDsInSegmentMap, dimensions, origin, direction, spacing, } = args;\n        const segmentationVoxelManager = utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions,\n            scalarData,\n        });\n        const imageData = vtkImageData.newInstance();\n        imageData.setDimensions(dimensions);\n        imageData.setOrigin(origin);\n        imageData.setDirection(direction);\n        imageData.setSpacing(spacing);\n        const scalarArray = vtkDataArray.newInstance({\n            name: 'Pixels',\n            numberOfComponents: 1,\n            values: scalarData,\n        });\n        imageData.getPointData().setScalars(scalarArray);\n        imageData.modified();\n        for (const index of segmentIndices) {\n            const annotations = annotationUIDsInSegmentMap.get(index);\n            for (const annotation of annotations) {\n                if (!annotation.polyline) {\n                    continue;\n                }\n                const { polyline, holesPolyline } = annotation;\n                const bounds = getBoundingBoxAroundShapeWorld(polyline);\n                const [iMin, jMin, kMin] = utilities.transformWorldToIndex(imageData, [\n                    bounds[0][0],\n                    bounds[1][0],\n                    bounds[2][0],\n                ]);\n                const [iMax, jMax, kMax] = utilities.transformWorldToIndex(imageData, [\n                    bounds[0][1],\n                    bounds[1][1],\n                    bounds[2][1],\n                ]);\n                const { projectedPolyline, sharedDimensionIndex } = projectTo2D(polyline);\n                const holes = holesPolyline?.map((hole) => {\n                    const { projectedPolyline: projectedHole } = projectTo2D(hole);\n                    return projectedHole;\n                });\n                const firstDim = (sharedDimensionIndex + 1) % 3;\n                const secondDim = (sharedDimensionIndex + 2) % 3;\n                const voxels = utilities.VoxelManager.createScalarVolumeVoxelManager({\n                    dimensions,\n                    scalarData,\n                });\n                voxels.forEach(({ pointIJK }) => {\n                    segmentationVoxelManager.setAtIJKPoint(pointIJK, index);\n                }, {\n                    imageData,\n                    isInObject: (pointLPS) => {\n                        const point2D = [pointLPS[firstDim], pointLPS[secondDim]];\n                        const isInside = containsPoint(projectedPolyline, point2D, {\n                            holes,\n                        });\n                        return isInside;\n                    },\n                    boundsIJK: [\n                        [iMin, iMax],\n                        [jMin, jMax],\n                        [kMin, kMax],\n                    ],\n                });\n            }\n        }\n        return segmentationVoxelManager.scalarData;\n    },\n    async convertContourToStackLabelmap(args, ...callbacks) {\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const { segmentationsInfo, annotationUIDsInSegmentMap, segmentIndices } = args;\n        const segmentationVoxelManagers = new Map();\n        segmentationsInfo.forEach((segmentationInfo, referencedImageId) => {\n            const { dimensions, scalarData, direction, spacing, origin } = segmentationInfo;\n            const manager = utilities.VoxelManager.createScalarVolumeVoxelManager({\n                dimensions,\n                scalarData,\n            });\n            const imageData = vtkImageData.newInstance();\n            imageData.setDimensions(dimensions);\n            imageData.setOrigin(origin);\n            imageData.setDirection(direction);\n            imageData.setSpacing(spacing);\n            const scalarArray = vtkDataArray.newInstance({\n                name: 'Pixels',\n                numberOfComponents: 1,\n                values: scalarData,\n            });\n            imageData.getPointData().setScalars(scalarArray);\n            imageData.modified();\n            segmentationVoxelManagers.set(referencedImageId, { manager, imageData });\n        });\n        for (const index of segmentIndices) {\n            const annotations = annotationUIDsInSegmentMap.get(index);\n            for (const annotation of annotations) {\n                if (!annotation.polyline) {\n                    continue;\n                }\n                const { polyline, holesPolyline, referencedImageId } = annotation;\n                const bounds = getBoundingBoxAroundShapeWorld(polyline);\n                const { manager: segmentationVoxelManager, imageData } = segmentationVoxelManagers.get(referencedImageId);\n                const [iMin, jMin, kMin] = utilities.transformWorldToIndex(imageData, [\n                    bounds[0][0],\n                    bounds[1][0],\n                    bounds[2][0],\n                ]);\n                const [iMax, jMax, kMax] = utilities.transformWorldToIndex(imageData, [\n                    bounds[0][1],\n                    bounds[1][1],\n                    bounds[2][1],\n                ]);\n                const { projectedPolyline, sharedDimensionIndex } = projectTo2D(polyline);\n                const holes = holesPolyline?.map((hole) => {\n                    const { projectedPolyline: projectedHole } = projectTo2D(hole);\n                    return projectedHole;\n                });\n                const firstDim = (sharedDimensionIndex + 1) % 3;\n                const secondDim = (sharedDimensionIndex + 2) % 3;\n                const voxels = utilities.VoxelManager.createImageVoxelManager({\n                    width: imageData.getDimensions()[0],\n                    height: imageData.getDimensions()[1],\n                    scalarData: imageData.getPointData().getScalars().getData(),\n                });\n                voxels.forEach(({ pointIJK }) => {\n                    segmentationVoxelManager.setAtIJKPoint(pointIJK, index);\n                }, {\n                    imageData,\n                    isInObject: (pointLPS) => {\n                        const point2D = [pointLPS[firstDim], pointLPS[secondDim]];\n                        const isInside = containsPoint(projectedPolyline, point2D, {\n                            holes,\n                        });\n                        return isInside;\n                    },\n                    boundsIJK: [\n                        [iMin, iMax],\n                        [jMin, jMax],\n                        [kMin, kMax],\n                    ],\n                });\n            }\n        }\n        segmentationsInfo.forEach((segmentationInfo, referencedImageId) => {\n            const { manager: segmentationVoxelManager } = segmentationVoxelManagers.get(referencedImageId);\n            segmentationInfo.scalarData = segmentationVoxelManager.scalarData;\n        });\n        return segmentationsInfo;\n    },\n    async convertSurfaceToVolumeLabelmap(args, ...callbacks) {\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const results = this.polySeg.instance.convertSurfaceToLabelmap(args.points, args.polys, args.dimensions, args.spacing, args.direction, args.origin);\n        return results;\n    },\n    async convertSurfacesToVolumeLabelmap(args, ...callbacks) {\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const { segmentsInfo } = args;\n        const promises = Array.from(segmentsInfo.keys()).map((segmentIndex) => {\n            const { points, polys } = segmentsInfo.get(segmentIndex);\n            const result = this.polySeg.instance.convertSurfaceToLabelmap(points, polys, args.dimensions, args.spacing, args.direction, args.origin);\n            return {\n                ...result,\n                segmentIndex,\n            };\n        });\n        const results = await Promise.all(promises);\n        const targetImageData = vtkImageData.newInstance();\n        targetImageData.setDimensions(args.dimensions);\n        targetImageData.setOrigin(args.origin);\n        targetImageData.setSpacing(args.spacing);\n        targetImageData.setDirection(args.direction);\n        const totalSize = args.dimensions[0] * args.dimensions[1] * args.dimensions[2];\n        const scalarArray = vtkDataArray.newInstance({\n            name: 'Pixels',\n            numberOfComponents: 1,\n            values: new Uint8Array(totalSize),\n        });\n        targetImageData.getPointData().setScalars(scalarArray);\n        targetImageData.modified();\n        const { dimensions } = args;\n        const scalarData = targetImageData.getPointData().getScalars().getData();\n        const segmentationVoxelManager = utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions,\n            scalarData,\n        });\n        const outputVolumesInfo = results.map((result) => {\n            const { data, dimensions, direction, origin, spacing } = result;\n            const volume = vtkImageData.newInstance();\n            volume.setDimensions(dimensions);\n            volume.setOrigin(origin);\n            volume.setSpacing(spacing);\n            volume.setDirection(direction);\n            const scalarArray = vtkDataArray.newInstance({\n                name: 'Pixels',\n                numberOfComponents: 1,\n                values: data,\n            });\n            volume.getPointData().setScalars(scalarArray);\n            volume.modified();\n            const voxelManager = utilities.VoxelManager.createScalarVolumeVoxelManager({\n                dimensions,\n                scalarData: data,\n            });\n            const extent = volume.getExtent();\n            return {\n                volume,\n                voxelManager,\n                extent,\n                scalarData: data,\n                segmentIndex: result.segmentIndex,\n            };\n        });\n        const voxels = utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions: targetImageData.getDimensions(),\n            scalarData: targetImageData.getPointData().getScalars().getData(),\n        });\n        voxels.forEach(({ pointIJK, pointLPS }) => {\n            try {\n                for (const volumeInfo of outputVolumesInfo) {\n                    const { volume, extent, voxelManager, segmentIndex } = volumeInfo;\n                    const index = volume.worldToIndex(pointLPS);\n                    if (index[0] < extent[0] ||\n                        index[0] > extent[1] ||\n                        index[1] < extent[2] ||\n                        index[1] > extent[3] ||\n                        index[2] < extent[4] ||\n                        index[2] > extent[5]) {\n                        continue;\n                    }\n                    const roundedIndex = index.map(Math.round);\n                    const value = voxelManager.getAtIJK(...roundedIndex);\n                    if (value > 0) {\n                        segmentationVoxelManager.setAtIJKPoint(pointIJK, segmentIndex);\n                        break;\n                    }\n                }\n            }\n            catch (error) {\n            }\n        }, { imageData: targetImageData });\n        return segmentationVoxelManager.scalarData;\n    },\n    getSurfacesAABBs({ surfacesInfo }) {\n        const aabbs = new Map();\n        for (const { points, id } of surfacesInfo) {\n            const aabb = getAABB(points, { numDimensions: 3 });\n            aabbs.set(id, aabb);\n        }\n        return aabbs;\n    },\n    cutSurfacesIntoPlanes({ planesInfo, surfacesInfo, surfacesAABB = new Map() }, progressCallback, updateCacheCallback) {\n        const numberOfPlanes = planesInfo.length;\n        const cutter = vtkCutter.newInstance();\n        const plane1 = vtkPlane.newInstance();\n        cutter.setCutFunction(plane1);\n        const surfacePolyData = vtkPolyData.newInstance();\n        try {\n            for (const [index, planeInfo] of planesInfo.entries()) {\n                const { sliceIndex, planes } = planeInfo;\n                const polyDataResults = new Map();\n                for (const polyDataInfo of surfacesInfo) {\n                    const { points, polys, id, segmentIndex } = polyDataInfo;\n                    const aabb3 = surfacesAABB.get(id) || getAABB(points, { numDimensions: 3 });\n                    if (!surfacesAABB.has(id)) {\n                        surfacesAABB.set(id, aabb3);\n                    }\n                    const { minX, minY, minZ, maxX, maxY, maxZ } = aabb3;\n                    const { origin, normal } = planes[0];\n                    if (!isPlaneIntersectingAABB(origin, normal, minX, minY, minZ, maxX, maxY, maxZ)) {\n                        continue;\n                    }\n                    surfacePolyData.getPoints().setData(points, 3);\n                    surfacePolyData.getPolys().setData(polys);\n                    surfacePolyData.modified();\n                    cutter.setInputData(surfacePolyData);\n                    plane1.setOrigin(origin);\n                    plane1.setNormal(normal);\n                    try {\n                        cutter.update();\n                    }\n                    catch (e) {\n                        console.warn('Error during clipping', e);\n                        continue;\n                    }\n                    const polyData = cutter.getOutputData();\n                    if (!polyData ||\n                        !polyData.getPoints() ||\n                        polyData.getPoints().getNumberOfPoints() === 0) {\n                        continue;\n                    }\n                    const cutterOutput = polyData;\n                    cutterOutput.buildLinks();\n                    const loopExtraction = vtkContourLoopExtraction.newInstance();\n                    loopExtraction.setInputData(cutterOutput);\n                    try {\n                        loopExtraction.update();\n                        const loopOutput = loopExtraction.getOutputData();\n                        if (loopOutput &&\n                            loopOutput.getPoints() &&\n                            loopOutput.getLines() &&\n                            loopOutput.getPoints().getNumberOfPoints() > 0 &&\n                            loopOutput.getLines().getNumberOfCells() > 0) {\n                            polyDataResults.set(segmentIndex, {\n                                points: loopOutput.getPoints().getData(),\n                                lines: loopOutput.getLines().getData(),\n                                numberOfCells: loopOutput.getLines().getNumberOfCells(),\n                                segmentIndex,\n                            });\n                        }\n                    }\n                    catch (loopError) {\n                        console.warn('Error during loop extraction:', loopError);\n                        continue;\n                    }\n                }\n                progressCallback({ progress: (index + 1) / numberOfPlanes });\n                updateCacheCallback({ sliceIndex, polyDataResults });\n            }\n        }\n        catch (e) {\n            console.warn('Error during processing', e);\n        }\n        finally {\n            surfacesInfo = null;\n            plane1.delete();\n        }\n    },\n};\nexpose(polySegConverters);\n","const CORNERSTONE_COLOR_LUT = [\n    [0, 0, 0, 0],\n    [221, 84, 84, 255],\n    [77, 228, 121, 255],\n    [166, 70, 235, 255],\n    [189, 180, 116, 255],\n    [109, 182, 196, 255],\n    [204, 101, 157, 255],\n    [123, 211, 94, 255],\n    [93, 87, 218, 255],\n    [225, 128, 80, 255],\n    [73, 232, 172, 255],\n    [181, 119, 186, 255],\n    [176, 193, 112, 255],\n    [105, 153, 200, 255],\n    [208, 97, 120, 255],\n    [90, 215, 101, 255],\n    [135, 83, 222, 255],\n    [229, 178, 76, 255],\n    [122, 183, 181, 255],\n    [190, 115, 171, 255],\n    [149, 197, 108, 255],\n    [100, 118, 205, 255],\n    [212, 108, 93, 255],\n    [86, 219, 141, 255],\n    [183, 79, 226, 255],\n    [233, 233, 72, 255],\n    [118, 167, 187, 255],\n    [194, 111, 146, 255],\n    [116, 201, 104, 255],\n    [115, 96, 209, 255],\n    [216, 147, 89, 255],\n    [82, 223, 188, 255],\n    [230, 75, 224, 255],\n    [163, 184, 121, 255],\n    [114, 143, 191, 255],\n    [198, 107, 114, 255],\n    [99, 206, 122, 255],\n    [153, 92, 213, 255],\n    [220, 192, 85, 255],\n    [78, 215, 227, 255],\n    [234, 71, 173, 255],\n    [141, 188, 117, 255],\n    [110, 113, 195, 255],\n    [202, 128, 103, 255],\n    [95, 210, 157, 255],\n    [195, 88, 217, 255],\n    [206, 224, 81, 255],\n    [74, 166, 231, 255],\n    [185, 120, 139, 255],\n    [113, 192, 113, 255],\n    [133, 106, 199, 255],\n    [207, 162, 98, 255],\n    [91, 214, 198, 255],\n    [221, 84, 198, 255],\n    [159, 228, 77, 255],\n    [70, 111, 235, 255],\n    [189, 119, 116, 255],\n    [109, 196, 138, 255],\n    [165, 101, 204, 255],\n    [211, 201, 94, 255],\n    [87, 191, 218, 255],\n    [225, 80, 153, 255],\n    [106, 232, 73, 255],\n    [124, 119, 186, 255],\n    [193, 142, 112, 255],\n    [105, 200, 168, 255],\n    [203, 97, 208, 255],\n    [184, 215, 90, 255],\n    [83, 147, 222, 255],\n    [229, 76, 101, 255],\n    [122, 183, 130, 255],\n    [146, 115, 190, 255],\n    [197, 171, 108, 255],\n    [100, 205, 205, 255],\n    [212, 93, 177, 255],\n    [141, 219, 86, 255],\n    [79, 97, 226, 255],\n    [233, 99, 72, 255],\n    [118, 187, 150, 255],\n    [173, 111, 194, 255],\n    [197, 201, 104, 255],\n    [96, 171, 209, 255],\n    [216, 89, 137, 255],\n    [94, 223, 82, 255],\n    [107, 75, 230, 255],\n    [184, 153, 121, 255],\n    [114, 191, 175, 255],\n    [198, 107, 191, 255],\n    [166, 206, 99, 255],\n    [92, 132, 213, 255],\n    [220, 85, 91, 255],\n    [78, 227, 115, 255],\n    [159, 71, 234, 255],\n    [188, 176, 117, 255],\n    [110, 185, 195, 255],\n    [202, 103, 161, 255],\n    [129, 210, 95, 255],\n    [88, 88, 217, 255],\n    [224, 123, 81, 255],\n    [74, 231, 166, 255],\n    [177, 120, 185, 255],\n    [179, 192, 113, 255],\n    [106, 156, 199, 255],\n    [207, 98, 125, 255],\n    [91, 214, 96, 255],\n    [130, 84, 221, 255],\n    [228, 171, 77, 255],\n    [70, 235, 221, 255],\n    [189, 116, 174, 255],\n    [153, 196, 109, 255],\n    [101, 123, 204, 255],\n    [211, 104, 94, 255],\n    [87, 218, 136, 255],\n    [177, 80, 225, 255],\n    [232, 225, 73, 255],\n    [119, 169, 186, 255],\n    [193, 112, 149, 255],\n    [121, 200, 105, 255],\n    [111, 97, 208, 255],\n    [215, 142, 90, 255],\n    [83, 222, 181, 255],\n    [229, 76, 229, 255],\n    [165, 183, 122, 255],\n    [115, 146, 190, 255],\n    [197, 108, 119, 255],\n    [100, 205, 118, 255],\n    [148, 93, 212, 255],\n    [219, 186, 86, 255],\n    [79, 220, 226, 255],\n    [233, 72, 179, 255],\n    [144, 187, 118, 255],\n    [111, 118, 194, 255],\n    [201, 124, 104, 255],\n    [96, 209, 153, 255],\n    [189, 89, 216, 255],\n    [211, 223, 82, 255],\n    [75, 172, 230, 255],\n    [184, 121, 142, 255],\n    [117, 191, 114, 255],\n    [130, 107, 198, 255],\n    [206, 157, 99, 255],\n    [92, 213, 193, 255],\n    [220, 85, 203, 255],\n    [165, 227, 78, 255],\n    [71, 118, 234, 255],\n    [188, 117, 117, 255],\n    [110, 195, 135, 255],\n    [161, 103, 202, 255],\n    [210, 195, 95, 255],\n    [88, 195, 217, 255],\n    [224, 81, 158, 255],\n    [113, 231, 74, 255],\n    [123, 120, 185, 255],\n    [192, 139, 113, 255],\n    [106, 199, 164, 255],\n    [198, 98, 207, 255],\n    [188, 214, 91, 255],\n    [84, 153, 221, 255],\n    [228, 77, 108, 255],\n    [70, 235, 84, 255],\n    [143, 116, 189, 255],\n    [196, 167, 109, 255],\n    [101, 204, 199, 255],\n    [211, 94, 182, 255],\n    [147, 218, 87, 255],\n    [80, 104, 225, 255],\n    [232, 93, 73, 255],\n    [119, 186, 147, 255],\n    [170, 112, 193, 255],\n    [200, 200, 105, 255],\n    [97, 175, 208, 255],\n    [215, 90, 142, 255],\n    [100, 222, 83, 255],\n    [101, 76, 229, 255],\n    [183, 150, 122, 255],\n    [115, 190, 171, 255],\n    [197, 108, 194, 255],\n    [170, 205, 100, 255],\n    [93, 138, 212, 255],\n    [219, 86, 97, 255],\n    [79, 226, 110, 255],\n    [153, 72, 233, 255],\n    [187, 173, 118, 255],\n    [111, 187, 194, 255],\n    [201, 104, 165, 255],\n    [134, 209, 96, 255],\n    [89, 95, 216, 255],\n    [223, 117, 82, 255],\n    [75, 230, 159, 255],\n    [174, 121, 184, 255],\n    [182, 191, 114, 255],\n    [107, 160, 198, 255],\n    [206, 99, 130, 255],\n    [92, 213, 92, 255],\n    [124, 85, 220, 255],\n    [227, 165, 78, 255],\n    [71, 234, 214, 255],\n    [188, 117, 176, 255],\n    [156, 195, 110, 255],\n    [103, 128, 202, 255],\n    [210, 100, 95, 255],\n    [88, 217, 131, 255],\n    [170, 81, 224, 255],\n    [231, 218, 74, 255],\n    [120, 172, 185, 255],\n    [192, 113, 153, 255],\n    [125, 199, 106, 255],\n    [107, 98, 207, 255],\n    [214, 137, 91, 255],\n    [84, 221, 175, 255],\n    [222, 77, 228, 255],\n    [194, 235, 70, 255],\n    [116, 149, 189, 255],\n    [196, 109, 123, 255],\n    [101, 204, 114, 255],\n    [143, 94, 211, 255],\n    [218, 180, 87, 255],\n    [80, 225, 225, 255],\n    [232, 73, 186, 255],\n    [147, 186, 119, 255],\n    [112, 122, 193, 255],\n    [200, 121, 105, 255],\n    [97, 208, 148, 255],\n    [184, 90, 215, 255],\n    [216, 222, 83, 255],\n    [76, 178, 229, 255],\n    [183, 122, 145, 255],\n    [121, 190, 115, 255],\n    [126, 108, 197, 255],\n    [205, 153, 100, 255],\n    [93, 212, 187, 255],\n    [219, 86, 208, 255],\n    [171, 226, 79, 255],\n    [72, 126, 233, 255],\n    [187, 118, 121, 255],\n    [111, 194, 132, 255],\n    [157, 104, 201, 255],\n    [209, 190, 96, 255],\n    [89, 200, 216, 255],\n    [223, 82, 164, 255],\n    [120, 230, 75, 255],\n    [121, 121, 184, 255],\n    [191, 136, 114, 255],\n    [107, 198, 160, 255],\n    [192, 99, 206, 255],\n    [193, 213, 92, 255],\n    [85, 158, 220, 255],\n    [227, 78, 115, 255],\n    [71, 234, 78, 255],\n    [141, 117, 188, 255],\n    [195, 163, 110, 255],\n    [103, 202, 194, 255],\n    [210, 95, 186, 255],\n    [153, 217, 88, 255],\n    [81, 111, 224, 255],\n];\nexport default CORNERSTONE_COLOR_LUT;\n","import { state } from '../store/state';\nimport { getEnabledElement } from '@cornerstonejs/core';\nconst VIEWPORT_ELEMENT = 'viewport-element';\nfunction getSvgDrawingHelper(element) {\n    const enabledElement = getEnabledElement(element);\n    const { viewportId, renderingEngineId } = enabledElement;\n    const canvasHash = `${viewportId}:${renderingEngineId}`;\n    const svgLayerElement = _getSvgLayer(element);\n    Object.keys(state.svgNodeCache[canvasHash]).forEach((cacheKey) => {\n        state.svgNodeCache[canvasHash][cacheKey].touched = false;\n    });\n    return {\n        svgLayerElement: svgLayerElement,\n        svgNodeCacheForCanvas: state.svgNodeCache,\n        getSvgNode: getSvgNode.bind(this, canvasHash),\n        appendNode: appendNode.bind(this, svgLayerElement, canvasHash),\n        setNodeTouched: setNodeTouched.bind(this, canvasHash),\n        clearUntouched: clearUntouched.bind(this, svgLayerElement, canvasHash),\n    };\n}\nfunction _getSvgLayer(element) {\n    const viewportElement = `.${VIEWPORT_ELEMENT}`;\n    const internalDivElement = element.querySelector(viewportElement);\n    const svgLayer = internalDivElement?.querySelector(':scope > .svg-layer');\n    return svgLayer;\n}\nfunction getSvgNode(canvasHash, cacheKey) {\n    if (!state.svgNodeCache[canvasHash]) {\n        return;\n    }\n    if (state.svgNodeCache[canvasHash][cacheKey]) {\n        return state.svgNodeCache[canvasHash][cacheKey].domRef;\n    }\n}\nfunction appendNode(svgLayerElement, canvasHash, svgNode, cacheKey) {\n    if (!state.svgNodeCache[canvasHash]) {\n        return null;\n    }\n    state.svgNodeCache[canvasHash][cacheKey] = {\n        touched: true,\n        domRef: svgNode,\n    };\n    svgLayerElement.appendChild(svgNode);\n}\nfunction setNodeTouched(canvasHash, cacheKey) {\n    if (!state.svgNodeCache[canvasHash]) {\n        return;\n    }\n    if (state.svgNodeCache[canvasHash][cacheKey]) {\n        state.svgNodeCache[canvasHash][cacheKey].touched = true;\n    }\n}\nfunction clearUntouched(svgLayerElement, canvasHash) {\n    if (!state.svgNodeCache[canvasHash]) {\n        return;\n    }\n    Object.keys(state.svgNodeCache[canvasHash]).forEach((cacheKey) => {\n        const cacheEntry = state.svgNodeCache[canvasHash][cacheKey];\n        if (!cacheEntry.touched && cacheEntry.domRef) {\n            svgLayerElement.removeChild(cacheEntry.domRef);\n            delete state.svgNodeCache[canvasHash][cacheKey];\n        }\n    });\n}\nexport default getSvgDrawingHelper;\n","import getSvgDrawingHelper from './getSvgDrawingHelper';\nfunction draw(element, fn) {\n    const svgDrawingHelper = getSvgDrawingHelper(element);\n    fn(svgDrawingHelper);\n    svgDrawingHelper.clearUntouched();\n}\nexport default draw;\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nfunction drawCircle(svgDrawingHelper, annotationUID, circleUID, center, radius, options = {}, dataId = '') {\n    const { color, fill, width, lineWidth, lineDash, fillOpacity, strokeOpacity, } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        fill: 'transparent',\n        width: '2',\n        lineDash: undefined,\n        lineWidth: undefined,\n        strokeOpacity: 1,\n        fillOpacity: 1,\n    }, options);\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'circle', circleUID);\n    const existingCircleElement = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const attributes = {\n        cx: `${center[0]}`,\n        cy: `${center[1]}`,\n        r: `${radius}`,\n        stroke: color,\n        fill,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n        'fill-opacity': fillOpacity,\n        'stroke-opacity': strokeOpacity,\n    };\n    if (existingCircleElement) {\n        setAttributesIfNecessary(attributes, existingCircleElement);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const newCircleElement = document.createElementNS(svgns, 'circle');\n        if (dataId !== '') {\n            newCircleElement.setAttribute('data-id', dataId);\n        }\n        setNewAttributesIfValid(attributes, newCircleElement);\n        svgDrawingHelper.appendNode(newCircleElement, svgNodeHash);\n    }\n}\nexport default drawCircle;\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nfunction drawEllipseByCoordinates(svgDrawingHelper, annotationUID, ellipseUID, canvasCoordinates, options = {}, dataId = '') {\n    const { color, width, lineWidth, lineDash } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'ellipse', ellipseUID);\n    const existingEllipse = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const [bottom, top, left, right] = canvasCoordinates;\n    const w = Math.hypot(left[0] - right[0], left[1] - right[1]);\n    const h = Math.hypot(top[0] - bottom[0], top[1] - bottom[1]);\n    const angle = (Math.atan2(left[1] - right[1], left[0] - right[0]) * 180) / Math.PI;\n    const center = [(left[0] + right[0]) / 2, (top[1] + bottom[1]) / 2];\n    const radiusX = w / 2;\n    const radiusY = h / 2;\n    const attributes = {\n        cx: `${center[0]}`,\n        cy: `${center[1]}`,\n        rx: `${radiusX}`,\n        ry: `${radiusY}`,\n        stroke: color,\n        fill: 'transparent',\n        transform: `rotate(${angle} ${center[0]} ${center[1]})`,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n    };\n    if (existingEllipse) {\n        setAttributesIfNecessary(attributes, existingEllipse);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const svgEllipseElement = document.createElementNS(svgns, 'ellipse');\n        if (dataId !== '') {\n            svgEllipseElement.setAttribute('data-id', dataId);\n        }\n        setNewAttributesIfValid(attributes, svgEllipseElement);\n        svgDrawingHelper.appendNode(svgEllipseElement, svgNodeHash);\n    }\n}\nexport default drawEllipseByCoordinates;\n","import drawHandle from './drawHandle';\nfunction drawHandles(svgDrawingHelper, annotationUID, handleGroupUID, handlePoints, options = {}) {\n    handlePoints.forEach((handle, i) => {\n        drawHandle(svgDrawingHelper, annotationUID, handleGroupUID, handle, options, i);\n    });\n}\nexport default drawHandles;\n","import drawLine from './drawLine';\nimport findClosestPoint from '../utilities/math/vec2/findClosestPoint';\nfunction drawLink(svgDrawingHelper, annotationUID, linkUID, annotationAnchorPoints, refPoint, boundingBox, options = {}) {\n    const start = annotationAnchorPoints.length > 0\n        ? findClosestPoint(annotationAnchorPoints, refPoint)\n        : refPoint;\n    const boundingBoxPoints = _boundingBoxPoints(boundingBox);\n    const end = findClosestPoint(boundingBoxPoints, start);\n    const mergedOptions = Object.assign({\n        color: 'rgb(255, 255, 0)',\n        lineWidth: '1',\n        lineDash: '2,3',\n    }, options);\n    drawLine(svgDrawingHelper, annotationUID, `link-${linkUID}`, start, end, mergedOptions);\n}\nfunction _boundingBoxPoints(boundingBox) {\n    const { x: left, y: top, height, width } = boundingBox;\n    const halfWidth = width / 2;\n    const halfHeight = height / 2;\n    const topMiddle = [left + halfWidth, top];\n    const leftMiddle = [left, top + halfHeight];\n    const bottomMiddle = [left + halfWidth, top + height];\n    const rightMiddle = [left + width, top + halfHeight];\n    return [topMiddle, leftMiddle, bottomMiddle, rightMiddle];\n}\nexport default drawLink;\n","import drawTextBox from './drawTextBox';\nimport drawLink from './drawLink';\nfunction drawLinkedTextBox(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, annotationAnchorPoints, textBox, options = {}) {\n    const mergedOptions = Object.assign({\n        handleRadius: '6',\n        centering: {\n            x: false,\n            y: true,\n        },\n    }, options);\n    const canvasBoundingBox = drawTextBox(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, mergedOptions);\n    drawLink(svgDrawingHelper, annotationUID, textBoxUID, annotationAnchorPoints, textBoxPosition, canvasBoundingBox, mergedOptions);\n    return canvasBoundingBox;\n}\nexport default drawLinkedTextBox;\n","import _getHash from './_getHash';\nimport drawRectByCoordinates from './drawRectByCoordinates';\nexport default function drawRect(svgDrawingHelper, annotationUID, rectangleUID, start, end, options = {}, dataId = '') {\n    const topLeft = [start[0], start[1]];\n    const topRight = [end[0], start[1]];\n    const bottomLeft = [start[0], end[1]];\n    const bottomRight = [end[0], end[1]];\n    drawRectByCoordinates(svgDrawingHelper, annotationUID, rectangleUID, [topLeft, topRight, bottomLeft, bottomRight], options, dataId);\n}\n","import drawLine from './drawLine';\nexport default function drawHeight(svgDrawingHelper, annotationUID, heightUID, start, end, options = {}) {\n    if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n        return;\n    }\n    const { color, width, lineWidth, lineDash } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const midX = end[0] + (start[0] - end[0]) / 2;\n    const endfirstLine = [midX, start[1]];\n    const endsecondLine = [midX, end[1]];\n    const firstLine = {\n        start: start,\n        end: endfirstLine,\n    };\n    const secondLine = {\n        start: endfirstLine,\n        end: endsecondLine,\n    };\n    const threeLine = {\n        start: endsecondLine,\n        end: end,\n    };\n    drawLine(svgDrawingHelper, annotationUID, '1', firstLine.start, firstLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '2', secondLine.start, secondLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '3', threeLine.start, threeLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n}\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nfunction drawFan(svgDrawingHelper, annotationUID, fanUID, center, innerRadius, outerRadius, startAngle, endAngle, options = {}, dataId = '', zIndex) {\n    const { color, fill, width, lineWidth, lineDash, fillOpacity, strokeOpacity, } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        fill: 'transparent',\n        width: '2',\n        lineDash: undefined,\n        lineWidth: undefined,\n        strokeOpacity: 1,\n        fillOpacity: 1,\n    }, options);\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'fan', fanUID);\n    const existingFanElement = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const startRad = (startAngle * Math.PI) / 180;\n    const endRad = (endAngle * Math.PI) / 180;\n    const centerX = center[0];\n    const centerY = center[1];\n    const outerStartX = centerX + outerRadius * Math.cos(startRad);\n    const outerStartY = centerY + outerRadius * Math.sin(startRad);\n    const outerEndX = centerX + outerRadius * Math.cos(endRad);\n    const outerEndY = centerY + outerRadius * Math.sin(endRad);\n    const innerStartX = centerX + innerRadius * Math.cos(startRad);\n    const innerStartY = centerY + innerRadius * Math.sin(startRad);\n    const innerEndX = centerX + innerRadius * Math.cos(endRad);\n    const innerEndY = centerY + innerRadius * Math.sin(endRad);\n    const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1;\n    let pathData = `M ${outerStartX} ${outerStartY}`;\n    pathData += ` A ${outerRadius} ${outerRadius} 0 ${largeArcFlag} 1 ${outerEndX} ${outerEndY}`;\n    pathData += ` L ${innerEndX} ${innerEndY}`;\n    pathData += ` A ${innerRadius} ${innerRadius} 0 ${largeArcFlag} 0 ${innerStartX} ${innerStartY}`;\n    pathData += ` Z`;\n    const attributes = {\n        d: pathData,\n        stroke: color,\n        fill,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n        'fill-opacity': fillOpacity,\n        'stroke-opacity': strokeOpacity,\n        'mix-blend-mode': 'normal',\n    };\n    if (existingFanElement) {\n        setAttributesIfNecessary(attributes, existingFanElement);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const newFanElement = document.createElementNS(svgns, 'path');\n        if (dataId !== '') {\n            newFanElement.setAttribute('data-id', dataId);\n        }\n        if (zIndex !== undefined) {\n            newFanElement.style.zIndex = zIndex.toString();\n        }\n        setNewAttributesIfValid(attributes, newFanElement);\n        svgDrawingHelper.appendNode(newFanElement, svgNodeHash);\n    }\n}\nexport default drawFan;\n","import drawLine from './drawLine';\nconst svgns = 'http://www.w3.org/2000/svg';\nexport default function drawArrow(svgDrawingHelper, annotationUID, arrowUID, start, end, options = {}) {\n    if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n        return;\n    }\n    const { viaMarker = false, color = 'rgb(0, 255, 0)', markerSize = 10, } = options;\n    if (!viaMarker) {\n        legacyDrawArrow(svgDrawingHelper, annotationUID, arrowUID, start, end, options);\n        return;\n    }\n    const layerId = svgDrawingHelper.svgLayerElement.id;\n    const markerBaseId = `arrow-${annotationUID}`;\n    const markerFullId = `${markerBaseId}-${layerId}`;\n    const defs = svgDrawingHelper.svgLayerElement.querySelector('defs');\n    let arrowMarker = defs.querySelector(`#${markerFullId}`);\n    if (!arrowMarker) {\n        arrowMarker = document.createElementNS(svgns, 'marker');\n        arrowMarker.setAttribute('id', markerFullId);\n        arrowMarker.setAttribute('viewBox', '0 0 10 10');\n        arrowMarker.setAttribute('refX', '8');\n        arrowMarker.setAttribute('refY', '5');\n        arrowMarker.setAttribute('markerWidth', `${markerSize}`);\n        arrowMarker.setAttribute('markerHeight', `${markerSize}`);\n        arrowMarker.setAttribute('orient', 'auto');\n        const arrowPath = document.createElementNS(svgns, 'path');\n        arrowPath.setAttribute('d', 'M 0 0 L 10 5 L 0 10 z');\n        arrowPath.setAttribute('fill', color);\n        arrowMarker.appendChild(arrowPath);\n        defs.appendChild(arrowMarker);\n    }\n    else {\n        arrowMarker.setAttribute('markerWidth', `${markerSize}`);\n        arrowMarker.setAttribute('markerHeight', `${markerSize}`);\n        const arrowPath = arrowMarker.querySelector('path');\n        if (arrowPath) {\n            arrowPath.setAttribute('fill', color);\n        }\n    }\n    options.markerEndId = markerFullId;\n    drawLine(svgDrawingHelper, annotationUID, arrowUID, start, end, options);\n}\nfunction legacyDrawArrow(svgDrawingHelper, annotationUID, arrowUID, start, end, options = {}) {\n    const { color = 'rgb(0, 255, 0)', width = 2, lineWidth, lineDash } = options;\n    const headLength = 10;\n    const angle = Math.atan2(end[1] - start[1], end[0] - start[0]);\n    const firstLine = {\n        start: [\n            end[0] - headLength * Math.cos(angle - Math.PI / 7),\n            end[1] - headLength * Math.sin(angle - Math.PI / 7),\n        ],\n        end: end,\n    };\n    const secondLine = {\n        start: [\n            end[0] - headLength * Math.cos(angle + Math.PI / 7),\n            end[1] - headLength * Math.sin(angle + Math.PI / 7),\n        ],\n        end: end,\n    };\n    drawLine(svgDrawingHelper, annotationUID, arrowUID, start, end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '2', firstLine.start, firstLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '3', secondLine.start, secondLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n}\n","import _getHash from './_getHash';\nimport _setAttributesIfNecessary from './setAttributesIfNecessary';\nimport _setNewAttributesIfValid from './setNewAttributesIfValid';\nexport default function drawRedactionRect(svgDrawingHelper, annotationUID, rectangleUID, start, end, options = {}) {\n    const { color, width: _width, lineWidth, lineDash, } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const strokeWidth = lineWidth || _width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'rect', rectangleUID);\n    const existingRect = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const tlhc = [Math.min(start[0], end[0]), Math.min(start[1], end[1])];\n    const width = Math.abs(start[0] - end[0]);\n    const height = Math.abs(start[1] - end[1]);\n    const attributes = {\n        x: `${tlhc[0]}`,\n        y: `${tlhc[1]}`,\n        width: `${width}`,\n        height: `${height}`,\n        stroke: color,\n        fill: 'black',\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n    };\n    if (existingRect) {\n        _setAttributesIfNecessary(attributes, existingRect);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const svgRectElement = document.createElementNS(svgns, 'rect');\n        _setNewAttributesIfValid(attributes, svgRectElement);\n        svgDrawingHelper.appendNode(svgRectElement, svgNodeHash);\n    }\n}\n","var ChangeTypes;\n(function (ChangeTypes) {\n    ChangeTypes[\"Interaction\"] = \"Interaction\";\n    ChangeTypes[\"HandlesUpdated\"] = \"HandlesUpdated\";\n    ChangeTypes[\"StatsUpdated\"] = \"StatsUpdated\";\n    ChangeTypes[\"InitialSetup\"] = \"InitialSetup\";\n    ChangeTypes[\"Completed\"] = \"Completed\";\n    ChangeTypes[\"InterpolationUpdated\"] = \"InterpolationUpdated\";\n    ChangeTypes[\"History\"] = \"History\";\n    ChangeTypes[\"MetadataReferenceModified\"] = \"MetadataReferenceModified\";\n    ChangeTypes[\"LabelChange\"] = \"LabelChange\";\n})(ChangeTypes || (ChangeTypes = {}));\nexport default ChangeTypes;\n","var Swipe;\n(function (Swipe) {\n    Swipe[\"UP\"] = \"UP\";\n    Swipe[\"DOWN\"] = \"DOWN\";\n    Swipe[\"LEFT\"] = \"LEFT\";\n    Swipe[\"RIGHT\"] = \"RIGHT\";\n})(Swipe || (Swipe = {}));\nexport { Swipe };\n","import vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport { BaseVolumeViewport, getEnabledElement, Enums, getEnabledElementByIds, cache, utilities, } from '@cornerstonejs/core';\nimport { triggerSegmentationRender } from '../../stateManagement/segmentation/SegmentationRenderingEngine';\nimport { updateLabelmapSegmentationImageReferences } from '../../stateManagement/segmentation/updateLabelmapSegmentationImageReferences';\nimport { getCurrentLabelmapImageIdsForViewport } from '../../stateManagement/segmentation/getCurrentLabelmapImageIdForViewport';\nimport { SegmentationRepresentations } from '../../enums';\nimport { getLabelmapActorEntries } from '../../stateManagement/segmentation/helpers/getSegmentationActor';\nimport { getSegmentationRepresentations } from '../../stateManagement/segmentation/getSegmentationRepresentation';\nconst enable = function (element) {\n    if (!element) {\n        return;\n    }\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        return;\n    }\n    const { viewport } = enabledElement;\n    if (viewport instanceof BaseVolumeViewport) {\n        return;\n    }\n    element.addEventListener(Enums.Events.PRE_STACK_NEW_IMAGE, _imageChangeEventListener);\n    element.addEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.PRE_STACK_NEW_IMAGE, _imageChangeEventListener);\n    element.removeEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n};\nconst perViewportManualTriggers = new Map();\nfunction _imageChangeEventListener(evt) {\n    const eventData = evt.detail;\n    const { viewportId, renderingEngineId } = eventData;\n    const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n    const representations = getSegmentationRepresentations(viewportId);\n    if (!representations?.length) {\n        return;\n    }\n    const labelmapRepresentations = representations.filter((representation) => representation.type === SegmentationRepresentations.Labelmap);\n    const actors = viewport.getActors();\n    labelmapRepresentations.forEach((representation) => {\n        const { segmentationId } = representation;\n        updateLabelmapSegmentationImageReferences(viewportId, segmentationId);\n    });\n    const labelmapActors = labelmapRepresentations\n        .flatMap((representation) => {\n        return getLabelmapActorEntries(viewportId, representation.segmentationId);\n    })\n        .filter((actor) => actor !== undefined);\n    if (!labelmapActors.length) {\n        return;\n    }\n    labelmapActors.forEach((actor) => {\n        const validActor = labelmapRepresentations.find((representation) => {\n            const derivedImageIds = getCurrentLabelmapImageIdsForViewport(viewportId, representation.segmentationId);\n            return derivedImageIds?.includes(actor.referencedId);\n        });\n        if (!validActor) {\n            viewport.removeActors([actor.uid]);\n        }\n    });\n    labelmapRepresentations.forEach((representation) => {\n        const { segmentationId } = representation;\n        const currentImageId = viewport.getCurrentImageId();\n        const derivedImageIds = getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId);\n        if (!derivedImageIds) {\n            return;\n        }\n        let shouldTriggerSegmentationRender = false;\n        const updateSegmentationActor = (derivedImageId) => {\n            const derivedImage = cache.getImage(derivedImageId);\n            if (!derivedImage) {\n                console.warn('No derived image found in the cache for segmentation representation', representation);\n                return;\n            }\n            const segmentationActorInput = actors.find((actor) => actor.referencedId === derivedImageId);\n            if (!segmentationActorInput) {\n                const { dimensions, spacing, direction } = viewport.getImageDataMetadata(derivedImage);\n                const currentImage = cache.getImage(currentImageId) ||\n                    {\n                        imageId: currentImageId,\n                    };\n                const { origin: currentOrigin } = viewport.getImageDataMetadata(currentImage);\n                const originToUse = currentOrigin;\n                const constructor = derivedImage.voxelManager.getConstructor();\n                const newPixelData = derivedImage.voxelManager.getScalarData();\n                const scalarArray = vtkDataArray.newInstance({\n                    name: 'Pixels',\n                    numberOfComponents: 1,\n                    values: new constructor(newPixelData),\n                });\n                const imageData = vtkImageData.newInstance();\n                imageData.setDimensions(dimensions[0], dimensions[1], 1);\n                imageData.setSpacing(spacing);\n                imageData.setDirection(direction);\n                imageData.setOrigin(originToUse);\n                imageData.getPointData().setScalars(scalarArray);\n                imageData.modified();\n                viewport.addImages([\n                    {\n                        imageId: derivedImageId,\n                        representationUID: `${segmentationId}-${SegmentationRepresentations.Labelmap}-${derivedImage.imageId}`,\n                        callback: ({ imageActor }) => {\n                            imageActor.getMapper().setInputData(imageData);\n                        },\n                    },\n                ]);\n                shouldTriggerSegmentationRender = true;\n                return;\n            }\n            else {\n                const segmentationImageData = segmentationActorInput.actor\n                    .getMapper()\n                    .getInputData();\n                if (segmentationImageData.setDerivedImage) {\n                    segmentationImageData.setDerivedImage(derivedImage);\n                }\n                else {\n                    utilities.updateVTKImageDataWithCornerstoneImage(segmentationImageData, derivedImage);\n                }\n            }\n        };\n        derivedImageIds.forEach(updateSegmentationActor);\n        if (shouldTriggerSegmentationRender) {\n            triggerSegmentationRender(viewportId);\n        }\n        viewport.render();\n        if (evt.type === Enums.Events.IMAGE_RENDERED) {\n            viewport.element.removeEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n        }\n    });\n}\nexport default {\n    enable,\n    disable,\n};\n","import { triggerEvent, eventTarget, Enums, getRenderingEngines, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { SegmentationRepresentations, Events as csToolsEvents, } from '../../enums';\nimport Representations from '../../enums/SegmentationRepresentations';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nimport surfaceDisplay from '../../tools/displayTools/Surface/surfaceDisplay';\nimport contourDisplay from '../../tools/displayTools/Contour/contourDisplay';\nimport labelmapDisplay from '../../tools/displayTools/Labelmap/labelmapDisplay';\nimport { addTool } from '../../store/addTool';\nimport { state } from '../../store/state';\nimport PlanarFreehandContourSegmentationTool from '../../tools/annotation/PlanarFreehandContourSegmentationTool';\nimport { getToolGroupForViewport } from '../../store/ToolGroupManager';\nconst renderers = {\n    [Representations.Labelmap]: labelmapDisplay,\n    [Representations.Contour]: contourDisplay,\n    [Representations.Surface]: surfaceDisplay,\n};\nconst planarContourToolName = PlanarFreehandContourSegmentationTool.toolName;\nclass SegmentationRenderingEngine {\n    constructor() {\n        this._needsRender = new Set();\n        this._pendingRenderQueue = [];\n        this._animationFrameSet = false;\n        this._animationFrameHandle = null;\n        this._getAllViewports = () => {\n            const renderingEngine = getRenderingEngines();\n            return renderingEngine.flatMap((renderingEngine) => renderingEngine.getViewports());\n        };\n        this._renderFlaggedSegmentations = () => {\n            this._throwIfDestroyed();\n            const viewportIds = Array.from(this._needsRender);\n            viewportIds.forEach((viewportId) => {\n                this._triggerRender(viewportId);\n            });\n            this._needsRender.clear();\n            this._animationFrameSet = false;\n            this._animationFrameHandle = null;\n            if (this._pendingRenderQueue.length > 0) {\n                const nextViewportIds = this._pendingRenderQueue.shift();\n                if (nextViewportIds && nextViewportIds.length > 0) {\n                    this._setViewportsToBeRenderedNextFrame(nextViewportIds);\n                }\n            }\n        };\n    }\n    renderSegmentationsForViewport(viewportId) {\n        const viewportIds = viewportId\n            ? [viewportId]\n            : this._getViewportIdsForSegmentation();\n        this._setViewportsToBeRenderedNextFrame(viewportIds);\n    }\n    renderSegmentation(segmentationId) {\n        const viewportIds = this._getViewportIdsForSegmentation(segmentationId);\n        this._setViewportsToBeRenderedNextFrame(viewportIds);\n    }\n    _getViewportIdsForSegmentation(segmentationId) {\n        const viewports = this._getAllViewports();\n        const viewportIds = [];\n        for (const viewport of viewports) {\n            const viewportId = viewport.id;\n            if (segmentationId) {\n                const segmentationRepresentations = getSegmentationRepresentations(viewportId, { segmentationId });\n                if (segmentationRepresentations?.length > 0) {\n                    viewportIds.push(viewportId);\n                }\n            }\n            else {\n                const segmentationRepresentations = getSegmentationRepresentations(viewportId);\n                if (segmentationRepresentations?.length > 0) {\n                    viewportIds.push(viewportId);\n                }\n            }\n        }\n        return viewportIds;\n    }\n    _throwIfDestroyed() {\n        if (this.hasBeenDestroyed) {\n            throw new Error('this.destroy() has been manually called to free up memory, can not longer use this instance. Instead make a new one.');\n        }\n    }\n    _setViewportsToBeRenderedNextFrame(viewportIds) {\n        if (this._animationFrameSet) {\n            this._pendingRenderQueue.push(viewportIds);\n            return;\n        }\n        viewportIds.forEach((viewportId) => {\n            this._needsRender.add(viewportId);\n        });\n        this._render();\n    }\n    _render() {\n        if (this._needsRender.size > 0 && this._animationFrameSet === false) {\n            this._animationFrameHandle = window.requestAnimationFrame(this._renderFlaggedSegmentations);\n            this._animationFrameSet = true;\n        }\n    }\n    _triggerRender(viewportId) {\n        const segmentationRepresentations = getSegmentationRepresentations(viewportId);\n        if (!segmentationRepresentations?.length) {\n            return;\n        }\n        const { viewport } = getEnabledElementByViewportId(viewportId) || {};\n        if (!viewport) {\n            return;\n        }\n        const viewportRenderList = [];\n        const segmentationRenderList = segmentationRepresentations.map((representation) => {\n            if (representation.type === SegmentationRepresentations.Contour) {\n                this._addPlanarFreeHandToolIfAbsent(viewport);\n            }\n            const display = renderers[representation.type];\n            try {\n                const viewportId = display.render(viewport, representation);\n                viewportRenderList.push(viewportId);\n            }\n            catch (error) {\n                console.error(error);\n            }\n            return Promise.resolve({\n                segmentationId: representation.segmentationId,\n                type: representation.type,\n            });\n        });\n        Promise.allSettled(segmentationRenderList).then((results) => {\n            const segmentationDetails = results\n                .filter((r) => r.status === 'fulfilled')\n                .map((r) => r.value);\n            function onSegmentationRender(evt) {\n                const { element, viewportId } = evt.detail;\n                element.removeEventListener(Enums.Events.IMAGE_RENDERED, onSegmentationRender);\n                segmentationDetails.forEach((detail) => {\n                    const eventDetail = {\n                        viewportId,\n                        segmentationId: detail.segmentationId,\n                        type: detail.type,\n                    };\n                    triggerEvent(eventTarget, csToolsEvents.SEGMENTATION_RENDERED, {\n                        ...eventDetail,\n                    });\n                });\n            }\n            const element = viewport.element;\n            element.addEventListener(Enums.Events.IMAGE_RENDERED, onSegmentationRender);\n            viewport.render();\n        });\n    }\n    _addPlanarFreeHandToolIfAbsent(viewport) {\n        if (!(planarContourToolName in state.tools)) {\n            addTool(PlanarFreehandContourSegmentationTool);\n        }\n        const toolGroup = getToolGroupForViewport(viewport.id);\n        if (!toolGroup.hasTool(planarContourToolName)) {\n            toolGroup.addTool(planarContourToolName);\n            toolGroup.setToolPassive(planarContourToolName);\n        }\n    }\n}\nfunction triggerSegmentationRender(viewportId) {\n    segmentationRenderingEngine.renderSegmentationsForViewport(viewportId);\n}\nfunction triggerSegmentationRenderBySegmentationId(segmentationId) {\n    segmentationRenderingEngine.renderSegmentation(segmentationId);\n}\nconst segmentationRenderingEngine = new SegmentationRenderingEngine();\nexport { triggerSegmentationRender, triggerSegmentationRenderBySegmentationId, segmentationRenderingEngine, };\n","import { BaseVolumeViewport, cache, utilities as csUtils, getEnabledElementByViewportId, volumeLoader, } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../enums';\nimport vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nimport { triggerSegmentationModified, triggerSegmentationRemoved, triggerSegmentationRepresentationModified, triggerSegmentationRepresentationRemoved, } from './triggerSegmentationEvents';\nimport { segmentationStyle } from './SegmentationStyle';\nimport { triggerSegmentationAdded } from './events/triggerSegmentationAdded';\nconst initialDefaultState = {\n    colorLUT: [],\n    segmentations: [],\n    viewportSegRepresentations: {},\n};\nexport default class SegmentationStateManager {\n    constructor(uid) {\n        this._stackLabelmapImageIdReferenceMap = new Map();\n        this._labelmapImageIdReferenceMap = new Map();\n        uid ||= csUtils.uuidv4();\n        this.state = Object.freeze(csUtils.deepClone(initialDefaultState));\n        this.uid = uid;\n    }\n    getState() {\n        return this.state;\n    }\n    updateState(updater) {\n        const newState = csUtils.deepClone(this.state);\n        updater(newState);\n        this.state = Object.freeze(newState);\n    }\n    getColorLUT(lutIndex) {\n        return this.state.colorLUT[lutIndex];\n    }\n    getNextColorLUTIndex() {\n        return this.state.colorLUT.length;\n    }\n    resetState() {\n        this._stackLabelmapImageIdReferenceMap.clear();\n        this._labelmapImageIdReferenceMap.clear();\n        this.state = Object.freeze(csUtils.deepClone(initialDefaultState));\n    }\n    getSegmentation(segmentationId) {\n        return this.state.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n    }\n    updateSegmentation(segmentationId, payload) {\n        this.updateState((draftState) => {\n            const segmentation = draftState.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n            if (!segmentation) {\n                console.warn(`Segmentation with id ${segmentationId} not found. Update aborted.`);\n                return;\n            }\n            Object.assign(segmentation, payload);\n        });\n        triggerSegmentationModified(segmentationId);\n    }\n    addSegmentation(segmentation) {\n        if (this.getSegmentation(segmentation.segmentationId)) {\n            throw new Error(`Segmentation with id ${segmentation.segmentationId} already exists`);\n        }\n        this.updateState((state) => {\n            const newSegmentation = csUtils.deepClone(segmentation);\n            if (newSegmentation.representationData.Labelmap &&\n                'volumeId' in newSegmentation.representationData.Labelmap &&\n                !('imageIds' in newSegmentation.representationData.Labelmap)) {\n                const imageIds = this.getLabelmapImageIds(newSegmentation.representationData);\n                newSegmentation.representationData\n                    .Labelmap.imageIds = imageIds;\n            }\n            state.segmentations.push(newSegmentation);\n        });\n        triggerSegmentationAdded(segmentation.segmentationId);\n    }\n    removeSegmentation(segmentationId) {\n        this.updateState((state) => {\n            const filteredSegmentations = state.segmentations.filter((segmentation) => segmentation.segmentationId !== segmentationId);\n            state.segmentations.splice(0, state.segmentations.length, ...filteredSegmentations);\n        });\n        triggerSegmentationRemoved(segmentationId);\n    }\n    addSegmentationRepresentation(viewportId, segmentationId, type, renderingConfig) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const existingRepresentations = this.getSegmentationRepresentations(viewportId, {\n            type: type,\n            segmentationId,\n        });\n        if (existingRepresentations.length > 0) {\n            console.debug('A segmentation representation of type', type, 'already exists in viewport', viewportId, 'for segmentation', segmentationId);\n            return;\n        }\n        this.updateState((state) => {\n            if (!state.viewportSegRepresentations[viewportId]) {\n                state.viewportSegRepresentations[viewportId] = [];\n                segmentationStyle.setRenderInactiveSegmentations(viewportId, true);\n            }\n            if (type !== SegmentationRepresentations.Labelmap) {\n                this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, type, renderingConfig);\n            }\n            else {\n                this.addLabelmapRepresentation(state, viewportId, segmentationId, renderingConfig);\n            }\n        });\n        triggerSegmentationRepresentationModified(viewportId, segmentationId, type);\n    }\n    addDefaultSegmentationRepresentation(state, viewportId, segmentationId, type, renderingConfig) {\n        const segmentation = state.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const segmentReps = {};\n        Object.keys(segmentation.segments).forEach((segmentIndex) => {\n            segmentReps[Number(segmentIndex)] = {\n                visible: true,\n            };\n        });\n        state.viewportSegRepresentations[viewportId].push({\n            segmentationId,\n            type,\n            active: true,\n            visible: true,\n            colorLUTIndex: renderingConfig?.colorLUTIndex || 0,\n            segments: segmentReps,\n            config: {\n                ...getDefaultRenderingConfig(type),\n                ...renderingConfig,\n            },\n        });\n        this._setActiveSegmentation(state, viewportId, segmentationId);\n    }\n    addLabelmapRepresentation(state, viewportId, segmentationId, renderingConfig = getDefaultRenderingConfig(SegmentationRepresentations.Labelmap)) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, SegmentationRepresentations.Labelmap, renderingConfig);\n        }\n        this.processLabelmapRepresentationAddition(viewportId, segmentationId);\n        this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, SegmentationRepresentations.Labelmap, renderingConfig);\n    }\n    async processLabelmapRepresentationAddition(viewportId, segmentationId) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const volumeViewport = enabledElement.viewport instanceof BaseVolumeViewport;\n        const { representationData } = segmentation;\n        const isBaseVolumeSegmentation = 'volumeId' in representationData.Labelmap;\n        const viewport = enabledElement.viewport;\n        if (!volumeViewport && !isBaseVolumeSegmentation) {\n            !this.updateLabelmapSegmentationImageReferences(viewportId, segmentation.segmentationId);\n        }\n    }\n    _updateLabelmapSegmentationReferences(segmentationId, viewport, labelmapImageIds, updateCallback) {\n        const referenceImageId = viewport.getCurrentImageId();\n        let viewableLabelmapImageIdFound = false;\n        for (const labelmapImageId of labelmapImageIds) {\n            const viewableImageId = viewport.isReferenceViewable({ referencedImageId: labelmapImageId }, { asOverlay: true });\n            if (viewableImageId) {\n                viewableLabelmapImageIdFound = true;\n                this._stackLabelmapImageIdReferenceMap\n                    .get(segmentationId)\n                    .set(referenceImageId, labelmapImageId);\n                this._updateLabelmapImageIdReferenceMap({\n                    segmentationId,\n                    referenceImageId,\n                    labelmapImageId,\n                });\n            }\n        }\n        if (updateCallback) {\n            updateCallback(viewport, segmentationId, labelmapImageIds);\n        }\n        return viewableLabelmapImageIdFound\n            ? this._stackLabelmapImageIdReferenceMap\n                .get(segmentationId)\n                .get(referenceImageId)\n            : undefined;\n    }\n    updateLabelmapSegmentationImageReferences(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            this._stackLabelmapImageIdReferenceMap.set(segmentationId, new Map());\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return;\n        }\n        const labelmapImageIds = this.getLabelmapImageIds(representationData);\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        const stackViewport = enabledElement.viewport;\n        return this._updateLabelmapSegmentationReferences(segmentationId, stackViewport, labelmapImageIds, null);\n    }\n    _updateAllLabelmapSegmentationImageReferences(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            this._stackLabelmapImageIdReferenceMap.set(segmentationId, new Map());\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return;\n        }\n        const labelmapImageIds = this.getLabelmapImageIds(representationData);\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        const stackViewport = enabledElement.viewport;\n        this._updateLabelmapSegmentationReferences(segmentationId, stackViewport, labelmapImageIds, (stackViewport, segmentationId, labelmapImageIds) => {\n            const imageIds = stackViewport.getImageIds();\n            imageIds.forEach((referenceImageId, index) => {\n                for (const labelmapImageId of labelmapImageIds) {\n                    const viewableImageId = stackViewport.isReferenceViewable({ referencedImageId: labelmapImageId, sliceIndex: index }, { asOverlay: true, withNavigation: true });\n                    if (viewableImageId) {\n                        this._stackLabelmapImageIdReferenceMap\n                            .get(segmentationId)\n                            .set(referenceImageId, labelmapImageId);\n                        this._updateLabelmapImageIdReferenceMap({\n                            segmentationId,\n                            referenceImageId,\n                            labelmapImageId,\n                        });\n                    }\n                }\n            });\n        });\n    }\n    getLabelmapImageIds(representationData) {\n        const labelmapData = representationData.Labelmap;\n        let labelmapImageIds;\n        if (labelmapData.imageIds) {\n            labelmapImageIds = labelmapData\n                .imageIds;\n        }\n        else if (!labelmapImageIds &&\n            labelmapData.volumeId) {\n            const volumeId = labelmapData\n                .volumeId;\n            const volume = cache.getVolume(volumeId);\n            labelmapImageIds = volume.imageIds;\n        }\n        return labelmapImageIds;\n    }\n    getLabelmapImageIdsForImageId(imageId, segmentationId) {\n        const key = this._generateMapKey({\n            segmentationId,\n            referenceImageId: imageId,\n        });\n        return this._labelmapImageIdReferenceMap.get(key);\n    }\n    getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const stackViewport = enabledElement.viewport;\n        const referenceImageId = stackViewport.getCurrentImageId();\n        return this.getLabelmapImageIdsForImageId(referenceImageId, segmentationId);\n    }\n    getCurrentLabelmapImageIdForViewport(viewportId, segmentationId) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            return;\n        }\n        const stackViewport = enabledElement.viewport;\n        const currentImageId = stackViewport.getCurrentImageId();\n        const imageIdReferenceMap = this._stackLabelmapImageIdReferenceMap.get(segmentationId);\n        return imageIdReferenceMap.get(currentImageId);\n    }\n    getStackSegmentationImageIdsForViewport(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return [];\n        }\n        this._updateAllLabelmapSegmentationImageReferences(viewportId, segmentationId);\n        const { viewport } = getEnabledElementByViewportId(viewportId);\n        const imageIds = viewport.getImageIds();\n        const associatedReferenceImageAndLabelmapImageIds = this._stackLabelmapImageIdReferenceMap.get(segmentationId);\n        return imageIds.map((imageId) => {\n            return associatedReferenceImageAndLabelmapImageIds.get(imageId);\n        });\n    }\n    removeSegmentationRepresentationsInternal(viewportId, specifier) {\n        const removedRepresentations = [];\n        this.updateState((state) => {\n            if (!state.viewportSegRepresentations[viewportId]) {\n                return;\n            }\n            const currentRepresentations = state.viewportSegRepresentations[viewportId];\n            let activeRepresentationRemoved = false;\n            if (!specifier ||\n                Object.values(specifier).every((value) => value === undefined)) {\n                removedRepresentations.push(...currentRepresentations);\n                delete state.viewportSegRepresentations[viewportId];\n            }\n            else {\n                const { segmentationId, type } = specifier;\n                state.viewportSegRepresentations[viewportId] =\n                    currentRepresentations.filter((representation) => {\n                        const shouldRemove = (segmentationId &&\n                            type &&\n                            representation.segmentationId === segmentationId &&\n                            representation.type === type) ||\n                            (segmentationId &&\n                                !type &&\n                                representation.segmentationId === segmentationId) ||\n                            (!segmentationId && type && representation.type === type);\n                        if (shouldRemove) {\n                            removedRepresentations.push(representation);\n                            if (representation.active) {\n                                activeRepresentationRemoved = true;\n                            }\n                        }\n                        return !shouldRemove;\n                    });\n                if (state.viewportSegRepresentations[viewportId].length === 0) {\n                    delete state.viewportSegRepresentations[viewportId];\n                }\n                else if (activeRepresentationRemoved) {\n                    state.viewportSegRepresentations[viewportId][0].active = true;\n                }\n            }\n        });\n        return removedRepresentations;\n    }\n    removeSegmentationRepresentations(viewportId, specifier) {\n        const removedRepresentations = this.removeSegmentationRepresentationsInternal(viewportId, specifier);\n        removedRepresentations.forEach((representation) => {\n            triggerSegmentationRepresentationRemoved(viewportId, representation.segmentationId, representation.type);\n        });\n        const remainingRepresentations = this.getSegmentationRepresentations(viewportId);\n        if (remainingRepresentations.length > 0 &&\n            remainingRepresentations[0].active) {\n            triggerSegmentationRepresentationModified(viewportId, remainingRepresentations[0].segmentationId, remainingRepresentations[0].type);\n        }\n        return removedRepresentations;\n    }\n    removeSegmentationRepresentation(viewportId, specifier, suppressEvent) {\n        const removedRepresentations = this.removeSegmentationRepresentationsInternal(viewportId, specifier);\n        if (!suppressEvent) {\n            removedRepresentations.forEach(({ segmentationId, type }) => {\n                triggerSegmentationRepresentationRemoved(viewportId, segmentationId, type);\n            });\n        }\n        return removedRepresentations;\n    }\n    _updateLabelmapImageIdReferenceMap({ segmentationId, referenceImageId, labelmapImageId, }) {\n        const key = this._generateMapKey({ segmentationId, referenceImageId });\n        if (!this._labelmapImageIdReferenceMap.has(key)) {\n            this._labelmapImageIdReferenceMap.set(key, [labelmapImageId]);\n            return;\n        }\n        const currentValues = this._labelmapImageIdReferenceMap.get(key);\n        const newValues = Array.from(new Set([...currentValues, labelmapImageId]));\n        this._labelmapImageIdReferenceMap.set(key, newValues);\n    }\n    _setActiveSegmentation(state, viewportId, segmentationId) {\n        const viewport = state.viewportSegRepresentations[viewportId];\n        if (!viewport) {\n            return;\n        }\n        viewport.forEach((value) => {\n            value.active = value.segmentationId === segmentationId;\n        });\n    }\n    setActiveSegmentation(viewportId, segmentationId) {\n        this.updateState((state) => {\n            const viewport = state.viewportSegRepresentations[viewportId];\n            if (!viewport) {\n                return;\n            }\n            viewport.forEach((value) => {\n                value.active = value.segmentationId === segmentationId;\n            });\n        });\n        triggerSegmentationRepresentationModified(viewportId, segmentationId);\n    }\n    getActiveSegmentation(viewportId) {\n        if (!this.state.viewportSegRepresentations[viewportId]) {\n            return;\n        }\n        const activeSegRep = this.state.viewportSegRepresentations[viewportId].find((segRep) => segRep.active);\n        if (!activeSegRep) {\n            return;\n        }\n        return this.getSegmentation(activeSegRep.segmentationId);\n    }\n    getSegmentationRepresentations(viewportId, specifier = {}) {\n        const viewportRepresentations = this.state.viewportSegRepresentations[viewportId];\n        if (!viewportRepresentations) {\n            return [];\n        }\n        if (!specifier.type && !specifier.segmentationId) {\n            return viewportRepresentations;\n        }\n        return viewportRepresentations.filter((representation) => {\n            const typeMatch = specifier.type\n                ? representation.type === specifier.type\n                : true;\n            const idMatch = specifier.segmentationId\n                ? representation.segmentationId === specifier.segmentationId\n                : true;\n            return typeMatch && idMatch;\n        });\n    }\n    getSegmentationRepresentation(viewportId, specifier) {\n        return this.getSegmentationRepresentations(viewportId, specifier)[0];\n    }\n    getSegmentationRepresentationVisibility(viewportId, specifier) {\n        const viewportRepresentation = this.getSegmentationRepresentation(viewportId, specifier);\n        return viewportRepresentation?.visible;\n    }\n    setSegmentationRepresentationVisibility(viewportId, specifier, visible) {\n        this.updateState((state) => {\n            const viewportRepresentations = this.getSegmentationRepresentations(viewportId, specifier);\n            if (!viewportRepresentations) {\n                return;\n            }\n            viewportRepresentations.forEach((representation) => {\n                representation.visible = visible;\n                Object.entries(representation.segments).forEach(([segmentIndex, segment]) => {\n                    segment.visible = visible;\n                });\n            });\n        });\n        triggerSegmentationRepresentationModified(viewportId, specifier.segmentationId, specifier.type);\n    }\n    addColorLUT(colorLUT, lutIndex) {\n        this.updateState((state) => {\n            if (state.colorLUT[lutIndex]) {\n                console.warn('Color LUT table already exists, overwriting');\n            }\n            state.colorLUT[lutIndex] = csUtils.deepClone(colorLUT);\n        });\n    }\n    removeColorLUT(colorLUTIndex) {\n        this.updateState((state) => {\n            delete state.colorLUT[colorLUTIndex];\n        });\n    }\n    _getStackIdForImageIds(imageIds) {\n        return imageIds\n            .map((imageId) => imageId.slice(-Math.round(imageId.length * 0.15)))\n            .join('_');\n    }\n    getAllViewportSegmentationRepresentations() {\n        return Object.entries(this.state.viewportSegRepresentations).map(([viewportId, representations]) => ({\n            viewportId,\n            representations,\n        }));\n    }\n    getSegmentationRepresentationsBySegmentationId(segmentationId) {\n        const result = [];\n        Object.entries(this.state.viewportSegRepresentations).forEach(([viewportId, viewportReps]) => {\n            const filteredReps = viewportReps.filter((representation) => representation.segmentationId === segmentationId);\n            if (filteredReps.length > 0) {\n                result.push({ viewportId, representations: filteredReps });\n            }\n        });\n        return result;\n    }\n    _generateMapKey({ segmentationId, referenceImageId }) {\n        return `${segmentationId}-${referenceImageId}`;\n    }\n}\nasync function internalComputeVolumeLabelmapFromStack({ imageIds, options, }) {\n    const segmentationImageIds = imageIds;\n    const volumeId = options?.volumeId || csUtils.uuidv4();\n    await volumeLoader.createAndCacheVolumeFromImages(volumeId, segmentationImageIds);\n    return { volumeId };\n}\nasync function internalConvertStackToVolumeLabelmap({ segmentationId, options, }) {\n    const segmentation = defaultSegmentationStateManager.getSegmentation(segmentationId);\n    const data = segmentation.representationData\n        .Labelmap;\n    const { volumeId } = await internalComputeVolumeLabelmapFromStack({\n        imageIds: data.imageIds,\n        options,\n    });\n    segmentation.representationData.Labelmap.volumeId = volumeId;\n}\nfunction getDefaultRenderingConfig(type) {\n    const cfun = vtkColorTransferFunction.newInstance();\n    const ofun = vtkPiecewiseFunction.newInstance();\n    ofun.addPoint(0, 0);\n    if (type === SegmentationRepresentations.Labelmap) {\n        return {\n            cfun,\n            ofun,\n        };\n    }\n    else {\n        return {};\n    }\n}\nconst defaultSegmentationStateManager = new SegmentationStateManager('DEFAULT');\nexport { internalConvertStackToVolumeLabelmap, internalComputeVolumeLabelmapFromStack, defaultSegmentationStateManager, };\n","import getDefaultContourConfig from '../../tools/displayTools/Contour/contourConfig';\nimport getDefaultLabelmapConfig from '../../tools/displayTools/Labelmap/labelmapConfig';\nimport * as Enums from '../../enums';\nimport { utilities } from '@cornerstonejs/core';\nclass SegmentationStyle {\n    constructor() {\n        this.config = {\n            global: {},\n            segmentations: {},\n            viewportsStyle: {},\n        };\n    }\n    setStyle(specifier, styles) {\n        const { viewportId, segmentationId, type, segmentIndex } = specifier;\n        const currentStyles = this.getStyle(specifier);\n        let updatedStyles;\n        if (!viewportId && !segmentationId) {\n            updatedStyles = {\n                ...currentStyles,\n                ...styles,\n            };\n        }\n        else {\n            updatedStyles = this.copyActiveToInactiveIfNotProvided({\n                ...currentStyles,\n                ...styles,\n            }, type);\n        }\n        if (!type) {\n            throw new Error('Type is required to set a style');\n        }\n        if (viewportId) {\n            if (!this.config.viewportsStyle[viewportId]) {\n                this.config.viewportsStyle[viewportId] = {\n                    renderInactiveSegmentations: false,\n                    representations: {},\n                };\n            }\n            const representations = this.config.viewportsStyle[viewportId].representations;\n            if (segmentationId) {\n                if (!representations[segmentationId]) {\n                    representations[segmentationId] = {};\n                }\n                if (!representations[segmentationId][type]) {\n                    representations[segmentationId][type] = {};\n                }\n                const repConfig = representations[segmentationId][type];\n                if (segmentIndex !== undefined) {\n                    if (!repConfig.perSegment) {\n                        repConfig.perSegment = {};\n                    }\n                    repConfig.perSegment[segmentIndex] = updatedStyles;\n                }\n                else {\n                    repConfig.allSegments = updatedStyles;\n                }\n            }\n            else {\n                const ALL_SEGMENTATIONS_KEY = '__allSegmentations__';\n                if (!representations[ALL_SEGMENTATIONS_KEY]) {\n                    representations[ALL_SEGMENTATIONS_KEY] = {};\n                }\n                if (!representations[ALL_SEGMENTATIONS_KEY][type]) {\n                    representations[ALL_SEGMENTATIONS_KEY][type] = {};\n                }\n                representations[ALL_SEGMENTATIONS_KEY][type].allSegments =\n                    updatedStyles;\n            }\n        }\n        else if (segmentationId) {\n            if (!this.config.segmentations[segmentationId]) {\n                this.config.segmentations[segmentationId] = {};\n            }\n            if (!this.config.segmentations[segmentationId][type]) {\n                this.config.segmentations[segmentationId][type] = {};\n            }\n            const segConfig = this.config.segmentations[segmentationId][type];\n            if (segmentIndex !== undefined) {\n                if (!segConfig.perSegment) {\n                    segConfig.perSegment = {};\n                }\n                segConfig.perSegment[segmentIndex] = updatedStyles;\n            }\n            else {\n                segConfig.allSegments = updatedStyles;\n            }\n        }\n        else {\n            this.config.global[type] = updatedStyles;\n        }\n    }\n    copyActiveToInactiveIfNotProvided(styles, type) {\n        const processedStyles = { ...styles };\n        if (type === Enums.SegmentationRepresentations.Labelmap) {\n            const labelmapStyles = processedStyles;\n            labelmapStyles.renderOutlineInactive ??= labelmapStyles.renderOutline;\n            labelmapStyles.outlineWidthInactive ??= labelmapStyles.outlineWidth;\n            labelmapStyles.renderFillInactive ??= labelmapStyles.renderFill;\n            labelmapStyles.fillAlphaInactive ??= labelmapStyles.fillAlpha;\n            labelmapStyles.outlineOpacityInactive ??= labelmapStyles.outlineOpacity;\n        }\n        else if (type === Enums.SegmentationRepresentations.Contour) {\n            const contourStyles = processedStyles;\n            contourStyles.outlineWidthInactive ??= contourStyles.outlineWidth;\n            contourStyles.outlineOpacityInactive ??= contourStyles.outlineOpacity;\n            contourStyles.outlineDashInactive ??= contourStyles.outlineDash;\n            contourStyles.renderOutlineInactive ??= contourStyles.renderOutline;\n            contourStyles.renderFillInactive ??= contourStyles.renderFill;\n            contourStyles.fillAlphaInactive ??= contourStyles.fillAlpha;\n        }\n        return processedStyles;\n    }\n    getStyle(specifier) {\n        const { viewportId, segmentationId, type, segmentIndex } = specifier;\n        let combinedStyle = this.getDefaultStyle(type);\n        let renderInactiveSegmentations = false;\n        if (this.config.global[type]) {\n            combinedStyle = {\n                ...combinedStyle,\n                ...this.config.global[type],\n            };\n        }\n        if (this.config.segmentations[segmentationId]?.[type]) {\n            combinedStyle = {\n                ...combinedStyle,\n                ...this.config.segmentations[segmentationId][type].allSegments,\n            };\n            if (segmentIndex !== undefined &&\n                this.config.segmentations[segmentationId][type].perSegment?.[segmentIndex]) {\n                combinedStyle = {\n                    ...combinedStyle,\n                    ...this.config.segmentations[segmentationId][type].perSegment[segmentIndex],\n                };\n            }\n        }\n        if (viewportId && this.config.viewportsStyle[viewportId]) {\n            renderInactiveSegmentations =\n                this.config.viewportsStyle[viewportId].renderInactiveSegmentations;\n            const allSegmentationsKey = '__allSegmentations__';\n            if (this.config.viewportsStyle[viewportId].representations[allSegmentationsKey]?.[type]) {\n                combinedStyle = {\n                    ...combinedStyle,\n                    ...this.config.viewportsStyle[viewportId].representations[allSegmentationsKey][type].allSegments,\n                };\n            }\n            if (segmentationId &&\n                this.config.viewportsStyle[viewportId].representations[segmentationId]?.[type]) {\n                combinedStyle = {\n                    ...combinedStyle,\n                    ...this.config.viewportsStyle[viewportId].representations[segmentationId][type].allSegments,\n                };\n                if (segmentIndex !== undefined &&\n                    this.config.viewportsStyle[viewportId].representations[segmentationId][type].perSegment?.[segmentIndex]) {\n                    combinedStyle = {\n                        ...combinedStyle,\n                        ...this.config.viewportsStyle[viewportId].representations[segmentationId][type].perSegment[segmentIndex],\n                    };\n                }\n            }\n        }\n        return combinedStyle;\n    }\n    getRenderInactiveSegmentations(viewportId) {\n        return this.config.viewportsStyle[viewportId]?.renderInactiveSegmentations;\n    }\n    setRenderInactiveSegmentations(viewportId, renderInactiveSegmentations) {\n        if (!this.config.viewportsStyle[viewportId]) {\n            this.config.viewportsStyle[viewportId] = {\n                renderInactiveSegmentations: false,\n                representations: {},\n            };\n        }\n        this.config.viewportsStyle[viewportId].renderInactiveSegmentations =\n            renderInactiveSegmentations;\n    }\n    getDefaultStyle(type) {\n        switch (type) {\n            case Enums.SegmentationRepresentations.Labelmap:\n                return getDefaultLabelmapConfig();\n            case Enums.SegmentationRepresentations.Contour:\n                return getDefaultContourConfig();\n            case Enums.SegmentationRepresentations.Surface:\n                return {};\n            default:\n                throw new Error(`Unknown representation type: ${type}`);\n        }\n    }\n    clearSegmentationStyle(segmentationId) {\n        if (this.config.segmentations[segmentationId]) {\n            delete this.config.segmentations[segmentationId];\n        }\n    }\n    clearAllSegmentationStyles() {\n        this.config.segmentations = {};\n    }\n    clearViewportStyle(viewportId) {\n        if (this.config.viewportsStyle[viewportId]) {\n            delete this.config.viewportsStyle[viewportId];\n        }\n    }\n    clearAllViewportStyles() {\n        for (const viewportId in this.config.viewportsStyle) {\n            const viewportStyle = this.config.viewportsStyle[viewportId];\n            const renderInactiveSegmentations = viewportStyle.renderInactiveSegmentations;\n            this.config.viewportsStyle[viewportId] = {\n                renderInactiveSegmentations,\n                representations: {},\n            };\n        }\n    }\n    resetToGlobalStyle() {\n        this.clearAllSegmentationStyles();\n        this.clearAllViewportStyles();\n    }\n    hasCustomStyle(specifier) {\n        const { type } = specifier;\n        const style = this.getStyle(specifier);\n        const defaultStyle = this.getDefaultStyle(type);\n        return !utilities.deepEqual(style, defaultStyle);\n    }\n}\nconst segmentationStyle = new SegmentationStyle();\nexport { segmentationStyle };\n","import { getActiveSegmentation as _getActiveSegmentation } from './getActiveSegmentation';\nimport { setActiveSegmentation as _setActiveSegmentation } from './setActiveSegmentation';\nfunction getActiveSegmentation(viewportId) {\n    return _getActiveSegmentation(viewportId);\n}\nfunction setActiveSegmentation(viewportId, segmentationId) {\n    _setActiveSegmentation(viewportId, segmentationId);\n}\nexport { getActiveSegmentation, setActiveSegmentation, };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function setActiveSegmentation(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationStateManager.setActiveSegmentation(viewportId, segmentationId);\n}\n","import { utilities } from '@cornerstonejs/core';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { getNextColorLUTIndex } from './getNextColorLUTIndex';\nimport CORNERSTONE_COLOR_LUT from '../../constants/COLOR_LUT';\nexport function addColorLUT(colorLUT, index) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const indexToUse = index ?? getNextColorLUTIndex();\n    let colorLUTToUse = [...colorLUT];\n    if (!utilities.isEqual(colorLUTToUse[0], [0, 0, 0, 0])) {\n        console.warn('addColorLUT: [0, 0, 0, 0] color is not provided for the background color (segmentIndex =0), automatically adding it');\n        colorLUTToUse = [[0, 0, 0, 0], ...colorLUTToUse];\n    }\n    colorLUTToUse = colorLUTToUse.map((color) => {\n        if (color.length === 3) {\n            return [color[0], color[1], color[2], 255];\n        }\n        return color;\n    });\n    if (colorLUTToUse.length < 255) {\n        const missingColorLUTs = CORNERSTONE_COLOR_LUT.slice(colorLUTToUse.length);\n        colorLUTToUse = [...colorLUTToUse, ...missingColorLUTs];\n    }\n    segmentationStateManager.addColorLUT(colorLUTToUse, indexToUse);\n    return indexToUse;\n}\n","import { SegmentationRepresentations } from '../../enums';\nimport { internalAddSegmentationRepresentation } from './internalAddSegmentationRepresentation';\nexport function addSegmentationRepresentations(viewportId, segmentationInputArray) {\n    segmentationInputArray.map((segmentationInput) => {\n        return internalAddSegmentationRepresentation(viewportId, segmentationInput);\n    });\n}\nfunction addContourRepresentationToViewport(viewportId, contourInputArray) {\n    return addSegmentationRepresentations(viewportId, contourInputArray.map((input) => ({\n        ...input,\n        type: SegmentationRepresentations.Contour,\n    })));\n}\nfunction addContourRepresentationToViewportMap(viewportInputMap) {\n    const results = {};\n    for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {\n        results[viewportId] = addContourRepresentationToViewport(viewportId, inputArray);\n    }\n    return results;\n}\nfunction addLabelmapRepresentationToViewport(viewportId, labelmapInputArray) {\n    return addSegmentationRepresentations(viewportId, labelmapInputArray.map((input) => ({\n        ...input,\n        type: SegmentationRepresentations.Labelmap,\n    })));\n}\nfunction addLabelmapRepresentationToViewportMap(viewportInputMap) {\n    const results = {};\n    for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {\n        results[viewportId] = addLabelmapRepresentationToViewport(viewportId, inputArray.map((input) => ({\n            ...input,\n            type: SegmentationRepresentations.Labelmap,\n        })));\n    }\n}\nfunction addSurfaceRepresentationToViewport(viewportId, surfaceInputArray) {\n    return addSegmentationRepresentations(viewportId, surfaceInputArray.map((input) => ({\n        ...input,\n        type: SegmentationRepresentations.Surface,\n    })));\n}\nfunction addSurfaceRepresentationToViewportMap(viewportInputMap) {\n    const results = {};\n    for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {\n        results[viewportId] = addSurfaceRepresentationToViewport(viewportId, inputArray);\n    }\n    return results;\n}\nexport { addContourRepresentationToViewport, addLabelmapRepresentationToViewport, addSurfaceRepresentationToViewport, addContourRepresentationToViewportMap, addLabelmapRepresentationToViewportMap, addSurfaceRepresentationToViewportMap, };\n","import { SegmentationRepresentations } from '../../../enums';\nimport { cache } from '@cornerstonejs/core';\nfunction normalizeSegmentationInput(segmentationInput) {\n    const { segmentationId, representation, config } = segmentationInput;\n    const { type, data: inputData } = representation;\n    const data = inputData ? { ...inputData } : {};\n    if (!data) {\n        throw new Error('Segmentation representation data may not be undefined');\n    }\n    if (type === SegmentationRepresentations.Contour) {\n        normalizeContourData(data);\n    }\n    const normalizedSegments = normalizeSegments(config?.segments, type, data);\n    delete config?.segments;\n    return {\n        segmentationId,\n        label: config?.label ?? null,\n        cachedStats: config?.cachedStats ?? {},\n        segments: normalizedSegments,\n        representationData: {\n            [type]: {\n                ...data,\n            },\n        },\n    };\n}\nfunction normalizeContourData(contourData) {\n    contourData.geometryIds = contourData.geometryIds ?? [];\n    contourData.annotationUIDsMap = contourData.annotationUIDsMap ?? new Map();\n}\nfunction normalizeSegments(segmentsConfig, type, data) {\n    const normalizedSegments = {};\n    if (segmentsConfig) {\n        Object.entries(segmentsConfig).forEach(([segmentIndex, segment]) => {\n            const { label, locked, cachedStats, active, ...rest } = segment;\n            const normalizedSegment = {\n                segmentIndex: Number(segmentIndex),\n                label: label ?? `Segment ${segmentIndex}`,\n                locked: locked ?? false,\n                cachedStats: cachedStats ?? {},\n                active: active ?? false,\n                ...rest,\n            };\n            normalizedSegments[segmentIndex] = normalizedSegment;\n        });\n    }\n    else if (type === SegmentationRepresentations.Contour) {\n        normalizeContourSegments(normalizedSegments, data);\n    }\n    else if (type === SegmentationRepresentations.Surface) {\n        normalizeSurfaceSegments(normalizedSegments, data);\n    }\n    else {\n        normalizedSegments[1] = createDefaultSegment();\n    }\n    return normalizedSegments;\n}\nfunction normalizeContourSegments(normalizedSegments, contourData) {\n    const { geometryIds } = contourData;\n    geometryIds?.forEach((geometryId) => {\n        const geometry = cache.getGeometry(geometryId);\n        if (geometry?.data) {\n            const { segmentIndex } = geometry.data;\n            normalizedSegments[segmentIndex] = { segmentIndex };\n        }\n    });\n}\nfunction normalizeSurfaceSegments(normalizedSegments, surfaceData) {\n    const { geometryIds } = surfaceData;\n    geometryIds?.forEach((geometryId) => {\n        const geometry = cache.getGeometry(geometryId);\n        if (geometry?.data) {\n            const { segmentIndex } = geometry.data;\n            normalizedSegments[segmentIndex] = { segmentIndex };\n        }\n    });\n}\nfunction createDefaultSegment() {\n    return {\n        segmentIndex: 1,\n        label: 'Segment 1',\n        locked: false,\n        cachedStats: {},\n        active: true,\n    };\n}\nexport default normalizeSegmentationInput;\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nimport normalizeSegmentationInput from './helpers/normalizeSegmentationInput';\nexport function addSegmentations(segmentationInputArray, suppressEvents) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationInputArray.forEach((segmentationInput) => {\n        const segmentation = normalizeSegmentationInput(segmentationInput);\n        segmentationStateManager.addSegmentation(segmentation);\n        if (!suppressEvents) {\n            triggerSegmentationModified(segmentation.segmentationId);\n        }\n    });\n}\nexport default addSegmentations;\n","import { addColorLUT as _addColorLUT } from '../addColorLUT';\nimport { getColorLUT as _getColorLUT } from '../getColorLUT';\nimport { getSegmentationRepresentations } from '../getSegmentationRepresentation';\nimport { triggerSegmentationRepresentationModified } from '../triggerSegmentationEvents';\nfunction addColorLUT(colorLUT, colorLUTIndex) {\n    if (!colorLUT) {\n        throw new Error('addColorLUT: colorLUT is required');\n    }\n    return _addColorLUT(colorLUT, colorLUTIndex);\n}\nfunction setColorLUT(viewportId, segmentationId, colorLUTsIndex) {\n    if (!_getColorLUT(colorLUTsIndex)) {\n        throw new Error(`setColorLUT: could not find colorLUT with index ${colorLUTsIndex}`);\n    }\n    const segmentationRepresentations = getSegmentationRepresentations(viewportId, { segmentationId });\n    if (!segmentationRepresentations) {\n        throw new Error(`viewport specific state for viewport ${viewportId} does not exist`);\n    }\n    segmentationRepresentations.forEach((segmentationRepresentation) => {\n        segmentationRepresentation.colorLUTIndex = colorLUTsIndex;\n    });\n    triggerSegmentationRepresentationModified(viewportId, segmentationId);\n}\nfunction getSegmentIndexColor(viewportId, segmentationId, segmentIndex) {\n    const representations = getSegmentationRepresentations(viewportId, {\n        segmentationId,\n    });\n    if (!representations || representations.length === 0) {\n        return null;\n    }\n    const representation = representations[0];\n    const { colorLUTIndex } = representation;\n    const colorLUT = _getColorLUT(colorLUTIndex);\n    let colorValue = colorLUT[segmentIndex];\n    if (!colorValue) {\n        if (typeof segmentIndex !== 'number') {\n            console.warn(`Can't create colour for LUT index ${segmentIndex}`);\n            return null;\n        }\n        colorValue = colorLUT[segmentIndex] = [0, 0, 0, 0];\n    }\n    return colorValue;\n}\nfunction setSegmentIndexColor(viewportId, segmentationId, segmentIndex, color) {\n    const colorReference = getSegmentIndexColor(viewportId, segmentationId, segmentIndex);\n    for (let i = 0; i < color.length; i++) {\n        colorReference[i] = color[i];\n    }\n    triggerSegmentationRepresentationModified(viewportId, segmentationId);\n}\nexport { getSegmentIndexColor, addColorLUT, setColorLUT, setSegmentIndexColor };\n","import { triggerEvent, eventTarget } from '@cornerstonejs/core';\nimport { Events } from '../../../enums';\nimport { setSegmentationDirty } from '../../../utilities/segmentation/utilities';\nexport function triggerSegmentationDataModified(segmentationId, modifiedSlicesToUse, segmentIndex) {\n    const eventDetail = {\n        segmentationId,\n        modifiedSlicesToUse,\n        segmentIndex,\n    };\n    setSegmentationDirty(segmentationId);\n    triggerEvent(eventTarget, Events.SEGMENTATION_DATA_MODIFIED, eventDetail);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getActiveSegmentation(viewportId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getActiveSegmentation(viewportId);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getNextColorLUTIndex() {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getNextColorLUTIndex();\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getSegmentationRepresentations(viewportId, specifier = {}) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getSegmentationRepresentations(viewportId, specifier);\n}\nexport function getSegmentationRepresentation(viewportId, specifier) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    if (!specifier.segmentationId || !specifier.type) {\n        throw new Error('getSegmentationRepresentation: No segmentationId or type provided, you need to provide at least one of them');\n    }\n    const representations = segmentationStateManager.getSegmentationRepresentations(viewportId, specifier);\n    return representations?.[0];\n}\nexport function getSegmentationRepresentationsBySegmentationId(segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getSegmentationRepresentationsBySegmentationId(segmentationId);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getSegmentationRepresentationVisibility(viewportId, specifier) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getSegmentationRepresentationVisibility(viewportId, specifier);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getSegmentations() {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const state = segmentationStateManager.getState();\n    return state.segmentations;\n}\n","import { getSegmentation } from './getSegmentation';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getViewportSegmentations(viewportId, type) {\n    const viewportRepresentations = getViewportSegmentationRepresentations(viewportId);\n    const segmentations = viewportRepresentations.map((representation) => {\n        if (type && representation.type === type) {\n            return getSegmentation(representation.segmentationId);\n        }\n        return getSegmentation(representation.segmentationId);\n    });\n    const filteredSegmentations = segmentations.filter((segmentation) => segmentation !== undefined);\n    return filteredSegmentations;\n}\nexport function getViewportSegmentationRepresentations(viewportId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const state = segmentationStateManager.getState();\n    const viewportRepresentations = state.viewportSegRepresentations[viewportId];\n    return viewportRepresentations;\n}\n","import { cache } from '@cornerstonejs/core';\nimport { getSegmentation } from '../getSegmentation';\nimport { updateStackSegmentationState } from '../helpers/updateStackSegmentationState';\nexport async function computeStackLabelmapFromVolume({ volumeId, }) {\n    const segmentationVolume = cache.getVolume(volumeId);\n    return { imageIds: segmentationVolume.imageIds };\n}\nexport function convertVolumeToStackLabelmap({ segmentationId, options, }) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        return;\n    }\n    const { volumeId } = segmentation.representationData\n        .Labelmap;\n    const segmentationVolume = cache.getVolume(volumeId);\n    return updateStackSegmentationState({\n        segmentationId,\n        viewportId: options.viewportId,\n        imageIds: segmentationVolume.imageIds,\n        options,\n    });\n}\n","import { internalComputeVolumeLabelmapFromStack } from '../SegmentationStateManager';\nexport async function computeVolumeLabelmapFromStack(args) {\n    return internalComputeVolumeLabelmapFromStack(args);\n}\n","import { removeContourRepresentation, removeLabelmapRepresentation, removeSegmentationRepresentation, removeSurfaceRepresentation, removeSegmentationRepresentations, removeAllSegmentationRepresentations, } from './removeSegmentationRepresentations';\nimport { addContourRepresentationToViewport, addContourRepresentationToViewportMap, addSurfaceRepresentationToViewport, addSurfaceRepresentationToViewportMap, addLabelmapRepresentationToViewport, addLabelmapRepresentationToViewportMap, addSegmentationRepresentations, } from './addSegmentationRepresentationsToViewport';\nimport { addSegmentations } from './addSegmentations';\nimport addRepresentationData from './internalAddRepresentationData';\nimport { updateSegmentations } from './updateSegmentations';\nimport * as activeSegmentation from './activeSegmentation';\nimport * as segmentLocking from './segmentLocking';\nimport * as state from './segmentationState';\nimport * as config from './config';\nimport * as segmentIndex from './segmentIndex';\nimport * as triggerSegmentationEvents from './triggerSegmentationEvents';\nimport * as utilities from './utilities';\nimport { convertStackToVolumeLabelmap } from './helpers/convertStackToVolumeLabelmap';\nimport { computeVolumeLabelmapFromStack } from './helpers/computeVolumeLabelmapFromStack';\nimport { clearSegmentValue } from './helpers/clearSegmentValue';\nimport { convertVolumeToStackLabelmap } from './helpers/computeStackLabelmapFromVolume';\nimport { removeSegment } from './removeSegment';\nimport { getLabelmapImageIds } from './getLabelmapImageIds';\nimport * as strategies from './../../tools/segmentation/strategies';\nimport { removeAllSegmentations, removeSegmentation, } from './removeSegmentation';\nimport { segmentationStyle } from './SegmentationStyle';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { getCurrentLabelmapImageIdsForViewport, getLabelmapImageIdsForImageId, } from './getCurrentLabelmapImageIdForViewport';\nimport { getActiveSegmentation } from './getActiveSegmentation';\nconst helpers = {\n    clearSegmentValue,\n    convertStackToVolumeLabelmap,\n    computeVolumeLabelmapFromStack,\n    convertVolumeToStackLabelmap,\n};\nexport { removeSegmentationRepresentation, removeContourRepresentation, removeLabelmapRepresentation, removeSurfaceRepresentation, removeAllSegmentations, removeSegmentation, removeSegmentationRepresentations, addLabelmapRepresentationToViewport, addLabelmapRepresentationToViewportMap, addSegmentationRepresentations, removeAllSegmentationRepresentations, addContourRepresentationToViewport, addContourRepresentationToViewportMap, addSurfaceRepresentationToViewport, addSurfaceRepresentationToViewportMap, addSegmentations, updateSegmentations, state, activeSegmentation, segmentLocking, config, segmentIndex, triggerSegmentationEvents, utilities, helpers, removeSegment, getLabelmapImageIds, addRepresentationData, strategies, segmentationStyle, defaultSegmentationStateManager, getCurrentLabelmapImageIdsForViewport, getLabelmapImageIdsForImageId, getActiveSegmentation, };\n","import { getSegmentation } from './getSegmentation';\nimport SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nfunction internalAddRepresentationData({ segmentationId, type, data, }) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`Segmentation ${segmentationId} not found`);\n    }\n    if (segmentation.representationData[type]) {\n        console.warn(`Representation data of type ${type} already exists for segmentation ${segmentationId}, overwriting it.`);\n    }\n    switch (type) {\n        case SegmentationRepresentations.Labelmap:\n            if (data) {\n                segmentation.representationData[type] =\n                    data;\n            }\n            break;\n        case SegmentationRepresentations.Contour:\n            if (data) {\n                segmentation.representationData[type] = data;\n            }\n            break;\n        case SegmentationRepresentations.Surface:\n            if (data) {\n                segmentation.representationData[type] = data;\n            }\n            break;\n        default:\n            throw new Error(`Invalid representation type ${type}`);\n    }\n}\nexport default internalAddRepresentationData;\n","import CORNERSTONE_COLOR_LUT from '../../constants/COLOR_LUT';\nimport { triggerAnnotationRenderForViewportIds } from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { SegmentationRepresentations } from '../../enums';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nimport { addColorLUT } from './addColorLUT';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { getActiveSegmentIndex, setActiveSegmentIndex } from './segmentIndex';\nfunction internalAddSegmentationRepresentation(viewportId, representationInput) {\n    const { segmentationId, config } = representationInput;\n    const renderingConfig = {\n        colorLUTIndex: getColorLUTIndex(config),\n        ...config,\n    };\n    defaultSegmentationStateManager.addSegmentationRepresentation(viewportId, segmentationId, representationInput.type, renderingConfig);\n    if (!getActiveSegmentIndex(segmentationId)) {\n        let firstSegmentIndex = 1;\n        const segmentation = defaultSegmentationStateManager.getSegmentation(segmentationId);\n        if (segmentation) {\n            const segmentKeys = Object.keys(segmentation.segments);\n            if (segmentKeys.length > 0) {\n                firstSegmentIndex = segmentKeys.map((k) => Number(k)).sort()[0];\n            }\n        }\n        setActiveSegmentIndex(segmentationId, firstSegmentIndex);\n    }\n    if (representationInput.type === SegmentationRepresentations.Contour) {\n        triggerAnnotationRenderForViewportIds([viewportId]);\n    }\n    triggerSegmentationModified(segmentationId);\n}\nfunction getColorLUTIndex(config) {\n    const { colorLUTOrIndex } = config || {};\n    if (colorLUTOrIndex === undefined) {\n        const index = addColorLUT(JSON.parse(JSON.stringify(CORNERSTONE_COLOR_LUT)));\n        return index;\n    }\n    if (typeof colorLUTOrIndex === 'number') {\n        return colorLUTOrIndex;\n    }\n    if (Array.isArray(colorLUTOrIndex) &&\n        colorLUTOrIndex.every((item) => Array.isArray(item) && item.length === 4)) {\n        const index = addColorLUT(colorLUTOrIndex);\n        return index;\n    }\n    const index = addColorLUT(JSON.parse(JSON.stringify(CORNERSTONE_COLOR_LUT)));\n    return index;\n}\nexport { internalAddSegmentationRepresentation };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { triggerSegmentationRemoved } from './triggerSegmentationEvents';\nimport { removeSegmentationRepresentations } from './removeSegmentationRepresentations';\nexport function removeSegmentation(segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const viewportsWithSegmentation = segmentationStateManager\n        .getAllViewportSegmentationRepresentations()\n        .filter(({ representations }) => representations.some((rep) => rep.segmentationId === segmentationId))\n        .map(({ viewportId }) => viewportId);\n    viewportsWithSegmentation.forEach((viewportId) => {\n        removeSegmentationRepresentations(viewportId, { segmentationId });\n    });\n    segmentationStateManager.removeSegmentation(segmentationId);\n    triggerSegmentationRemoved(segmentationId);\n}\nexport function removeAllSegmentations() {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const segmentations = segmentationStateManager.getState().segmentations;\n    const segmentationIds = segmentations.map((segmentation) => segmentation.segmentationId);\n    segmentationIds.forEach((segmentationId) => {\n        removeSegmentation(segmentationId);\n    });\n    segmentationStateManager.resetState();\n}\n","import SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nimport labelmapDisplay from '../../tools/displayTools/Labelmap/labelmapDisplay';\nimport contourDisplay from '../../tools/displayTools/Contour/contourDisplay';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nimport { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { surfaceDisplay } from '../../tools/displayTools/Surface';\nfunction removeSegmentationRepresentation(viewportId, specifier, immediate) {\n    return _removeSegmentationRepresentations(viewportId, specifier, immediate);\n}\nfunction removeSegmentationRepresentations(viewportId, specifier, immediate) {\n    return _removeSegmentationRepresentations(viewportId, specifier, immediate);\n}\nfunction _removeSegmentationRepresentations(viewportId, specifier, immediate) {\n    const { segmentationId, type } = specifier;\n    _removeRepresentationObject(viewportId, segmentationId, type, immediate);\n    return defaultSegmentationStateManager.removeSegmentationRepresentations(viewportId, {\n        segmentationId,\n        type,\n    });\n}\nfunction removeAllSegmentationRepresentations() {\n    const state = defaultSegmentationStateManager.getAllViewportSegmentationRepresentations();\n    state.forEach(({ viewportId, representations }) => {\n        representations.forEach(({ segmentationId, type }) => {\n            removeSegmentationRepresentation(viewportId, {\n                segmentationId,\n                type,\n            });\n        });\n    });\n    defaultSegmentationStateManager.resetState();\n}\nfunction removeLabelmapRepresentation(viewportId, segmentationId, immediate) {\n    removeSegmentationRepresentation(viewportId, {\n        segmentationId,\n        type: SegmentationRepresentations.Labelmap,\n    }, immediate);\n}\nfunction removeContourRepresentation(viewportId, segmentationId, immediate) {\n    removeSegmentationRepresentation(viewportId, {\n        segmentationId,\n        type: SegmentationRepresentations.Contour,\n    }, immediate);\n}\nfunction removeSurfaceRepresentation(viewportId, segmentationId, immediate) {\n    removeSegmentationRepresentation(viewportId, {\n        segmentationId,\n        type: SegmentationRepresentations.Surface,\n    }, immediate);\n}\nfunction _removeRepresentationObject(viewportId, segmentationId, type, immediate) {\n    const representations = getSegmentationRepresentations(viewportId, {\n        segmentationId,\n        type,\n    });\n    representations.forEach((representation) => {\n        if (representation.type === SegmentationRepresentations.Labelmap) {\n            labelmapDisplay.removeRepresentation(viewportId, representation.segmentationId, immediate);\n        }\n        else if (representation.type === SegmentationRepresentations.Contour) {\n            contourDisplay.removeRepresentation(viewportId, representation.segmentationId, immediate);\n        }\n        else if (representation.type === SegmentationRepresentations.Surface) {\n            surfaceDisplay.removeRepresentation(viewportId, representation.segmentationId, immediate);\n        }\n    });\n    const { viewport } = getEnabledElementByViewportId(viewportId) || {};\n    if (viewport) {\n        viewport.render();\n    }\n}\nexport { removeSegmentationRepresentation, removeSegmentationRepresentations, removeAllSegmentationRepresentations, removeLabelmapRepresentation, removeContourRepresentation, removeSurfaceRepresentation, };\n","import { getToolGroupForViewport } from '../../store/ToolGroupManager';\nimport { invalidateBrushCursor } from '../../utilities/segmentation/invalidateBrushCursor';\nimport { getSegmentation } from './getSegmentation';\nimport { getViewportIdsWithSegmentation } from './getViewportIdsWithSegmentation';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nimport { getActiveSegmentIndex } from './getActiveSegmentIndex';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nfunction setActiveSegmentIndex(segmentationId, segmentIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (typeof segmentIndex === 'string') {\n        console.warn('segmentIndex is a string, converting to number');\n        segmentIndex = Number(segmentIndex);\n    }\n    Object.values(segmentation.segments).forEach((segment) => {\n        segment.active = false;\n    });\n    if (!segmentation.segments[segmentIndex]) {\n        segmentation.segments[segmentIndex] = {\n            segmentIndex,\n            label: '',\n            locked: false,\n            cachedStats: {},\n            active: false,\n        };\n    }\n    if (segmentation.segments[segmentIndex].active !== true) {\n        segmentation.segments[segmentIndex].active = true;\n        triggerSegmentationModified(segmentationId);\n    }\n    const viewportIds = getViewportIdsWithSegmentation(segmentationId);\n    viewportIds.forEach((viewportId) => {\n        const representations = getSegmentationRepresentations(viewportId, {\n            segmentationId,\n        });\n        representations.forEach((representation) => {\n            if (!representation.segments[segmentIndex]) {\n                representation.segments[segmentIndex] = {\n                    visible: true,\n                };\n            }\n        });\n    });\n    viewportIds.forEach((viewportId) => {\n        const toolGroup = getToolGroupForViewport(viewportId);\n        invalidateBrushCursor(toolGroup.id);\n    });\n}\nexport { setActiveSegmentIndex, getActiveSegmentIndex };\n","import { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nimport { setAnnotationLocked } from '../annotation/annotationLocking';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nimport { getAnnotationsUIDMapFromSegmentation } from './utilities';\nfunction _setContourSegmentationSegmentAnnotationsLocked(segmentation, segmentIndex, locked) {\n    const annotationUIDsMap = getAnnotationsUIDMapFromSegmentation(segmentation.segmentationId);\n    if (!annotationUIDsMap) {\n        return;\n    }\n    const annotationUIDs = annotationUIDsMap.get(segmentIndex);\n    if (!annotationUIDs) {\n        return;\n    }\n    annotationUIDs.forEach((annotationUID) => {\n        setAnnotationLocked(annotationUID, locked);\n    });\n}\nfunction isSegmentIndexLocked(segmentationId, segmentIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    return segments[segmentIndex].locked;\n}\nfunction setSegmentIndexLocked(segmentationId, segmentIndex, locked = true) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    segments[segmentIndex].locked = locked;\n    if (segmentation?.representationData?.Contour) {\n        _setContourSegmentationSegmentAnnotationsLocked(segmentation, segmentIndex, locked);\n    }\n    triggerSegmentationModified(segmentationId);\n}\nfunction getLockedSegmentIndices(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    const lockedSegmentIndices = Object.keys(segments).filter((segmentIndex) => segments[segmentIndex].locked);\n    return lockedSegmentIndices.map((segmentIndex) => parseInt(segmentIndex));\n}\nexport { isSegmentIndexLocked, setSegmentIndexLocked, getLockedSegmentIndices };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function removeColorLUT(colorLUTIndex) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationStateManager.removeColorLUT(colorLUTIndex);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getStackSegmentationImageIdsForViewport(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getStackSegmentationImageIdsForViewport(viewportId, segmentationId);\n}\n","import { getSegmentation } from './getSegmentation';\nimport { getSegmentations } from './getSegmentations';\nimport { addSegmentations } from './addSegmentations';\nimport { removeAllSegmentations, removeSegmentation, } from './removeSegmentation';\nimport { removeLabelmapRepresentation, removeContourRepresentation, removeSurfaceRepresentation, removeSegmentationRepresentation, removeAllSegmentationRepresentations, } from './removeSegmentationRepresentations';\nimport { addColorLUT } from './addColorLUT';\nimport { getColorLUT } from './getColorLUT';\nimport { getNextColorLUTIndex } from './getNextColorLUTIndex';\nimport { removeColorLUT } from './removeColorLUT';\nimport { getViewportSegmentations, getViewportSegmentationRepresentations, } from './getViewportSegmentations';\nimport { getViewportIdsWithSegmentation } from './getViewportIdsWithSegmentation';\nimport { getCurrentLabelmapImageIdForViewport, getCurrentLabelmapImageIdsForViewport, } from './getCurrentLabelmapImageIdForViewport';\nimport { updateLabelmapSegmentationImageReferences } from './updateLabelmapSegmentationImageReferences';\nimport { getStackSegmentationImageIdsForViewport } from './getStackSegmentationImageIdsForViewport';\nimport { getSegmentationRepresentation, getSegmentationRepresentations, getSegmentationRepresentationsBySegmentationId, } from './getSegmentationRepresentation';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nfunction destroy() {\n    defaultSegmentationStateManager.resetState();\n}\nexport { getColorLUT, getCurrentLabelmapImageIdForViewport, getCurrentLabelmapImageIdsForViewport, getNextColorLUTIndex, getSegmentation, getSegmentations, getStackSegmentationImageIdsForViewport, getViewportIdsWithSegmentation, getSegmentationRepresentation, getSegmentationRepresentations, getViewportSegmentationRepresentations, removeColorLUT, getViewportSegmentations, removeSegmentation, removeLabelmapRepresentation, removeContourRepresentation, removeSurfaceRepresentation, removeSegmentationRepresentation, removeAllSegmentationRepresentations, removeAllSegmentations, addColorLUT, addSegmentations, updateLabelmapSegmentationImageReferences, getSegmentationRepresentationsBySegmentationId, destroy, };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function updateLabelmapSegmentationImageReferences(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.updateLabelmapSegmentationImageReferences(viewportId, segmentationId);\n}\n","import { getSegmentation } from '../getSegmentation';\nexport function getAnnotationsUIDMapFromSegmentation(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        return;\n    }\n    const contourRepresentationData = segmentation.representationData\n        ?.Contour;\n    if (!contourRepresentationData) {\n        return;\n    }\n    const { annotationUIDsMap } = contourRepresentationData;\n    if (!annotationUIDsMap) {\n        return;\n    }\n    return annotationUIDsMap;\n}\n","import { getRenderingEngines } from '@cornerstonejs/core';\nimport { state } from '../state';\nfunction getToolGroupForViewport(viewportId, renderingEngineId) {\n    if (!renderingEngineId) {\n        renderingEngineId = getRenderingEngines().find((re) => re.getViewports().find((vp) => vp.id === viewportId))?.id;\n    }\n    const toolGroupFilteredByIds = state.toolGroups.filter((tg) => tg.viewportsInfo.some((vp) => vp.renderingEngineId === renderingEngineId &&\n        (!vp.viewportId || vp.viewportId === viewportId)));\n    if (!toolGroupFilteredByIds.length) {\n        return;\n    }\n    if (toolGroupFilteredByIds.length > 1) {\n        throw new Error(`Multiple tool groups found for renderingEngineId: ${renderingEngineId} and viewportId: ${viewportId}. You should only\n      have one tool group per viewport in a renderingEngine.`);\n    }\n    return toolGroupFilteredByIds[0];\n}\nexport default getToolGroupForViewport;\n","let svgNodeCache = {};\nexport function resetSvgNodeCache() {\n    svgNodeCache = {};\n}\nexport default svgNodeCache;\n","import { vec2, vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, utilities, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawLine as drawLineSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as lineSegment from '../../utilities/math/line';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getStyleProperty } from '../../stateManagement/annotation/config/helpers';\nconst { transformWorldToIndex } = csUtils;\nclass BidirectionalTool extends AnnotationTool {\n    static { this.toolName = 'Bidirectional'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            let canvasPoint1 = viewport.worldToCanvas(points[0]);\n            let canvasPoint2 = viewport.worldToCanvas(points[1]);\n            let line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            let distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            canvasPoint1 = viewport.worldToCanvas(points[2]);\n            canvasPoint2 = viewport.worldToCanvas(points[3]);\n            line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const data = annotation.data;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                handleIndex = data.handles.points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            hideElementCursor(element);\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const { renderingEngine } = getEnabledElement(element);\n            if (this.editData.handleIndex !== undefined) {\n                const { points } = data.handles;\n                const firstLineSegmentLength = vec3.distance(points[0], points[1]);\n                const secondLineSegmentLength = vec3.distance(points[2], points[3]);\n                if (secondLineSegmentLength > firstLineSegmentLength) {\n                    const longAxis = [[...points[2]], [...points[3]]];\n                    const shortAxisPoint0 = [...points[0]];\n                    const shortAxisPoint1 = [...points[1]];\n                    const longAxisVector = vec2.create();\n                    vec2.set(longAxisVector, longAxis[1][0] - longAxis[0][0], longAxis[1][1] - longAxis[1][0]);\n                    const counterClockWisePerpendicularToLongAxis = vec2.create();\n                    vec2.set(counterClockWisePerpendicularToLongAxis, -longAxisVector[1], longAxisVector[0]);\n                    const currentShortAxisVector = vec2.create();\n                    vec2.set(currentShortAxisVector, shortAxisPoint1[0] - shortAxisPoint0[0], shortAxisPoint1[1] - shortAxisPoint0[0]);\n                    let shortAxis;\n                    if (vec2.dot(currentShortAxisVector, counterClockWisePerpendicularToLongAxis) > 0) {\n                        shortAxis = [shortAxisPoint0, shortAxisPoint1];\n                    }\n                    else {\n                        shortAxis = [shortAxisPoint1, shortAxisPoint0];\n                    }\n                    data.handles.points = [\n                        longAxis[0],\n                        longAxis[1],\n                        shortAxis[0],\n                        shortAxis[1],\n                    ];\n                }\n            }\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { worldToCanvas } = viewport;\n            const { annotation, viewportIdsToRender, handleIndex, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            const worldPos = currentPoints.world;\n            data.handles.points[handleIndex] = [...worldPos];\n            const canvasCoordPoints = data.handles.points.map(worldToCanvas);\n            const canvasCoords = {\n                longLineSegment: {\n                    start: {\n                        x: canvasCoordPoints[0][0],\n                        y: canvasCoordPoints[0][1],\n                    },\n                    end: {\n                        x: canvasCoordPoints[1][0],\n                        y: canvasCoordPoints[1][1],\n                    },\n                },\n                shortLineSegment: {\n                    start: {\n                        x: canvasCoordPoints[2][0],\n                        y: canvasCoordPoints[2][1],\n                    },\n                    end: {\n                        x: canvasCoordPoints[3][0],\n                        y: canvasCoordPoints[3][1],\n                    },\n                },\n            };\n            const dist = vec2.distance(canvasCoordPoints[0], canvasCoordPoints[1]);\n            const shortAxisDistFromCenter = dist / 3;\n            const dx = canvasCoords.longLineSegment.start.x - canvasCoords.longLineSegment.end.x;\n            const dy = canvasCoords.longLineSegment.start.y - canvasCoords.longLineSegment.end.y;\n            const length = Math.sqrt(dx * dx + dy * dy);\n            const vectorX = dx / length;\n            const vectorY = dy / length;\n            const xMid = (canvasCoords.longLineSegment.start.x +\n                canvasCoords.longLineSegment.end.x) /\n                2;\n            const yMid = (canvasCoords.longLineSegment.start.y +\n                canvasCoords.longLineSegment.end.y) /\n                2;\n            const startX = xMid + shortAxisDistFromCenter * vectorY;\n            const startY = yMid - shortAxisDistFromCenter * vectorX;\n            const endX = xMid - shortAxisDistFromCenter * vectorY;\n            const endY = yMid + shortAxisDistFromCenter * vectorX;\n            data.handles.points[2] = viewport.canvasToWorld([startX, startY]);\n            data.handles.points[3] = viewport.canvasToWorld([endX, endY]);\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            this.editData.hasMoved = true;\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragModifyHandle(evt);\n                annotation.invalidated = true;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this._dragModifyHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { annotation, handleIndex: movingHandleIndex } = this.editData;\n            const { data } = annotation;\n            const worldPos = currentPoints.world;\n            const canvasCoordHandlesCurrent = [\n                viewport.worldToCanvas(data.handles.points[0]),\n                viewport.worldToCanvas(data.handles.points[1]),\n                viewport.worldToCanvas(data.handles.points[2]),\n                viewport.worldToCanvas(data.handles.points[3]),\n            ];\n            const firstLineSegment = {\n                start: {\n                    x: canvasCoordHandlesCurrent[0][0],\n                    y: canvasCoordHandlesCurrent[0][1],\n                },\n                end: {\n                    x: canvasCoordHandlesCurrent[1][0],\n                    y: canvasCoordHandlesCurrent[1][1],\n                },\n            };\n            const secondLineSegment = {\n                start: {\n                    x: canvasCoordHandlesCurrent[2][0],\n                    y: canvasCoordHandlesCurrent[2][1],\n                },\n                end: {\n                    x: canvasCoordHandlesCurrent[3][0],\n                    y: canvasCoordHandlesCurrent[3][1],\n                },\n            };\n            const proposedPoint = [...worldPos];\n            const proposedCanvasCoord = viewport.worldToCanvas(proposedPoint);\n            if (movingHandleIndex === 0 || movingHandleIndex === 1) {\n                const fixedHandleIndex = movingHandleIndex === 0 ? 1 : 0;\n                const fixedHandleCanvasCoord = canvasCoordHandlesCurrent[fixedHandleIndex];\n                const fixedHandleToProposedCoordVec = vec2.set(vec2.create(), proposedCanvasCoord[0] - fixedHandleCanvasCoord[0], proposedCanvasCoord[1] - fixedHandleCanvasCoord[1]);\n                const fixedHandleToOldCoordVec = vec2.set(vec2.create(), canvasCoordHandlesCurrent[movingHandleIndex][0] -\n                    fixedHandleCanvasCoord[0], canvasCoordHandlesCurrent[movingHandleIndex][1] -\n                    fixedHandleCanvasCoord[1]);\n                vec2.normalize(fixedHandleToProposedCoordVec, fixedHandleToProposedCoordVec);\n                vec2.normalize(fixedHandleToOldCoordVec, fixedHandleToOldCoordVec);\n                const proposedFirstLineSegment = {\n                    start: {\n                        x: fixedHandleCanvasCoord[0],\n                        y: fixedHandleCanvasCoord[1],\n                    },\n                    end: {\n                        x: proposedCanvasCoord[0],\n                        y: proposedCanvasCoord[1],\n                    },\n                };\n                if (this._movingLongAxisWouldPutItThroughShortAxis(proposedFirstLineSegment, secondLineSegment)) {\n                    return;\n                }\n                const centerOfRotation = fixedHandleCanvasCoord;\n                const angle = this._getSignedAngle(fixedHandleToOldCoordVec, fixedHandleToProposedCoordVec);\n                let firstPointX = canvasCoordHandlesCurrent[2][0];\n                let firstPointY = canvasCoordHandlesCurrent[2][1];\n                let secondPointX = canvasCoordHandlesCurrent[3][0];\n                let secondPointY = canvasCoordHandlesCurrent[3][1];\n                firstPointX -= centerOfRotation[0];\n                firstPointY -= centerOfRotation[1];\n                secondPointX -= centerOfRotation[0];\n                secondPointY -= centerOfRotation[1];\n                const rotatedFirstPoint = firstPointX * Math.cos(angle) - firstPointY * Math.sin(angle);\n                const rotatedFirstPointY = firstPointX * Math.sin(angle) + firstPointY * Math.cos(angle);\n                const rotatedSecondPoint = secondPointX * Math.cos(angle) - secondPointY * Math.sin(angle);\n                const rotatedSecondPointY = secondPointX * Math.sin(angle) + secondPointY * Math.cos(angle);\n                firstPointX = rotatedFirstPoint + centerOfRotation[0];\n                firstPointY = rotatedFirstPointY + centerOfRotation[1];\n                secondPointX = rotatedSecondPoint + centerOfRotation[0];\n                secondPointY = rotatedSecondPointY + centerOfRotation[1];\n                const newFirstPoint = viewport.canvasToWorld([firstPointX, firstPointY]);\n                const newSecondPoint = viewport.canvasToWorld([\n                    secondPointX,\n                    secondPointY,\n                ]);\n                data.handles.points[movingHandleIndex] = proposedPoint;\n                data.handles.points[2] = newFirstPoint;\n                data.handles.points[3] = newSecondPoint;\n            }\n            else {\n                const translateHandleIndex = movingHandleIndex === 2 ? 3 : 2;\n                const canvasCoordsCurrent = {\n                    longLineSegment: {\n                        start: firstLineSegment.start,\n                        end: firstLineSegment.end,\n                    },\n                    shortLineSegment: {\n                        start: secondLineSegment.start,\n                        end: secondLineSegment.end,\n                    },\n                };\n                const longLineSegmentVec = vec2.subtract(vec2.create(), [\n                    canvasCoordsCurrent.longLineSegment.end.x,\n                    canvasCoordsCurrent.longLineSegment.end.y,\n                ], [\n                    canvasCoordsCurrent.longLineSegment.start.x,\n                    canvasCoordsCurrent.longLineSegment.start.y,\n                ]);\n                const longLineSegmentVecNormalized = vec2.normalize(vec2.create(), longLineSegmentVec);\n                const proposedToCurrentVec = vec2.subtract(vec2.create(), [proposedCanvasCoord[0], proposedCanvasCoord[1]], [\n                    canvasCoordHandlesCurrent[movingHandleIndex][0],\n                    canvasCoordHandlesCurrent[movingHandleIndex][1],\n                ]);\n                const movementLength = vec2.length(proposedToCurrentVec);\n                const angle = this._getSignedAngle(longLineSegmentVecNormalized, proposedToCurrentVec);\n                const movementAlongLineSegmentLength = Math.cos(angle) * movementLength;\n                const newTranslatedPoint = vec2.scaleAndAdd(vec2.create(), [\n                    canvasCoordHandlesCurrent[translateHandleIndex][0],\n                    canvasCoordHandlesCurrent[translateHandleIndex][1],\n                ], longLineSegmentVecNormalized, movementAlongLineSegmentLength);\n                if (this._movingLongAxisWouldPutItThroughShortAxis({\n                    start: {\n                        x: proposedCanvasCoord[0],\n                        y: proposedCanvasCoord[1],\n                    },\n                    end: {\n                        x: newTranslatedPoint[0],\n                        y: newTranslatedPoint[1],\n                    },\n                }, {\n                    start: {\n                        x: canvasCoordsCurrent.longLineSegment.start.x,\n                        y: canvasCoordsCurrent.longLineSegment.start.y,\n                    },\n                    end: {\n                        x: canvasCoordsCurrent.longLineSegment.end.x,\n                        y: canvasCoordsCurrent.longLineSegment.end.y,\n                    },\n                })) {\n                    return;\n                }\n                const intersectionPoint = lineSegment.intersectLine([proposedCanvasCoord[0], proposedCanvasCoord[1]], [newTranslatedPoint[0], newTranslatedPoint[1]], [firstLineSegment.start.x, firstLineSegment.start.y], [firstLineSegment.end.x, firstLineSegment.end.y]);\n                if (!intersectionPoint) {\n                    return;\n                }\n                data.handles.points[translateHandleIndex] = viewport.canvasToWorld(newTranslatedPoint);\n                data.handles.points[movingHandleIndex] = proposedPoint;\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = true;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        width: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                const showHandlesAlways = Boolean(getStyleProperty('showHandlesAlways', {}));\n                if (activeHandleCanvasCoords || showHandlesAlways) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, showHandlesAlways ? canvasCoordinates : activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId1 = `${annotationUID}-line-1`;\n                const dataId2 = `${annotationUID}-line-2`;\n                const lineUID = '0';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                    shadow,\n                }, dataId1);\n                const secondLineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, secondLineUID, canvasCoordinates[2], canvasCoordinates[3], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                    shadow,\n                }, dataId2);\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._movingLongAxisWouldPutItThroughShortAxis = (firstLineSegment, secondLineSegment) => {\n            const vectorInSecondLineDirection = vec2.create();\n            vec2.set(vectorInSecondLineDirection, secondLineSegment.end.x - secondLineSegment.start.x, secondLineSegment.end.y - secondLineSegment.start.y);\n            vec2.normalize(vectorInSecondLineDirection, vectorInSecondLineDirection);\n            const extendedSecondLineSegment = {\n                start: {\n                    x: secondLineSegment.start.x - vectorInSecondLineDirection[0] * 10,\n                    y: secondLineSegment.start.y - vectorInSecondLineDirection[1] * 10,\n                },\n                end: {\n                    x: secondLineSegment.end.x + vectorInSecondLineDirection[0] * 10,\n                    y: secondLineSegment.end.y + vectorInSecondLineDirection[1] * 10,\n                },\n            };\n            const proposedIntersectionPoint = lineSegment.intersectLine([extendedSecondLineSegment.start.x, extendedSecondLineSegment.start.y], [extendedSecondLineSegment.end.x, extendedSecondLineSegment.end.y], [firstLineSegment.start.x, firstLineSegment.start.y], [firstLineSegment.end.x, firstLineSegment.end.y]);\n            const wouldPutThroughShortAxis = !proposedIntersectionPoint;\n            return wouldPutThroughShortAxis;\n        };\n        this._calculateCachedStats = (annotation, renderingEngine, enabledElement) => {\n            const { data } = annotation;\n            const { element } = enabledElement.viewport;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[1];\n            const worldPos3 = data.handles.points[2];\n            const worldPos4 = data.handles.points[3];\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { imageData, dimensions } = image;\n                const index1 = transformWorldToIndex(imageData, worldPos1);\n                const index2 = transformWorldToIndex(imageData, worldPos2);\n                const index3 = transformWorldToIndex(imageData, worldPos3);\n                const index4 = transformWorldToIndex(imageData, worldPos4);\n                const handles1 = [index1, index2];\n                const handles2 = [index3, index4];\n                const { scale: scale1, unit: units1 } = getCalibratedLengthUnitsAndScale(image, handles1);\n                const { scale: scale2, unit: units2 } = getCalibratedLengthUnitsAndScale(image, handles2);\n                const dist1 = this._calculateLength(worldPos1, worldPos2) / scale1;\n                const dist2 = this._calculateLength(worldPos3, worldPos4) / scale2;\n                const length = dist1 > dist2 ? dist1 : dist2;\n                const width = dist1 > dist2 ? dist2 : dist1;\n                const unit = dist1 > dist2 ? units1 : units2;\n                const widthUnit = dist1 > dist2 ? units2 : units1;\n                this._isInsideVolume(index1, index2, index3, index4, dimensions)\n                    ? (this.isHandleOutsideImage = false)\n                    : (this.isHandleOutsideImage = true);\n                cachedStats[targetId] = {\n                    length,\n                    width,\n                    unit,\n                    widthUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, index3, index4, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions) &&\n                csUtils.indexWithinDimensions(index3, dimensions) &&\n                csUtils.indexWithinDimensions(index4, dimensions));\n        };\n        this._getSignedAngle = (vector1, vector2) => {\n            return Math.atan2(vector1[0] * vector2[1] - vector1[1] * vector2[0], vector1[0] * vector2[0] + vector1[1] * vector2[1]);\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const worldPos = currentPoints.world;\n        this.isDrawing = true;\n        const annotation = this.createAnnotation(evt, [\n            [...worldPos],\n            [...worldPos],\n            [...worldPos],\n            [...worldPos],\n        ]);\n        addAnnotation(annotation, element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex: 1,\n            movingTextBox: false,\n            newAnnotation: true,\n            hasMoved: false,\n        };\n        this._activateDraw(element);\n        hideElementCursor(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        return annotation;\n    }\n    static { this.hydrate = (viewportId, axis, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(BidirectionalTool, enabledElement, axis[0], options);\n        const [majorAxis, minorAxis] = axis;\n        const [major0, major1] = majorAxis;\n        const [minor0, minor1] = minorAxis;\n        const points = [major0, major1, minor0, minor1];\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                },\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n        return annotation;\n    }; }\n    _calculateLength(pos1, pos2) {\n        const dx = pos1[0] - pos2[0];\n        const dy = pos1[1] - pos2[1];\n        const dz = pos1[2] - pos2[2];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const { cachedStats, label } = data;\n    const { length, width, unit } = cachedStats[targetId];\n    const textLines = [];\n    if (label) {\n        textLines.push(label);\n    }\n    if (length === undefined) {\n        return textLines;\n    }\n    textLines.push(`L: ${csUtils.roundNumber(length)} ${unit || unit}`, `W: ${csUtils.roundNumber(width)} ${unit}`);\n    return textLines;\n}\nexport default BidirectionalTool;\n","import { utilities } from '@cornerstonejs/core';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport PlanarFreehandROITool from './PlanarFreehandROITool';\nclass PlanarFreehandContourSegmentationTool extends PlanarFreehandROITool {\n    static { this.toolName = 'PlanarFreehandContourSegmentationTool'; }\n    constructor(toolProps) {\n        const initialProps = utilities.deepMerge({\n            configuration: {\n                calculateStats: false,\n                allowOpenContours: false,\n            },\n        }, toolProps);\n        super(initialProps);\n    }\n    isContourSegmentationTool() {\n        return true;\n    }\n    renderAnnotationInstance(renderContext) {\n        const annotation = renderContext.annotation;\n        const { invalidated } = annotation;\n        const renderResult = super.renderAnnotationInstance(renderContext);\n        if (invalidated) {\n            const { segmentationId } = annotation.data.segmentation;\n            triggerSegmentationDataModified(segmentationId);\n        }\n        return renderResult;\n    }\n}\nexport default PlanarFreehandContourSegmentationTool;\n","import { AnnotationTool } from '../base';\nimport { CONSTANTS, getEnabledElement, VolumeViewport, utilities as csUtils, metaData, } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport * as math from '../../utilities/math';\nimport { polyline } from '../../utilities/math';\nimport { filterAnnotationsForDisplay } from '../../utilities/planar';\nimport throttle from '../../utilities/throttle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport registerDrawLoop from './planarFreehandROITool/drawLoop';\nimport registerEditLoopCommon from './planarFreehandROITool/editLoopCommon';\nimport registerClosedContourEditLoop from './planarFreehandROITool/closedContourEditLoop';\nimport registerOpenContourEditLoop from './planarFreehandROITool/openContourEditLoop';\nimport registerOpenContourEndEditLoop from './planarFreehandROITool/openContourEndEditLoop';\nimport registerRenderMethods from './planarFreehandROITool/renderMethods';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nimport { drawLinkedTextBox } from '../../drawingSvg';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { getLineSegmentIntersectionsCoordinates } from '../../utilities/math/polyline';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport calculatePerimeter from '../../utilities/contours/calculatePerimeter';\nimport ContourSegmentationBaseTool from '../base/ContourSegmentationBaseTool';\nimport { KeyboardBindings, ChangeTypes } from '../../enums';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nconst { pointCanProjectOnLine } = polyline;\nconst { EPSILON } = CONSTANTS;\nconst PARALLEL_THRESHOLD = 1 - EPSILON;\nclass PlanarFreehandROITool extends ContourSegmentationBaseTool {\n    static { this.toolName = 'PlanarFreehandROI'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            storePointData: false,\n            shadow: true,\n            preventHandleOutsideImage: false,\n            contourHoleAdditionModifierKey: KeyboardBindings.Shift,\n            alwaysRenderOpenContourHandles: {\n                enabled: false,\n                radius: 2,\n            },\n            allowOpenContours: true,\n            closeContourProximity: 10,\n            checkCanvasEditFallbackProximity: 6,\n            makeClockWise: true,\n            subPixelResolution: 4,\n            smoothing: {\n                smoothOnAdd: false,\n                smoothOnEdit: false,\n                knotsRatioPercentageOnAdd: 40,\n                knotsRatioPercentageOnEdit: 40,\n            },\n            interpolation: {\n                enabled: false,\n                onInterpolationComplete: null,\n            },\n            decimate: {\n                enabled: false,\n                epsilon: 0.1,\n            },\n            displayOnePointAsCrosshairs: false,\n            calculateStats: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isDrawing = false;\n        this.isEditingClosed = false;\n        this.isEditingOpen = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const annotation = this.createAnnotation(evt);\n            this.addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.activateDraw(evt, annotation, viewportIdsToRender);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.activateOpenContourEndEdit(evt, annotation, viewportIdsToRender, handle);\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            if (annotation.data.contour.closed) {\n                this.activateClosedContourEdit(evt, annotation, viewportIdsToRender);\n            }\n            else {\n                this.activateOpenContourEdit(evt, annotation, viewportIdsToRender);\n            }\n            evt.preventDefault();\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { polyline: points } = annotation.data.contour;\n            let previousPoint = viewport.worldToCanvas(points[0]);\n            for (let i = 1; i < points.length; i++) {\n                const p1 = previousPoint;\n                const p2 = viewport.worldToCanvas(points[i]);\n                const canProject = pointCanProjectOnLine(canvasCoords, p1, p2, proximity);\n                if (canProject) {\n                    return true;\n                }\n                previousPoint = p2;\n            }\n            if (!annotation.data.contour.closed) {\n                return false;\n            }\n            const pStart = viewport.worldToCanvas(points[0]);\n            const pEnd = viewport.worldToCanvas(points[points.length - 1]);\n            return pointCanProjectOnLine(canvasCoords, pStart, pEnd, proximity);\n        };\n        this.cancel = (element) => {\n            const isDrawing = this.isDrawing;\n            const isEditingOpen = this.isEditingOpen;\n            const isEditingClosed = this.isEditingClosed;\n            if (isDrawing) {\n                this.cancelDrawing(element);\n            }\n            else if (isEditingOpen) {\n                this.cancelOpenContourEdit(element);\n            }\n            else if (isEditingClosed) {\n                this.cancelClosedContourEdit(element);\n            }\n        };\n        this._calculateCachedStats = (annotation, viewport, renderingEngine, enabledElement) => {\n            const { data } = annotation;\n            const { cachedStats } = data;\n            const { polyline: points, closed } = data.contour;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { imageData, metadata } = image;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const modalityUnitOptions = {\n                    isPreScaled: isViewportPreScaled(viewport, targetId),\n                    isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                };\n                const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, modalityUnitOptions);\n                const calibratedScale = getCalibratedLengthUnitsAndScale(image, () => {\n                    const polyline = data.contour.polyline;\n                    const numPoints = polyline.length;\n                    const projectedPolyline = new Array(numPoints);\n                    for (let i = 0; i < numPoints; i++) {\n                        projectedPolyline[i] = viewport.worldToCanvas(polyline[i]);\n                    }\n                    const { maxX: canvasMaxX, maxY: canvasMaxY, minX: canvasMinX, minY: canvasMinY, } = math.polyline.getAABB(projectedPolyline);\n                    const topLeftBBWorld = viewport.canvasToWorld([canvasMinX, canvasMinY]);\n                    const topLeftBBIndex = csUtils.transformWorldToIndex(imageData, topLeftBBWorld);\n                    const bottomRightBBWorld = viewport.canvasToWorld([\n                        canvasMaxX,\n                        canvasMaxY,\n                    ]);\n                    const bottomRightBBIndex = csUtils.transformWorldToIndex(imageData, bottomRightBBWorld);\n                    return [topLeftBBIndex, bottomRightBBIndex];\n                });\n                const canvasPoint = canvasCoordinates[0];\n                const originalWorldPoint = viewport.canvasToWorld(canvasPoint);\n                const deltaXPoint = viewport.canvasToWorld([\n                    canvasPoint[0] + 1,\n                    canvasPoint[1],\n                ]);\n                const deltaYPoint = viewport.canvasToWorld([\n                    canvasPoint[0],\n                    canvasPoint[1] + 1,\n                ]);\n                const deltaInX = vec3.distance(originalWorldPoint, deltaXPoint);\n                const deltaInY = vec3.distance(originalWorldPoint, deltaYPoint);\n                if (closed) {\n                    this.updateClosedCachedStats({\n                        targetId,\n                        viewport,\n                        canvasCoordinates,\n                        points,\n                        imageData,\n                        metadata,\n                        cachedStats,\n                        modalityUnit,\n                        calibratedScale,\n                        deltaInX,\n                        deltaInY,\n                    });\n                }\n                else {\n                    this.updateOpenCachedStats({\n                        metadata,\n                        targetId,\n                        cachedStats,\n                        modalityUnit,\n                        calibratedScale,\n                        points,\n                    });\n                }\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                triggerAnnotationModified(annotation, enabledElement.viewport.element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._renderStats = (annotation, viewport, enabledElement, svgDrawingHelper) => {\n            const { data } = annotation;\n            const targetId = this.getTargetId(viewport);\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n                annotationUID: annotation.annotationUID,\n            };\n            const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n            if (!options.visibility) {\n                return;\n            }\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (!textLines || textLines.length === 0) {\n                return;\n            }\n            const canvasCoordinates = data.contour.polyline.map((p) => viewport.worldToCanvas(p));\n            if (!data.handles.textBox.hasMoved) {\n                const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                data.handles.textBox.worldPosition =\n                    viewport.canvasToWorld(canvasTextBoxCoords);\n            }\n            const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n            const textBoxUID = '1';\n            const boundingBox = drawLinkedTextBox(svgDrawingHelper, annotation.annotationUID ?? '', textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n            const { x: left, y: top, width, height } = boundingBox;\n            data.handles.textBox.worldBoundingBox = {\n                topLeft: viewport.canvasToWorld([left, top]),\n                topRight: viewport.canvasToWorld([left + width, top]),\n                bottomLeft: viewport.canvasToWorld([left, top + height]),\n                bottomRight: viewport.canvasToWorld([left + width, top + height]),\n            };\n        };\n        registerDrawLoop(this);\n        registerEditLoopCommon(this);\n        registerClosedContourEditLoop(this);\n        registerOpenContourEditLoop(this);\n        registerOpenContourEndEditLoop(this);\n        registerRenderMethods(this);\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    filterInteractableAnnotationsForElement(element, annotations) {\n        if (!annotations || !annotations.length) {\n            return;\n        }\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        let annotationsToDisplay;\n        if (viewport instanceof VolumeViewport) {\n            const camera = viewport.getCamera();\n            const { spacingInNormalDirection } = csUtils.getTargetVolumeAndSpacingInNormalDir(viewport, camera);\n            annotationsToDisplay = this.filterAnnotationsWithinSlice(annotations, camera, spacingInNormalDirection);\n        }\n        else {\n            annotationsToDisplay = filterAnnotationsForDisplay(viewport, annotations);\n        }\n        return annotationsToDisplay;\n    }\n    filterAnnotationsWithinSlice(annotations, camera, spacingInNormalDirection) {\n        const { viewPlaneNormal } = camera;\n        const annotationsWithParallelNormals = annotations.filter((td) => {\n            let annotationViewPlaneNormal = td.metadata.viewPlaneNormal;\n            if (!td.metadata.referencedImageId &&\n                !annotationViewPlaneNormal &&\n                td.metadata.FrameOfReferenceUID) {\n                for (const point of td.data.contour.polyline) {\n                    const vector = vec3.sub(vec3.create(), point, camera.focalPoint);\n                    const dotProduct = vec3.dot(vector, camera.viewPlaneNormal);\n                    if (!csUtils.isEqual(dotProduct, 0)) {\n                        return false;\n                    }\n                }\n                td.metadata.viewPlaneNormal = camera.viewPlaneNormal;\n                td.metadata.cameraFocalPoint = camera.focalPoint;\n                return true;\n            }\n            if (!annotationViewPlaneNormal) {\n                const { referencedImageId } = td.metadata;\n                const { imageOrientationPatient } = metaData.get('imagePlaneModule', referencedImageId);\n                const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n                const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n                annotationViewPlaneNormal = vec3.create();\n                vec3.cross(annotationViewPlaneNormal, rowCosineVec, colCosineVec);\n                td.metadata.viewPlaneNormal = annotationViewPlaneNormal;\n            }\n            const isParallel = Math.abs(vec3.dot(viewPlaneNormal, annotationViewPlaneNormal)) >\n                PARALLEL_THRESHOLD;\n            return annotationViewPlaneNormal && isParallel;\n        });\n        if (!annotationsWithParallelNormals.length) {\n            return [];\n        }\n        const halfSpacingInNormalDirection = spacingInNormalDirection / 2;\n        const { focalPoint } = camera;\n        const annotationsWithinSlice = [];\n        for (const annotation of annotationsWithParallelNormals) {\n            const data = annotation.data;\n            const point = data.contour.polyline[0];\n            if (!annotation.isVisible) {\n                continue;\n            }\n            const dir = vec3.create();\n            vec3.sub(dir, focalPoint, point);\n            const dot = vec3.dot(dir, viewPlaneNormal);\n            if (Math.abs(dot) < halfSpacingInNormalDirection) {\n                annotationsWithinSlice.push(annotation);\n            }\n        }\n        return annotationsWithinSlice;\n    }\n    isContourSegmentationTool() {\n        return false;\n    }\n    createAnnotation(evt) {\n        const worldPos = evt.detail.currentPoints.world;\n        const contourAnnotation = super.createAnnotation(evt);\n        const onInterpolationComplete = (annotation) => {\n            annotation.data.handles.points.length = 0;\n        };\n        const annotation = csUtils.deepMerge(contourAnnotation, {\n            data: {\n                contour: {\n                    polyline: [[...worldPos]],\n                },\n                label: '',\n                cachedStats: {},\n            },\n            onInterpolationComplete,\n        });\n        return annotation;\n    }\n    getAnnotationStyle(context) {\n        return super.getAnnotationStyle(context);\n    }\n    renderAnnotationInstance(renderContext) {\n        const { enabledElement, targetId, svgDrawingHelper } = renderContext;\n        const annotation = renderContext.annotation;\n        let renderStatus = false;\n        const { viewport, renderingEngine } = enabledElement;\n        const isDrawing = this.isDrawing;\n        const isEditingOpen = this.isEditingOpen;\n        const isEditingClosed = this.isEditingClosed;\n        if (!(isDrawing || isEditingOpen || isEditingClosed)) {\n            if (this.configuration.displayOnePointAsCrosshairs &&\n                annotation.data.contour.polyline.length === 1) {\n                this.renderPointContourWithMarker(enabledElement, svgDrawingHelper, annotation);\n            }\n            else {\n                this.renderContour(enabledElement, svgDrawingHelper, annotation);\n            }\n        }\n        else {\n            const activeAnnotationUID = this.commonData.annotation.annotationUID;\n            if (annotation.annotationUID === activeAnnotationUID) {\n                if (isDrawing) {\n                    this.renderContourBeingDrawn(enabledElement, svgDrawingHelper, annotation);\n                }\n                else if (isEditingClosed) {\n                    this.renderClosedContourBeingEdited(enabledElement, svgDrawingHelper, annotation);\n                }\n                else if (isEditingOpen) {\n                    this.renderOpenContourBeingEdited(enabledElement, svgDrawingHelper, annotation);\n                }\n                else {\n                    throw new Error(`Unknown ${this.getToolName()} annotation rendering state`);\n                }\n            }\n            else {\n                if (this.configuration.displayOnePointAsCrosshairs &&\n                    annotation.data.contour.polyline.length === 1) {\n                    this.renderPointContourWithMarker(enabledElement, svgDrawingHelper, annotation);\n                }\n                else {\n                    this.renderContour(enabledElement, svgDrawingHelper, annotation);\n                }\n            }\n            renderStatus = true;\n        }\n        if (!this.configuration.calculateStats) {\n            return;\n        }\n        this._calculateStatsIfActive(annotation, targetId, viewport, renderingEngine, enabledElement);\n        this._renderStats(annotation, viewport, enabledElement, svgDrawingHelper);\n        return renderStatus;\n    }\n    _calculateStatsIfActive(annotation, targetId, viewport, renderingEngine, enabledElement) {\n        const activeAnnotationUID = this.commonData?.annotation.annotationUID;\n        if (annotation.annotationUID === activeAnnotationUID &&\n            !this.commonData?.movingTextBox) {\n            return;\n        }\n        if (!this.commonData?.movingTextBox) {\n            const { data } = annotation;\n            if (!data.cachedStats[targetId]?.unit) {\n                data.cachedStats[targetId] = {\n                    Modality: null,\n                    area: null,\n                    max: null,\n                    mean: null,\n                    stdDev: null,\n                    areaUnit: null,\n                    unit: null,\n                };\n                this._calculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n            }\n            else if (annotation.invalidated) {\n                this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n            }\n        }\n    }\n    updateClosedCachedStats({ viewport, points, imageData, metadata, cachedStats, targetId, modalityUnit, canvasCoordinates, calibratedScale, deltaInX, deltaInY, }) {\n        const { scale, areaUnit, unit } = calibratedScale;\n        const { voxelManager } = viewport.getImageData();\n        const worldPosIndex = csUtils.transformWorldToIndex(imageData, points[0]);\n        worldPosIndex[0] = Math.floor(worldPosIndex[0]);\n        worldPosIndex[1] = Math.floor(worldPosIndex[1]);\n        worldPosIndex[2] = Math.floor(worldPosIndex[2]);\n        let iMin = worldPosIndex[0];\n        let iMax = worldPosIndex[0];\n        let jMin = worldPosIndex[1];\n        let jMax = worldPosIndex[1];\n        let kMin = worldPosIndex[2];\n        let kMax = worldPosIndex[2];\n        for (let j = 1; j < points.length; j++) {\n            const worldPosIndex = csUtils.transformWorldToIndex(imageData, points[j]);\n            worldPosIndex[0] = Math.floor(worldPosIndex[0]);\n            worldPosIndex[1] = Math.floor(worldPosIndex[1]);\n            worldPosIndex[2] = Math.floor(worldPosIndex[2]);\n            iMin = Math.min(iMin, worldPosIndex[0]);\n            iMax = Math.max(iMax, worldPosIndex[0]);\n            jMin = Math.min(jMin, worldPosIndex[1]);\n            jMax = Math.max(jMax, worldPosIndex[1]);\n            kMin = Math.min(kMin, worldPosIndex[2]);\n            kMax = Math.max(kMax, worldPosIndex[2]);\n        }\n        const worldPosIndex2 = csUtils.transformWorldToIndex(imageData, points[1]);\n        worldPosIndex2[0] = Math.floor(worldPosIndex2[0]);\n        worldPosIndex2[1] = Math.floor(worldPosIndex2[1]);\n        worldPosIndex2[2] = Math.floor(worldPosIndex2[2]);\n        let area = polyline.getArea(canvasCoordinates) / scale / scale;\n        area *= deltaInX * deltaInY;\n        const perimeter = calculatePerimeter(points, closed) / scale;\n        const iDelta = 0.01 * (iMax - iMin);\n        const jDelta = 0.01 * (jMax - jMin);\n        const kDelta = 0.01 * (kMax - kMin);\n        iMin = Math.floor(iMin - iDelta);\n        iMax = Math.ceil(iMax + iDelta);\n        jMin = Math.floor(jMin - jDelta);\n        jMax = Math.ceil(jMax + jDelta);\n        kMin = Math.floor(kMin - kDelta);\n        kMax = Math.ceil(kMax + kDelta);\n        const boundsIJK = [\n            [iMin, iMax],\n            [jMin, jMax],\n            [kMin, kMax],\n        ];\n        const worldPosEnd = imageData.indexToWorld([iMax, jMax, kMax]);\n        const canvasPosEnd = viewport.worldToCanvas(worldPosEnd);\n        let curRow = 0;\n        let intersections = [];\n        let intersectionCounter = 0;\n        let pointsInShape;\n        if (voxelManager) {\n            pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                imageData,\n                isInObject: (pointLPS, _pointIJK) => {\n                    let result = true;\n                    const point = viewport.worldToCanvas(pointLPS);\n                    if (point[1] != curRow) {\n                        intersectionCounter = 0;\n                        curRow = point[1];\n                        intersections = getLineSegmentIntersectionsCoordinates(canvasCoordinates, point, [canvasPosEnd[0], point[1]]);\n                        intersections.sort((function (index) {\n                            return function (a, b) {\n                                return a[index] === b[index]\n                                    ? 0\n                                    : a[index] < b[index]\n                                        ? -1\n                                        : 1;\n                            };\n                        })(0));\n                    }\n                    if (intersections.length && point[0] > intersections[0][0]) {\n                        intersections.shift();\n                        intersectionCounter++;\n                    }\n                    if (intersectionCounter % 2 === 0) {\n                        result = false;\n                    }\n                    return result;\n                },\n                boundsIJK,\n                returnPoints: this.configuration.storePointData,\n            });\n        }\n        const stats = this.configuration.statsCalculator.getStatistics();\n        cachedStats[targetId] = {\n            Modality: metadata.Modality,\n            area,\n            perimeter,\n            mean: stats.mean?.value,\n            max: stats.max?.value,\n            min: stats.min?.value,\n            stdDev: stats.stdDev?.value,\n            statsArray: stats.array,\n            pointsInShape: pointsInShape,\n            areaUnit,\n            modalityUnit,\n            unit,\n        };\n    }\n    updateOpenCachedStats({ targetId, metadata, cachedStats, modalityUnit, calibratedScale, points, }) {\n        const { scale, unit } = calibratedScale;\n        const length = calculatePerimeter(points, closed) / scale;\n        cachedStats[targetId] = {\n            Modality: metadata.Modality,\n            length,\n            modalityUnit,\n            unit,\n        };\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, mean, stdDev, length, perimeter, max, min, isEmptyArea, unit, areaUnit, modalityUnit, } = cachedVolumeStats || {};\n    const textLines = [];\n    if (csUtils.isNumber(area)) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    if (csUtils.isNumber(mean)) {\n        textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(max)) {\n        textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(min)) {\n        textLines.push(`Min: ${csUtils.roundNumber(min)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(stdDev)) {\n        textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(perimeter)) {\n        textLines.push(`Perimeter: ${csUtils.roundNumber(perimeter)} ${unit}`);\n    }\n    if (csUtils.isNumber(length)) {\n        textLines.push(`${csUtils.roundNumber(length)} ${unit}`);\n    }\n    return textLines;\n}\nexport default PlanarFreehandROITool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, drawRectByCoordinates as drawRectSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as rectangle from '../../utilities/math/rectangle';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromCorners from '../../utilities/planar/getWorldWidthAndHeightFromCorners';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport { getStyleProperty } from '../../stateManagement/annotation/config/helpers';\nconst { transformWorldToIndex } = csUtils;\nclass RectangleROITool extends AnnotationTool {\n    static { this.toolName = 'RectangleROI'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            storePointData: false,\n            shadow: true,\n            preventHandleOutsideImage: false,\n            calculateStats: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const annotation = (this.constructor).createAnnotationForViewport(viewport, {\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    cachedStats: {},\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasPoint1 = viewport.worldToCanvas(points[0]);\n            const canvasPoint2 = viewport.worldToCanvas(points[3]);\n            const rect = this._getRectangleImageCoordinates([\n                canvasPoint1,\n                canvasPoint2,\n            ]);\n            const point = [canvasCoords[0], canvasCoords[1]];\n            const { left, top, width, height } = rect;\n            const distanceToPoint = rectangle.distanceToPoint([left, top, width, height], point);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                handleIndex = data.handles.points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.doneEditMemo();\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { points } = data.handles;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const enabledElement = getEnabledElement(element);\n                const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n                const worldPos = currentPoints.world;\n                const { points } = data.handles;\n                points[handleIndex] = [...worldPos];\n                let bottomLeftCanvas;\n                let bottomRightCanvas;\n                let topLeftCanvas;\n                let topRightCanvas;\n                let bottomLeftWorld;\n                let bottomRightWorld;\n                let topLeftWorld;\n                let topRightWorld;\n                switch (handleIndex) {\n                    case 0:\n                    case 3:\n                        bottomLeftCanvas = worldToCanvas(points[0]);\n                        topRightCanvas = worldToCanvas(points[3]);\n                        bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n                        topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n                        bottomRightWorld = canvasToWorld(bottomRightCanvas);\n                        topLeftWorld = canvasToWorld(topLeftCanvas);\n                        points[1] = bottomRightWorld;\n                        points[2] = topLeftWorld;\n                        break;\n                    case 1:\n                    case 2:\n                        bottomRightCanvas = worldToCanvas(points[1]);\n                        topLeftCanvas = worldToCanvas(points[2]);\n                        bottomLeftCanvas = [\n                            topLeftCanvas[0],\n                            bottomRightCanvas[1],\n                        ];\n                        topRightCanvas = [\n                            bottomRightCanvas[0],\n                            topLeftCanvas[1],\n                        ];\n                        bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n                        topRightWorld = canvasToWorld(topRightCanvas);\n                        points[0] = bottomLeftWorld;\n                        points[3] = topRightWorld;\n                        break;\n                }\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const { viewPlaneNormal, viewUp } = viewport.getCamera();\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].areaUnit == null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        area: null,\n                        max: null,\n                        mean: null,\n                        stdDev: null,\n                        areaUnit: null,\n                    };\n                    this._calculateCachedStats(annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null &&\n                    activeHandleIndex !== undefined) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                const showHandlesAlways = Boolean(getStyleProperty('showHandlesAlways', {}));\n                if (activeHandleCanvasCoords || showHandlesAlways) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, showHandlesAlways ? canvasCoordinates : activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-rect`;\n                const rectangleUID = '0';\n                drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._getRectangleImageCoordinates = (points) => {\n            const [point0, point1] = points;\n            return {\n                left: Math.min(point0[0], point1[0]),\n                top: Math.min(point0[1], point1[1]),\n                width: Math.abs(point0[0] - point1[0]),\n                height: Math.abs(point0[1] - point1[1]),\n            };\n        };\n        this._calculateCachedStats = (annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const { data } = annotation;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[3];\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { dimensions, imageData, metadata, voxelManager } = image;\n                const pos1Index = transformWorldToIndex(imageData, worldPos1);\n                pos1Index[0] = Math.floor(pos1Index[0]);\n                pos1Index[1] = Math.floor(pos1Index[1]);\n                pos1Index[2] = Math.floor(pos1Index[2]);\n                const pos2Index = transformWorldToIndex(imageData, worldPos2);\n                pos2Index[0] = Math.floor(pos2Index[0]);\n                pos2Index[1] = Math.floor(pos2Index[1]);\n                pos2Index[2] = Math.floor(pos2Index[2]);\n                if (this._isInsideVolume(pos1Index, pos2Index, dimensions)) {\n                    this.isHandleOutsideImage = false;\n                    const iMin = Math.min(pos1Index[0], pos2Index[0]);\n                    const iMax = Math.max(pos1Index[0], pos2Index[0]);\n                    const jMin = Math.min(pos1Index[1], pos2Index[1]);\n                    const jMax = Math.max(pos1Index[1], pos2Index[1]);\n                    const kMin = Math.min(pos1Index[2], pos2Index[2]);\n                    const kMax = Math.max(pos1Index[2], pos2Index[2]);\n                    const boundsIJK = [\n                        [iMin, iMax],\n                        [jMin, jMax],\n                        [kMin, kMax],\n                    ];\n                    const { worldWidth, worldHeight } = getWorldWidthAndHeightFromCorners(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                    const handles = [pos1Index, pos2Index];\n                    const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, handles);\n                    const area = Math.abs(worldWidth * worldHeight) / (scale * scale);\n                    const pixelUnitsOptions = {\n                        isPreScaled: isViewportPreScaled(viewport, targetId),\n                        isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                    };\n                    const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                    let pointsInShape;\n                    if (voxelManager) {\n                        pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                            boundsIJK,\n                            imageData,\n                            returnPoints: this.configuration.storePointData,\n                        });\n                    }\n                    const stats = this.configuration.statsCalculator.getStatistics();\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                        area,\n                        mean: stats.mean?.value,\n                        stdDev: stats.stdDev?.value,\n                        max: stats.max?.value,\n                        min: stats.min?.value,\n                        statsArray: stats.array,\n                        pointsInShape: pointsInShape,\n                        areaUnit,\n                        modalityUnit,\n                    };\n                }\n                else {\n                    this.isHandleOutsideImage = true;\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                    };\n                }\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(RectangleROITool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, mean, max, stdDev, areaUnit, modalityUnit, min } = cachedVolumeStats;\n    if (mean === undefined || mean === null) {\n        return;\n    }\n    const textLines = [];\n    if (csUtils.isNumber(area)) {\n        textLines.push(`Area: ${csUtils.roundNumber(area)} ${areaUnit}`);\n    }\n    if (csUtils.isNumber(mean)) {\n        textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(max)) {\n        textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(min)) {\n        textLines.push(`Min: ${csUtils.roundNumber(min)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(stdDev)) {\n        textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nexport default RectangleROITool;\n","import { getEnabledElement, eventTarget } from '@cornerstonejs/core';\nimport { vec3, vec2 } from 'gl-matrix';\nimport { Events, ToolModes, StrategyCallbacks } from '../../enums';\nimport { fillInsideSphere, thresholdInsideSphere, thresholdInsideSphereIsland, } from './strategies/fillSphere';\nimport { eraseInsideSphere } from './strategies/eraseSphere';\nimport { thresholdInsideCircle, fillInsideCircle, } from './strategies/fillCircle';\nimport { eraseInsideCircle } from './strategies/eraseCircle';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nimport { getStrategyData } from './strategies/utils/getStrategyData';\nclass BrushTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE_CIRCLE: fillInsideCircle,\n                ERASE_INSIDE_CIRCLE: eraseInsideCircle,\n                FILL_INSIDE_SPHERE: fillInsideSphere,\n                ERASE_INSIDE_SPHERE: eraseInsideSphere,\n                THRESHOLD_INSIDE_CIRCLE: thresholdInsideCircle,\n                THRESHOLD_INSIDE_SPHERE: thresholdInsideSphere,\n                THRESHOLD_INSIDE_SPHERE_WITH_ISLAND_REMOVAL: thresholdInsideSphereIsland,\n            },\n            defaultStrategy: 'FILL_INSIDE_CIRCLE',\n            activeStrategy: 'FILL_INSIDE_CIRCLE',\n            brushSize: 25,\n            useCenterSegmentIndex: false,\n            preview: {\n                enabled: false,\n                previewColors: {\n                    0: [255, 255, 255, 128],\n                },\n                previewTimeMs: 250,\n                previewMoveDistance: 8,\n                dragMoveDistance: 4,\n                dragTimeMs: 500,\n            },\n            actions: {\n                [StrategyCallbacks.AcceptPreview]: {\n                    method: StrategyCallbacks.AcceptPreview,\n                    bindings: [\n                        {\n                            key: 'Enter',\n                        },\n                    ],\n                },\n                [StrategyCallbacks.RejectPreview]: {\n                    method: StrategyCallbacks.RejectPreview,\n                    bindings: [\n                        {\n                            key: 'Escape',\n                        },\n                    ],\n                },\n                [StrategyCallbacks.Interpolate]: {\n                    method: StrategyCallbacks.Interpolate,\n                    bindings: [\n                        {\n                            key: 'i',\n                        },\n                    ],\n                    configuration: {\n                        useBallStructuringElement: true,\n                        noUseDistanceTransform: true,\n                        noUseExtrapolation: true,\n                    },\n                },\n                interpolateExtrapolation: {\n                    method: StrategyCallbacks.Interpolate,\n                    bindings: [\n                        {\n                            key: 'e',\n                        },\n                    ],\n                    configuration: {},\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._lastDragInfo = null;\n        this.onSetToolPassive = (evt) => {\n            this.disableCursor();\n        };\n        this.onSetToolEnabled = () => {\n            this.disableCursor();\n        };\n        this.onSetToolDisabled = (evt) => {\n            this.disableCursor();\n        };\n        this.preMouseDownCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this._editData = this.createEditData(element);\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            this._previewData.isDrag = false;\n            this._previewData.timerStart = Date.now();\n            const canvasPoint = vec2.clone(currentPoints.canvas);\n            const worldPoint = viewport.canvasToWorld([\n                canvasPoint[0],\n                canvasPoint[1],\n            ]);\n            this._lastDragInfo = {\n                canvas: canvasPoint,\n                world: vec3.clone(worldPoint),\n            };\n            const hoverData = this._hoverData || this.createHoverData(element);\n            triggerAnnotationRenderForViewportUIDs(hoverData.viewportIdsToRender);\n            const operationData = this.getOperationData(element);\n            this.applyActiveStrategyCallback(enabledElement, operationData, StrategyCallbacks.OnInteractionStart);\n            return true;\n        };\n        this.mouseMoveCallback = (evt) => {\n            if (this.mode === ToolModes.Active) {\n                this.updateCursor(evt);\n                if (!this.configuration.preview.enabled) {\n                    return;\n                }\n                const { previewTimeMs, previewMoveDistance, dragMoveDistance } = this.configuration.preview;\n                const { currentPoints, element } = evt.detail;\n                const { canvas } = currentPoints;\n                const { startPoint, timer, timerStart, isDrag } = this._previewData;\n                if (isDrag) {\n                    return;\n                }\n                const delta = vec2.distance(canvas, startPoint);\n                const time = Date.now() - timerStart;\n                if (delta > previewMoveDistance ||\n                    (time > previewTimeMs && delta > dragMoveDistance)) {\n                    if (timer) {\n                        window.clearTimeout(timer);\n                        this._previewData.timer = null;\n                    }\n                    if (!isDrag) {\n                        this.rejectPreview(element);\n                    }\n                }\n                if (!this._previewData.timer) {\n                    const timer = window.setTimeout(this.previewCallback, 250);\n                    Object.assign(this._previewData, {\n                        timerStart: Date.now(),\n                        timer,\n                        startPoint: canvas,\n                        element,\n                    });\n                }\n            }\n        };\n        this.previewCallback = () => {\n            if (this._previewData.isDrag) {\n                this._previewData.timer = null;\n                return;\n            }\n            this._previewData.timer = null;\n            const operationData = this.getOperationData(this._previewData.element);\n            const enabledElement = getEnabledElement(this._previewData.element);\n            if (!enabledElement) {\n                return;\n            }\n            const { viewport } = enabledElement;\n            const activeStrategy = this.configuration.activeStrategy;\n            const strategyData = getStrategyData({\n                operationData,\n                viewport,\n                strategy: activeStrategy,\n            });\n            if (!operationData) {\n                return;\n            }\n            const memo = this.createMemo(operationData.segmentationId, strategyData.segmentationVoxelManager);\n            this._previewData.preview = this.applyActiveStrategyCallback(getEnabledElement(this._previewData.element), {\n                ...operationData,\n                ...strategyData,\n                memo,\n            }, StrategyCallbacks.Preview);\n        };\n        this._dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.updateCursor(evt);\n            const { viewportIdsToRender } = this._hoverData;\n            triggerAnnotationRenderForViewportUIDs(viewportIdsToRender);\n            const delta = vec2.distance(currentPoints.canvas, this._previewData.startPoint);\n            const { dragTimeMs, dragMoveDistance } = this.configuration.preview;\n            if (!this._previewData.isDrag &&\n                Date.now() - this._previewData.timerStart < dragTimeMs &&\n                delta < dragMoveDistance) {\n                return;\n            }\n            if (this._previewData.timer) {\n                window.clearTimeout(this._previewData.timer);\n                this._previewData.timer = null;\n            }\n            if (!this._lastDragInfo) {\n                const startCanvas = this._previewData.startPoint;\n                const startWorld = viewport.canvasToWorld([\n                    startCanvas[0],\n                    startCanvas[1],\n                ]);\n                this._lastDragInfo = {\n                    canvas: vec2.clone(startCanvas),\n                    world: vec3.clone(startWorld),\n                };\n            }\n            const currentCanvas = currentPoints.canvas;\n            const currentWorld = viewport.canvasToWorld([\n                currentCanvas[0],\n                currentCanvas[1],\n            ]);\n            this._hoverData = this.createHoverData(element, currentCanvas);\n            this._calculateCursor(element, currentCanvas);\n            const operationData = this.getOperationData(element);\n            operationData.strokePointsWorld = [\n                vec3.clone(this._lastDragInfo.world),\n                vec3.clone(currentWorld),\n            ];\n            this._previewData.preview = this.applyActiveStrategy(enabledElement, operationData);\n            const currentCanvasClone = vec2.clone(currentCanvas);\n            this._lastDragInfo = {\n                canvas: currentCanvasClone,\n                world: vec3.clone(currentWorld),\n            };\n            this._previewData.element = element;\n            this._previewData.timerStart = Date.now() + dragTimeMs;\n            this._previewData.isDrag = true;\n            this._previewData.startPoint = currentCanvasClone;\n        };\n        this._endCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const operationData = this.getOperationData(element);\n            if (!this._previewData.preview && !this._previewData.isDrag) {\n                this.applyActiveStrategy(enabledElement, operationData);\n            }\n            this.doneEditMemo();\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.updateCursor(evt);\n            this._editData = null;\n            this._lastDragInfo = null;\n            this.applyActiveStrategyCallback(enabledElement, operationData, StrategyCallbacks.OnInteractionEnd);\n            if (!this._previewData.isDrag) {\n                this.acceptPreview(element);\n            }\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n    }\n    disableCursor() {\n        this._hoverData = undefined;\n        this.rejectPreview();\n    }\n    updateCursor(evt) {\n        const eventData = evt.detail;\n        const { element } = eventData;\n        const { currentPoints } = eventData;\n        const centerCanvas = currentPoints.canvas;\n        this._hoverData = this.createHoverData(element, centerCanvas);\n        this._calculateCursor(element, centerCanvas);\n        if (!this._hoverData) {\n            return;\n        }\n        triggerAnnotationRenderForViewportUIDs(this._hoverData.viewportIdsToRender);\n    }\n    _calculateCursor(element, centerCanvas) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { canvasToWorld } = viewport;\n        const camera = viewport.getCamera();\n        const { brushSize } = this.configuration;\n        const viewUp = vec3.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);\n        const viewPlaneNormal = vec3.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);\n        const viewRight = vec3.create();\n        vec3.cross(viewRight, viewUp, viewPlaneNormal);\n        const centerCursorInWorld = canvasToWorld([\n            centerCanvas[0],\n            centerCanvas[1],\n        ]);\n        const bottomCursorInWorld = vec3.create();\n        const topCursorInWorld = vec3.create();\n        const leftCursorInWorld = vec3.create();\n        const rightCursorInWorld = vec3.create();\n        for (let i = 0; i <= 2; i++) {\n            bottomCursorInWorld[i] = centerCursorInWorld[i] - viewUp[i] * brushSize;\n            topCursorInWorld[i] = centerCursorInWorld[i] + viewUp[i] * brushSize;\n            leftCursorInWorld[i] = centerCursorInWorld[i] - viewRight[i] * brushSize;\n            rightCursorInWorld[i] = centerCursorInWorld[i] + viewRight[i] * brushSize;\n        }\n        if (!this._hoverData) {\n            return;\n        }\n        const { brushCursor } = this._hoverData;\n        const { data } = brushCursor;\n        if (data.handles === undefined) {\n            data.handles = {};\n        }\n        data.handles.points = [\n            bottomCursorInWorld,\n            topCursorInWorld,\n            leftCursorInWorld,\n            rightCursorInWorld,\n        ];\n        const activeStrategy = this.configuration.activeStrategy;\n        const strategy = this.configuration.strategies[activeStrategy];\n        if (typeof strategy?.computeInnerCircleRadius === 'function') {\n            strategy.computeInnerCircleRadius({\n                configuration: this.configuration,\n                viewport,\n            });\n        }\n        data.invalidated = false;\n    }\n    getStatistics(element, segmentIndices) {\n        if (!element) {\n            return;\n        }\n        const enabledElement = getEnabledElement(element);\n        const stats = this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.GetStatistics, segmentIndices);\n        return stats;\n    }\n    rejectPreview(element = this._previewData.element) {\n        if (!element) {\n            return;\n        }\n        this.doneEditMemo();\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.RejectPreview);\n        this._previewData.preview = null;\n        this._previewData.isDrag = false;\n    }\n    acceptPreview(element = this._previewData.element) {\n        if (!element) {\n            return;\n        }\n        super.acceptPreview(element);\n    }\n    interpolate(element, config) {\n        if (!element) {\n            return;\n        }\n        const enabledElement = getEnabledElement(element);\n        this._previewData.preview = this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.Interpolate, config.configuration);\n        this._previewData.isDrag = true;\n    }\n    invalidateBrushCursor() {\n        if (this._hoverData === undefined) {\n            return;\n        }\n        const { data } = this._hoverData.brushCursor;\n        const { viewport } = this._hoverData;\n        data.invalidated = true;\n        const { segmentColor } = this.getActiveSegmentationData(viewport) || {};\n        this._hoverData.brushCursor.metadata.segmentColor = segmentColor;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this._hoverData) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const viewportIdsToRender = this._hoverData.viewportIdsToRender;\n        if (!viewportIdsToRender.includes(viewport.id)) {\n            return;\n        }\n        const brushCursor = this._hoverData.brushCursor;\n        if (brushCursor.data.invalidated === true) {\n            const { centerCanvas } = this._hoverData;\n            const { element } = viewport;\n            this._calculateCursor(element, centerCanvas);\n        }\n        const toolMetadata = brushCursor.metadata;\n        if (!toolMetadata) {\n            return;\n        }\n        const annotationUID = toolMetadata.brushCursorUID;\n        const data = brushCursor.data;\n        const { points } = data.handles;\n        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n        const bottom = canvasCoordinates[0];\n        const top = canvasCoordinates[1];\n        const center = [\n            Math.floor((bottom[0] + top[0]) / 2),\n            Math.floor((bottom[1] + top[1]) / 2),\n        ];\n        const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n        const color = `rgb(${toolMetadata.segmentColor?.slice(0, 3) || [0, 0, 0]})`;\n        if (!viewport.getRenderingEngine()) {\n            console.warn('Rendering Engine has been destroyed');\n            return;\n        }\n        const circleUID = '0';\n        drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n            color,\n            lineDash: this.centerSegmentIndexInfo.segmentIndex === 0 ? [1, 2] : null,\n        });\n        const { dynamicRadiusInCanvas } = this.configuration?.threshold || {\n            dynamicRadiusInCanvas: 0,\n        };\n        if (dynamicRadiusInCanvas) {\n            const circleUID1 = '1';\n            drawCircleSvg(svgDrawingHelper, annotationUID, circleUID1, center, dynamicRadiusInCanvas, {\n                color,\n            });\n        }\n    }\n}\nBrushTool.toolName = 'Brush';\nexport default BrushTool;\n","import { getEnabledElement, cache, utilities as csUtils, Enums, eventTarget, BaseVolumeViewport, StackViewport, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nimport { getActiveSegmentation } from '../../stateManagement/segmentation/getActiveSegmentation';\nimport { getLockedSegmentIndices } from '../../stateManagement/segmentation/segmentLocking';\nimport { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nimport { getCurrentLabelmapImageIdForViewport } from '../../stateManagement/segmentation/getCurrentLabelmapImageIdForViewport';\nimport { getSegmentIndexColor } from '../../stateManagement/segmentation/config/segmentationColor';\nimport { getActiveSegmentIndex } from '../../stateManagement/segmentation/getActiveSegmentIndex';\nimport { StrategyCallbacks } from '../../enums';\nimport * as LabelmapMemo from '../../utilities/segmentation/createLabelmapMemo';\nimport { getAllAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { filterAnnotationsForDisplay } from '../../utilities/planar';\nimport { isPointInsidePolyline3D } from '../../utilities/math/polyline';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { fillInsideCircle } from './strategies';\nexport default class LabelmapBaseTool extends BaseTool {\n    static { this.previewData = {\n        preview: null,\n        element: null,\n        timerStart: 0,\n        timer: null,\n        startPoint: [NaN, NaN],\n        isDrag: false,\n    }; }\n    constructor(toolProps, defaultToolProps) {\n        super(toolProps, defaultToolProps);\n        this.memoMap = new Map();\n        this.acceptedMemoIds = new Map();\n        this.centerSegmentIndexInfo = {\n            segmentIndex: null,\n            hasSegmentIndex: false,\n            hasPreviewIndex: false,\n            changedIndices: [],\n        };\n    }\n    _historyRedoHandler(evt) {\n        const { id, operationType } = evt.detail;\n        if (operationType !== 'labelmap') {\n            return;\n        }\n        if (this.acceptedMemoIds.has(id)) {\n            this._hoverData = null;\n            const memoData = this.acceptedMemoIds.get(id);\n            const element = memoData?.element;\n            const operationData = this.getOperationData(element);\n            operationData.segmentIndex = memoData?.segmentIndex;\n            if (element) {\n                this.applyActiveStrategyCallback(getEnabledElement(element), operationData, StrategyCallbacks.AcceptPreview);\n            }\n        }\n        this._previewData.isDrag = true;\n    }\n    get _previewData() {\n        return LabelmapBaseTool.previewData;\n    }\n    hasPreviewData() {\n        return !!this._previewData.preview;\n    }\n    shouldResolvePreviewRequests() {\n        return ((this.mode === 'Active' || this.mode === 'Enabled') &&\n            this.hasPreviewData());\n    }\n    createMemo(segmentationId, segmentationVoxelManager) {\n        const voxelManagerId = segmentationVoxelManager.id;\n        if (this.memo &&\n            this.memo.segmentationVoxelManager === segmentationVoxelManager) {\n            return this.memo;\n        }\n        let memo = this.memoMap.get(voxelManagerId);\n        if (!memo) {\n            memo = LabelmapMemo.createLabelmapMemo(segmentationId, segmentationVoxelManager);\n            this.memoMap.set(voxelManagerId, memo);\n        }\n        else {\n            if (memo.redoVoxelManager) {\n                memo = LabelmapMemo.createLabelmapMemo(segmentationId, segmentationVoxelManager);\n                this.memoMap.set(voxelManagerId, memo);\n            }\n        }\n        this.memo = memo;\n        return memo;\n    }\n    createEditData(element) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const activeSegmentation = getActiveSegmentation(viewport.id);\n        if (!activeSegmentation) {\n            const event = new CustomEvent(Enums.Events.ERROR_EVENT, {\n                detail: {\n                    type: 'Segmentation',\n                    message: 'No active segmentation detected, create a segmentation representation before using the brush tool',\n                },\n                cancelable: true,\n            });\n            eventTarget.dispatchEvent(event);\n            return null;\n        }\n        const { segmentationId } = activeSegmentation;\n        const segmentsLocked = getLockedSegmentIndices(segmentationId);\n        const { representationData } = getSegmentation(segmentationId);\n        const editData = this.getEditData({\n            viewport,\n            representationData,\n            segmentsLocked,\n            segmentationId,\n        });\n        return editData;\n    }\n    getEditData({ viewport, representationData, segmentsLocked, segmentationId, }) {\n        if (viewport instanceof BaseVolumeViewport) {\n            const { volumeId } = representationData[SegmentationRepresentations.Labelmap];\n            const actors = viewport.getActors();\n            const isStackViewport = viewport instanceof StackViewport;\n            if (isStackViewport) {\n                const event = new CustomEvent(Enums.Events.ERROR_EVENT, {\n                    detail: {\n                        type: 'Segmentation',\n                        message: 'Cannot perform brush operation on the selected viewport',\n                    },\n                    cancelable: true,\n                });\n                eventTarget.dispatchEvent(event);\n                return null;\n            }\n            const volumes = actors.map((actorEntry) => cache.getVolume(actorEntry.referencedId));\n            const segmentationVolume = cache.getVolume(volumeId);\n            const referencedVolumeIdToThreshold = volumes.find((volume) => csUtils.isEqual(volume.dimensions, segmentationVolume.dimensions))?.volumeId || volumes[0]?.volumeId;\n            return {\n                volumeId,\n                referencedVolumeId: this.configuration.threshold?.volumeId ??\n                    referencedVolumeIdToThreshold,\n                segmentsLocked,\n            };\n        }\n        else {\n            const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n            if (!segmentationImageId) {\n                return;\n            }\n            return {\n                imageId: segmentationImageId,\n                segmentsLocked,\n            };\n        }\n    }\n    createHoverData(element, centerCanvas) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, viewUp } = camera;\n        const viewportIdsToRender = [viewport.id];\n        const { segmentIndex, segmentationId, segmentColor } = this.getActiveSegmentationData(viewport) || {};\n        const brushCursor = {\n            metadata: {\n                viewPlaneNormal: [...viewPlaneNormal],\n                viewUp: [...viewUp],\n                FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                referencedImageId: '',\n                toolName: this.getToolName(),\n                segmentColor,\n            },\n            data: {},\n        };\n        return {\n            brushCursor,\n            centerCanvas,\n            segmentIndex,\n            viewport,\n            segmentationId,\n            segmentColor,\n            viewportIdsToRender,\n        };\n    }\n    getActiveSegmentationData(viewport) {\n        const viewportId = viewport.id;\n        const activeRepresentation = getActiveSegmentation(viewportId);\n        if (!activeRepresentation) {\n            return;\n        }\n        const { segmentationId } = activeRepresentation;\n        const segmentIndex = getActiveSegmentIndex(segmentationId);\n        if (!segmentIndex) {\n            return;\n        }\n        const segmentColor = getSegmentIndexColor(viewportId, segmentationId, segmentIndex);\n        return {\n            segmentIndex,\n            segmentationId,\n            segmentColor,\n        };\n    }\n    getOperationData(element) {\n        const editData = this._editData || this.createEditData(element);\n        const { segmentIndex, segmentationId, brushCursor } = this._hoverData || this.createHoverData(element);\n        const { data, metadata = {} } = brushCursor || {};\n        const { viewPlaneNormal, viewUp } = metadata;\n        const configColor = this.configuration.preview?.previewColors?.[segmentIndex];\n        const { viewport } = getEnabledElement(element);\n        const segmentColor = getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n        if (!configColor && !segmentColor) {\n            return;\n        }\n        let previewColor = null, previewSegmentIndex = null;\n        if (this.configuration.preview?.enabled) {\n            previewColor = configColor || lightenColor(...segmentColor);\n            previewSegmentIndex = 255;\n        }\n        const operationData = {\n            ...editData,\n            points: data?.handles?.points,\n            segmentIndex,\n            viewPlaneNormal,\n            previewOnHover: !this._previewData.isDrag,\n            toolGroupId: this.toolGroupId,\n            segmentationId,\n            viewUp,\n            centerSegmentIndexInfo: this.centerSegmentIndexInfo,\n            activeStrategy: this.configuration.activeStrategy,\n            configuration: this.configuration,\n            previewColor,\n            previewSegmentIndex,\n            createMemo: this.createMemo.bind(this),\n        };\n        return operationData;\n    }\n    addPreview(element = this._previewData.element, options) {\n        const { _previewData } = this;\n        const acceptReject = options?.acceptReject;\n        if (acceptReject === true) {\n            this.acceptPreview(element);\n        }\n        else if (acceptReject === false) {\n            this.rejectPreview(element);\n        }\n        const enabledElement = getEnabledElement(element);\n        const results = this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.AddPreview);\n        _previewData.isDrag = true;\n        if (results?.modified) {\n            _previewData.preview = results;\n            _previewData.element = element;\n        }\n        return results;\n    }\n    rejectPreview(element = this._previewData.element) {\n        if (!element) {\n            return;\n        }\n        this.doneEditMemo();\n        const enabledElement = getEnabledElement(element);\n        this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.RejectPreview);\n        this._previewData.preview = null;\n        this._previewData.isDrag = false;\n    }\n    acceptPreview(element = this._previewData.element) {\n        if (!element) {\n            return;\n        }\n        const operationData = this.getOperationData(element);\n        if (this.memo && this.memo.id) {\n            this.acceptedMemoIds.set(this.memo.id, {\n                element,\n                segmentIndex: operationData.segmentIndex,\n            });\n        }\n        const enabledElement = getEnabledElement(element);\n        this.applyActiveStrategyCallback(enabledElement, operationData, StrategyCallbacks.AcceptPreview);\n        this.doneEditMemo();\n        this._previewData.preview = null;\n        this._previewData.isDrag = false;\n    }\n    static viewportContoursToLabelmap(viewport, options) {\n        const removeContours = options?.removeContours ?? true;\n        const annotations = getAllAnnotations();\n        const viewAnnotations = filterAnnotationsForDisplay(viewport, annotations);\n        if (!viewAnnotations?.length) {\n            return;\n        }\n        const contourAnnotations = viewAnnotations.filter((annotation) => annotation.data.contour?.polyline?.length);\n        if (!contourAnnotations.length) {\n            return;\n        }\n        const brushInstance = new LabelmapBaseTool({}, {\n            configuration: {\n                strategies: {\n                    FILL_INSIDE_CIRCLE: fillInsideCircle,\n                },\n                activeStrategy: 'FILL_INSIDE_CIRCLE',\n            },\n        });\n        const preview = brushInstance.addPreview(viewport.element);\n        const { memo, segmentationId } = preview;\n        const previewVoxels = memo?.voxelManager;\n        const segmentationVoxels = previewVoxels.sourceVoxelManager || previewVoxels;\n        const { dimensions } = previewVoxels;\n        const imageData = viewport\n            .getDefaultActor()\n            .actor.getMapper()\n            .getInputData();\n        for (const annotation of contourAnnotations) {\n            const boundsIJK = [\n                [Infinity, -Infinity],\n                [Infinity, -Infinity],\n                [Infinity, -Infinity],\n            ];\n            const { polyline } = annotation.data.contour;\n            for (const point of polyline) {\n                const indexPoint = imageData.worldToIndex(point);\n                indexPoint.forEach((v, idx) => {\n                    boundsIJK[idx][0] = Math.min(boundsIJK[idx][0], v);\n                    boundsIJK[idx][1] = Math.max(boundsIJK[idx][1], v);\n                });\n            }\n            boundsIJK.forEach((bound, idx) => {\n                bound[0] = Math.round(Math.max(0, bound[0]));\n                bound[1] = Math.round(Math.min(dimensions[idx] - 1, bound[1]));\n            });\n            const activeIndex = getActiveSegmentIndex(segmentationId);\n            const startPoint = annotation.data.handles?.[0] || polyline[0];\n            const startIndex = imageData.worldToIndex(startPoint).map(Math.round);\n            const startValue = segmentationVoxels.getAtIJKPoint(startIndex) || 0;\n            let hasZeroIndex = false;\n            let hasPositiveIndex = false;\n            for (const polyPoint of polyline) {\n                const polyIndex = imageData.worldToIndex(polyPoint).map(Math.round);\n                const polyValue = segmentationVoxels.getAtIJKPoint(polyIndex);\n                if (polyValue === startValue) {\n                    hasZeroIndex = true;\n                }\n                else if (polyValue >= 0) {\n                    hasPositiveIndex = true;\n                }\n            }\n            const hasBoth = hasZeroIndex && hasPositiveIndex;\n            const segmentIndex = hasBoth\n                ? startValue\n                : startValue === 0\n                    ? activeIndex\n                    : 0;\n            for (let i = boundsIJK[0][0]; i <= boundsIJK[0][1]; i++) {\n                for (let j = boundsIJK[1][0]; j <= boundsIJK[1][1]; j++) {\n                    for (let k = boundsIJK[2][0]; k <= boundsIJK[2][1]; k++) {\n                        const worldPoint = imageData.indexToWorld([i, j, k]);\n                        const isContained = isPointInsidePolyline3D(worldPoint, polyline);\n                        if (isContained) {\n                            previewVoxels.setAtIJK(i, j, k, segmentIndex);\n                        }\n                    }\n                }\n            }\n            if (removeContours) {\n                removeAnnotation(annotation.annotationUID);\n            }\n        }\n        const slices = previewVoxels.getArrayOfModifiedSlices();\n        triggerSegmentationDataModified(segmentationId, slices);\n    }\n}\nfunction lightenColor(r, g, b, a, factor = 0.4) {\n    return [\n        Math.round(r + (255 - r) * factor),\n        Math.round(g + (255 - g) * factor),\n        Math.round(b + (255 - b) * factor),\n        a,\n    ];\n}\n","import { vec3 } from 'gl-matrix';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport { getBoundingBoxAroundShapeIJK } from '../../../utilities/boundingBox';\nimport BrushStrategy from './BrushStrategy';\nimport { StrategyCallbacks } from '../../../enums';\nimport compositions from './compositions';\nimport { pointInSphere } from '../../../utilities/math/sphere';\nconst { transformWorldToIndex, transformIndexToWorld, isEqual } = csUtils;\nexport function getEllipseCornersFromCanvasCoordinates(canvasCoordinates) {\n    const [bottom, top, left, right] = canvasCoordinates;\n    const topLeft = [left[0], top[1]];\n    const bottomRight = [right[0], bottom[1]];\n    const bottomLeft = [left[0], bottom[1]];\n    const topRight = [right[0], top[1]];\n    return [topLeft, bottomRight, bottomLeft, topRight];\n}\nfunction createCircleCornersForCenter(center, viewUp, viewRight, radius) {\n    const centerVec = vec3.fromValues(center[0], center[1], center[2]);\n    const top = vec3.create();\n    vec3.scaleAndAdd(top, centerVec, viewUp, radius);\n    const bottom = vec3.create();\n    vec3.scaleAndAdd(bottom, centerVec, viewUp, -radius);\n    const right = vec3.create();\n    vec3.scaleAndAdd(right, centerVec, viewRight, radius);\n    const left = vec3.create();\n    vec3.scaleAndAdd(left, centerVec, viewRight, -radius);\n    return [\n        bottom,\n        top,\n        left,\n        right,\n    ];\n}\nfunction createStrokePredicate(centers, radius) {\n    if (!centers.length || radius <= 0) {\n        return null;\n    }\n    const radiusSquared = radius * radius;\n    const centerVecs = centers.map((point) => [point[0], point[1], point[2]]);\n    const segments = [];\n    for (let i = 1; i < centerVecs.length; i++) {\n        const start = centerVecs[i - 1];\n        const end = centerVecs[i];\n        const dx = end[0] - start[0];\n        const dy = end[1] - start[1];\n        const dz = end[2] - start[2];\n        const lengthSquared = dx * dx + dy * dy + dz * dz;\n        segments.push({ start, vector: [dx, dy, dz], lengthSquared });\n    }\n    return (worldPoint) => {\n        if (!worldPoint) {\n            return false;\n        }\n        for (const centerVec of centerVecs) {\n            const dx = worldPoint[0] - centerVec[0];\n            const dy = worldPoint[1] - centerVec[1];\n            const dz = worldPoint[2] - centerVec[2];\n            if (dx * dx + dy * dy + dz * dz <= radiusSquared) {\n                return true;\n            }\n        }\n        for (const { start, vector, lengthSquared } of segments) {\n            if (lengthSquared === 0) {\n                const dx = worldPoint[0] - start[0];\n                const dy = worldPoint[1] - start[1];\n                const dz = worldPoint[2] - start[2];\n                if (dx * dx + dy * dy + dz * dz <= radiusSquared) {\n                    return true;\n                }\n                continue;\n            }\n            const dx = worldPoint[0] - start[0];\n            const dy = worldPoint[1] - start[1];\n            const dz = worldPoint[2] - start[2];\n            const dot = dx * vector[0] + dy * vector[1] + dz * vector[2];\n            const t = Math.max(0, Math.min(1, dot / lengthSquared));\n            const projX = start[0] + vector[0] * t;\n            const projY = start[1] + vector[1] * t;\n            const projZ = start[2] + vector[2] * t;\n            const distX = worldPoint[0] - projX;\n            const distY = worldPoint[1] - projY;\n            const distZ = worldPoint[2] - projZ;\n            if (distX * distX + distY * distY + distZ * distZ <= radiusSquared) {\n                return true;\n            }\n        }\n        return false;\n    };\n}\nconst initializeCircle = {\n    [StrategyCallbacks.Initialize]: (operationData) => {\n        const { points, viewport, segmentationImageData, viewUp, viewPlaneNormal, } = operationData;\n        if (!points) {\n            return;\n        }\n        const center = vec3.create();\n        if (points.length >= 2) {\n            vec3.add(center, points[0], points[1]);\n            vec3.scale(center, center, 0.5);\n        }\n        else {\n            vec3.copy(center, points[0]);\n        }\n        operationData.centerWorld = center;\n        operationData.centerIJK = transformWorldToIndex(segmentationImageData, center);\n        const brushRadius = points.length >= 2 ? vec3.distance(points[0], points[1]) / 2 : 0;\n        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n        const corners = getEllipseCornersFromCanvasCoordinates(canvasCoordinates);\n        const cornersInWorld = corners.map((corner) => viewport.canvasToWorld(corner));\n        const normalizedViewUp = vec3.fromValues(viewUp[0], viewUp[1], viewUp[2]);\n        vec3.normalize(normalizedViewUp, normalizedViewUp);\n        const normalizedPlaneNormal = vec3.fromValues(viewPlaneNormal[0], viewPlaneNormal[1], viewPlaneNormal[2]);\n        vec3.normalize(normalizedPlaneNormal, normalizedPlaneNormal);\n        const viewRight = vec3.create();\n        vec3.cross(viewRight, normalizedViewUp, normalizedPlaneNormal);\n        vec3.normalize(viewRight, viewRight);\n        const strokeCentersSource = operationData.strokePointsWorld &&\n            operationData.strokePointsWorld.length > 0\n            ? operationData.strokePointsWorld\n            : [operationData.centerWorld];\n        const strokeCenters = strokeCentersSource.map((point) => vec3.clone(point));\n        const strokeCornersWorld = strokeCenters.flatMap((centerPoint) => createCircleCornersForCenter(centerPoint, normalizedViewUp, viewRight, brushRadius));\n        const circleCornersIJK = strokeCornersWorld.map((world) => transformWorldToIndex(segmentationImageData, world));\n        const boundsIJK = getBoundingBoxAroundShapeIJK(circleCornersIJK, segmentationImageData.getDimensions());\n        operationData.strokePointsWorld = strokeCenters;\n        operationData.isInObject = createPointInEllipse(cornersInWorld, {\n            strokePointsWorld: strokeCenters,\n            segmentationImageData,\n            radius: brushRadius,\n        });\n        operationData.isInObjectBoundsIJK = boundsIJK;\n    },\n};\nfunction createPointInEllipse(cornersInWorld = [], options = {}) {\n    if (!cornersInWorld || cornersInWorld.length !== 4) {\n        throw new Error('createPointInEllipse: cornersInWorld must have 4 points');\n    }\n    const [topLeft, bottomRight, bottomLeft, topRight] = cornersInWorld;\n    const center = vec3.create();\n    vec3.add(center, topLeft, bottomRight);\n    vec3.scale(center, center, 0.5);\n    const majorAxisVec = vec3.create();\n    vec3.subtract(majorAxisVec, topRight, topLeft);\n    const xRadius = vec3.length(majorAxisVec) / 2;\n    vec3.normalize(majorAxisVec, majorAxisVec);\n    const minorAxisVec = vec3.create();\n    vec3.subtract(minorAxisVec, bottomLeft, topLeft);\n    const yRadius = vec3.length(minorAxisVec) / 2;\n    vec3.normalize(minorAxisVec, minorAxisVec);\n    const normal = vec3.create();\n    vec3.cross(normal, majorAxisVec, minorAxisVec);\n    vec3.normalize(normal, normal);\n    const radiusForStroke = options.radius ?? Math.max(xRadius, yRadius);\n    const strokePredicate = createStrokePredicate(options.strokePointsWorld || [], radiusForStroke);\n    if (isEqual(xRadius, yRadius)) {\n        const radius = xRadius;\n        const sphereObj = {\n            center,\n            radius,\n            radius2: radius * radius,\n        };\n        return (pointLPS, pointIJK) => {\n            let worldPoint = pointLPS;\n            if (!worldPoint && pointIJK && options.segmentationImageData) {\n                worldPoint = transformIndexToWorld(options.segmentationImageData, pointIJK);\n            }\n            if (!worldPoint) {\n                return false;\n            }\n            if (strokePredicate?.(worldPoint)) {\n                return true;\n            }\n            return pointInSphere(sphereObj, worldPoint);\n        };\n    }\n    return (pointLPS, pointIJK) => {\n        let worldPoint = pointLPS;\n        if (!worldPoint && pointIJK && options.segmentationImageData) {\n            worldPoint = transformIndexToWorld(options.segmentationImageData, pointIJK);\n        }\n        if (!worldPoint) {\n            return false;\n        }\n        if (strokePredicate?.(worldPoint)) {\n            return true;\n        }\n        const pointVec = vec3.create();\n        vec3.subtract(pointVec, worldPoint, center);\n        const distToPlane = vec3.dot(pointVec, normal);\n        const proj = vec3.create();\n        vec3.scaleAndAdd(proj, pointVec, normal, -distToPlane);\n        const fromTopLeft = vec3.create();\n        const centerToTopLeft = vec3.create();\n        vec3.subtract(centerToTopLeft, center, topLeft);\n        vec3.subtract(fromTopLeft, proj, centerToTopLeft);\n        const x = vec3.dot(fromTopLeft, majorAxisVec);\n        const y = vec3.dot(fromTopLeft, minorAxisVec);\n        return (x * x) / (xRadius * xRadius) + (y * y) / (yRadius * yRadius) <= 1;\n    };\n}\nconst CIRCLE_STRATEGY = new BrushStrategy('Circle', compositions.regionFill, compositions.setValue, initializeCircle, compositions.determineSegmentIndex, compositions.preview, compositions.labelmapStatistics);\nconst CIRCLE_THRESHOLD_STRATEGY = new BrushStrategy('CircleThreshold', compositions.regionFill, compositions.setValue, initializeCircle, compositions.determineSegmentIndex, compositions.dynamicThreshold, compositions.threshold, compositions.preview, compositions.islandRemoval, compositions.labelmapStatistics);\nconst fillInsideCircle = CIRCLE_STRATEGY.strategyFunction;\nconst thresholdInsideCircle = CIRCLE_THRESHOLD_STRATEGY.strategyFunction;\nexport function fillOutsideCircle() {\n    throw new Error('Not yet implemented');\n}\nexport { CIRCLE_STRATEGY, CIRCLE_THRESHOLD_STRATEGY, fillInsideCircle, thresholdInsideCircle, createPointInEllipse, createPointInEllipse as createEllipseInPoint, };\n","import { vec3 } from 'gl-matrix';\nimport { utilities as csUtils, StackViewport } from '@cornerstonejs/core';\nimport { getBoundingBoxAroundShapeIJK } from '../../../utilities/boundingBox';\nimport BrushStrategy from './BrushStrategy';\nimport { StrategyCallbacks } from '../../../enums';\nimport compositions from './compositions';\nconst { transformWorldToIndex } = csUtils;\nconst initializeRectangle = {\n    [StrategyCallbacks.Initialize]: (operationData) => {\n        const { points, viewport, segmentationImageData, } = operationData;\n        if (!points) {\n            return;\n        }\n        const center = vec3.fromValues(0, 0, 0);\n        points.forEach((point) => {\n            vec3.add(center, center, point);\n        });\n        vec3.scale(center, center, 1 / points.length);\n        operationData.centerWorld = center;\n        operationData.centerIJK = transformWorldToIndex(segmentationImageData, center);\n        const { boundsIJK, pointInShapeFn } = createPointInRectangle(viewport, points, segmentationImageData);\n        operationData.isInObject = pointInShapeFn;\n        operationData.isInObjectBoundsIJK = boundsIJK;\n    },\n};\nfunction createPointInRectangle(viewport, points, segmentationImageData) {\n    let rectangleCornersIJK = points.map((world) => {\n        return transformWorldToIndex(segmentationImageData, world);\n    });\n    rectangleCornersIJK = rectangleCornersIJK.map((point) => {\n        return point.map((coord) => {\n            return Math.round(coord);\n        });\n    });\n    const boundsIJK = getBoundingBoxAroundShapeIJK(rectangleCornersIJK, segmentationImageData.getDimensions());\n    const [p0, p1, p2, p3] = points;\n    const axisU = vec3.create();\n    const axisV = vec3.create();\n    vec3.subtract(axisU, p1, p0);\n    vec3.subtract(axisV, p3, p0);\n    const uLen = vec3.length(axisU);\n    const vLen = vec3.length(axisV);\n    vec3.normalize(axisU, axisU);\n    vec3.normalize(axisV, axisV);\n    const normal = vec3.create();\n    vec3.cross(normal, axisU, axisV);\n    vec3.normalize(normal, normal);\n    const direction = segmentationImageData.getDirection();\n    const spacing = segmentationImageData.getSpacing();\n    const { viewPlaneNormal } = viewport.getCamera();\n    const EPS = csUtils.getSpacingInNormalDirection({\n        direction,\n        spacing,\n    }, viewPlaneNormal);\n    const pointInShapeFn = (pointLPS) => {\n        const v = vec3.create();\n        vec3.subtract(v, pointLPS, p0);\n        const u = vec3.dot(v, axisU);\n        const vproj = vec3.dot(v, axisV);\n        const d = Math.abs(vec3.dot(v, normal));\n        return (u >= -EPS &&\n            u <= uLen + EPS &&\n            vproj >= -EPS &&\n            vproj <= vLen + EPS &&\n            d <= EPS);\n    };\n    return { boundsIJK, pointInShapeFn };\n}\nconst RECTANGLE_STRATEGY = new BrushStrategy('Rectangle', compositions.regionFill, compositions.setValue, initializeRectangle, compositions.determineSegmentIndex, compositions.preview, compositions.labelmapStatistics);\nconst RECTANGLE_THRESHOLD_STRATEGY = new BrushStrategy('RectangleThreshold', compositions.regionFill, compositions.setValue, initializeRectangle, compositions.determineSegmentIndex, compositions.dynamicThreshold, compositions.threshold, compositions.preview, compositions.islandRemoval, compositions.labelmapStatistics);\nconst fillInsideRectangle = RECTANGLE_STRATEGY.strategyFunction;\nconst thresholdInsideRectangle = RECTANGLE_THRESHOLD_STRATEGY.strategyFunction;\nexport { RECTANGLE_STRATEGY, RECTANGLE_THRESHOLD_STRATEGY, fillInsideRectangle, thresholdInsideRectangle, };\n","import { utilities, BaseVolumeViewport, StackViewport, cache, metaData, } from '@cornerstonejs/core';\nimport { addAnnotation } from '../stateManagement/annotation/annotationState';\nimport { vec3 } from 'gl-matrix';\nfunction annotationHydration(viewport, toolName, worldPoints, options) {\n    const viewReference = viewport.getViewReference();\n    const { viewPlaneNormal, FrameOfReferenceUID } = viewReference;\n    const annotation = {\n        annotationUID: options?.annotationUID || utilities.uuidv4(),\n        data: {\n            handles: {\n                points: worldPoints,\n            },\n        },\n        highlighted: false,\n        autoGenerated: false,\n        invalidated: false,\n        isLocked: false,\n        isVisible: true,\n        metadata: {\n            toolName,\n            viewPlaneNormal,\n            FrameOfReferenceUID,\n            referencedImageId: getReferencedImageId(viewport, worldPoints[0], viewPlaneNormal),\n            ...options,\n        },\n    };\n    addAnnotation(annotation, viewport.element);\n    return annotation;\n}\nfunction getReferencedImageId(viewport, worldPos, viewPlaneNormal) {\n    let referencedImageId;\n    if (viewport instanceof StackViewport) {\n        referencedImageId = getClosestImageIdForStackViewport(viewport, worldPos, viewPlaneNormal);\n    }\n    else if (viewport instanceof BaseVolumeViewport) {\n        const targetId = getTargetId(viewport);\n        const volumeId = utilities.getVolumeId(targetId);\n        const imageVolume = cache.getVolume(volumeId);\n        referencedImageId = utilities.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n    }\n    else {\n        throw new Error('getReferencedImageId: viewport must be a StackViewport or BaseVolumeViewport');\n    }\n    return referencedImageId;\n}\nfunction getTargetId(viewport) {\n    const targetId = viewport.getViewReferenceId?.();\n    if (targetId) {\n        return targetId;\n    }\n    if (viewport instanceof BaseVolumeViewport) {\n        return `volumeId:${getTargetVolumeId(viewport)}`;\n    }\n    throw new Error('getTargetId: viewport must have a getTargetId method');\n}\nfunction getTargetVolumeId(viewport) {\n    const actorEntries = viewport.getActors();\n    if (!actorEntries) {\n        return;\n    }\n    return actorEntries.find((actorEntry) => actorEntry.actor.getClassName() === 'vtkVolume')?.uid;\n}\nfunction getClosestImageIdForStackViewport(viewport, worldPos, viewPlaneNormal) {\n    const imageIds = viewport.getImageIds();\n    if (!imageIds || !imageIds.length) {\n        return;\n    }\n    const distanceImagePairs = imageIds.map((imageId) => {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n        const distance = calculateDistanceToImage(worldPos, imagePositionPatient, viewPlaneNormal);\n        return { imageId, distance };\n    });\n    distanceImagePairs.sort((a, b) => a.distance - b.distance);\n    return distanceImagePairs[0].imageId;\n}\nfunction calculateDistanceToImage(worldPos, ImagePositionPatient, viewPlaneNormal) {\n    const dir = vec3.create();\n    vec3.sub(dir, worldPos, ImagePositionPatient);\n    const dot = vec3.dot(dir, viewPlaneNormal);\n    return Math.abs(dot);\n}\nexport { annotationHydration, getClosestImageIdForStackViewport };\n","function extend2DBoundingBoxInViewAxis(boundsIJK, numSlicesToProject) {\n    const sliceNormalIndex = boundsIJK.findIndex(([min, max]) => min === max);\n    if (sliceNormalIndex === -1) {\n        throw new Error('3D bounding boxes not supported in an oblique plane');\n    }\n    boundsIJK[sliceNormalIndex][0] -= numSlicesToProject;\n    boundsIJK[sliceNormalIndex][1] += numSlicesToProject;\n    return boundsIJK;\n}\nexport default extend2DBoundingBoxInViewAxis;\n","import { CONSTANTS } from '@cornerstonejs/core';\nconst { EPSILON } = CONSTANTS;\nfunction calculateBoundingBox(points, dimensions, isWorld = false) {\n    let xMin = Infinity;\n    let xMax = isWorld ? -Infinity : 0;\n    let yMin = Infinity;\n    let yMax = isWorld ? -Infinity : 0;\n    let zMin = Infinity;\n    let zMax = isWorld ? -Infinity : 0;\n    const is3D = points[0]?.length === 3;\n    for (let i = 0; i < points.length; i++) {\n        const p = points[i];\n        xMin = Math.min(p[0], xMin);\n        xMax = Math.max(p[0], xMax);\n        yMin = Math.min(p[1], yMin);\n        yMax = Math.max(p[1], yMax);\n        if (is3D) {\n            zMin = Math.min(p[2] ?? zMin, zMin);\n            zMax = Math.max(p[2] ?? zMax, zMax);\n        }\n    }\n    if (dimensions) {\n        xMin = Math.max(isWorld ? dimensions[0] + EPSILON : 0, xMin);\n        xMax = Math.min(isWorld ? dimensions[0] - EPSILON : dimensions[0] - 1, xMax);\n        yMin = Math.max(isWorld ? dimensions[1] + EPSILON : 0, yMin);\n        yMax = Math.min(isWorld ? dimensions[1] - EPSILON : dimensions[1] - 1, yMax);\n        if (is3D && dimensions.length === 3) {\n            zMin = Math.max(isWorld ? dimensions[2] + EPSILON : 0, zMin);\n            zMax = Math.min(isWorld ? dimensions[2] - EPSILON : dimensions[2] - 1, zMax);\n        }\n    }\n    else if (!isWorld) {\n        xMin = Math.max(0, xMin);\n        xMax = Math.min(Infinity, xMax);\n        yMin = Math.max(0, yMin);\n        yMax = Math.min(Infinity, yMax);\n        if (is3D) {\n            zMin = Math.max(0, zMin);\n            zMax = Math.min(Infinity, zMax);\n        }\n    }\n    return is3D\n        ? [\n            [xMin, xMax],\n            [yMin, yMax],\n            [zMin, zMax],\n        ]\n        : [[xMin, xMax], [yMin, yMax], null];\n}\nexport function getBoundingBoxAroundShapeIJK(points, dimensions) {\n    return calculateBoundingBox(points, dimensions, false);\n}\nexport function getBoundingBoxAroundShapeWorld(points, clipBounds) {\n    return calculateBoundingBox(points, clipBounds, true);\n}\n","import { utilities } from '@cornerstonejs/core';\nimport { addAnnotation, removeAnnotation } from '../../stateManagement';\nimport { removeContourSegmentationAnnotation } from './removeContourSegmentationAnnotation';\nimport { addContourSegmentationAnnotation } from './addContourSegmentationAnnotation';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nconst DEFAULT_CONTOUR_SEG_TOOL_NAME = 'PlanarFreehandContourSegmentationTool';\nexport default function convertContourSegmentationAnnotation(annotation) {\n    const { polyline } = annotation.data?.contour || {};\n    if (!polyline || polyline.length < 3) {\n        console.warn('Skipping creation of new annotation due to invalid polyline:', polyline);\n        return;\n    }\n    removeAnnotation(annotation.annotationUID);\n    removeContourSegmentationAnnotation(annotation);\n    const startPointWorld = polyline[0];\n    const endPointWorld = polyline[polyline.length - 1];\n    const newAnnotation = {\n        metadata: {\n            ...annotation.metadata,\n            toolName: DEFAULT_CONTOUR_SEG_TOOL_NAME,\n            originalToolName: annotation.metadata.originalToolName || annotation.metadata.toolName,\n        },\n        data: {\n            cachedStats: {},\n            handles: {\n                points: [startPointWorld, endPointWorld],\n                textBox: annotation.data.handles.textBox\n                    ? { ...annotation.data.handles.textBox }\n                    : undefined,\n            },\n            contour: {\n                ...annotation.data.contour,\n            },\n            spline: annotation.data.spline,\n            segmentation: {\n                ...annotation.data.segmentation,\n            },\n        },\n        annotationUID: utilities.uuidv4(),\n        highlighted: true,\n        invalidated: true,\n        isLocked: false,\n        isVisible: undefined,\n        interpolationUID: annotation.interpolationUID,\n        interpolationCompleted: annotation.interpolationCompleted,\n    };\n    addAnnotation(newAnnotation, annotation.metadata.FrameOfReferenceUID);\n    addContourSegmentationAnnotation(newAnnotation);\n    triggerAnnotationModified(newAnnotation);\n    return newAnnotation;\n}\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nconst { isEqual } = csUtils;\nexport default function findHandlePolylineIndex(annotation, handleIndex) {\n    const { polyline } = annotation.data.contour;\n    const { points } = annotation.data.handles;\n    const { length } = points;\n    if (handleIndex === length) {\n        return polyline.length;\n    }\n    if (handleIndex < 0) {\n        handleIndex = (handleIndex + length) % length;\n    }\n    if (handleIndex === 0) {\n        return 0;\n    }\n    const handle = points[handleIndex];\n    const index = polyline.findIndex((point) => isEqual(handle, point));\n    if (index !== -1) {\n        return index;\n    }\n    let closestDistance = Infinity;\n    return polyline.reduce((closestIndex, point, testIndex) => {\n        const distance = vec3.squaredDistance(point, handle);\n        if (distance < closestDistance) {\n            closestDistance = distance;\n            return testIndex;\n        }\n        return closestIndex;\n    }, -1);\n}\n","import isObject from './isObject';\nfunction debounce(func, wait, options) {\n    let lastArgs, lastThis, maxWait, result, timerId, lastCallTime;\n    let lastInvokeTime = 0;\n    let leading = false;\n    let maxing = false;\n    let trailing = true;\n    const useRAF = !wait && wait !== 0 && typeof window.requestAnimationFrame === 'function';\n    if (typeof func !== 'function') {\n        throw new TypeError('Expected a function');\n    }\n    wait = Number(wait) || 0;\n    if (isObject(options)) {\n        leading = Boolean(options.leading);\n        maxing = 'maxWait' in options;\n        maxWait = maxing ? Math.max(Number(options.maxWait) || 0, wait) : maxWait;\n        trailing = 'trailing' in options ? Boolean(options.trailing) : trailing;\n    }\n    function invokeFunc(time) {\n        const args = lastArgs;\n        const thisArg = lastThis;\n        lastArgs = lastThis = undefined;\n        lastInvokeTime = time;\n        result = func.apply(thisArg, args);\n        return result;\n    }\n    function startTimer(pendingFunc, wait) {\n        if (useRAF) {\n            return window.requestAnimationFrame(pendingFunc);\n        }\n        return setTimeout(pendingFunc, wait);\n    }\n    function cancelTimer(id) {\n        if (useRAF) {\n            return window.cancelAnimationFrame(id);\n        }\n        clearTimeout(id);\n    }\n    function leadingEdge(time) {\n        lastInvokeTime = time;\n        timerId = startTimer(timerExpired, wait);\n        return leading ? invokeFunc(time) : result;\n    }\n    function remainingWait(time) {\n        const timeSinceLastCall = time - lastCallTime;\n        const timeSinceLastInvoke = time - lastInvokeTime;\n        const timeWaiting = wait - timeSinceLastCall;\n        return maxing\n            ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)\n            : timeWaiting;\n    }\n    function shouldInvoke(time) {\n        const timeSinceLastCall = time - lastCallTime;\n        const timeSinceLastInvoke = time - lastInvokeTime;\n        return (lastCallTime === undefined ||\n            timeSinceLastCall >= wait ||\n            timeSinceLastCall < 0 ||\n            (maxing && timeSinceLastInvoke >= maxWait));\n    }\n    function timerExpired() {\n        const time = Date.now();\n        if (shouldInvoke(time)) {\n            return trailingEdge(time);\n        }\n        timerId = startTimer(timerExpired, remainingWait(time));\n    }\n    function trailingEdge(time) {\n        timerId = undefined;\n        if (trailing && lastArgs) {\n            return invokeFunc(time);\n        }\n        lastArgs = lastThis = undefined;\n        return result;\n    }\n    function cancel() {\n        if (timerId !== undefined) {\n            cancelTimer(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\n    }\n    function flush() {\n        return timerId === undefined ? result : trailingEdge(Date.now());\n    }\n    function pending() {\n        return timerId !== undefined;\n    }\n    function debounced(...args) {\n        const time = Date.now();\n        const isInvoking = shouldInvoke(time);\n        lastArgs = args;\n        lastThis = this;\n        lastCallTime = time;\n        if (isInvoking) {\n            if (timerId === undefined) {\n                return leadingEdge(lastCallTime);\n            }\n            if (maxing) {\n                timerId = startTimer(timerExpired, wait);\n                return invokeFunc(lastCallTime);\n            }\n        }\n        if (timerId === undefined) {\n            timerId = startTimer(timerExpired, wait);\n        }\n        return result;\n    }\n    debounced.cancel = cancel;\n    debounced.flush = flush;\n    debounced.pending = pending;\n    return debounced;\n}\nexport default debounce;\n","export default function getTextBoxCoordsCanvas(annotationCanvasPoints) {\n    const corners = _determineCorners(annotationCanvasPoints);\n    const centerY = (corners.top[1] + corners.bottom[1]) / 2;\n    const textBoxCanvas = [corners.right[0], centerY];\n    return textBoxCanvas;\n}\nfunction _determineCorners(canvasPoints) {\n    const handlesLeftToRight = [canvasPoints[0], canvasPoints[1]].sort(_compareX);\n    const handlesTopToBottom = [canvasPoints[0], canvasPoints[1]].sort(_compareY);\n    const right = handlesLeftToRight[handlesLeftToRight.length - 1];\n    const top = handlesTopToBottom[0];\n    const bottom = handlesTopToBottom[handlesTopToBottom.length - 1];\n    return {\n        top,\n        bottom,\n        right,\n    };\n    function _compareX(a, b) {\n        return a[0] < b[0] ? -1 : 1;\n    }\n    function _compareY(a, b) {\n        return a[1] < b[1] ? -1 : 1;\n    }\n}\n","import { Enums, utilities } from '@cornerstonejs/core';\nconst { CalibrationTypes } = Enums;\nconst PIXEL_UNITS = 'px';\nconst VOXEL_UNITS = 'voxels';\nconst SUPPORTED_REGION_DATA_TYPES = [\n    1,\n    2,\n    3,\n    4,\n];\nconst SUPPORTED_LENGTH_VARIANT = [\n    '3,3',\n    '4,7',\n];\nconst SUPPORTED_PROBE_VARIANT = [\n    '4,3',\n    '4,7',\n];\nconst UNIT_MAPPING = {\n    0: 'px',\n    1: 'percent',\n    2: 'dB',\n    3: 'cm',\n    4: 'seconds',\n    5: 'hertz',\n    6: 'dB/seconds',\n    7: 'cm/sec',\n    8: 'cm\\xb2',\n    9: 'cm\\xb2/s',\n    0xc: 'degrees',\n};\nconst EPS = 1e-3;\nconst SQUARE = '\\xb2';\nconst getCalibratedLengthUnitsAndScale = (image, handles) => {\n    const { calibration, hasPixelSpacing } = image;\n    let unit = hasPixelSpacing ? 'mm' : PIXEL_UNITS;\n    const volumeUnit = hasPixelSpacing ? 'mm\\xb3' : VOXEL_UNITS;\n    let areaUnit = unit + SQUARE;\n    let scale = 1;\n    let calibrationType = '';\n    if (!calibration ||\n        (!calibration.type && !calibration.sequenceOfUltrasoundRegions)) {\n        return { unit, areaUnit, scale, volumeUnit };\n    }\n    if (calibration.type === CalibrationTypes.UNCALIBRATED) {\n        return {\n            unit: PIXEL_UNITS,\n            areaUnit: PIXEL_UNITS + SQUARE,\n            scale,\n            volumeUnit: VOXEL_UNITS,\n        };\n    }\n    if (calibration.sequenceOfUltrasoundRegions) {\n        let imageIndex1, imageIndex2;\n        if (Array.isArray(handles) && handles.length === 2) {\n            [imageIndex1, imageIndex2] = handles;\n        }\n        else if (typeof handles === 'function') {\n            const points = handles();\n            imageIndex1 = points[0];\n            imageIndex2 = points[1];\n        }\n        let regions = calibration.sequenceOfUltrasoundRegions.filter((region) => imageIndex1[0] >= region.regionLocationMinX0 &&\n            imageIndex1[0] <= region.regionLocationMaxX1 &&\n            imageIndex1[1] >= region.regionLocationMinY0 &&\n            imageIndex1[1] <= region.regionLocationMaxY1 &&\n            imageIndex2[0] >= region.regionLocationMinX0 &&\n            imageIndex2[0] <= region.regionLocationMaxX1 &&\n            imageIndex2[1] >= region.regionLocationMinY0 &&\n            imageIndex2[1] <= region.regionLocationMaxY1);\n        if (!regions?.length) {\n            return { unit, areaUnit, scale, volumeUnit };\n        }\n        regions = regions.filter((region) => SUPPORTED_REGION_DATA_TYPES.includes(region.regionDataType) &&\n            SUPPORTED_LENGTH_VARIANT.includes(`${region.physicalUnitsXDirection},${region.physicalUnitsYDirection}`));\n        if (!regions.length) {\n            return {\n                unit: PIXEL_UNITS,\n                areaUnit: PIXEL_UNITS + SQUARE,\n                scale,\n                volumeUnit: VOXEL_UNITS,\n            };\n        }\n        const region = regions[0];\n        const physicalDeltaX = Math.abs(region.physicalDeltaX);\n        const physicalDeltaY = Math.abs(region.physicalDeltaY);\n        const isSamePhysicalDelta = utilities.isEqual(physicalDeltaX, physicalDeltaY, EPS);\n        if (isSamePhysicalDelta) {\n            scale = 1 / physicalDeltaX;\n            calibrationType = 'US Region';\n            unit = UNIT_MAPPING[region.physicalUnitsXDirection] || 'unknown';\n            areaUnit = unit + SQUARE;\n        }\n        else {\n            return {\n                unit: PIXEL_UNITS,\n                areaUnit: PIXEL_UNITS + SQUARE,\n                scale,\n                volumeUnit: VOXEL_UNITS,\n            };\n        }\n    }\n    else if (calibration.scale) {\n        scale = calibration.scale;\n    }\n    const types = [\n        CalibrationTypes.ERMF,\n        CalibrationTypes.USER,\n        CalibrationTypes.ERROR,\n        CalibrationTypes.PROJECTION,\n        CalibrationTypes.CALIBRATED,\n        CalibrationTypes.UNKNOWN,\n    ];\n    if (types.includes(calibration?.type)) {\n        calibrationType = calibration.type;\n    }\n    return {\n        unit: unit + (calibrationType ? ` ${calibrationType}` : ''),\n        areaUnit: areaUnit + (calibrationType ? ` ${calibrationType}` : ''),\n        scale,\n        volumeUnit: volumeUnit + (calibrationType ? ` ${calibrationType}` : ''),\n    };\n};\nconst getCalibratedProbeUnitsAndValue = (image, handles) => {\n    const [imageIndex] = handles;\n    const { calibration } = image;\n    let units = ['raw'];\n    let values = [null];\n    let calibrationType = '';\n    if (!calibration ||\n        (!calibration.type && !calibration.sequenceOfUltrasoundRegions)) {\n        return { units, values };\n    }\n    if (calibration.sequenceOfUltrasoundRegions) {\n        const supportedRegionsMetadata = calibration.sequenceOfUltrasoundRegions.filter((region) => SUPPORTED_REGION_DATA_TYPES.includes(region.regionDataType) &&\n            SUPPORTED_PROBE_VARIANT.includes(`${region.physicalUnitsXDirection},${region.physicalUnitsYDirection}`));\n        if (!supportedRegionsMetadata?.length) {\n            return { units, values };\n        }\n        const region = supportedRegionsMetadata.find((region) => imageIndex[0] >= region.regionLocationMinX0 &&\n            imageIndex[0] <= region.regionLocationMaxX1 &&\n            imageIndex[1] >= region.regionLocationMinY0 &&\n            imageIndex[1] <= region.regionLocationMaxY1);\n        if (!region) {\n            return { units, values };\n        }\n        const { referencePixelX0 = 0, referencePixelY0 = 0 } = region;\n        const { physicalDeltaX, physicalDeltaY } = region;\n        const yValue = (imageIndex[1] - region.regionLocationMinY0 - referencePixelY0) *\n            physicalDeltaY;\n        const xValue = (imageIndex[0] - region.regionLocationMinX0 - referencePixelX0) *\n            physicalDeltaX;\n        calibrationType = 'US Region';\n        values = [xValue, yValue];\n        units = [\n            UNIT_MAPPING[region.physicalUnitsXDirection],\n            UNIT_MAPPING[region.physicalUnitsYDirection],\n        ];\n    }\n    return {\n        units,\n        values,\n        calibrationType,\n    };\n};\nconst getCalibratedAspect = (image) => image.calibration?.aspect || 1;\nexport { getCalibratedLengthUnitsAndScale, getCalibratedAspect, getCalibratedProbeUnitsAndValue, };\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { getBoundingBoxAroundShapeIJK } from './boundingBox';\nconst { transformWorldToIndex } = csUtils;\nfunction _getSphereBoundsInfo(circlePoints, imageData, directionVectors) {\n    const [bottom, top] = circlePoints;\n    const centerWorld = vec3.fromValues((bottom[0] + top[0]) / 2, (bottom[1] + top[1]) / 2, (bottom[2] + top[2]) / 2);\n    const radiusWorld = vec3.distance(bottom, top) / 2;\n    const { boundsIJK, topLeftWorld, bottomRightWorld } = _computeBoundsIJK(imageData, directionVectors, circlePoints, centerWorld, radiusWorld);\n    return {\n        boundsIJK,\n        centerWorld: centerWorld,\n        radiusWorld,\n        topLeftWorld: topLeftWorld,\n        bottomRightWorld: bottomRightWorld,\n    };\n}\nfunction getSphereBoundsInfo(circlePoints, imageData) {\n    const direction = imageData.getDirection();\n    const rowCosine = vec3.fromValues(direction[0], direction[1], direction[2]);\n    const columnCosine = vec3.fromValues(direction[3], direction[4], direction[5]);\n    const scanAxis = vec3.fromValues(direction[6], direction[7], direction[8]);\n    const viewPlaneNormal = vec3.negate(vec3.create(), scanAxis);\n    const directionVectors = {\n        row: rowCosine,\n        column: columnCosine,\n        normal: viewPlaneNormal,\n    };\n    return _getSphereBoundsInfo(circlePoints, imageData, directionVectors);\n}\nfunction getSphereBoundsInfoFromViewport(circlePoints, imageData, viewport) {\n    if (!viewport) {\n        throw new Error('viewport is required in order to calculate the sphere bounds');\n    }\n    const camera = viewport.getCamera();\n    const viewUp = vec3.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);\n    const viewPlaneNormal = vec3.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);\n    const viewRight = vec3.create();\n    vec3.cross(viewRight, viewUp, viewPlaneNormal);\n    const directionVectors = {\n        row: viewRight,\n        normal: viewPlaneNormal,\n        column: vec3.negate(vec3.create(), viewUp),\n    };\n    return _getSphereBoundsInfo(circlePoints, imageData, directionVectors);\n}\nfunction _computeBoundsIJK(imageData, directionVectors, circlePoints, centerWorld, radiusWorld) {\n    const dimensions = imageData.getDimensions();\n    const { row: rowCosine, column: columnCosine, normal: vecNormal, } = directionVectors;\n    const topLeftWorld = vec3.create();\n    const bottomRightWorld = vec3.create();\n    vec3.scaleAndAdd(topLeftWorld, centerWorld, vecNormal, radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, centerWorld, vecNormal, -radiusWorld);\n    vec3.scaleAndAdd(topLeftWorld, topLeftWorld, columnCosine, -radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, columnCosine, radiusWorld);\n    vec3.scaleAndAdd(topLeftWorld, topLeftWorld, rowCosine, -radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, rowCosine, radiusWorld);\n    const topLeftIJK = transformWorldToIndex(imageData, topLeftWorld);\n    const bottomRightIJK = transformWorldToIndex(imageData, bottomRightWorld);\n    const pointsIJK = circlePoints.map((p) => transformWorldToIndex(imageData, p));\n    const boundsIJK = getBoundingBoxAroundShapeIJK([topLeftIJK, bottomRightIJK, ...pointsIJK], dimensions);\n    return { boundsIJK, topLeftWorld, bottomRightWorld };\n}\nexport { getSphereBoundsInfo, getSphereBoundsInfoFromViewport };\n","import getViewportsForAnnotation from './getViewportsForAnnotation';\nexport default function getViewportForAnnotation(annotation) {\n    const viewports = getViewportsForAnnotation(annotation);\n    if (!viewports?.length) {\n        return undefined;\n    }\n    const viewport = viewports.find((viewport) => viewport\n        .getImageIds()\n        .some((imageId) => imageId === annotation.metadata.referencedImageId));\n    return viewport ?? viewports[0];\n}\n","function isObject(value) {\n    const type = typeof value;\n    return value !== null && (type === 'object' || type === 'function');\n}\nexport default isObject;\n","export default function pointInSphere(sphere, pointLPS) {\n    const { center, radius } = sphere;\n    const radius2 = sphere.radius2 || radius * radius;\n    return ((pointLPS[0] - center[0]) * (pointLPS[0] - center[0]) +\n        (pointLPS[1] - center[1]) * (pointLPS[1] - center[1]) +\n        (pointLPS[2] - center[2]) * (pointLPS[2] - center[2]) <=\n        radius2);\n}\n","import { InstanceVolumetricCalculator } from './VolumetricCalculator';\nexport default class SegmentStatsCalculator {\n    static { this.calculators = new Map(); }\n    static { this.indices = []; }\n    static { this.mode = 'collective'; }\n    static statsInit(options) {\n        const { storePointData, indices, mode } = options;\n        this.mode = mode;\n        this.indices = indices;\n        this.calculators.clear();\n        if (this.mode === 'individual') {\n            indices.forEach((index) => {\n                this.calculators.set(index, new InstanceVolumetricCalculator({ storePointData }));\n            });\n        }\n        else {\n            this.calculators.set(indices, new InstanceVolumetricCalculator({ storePointData }));\n        }\n    }\n    static statsCallback(data) {\n        const { segmentIndex, ...statsData } = data;\n        if (!segmentIndex) {\n            throw new Error('Segment index is required for stats calculation');\n        }\n        const calculator = this.mode === 'individual'\n            ? this.calculators.get(segmentIndex)\n            : this.calculators.get(this.indices);\n        if (!calculator) {\n            throw new Error(`No calculator found for segment ${segmentIndex}`);\n        }\n        calculator.statsCallback(statsData);\n    }\n    static getStatistics(options) {\n        if (this.mode === 'individual') {\n            const result = {};\n            this.calculators.forEach((calculator, segmentIndex) => {\n                result[segmentIndex] = calculator.getStatistics(options);\n            });\n            return result;\n        }\n        const calculator = this.calculators.get(this.indices);\n        return calculator.getStatistics(options);\n    }\n}\n","function floodFill(getter, seed, options = {}) {\n    const onFlood = options.onFlood;\n    const onBoundary = options.onBoundary;\n    const equals = options.equals;\n    const filter = options.filter;\n    const diagonals = options.diagonals || false;\n    const startNode = get(seed);\n    const permutations = prunedPermutations();\n    const stack = [];\n    const flooded = [];\n    const visits = new Set();\n    const bounds = options.bounds;\n    stack.push({ currentArgs: seed });\n    while (stack.length > 0) {\n        flood(stack.pop());\n    }\n    return {\n        flooded,\n    };\n    function flood(job) {\n        const getArgs = job.currentArgs;\n        const prevArgs = job.previousArgs;\n        if (visited(getArgs)) {\n            return;\n        }\n        markAsVisited(getArgs);\n        if (member(getArgs)) {\n            markAsFlooded(getArgs);\n            pushAdjacent(getArgs);\n        }\n        else {\n            markAsBoundary(prevArgs);\n        }\n    }\n    function visited(key) {\n        const [x, y, z = 0] = key;\n        const iKey = x + 32768 + 65536 * (y + 32768 + 65536 * (z + 32768));\n        return visits.has(iKey);\n    }\n    function markAsVisited(key) {\n        const [x, y, z = 0] = key;\n        const iKey = x + 32768 + 65536 * (y + 32768 + 65536 * (z + 32768));\n        visits.add(iKey);\n    }\n    function member(getArgs) {\n        const node = get(getArgs);\n        return equals ? equals(node, startNode) : node === startNode;\n    }\n    function markAsFlooded(getArgs) {\n        flooded.push(getArgs);\n        if (onFlood) {\n            onFlood(...getArgs);\n        }\n    }\n    function markAsBoundary(prevArgs) {\n        const [x, y, z = 0] = prevArgs;\n        const iKey = x + 32768 + 65536 * (y + 32768 + 65536 * (z + 32768));\n        bounds?.set(iKey, prevArgs);\n        if (onBoundary) {\n            onBoundary(...prevArgs);\n        }\n    }\n    function pushAdjacent(getArgs) {\n        for (let i = 0; i < permutations.length; i += 1) {\n            const perm = permutations[i];\n            const nextArgs = getArgs.slice(0);\n            for (let j = 0; j < getArgs.length; j += 1) {\n                nextArgs[j] += perm[j];\n            }\n            if (filter?.(nextArgs) === false) {\n                continue;\n            }\n            if (visited(nextArgs)) {\n                continue;\n            }\n            stack.push({\n                currentArgs: nextArgs,\n                previousArgs: getArgs,\n            });\n        }\n    }\n    function get(getArgs) {\n        return getter(...getArgs);\n    }\n    function prunedPermutations() {\n        const permutations = permute(seed.length);\n        return permutations.filter(function (perm) {\n            const count = countNonZeroes(perm);\n            return count !== 0 && (count === 1 || diagonals);\n        });\n    }\n    function permute(length) {\n        const perms = [];\n        const permutation = function (string) {\n            return string.split('').map(function (c) {\n                return parseInt(c, 10) - 1;\n            });\n        };\n        for (let i = 0; i < Math.pow(3, length); i += 1) {\n            const string = lpad(i.toString(3), '0', length);\n            perms.push(permutation(string));\n        }\n        return perms;\n    }\n}\nfunction countNonZeroes(array) {\n    let count = 0;\n    for (let i = 0; i < array.length; i += 1) {\n        if (array[i] !== 0) {\n            count += 1;\n        }\n    }\n    return count;\n}\nfunction lpad(string, character, length) {\n    const array = new Array(length + 1);\n    const pad = array.join(character);\n    return (pad + string).slice(-length);\n}\nexport default floodFill;\n","import { getToolGroup } from '../../store/ToolGroupManager';\nimport BrushTool from '../../tools/segmentation/BrushTool';\nexport function getBrushToolInstances(toolGroupId, toolName) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return [];\n    }\n    const toolInstances = toolGroup._toolInstances;\n    if (!Object.keys(toolInstances).length) {\n        return [];\n    }\n    if (toolName && toolInstances[toolName]) {\n        return [toolInstances[toolName]];\n    }\n    const brushBasedToolInstances = Object.values(toolInstances).filter((toolInstance) => toolInstance instanceof BrushTool);\n    return brushBasedToolInstances;\n}\n","import { getAnnotation } from '../../stateManagement';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nexport function getHoveredContourSegmentationAnnotation(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    const { annotationUIDsMap } = segmentation.representationData.Contour;\n    for (const [segmentIndex, annotationUIDs] of annotationUIDsMap.entries()) {\n        const highlightedAnnotationUID = Array.from(annotationUIDs).find((annotationUID) => getAnnotation(annotationUID).highlighted);\n        if (highlightedAnnotationUID) {\n            return segmentIndex;\n        }\n    }\n    return undefined;\n}\n","import { BaseVolumeViewport, cache, utilities } from '@cornerstonejs/core';\nimport { getSegmentation, getCurrentLabelmapImageIdForViewport, } from '../../stateManagement/segmentation/segmentationState';\nimport { getLabelmapActorEntry } from '../../stateManagement/segmentation/helpers';\nexport function getSegmentIndexAtLabelmapBorder(segmentationId, worldPoint, { viewport, searchRadius }) {\n    const segmentation = getSegmentation(segmentationId);\n    const labelmapData = segmentation.representationData.Labelmap;\n    if (viewport instanceof BaseVolumeViewport) {\n        const { volumeId } = labelmapData;\n        const segmentationVolume = cache.getVolume(volumeId);\n        if (!segmentationVolume) {\n            return;\n        }\n        const voxelManager = segmentationVolume.voxelManager;\n        const imageData = segmentationVolume.imageData;\n        const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n        const segmentIndex = voxelManager.getAtIJK(indexIJK[0], indexIJK[1], indexIJK[2]);\n        const canvasPoint = viewport.worldToCanvas(worldPoint);\n        const onEdge = isSegmentOnEdgeCanvas(canvasPoint, segmentIndex, viewport, imageData, searchRadius);\n        return onEdge ? segmentIndex : undefined;\n    }\n    const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n    const image = cache.getImage(segmentationImageId);\n    if (!image) {\n        return;\n    }\n    const segmentationActorEntry = getLabelmapActorEntry(viewport.id, segmentationId);\n    const imageData = segmentationActorEntry?.actor.getMapper().getInputData();\n    const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n    const dimensions = imageData.getDimensions();\n    const voxelManager = (imageData.voxelManager ||\n        utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions,\n            scalarData: imageData.getPointData().getScalars().getData(),\n        }));\n    const segmentIndex = voxelManager.getAtIJKPoint(indexIJK);\n    const onEdge = isSegmentOnEdgeIJK(indexIJK, dimensions, voxelManager, segmentIndex);\n    return onEdge ? segmentIndex : undefined;\n}\nfunction isSegmentOnEdge(getNeighborIndex, segmentIndex, searchRadius = 1) {\n    const neighborRange = Array.from({ length: 2 * searchRadius + 1 }, (_, i) => i - searchRadius);\n    for (const deltaI of neighborRange) {\n        for (const deltaJ of neighborRange) {\n            for (const deltaK of neighborRange) {\n                if (deltaI === 0 && deltaJ === 0 && deltaK === 0) {\n                    continue;\n                }\n                const neighborIndex = getNeighborIndex(deltaI, deltaJ, deltaK);\n                if (neighborIndex !== undefined && segmentIndex !== neighborIndex) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nfunction isSegmentOnEdgeIJK(indexIJK, dimensions, voxelManager, segmentIndex, searchRadius) {\n    const getNeighborIndex = (deltaI, deltaJ, deltaK) => {\n        const neighborIJK = [\n            indexIJK[0] + deltaI,\n            indexIJK[1] + deltaJ,\n            indexIJK[2] + deltaK,\n        ];\n        return voxelManager.getAtIJK(neighborIJK[0], neighborIJK[1], neighborIJK[2]);\n    };\n    return isSegmentOnEdge(getNeighborIndex, segmentIndex, searchRadius);\n}\nfunction isSegmentOnEdgeCanvas(canvasPoint, segmentIndex, viewport, imageData, searchRadius) {\n    const getNeighborIndex = (deltaI, deltaJ) => {\n        const neighborCanvas = [canvasPoint[0] + deltaI, canvasPoint[1] + deltaJ];\n        const worldPoint = viewport.canvasToWorld(neighborCanvas);\n        const voxelManager = imageData.get('voxelManager').voxelManager;\n        const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n        return voxelManager.getAtIJK(indexIJK[0], indexIJK[1], indexIJK[2]);\n    };\n    return isSegmentOnEdge(getNeighborIndex, segmentIndex, searchRadius);\n}\n","import { BaseVolumeViewport, cache, utilities } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../enums';\nimport { getSegmentation, getCurrentLabelmapImageIdsForViewport, } from '../../stateManagement/segmentation/segmentationState';\nimport { getAnnotation } from '../../stateManagement';\nimport { isPointInsidePolyline3D } from '../math/polyline';\nimport { getLabelmapActorEntry } from '../../stateManagement/segmentation/helpers/getSegmentationActor';\nexport function getSegmentIndexAtWorldPoint(segmentationId, worldPoint, options = {}) {\n    const segmentation = getSegmentation(segmentationId);\n    const representationData = segmentation.representationData;\n    const desiredRepresentation = options?.representationType ?? Object.keys(representationData)[0];\n    if (!desiredRepresentation) {\n        throw new Error(`Segmentation ${segmentationId} does not have any representations`);\n    }\n    switch (desiredRepresentation) {\n        case SegmentationRepresentations.Labelmap:\n            return getSegmentIndexAtWorldForLabelmap(segmentation, worldPoint, options);\n        case SegmentationRepresentations.Contour:\n            return getSegmentIndexAtWorldForContour(segmentation, worldPoint, options);\n        default:\n            return;\n    }\n}\nexport function getSegmentIndexAtWorldForLabelmap(segmentation, worldPoint, { viewport }) {\n    const labelmapData = segmentation.representationData.Labelmap;\n    if (viewport instanceof BaseVolumeViewport) {\n        const { volumeId } = labelmapData;\n        const segmentationVolume = cache.getVolume(volumeId);\n        if (!segmentationVolume) {\n            return;\n        }\n        const segmentIndex = segmentationVolume.imageData.getScalarValueFromWorld(worldPoint);\n        return segmentIndex;\n    }\n    const segmentationImageIds = getCurrentLabelmapImageIdsForViewport(viewport.id, segmentation.segmentationId);\n    if (segmentationImageIds.length > 1) {\n        console.warn('Segment selection for labelmaps with multiple imageIds in stack viewports is not supported yet.');\n        return;\n    }\n    const segmentationImageId = segmentationImageIds[0];\n    const image = cache.getImage(segmentationImageId);\n    if (!image) {\n        return;\n    }\n    const segmentationActorEntry = getLabelmapActorEntry(viewport.id, segmentation.segmentationId);\n    const imageData = segmentationActorEntry?.actor.getMapper().getInputData();\n    const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n    const dimensions = imageData.getDimensions();\n    const voxelManager = (imageData.voxelManager ||\n        utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions,\n            scalarData: imageData.getPointData().getScalars().getData(),\n        }));\n    const segmentIndex = voxelManager.getAtIJKPoint(indexIJK);\n    return segmentIndex;\n}\nexport function getSegmentIndexAtWorldForContour(segmentation, worldPoint, { viewport }) {\n    const contourData = segmentation.representationData.Contour;\n    const segmentIndices = Array.from(contourData.annotationUIDsMap.keys());\n    const { viewPlaneNormal } = viewport.getCamera();\n    for (const segmentIndex of segmentIndices) {\n        const annotationsSet = contourData.annotationUIDsMap.get(segmentIndex);\n        if (!annotationsSet) {\n            continue;\n        }\n        for (const annotationUID of annotationsSet) {\n            const annotation = getAnnotation(annotationUID);\n            if (!annotation) {\n                continue;\n            }\n            const { polyline } = annotation.data.contour;\n            if (!utilities.isEqual(viewPlaneNormal, annotation.metadata.viewPlaneNormal)) {\n                continue;\n            }\n            if (isPointInsidePolyline3D(worldPoint, polyline)) {\n                return Number(segmentIndex);\n            }\n        }\n    }\n}\n","const shader = `\nconst MAX_STRENGTH = 65535f;\n\n// Workgroup size - X*Y*Z must be multiple of 32 for better performance\noverride workGroupSizeX = 1u;\noverride workGroupSizeY = 1u;\noverride workGroupSizeZ = 1u;\n\n// Compare the current voxel to neighbors using a 9x9x9 window\noverride windowSize = 9i;\n\nstruct Params {\n  size: vec3u,\n  iteration: u32,\n}\n\n// New structure to track bounds of modified voxels\nstruct Bounds {\n  minX: atomic<i32>,\n  minY: atomic<i32>,\n  minZ: atomic<i32>,\n  maxX: atomic<i32>,\n  maxY: atomic<i32>,\n  maxZ: atomic<i32>,\n}\n\n@group(0) @binding(0) var<uniform> params: Params;\n@group(0) @binding(1) var<storage> volumePixelData: array<f32>;\n@group(0) @binding(2) var<storage, read_write> labelmap: array<u32>;\n@group(0) @binding(3) var<storage, read_write> strengthData: array<f32>;\n@group(0) @binding(4) var<storage> prevLabelmap: array<u32>;\n@group(0) @binding(5) var<storage> prevStrengthData: array<f32>;\n@group(0) @binding(6) var<storage, read_write> updatedVoxelsCounter: array<atomic<u32>>;\n@group(0) @binding(7) var<storage, read_write> modifiedBounds: Bounds;\n\nfn getPixelIndex(ijkPos: vec3u) -> u32 {\n  let numPixelsPerSlice = params.size.x * params.size.y;\n  return ijkPos.x + ijkPos.y * params.size.x + ijkPos.z * numPixelsPerSlice;\n}\n\nfn updateBounds(position: vec3i) {\n  // Atomically update min bounds (use min operation)\n  let oldMinX = atomicMin(&modifiedBounds.minX, position.x);\n  let oldMinY = atomicMin(&modifiedBounds.minY, position.y);\n  let oldMinZ = atomicMin(&modifiedBounds.minZ, position.z);\n\n  // Atomically update max bounds (use max operation)\n  let oldMaxX = atomicMax(&modifiedBounds.maxX, position.x);\n  let oldMaxY = atomicMax(&modifiedBounds.maxY, position.y);\n  let oldMaxZ = atomicMax(&modifiedBounds.maxZ, position.z);\n}\n\n@compute @workgroup_size(workGroupSizeX, workGroupSizeY, workGroupSizeZ)\nfn main(\n  @builtin(global_invocation_id) globalId: vec3u,\n) {\n  // Make sure it will not get out of bounds for volume with sizes that\n  // are not multiple of workGroupSize\n  if (\n    globalId.x >= params.size.x ||\n    globalId.y >= params.size.y ||\n    globalId.z >= params.size.z\n  ) {\n    return;\n  }\n\n  // Initialize bounds for the first iteration\n  if (params.iteration == 0 && globalId.x == 0 && globalId.y == 0 && globalId.z == 0) {\n    // Initialize to opposite extremes to ensure any update will improve the bounds\n    atomicStore(&modifiedBounds.minX, i32(params.size.x));\n    atomicStore(&modifiedBounds.minY, i32(params.size.y));\n    atomicStore(&modifiedBounds.minZ, i32(params.size.z));\n    atomicStore(&modifiedBounds.maxX, -1);\n    atomicStore(&modifiedBounds.maxY, -1);\n    atomicStore(&modifiedBounds.maxZ, -1);\n  }\n\n  let currentCoord = vec3i(globalId);\n  let currentPixelIndex = getPixelIndex(globalId);\n\n  let numPixels = arrayLength(&volumePixelData);\n  let currentPixelValue = volumePixelData[currentPixelIndex];\n\n  if (params.iteration == 0) {\n    // All non-zero initial labels are given maximum strength\n    strengthData[currentPixelIndex] = select(MAX_STRENGTH, 0., labelmap[currentPixelIndex] == 0);\n\n    // Update bounds for non-zero initial labels\n    if (labelmap[currentPixelIndex] != 0) {\n      updateBounds(currentCoord);\n    }\n    return;\n  }\n\n  // It should at least copy the values from previous state\n  var newLabel = prevLabelmap[currentPixelIndex];\n  var newStrength = prevStrengthData[currentPixelIndex];\n\n  let window = i32(ceil(f32(windowSize - 1) * .5));\n  let minWindow = -1i * window;\n  let maxWindow = 1i * window;\n\n  for (var k = minWindow; k <= maxWindow; k++) {\n    for (var j = minWindow; j <= maxWindow; j++) {\n      for (var i = minWindow; i <= maxWindow; i++) {\n        // Skip current voxel\n        if (i == 0 && j == 0 && k == 0) {\n          continue;\n        }\n\n        let neighborCoord = currentCoord + vec3i(i, j, k);\n\n        //  Boundary conditions. Do not grow outside of the volume\n        if (\n          neighborCoord.x < 0i || neighborCoord.x >= i32(params.size.x) ||\n          neighborCoord.y < 0i || neighborCoord.y >= i32(params.size.y) ||\n          neighborCoord.z < 0i || neighborCoord.z >= i32(params.size.z)\n        ) {\n          continue;\n        }\n\n        let neighborIndex = getPixelIndex(vec3u(neighborCoord));\n        let neighborPixelValue = volumePixelData[neighborIndex];\n        let prevNeighborStrength = prevStrengthData[neighborIndex];\n        let strengthCost = abs(neighborPixelValue - currentPixelValue);\n        let takeoverStrength = prevNeighborStrength - strengthCost;\n\n        if (takeoverStrength > newStrength) {\n          newLabel = prevLabelmap[neighborIndex];\n          newStrength = takeoverStrength;\n        }\n      }\n    }\n  }\n\n  if (labelmap[currentPixelIndex] != newLabel) {\n    atomicAdd(&updatedVoxelsCounter[params.iteration], 1u);\n\n    // Update bounds for modified voxels\n    updateBounds(currentCoord);\n  }\n\n  labelmap[currentPixelIndex] = newLabel;\n  strengthData[currentPixelIndex] = newStrength;\n}\n`;\nexport default shader;\n","import { cache } from '@cornerstonejs/core';\nimport shaderCode from './growCutShader';\nconst GB = 1024 * 1024 * 1024;\nconst WEBGPU_MEMORY_LIMIT = 1.99 * GB;\nconst DEFAULT_GROWCUT_OPTIONS = {\n    windowSize: 3,\n    maxProcessingTime: 30000,\n    inspection: {\n        numCyclesInterval: 5,\n        numCyclesBelowThreshold: 3,\n        threshold: 1e-4,\n    },\n};\nasync function runGrowCut(referenceVolumeId, labelmapVolumeId, options = DEFAULT_GROWCUT_OPTIONS) {\n    const workGroupSize = [8, 8, 4];\n    const { windowSize, maxProcessingTime } = Object.assign({}, DEFAULT_GROWCUT_OPTIONS, options);\n    const inspection = Object.assign({}, DEFAULT_GROWCUT_OPTIONS.inspection, options.inspection);\n    const volume = cache.getVolume(referenceVolumeId);\n    const labelmap = cache.getVolume(labelmapVolumeId);\n    const [columns, rows, numSlices] = volume.dimensions;\n    if (labelmap.dimensions[0] !== columns ||\n        labelmap.dimensions[1] !== rows ||\n        labelmap.dimensions[2] !== numSlices) {\n        throw new Error('Volume and labelmap must have the same size');\n    }\n    let numIterations = Math.floor(Math.sqrt(rows ** 2 + columns ** 2 + numSlices ** 2) / 2);\n    numIterations = Math.min(numIterations, 500);\n    const labelmapData = labelmap.voxelManager.getCompleteScalarDataArray();\n    let volumePixelData = volume.voxelManager.getCompleteScalarDataArray();\n    if (!(volumePixelData instanceof Float32Array)) {\n        volumePixelData = new Float32Array(volumePixelData);\n    }\n    const requiredLimits = {\n        maxStorageBufferBindingSize: WEBGPU_MEMORY_LIMIT,\n        maxBufferSize: WEBGPU_MEMORY_LIMIT,\n    };\n    const adapter = await navigator.gpu?.requestAdapter();\n    const device = await adapter.requestDevice({ requiredLimits });\n    const BUFFER_SIZE = volumePixelData.byteLength;\n    const UPDATED_VOXELS_COUNTER_BUFFER_SIZE = numIterations * Uint32Array.BYTES_PER_ELEMENT;\n    const BOUNDS_BUFFER_SIZE = 6 * Int32Array.BYTES_PER_ELEMENT;\n    const shaderModule = device.createShaderModule({\n        code: shaderCode,\n    });\n    const numIterationIndex = 3;\n    const paramsArrayValues = new Uint32Array([\n        columns,\n        rows,\n        numSlices,\n        0,\n    ]);\n    const gpuParamsBuffer = device.createBuffer({\n        size: paramsArrayValues.byteLength,\n        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n    });\n    const gpuVolumePixelDataBuffer = device.createBuffer({\n        size: BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n    });\n    device.queue.writeBuffer(gpuVolumePixelDataBuffer, 0, volumePixelData);\n    const gpuLabelmapBuffers = [0, 1].map(() => device.createBuffer({\n        size: BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE |\n            GPUBufferUsage.COPY_SRC |\n            GPUBufferUsage.COPY_DST,\n    }));\n    device.queue.writeBuffer(gpuLabelmapBuffers[0], 0, new Uint32Array(labelmapData));\n    const gpuStrengthBuffers = [0, 1].map(() => {\n        const strengthBuffer = device.createBuffer({\n            size: BUFFER_SIZE,\n            usage: GPUBufferUsage.STORAGE |\n                GPUBufferUsage.COPY_SRC |\n                GPUBufferUsage.COPY_DST,\n        });\n        return strengthBuffer;\n    });\n    const gpuCounterBuffer = device.createBuffer({\n        size: UPDATED_VOXELS_COUNTER_BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE |\n            GPUBufferUsage.COPY_SRC |\n            GPUBufferUsage.COPY_DST,\n    });\n    const gpuBoundsBuffer = device.createBuffer({\n        size: BOUNDS_BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE |\n            GPUBufferUsage.COPY_SRC |\n            GPUBufferUsage.COPY_DST,\n    });\n    const initialBounds = new Int32Array([\n        columns,\n        rows,\n        numSlices,\n        -1,\n        -1,\n        -1,\n    ]);\n    device.queue.writeBuffer(gpuBoundsBuffer, 0, initialBounds);\n    const bindGroupLayout = device.createBindGroupLayout({\n        entries: [\n            {\n                binding: 0,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'uniform',\n                },\n            },\n            {\n                binding: 1,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'read-only-storage',\n                },\n            },\n            {\n                binding: 2,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n            {\n                binding: 3,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n            {\n                binding: 4,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'read-only-storage',\n                },\n            },\n            {\n                binding: 5,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'read-only-storage',\n                },\n            },\n            {\n                binding: 6,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n            {\n                binding: 7,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n        ],\n    });\n    const bindGroups = [0, 1].map((i) => {\n        const outputLabelmapBuffer = gpuLabelmapBuffers[i];\n        const outputStrengthBuffer = gpuStrengthBuffers[i];\n        const previouLabelmapBuffer = gpuLabelmapBuffers[(i + 1) % 2];\n        const previousStrengthBuffer = gpuStrengthBuffers[(i + 1) % 2];\n        return device.createBindGroup({\n            layout: bindGroupLayout,\n            entries: [\n                {\n                    binding: 0,\n                    resource: {\n                        buffer: gpuParamsBuffer,\n                    },\n                },\n                {\n                    binding: 1,\n                    resource: {\n                        buffer: gpuVolumePixelDataBuffer,\n                    },\n                },\n                {\n                    binding: 2,\n                    resource: {\n                        buffer: outputLabelmapBuffer,\n                    },\n                },\n                {\n                    binding: 3,\n                    resource: {\n                        buffer: outputStrengthBuffer,\n                    },\n                },\n                {\n                    binding: 4,\n                    resource: {\n                        buffer: previouLabelmapBuffer,\n                    },\n                },\n                {\n                    binding: 5,\n                    resource: {\n                        buffer: previousStrengthBuffer,\n                    },\n                },\n                {\n                    binding: 6,\n                    resource: {\n                        buffer: gpuCounterBuffer,\n                    },\n                },\n                {\n                    binding: 7,\n                    resource: {\n                        buffer: gpuBoundsBuffer,\n                    },\n                },\n            ],\n        });\n    });\n    const pipeline = device.createComputePipeline({\n        layout: device.createPipelineLayout({\n            bindGroupLayouts: [bindGroupLayout],\n        }),\n        compute: {\n            module: shaderModule,\n            entryPoint: 'main',\n            constants: {\n                workGroupSizeX: workGroupSize[0],\n                workGroupSizeY: workGroupSize[1],\n                workGroupSizeZ: workGroupSize[2],\n                windowSize,\n            },\n        },\n    });\n    const numWorkGroups = [\n        Math.ceil(columns / workGroupSize[0]),\n        Math.ceil(rows / workGroupSize[1]),\n        Math.ceil(numSlices / workGroupSize[2]),\n    ];\n    const gpuUpdatedVoxelsCounterStagingBuffer = device.createBuffer({\n        size: UPDATED_VOXELS_COUNTER_BUFFER_SIZE,\n        usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n    const limitProcessingTime = maxProcessingTime\n        ? performance.now() + maxProcessingTime\n        : 0;\n    let currentInspectionNumCyclesInterval = inspection.numCyclesInterval;\n    let belowThresholdCounter = 0;\n    for (let i = 0; i < numIterations; i++) {\n        paramsArrayValues[numIterationIndex] = i;\n        device.queue.writeBuffer(gpuParamsBuffer, 0, paramsArrayValues);\n        const commandEncoder = device.createCommandEncoder();\n        const passEncoder = commandEncoder.beginComputePass();\n        passEncoder.setPipeline(pipeline);\n        passEncoder.setBindGroup(0, bindGroups[i % 2]);\n        passEncoder.dispatchWorkgroups(numWorkGroups[0], numWorkGroups[1], numWorkGroups[2]);\n        passEncoder.end();\n        commandEncoder.copyBufferToBuffer(gpuCounterBuffer, i * Uint32Array.BYTES_PER_ELEMENT, gpuUpdatedVoxelsCounterStagingBuffer, i * Uint32Array.BYTES_PER_ELEMENT, Uint32Array.BYTES_PER_ELEMENT);\n        device.queue.submit([commandEncoder.finish()]);\n        const inspect = i > 0 && !(i % currentInspectionNumCyclesInterval);\n        if (inspect) {\n            await gpuUpdatedVoxelsCounterStagingBuffer.mapAsync(GPUMapMode.READ, 0, UPDATED_VOXELS_COUNTER_BUFFER_SIZE);\n            const updatedVoxelsCounterResultBuffer = gpuUpdatedVoxelsCounterStagingBuffer.getMappedRange(0, UPDATED_VOXELS_COUNTER_BUFFER_SIZE);\n            const updatedVoxelsCounterBufferData = new Uint32Array(updatedVoxelsCounterResultBuffer.slice(0));\n            const updatedVoxelsRatio = updatedVoxelsCounterBufferData[i] / volumePixelData.length;\n            gpuUpdatedVoxelsCounterStagingBuffer.unmap();\n            if (i >= 1 && updatedVoxelsRatio < inspection.threshold) {\n                currentInspectionNumCyclesInterval = 1;\n                belowThresholdCounter++;\n                if (belowThresholdCounter === inspection.numCyclesBelowThreshold) {\n                    break;\n                }\n            }\n            else {\n                currentInspectionNumCyclesInterval = inspection.numCyclesInterval;\n            }\n        }\n        if (limitProcessingTime && performance.now() > limitProcessingTime) {\n            console.warn(`Exceeded processing time limit (${maxProcessingTime})ms`);\n            break;\n        }\n    }\n    const commandEncoder = device.createCommandEncoder();\n    const outputLabelmapBufferIndex = (numIterations + 1) % 2;\n    const labelmapStagingBuffer = device.createBuffer({\n        size: BUFFER_SIZE,\n        usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n    const boundsStagingBuffer = device.createBuffer({\n        size: BOUNDS_BUFFER_SIZE,\n        usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n    commandEncoder.copyBufferToBuffer(gpuLabelmapBuffers[outputLabelmapBufferIndex], 0, labelmapStagingBuffer, 0, BUFFER_SIZE);\n    commandEncoder.copyBufferToBuffer(gpuBoundsBuffer, 0, boundsStagingBuffer, 0, BOUNDS_BUFFER_SIZE);\n    device.queue.submit([commandEncoder.finish()]);\n    await labelmapStagingBuffer.mapAsync(GPUMapMode.READ, 0, BUFFER_SIZE);\n    const labelmapResultBuffer = labelmapStagingBuffer.getMappedRange(0, BUFFER_SIZE);\n    const labelmapResult = new Uint32Array(labelmapResultBuffer);\n    labelmapData.set(labelmapResult);\n    labelmapStagingBuffer.unmap();\n    await boundsStagingBuffer.mapAsync(GPUMapMode.READ, 0, BOUNDS_BUFFER_SIZE);\n    const boundsResultBuffer = boundsStagingBuffer.getMappedRange(0, BOUNDS_BUFFER_SIZE);\n    const boundsResult = new Int32Array(boundsResultBuffer.slice(0));\n    boundsStagingBuffer.unmap();\n    const minX = boundsResult[0];\n    const minY = boundsResult[1];\n    const minZ = boundsResult[2];\n    const maxX = boundsResult[3];\n    const maxY = boundsResult[4];\n    const maxZ = boundsResult[5];\n    labelmap.voxelManager.setCompleteScalarDataArray(labelmapData);\n    labelmap.voxelManager.clearBounds();\n    labelmap.voxelManager.setBounds([\n        [minX, maxX],\n        [minY, maxY],\n        [minZ, maxZ],\n    ]);\n}\nexport { runGrowCut as default, runGrowCut as run };\n","import { volumeLoader, utilities as csUtils } from '@cornerstonejs/core';\nimport { run } from './runGrowCut';\nconst POSITIVE_SEED_VALUE = 254;\nconst NEGATIVE_SEED_VALUE = 255;\nconst NEGATIVE_PIXEL_RANGE = [-Infinity, -995];\nconst POSITIVE_PIXEL_RANGE = [0, 1900];\nfunction _setNegativeSeedValues(subVolume, labelmap, options) {\n    const { negativeSeedValue = NEGATIVE_SEED_VALUE, negativePixelRange = NEGATIVE_PIXEL_RANGE, } = options;\n    const subVolPixelData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const [width, height, numSlices] = labelmap.dimensions;\n    const middleSliceIndex = Math.floor(numSlices / 2);\n    const visited = new Array(width * height).fill(false);\n    const sliceOffset = middleSliceIndex * width * height;\n    const bfs = (startX, startY) => {\n        const queue = [[startX, startY]];\n        while (queue.length) {\n            const [x, y] = queue.shift();\n            const slicePixelIndex = y * width + x;\n            if (x < 0 ||\n                x >= width ||\n                y < 0 ||\n                y >= height ||\n                visited[slicePixelIndex]) {\n                continue;\n            }\n            visited[slicePixelIndex] = true;\n            const volumeVoxelIndex = sliceOffset + slicePixelIndex;\n            const volumeVoxelValue = subVolPixelData[volumeVoxelIndex];\n            if (volumeVoxelValue < negativePixelRange[0] ||\n                volumeVoxelValue > negativePixelRange[1]) {\n                continue;\n            }\n            labelmap.voxelManager.setAtIndex(volumeVoxelIndex, negativeSeedValue);\n            queue.push([x - 1, y]);\n            queue.push([x + 1, y]);\n            queue.push([x, y - 1]);\n            queue.push([x, y + 1]);\n        }\n    };\n    const scanLine = (startX, limitX, incX, y) => {\n        for (let x = startX; x !== limitX; x += incX) {\n            const slicePixelIndex = y * width + x;\n            const volumeVoxelIndex = sliceOffset + slicePixelIndex;\n            const volumeVoxelValue = subVolPixelData[volumeVoxelIndex];\n            if (volumeVoxelValue < negativePixelRange[0] ||\n                volumeVoxelValue > negativePixelRange[1]) {\n                break;\n            }\n            if (!visited[slicePixelIndex]) {\n                bfs(x, y);\n            }\n        }\n    };\n    for (let y = 0; y < height; y++) {\n        scanLine(0, width - 1, 1, y);\n        scanLine(width - 1, 0, -1, y);\n    }\n}\nfunction _setPositiveSeedValues(subVolume, labelmap, options) {\n    const { positiveSeedValue = POSITIVE_SEED_VALUE, positivePixelRange = POSITIVE_PIXEL_RANGE, } = options;\n    const subVolPixelData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const labelmapData = labelmap.voxelManager.getCompleteScalarDataArray();\n    const [width, height, numSlices] = labelmap.dimensions;\n    const middleSliceIndex = Math.floor(numSlices / 2);\n    const startSliceIndex = Math.max(middleSliceIndex - 3, 0);\n    const stopSliceIndex = Math.max(startSliceIndex + 5, numSlices);\n    const pixelsPerSlice = width * height;\n    for (let z = startSliceIndex; z < stopSliceIndex; z++) {\n        const zOffset = z * pixelsPerSlice;\n        for (let y = 0; y < height; y++) {\n            const yOffset = y * width;\n            for (let x = 0; x < width; x++) {\n                const index = zOffset + yOffset + x;\n                const pixelValue = subVolPixelData[index];\n                const isPositiveValue = pixelValue >= positivePixelRange[0] &&\n                    pixelValue <= positivePixelRange[1];\n                if (isPositiveValue) {\n                    labelmap.voxelManager.setAtIndex(index, positiveSeedValue);\n                }\n            }\n        }\n    }\n}\nasync function _createAndCacheSegmentationSubVolumeForBoundingBox(subVolume, options) {\n    const labelmap = volumeLoader.createAndCacheDerivedLabelmapVolume(subVolume.volumeId);\n    _setPositiveSeedValues(subVolume, labelmap, options);\n    _setNegativeSeedValues(subVolume, labelmap, options);\n    return labelmap;\n}\nasync function runGrowCutForBoundingBox(referencedVolumeId, boundingBoxInfo, options) {\n    const { boundingBox } = boundingBoxInfo;\n    const { ijkTopLeft, ijkBottomRight } = boundingBox;\n    const subVolumeBoundsIJK = {\n        minX: ijkTopLeft[0],\n        maxX: ijkBottomRight[0],\n        minY: ijkTopLeft[1],\n        maxY: ijkBottomRight[1],\n        minZ: ijkTopLeft[2],\n        maxZ: ijkBottomRight[2],\n    };\n    const subVolume = csUtils.createSubVolume(referencedVolumeId, subVolumeBoundsIJK, {\n        targetBuffer: {\n            type: 'Float32Array',\n        },\n    });\n    const labelmap = await _createAndCacheSegmentationSubVolumeForBoundingBox(subVolume, options);\n    await run(subVolume.volumeId, labelmap.volumeId);\n    return labelmap;\n}\nexport { runGrowCutForBoundingBox as default, runGrowCutForBoundingBox };\n","import { quat, vec3 } from 'gl-matrix';\nimport { utilities as csUtils, cache, volumeLoader } from '@cornerstonejs/core';\nimport { run } from './runGrowCut';\nimport { getSphereBoundsInfo } from '../../getSphereBoundsInfo';\nconst { transformWorldToIndex } = csUtils;\nconst POSITIVE_SEED_VALUE = 254;\nconst NEGATIVE_SEED_VALUE = 255;\nconst POSITIVE_SEED_VARIANCE = 0.1;\nconst NEGATIVE_SEED_VARIANCE = 0.8;\nfunction _getGrowCutSphereBoundsInfo(referencedVolume, sphereBoundsInfo) {\n    const { topLeftWorld, bottomRightWorld } = sphereBoundsInfo;\n    const topLeftIJK = transformWorldToIndex(referencedVolume.imageData, topLeftWorld);\n    const bottomRightIJK = transformWorldToIndex(referencedVolume.imageData, bottomRightWorld);\n    return {\n        ...sphereBoundsInfo,\n        topLeftIJK,\n        bottomRightIJK,\n    };\n}\nfunction _getSphereBoundsInfo(referencedVolume, sphereInfo) {\n    const direction = referencedVolume.imageData.getDirection();\n    const vecColumn = vec3.fromValues(direction[3], direction[4], direction[5]);\n    const { center: sphereCenterPoint, radius: sphereRadius } = sphereInfo;\n    const refVolImageData = referencedVolume.imageData;\n    const topCirclePoint = vec3.scaleAndAdd(vec3.create(), sphereCenterPoint, vecColumn, -sphereRadius);\n    const bottomCirclePoint = vec3.scaleAndAdd(vec3.create(), sphereCenterPoint, vecColumn, sphereRadius);\n    const sphereBoundsInfo = getSphereBoundsInfo([bottomCirclePoint, topCirclePoint], refVolImageData);\n    return _getGrowCutSphereBoundsInfo(referencedVolume, sphereBoundsInfo);\n}\nfunction _createSubVolumeFromSphere(referencedVolume, sphereInfo, viewport) {\n    const refVolImageData = referencedVolume.imageData;\n    const camera = viewport.getCamera();\n    const { ijkVecRowDir, ijkVecColDir } = csUtils.getVolumeDirectionVectors(refVolImageData, camera);\n    const obliqueView = [ijkVecRowDir, ijkVecColDir].some((vec) => !csUtils.isEqual(Math.abs(vec[0]), 1) &&\n        !csUtils.isEqual(Math.abs(vec[1]), 1) &&\n        !csUtils.isEqual(Math.abs(vec[2]), 1));\n    if (obliqueView) {\n        console.warn('Oblique view is not supported!');\n        return;\n    }\n    const { boundsIJK: sphereBoundsIJK } = _getSphereBoundsInfo(referencedVolume, sphereInfo);\n    const subVolumeBoundsIJK = {\n        minX: sphereBoundsIJK[0][0],\n        maxX: sphereBoundsIJK[0][1] + 1,\n        minY: sphereBoundsIJK[1][0],\n        maxY: sphereBoundsIJK[1][1] + 1,\n        minZ: sphereBoundsIJK[2][0],\n        maxZ: sphereBoundsIJK[2][1] + 1,\n    };\n    return csUtils.createSubVolume(referencedVolume.volumeId, subVolumeBoundsIJK, {\n        targetBuffer: {\n            type: 'Float32Array',\n        },\n    });\n}\nfunction _setPositiveSeedValues(referencedVolume, labelmap, sphereInfo, options) {\n    const refVolumePixelData = referencedVolume.voxelManager.getCompleteScalarDataArray();\n    const worldStartPos = sphereInfo.center;\n    const [width, height, numSlices] = referencedVolume.dimensions;\n    const numPixelsPerSlice = width * height;\n    const ijkStartPosition = transformWorldToIndex(referencedVolume.imageData, worldStartPos);\n    const referencePixelValue = refVolumePixelData[ijkStartPosition[2] * numPixelsPerSlice +\n        ijkStartPosition[1] * width +\n        ijkStartPosition[0]];\n    const positiveSeedValue = options.positiveSeedValue ?? POSITIVE_SEED_VALUE;\n    const positiveSeedVariance = options.positiveSeedVariance ?? POSITIVE_SEED_VARIANCE;\n    const positiveSeedVarianceValue = Math.abs(referencePixelValue * positiveSeedVariance);\n    const minPositivePixelValue = referencePixelValue - positiveSeedVarianceValue;\n    const maxPositivePixelValue = referencePixelValue + positiveSeedVarianceValue;\n    const neighborsCoordDelta = [\n        [-1, 0, 0],\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 1, 0],\n        [0, 0, -1],\n        [0, 0, 1],\n    ];\n    const startVoxelIndex = ijkStartPosition[2] * numPixelsPerSlice +\n        ijkStartPosition[1] * width +\n        ijkStartPosition[0];\n    labelmap.voxelManager.setAtIndex(startVoxelIndex, positiveSeedValue);\n    const queue = [ijkStartPosition];\n    while (queue.length) {\n        const ijkVoxel = queue.shift();\n        const [x, y, z] = ijkVoxel;\n        for (let i = 0, len = neighborsCoordDelta.length; i < len; i++) {\n            const neighborCoordDelta = neighborsCoordDelta[i];\n            const nx = x + neighborCoordDelta[0];\n            const ny = y + neighborCoordDelta[1];\n            const nz = z + neighborCoordDelta[2];\n            if (nx < 0 ||\n                nx >= width ||\n                ny < 0 ||\n                ny >= height ||\n                nz < 0 ||\n                nz >= numSlices) {\n                continue;\n            }\n            const neighborVoxelIndex = nz * numPixelsPerSlice + ny * width + nx;\n            const neighborPixelValue = refVolumePixelData[neighborVoxelIndex];\n            const neighborLabelmapValue = labelmap.voxelManager.getAtIndex(neighborVoxelIndex);\n            if (neighborLabelmapValue === positiveSeedValue ||\n                neighborPixelValue < minPositivePixelValue ||\n                neighborPixelValue > maxPositivePixelValue) {\n                continue;\n            }\n            labelmap.voxelManager.setAtIndex(neighborVoxelIndex, positiveSeedValue);\n            queue.push([nx, ny, nz]);\n        }\n    }\n}\nfunction _setNegativeSeedValues(subVolume, labelmap, sphereInfo, viewport, options) {\n    const subVolPixelData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const [columns, rows, numSlices] = labelmap.dimensions;\n    const numPixelsPerSlice = columns * rows;\n    const { worldVecRowDir, worldVecSliceDir } = csUtils.getVolumeDirectionVectors(labelmap.imageData, viewport.getCamera());\n    const ijkSphereCenter = transformWorldToIndex(subVolume.imageData, sphereInfo.center);\n    const referencePixelValue = subVolPixelData[ijkSphereCenter[2] * columns * rows +\n        ijkSphereCenter[1] * columns +\n        ijkSphereCenter[0]];\n    const negativeSeedVariance = options.negativeSeedVariance ?? NEGATIVE_SEED_VARIANCE;\n    const negativeSeedValue = options?.negativeSeedValue ?? NEGATIVE_SEED_VALUE;\n    const negativeSeedVarianceValue = Math.abs(referencePixelValue * negativeSeedVariance);\n    const minNegativePixelValue = referencePixelValue - negativeSeedVarianceValue;\n    const maxNegativePixelValue = referencePixelValue + negativeSeedVarianceValue;\n    const numCirclePoints = 360;\n    const rotationAngle = (2 * Math.PI) / numCirclePoints;\n    const worldQuat = quat.setAxisAngle(quat.create(), worldVecSliceDir, rotationAngle);\n    const vecRotation = vec3.clone(worldVecRowDir);\n    for (let i = 0; i < numCirclePoints; i++) {\n        const worldCircleBorderPoint = vec3.scaleAndAdd(vec3.create(), sphereInfo.center, vecRotation, sphereInfo.radius);\n        const ijkCircleBorderPoint = transformWorldToIndex(labelmap.imageData, worldCircleBorderPoint);\n        const [x, y, z] = ijkCircleBorderPoint;\n        vec3.transformQuat(vecRotation, vecRotation, worldQuat);\n        if (x < 0 ||\n            x >= columns ||\n            y < 0 ||\n            y >= rows ||\n            z < 0 ||\n            z >= numSlices) {\n            continue;\n        }\n        const offset = x + y * columns + z * numPixelsPerSlice;\n        const pixelValue = subVolPixelData[offset];\n        if (pixelValue < minNegativePixelValue ||\n            pixelValue > maxNegativePixelValue) {\n            labelmap.voxelManager.setAtIndex(offset, negativeSeedValue);\n        }\n    }\n}\nasync function _createAndCacheSegmentationSubVolumeForSphere(subVolume, sphereInfo, viewport, options) {\n    const labelmap = await volumeLoader.createAndCacheDerivedLabelmapVolume(subVolume.volumeId);\n    _setPositiveSeedValues(subVolume, labelmap, sphereInfo, options);\n    _setNegativeSeedValues(subVolume, labelmap, sphereInfo, viewport, options);\n    return labelmap;\n}\nasync function runGrowCutForSphere(referencedVolumeId, sphereInfo, viewport, options) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    const subVolume = _createSubVolumeFromSphere(referencedVolume, sphereInfo, viewport);\n    const labelmap = await _createAndCacheSegmentationSubVolumeForSphere(subVolume, sphereInfo, viewport, options);\n    await run(subVolume.volumeId, labelmap.volumeId);\n    return labelmap;\n}\nexport { runGrowCutForSphere as default, runGrowCutForSphere };\n","import { utilities as csUtils, cache, volumeLoader } from '@cornerstonejs/core';\nimport { run } from './runGrowCut';\nimport { POSITIVE_SEED_LABEL, NEGATIVE_SEED_LABEL, DEFAULT_NEIGHBORHOOD_RADIUS, DEFAULT_POSITIVE_STD_DEV_MULTIPLIER, DEFAULT_NEGATIVE_STD_DEV_MULTIPLIER, DEFAULT_NEGATIVE_SEED_MARGIN, DEFAULT_NEGATIVE_SEEDS_COUNT, MAX_NEGATIVE_SEED_ATTEMPTS_MULTIPLIER, } from './constants';\nconst { transformWorldToIndex } = csUtils;\nconst MAX_POSITIVE_SEEDS = 100000;\nfunction calculateGrowCutSeeds(referencedVolume, worldPosition, options) {\n    const { dimensions, imageData: refImageData } = referencedVolume;\n    const [width, height, numSlices] = dimensions;\n    const referenceVolumeVoxelManager = referencedVolume.voxelManager;\n    const scalarData = referenceVolumeVoxelManager.getCompleteScalarDataArray();\n    const numPixelsPerSlice = width * height;\n    const neighborhoodRadius = options?.initialNeighborhoodRadius ?? DEFAULT_NEIGHBORHOOD_RADIUS;\n    const positiveK = options?.positiveStdDevMultiplier ?? DEFAULT_POSITIVE_STD_DEV_MULTIPLIER;\n    const negativeK = options?.negativeStdDevMultiplier ?? DEFAULT_NEGATIVE_STD_DEV_MULTIPLIER;\n    const negativeSeedMargin = options?.negativeSeedMargin ?? DEFAULT_NEGATIVE_SEED_MARGIN;\n    const negativeSeedsTargetPatches = options?.negativeSeedsTargetPatches ?? DEFAULT_NEGATIVE_SEEDS_COUNT;\n    const ijkStart = transformWorldToIndex(refImageData, worldPosition).map(Math.round);\n    const startIndex = referenceVolumeVoxelManager.toIndex(ijkStart);\n    if (ijkStart[0] < 0 ||\n        ijkStart[0] >= width ||\n        ijkStart[1] < 0 ||\n        ijkStart[1] >= height ||\n        ijkStart[2] < 0 ||\n        ijkStart[2] >= numSlices) {\n        console.warn('Click position is outside volume bounds.');\n        return null;\n    }\n    const initialStats = csUtils.calculateNeighborhoodStats(scalarData, dimensions, ijkStart, neighborhoodRadius);\n    if (initialStats.count === 0) {\n        initialStats.mean = scalarData[startIndex];\n        initialStats.stdDev = 0;\n    }\n    const positiveIntensityMin = initialStats.mean - positiveK * initialStats.stdDev;\n    const positiveIntensityMax = initialStats.mean + positiveK * initialStats.stdDev;\n    const neighborsCoordDelta = [\n        [-1, 0, 0],\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 1, 0],\n        [0, 0, -1],\n        [0, 0, 1],\n    ];\n    let minX = Infinity, minY = Infinity, minZ = Infinity;\n    let maxX = -Infinity, maxY = -Infinity, maxZ = -Infinity;\n    const positiveSeedIndices = new Set();\n    const queue = [];\n    const startValue = scalarData[startIndex];\n    if (startValue >= positiveIntensityMin &&\n        startValue <= positiveIntensityMax) {\n        positiveSeedIndices.add(startIndex);\n        queue.push(ijkStart);\n        minX = maxX = ijkStart[0];\n        minY = maxY = ijkStart[1];\n        minZ = maxZ = ijkStart[2];\n    }\n    else {\n        console.warn('Clicked voxel intensity is outside the calculated positive range. No positive seeds generated.');\n        return { positiveSeedIndices: new Set(), negativeSeedIndices: new Set() };\n    }\n    let currentQueueIndex = 0;\n    while (currentQueueIndex < queue.length &&\n        positiveSeedIndices.size < MAX_POSITIVE_SEEDS) {\n        const [x, y, z] = queue[currentQueueIndex++];\n        minX = Math.min(x, minX);\n        minY = Math.min(y, minY);\n        minZ = Math.min(z, minZ);\n        maxX = Math.max(x, maxX);\n        maxY = Math.max(y, maxY);\n        maxZ = Math.max(z, maxZ);\n        for (let i = 0; i < neighborsCoordDelta.length; i++) {\n            const [dx, dy, dz] = neighborsCoordDelta[i];\n            const nx = x + dx;\n            const ny = y + dy;\n            const nz = z + dz;\n            if (nx < 0 ||\n                nx >= width ||\n                ny < 0 ||\n                ny >= height ||\n                nz < 0 ||\n                nz >= numSlices) {\n                continue;\n            }\n            const neighborIndex = nz * numPixelsPerSlice + ny * width + nx;\n            if (positiveSeedIndices.has(neighborIndex)) {\n                continue;\n            }\n            const neighborValue = scalarData[neighborIndex];\n            if (neighborValue >= positiveIntensityMin &&\n                neighborValue <= positiveIntensityMax) {\n                positiveSeedIndices.add(neighborIndex);\n                if (positiveSeedIndices.size < MAX_POSITIVE_SEEDS) {\n                    queue.push([nx, ny, nz]);\n                }\n            }\n        }\n    }\n    if (positiveSeedIndices.size >= MAX_POSITIVE_SEEDS) {\n        console.debug(`Reached maximum number of positive seeds (${MAX_POSITIVE_SEEDS}). Stopping BFS.`);\n    }\n    if (positiveSeedIndices.size === 0) {\n        console.warn('No positive seeds found after BFS.');\n        return { positiveSeedIndices: new Set(), negativeSeedIndices: new Set() };\n    }\n    let positiveSum = 0;\n    let positiveSumSq = 0;\n    positiveSeedIndices.forEach((index) => {\n        const value = scalarData[index];\n        positiveSum += value;\n        positiveSumSq += value * value;\n    });\n    const positiveCount = positiveSeedIndices.size;\n    const positiveMean = positiveSum / positiveCount;\n    const positiveVariance = positiveSumSq / positiveCount - positiveMean * positiveMean;\n    const positiveStdDev = Math.sqrt(Math.max(0, positiveVariance));\n    const negativeDiffThreshold = negativeK * positiveStdDev;\n    const minXm = Math.max(0, minX - negativeSeedMargin);\n    const minYm = Math.max(0, minY - negativeSeedMargin);\n    const minZm = Math.max(0, minZ - negativeSeedMargin);\n    const maxXm = Math.min(width - 1, maxX + negativeSeedMargin);\n    const maxYm = Math.min(height - 1, maxY + negativeSeedMargin);\n    const maxZm = Math.min(numSlices - 1, maxZ + negativeSeedMargin);\n    const negativeSeedIndices = new Set();\n    let attempts = 0;\n    let patchesAdded = 0;\n    const maxAttempts = negativeSeedsTargetPatches * MAX_NEGATIVE_SEED_ATTEMPTS_MULTIPLIER;\n    while (patchesAdded < negativeSeedsTargetPatches && attempts < maxAttempts) {\n        attempts++;\n        const rx = Math.floor(Math.random() * (maxXm - minXm + 1) + minXm);\n        const ry = Math.floor(Math.random() * (maxYm - minYm + 1) + minYm);\n        const rz = Math.floor(Math.random() * (maxZm - minZm + 1) + minZm);\n        const centerIndex = rz * numPixelsPerSlice + ry * width + rx;\n        if (positiveSeedIndices.has(centerIndex) ||\n            negativeSeedIndices.has(centerIndex)) {\n            continue;\n        }\n        const centerValue = scalarData[centerIndex];\n        if (Math.abs(centerValue - positiveMean) > negativeDiffThreshold) {\n            let patchContributed = false;\n            for (let dy = -1; dy <= 1; dy++) {\n                const ny = ry + dy;\n                if (ny < 0 || ny >= height) {\n                    continue;\n                }\n                for (let dx = -1; dx <= 1; dx++) {\n                    const nx = rx + dx;\n                    if (nx < 0 || nx >= width) {\n                        continue;\n                    }\n                    const neighborIndex = rz * numPixelsPerSlice + ny * width + nx;\n                    if (positiveSeedIndices.has(neighborIndex) ||\n                        negativeSeedIndices.has(neighborIndex)) {\n                        continue;\n                    }\n                    negativeSeedIndices.add(neighborIndex);\n                    patchContributed = true;\n                }\n            }\n            if (patchContributed) {\n                patchesAdded++;\n            }\n        }\n    }\n    if (negativeSeedIndices.size === 0) {\n        console.warn('Could not find any negative seeds. GrowCut might fail or produce poor results.');\n    }\n    console.debug('positiveSeedIndices', positiveSeedIndices.size);\n    console.debug('negativeSeedIndices', negativeSeedIndices.size);\n    return { positiveSeedIndices, negativeSeedIndices };\n}\nasync function runOneClickGrowCut({ referencedVolumeId, worldPosition, options, }) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    const labelmap = volumeLoader.createAndCacheDerivedLabelmapVolume(referencedVolumeId);\n    labelmap.voxelManager.forEach(({ index, value }) => {\n        if (value !== 0) {\n            labelmap.voxelManager.setAtIndex(index, 0);\n        }\n    });\n    const seeds = options.seeds ??\n        calculateGrowCutSeeds(referencedVolume, worldPosition, options);\n    const positiveSeedLabel = options?.positiveSeedValue ?? POSITIVE_SEED_LABEL;\n    const negativeSeedLabel = options?.negativeSeedValue ?? NEGATIVE_SEED_LABEL;\n    if (!seeds) {\n        return null;\n    }\n    const { positiveSeedIndices, negativeSeedIndices } = seeds;\n    if (positiveSeedIndices.size < 10 ||\n        positiveSeedIndices.size > MAX_POSITIVE_SEEDS ||\n        negativeSeedIndices.size < 10) {\n        console.warn('Not enough seeds found. GrowCut might fail or produce poor results.');\n        return labelmap;\n    }\n    positiveSeedIndices.forEach((index) => {\n        labelmap.voxelManager.setAtIndex(index, positiveSeedLabel);\n    });\n    negativeSeedIndices.forEach((index) => {\n        labelmap.voxelManager.setAtIndex(index, negativeSeedLabel);\n    });\n    await run(referencedVolumeId, labelmap.volumeId, options);\n    return labelmap;\n}\nexport { runOneClickGrowCut as default, runOneClickGrowCut, calculateGrowCutSeeds, };\n","import { getToolGroup } from '../../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../triggerAnnotationRenderForViewportIds';\nimport { getBrushToolInstances } from './getBrushToolInstances';\nexport function invalidateBrushCursor(toolGroupId) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return;\n    }\n    const brushBasedToolInstances = getBrushToolInstances(toolGroupId);\n    brushBasedToolInstances.forEach((tool) => {\n        tool.invalidateBrushCursor();\n    });\n    const viewportsInfo = toolGroup.getViewportsInfo();\n    const viewportsInfoArray = Object.keys(viewportsInfo).map((key) => viewportsInfo[key]);\n    if (!viewportsInfoArray.length) {\n        return;\n    }\n    const viewportIds = toolGroup.getViewportIds();\n    triggerAnnotationRenderForViewportIds(viewportIds);\n}\n","import debounce from './debounce';\nimport isObject from './isObject';\nfunction throttle(func, wait, options) {\n    let leading = true;\n    let trailing = true;\n    if (typeof func !== 'function') {\n        throw new TypeError('Expected a function');\n    }\n    if (isObject(options)) {\n        leading = 'leading' in options ? Boolean(options.leading) : leading;\n        trailing = 'trailing' in options ? Boolean(options.trailing) : trailing;\n    }\n    return debounce(func, wait, {\n        leading,\n        trailing,\n        maxWait: wait,\n    });\n}\nexport default throttle;\n","function getDeltaPoints(currentPoints, lastPoints) {\n    const curr = getMeanPoints(currentPoints);\n    const last = getMeanPoints(lastPoints);\n    return {\n        page: _subtractPoints2D(curr.page, last.page),\n        client: _subtractPoints2D(curr.client, last.client),\n        canvas: _subtractPoints2D(curr.canvas, last.canvas),\n        world: _subtractPoints3D(curr.world, last.world),\n    };\n}\nfunction getDeltaDistance(currentPoints, lastPoints) {\n    const curr = getMeanPoints(currentPoints);\n    const last = getMeanPoints(lastPoints);\n    return {\n        page: _getDistance2D(curr.page, last.page),\n        client: _getDistance2D(curr.client, last.client),\n        canvas: _getDistance2D(curr.canvas, last.canvas),\n        world: _getDistance3D(curr.world, last.world),\n    };\n}\nfunction getDeltaRotation(currentPoints, lastPoints) {\n}\nfunction getDeltaDistanceBetweenIPoints(currentPoints, lastPoints) {\n    const currentDistance = _getMeanDistanceBetweenAllIPoints(currentPoints);\n    const lastDistance = _getMeanDistanceBetweenAllIPoints(lastPoints);\n    const deltaDistance = {\n        page: currentDistance.page - lastDistance.page,\n        client: currentDistance.client - lastDistance.client,\n        canvas: currentDistance.canvas - lastDistance.canvas,\n        world: currentDistance.world - lastDistance.world,\n    };\n    return deltaDistance;\n}\nfunction copyPointsList(points) {\n    return JSON.parse(JSON.stringify(points));\n}\nfunction copyPoints(points) {\n    return JSON.parse(JSON.stringify(points));\n}\nfunction getMeanPoints(points) {\n    return points.reduce((prev, curr) => {\n        return {\n            page: [\n                prev.page[0] + curr.page[0] / points.length,\n                prev.page[1] + curr.page[1] / points.length,\n            ],\n            client: [\n                prev.client[0] + curr.client[0] / points.length,\n                prev.client[1] + curr.client[1] / points.length,\n            ],\n            canvas: [\n                prev.canvas[0] + curr.canvas[0] / points.length,\n                prev.canvas[1] + curr.canvas[1] / points.length,\n            ],\n            world: [\n                prev.world[0] + curr.world[0] / points.length,\n                prev.world[1] + curr.world[1] / points.length,\n                prev.world[2] + curr.world[2] / points.length,\n            ],\n        };\n    }, {\n        page: [0, 0],\n        client: [0, 0],\n        canvas: [0, 0],\n        world: [0, 0, 0],\n    });\n}\nfunction getMeanTouchPoints(points) {\n    return points.reduce((prev, curr) => {\n        return {\n            page: [\n                prev.page[0] + curr.page[0] / points.length,\n                prev.page[1] + curr.page[1] / points.length,\n            ],\n            client: [\n                prev.client[0] + curr.client[0] / points.length,\n                prev.client[1] + curr.client[1] / points.length,\n            ],\n            canvas: [\n                prev.canvas[0] + curr.canvas[0] / points.length,\n                prev.canvas[1] + curr.canvas[1] / points.length,\n            ],\n            world: [\n                prev.world[0] + curr.world[0] / points.length,\n                prev.world[1] + curr.world[1] / points.length,\n                prev.world[2] + curr.world[2] / points.length,\n            ],\n            touch: {\n                identifier: null,\n                radiusX: prev.touch.radiusX + curr.touch.radiusX / points.length,\n                radiusY: prev.touch.radiusY + curr.touch.radiusY / points.length,\n                force: prev.touch.force + curr.touch.force / points.length,\n                rotationAngle: prev.touch.rotationAngle + curr.touch.rotationAngle / points.length,\n            },\n        };\n    }, {\n        page: [0, 0],\n        client: [0, 0],\n        canvas: [0, 0],\n        world: [0, 0, 0],\n        touch: {\n            identifier: null,\n            radiusX: 0,\n            radiusY: 0,\n            force: 0,\n            rotationAngle: 0,\n        },\n    });\n}\nfunction _subtractPoints2D(point0, point1) {\n    return [point0[0] - point1[0], point0[1] - point1[1]];\n}\nfunction _subtractPoints3D(point0, point1) {\n    return [point0[0] - point1[0], point0[1] - point1[1], point0[2] - point1[2]];\n}\nfunction _getMeanDistanceBetweenAllIPoints(points) {\n    const pairedDistance = [];\n    for (let i = 0; i < points.length; i++) {\n        for (let j = 0; j < points.length; j++) {\n            if (i < j) {\n                pairedDistance.push({\n                    page: _getDistance2D(points[i].page, points[j].page),\n                    client: _getDistance2D(points[i].client, points[j].client),\n                    canvas: _getDistance2D(points[i].canvas, points[j].canvas),\n                    world: _getDistance3D(points[i].world, points[j].world),\n                });\n            }\n        }\n    }\n    return pairedDistance.reduce((prev, curr) => {\n        return {\n            page: prev.page + curr.page / pairedDistance.length,\n            client: prev.client + curr.client / pairedDistance.length,\n            canvas: prev.canvas + curr.canvas / pairedDistance.length,\n            world: prev.world + curr.world / pairedDistance.length,\n        };\n    }, {\n        page: 0,\n        client: 0,\n        canvas: 0,\n        world: 0,\n    });\n}\nfunction _getDistance2D(point0, point1) {\n    return Math.sqrt(Math.pow(point0[0] - point1[0], 2) + Math.pow(point0[1] - point1[1], 2));\n}\nfunction _getDistance3D(point0, point1) {\n    return Math.sqrt(Math.pow(point0[0] - point1[0], 2) +\n        Math.pow(point0[1] - point1[1], 2) +\n        Math.pow(point0[2] - point1[2], 2));\n}\nexport { getMeanPoints, getMeanTouchPoints, copyPoints, copyPointsList, getDeltaDistanceBetweenIPoints, getDeltaPoints, getDeltaDistance, getDeltaRotation, };\n","import { getRenderingEngine } from '@cornerstonejs/core';\nimport triggerAnnotationRender from './triggerAnnotationRender';\nimport { getToolGroup } from '../store/ToolGroupManager';\nexport function triggerAnnotationRenderForToolGroupIds(toolGroupIds) {\n    toolGroupIds.forEach((toolGroupId) => {\n        const toolGroup = getToolGroup(toolGroupId);\n        if (!toolGroup) {\n            console.warn(`ToolGroup not available for ${toolGroupId}`);\n            return;\n        }\n        const viewportsInfo = toolGroup.getViewportsInfo();\n        viewportsInfo.forEach((viewportInfo) => {\n            const { renderingEngineId, viewportId } = viewportInfo;\n            const renderingEngine = getRenderingEngine(renderingEngineId);\n            if (!renderingEngine) {\n                console.warn(`RenderingEngine not available for ${renderingEngineId}`);\n                return;\n            }\n            const viewport = renderingEngine.getViewport(viewportId);\n            triggerAnnotationRender(viewport.element);\n        });\n    });\n}\nexport default triggerAnnotationRenderForToolGroupIds;\n","import { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport triggerAnnotationRender from './triggerAnnotationRender';\nexport function triggerAnnotationRenderForViewportIds(viewportIdsToRender) {\n    if (!viewportIdsToRender.length) {\n        return;\n    }\n    viewportIdsToRender.forEach((viewportId) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            console.warn(`Viewport not available for ${viewportId}`);\n            return;\n        }\n        const { viewport } = enabledElement;\n        if (!viewport) {\n            console.warn(`Viewport not available for ${viewportId}`);\n            return;\n        }\n        const element = viewport.element;\n        triggerAnnotationRender(element);\n    });\n}\nexport default triggerAnnotationRenderForViewportIds;\n","import { cache, StackViewport, BaseVolumeViewport, utilities, } from '@cornerstonejs/core';\nfunction isViewportPreScaled(viewport, targetId) {\n    if (viewport instanceof BaseVolumeViewport) {\n        const volumeId = utilities.getVolumeId(targetId);\n        const volume = cache.getVolume(volumeId);\n        return !!volume?.scaling && Object.keys(volume.scaling).length > 0;\n    }\n    else if (viewport instanceof StackViewport) {\n        const { preScale } = viewport.getImageData() || {};\n        return !!preScale?.scaled;\n    }\n    else {\n        return false;\n    }\n}\nexport { isViewportPreScaled };\n","export var ColorbarRangeTextPosition;\n(function (ColorbarRangeTextPosition) {\n    ColorbarRangeTextPosition[\"Top\"] = \"top\";\n    ColorbarRangeTextPosition[\"Left\"] = \"left\";\n    ColorbarRangeTextPosition[\"Bottom\"] = \"bottom\";\n    ColorbarRangeTextPosition[\"Right\"] = \"right\";\n})(ColorbarRangeTextPosition || (ColorbarRangeTextPosition = {}));\n","const AttributeTypes = {\n  SCALARS: 0,\n  VECTORS: 1,\n  NORMALS: 2,\n  TCOORDS: 3,\n  TENSORS: 4,\n  GLOBALIDS: 5,\n  PEDIGREEIDS: 6,\n  EDGEFLAG: 7,\n  NUM_ATTRIBUTES: 8\n};\nconst AttributeLimitTypes = {\n  MAX: 0,\n  EXACT: 1,\n  NOLIMIT: 2\n};\nconst CellGhostTypes = {\n  DUPLICATECELL: 1,\n  // the cell is present on multiple processors\n  HIGHCONNECTIVITYCELL: 2,\n  // the cell has more neighbors than in a regular mesh\n  LOWCONNECTIVITYCELL: 4,\n  // the cell has less neighbors than in a regular mesh\n  REFINEDCELL: 8,\n  // other cells are present that refines it.\n  EXTERIORCELL: 16,\n  // the cell is on the exterior of the data set\n  HIDDENCELL: 32 // the cell is needed to maintain connectivity, but the data values should be ignored.\n};\n\nconst PointGhostTypes = {\n  DUPLICATEPOINT: 1,\n  // the cell is present on multiple processors\n  HIDDENPOINT: 2 // the point is needed to maintain connectivity, but the data values should be ignored.\n};\n\nconst AttributeCopyOperations = {\n  COPYTUPLE: 0,\n  INTERPOLATE: 1,\n  PASSDATA: 2,\n  ALLCOPY: 3 // all of the above\n};\n\nconst ghostArrayName = 'vtkGhostType';\nconst DesiredOutputPrecision = {\n  DEFAULT: 0,\n  // use the point type that does not truncate any data\n  SINGLE: 1,\n  // use Float32Array\n  DOUBLE: 2 // use Float64Array\n};\n\nvar Constants = {\n  AttributeCopyOperations,\n  AttributeLimitTypes,\n  AttributeTypes,\n  CellGhostTypes,\n  DesiredOutputPrecision,\n  PointGhostTypes,\n  ghostArrayName\n};\n\nexport { AttributeCopyOperations, AttributeLimitTypes, AttributeTypes, CellGhostTypes, DesiredOutputPrecision, PointGhostTypes, Constants as default, ghostArrayName };\n","import { m as macro } from '../../macros2.js';\nimport { b as roundVector, c as clampVector } from '../Core/Math/index.js';\nimport vtkBoundingBox from './BoundingBox.js';\nimport vtkDataSet from './DataSet.js';\nimport vtkStructuredData from './StructuredData.js';\nimport { StructuredType } from './StructuredData/Constants.js';\nimport { mat3, mat4, vec3 } from 'gl-matrix';\n\nconst {\n  vtkErrorMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// vtkImageData methods\n// ----------------------------------------------------------------------------\n\nfunction vtkImageData(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkImageData');\n  publicAPI.setExtent = function () {\n    if (model.deleted) {\n      vtkErrorMacro('instance deleted - cannot call any method');\n      return false;\n    }\n    for (var _len = arguments.length, inExtent = new Array(_len), _key = 0; _key < _len; _key++) {\n      inExtent[_key] = arguments[_key];\n    }\n    const extentArray = inExtent.length === 1 ? inExtent[0] : inExtent;\n    if (extentArray.length !== 6) {\n      return false;\n    }\n    const changeDetected = model.extent.some((item, index) => item !== extentArray[index]);\n    if (changeDetected) {\n      model.extent = extentArray.slice();\n      model.dataDescription = vtkStructuredData.getDataDescriptionFromExtent(model.extent);\n      publicAPI.modified();\n    }\n    return changeDetected;\n  };\n  publicAPI.setDimensions = function () {\n    let i;\n    let j;\n    let k;\n    if (model.deleted) {\n      vtkErrorMacro('instance deleted - cannot call any method');\n      return;\n    }\n    if (arguments.length === 1) {\n      const array = arguments.length <= 0 ? undefined : arguments[0];\n      i = array[0];\n      j = array[1];\n      k = array[2];\n    } else if (arguments.length === 3) {\n      i = arguments.length <= 0 ? undefined : arguments[0];\n      j = arguments.length <= 1 ? undefined : arguments[1];\n      k = arguments.length <= 2 ? undefined : arguments[2];\n    } else {\n      vtkErrorMacro('Bad dimension specification');\n      return;\n    }\n    publicAPI.setExtent(0, i - 1, 0, j - 1, 0, k - 1);\n  };\n  publicAPI.getDimensions = () => [model.extent[1] - model.extent[0] + 1, model.extent[3] - model.extent[2] + 1, model.extent[5] - model.extent[4] + 1];\n  publicAPI.getNumberOfCells = () => {\n    const dims = publicAPI.getDimensions();\n    let nCells = 1;\n    for (let i = 0; i < 3; i++) {\n      if (dims[i] === 0) {\n        return 0;\n      }\n      if (dims[i] > 1) {\n        nCells *= dims[i] - 1;\n      }\n    }\n    return nCells;\n  };\n  publicAPI.getNumberOfPoints = () => {\n    const dims = publicAPI.getDimensions();\n    return dims[0] * dims[1] * dims[2];\n  };\n  publicAPI.getPoint = index => {\n    const dims = publicAPI.getDimensions();\n    if (dims[0] === 0 || dims[1] === 0 || dims[2] === 0) {\n      vtkErrorMacro('Requesting a point from an empty image.');\n      return null;\n    }\n    const ijk = new Float64Array(3);\n    switch (model.dataDescription) {\n      case StructuredType.EMPTY:\n        return null;\n      case StructuredType.SINGLE_POINT:\n        break;\n      case StructuredType.X_LINE:\n        ijk[0] = index;\n        break;\n      case StructuredType.Y_LINE:\n        ijk[1] = index;\n        break;\n      case StructuredType.Z_LINE:\n        ijk[2] = index;\n        break;\n      case StructuredType.XY_PLANE:\n        ijk[0] = index % dims[0];\n        ijk[1] = index / dims[0];\n        break;\n      case StructuredType.YZ_PLANE:\n        ijk[1] = index % dims[1];\n        ijk[2] = index / dims[1];\n        break;\n      case StructuredType.XZ_PLANE:\n        ijk[0] = index % dims[0];\n        ijk[2] = index / dims[0];\n        break;\n      case StructuredType.XYZ_GRID:\n        ijk[0] = index % dims[0];\n        ijk[1] = index / dims[0] % dims[1];\n        ijk[2] = index / (dims[0] * dims[1]);\n        break;\n      default:\n        vtkErrorMacro('Invalid dataDescription');\n        break;\n    }\n    const coords = [0, 0, 0];\n    publicAPI.indexToWorld(ijk, coords);\n    return coords;\n  };\n\n  // vtkCell *GetCell(vtkIdType cellId) VTK_OVERRIDE;\n  // void GetCell(vtkIdType cellId, vtkGenericCell *cell) VTK_OVERRIDE;\n  // void GetCellBounds(vtkIdType cellId, double bounds[6]) VTK_OVERRIDE;\n  // virtual vtkIdType FindPoint(double x, double y, double z)\n  // {\n  //   return this->vtkDataSet::FindPoint(x, y, z);\n  // }\n  // vtkIdType FindPoint(double x[3]) VTK_OVERRIDE;\n  // vtkIdType FindCell(\n  //   double x[3], vtkCell *cell, vtkIdType cellId, double tol2,\n  //   int& subId, double pcoords[3], double *weights) VTK_OVERRIDE;\n  // vtkIdType FindCell(\n  //   double x[3], vtkCell *cell, vtkGenericCell *gencell,\n  //   vtkIdType cellId, double tol2, int& subId,\n  //   double pcoords[3], double *weights) VTK_OVERRIDE;\n  // vtkCell *FindAndGetCell(double x[3], vtkCell *cell, vtkIdType cellId,\n  //                                 double tol2, int& subId, double pcoords[3],\n  //                                 double *weights) VTK_OVERRIDE;\n  // int GetCellType(vtkIdType cellId) VTK_OVERRIDE;\n  // void GetCellPoints(vtkIdType cellId, vtkIdList *ptIds) VTK_OVERRIDE\n  //   {vtkStructuredData::GetCellPoints(cellId,ptIds,this->DataDescription,\n  //                                     this->GetDimensions());}\n  // void GetPointCells(vtkIdType ptId, vtkIdList *cellIds) VTK_OVERRIDE\n  //   {vtkStructuredData::GetPointCells(ptId,cellIds,this->GetDimensions());}\n  // void ComputeBounds() VTK_OVERRIDE;\n  // int GetMaxCellSize() VTK_OVERRIDE {return 8;}; //voxel is the largest\n\n  publicAPI.getBounds = () => publicAPI.extentToBounds(publicAPI.getSpatialExtent());\n  publicAPI.extentToBounds = ex => vtkBoundingBox.transformBounds(ex, model.indexToWorld);\n  publicAPI.getSpatialExtent = () => vtkBoundingBox.inflate([...model.extent], 0.5);\n\n  // Internal, shouldn't need to call this manually.\n  publicAPI.computeTransforms = () => {\n    mat4.fromTranslation(model.indexToWorld, model.origin);\n    model.indexToWorld[0] = model.direction[0];\n    model.indexToWorld[1] = model.direction[1];\n    model.indexToWorld[2] = model.direction[2];\n    model.indexToWorld[4] = model.direction[3];\n    model.indexToWorld[5] = model.direction[4];\n    model.indexToWorld[6] = model.direction[5];\n    model.indexToWorld[8] = model.direction[6];\n    model.indexToWorld[9] = model.direction[7];\n    model.indexToWorld[10] = model.direction[8];\n    mat4.scale(model.indexToWorld, model.indexToWorld, model.spacing);\n    mat4.invert(model.worldToIndex, model.indexToWorld);\n  };\n  publicAPI.indexToWorld = function (ain) {\n    let aout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    vec3.transformMat4(aout, ain, model.indexToWorld);\n    return aout;\n  };\n  publicAPI.indexToWorldVec3 = publicAPI.indexToWorld;\n  publicAPI.worldToIndex = function (ain) {\n    let aout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    vec3.transformMat4(aout, ain, model.worldToIndex);\n    return aout;\n  };\n  publicAPI.worldToIndexVec3 = publicAPI.worldToIndex;\n  publicAPI.indexToWorldBounds = function (bin) {\n    let bout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    return vtkBoundingBox.transformBounds(bin, model.indexToWorld, bout);\n  };\n  publicAPI.worldToIndexBounds = function (bin) {\n    let bout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    return vtkBoundingBox.transformBounds(bin, model.worldToIndex, bout);\n  };\n\n  // Make sure the transform is correct\n  publicAPI.onModified(publicAPI.computeTransforms);\n  publicAPI.computeTransforms();\n  publicAPI.getCenter = () => vtkBoundingBox.getCenter(publicAPI.getBounds());\n  publicAPI.computeHistogram = function (worldBounds) {\n    let voxelFunction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const bounds = [0, 0, 0, 0, 0, 0];\n    publicAPI.worldToIndexBounds(worldBounds, bounds);\n    const point1 = [0, 0, 0];\n    const point2 = [0, 0, 0];\n    vtkBoundingBox.computeCornerPoints(bounds, point1, point2);\n    roundVector(point1, point1);\n    roundVector(point2, point2);\n    const dimensions = publicAPI.getDimensions();\n    clampVector(point1, [0, 0, 0], [dimensions[0] - 1, dimensions[1] - 1, dimensions[2] - 1], point1);\n    clampVector(point2, [0, 0, 0], [dimensions[0] - 1, dimensions[1] - 1, dimensions[2] - 1], point2);\n    const yStride = dimensions[0];\n    const zStride = dimensions[0] * dimensions[1];\n    const pixels = publicAPI.getPointData().getScalars().getData();\n    let maximum = -Infinity;\n    let minimum = Infinity;\n    let sumOfSquares = 0;\n    let isum = 0;\n    let inum = 0;\n    for (let z = point1[2]; z <= point2[2]; z++) {\n      for (let y = point1[1]; y <= point2[1]; y++) {\n        let index = point1[0] + y * yStride + z * zStride;\n        for (let x = point1[0]; x <= point2[0]; x++) {\n          if (!voxelFunction || voxelFunction([x, y, z], bounds)) {\n            const pixel = pixels[index];\n            if (pixel > maximum) maximum = pixel;\n            if (pixel < minimum) minimum = pixel;\n            sumOfSquares += pixel * pixel;\n            isum += pixel;\n            inum += 1;\n          }\n          ++index;\n        }\n      }\n    }\n    const average = inum > 0 ? isum / inum : 0;\n    const variance = inum ? Math.abs(sumOfSquares / inum - average * average) : 0;\n    const sigma = Math.sqrt(variance);\n    return {\n      minimum,\n      maximum,\n      average,\n      variance,\n      sigma,\n      count: inum\n    };\n  };\n\n  // TODO: use the unimplemented `vtkDataSetAttributes` for scalar length, that is currently also a TODO (GetNumberOfComponents).\n  // Scalar data could be tuples for color information?\n  publicAPI.computeIncrements = function (extent) {\n    let numberOfComponents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    const increments = [];\n    let incr = numberOfComponents;\n\n    // Calculate array increment offsets\n    // similar to c++ vtkImageData::ComputeIncrements\n    for (let idx = 0; idx < 3; ++idx) {\n      increments[idx] = incr;\n      incr *= extent[idx * 2 + 1] - extent[idx * 2] + 1;\n    }\n    return increments;\n  };\n\n  /**\n   * @param {Number[]} index the localized `[i,j,k]` pixel array position. Float values will be rounded.\n   * @return {Number} the corresponding flattened index in the scalar array\n   */\n  publicAPI.computeOffsetIndex = _ref => {\n    let [i, j, k] = _ref;\n    const extent = publicAPI.getExtent();\n    const numberOfComponents = publicAPI.getPointData().getScalars().getNumberOfComponents();\n    const increments = publicAPI.computeIncrements(extent, numberOfComponents);\n    // Use the array increments to find the pixel index\n    // similar to c++ vtkImageData::GetArrayPointer\n    // Math.floor to catch \"practically 0\" e^-15 scenarios.\n    return Math.floor((Math.round(i) - extent[0]) * increments[0] + (Math.round(j) - extent[2]) * increments[1] + (Math.round(k) - extent[4]) * increments[2]);\n  };\n\n  /**\n   * @param {Number[]} xyz the [x,y,z] Array in world coordinates\n   * @return {Number|NaN} the corresponding pixel's index in the scalar array\n   */\n  publicAPI.getOffsetIndexFromWorld = xyz => {\n    const extent = publicAPI.getExtent();\n    const index = publicAPI.worldToIndex(xyz);\n\n    // Confirm indexed i,j,k coords are within the bounds of the volume\n    for (let idx = 0; idx < 3; ++idx) {\n      if (index[idx] < extent[idx * 2] || index[idx] > extent[idx * 2 + 1]) {\n        vtkErrorMacro(`GetScalarPointer: Pixel ${index} is not in memory. Current extent = ${extent}`);\n        return NaN;\n      }\n    }\n\n    // Assumed the index here is within 0 <-> scalarData.length, but doesn't hurt to check upstream\n    return publicAPI.computeOffsetIndex(index);\n  };\n  /**\n   * @param {Number[]} xyz the [x,y,z] Array in world coordinates\n   * @param {Number?} comp the scalar component index for multi-component scalars\n   * @return {Number|NaN} the corresponding pixel's scalar value\n   */\n  publicAPI.getScalarValueFromWorld = function (xyz) {\n    let comp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const numberOfComponents = publicAPI.getPointData().getScalars().getNumberOfComponents();\n    if (comp < 0 || comp >= numberOfComponents) {\n      vtkErrorMacro(`GetScalarPointer: Scalar Component ${comp} is not within bounds. Current Scalar numberOfComponents: ${numberOfComponents}`);\n      return NaN;\n    }\n    const offsetIndex = publicAPI.getOffsetIndexFromWorld(xyz);\n    if (Number.isNaN(offsetIndex)) {\n      // VTK Error Macro will have been tripped already, no need to do it again,\n      return offsetIndex;\n    }\n    return publicAPI.getPointData().getScalars().getComponent(offsetIndex, comp);\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  direction: null,\n  // a mat3\n  indexToWorld: null,\n  // a mat4\n  worldToIndex: null,\n  // a mat4\n  spacing: [1.0, 1.0, 1.0],\n  origin: [0.0, 0.0, 0.0],\n  extent: [0, -1, 0, -1, 0, -1],\n  dataDescription: StructuredType.EMPTY\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkDataSet.extend(publicAPI, model, initialValues);\n  if (!model.direction) {\n    model.direction = mat3.identity(new Float64Array(9));\n  } else if (Array.isArray(model.direction)) {\n    model.direction = new Float64Array(model.direction.slice(0, 9));\n  }\n  model.indexToWorld = new Float64Array(16);\n  model.worldToIndex = new Float64Array(16);\n\n  // Set/Get methods\n  macro.get(publicAPI, model, ['indexToWorld', 'worldToIndex']);\n  macro.setGetArray(publicAPI, model, ['origin', 'spacing'], 3);\n  macro.setGetArray(publicAPI, model, ['direction'], 9);\n  macro.getArray(publicAPI, model, ['extent'], 6);\n\n  // Object specific methods\n  vtkImageData(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkImageData');\n\n// ----------------------------------------------------------------------------\n\nvar vtkImageData$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkImageData$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport { h as hsv2rgb, i as isNan, K as floor, L as isInf, M as rgb2hsv, N as rgb2lab, O as lab2rgb } from '../../Common/Core/Math/index.js';\nimport vtkScalarsToColors from '../../Common/Core/ScalarsToColors.js';\nimport Constants from './ColorTransferFunction/Constants.js';\n\nconst {\n  ColorSpace,\n  Scale\n} = Constants;\nconst {\n  ScalarMappingTarget\n} = vtkScalarsToColors;\nconst {\n  vtkDebugMacro,\n  vtkErrorMacro,\n  vtkWarningMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n/* eslint-disable no-continue                                                */\n\n// Convert to and from a special polar version of CIELAB (useful for creating\n// continuous diverging color maps).\nfunction vtkColorTransferFunctionLabToMsh(lab, msh) {\n  const L = lab[0];\n  const a = lab[1];\n  const b = lab[2];\n  const M = Math.sqrt(L * L + a * a + b * b);\n  const s = M > 0.001 ? Math.acos(L / M) : 0.0;\n  const h = s > 0.001 ? Math.atan2(b, a) : 0.0;\n  msh[0] = M;\n  msh[1] = s;\n  msh[2] = h;\n}\nfunction vtkColorTransferFunctionMshToLab(msh, lab) {\n  const M = msh[0];\n  const s = msh[1];\n  const h = msh[2];\n  lab[0] = M * Math.cos(s);\n  lab[1] = M * Math.sin(s) * Math.cos(h);\n  lab[2] = M * Math.sin(s) * Math.sin(h);\n}\n\n// For the case when interpolating from a saturated color to an unsaturated\n// color, find a hue for the unsaturated color that makes sense.\nfunction vtkColorTransferFunctionAdjustHue(msh, unsatM) {\n  if (msh[0] >= unsatM - 0.1) {\n    // The best we can do is hold hue constant.\n    return msh[2];\n  }\n\n  // This equation is designed to make the perceptual change of the\n  // interpolation to be close to constant.\n  const hueSpin = msh[1] * Math.sqrt(unsatM * unsatM - msh[0] * msh[0]) / (msh[0] * Math.sin(msh[1]));\n  // Spin hue away from 0 except in purple hues.\n  if (msh[2] > -0.3 * Math.PI) {\n    return msh[2] + hueSpin;\n  }\n  return msh[2] - hueSpin;\n}\nfunction vtkColorTransferFunctionAngleDiff(a1, a2) {\n  let adiff = a1 - a2;\n  if (adiff < 0.0) {\n    adiff = -adiff;\n  }\n  while (adiff >= 2.0 * Math.PI) {\n    adiff -= 2.0 * Math.PI;\n  }\n  if (adiff > Math.PI) {\n    adiff = 2.0 * Math.PI - adiff;\n  }\n  return adiff;\n}\n\n// Interpolate a diverging color map.\nfunction vtkColorTransferFunctionInterpolateDiverging(s, rgb1, rgb2, result) {\n  const lab1 = [];\n  const lab2 = [];\n  rgb2lab(rgb1, lab1);\n  rgb2lab(rgb2, lab2);\n  const msh1 = [];\n  const msh2 = [];\n  vtkColorTransferFunctionLabToMsh(lab1, msh1);\n  vtkColorTransferFunctionLabToMsh(lab2, msh2);\n\n  // If the endpoints are distinct saturated colors, then place white in between\n  // them.\n  let localS = s;\n  if (msh1[1] > 0.05 && msh2[1] > 0.05 && vtkColorTransferFunctionAngleDiff(msh1[2], msh2[2]) > 0.33 * Math.PI) {\n    // Insert the white midpoint by setting one end to white and adjusting the\n    // scalar value.\n    let Mmid = Math.max(msh1[0], msh2[0]);\n    Mmid = Math.max(88.0, Mmid);\n    if (s < 0.5) {\n      msh2[0] = Mmid;\n      msh2[1] = 0.0;\n      msh2[2] = 0.0;\n      localS *= 2.0;\n    } else {\n      msh1[0] = Mmid;\n      msh1[1] = 0.0;\n      msh1[2] = 0.0;\n      localS = 2.0 * localS - 1.0;\n    }\n  }\n\n  // If one color has no saturation, then its hue value is invalid.  In this\n  // case, we want to set it to something logical so that the interpolation of\n  // hue makes sense.\n  if (msh1[1] < 0.05 && msh2[1] > 0.05) {\n    msh1[2] = vtkColorTransferFunctionAdjustHue(msh2, msh1[0]);\n  } else if (msh2[1] < 0.05 && msh1[1] > 0.05) {\n    msh2[2] = vtkColorTransferFunctionAdjustHue(msh1, msh2[0]);\n  }\n  const mshTmp = [];\n  mshTmp[0] = (1 - localS) * msh1[0] + localS * msh2[0];\n  mshTmp[1] = (1 - localS) * msh1[1] + localS * msh2[1];\n  mshTmp[2] = (1 - localS) * msh1[2] + localS * msh2[2];\n\n  // Now convert back to RGB\n  const labTmp = [];\n  vtkColorTransferFunctionMshToLab(mshTmp, labTmp);\n  lab2rgb(labTmp, result);\n}\n\n// ----------------------------------------------------------------------------\n// vtkColorTransferFunction methods\n// ----------------------------------------------------------------------------\n\nfunction vtkColorTransferFunction(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkColorTransferFunction');\n\n  // Return the number of points which specify this function\n  publicAPI.getSize = () => model.nodes.length;\n\n  //----------------------------------------------------------------------------\n  // Add a point defined in RGB\n  publicAPI.addRGBPoint = (x, r, g, b) => publicAPI.addRGBPointLong(x, r, g, b, 0.5, 0.0);\n\n  //----------------------------------------------------------------------------\n  // Add a point defined in RGB\n  publicAPI.addRGBPointLong = function (x, r, g, b) {\n    let midpoint = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.5;\n    let sharpness = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0.0;\n    // Error check\n    if (midpoint < 0.0 || midpoint > 1.0) {\n      vtkErrorMacro('Midpoint outside range [0.0, 1.0]');\n      return -1;\n    }\n    if (sharpness < 0.0 || sharpness > 1.0) {\n      vtkErrorMacro('Sharpness outside range [0.0, 1.0]');\n      return -1;\n    }\n\n    // remove any node already at this X location\n    if (!model.allowDuplicateScalars) {\n      publicAPI.removePoint(x);\n    }\n\n    // Create the new node\n    const node = {\n      x,\n      r,\n      g,\n      b,\n      midpoint,\n      sharpness\n    };\n\n    // Add it, then sort to get everything in order\n    model.nodes.push(node);\n    publicAPI.sortAndUpdateRange();\n\n    // We need to find the index of the node we just added in order\n    // to return this value\n    let i = 0;\n    for (; i < model.nodes.length; i++) {\n      if (model.nodes[i].x === x) {\n        break;\n      }\n    }\n\n    // If we didn't find it, something went horribly wrong so\n    // return -1\n    if (i < model.nodes.length) {\n      return i;\n    }\n    return -1;\n  };\n\n  //----------------------------------------------------------------------------\n  // Add a point defined in HSV\n  publicAPI.addHSVPoint = (x, h, s, v) => publicAPI.addHSVPointLong(x, h, s, v, 0.5, 0.0);\n\n  //----------------------------------------------------------------------------\n  // Add a point defined in HSV\n  publicAPI.addHSVPointLong = function (x, h, s, v) {\n    let midpoint = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.5;\n    let sharpness = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0.0;\n    const rgb = [];\n    const hsv = [h, s, v];\n    hsv2rgb(hsv, rgb);\n    return publicAPI.addRGBPoint(x, rgb[0], rgb[1], rgb[2], midpoint, sharpness);\n  };\n\n  //----------------------------------------------------------------------------\n  // Set nodes directly\n  publicAPI.setNodes = nodes => {\n    if (model.nodes !== nodes) {\n      const before = JSON.stringify(model.nodes);\n      model.nodes = nodes;\n      const after = JSON.stringify(model.nodes);\n      if (publicAPI.sortAndUpdateRange() || before !== after) {\n        publicAPI.modified();\n        return true;\n      }\n    }\n    return false;\n  };\n\n  //----------------------------------------------------------------------------\n  // Sort the vector in increasing order, then fill in\n  // the Range\n  publicAPI.sortAndUpdateRange = () => {\n    const before = JSON.stringify(model.nodes);\n    model.nodes.sort((a, b) => a.x - b.x);\n    const after = JSON.stringify(model.nodes);\n    const modifiedInvoked = publicAPI.updateRange();\n    // If range is updated, Modified() has been called, don't call it again.\n    if (!modifiedInvoked && before !== after) {\n      publicAPI.modified();\n      return true;\n    }\n    return modifiedInvoked;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.updateRange = () => {\n    const oldRange = [2];\n    oldRange[0] = model.mappingRange[0];\n    oldRange[1] = model.mappingRange[1];\n    const size = model.nodes.length;\n    if (size) {\n      model.mappingRange[0] = model.nodes[0].x;\n      model.mappingRange[1] = model.nodes[size - 1].x;\n    } else {\n      model.mappingRange[0] = 0;\n      model.mappingRange[1] = 0;\n    }\n\n    // If the range is the same, then no need to call Modified()\n    if (oldRange[0] === model.mappingRange[0] && oldRange[1] === model.mappingRange[1]) {\n      return false;\n    }\n    publicAPI.modified();\n    return true;\n  };\n\n  //----------------------------------------------------------------------------\n  // Remove a point\n  publicAPI.removePoint = x => {\n    // First find the node since we need to know its\n    // index as our return value\n    let i = 0;\n    for (; i < model.nodes.length; i++) {\n      if (model.nodes[i].x === x) {\n        break;\n      }\n    }\n    const retVal = i;\n\n    // If the node doesn't exist, we return -1\n    if (i >= model.nodes.length) {\n      return -1;\n    }\n\n    // If the first or last point has been removed, then we update the range\n    // No need to sort here as the order of points hasn't changed.\n    let modifiedInvoked = false;\n    model.nodes.splice(i, 1);\n    if (i === 0 || i === model.nodes.length) {\n      modifiedInvoked = publicAPI.updateRange();\n    }\n    if (!modifiedInvoked) {\n      publicAPI.modified();\n    }\n    return retVal;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.movePoint = (oldX, newX) => {\n    if (oldX === newX) {\n      // Nothing to do.\n      return;\n    }\n    publicAPI.removePoint(newX);\n    for (let i = 0; i < model.nodes.length; i++) {\n      if (model.nodes[i].x === oldX) {\n        model.nodes[i].x = newX;\n        publicAPI.sortAndUpdateRange();\n        break;\n      }\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  // Remove all points\n  publicAPI.removeAllPoints = () => {\n    model.nodes = [];\n    publicAPI.sortAndUpdateRange();\n  };\n\n  //----------------------------------------------------------------------------\n  // Add a line defined in RGB\n  publicAPI.addRGBSegment = (x1, r1, g1, b1, x2, r2, g2, b2) => {\n    // First, find all points in this range and remove them\n    publicAPI.sortAndUpdateRange();\n    for (let i = 0; i < model.nodes.length;) {\n      if (model.nodes[i].x >= x1 && model.nodes[i].x <= x2) {\n        model.nodes.splice(i, 1);\n      } else {\n        i++;\n      }\n    }\n\n    // Now add the points\n    publicAPI.addRGBPointLong(x1, r1, g1, b1, 0.5, 0.0);\n    publicAPI.addRGBPointLong(x2, r2, g2, b2, 0.5, 0.0);\n    publicAPI.modified();\n  };\n\n  //----------------------------------------------------------------------------\n  // Add a line defined in HSV\n  publicAPI.addHSVSegment = (x1, h1, s1, v1, x2, h2, s2, v2) => {\n    const hsv1 = [h1, s1, v1];\n    const hsv2 = [h2, s2, v2];\n    const rgb1 = [];\n    const rgb2 = [];\n    hsv2rgb(hsv1, rgb1);\n    hsv2rgb(hsv2, rgb2);\n    publicAPI.addRGBSegment(x1, rgb1[0], rgb1[1], rgb1[2], x2, rgb2[0], rgb2[1], rgb2[2]);\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns the RGBA color evaluated at the specified location\n  publicAPI.mapValue = x => {\n    const rgb = [];\n    publicAPI.getColor(x, rgb);\n    return [Math.floor(255.0 * rgb[0] + 0.5), Math.floor(255.0 * rgb[1] + 0.5), Math.floor(255.0 * rgb[2] + 0.5), 255];\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns the RGB color evaluated at the specified location\n  publicAPI.getColor = (x, rgb) => {\n    if (model.indexedLookup) {\n      const numNodes = publicAPI.getSize();\n      // todo\n      const idx = publicAPI.getAnnotatedValueIndexInternal(x);\n      if (idx < 0 || numNodes === 0) {\n        const nanColor = publicAPI.getNanColorByReference();\n        rgb[0] = nanColor[0];\n        rgb[1] = nanColor[1];\n        rgb[2] = nanColor[2];\n      } else {\n        const nodeVal = [];\n        publicAPI.getNodeValue(idx % numNodes, nodeVal);\n        // nodeVal[0] is the x value. nodeVal[1...3] is rgb.\n        rgb[0] = nodeVal[1];\n        rgb[1] = nodeVal[2];\n        rgb[2] = nodeVal[3];\n      }\n      return;\n    }\n    publicAPI.getTable(x, x, 1, rgb);\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns the red color evaluated at the specified location\n  publicAPI.getRedValue = x => {\n    const rgb = [];\n    publicAPI.getColor(x, rgb);\n    return rgb[0];\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns the green color evaluated at the specified location\n  publicAPI.getGreenValue = x => {\n    const rgb = [];\n    publicAPI.getColor(x, rgb);\n    return rgb[1];\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns the blue color evaluated at the specified location\n  publicAPI.getBlueValue = x => {\n    const rgb = [];\n    publicAPI.getColor(x, rgb);\n    return rgb[2];\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns a table of RGB colors at regular intervals along the function\n  publicAPI.getTable = (xStart_, xEnd_, size, table) => {\n    // To handle BigInt limitation\n    const xStart = Number(xStart_);\n    const xEnd = Number(xEnd_);\n\n    // Special case: If either the start or end is a NaN, then all any\n    // interpolation done on them is also a NaN.  Therefore, fill the table with\n    // the NaN color.\n    if (isNan(xStart) || isNan(xEnd)) {\n      for (let i = 0; i < size; i++) {\n        table[i * 3 + 0] = model.nanColor[0];\n        table[i * 3 + 1] = model.nanColor[1];\n        table[i * 3 + 2] = model.nanColor[2];\n      }\n      return;\n    }\n    let idx = 0;\n    const numNodes = model.nodes.length;\n\n    // Need to keep track of the last value so that\n    // we can fill in table locations past this with\n    // this value if Clamping is On.\n    let lastR = 0.0;\n    let lastG = 0.0;\n    let lastB = 0.0;\n    if (numNodes !== 0) {\n      lastR = model.nodes[numNodes - 1].r;\n      lastG = model.nodes[numNodes - 1].g;\n      lastB = model.nodes[numNodes - 1].b;\n    }\n    let x = 0.0;\n    let x1 = 0.0;\n    let x2 = 0.0;\n    const rgb1 = [0.0, 0.0, 0.0];\n    const rgb2 = [0.0, 0.0, 0.0];\n    let midpoint = 0.0;\n    let sharpness = 0.0;\n    const tmpVec = [];\n\n    // If the scale is logarithmic, make sure the range is valid.\n    let usingLogScale = model.scale === Scale.LOG10;\n    if (usingLogScale) {\n      // Note: This requires range[0] <= range[1].\n      usingLogScale = model.mappingRange[0] > 0.0;\n    }\n    let logStart = 0.0;\n    let logEnd = 0.0;\n    let logX = 0.0;\n    if (usingLogScale) {\n      logStart = Math.log10(xStart);\n      logEnd = Math.log10(xEnd);\n    }\n\n    // For each table entry\n    for (let i = 0; i < size; i++) {\n      // Find our location in the table\n      const tidx = 3 * i;\n\n      // Find our X location. If we are taking only 1 sample, make\n      // it halfway between start and end (usually start and end will\n      // be the same in this case)\n      if (size > 1) {\n        if (usingLogScale) {\n          logX = logStart + i / (size - 1.0) * (logEnd - logStart);\n          x = 10.0 ** logX;\n        } else {\n          x = xStart + i / (size - 1.0) * (xEnd - xStart);\n        }\n      } else if (usingLogScale) {\n        logX = 0.5 * (logStart + logEnd);\n        x = 10.0 ** logX;\n      } else {\n        x = 0.5 * (xStart + xEnd);\n      }\n\n      // Linearly map x from mappingRange to [0, numberOfValues-1],\n      // discretize (round down to the closest integer),\n      // then map back to mappingRange\n      if (model.discretize) {\n        const range = model.mappingRange;\n        if (x >= range[0] && x <= range[1]) {\n          const numberOfValues = model.numberOfValues;\n          const deltaRange = range[1] - range[0];\n          if (numberOfValues <= 1) {\n            x = range[0] + deltaRange / 2.0;\n          } else {\n            // normalize x\n            const xn = (x - range[0]) / deltaRange;\n            // discretize\n            const discretizeIndex = floor(numberOfValues * xn);\n            // get discretized x\n            x = range[0] + discretizeIndex / (numberOfValues - 1) * deltaRange;\n          }\n        }\n      }\n\n      // Do we need to move to the next node?\n      while (idx < numNodes && x > model.nodes[idx].x) {\n        idx++;\n        // If we are at a valid point index, fill in\n        // the value at this node, and the one before (the\n        // two that surround our current sample location)\n        // idx cannot be 0 since we just incremented it.\n        if (idx < numNodes) {\n          x1 = model.nodes[idx - 1].x;\n          x2 = model.nodes[idx].x;\n          if (usingLogScale) {\n            x1 = Math.log10(x1);\n            x2 = Math.log10(x2);\n          }\n          rgb1[0] = model.nodes[idx - 1].r;\n          rgb2[0] = model.nodes[idx].r;\n          rgb1[1] = model.nodes[idx - 1].g;\n          rgb2[1] = model.nodes[idx].g;\n          rgb1[2] = model.nodes[idx - 1].b;\n          rgb2[2] = model.nodes[idx].b;\n\n          // We only need the previous midpoint and sharpness\n          // since these control this region\n          midpoint = model.nodes[idx - 1].midpoint;\n          sharpness = model.nodes[idx - 1].sharpness;\n\n          // Move midpoint away from extreme ends of range to avoid\n          // degenerate math\n          if (midpoint < 0.00001) {\n            midpoint = 0.00001;\n          }\n          if (midpoint > 0.99999) {\n            midpoint = 0.99999;\n          }\n        }\n      }\n\n      // Are we at or past the end? If so, just use the last value\n      if (x > model.mappingRange[1]) {\n        table[tidx] = 0.0;\n        table[tidx + 1] = 0.0;\n        table[tidx + 2] = 0.0;\n        if (model.clamping) {\n          if (publicAPI.getUseAboveRangeColor()) {\n            table[tidx] = model.aboveRangeColor[0];\n            table[tidx + 1] = model.aboveRangeColor[1];\n            table[tidx + 2] = model.aboveRangeColor[2];\n          } else {\n            table[tidx] = lastR;\n            table[tidx + 1] = lastG;\n            table[tidx + 2] = lastB;\n          }\n        }\n      } else if (x < model.mappingRange[0] || isInf(x) && x < 0) {\n        // we are before the first node? If so, duplicate this node's values.\n        // We have to deal with -inf here\n        table[tidx] = 0.0;\n        table[tidx + 1] = 0.0;\n        table[tidx + 2] = 0.0;\n        if (model.clamping) {\n          if (publicAPI.getUseBelowRangeColor()) {\n            table[tidx] = model.belowRangeColor[0];\n            table[tidx + 1] = model.belowRangeColor[1];\n            table[tidx + 2] = model.belowRangeColor[2];\n          } else if (numNodes > 0) {\n            table[tidx] = model.nodes[0].r;\n            table[tidx + 1] = model.nodes[0].g;\n            table[tidx + 2] = model.nodes[0].b;\n          }\n        }\n      } else if (idx === 0 && (Math.abs(x - xStart) < 1e-6 || model.discretize)) {\n        if (numNodes > 0) {\n          table[tidx] = model.nodes[0].r;\n          table[tidx + 1] = model.nodes[0].g;\n          table[tidx + 2] = model.nodes[0].b;\n        } else {\n          table[tidx] = 0.0;\n          table[tidx + 1] = 0.0;\n          table[tidx + 2] = 0.0;\n        }\n      } else {\n        // OK, we are between two nodes - interpolate\n        // Our first attempt at a normalized location [0,1] -\n        // we will be modifying this based on midpoint and\n        // sharpness to get the curve shape we want and to have\n        // it pass through (y1+y2)/2 at the midpoint.\n        let s = 0.0;\n        if (usingLogScale) {\n          s = (logX - x1) / (x2 - x1);\n        } else {\n          s = (x - x1) / (x2 - x1);\n        }\n\n        // Readjust based on the midpoint - linear adjustment\n        if (s < midpoint) {\n          s = 0.5 * s / midpoint;\n        } else {\n          s = 0.5 + 0.5 * (s - midpoint) / (1.0 - midpoint);\n        }\n\n        // override for sharpness > 0.99\n        // In this case we just want piecewise constant\n        if (sharpness > 0.99) {\n          // Use the first value since we are below the midpoint\n          if (s < 0.5) {\n            table[tidx] = rgb1[0];\n            table[tidx + 1] = rgb1[1];\n            table[tidx + 2] = rgb1[2];\n            continue;\n          } else {\n            // Use the second value at or above the midpoint\n            table[tidx] = rgb2[0];\n            table[tidx + 1] = rgb2[1];\n            table[tidx + 2] = rgb2[2];\n            continue;\n          }\n        }\n\n        // Override for sharpness < 0.01\n        // In this case we want piecewise linear\n        if (sharpness < 0.01) {\n          // Simple linear interpolation\n          if (model.colorSpace === ColorSpace.RGB) {\n            table[tidx] = (1 - s) * rgb1[0] + s * rgb2[0];\n            table[tidx + 1] = (1 - s) * rgb1[1] + s * rgb2[1];\n            table[tidx + 2] = (1 - s) * rgb1[2] + s * rgb2[2];\n          } else if (model.colorSpace === ColorSpace.HSV) {\n            const hsv1 = [];\n            const hsv2 = [];\n            rgb2hsv(rgb1, hsv1);\n            rgb2hsv(rgb2, hsv2);\n            if (model.hSVWrap && (hsv1[0] - hsv2[0] > 0.5 || hsv2[0] - hsv1[0] > 0.5)) {\n              if (hsv1[0] > hsv2[0]) {\n                hsv1[0] -= 1.0;\n              } else {\n                hsv2[0] -= 1.0;\n              }\n            }\n            const hsvTmp = [];\n            hsvTmp[0] = (1.0 - s) * hsv1[0] + s * hsv2[0];\n            if (hsvTmp[0] < 0.0) {\n              hsvTmp[0] += 1.0;\n            }\n            hsvTmp[1] = (1.0 - s) * hsv1[1] + s * hsv2[1];\n            hsvTmp[2] = (1.0 - s) * hsv1[2] + s * hsv2[2];\n\n            // Now convert this back to RGB\n            hsv2rgb(hsvTmp, tmpVec);\n            table[tidx] = tmpVec[0];\n            table[tidx + 1] = tmpVec[1];\n            table[tidx + 2] = tmpVec[2];\n          } else if (model.colorSpace === ColorSpace.LAB) {\n            const lab1 = [];\n            const lab2 = [];\n            rgb2lab(rgb1, lab1);\n            rgb2lab(rgb2, lab2);\n            const labTmp = [];\n            labTmp[0] = (1 - s) * lab1[0] + s * lab2[0];\n            labTmp[1] = (1 - s) * lab1[1] + s * lab2[1];\n            labTmp[2] = (1 - s) * lab1[2] + s * lab2[2];\n\n            // Now convert back to RGB\n            lab2rgb(labTmp, tmpVec);\n            table[tidx] = tmpVec[0];\n            table[tidx + 1] = tmpVec[1];\n            table[tidx + 2] = tmpVec[2];\n          } else if (model.colorSpace === ColorSpace.DIVERGING) {\n            vtkColorTransferFunctionInterpolateDiverging(s, rgb1, rgb2, tmpVec);\n            table[tidx] = tmpVec[0];\n            table[tidx + 1] = tmpVec[1];\n            table[tidx + 2] = tmpVec[2];\n          } else {\n            vtkErrorMacro('ColorSpace set to invalid value.', model.colorSpace);\n          }\n          continue;\n        }\n\n        // We have a sharpness between [0.01, 0.99] - we will\n        // used a modified hermite curve interpolation where we\n        // derive the slope based on the sharpness, and we compress\n        // the curve non-linearly based on the sharpness\n\n        // First, we will adjust our position based on sharpness in\n        // order to make the curve sharper (closer to piecewise constant)\n        if (s < 0.5) {\n          s = 0.5 * (s * 2.0) ** (1.0 + 10.0 * sharpness);\n        } else if (s > 0.5) {\n          s = 1.0 - 0.5 * ((1.0 - s) * 2) ** (1 + 10.0 * sharpness);\n        }\n\n        // Compute some coefficients we will need for the hermite curve\n        const ss = s * s;\n        const sss = ss * s;\n        const h1 = 2.0 * sss - 3 * ss + 1;\n        const h2 = -2 * sss + 3 * ss;\n        const h3 = sss - 2 * ss + s;\n        const h4 = sss - ss;\n        let slope;\n        let t;\n        if (model.colorSpace === ColorSpace.RGB) {\n          for (let j = 0; j < 3; j++) {\n            // Use one slope for both end points\n            slope = rgb2[j] - rgb1[j];\n            t = (1.0 - sharpness) * slope;\n\n            // Compute the value\n            table[tidx + j] = h1 * rgb1[j] + h2 * rgb2[j] + h3 * t + h4 * t;\n          }\n        } else if (model.colorSpace === ColorSpace.HSV) {\n          const hsv1 = [];\n          const hsv2 = [];\n          rgb2hsv(rgb1, hsv1);\n          rgb2hsv(rgb2, hsv2);\n          if (model.hSVWrap && (hsv1[0] - hsv2[0] > 0.5 || hsv2[0] - hsv1[0] > 0.5)) {\n            if (hsv1[0] > hsv2[0]) {\n              hsv1[0] -= 1.0;\n            } else {\n              hsv2[0] -= 1.0;\n            }\n          }\n          const hsvTmp = [];\n          for (let j = 0; j < 3; j++) {\n            // Use one slope for both end points\n            slope = hsv2[j] - hsv1[j];\n            t = (1.0 - sharpness) * slope;\n\n            // Compute the value\n            hsvTmp[j] = h1 * hsv1[j] + h2 * hsv2[j] + h3 * t + h4 * t;\n            if (j === 0 && hsvTmp[j] < 0.0) {\n              hsvTmp[j] += 1.0;\n            }\n          }\n          // Now convert this back to RGB\n          hsv2rgb(hsvTmp, tmpVec);\n          table[tidx] = tmpVec[0];\n          table[tidx + 1] = tmpVec[1];\n          table[tidx + 2] = tmpVec[2];\n        } else if (model.colorSpace === ColorSpace.LAB) {\n          const lab1 = [];\n          const lab2 = [];\n          rgb2lab(rgb1, lab1);\n          rgb2lab(rgb2, lab2);\n          const labTmp = [];\n          for (let j = 0; j < 3; j++) {\n            // Use one slope for both end points\n            slope = lab2[j] - lab1[j];\n            t = (1.0 - sharpness) * slope;\n\n            // Compute the value\n            labTmp[j] = h1 * lab1[j] + h2 * lab2[j] + h3 * t + h4 * t;\n          }\n          // Now convert this back to RGB\n          lab2rgb(labTmp, tmpVec);\n          table[tidx] = tmpVec[0];\n          table[tidx + 1] = tmpVec[1];\n          table[tidx + 2] = tmpVec[2];\n        } else if (model.colorSpace === ColorSpace.DIVERGING) {\n          // I have not implemented proper interpolation by a hermite curve for\n          // the diverging color map, but I cannot think of a good use case for\n          // that anyway.\n          vtkColorTransferFunctionInterpolateDiverging(s, rgb1, rgb2, tmpVec);\n          table[tidx] = tmpVec[0];\n          table[tidx + 1] = tmpVec[1];\n          table[tidx + 2] = tmpVec[2];\n        } else {\n          vtkErrorMacro('ColorSpace set to invalid value.');\n        }\n\n        // Final error check to make sure we don't go outside [0,1]\n        for (let j = 0; j < 3; j++) {\n          table[tidx + j] = table[tidx + j] < 0.0 ? 0.0 : table[tidx + j];\n          table[tidx + j] = table[tidx + j] > 1.0 ? 1.0 : table[tidx + j];\n        }\n      }\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.getUint8Table = function (xStart, xEnd, size) {\n    let withAlpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    if (publicAPI.getMTime() <= model.buildTime && model.tableSize === size && model.tableWithAlpha !== withAlpha) {\n      return model.table;\n    }\n    if (model.nodes.length === 0) {\n      vtkErrorMacro('Attempting to lookup a value with no points in the function');\n      return model.table;\n    }\n    const nbChannels = withAlpha ? 4 : 3;\n    if (model.tableSize !== size || model.tableWithAlpha !== withAlpha) {\n      model.table = new Uint8Array(size * nbChannels);\n      model.tableSize = size;\n      model.tableWithAlpha = withAlpha;\n    }\n    const tmpTable = [];\n    publicAPI.getTable(xStart, xEnd, size, tmpTable);\n    for (let i = 0; i < size; i++) {\n      model.table[i * nbChannels + 0] = Math.floor(tmpTable[i * 3 + 0] * 255.0 + 0.5);\n      model.table[i * nbChannels + 1] = Math.floor(tmpTable[i * 3 + 1] * 255.0 + 0.5);\n      model.table[i * nbChannels + 2] = Math.floor(tmpTable[i * 3 + 2] * 255.0 + 0.5);\n      if (withAlpha) {\n        model.table[i * nbChannels + 3] = 255;\n      }\n    }\n    model.buildTime.modified();\n    return model.table;\n  };\n  publicAPI.buildFunctionFromArray = array => {\n    publicAPI.removeAllPoints();\n    const numComponents = array.getNumberOfComponents();\n    for (let i = 0; i < array.getNumberOfTuples(); i++) {\n      switch (numComponents) {\n        case 3:\n          {\n            model.nodes.push({\n              x: i,\n              r: array.getComponent(i, 0),\n              g: array.getComponent(i, 1),\n              b: array.getComponent(i, 2),\n              midpoint: 0.5,\n              sharpness: 0.0\n            });\n            break;\n          }\n        case 4:\n          {\n            model.nodes.push({\n              x: array.getComponent(i, 0),\n              r: array.getComponent(i, 1),\n              g: array.getComponent(i, 2),\n              b: array.getComponent(i, 3),\n              midpoint: 0.5,\n              sharpness: 0.0\n            });\n            break;\n          }\n        case 5:\n          {\n            model.nodes.push({\n              x: i,\n              r: array.getComponent(i, 0),\n              g: array.getComponent(i, 1),\n              b: array.getComponent(i, 2),\n              midpoint: array.getComponent(i, 4),\n              sharpness: array.getComponent(i, 5)\n            });\n            break;\n          }\n        case 6:\n          {\n            model.nodes.push({\n              x: array.getComponent(i, 0),\n              r: array.getComponent(i, 1),\n              g: array.getComponent(i, 2),\n              b: array.getComponent(i, 3),\n              midpoint: array.getComponent(i, 4),\n              sharpness: array.getComponent(i, 5)\n            });\n            break;\n          }\n      }\n    }\n    publicAPI.sortAndUpdateRange();\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.buildFunctionFromTable = (xStart, xEnd, size, table) => {\n    let inc = 0.0;\n    publicAPI.removeAllPoints();\n    if (size > 1) {\n      inc = (xEnd - xStart) / (size - 1.0);\n    }\n    for (let i = 0; i < size; i++) {\n      const node = {\n        x: xStart + inc * i,\n        r: table[i * 3],\n        g: table[i * 3 + 1],\n        b: table[i * 3 + 2],\n        sharpness: 0.0,\n        midpoint: 0.5\n      };\n      model.nodes.push(node);\n    }\n    publicAPI.sortAndUpdateRange();\n  };\n\n  //----------------------------------------------------------------------------\n  // For a specified index value, get the node parameters\n  publicAPI.getNodeValue = (index, val) => {\n    if (index < 0 || index >= model.nodes.length) {\n      vtkErrorMacro('Index out of range!');\n      return -1;\n    }\n    val[0] = model.nodes[index].x;\n    val[1] = model.nodes[index].r;\n    val[2] = model.nodes[index].g;\n    val[3] = model.nodes[index].b;\n    val[4] = model.nodes[index].midpoint;\n    val[5] = model.nodes[index].sharpness;\n    return 1;\n  };\n\n  //----------------------------------------------------------------------------\n  // For a specified index value, get the node parameters\n  publicAPI.setNodeValue = (index, val) => {\n    if (index < 0 || index >= model.nodes.length) {\n      vtkErrorMacro('Index out of range!');\n      return -1;\n    }\n    const oldX = model.nodes[index].x;\n    model.nodes[index].x = val[0];\n    model.nodes[index].r = val[1];\n    model.nodes[index].g = val[2];\n    model.nodes[index].b = val[3];\n    model.nodes[index].midpoint = val[4];\n    model.nodes[index].sharpness = val[5];\n    if (oldX !== val[0]) {\n      // The point has been moved, the order of points or the range might have\n      // been modified.\n      publicAPI.sortAndUpdateRange();\n      // No need to call Modified() here because SortAndUpdateRange() has done it\n      // already.\n    } else {\n      publicAPI.modified();\n    }\n    return 1;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.getNumberOfAvailableColors = () => {\n    if (model.indexedLookup && publicAPI.getSize()) {\n      return publicAPI.getSize();\n    }\n    if (model.tableSize) {\n      // Not sure if this is correct since it is only set if\n      // \"const unsigned char *::GetTable(double xStart, double xEnd,int size)\"\n      // has been called.\n      return model.tableSize;\n    }\n    const nNodes = model.nodes?.length ?? 0;\n    // The minimum is 4094 colors so that it fills in the 4096 texels texture in `mapScalarsToTexture`\n    return Math.max(4094, nNodes);\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.getIndexedColor = (idx, rgba) => {\n    const n = publicAPI.getSize();\n    if (n > 0 && idx >= 0) {\n      const nodeValue = [];\n      publicAPI.getNodeValue(idx % n, nodeValue);\n      for (let j = 0; j < 3; ++j) {\n        rgba[j] = nodeValue[j + 1];\n      }\n      rgba[3] = 1.0; // NodeColor is RGB-only.\n      return;\n    }\n    const nanColor = publicAPI.getNanColorByReference();\n    rgba[0] = nanColor[0];\n    rgba[1] = nanColor[1];\n    rgba[2] = nanColor[2];\n    rgba[3] = 1.0; // NanColor is RGB-only.\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.fillFromDataPointer = (nb, ptr) => {\n    if (nb <= 0 || !ptr) {\n      return;\n    }\n    publicAPI.removeAllPoints();\n    for (let i = 0; i < nb; i++) {\n      publicAPI.addRGBPoint(ptr[i * 4], ptr[i * 4 + 1], ptr[i * 4 + 2], ptr[i * 4 + 3]);\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.setMappingRange = (min, max) => {\n    const range = [min, max];\n    const originalRange = publicAPI.getRange();\n    if (originalRange[1] === range[1] && originalRange[0] === range[0]) {\n      return;\n    }\n    if (range[1] === range[0]) {\n      vtkErrorMacro('attempt to set zero width color range');\n      return;\n    }\n    const scale = (range[1] - range[0]) / (originalRange[1] - originalRange[0]);\n    const shift = range[0] - originalRange[0] * scale;\n    for (let i = 0; i < model.nodes.length; ++i) {\n      model.nodes[i].x = model.nodes[i].x * scale + shift;\n    }\n    model.mappingRange[0] = range[0];\n    model.mappingRange[1] = range[1];\n    publicAPI.modified();\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.adjustRange = range => {\n    const functionRange = publicAPI.getRange();\n\n    // Make sure we have points at each end of the range\n    const rgb = [];\n    if (functionRange[0] < range[0]) {\n      publicAPI.getColor(range[0], rgb);\n      publicAPI.addRGBPoint(range[0], rgb[0], rgb[1], rgb[2]);\n    } else {\n      publicAPI.getColor(functionRange[0], rgb);\n      publicAPI.addRGBPoint(range[0], rgb[0], rgb[1], rgb[2]);\n    }\n    if (functionRange[1] > range[1]) {\n      publicAPI.getColor(range[1], rgb);\n      publicAPI.addRGBPoint(range[1], rgb[0], rgb[1], rgb[2]);\n    } else {\n      publicAPI.getColor(functionRange[1], rgb);\n      publicAPI.addRGBPoint(range[1], rgb[0], rgb[1], rgb[2]);\n    }\n\n    // Remove all points out-of-range\n    publicAPI.sortAndUpdateRange();\n    for (let i = 0; i < model.nodes.length;) {\n      if (model.nodes[i].x >= range[0] && model.nodes[i].x <= range[1]) {\n        model.nodes.splice(i, 1);\n      } else {\n        ++i;\n      }\n    }\n    return 1;\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.estimateMinNumberOfSamples = (x1, x2) => {\n    const d = publicAPI.findMinimumXDistance();\n    return Math.ceil((x2 - x1) / d);\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.findMinimumXDistance = () => {\n    if (model.nodes.length < 2) {\n      return -1.0;\n    }\n    let distance = Number.MAX_VALUE;\n    for (let i = 0; i < model.nodes.length - 1; i++) {\n      const currentDist = model.nodes[i + 1].x - model.nodes[i].x;\n      if (currentDist < distance) {\n        distance = currentDist;\n      }\n    }\n    return distance;\n  };\n  publicAPI.mapScalarsThroughTable = (input, output, outFormat, inputOffset) => {\n    if (publicAPI.getSize() === 0) {\n      vtkDebugMacro('Transfer Function Has No Points!');\n      return;\n    }\n    if (model.indexedLookup) {\n      publicAPI.mapDataIndexed(input, output, outFormat, inputOffset);\n    } else {\n      publicAPI.mapData(input, output, outFormat, inputOffset);\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.mapData = (input, output, outFormat, inputOffset) => {\n    if (publicAPI.getSize() === 0) {\n      vtkWarningMacro('Transfer Function Has No Points!');\n      return;\n    }\n    const alpha = Math.floor(publicAPI.getAlpha() * 255.0 + 0.5);\n    const length = input.getNumberOfTuples();\n    const inIncr = input.getNumberOfComponents();\n    const outputV = output.getData();\n    const inputV = input.getData();\n    const rgb = [];\n    if (outFormat === ScalarMappingTarget.RGBA) {\n      for (let i = 0; i < length; i++) {\n        const x = inputV[i * inIncr + inputOffset];\n        publicAPI.getColor(x, rgb);\n        outputV[i * 4] = Math.floor(rgb[0] * 255.0 + 0.5);\n        outputV[i * 4 + 1] = Math.floor(rgb[1] * 255.0 + 0.5);\n        outputV[i * 4 + 2] = Math.floor(rgb[2] * 255.0 + 0.5);\n        outputV[i * 4 + 3] = alpha;\n      }\n    }\n    if (outFormat === ScalarMappingTarget.RGB) {\n      for (let i = 0; i < length; i++) {\n        const x = inputV[i * inIncr + inputOffset];\n        publicAPI.getColor(x, rgb);\n        outputV[i * 3] = Math.floor(rgb[0] * 255.0 + 0.5);\n        outputV[i * 3 + 1] = Math.floor(rgb[1] * 255.0 + 0.5);\n        outputV[i * 3 + 2] = Math.floor(rgb[2] * 255.0 + 0.5);\n      }\n    }\n    if (outFormat === ScalarMappingTarget.LUMINANCE) {\n      for (let i = 0; i < length; i++) {\n        const x = inputV[i * inIncr + inputOffset];\n        publicAPI.getColor(x, rgb);\n        outputV[i] = Math.floor(rgb[0] * 76.5 + rgb[1] * 150.45 + rgb[2] * 28.05 + 0.5);\n      }\n    }\n    if (outFormat === ScalarMappingTarget.LUMINANCE_ALPHA) {\n      for (let i = 0; i < length; i++) {\n        const x = inputV[i * inIncr + inputOffset];\n        publicAPI.getColor(x, rgb);\n        outputV[i * 2] = Math.floor(rgb[0] * 76.5 + rgb[1] * 150.45 + rgb[2] * 28.05 + 0.5);\n        outputV[i * 2 + 1] = alpha;\n      }\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.applyColorMap = colorMap => {\n    const oldColorSpace = JSON.stringify(model.colorSpace);\n    if (colorMap.ColorSpace) {\n      model.colorSpace = ColorSpace[colorMap.ColorSpace.toUpperCase()];\n      if (model.colorSpace === undefined) {\n        vtkErrorMacro(`ColorSpace ${colorMap.ColorSpace} not supported, using RGB instead`);\n        model.colorSpace = ColorSpace.RGB;\n      }\n    }\n    let isModified = oldColorSpace !== JSON.stringify(model.colorSpace);\n    const oldNanColor = isModified || JSON.stringify(model.nanColor);\n    if (colorMap.NanColor) {\n      model.nanColor = [].concat(colorMap.NanColor);\n      while (model.nanColor.length < 4) {\n        model.nanColor.push(1.0);\n      }\n    }\n    isModified = isModified || oldNanColor !== JSON.stringify(model.nanColor);\n    const oldNodes = isModified || JSON.stringify(model.nodes);\n    if (colorMap.RGBPoints) {\n      const size = colorMap.RGBPoints.length;\n      model.nodes = [];\n      const midpoint = 0.5;\n      const sharpness = 0.0;\n      for (let i = 0; i < size; i += 4) {\n        model.nodes.push({\n          x: colorMap.RGBPoints[i],\n          r: colorMap.RGBPoints[i + 1],\n          g: colorMap.RGBPoints[i + 2],\n          b: colorMap.RGBPoints[i + 3],\n          midpoint,\n          sharpness\n        });\n      }\n    }\n    const modifiedInvoked = publicAPI.sortAndUpdateRange();\n    const callModified = !modifiedInvoked && (isModified || oldNodes !== JSON.stringify(model.nodes));\n    if (callModified) publicAPI.modified();\n    return modifiedInvoked || callModified;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  clamping: true,\n  colorSpace: ColorSpace.RGB,\n  hSVWrap: true,\n  scale: Scale.LINEAR,\n  nanColor: null,\n  belowRangeColor: null,\n  aboveRangeColor: null,\n  useAboveRangeColor: false,\n  useBelowRangeColor: false,\n  allowDuplicateScalars: false,\n  table: null,\n  tableSize: 0,\n  buildTime: null,\n  nodes: null,\n  discretize: false,\n  numberOfValues: 256\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkScalarsToColors.extend(publicAPI, model, initialValues);\n\n  // Internal objects initialization\n  model.table = [];\n  model.nodes = [];\n  model.nanColor = [0.5, 0.0, 0.0, 1.0];\n  model.belowRangeColor = [0.0, 0.0, 0.0, 1.0];\n  model.aboveRangeColor = [1.0, 1.0, 1.0, 1.0];\n  model.buildTime = {};\n  macro.obj(model.buildTime);\n\n  // Create get-only macros\n  macro.get(publicAPI, model, ['buildTime', 'mappingRange']);\n\n  // Create get-set macros\n  macro.setGet(publicAPI, model, ['useAboveRangeColor', 'useBelowRangeColor', 'discretize', 'numberOfValues', {\n    type: 'enum',\n    name: 'colorSpace',\n    enum: ColorSpace\n  }, {\n    type: 'enum',\n    name: 'scale',\n    enum: Scale\n  }]);\n  macro.setArray(publicAPI, model, ['nanColor', 'belowRangeColor', 'aboveRangeColor'], 4);\n\n  // Create get macros for array\n  macro.getArray(publicAPI, model, ['nanColor', 'belowRangeColor', 'aboveRangeColor']);\n\n  // For more macro methods, see \"Sources/macros.js\"\n\n  // Object specific methods\n  vtkColorTransferFunction(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkColorTransferFunction');\n\n// ----------------------------------------------------------------------------\n\nvar vtkColorTransferFunction$1 = {\n  newInstance,\n  extend,\n  ...Constants\n};\n\nexport { vtkColorTransferFunction$1 as default, extend, newInstance };\n","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import ascending from \"./ascending.js\";\nimport descending from \"./descending.js\";\n\nexport default function bisector(f) {\n  let compare1, compare2, delta;\n\n  // If an accessor is specified, promote it to a comparator. In this case we\n  // can test whether the search value is (self-) comparable. We can’t do this\n  // for a comparator (except for specific, known comparators) because we can’t\n  // tell if the comparator is symmetric, and an asymmetric comparator can’t be\n  // used to test whether a single value is comparable.\n  if (f.length !== 2) {\n    compare1 = ascending;\n    compare2 = (d, x) => ascending(f(d), x);\n    delta = (d, x) => f(d) - x;\n  } else {\n    compare1 = f === ascending || f === descending ? f : zero;\n    compare2 = f;\n    delta = f;\n  }\n\n  function left(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function right(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) <= 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function center(a, x, lo = 0, hi = a.length) {\n    const i = left(a, x, lo, hi - 1);\n    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n  }\n\n  return {left, center, right};\n}\n\nfunction zero() {\n  return 0;\n}\n","import transpose from \"./transpose.js\";\n\nexport default function zip() {\n  return transpose(arguments);\n}\n","export default x => () => x;\n","export default function(a, b) {\n  return a = +a, b = +b, function(t) {\n    return a * (1 - t) + b * t;\n  };\n}\n","export default function(interpolator, n) {\n  var samples = new Array(n);\n  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));\n  return samples;\n}\n","export default function(a, b) {\n  return a = +a, b = +b, function(t) {\n    return Math.round(a * (1 - t) + b * t);\n  };\n}\n"],"names":["enabledElement","invalidated","image","canvas","start","stats","lastGetPixelDataTime","lastStoredPixelDataToCanvasImageDataTime","lastPutImageDataTime","lastRenderTime","lastLutGenerateTime","render","viewport","colormap","color","renderTimeInMs","invalid","needsRedraw","scale","transform","displayedArea","translate","width","height","angle","rotation","rotate","Math","PI","widthScale","heightScale","brhc","x","tlhc","y","presentationSizeMode","rowPixelSpacing","columnPixelSpacing","verticalScale","horizontalScale","min","translation","undefined","hflip","vflip","modality","Error","scaleFactor","voi","isPreScaled","windowWidth","windowCenter","Array","isArray","invert","pixelReplication","modalityLUT","voiLUT","columns","rows","GenerateImageType","DEFAULT_SETTINGS","Symbol","RUNTIME_SETTINGS","OBJECT_SETTINGS_MAP","DICTIONARY","Settings","constructor","base","dictionary","Object","create","seal","defineProperty","this","value","set","key","get","unset","name","endsWith","deleteCount","namespace","slice","deleteAll","length","prototype","hasOwnProperty","call","startsWith","forEach","callback","iterate","extend","import","root","isPlainObject","keys","dump","context","deepSet","assert","subject","getRuntimeSettings","getDefaultSettings","subfield","defaultSettings","settingObj","setting","split","runtimeSettings","getObjectSettings","from","settings","objectSettingsMap","WeakMap","extendRuntimeSettings","references","last","current","previous","indexOf","isValidKey","prefix","record","failCount","has","add","field","delete","setAll","WeakSet","getPrototypeOf","separator","subKey","subContext","subContextValue","imageLoaders","unknownImageLoader","loadImageFromImageLoader","imageId","options","cachedImageLoadObject","getImageLoadObject","handleImageLoadPromise","promise","scheme","loader","imageLoadObject","imagePromise","Promise","resolve","then","voxelManager","numberOfComponents","createImageVoxelManager","scalarData","getPixelData","getScalarData","imageFrame","pixelData","ensureVoxelManager","IMAGE_LOADED","catch","error","errorDetails","IMAGE_LOAD_FAILED","loadImage","priority","requestType","loadAndCacheImage","putImageLoadObject","loadAndCacheImages","imageIds","map","createAndCacheDerivedImage","referencedImageId","skipCreateBuffer","onCacheAdd","voxelRepresentation","imagePlaneModule","TypedArrayConstructor","targetBuffer","type","imageScalarData","derivedImageId","referencedImagePlaneMetadata","metadata","referencedImageGeneralSeriesMetadata","instanceNumber","imagePixelModule","bitsAllocated","bitsStored","highBit","samplesPerPixel","pixelRepresentation","localImage","createAndCacheLocalImage","dimensions","spacing","origin","imagePositionPatient","direction","imageOrientationPatient","frameOfReferenceUID","putImageSync","createAndCacheDerivedImages","referencedImageIds","derivedImageIds","index","newOptions","getDerivedImageId","push","rowCosines","columnCosines","pixelSpacing","scalarDataToUse","Uint8Array","Float32Array","Uint16Array","Int16Array","photometricInterpretation","id","RLE","createRLEImageVoxelManager","minPixelValue","maxPixelValue","i","intercept","dataType","slope","getCanvas","rgba","FrameOfReferenceUID","sizeInBytes","byteLength","cancelLoadImage","filterRequests","additionalDetails","cancelFn","cancelLoadImages","cancelLoadAll","requestPool","getRequestPool","requests","requestDetails","pop","volumeId","loadObject","getVolumeLoadObject","cancel","clearRequestStack","registerImageLoader","imageLoader","registerUnknownImageLoader","oldImageLoader","unregisterAllImageLoaders","createAndCacheDerivedLabelmapImages","createAndCacheDerivedLabelmapImage","FrameRange","frameRangeExtractor","imageIdToFrames","match","range","it","Number","imageIdToFrameEnd","imageIdToFrameStart","framesToString","String","framesToImageId","newRangeString","replace","PointsManager","configuration","_dimensions","_length","_byteSize","growSize","initialSize","itemLength","array","ArrayBuffer","data","func","getPoint","dimensionLength","offset","subarray","getPointArray","grow","additionalSize","newSize","newArray","newData","reverse","midLength","floor","indexStart","indexEnd","dimension","valueStart","getTypedArray","point","f","mapData","points","p","toXYZ","xyz","z","fromXYZ","create3","subselect","count","selected","max","newPoints","create2","ProgressiveIterator","as","iterator","v","e","reject","reason","done","nextValue","waiting","rejectReason","getRecent","asyncIterator","errorCallback","console","warn","generate","processFunction","bind","nextPromise","donePromise","getNextPromise","getDonePromise","ADJACENT_ALL","ADJACENT_SINGLE_PLANE","ADJACENT_IN","ADJACENT_OUT","RLEVoxelMap","copyMap","destination","source","row","structuredClone","depth","Map","jMultiple","kMultiple","numComps","pixelDataConstructor","updateScalarData","fill","rle","end","j","getRLE","defaultValue","getRun","k","runIndex","rleIndex","findIndex","rle1","rle0","oldValue","rleInsert","isAfter","insertIndex","rlePrev","rleNext","splice","nextnext","ArrayType","Uint8ClampedArray","frameSize","toIJK","toIndex","newRle","iEnd","rowModified","baseIndex","rowToUse","forEachRow","clear","rowOffset","comp","floodFill","stack","replaceValue","flood","sourceValue","sum","planar","diagonals","singlePlane","childOptions","top","adjacents","findAdjacents","filter","adjacent","fillFrom","getter","boundsIJK","item","adjacentsDelta","leftRle","rightRle","delta","delta1","delta2","testJ","testK","testRle","newAdjacentDelta","isImageActor","actorEntry","actorIsA","actorType","actorToCheck","actor","isA","applyPreset","preset","colorTransferArray","colorTransfer","parseFloat","shiftRange","Infinity","center","getShiftRange","cfun","normColorTransferValuePoints","r","g","b","rescaled","removeAllPoints","addRGBPoint","applyPointsToRGBFunction","getProperty","setRGBTransferFunction","scalarOpacityArray","scalarOpacity","ofun","normPoints","opacity","pwf","addPoint","applyPointsToPiecewiseFunction","property","setScalarOpacity","gradientMinValue","gradientMinOpacity","gradientMaxValue","gradientMaxOpacity","gradientOpacity","setUseGradientOpacity","setGradientOpacityMinimumValue","setGradientOpacityMinimumOpacity","setGradientOpacityMaximumValue","setGradientOpacityMaximumOpacity","interpolation","setInterpolationTypeToFastLinear","setShade","shade","ambient","diffuse","specular","specularPower","setAmbient","setDiffuse","setSpecular","setSpecularPower","renderingEngineAndViewportIds","renderingEnginesArray","renderingEngine","viewports","viewportIds","getRenderingEngineAndViewportsContainingVolume","hasBeenDestroyed","renderViewports","getImagePlaneModule","newImagePlaneModule","MetadataModules","IMAGE_PLANE","buildMetadata","voiLUTFunction","imageIdScalingFactor","calibration","CALIBRATION","voiLUTFunctionEnum","values","VOILUTFunctionType","includes","LINEAR","getValidVOILUTFunction","scalingFactor","calculateSpacingBetweenImageIds","referenceImagePositionPatient","rowCosineVec","colCosineVec","scanAxisNormal","refIppVec","getDistance","positionVector","ippVec","prefetchedImageIds","metadataForMiddleImage","middleIppVec","distanceBetweenFirstAndMiddleImages","abs","distanceImagePairs","distance","sort","a","numImages","sliceThickness","spacingBetweenSlices","strictZSpacingForVolumeViewport","rendering","isNaN","debug","clamp","_colormaps","registerColormap","Name","getColormap","getColormapNames","findMatchingColormap","rgbPoints","colormapsVTK","rgbPresetNames","presetName","getPresetByName","colormapsCS3D","colormapName","matchedColormap","concat","find","RGBPoints","presetRGBPoints","opacityPoints","getScalarOpacity","getDataPointer","setColorMapTransferFunctionForVolumeActor","volumeInfo","volumeActor","threshold","colorRange","getMapper","setSampleDistance","presetToUse","applyColorMap","setMappingRange","updateOpacityWithThreshold","updateOpacity","newOpacity","getThresholdValue","updateThreshold","newThreshold","getMaxOpacity","meta","getInputData","getRange","thresholdValue","opacityFunction","dataArray","y1","x2","y2","maxOpacity","createLinearRGBTransferFunction","voiRange","lower","upper","createSigmoidRGBTransferFunction","approximationNodes","table","_","flatMap","buildFunctionFromArray","decimate","list","interleave","interleaveIndices","deepClone","obj","clonedObj","fnv1aHash","str","hash","charCodeAt","toString","log","coreLog","getLogger","getClosestImageId","imageVolume","worldPos","viewPlaneNormal","ignoreSpacing","kVector","dotProduct","EPSILON","halfSpacingInNormalDirection","closestImageId","minDistance","dir","getImageDataMetadata","xSpacing","ySpacing","xVoxels","yVoxels","zSpacing","_getNumCompsFromPhotometricInterpretation","numVoxels","camera","getCamera","spacingInNormalDirection","focalPoint","getActors","referencedId","uid","sliceRange","numberOfSlices","round","imageIndex","getScalingParameters","modalityLutModule","generalSeriesModule","scalingParameters","rescaleSlope","rescaleIntercept","scalingModules","suvbw","suvbsa","suvlbm","doseGridScaling","DoseGridScaling","doseSummation","DoseSummation","doseType","DoseType","doseUnit","DoseUnit","SMALL_EPSILON","isOne","isUnit","off","isOrthonormal","getSliceRange","imageData","corners","getDirection","dx","dy","dz","getDimensions","indexToWorld","buildFromDegree","identity","rotateFromDirections","pt","apply","transformedFocalPoint","currentSlice","minX","maxX","getSpacingInNormalDirection","iVector","jVector","dotProducts","projectedSpacing","EPSILON_PART","isPrimaryVolume","volume","getVolumeLoaderSchemes","starts","substring","getTargetVolumeAndSpacingInNormalDir","targetId","useSlabThickness","volumeActors","actorUID","imageVolumes","va","getVolume","iv","targetVolumeId","imageVolumeIndex","getSpacingInNormal","smallest","hasPrimaryVolume","slabThickness","getProperties","renderingEngines","targetViewports","filteredViewports","getVolumeViewports","vp","hasVolumeId","getVoiFromSigmoidRGBTransferFunction","cfunRange","getTable","cfunDomain","logy1","x1","logy2","ww","wc","getVolumeActorCorners","bounds","extentToBounds","getExtent","getVolumeId","getActor","numScrollSteps","floatingStepNumber","currentStepIndex","sliceRangeInfo","hasFloatScalingParameters","some","isInteger","hasNaNValues","input","imageIdToURI","colonIndex","retrieveConfigurationState","IMAGE_RETRIEVE_CONFIGURATION","imageRetrieveMetadataProvider","payload","clone","restore","state","queries","query","addProvider","EventListenerPhases","TargetEventListeners","target","_eventListeners","_children","_target","isEmpty","size","addEventListener","dotIndex","namespaceToken","childElementEventListener","_addEventListener","removeEventListener","_removeEventListener","reset","entries","child","_unregisterAllEvents","listenersMap","listenerPhase","capture","Capture","Bubble","registeredPhases","None","callbackItem","newListenerPhase","_unregisterAllListeners","listener","eventPhases","currentPhase","useCapture","MultiTargetEventListenerManager","_targetsEventListeners","eventListeners","targetEventListeners","scaleRGBTransferFunction","rgbTransferFunction","getSize","nodeValue1","getNodeValue","setNodeValue","getMinMax","storedPixelData","storedPixel","numPixels","LAST_RUNTIME_ID","GLOBAL_CONTEXT","DEFAULT_MAX","DEFAULT_SEPARATOR","getRuntimeId","symbol","idComponents","carry","n","getNextRuntimeId","join","imageURI","isOpposite","v1","v2","tolerance","indexWithinDimensions","targetViewport","renderingEngineId","getRenderingEngine","sameVolumesViewports","targetActors","vpActors","every","vpActor","preScale","scaled","renderToCanvasGPU","imageOrVolume","viewportOptions","displayArea","imageArea","HTMLCanvasElement","isVolume","viewportId","element","document","createElement","devicePixelRatio","window","originalWidth","originalHeight","style","visibility","position","body","appendChild","uniqueId","setAttribute","temporaryCanvas","getOrCreateCanvas","TiledRenderingEngine","getViewport","viewportInput","ViewportType","ORTHOGRAPHIC","STACK","defaultOptions","suppressEvents","enableElement","elementRendered","viewReference","onImageRendered","eventDetail","useViewRef","setViewReference","getContext","drawImage","canvasToWorld","topRight","bottomLeft","rightVector","downVector","Events","IMAGE_RENDERED","setTimeout","disableElement","querySelectorAll","remove","thicknessMm","setVolumes","renderImageObject","resetCamera","setProperties","renderToCanvasCPU","_renderingEngineId","_viewportOptions","getDefaultViewport","renderingTools","calculateTransform","drawImageSync","loadImageToCanvas","RequestType","Thumbnail","useCPURendering","thumbnail","imageAspect","baseViewportOptions","renderFn","successCallback","metaData","useRGBA","cache","imageLoadPoolManager","addRequest","imageIdIndex","asArray","HistoryMemo","label","redoAvailable","undoAvailable","ring","isRecordingGrouped","_size","canUndo","canRedo","undo","items","subitem","restoreMemo","dispatchHistoryEvent","isUndo","undoIf","condition","eventTarget","dispatchEvent","CustomEvent","detail","operationType","memo","redo","newPosition","initializeGroupItem","startGroupRecording","rollbackUnusedGroupItem","endGroupRecording","lastItem","pushGrouped","lastMemo","createMemo","DefaultHistoryMemo","worldCoords","newOrigin","sub","imageToWorldCoords","imageCoords","imageCoordsInWorld","getViewportsWithImageURI","getViewports","hasImageURI","getClosestStackImageIndexForPoint","minimalDistance","getImageIds","currentImageIdIndex","getCurrentImageIdIndex","planeMetadata","targetImagePlane","rowVec","colVec","planeNormal","getPlaneMetadata","plane","planeEquation","planeDistanceToPoint","closestStack","higherImageIds","lowerImageIds","calculateMinimalDistanceForStackViewport","getCurrentVolumeViewportSlice","canvasWidth","canvasHeight","sliceToIndexMatrix","indexToSliceMatrix","getSliceViewInfo","ijkOriginPoint","transformCanvasToIJK","ijkRowPoint","ijkColPoint","ijkRowVec","ijkColVec","ijkSliceVec","maxIJKRowVec","maxIJKColVec","getImageData","sliceViewInfo","getSliceData","spatialRegistrationMetadataProvider","viewportId1","viewportId2","entryId","entryIdReverse","viewport1","viewport2","imageId1","getSliceIndex","imageId2","imagePlaneModule1","imagePlaneModule2","iop2","imagePositionPatient1","imagePositionPatient2","mat","getViewportImageCornersInWorld","ratio","topRightCanvas","bottomRightCanvas","bottomLeftCanvas","topLeftWorld","topRightWorld","bottomRightWorld","bottomLeftWorld","topLeftImage","worldToIndex","topRightImage","bottomRightImage","bottomLeftImage","topLeftImageWorld","_isInBounds","topRightImageWorld","bottomRightImageWorld","bottomLeftImageWorld","_getStackViewportImageCorners","imageCoord","getEnabledElement","StackViewport","getCornerstoneImage","isValidVolume","imageId0","seriesInstanceUID","usingDefaultValues","baseMetadata","validVolume","isEqual","videoUIDs","Set","isVideoTransferSyntax","uidOrUids","async","convertStackToVolumeViewport","uuidv4","getUnknownVolumeLoaderSchema","prevViewPresentation","getViewPresentation","prevViewReference","getViewReference","background","orientation","createAndCacheVolume","load","volumeViewport","volumeViewportNewVolumeHandler","VOLUME_VIEWPORT_NEW_VOLUME","setViewPresentation","convertVolumeToStackViewport","ImageVolume","prevView","stackViewport","setStack","roundToPrecision","roundNumber","precision","absValue","fixedPrecision","toFixed","convertToGrayscale","isRGBA","isRGB","newScalarData","destOffset","increment","getRandomSampleFromArray","clonedArray","shuffleArray","random","componentToHex","c","hex","rgbToHex","hexToRgb","result","exec","parseInt","deepEqual","obj1","obj2","JSON","stringify","test4DTag","IPPGroups","value_getter","frame_groups","first_frame_value_set","positions","frame_value_set","frames","frame_value","setEquals","getTagValue","tag","getPhilipsPrivateBValue","InlineBinary","value_bytes","atob","ary_buf","dv","DataView","setUint8","getSiemensPrivateBValue","getGEPrivateBValue","set_a","set_b","getPetFrameReferenceTime","moduleInfo","positionGroups","ippMetadata","reduce","rv","frame_count","getIPPGroups","imageIdGroups","splittingTag","tags","fncList2","timePoints","isDynamicVolume","scaleArray","arrayLength","clip","val","low","high","scrollSlabs","getVolumeViewportScrollInfo","newFocalPoint","snapFocalPointToSlice","setCamera","desiredStepIndex","VolumeScrollEventDetail","currentImageId","getCurrentImageId","triggerEvent","VOLUME_VIEWPORT_SCROLL_OUT_OF_BOUNDS","VOLUME_VIEWPORT_SCROLL","scrollVolume","eventData","STACK_SCROLL_OUT_OF_BOUNDS","scroll","debounceLoading","loop","jumpToSlice","currentImageIndex","getTargetImageIdIndex","getNumberOfSlices","_getImageSliceData","imageIndexToJump","lastSliceIndex","_getImageIndexToJump","createSubVolume","referencedVolumeId","referencedVolume","refVolumeDim","minY","maxY","minZ","maxZ","ijkTopLeft","boundingBoxOriginWorld","transformIndexToWorld","subVolumeOptions","subVolume","createLocalVolume","subVolumeData","getCompleteScalarDataArray","subVolumeSliceSize","refVolumeSliceSize","refVolumeData","rowStartWorld","refVolumeRowStartIJK","transformWorldToIndex","refVolumeRowStartOffset","rowData","subVolumeLineStartOffset","setCompleteScalarDataArray","getVolumeDirectionVectors","viewUp","ijkOrigin","worldVecColDir","worldVecSliceDir","worldVecRowDir","ijkVecColDir","ijkVecSliceDir","ijkVecRowDir","calculateNeighborhoodStats","centerIjk","radius","numSlices","numPixelsPerSlice","sumSq","cx","cy","cz","centerIndex","mean","stdDev","variance","sqrt","projectionRadiographSOPClassUIDs","getPixelSpacingInformation","instance","PixelSpacing","SOPClassUID","SequenceOfUltrasoundRegions","isArrayOfSequences","PhysicalDeltaX","PhysicalDeltaY","calculateUSPixelSpacing","ImagerPixelSpacing","EstimatedRadiographicMagnificationFactor","PixelSpacingCalibrationType","PixelSpacingCalibrationDescription","isProjection","CalibrationTypes","UNKNOWN","ERMF","PROJECTION","CALIBRATED","calculateRadiographicPixelSpacing","NOT_APPLICABLE","getViewportModality","Modality","_getViewportModality","invertRgbTransferFunction","areNumbersEqualWithTolerance","num1","num2","isNumberType","isNumberArrayLike","arr1","arr2","areArraysEqual","negative","isEqualNegative","isEqualAbs","isNumber","isFinite","loglevel","getRootLogger","logger","names","cs3dLog","toolsLog","loaderLog","aiLog","examplesLog","dicomConsistencyLog","imageConsistencyLog","makeVolumeMetadata","voiLut","voiLutModule","BitsAllocated","BitsStored","SamplesPerPixel","HighBit","PhotometricInterpretation","PixelRepresentation","ImageOrientationPatient","Columns","Rows","VOILUTFunction","SeriesInstanceUID","linePlaneIntersection","p0","p1","x0","y0","z0","z1","A","B","C","D","t","normal","normalized","threePlaneIntersection","firstPlane","secondPlane","thirdPlane","A1","B1","C1","D1","A2","B2","C2","D2","A3","B3","C3","D3","m0","m1","m2","m3","signed","numerator","sign","isPointOnPlane","pointInShapeCallback","pointInShapeFn","returnPoints","scalars","getPointData","getScalars","getData","defaultBoundsIJK","pointsInShape","iMin","iMax","jMin","jMax","kMin","kMax","pointIJK","xMultiple","yMultiple","zMultiple","indexK","indexJK","pointLPS","iterateOverPointsInShape","iterateOverPointsInShapeVoxelManager","getAtIndex","deltaFrames","posDiffFromFocalPoint","steps","frameIndex","newSlicePosFromMin","sortImageIdsAndGetSpacing","usingWadoUri","sortedImageIds","getTransferFunctionNodes","transferFunction","setTransferFunctionNodes","nodes","node","canvasPoint","vtkImageData","worldPoint","voxelPos","transformWorldToIndexContinuous","ORTHOGONAL_TEST_VALUE","updatePlaneRestriction","reference","planeRestriction","inPlaneVector1","inPlaneVector2","testVector","updateVTKImageDataWithCornerstoneImage","sourceImageData","newPixelData","modified","toWindowLevel","toLowHighRange","SAMPLED_SIGMOID","LINEAR_EXACT","Active","Passive","Enabled","ToolModes","CAMERA_MODIFIED","Enums","STACK_NEW_IMAGE","VOLUME_NEW_IMAGE","calibratedPixelSpacingMetadataProvider","utilities","ViewportStatus","sumOverDimensionGroups","dimensionGroups","getScalarDataLength","resultArray","dimensionGroupNumber","getDimensionGroupScalarData","SUM","AVERAGE","SUBTRACT","idx","idx3","getPolyDataPointIndexes","polyData","linesData","getLines","lineSegments","segmentSize","segment","contours","findStartingPoint","startPoint","contour","nextPoint","getPolyDataPoints","contoursIndexes","rawPointsData","getPoints","contourIndexes","ColorbarRangeTextPosition","Right","Widget","extractWindowLevelRegionToolData","VolumeViewport","extractImageDataVolume","extractImageDataStack","setAnnotationLabel","annotation","updatedLabel","triggerAnnotationModified","ChangeTypes","LabelChange","calculateFanShapeCorners","imageBuffer","hull","roughContour","rough","slack","next","walk","to","i2","i3","P2","P3","pathA","pathB","globalYmin","upperPath","topY","arcPts","P1","best","P4","pickPoints","refined","edgeBuf","opts","maxDist","directions","snapQuadrant","xmin","xmax","ymin","ymax","xi","yi","xAlign","yAlign","refineCornersDirectional","step","angleRad","atan2","getImage","calculateFanGeometry","buffer","totalPixels","channelCount","mask","isForeground","labels","currentLabel","regionSizes","px","py","pixelCount","onFlood","largestLabel","isBorder","nx","ny","outer","dirs","prev","dx0","dy0","startDir","d","nextPt","bdx","bdy","segmentLargestUSOutlineFromBuffer","simplified","math","polyline","convexHull","generateConvexHullFromContour","fanGeometry","params","centerResult","intersectLine","startAngle","endAngle","tempAngle","d1","hypot","d4","d2","d3","innerRadius","outerRadius","deriveFanGeometry","props","_controlPoints","_invalidated","_resolution","resolution","_fixedResolution","fixedResolution","_closed","closed","controlPoints","numControlPoints","aabb","_update","_aabb","hasTangentPoints","addControlPoint","addControlPoints","addControlPointAtU","u","lineSegment","_getLineSegmentAt","endPoint","curveSegmentIndex","curveSegment","_curveSegments","controlPointPos","deleteControlPointByIndex","minControlPoints","clearControlPoints","setControlPoints","updateControlPoint","newControlPoint","getControlPoints","controlPoint","getClosestControlPoint","minSquaredDist","closestPointIndex","len","squaredDist","getClosestControlPointWithinDistance","closestControlPoint","getClosestPoint","curveSegmentsDistInfo","_getCurveSegmmentsDistanceSquaredInfo","closestPoint","csA","csB","distanceSquared","minDistCurveSegment","minDistLineSegment","closestPointCurveSegmentIndex","minDistSquared","curveSegmentDistInfo","lineSegPoint","lineSegDistSquared","distanceToPointSquaredInfo","uValue","previousLineSegmentsLength","distanceToPoint","getClosestPointOnControlPointLines","linePoints","getPolylinePoints","_convertCurveSegmentsToPolyline","getPreviewPolylinePoints","controlPointPreview","closeDistance","closeSpline","previewCurveSegments","getPreviewCurveSegments","isPointNearCurve","curveSegments","_getCurveSegmmentsWithinDistance","maxDistSquared","distanceToPointSquared","containsPoint","closingCurveSegment","_getClosingCurveSegmentWithStraightLineSegment","numIntersections","curveSegAABB","lineSegmentAABB","p2","isVerticalLine","xIntersection","getSplineCurves","curveSegLength","polylinePoints","curveSegIndex","lineSegIndex","curveSegmentsDistanceSquared","curveSegmentsDistance","curveSegmentsWithinRange","curveSegmentDistSquared","pointLength","lengthEnd","startControlPoint","endControlPoint","closingLineSegment","CubicSpline","previewNumCurveSegments","_getNumCurveSegments","startCurveSegIndex","endCurveSegIndex","transformMatrix","getTransformMatrix","_getCurveSegment","numCurveSegments","previousCurveSegmentsLength","_getPoint","uInt","p3","_getCurveSegmentPoints","tt","ttt","tValues","qValues","p0Index","p2Index","p3Index","mirror","_getLineSegments","numLineSegments","inc","maxU","curveSegmentLength","lineSegAABB","lineSegLength","TRANSFORM_MATRIX","BSpline","CardinalSpline","super","_scale","_fixedScale","fixedScale","s","s2","CatmullRomSpline","LinearSpline","PanTool","toolProps","defaultToolProps","supportedInteractionTypes","limitToViewport","touchDragCallback","evt","_dragCallback","mouseDragCallback","_checkImageInViewport","deltaPointsCanvas","viewportRight","viewportBottom","defaultActor","getDefaultActor","renderer","getRenderer","getBounds","computeVisiblePropBounds","imageLeft","imageTop","worldToCanvas","imageRight","imageBottom","getZoom","deltaPoints","deltaPointsWorld","world","updatedPosition","updatedFocalPoint","toolName","TrackballRotateTool","rotateIncrementDegrees","rotateSampleDistanceFactor","_resizeObservers","_hasResolutionChanged","preMouseDownCallback","mapper","originalSampleDistance","getSampleDistance","cleanUp","once","_getViewportsInfo","getToolGroup","toolGroupId","viewportsInfo","onSetToolActive","subscribeToElementResize","getEnabledElementByIds","resizeObserver","ResizeObserver","viewPresentation","observe","_viewportAddedListener","TOOLGROUP_VIEWPORT_ADDED","onSetToolDisabled","disconnect","rotateCamera","centerWorld","axis","vtkCamera","getVtkActiveCamera","getViewUp","getFocalPoint","getPosition","newViewUp","currentPoints","lastPoints","currentPointsCanvas","lastPointsCanvas","clientWidth","clientHeight","normalizedPosition","normalizedPreviousPosition","radsq","op","oe","opsq","oesq","lop","loe","nop","noe","dot","angleX","acos","upVec","atV","rightV","forwardV","angleY","PLANEINDEX","SPHEREINDEX","XMIN","XMAX","YMIN","YMAX","ZMIN","ZMAX","XMIN_YMIN_ZMIN","XMIN_YMIN_ZMAX","XMIN_YMAX_ZMIN","XMIN_YMAX_ZMAX","XMAX_YMIN_ZMIN","XMAX_YMIN_ZMAX","XMAX_YMAX_ZMIN","XMAX_YMAX_ZMAX","VolumeCroppingTool","showCornerSpheres","showHandles","showClippingPlanes","mobile","enabled","initialCropFactor","sphereColors","SAGITTAL","CORONAL","AXIAL","CORNERS","sphereRadius","grabSpherePixelDistance","originalClippingPlanes","draggingSphereIndex","toolCenter","cornerDragOffset","faceDragOffset","sphereStates","edgeLines","onSetToolConfiguration","onSetToolEnabled","onCameraModified","currentTarget","_updateClippingPlanes","mouseCanvas","sphereCanvas","pow","cursor","sphereState","mouseWorld","isCorner","axisIdx","viewport3D","_updateCornerSpheres","_updateFaceSpheresFromCorners","_updateClippingPlanesFromFaceSpheres","_onMouseMoveSphere","_getViewportAndWorldCoords","newCorner","_calculateNewCornerPosition","_updateSpherePosition","axisFlags","_parseCornerKey","_updateRelatedCorners","newValue","sphereSource","setCenter","_updateCornerSpheresFromFaces","_triggerToolChangedEvent","_onControlToolChange","_getViewport","isMin","handleType","toolCenterMin","toolCenterMax","normals","planeIndices","sphereIndices","axes","orientationAxes","getOrigin","newCenter","viewportOrientation","sphereActor","setColor","clippingPlanes","getClippingPlanes","setOrigin","VOLUMECROPPING_TOOL_CHANGED","_initialize3DViewports","worldBounds","cropFactor","xRange","yRange","zRange","xMin","xMax","yMin","yMax","zMin","zMax","planes","planeXmin","planeXmax","planeYmin","planeYmax","planeZmin","planeZmax","originalPlanes","getNormal","sphereXminPoint","sphereXmaxPoint","sphereYminPoint","sphereYmaxPoint","sphereZminPoint","sphereZmaxPoint","adaptiveRadius","_calculateAdaptiveSphereRadius","_addSphere","cornerKeys","key1","key2","state1","state2","_addLine3DBetweenPoints","addClippingPlane","VOLUMECROPPINGCONTROL_TOOL_CHANGED","_handleCornerSphereMovement","_updateAfterCornerMovement","_handleFaceSphereMovement","_updateAfterFaceMovement","cornerKey","isXMin","isXMax","isYMin","isYMax","isZMin","isZMax","draggedSphere","_shouldUpdateCorner","_updateCornerCoordinates","_onNewVolume","_rotateCamera","setHandlesVisible","setClippingPlanesVisible","_unsubscribeToViewportNewVolumeSet","_subscribeToViewportNewVolumeSet","visible","_updateHandlesVisibility","getHandlesVisible","getClippingPlanesVisible","normalizedCenter","_missingActorWarned","matrix","getMatrix","removeAllClippingPlanes","rot","normalMatrix","transformedOrigins","transformedNormals","oVec","o","nVec","planeInstance","setVisibility","point1","point2","setNumberOfPoints","setPoint","lines","setPoints","setLines","setInputData","setMapper","setLineWidth","setOpacity","setInterpolationToFlat","addActor","setRadius","sphereMapper","setInputConnection","getOutputPort","diagonal","sphereRadiusScale","minRadius","minSphereRadius","maxRadius","maxSphereRadius","pos","corner","xs","ys","zs","RENDERING_DEFAULTS","CONSTANTS","defaultReferenceLineColor","defaultReferenceLineControllable","OPERATION","VolumeCroppingControlTool","viewportIndicators","viewportIndicatorsConfig","extendReferenceLines","lineColors","lineWidth","lineWidthActive","_virtualAnnotations","initializeViewport","_updateToolCentersFromViewport","annotations","_getAnnotations","filterInteractableAnnotationsForElement","removeAnnotation","annotationUID","_getOrientationFromNormal","highlighted","cameraPosition","cameraFocalPoint","getToolName","handles","activeOperation","activeViewportIds","referenceLines","addAnnotation","resetCroppingSpheres","viewportInfo","resetPan","resetZoom","resetToCenter","resetRotation","resetSlabThickness","_computeToolCenter","computeToolCenter","orientationIds","presentOrientations","Boolean","missingOrientation","presentNormals","presentCenters","presentViewportInfos","vpInfo","virtualNormal","virtualCenter","virtualAnnotation","isVirtual","presentOrientation","presentCenter","canonicalNormals","virtualAnnotations","triggerAnnotationRenderForViewportIds","isPointNearTool","canvasCoords","proximity","_pointNearTool","toolSelectedCallback","interactionType","_activateModify","hideElementCursor","preventDefault","onResetCamera","mouseMoveCallback","filteredToolAnnotations","imageNeedsUpdate","isAnnotationLocked","near","filtered","renderAnnotation","svgDrawingHelper","lineIntersection2D","q1","q2","s1_x","s1_y","s2_x","s2_y","denom","renderStatus","viewportAnnotation","canvasDiagonalLength","otherViewportAnnotations","volumeCroppingCenterCanvasMin","volumeCroppingCenterCanvasMax","canvasBox","otherViewport","otherCamera","otherCanvasDiagonalLength","otherCanvasCenter","otherViewportCenterWorld","realViewports","vp1","vp2","normal1","normal2","otherViewportControllable","_getReferenceLineControllable","pointWorld0","pointCanvas0","otherViewportCenterCanvas","canvasUnitVectorFromCenter","canvasVectorFromCenterLong","refLinesCenterMin","refLinePointMinOne","refLinePointMinTwo","liangBarksyClip","refLinesCenterMax","refLinePointMaxOne","refLinePointMaxTwo","viewportColor","_getReferenceLineColor","line","lineIndex","intersections","otherLine","intersection","with","annotationForViewport","toUpperCase","idUpper","colorArr","unknown","viewportControllable","selectedViewportId","activeLineWidth","lineUID","drawLine","sortedIntersections","lineDash","referenceColorCoordinates","xOffset","yOffset","circleRadius","circleUID","drawCircle","getAnnotations","toolGroupAnnotations","_onSphereMoved","_syncWithVolumeCroppingTool","newMin","newMax","setToolCenter","_getAnnotationsForViewportsWithDifferentCameras","viewportsWithDifferentCameras","cameraOfTarget","_filterViewportWithSameOrientation","referenceAnnotation","linkedViewportAnnotations","otherViewportsAnnotationsWithSameCameraDirection","otherViewPlaneNormal","isInteractingWithTool","MOUSE_UP","_endCallback","MOUSE_DRAG","MOUSE_CLICK","TOUCH_END","TOUCH_DRAG","TOUCH_TAP","_deactivateModify","editData","resetElementCursor","viewportIdsToRender","getViewportIdsWithToolToRender","VOLUME_3D","activeType","getReferenceLineColor","getReferenceLineControllable","getSpacing","maxCropFactor","cropStart","cropEnd","onSetToolInactive","anyAnnotationExists","canonical","tol","addNewAnnotation","filteredAnnotations","viewportIdArray","handleSelectedCallback","handle","_applyDeltaShiftToSelectedViewportCameras","viewportsAnnotationsToUpdate","_applyDeltaShiftToViewportCamera","dotProd","projectedDelta","start1","end1","WindowLevelTool","_getImageDynamicRangeFromMiddleSlice","middleSliceIndex","frameLength","bytesPerVoxel","frame","_getMinMax","newRange","viewportsContainingVolumeUID","properties","scaling","getPTScaledNewRange","getNewRange","multiplier","_getMultiplierFromDynamicRange","wwDelta","wcDelta","voiLutFunction","imageDynamicRange","calculatedDynamicRange","getMiddleSliceData","acc","pixel","metadataDynamicRange","calculatedRange","_getImageDynamicRangeFromViewport","imageDataRange","voxel","WindowLevelRegionTool","minWindowWidth","isDrawing","getReferencedImageId","getFrameOfReferenceUID","cachedStats","_activateDraw","_deactivateDraw","triggerAnnotationCompleted","applyWindowLevelRegion","topLeftCanvas","MOUSE_MOVE","styleSpecifier","canvasCoordinates","getAnnotationStyle","dataId","rectangleUID","drawRect","startCanvas","endCanvas","left","pixelLuminanceData","luminance","spIndex","column","red","green","blue","minMaxMean","pixelLuminance","globalMin","globalMax","spv","StackScrollTool","debounceIfNotLoaded","deltaY","mouseWheelCallback","_scroll","_scrollDrag","deltaPointY","pixelsPerImage","_getPixelPerImage","imageIdIndexOffset","wheel","BaseVolumeViewport","offsetHeight","PlanarRotateTool","setAngle","startPoints","currentPointWorld","startPointWorld","centerCanvas","angleBetweenLines","cross","rotAngle","rotMat","rotatedViewUp","ZoomTool","zoomToCenter","minZoomScale","maxZoomScale","pinchToZoom","pan","initialMousePosWorld","dirVec","preTouchStartCallback","_dragParallelProjection","pinch","deltaDistance","parallelScale","parallelScaleToSet","focalPointToSet","positionToSet","distanceToCanvasCenter","cappedParallelScale","thresholdExceeded","imageWidth","imageHeight","canvasAspect","insetImageMultiplier","getConfiguration","useLegacyCameraFOV","scaledImageWidth","scaledImageHeight","minParallelScaleRequired","minScaleInWorld","maxScaleInWorld","_dragPerspectiveProjection","zoomScale","directionOfProjection","tmp","_pinchCallback","_zoom","currentPointsList","parallelProjection","_panCallback","eventDetails","eventName","MOUSE_WHEEL","page","client","MIPJumpToClickTool","targetViewportIds","mouseClickCallback","maxIntensity","brightestPoint","getPointInLineOfSightWithCriteria","intensity","foundToolGroup","getToolGroupForViewport","jumpToWorld","defaultReferenceLineDraggableRotatable","defaultReferenceLineSlabThicknessControlsOn","CrosshairsTool","shadow","autoPan","panSize","handleRadius","enableHDPIHandles","referenceLinesCenterGapRadius","referenceLinesCenterGapRatio","filterActorUIDsToSetSlabThickness","slabThicknessBlendMode","MAXIMUM_INTENSITY_BLEND","rotationPoints","slabThicknessPoints","resetCrosshairs","firstViewport","secondViewport","thirdViewport","normal3","point3","jumpWorld","_jump","viewportDraggableRotatable","_getReferenceLineDraggableRotatable","currentCamera","oldCameraPosition","deltaCameraPosition","oldCameraFocalPoint","deltaCameraFocalPoint","isRotation","cameraModifiedInPlane","CROSSHAIR_TOOL_CENTER_CHANGED","getViewportIds","_autoPanViewportIfNecessary","previousActiveOperation","previousActiveViewportIds","getHandleNearImagePoint","_areViewportIdArraysEqual","viewportUIDSpecificCrosshairs","canvasMinDimensionLength","crosshairCenterCanvas","_filterAnnotationsByUniqueViewportOrientations","otherViewportDraggableRotatable","otherViewportSlabThicknessControlsOn","_getReferenceLineSlabThicknessControlsOn","pointWorld1","canvasVectorFromCenterMid","canvasVectorFromCenterShort","canvasVectorFromCenterStart","mobileConfig","centerGap","refLinePointOne","refLinePointTwo","refLinePointThree","refLinePointFour","refLinesCenter","rotHandleOne","rotHandleTwo","stHandlesCenterCanvas","stHandlesCenterWorld","worldUnitVectorFromCenter","worldUnitOrthoVectorFromCenter","slabThicknessValue","getSlabThickness","worldOrthoVectorFromCenter","worldVerticalRefPoint","canvasVerticalRefPoint","canvasOrthoVectorFromCenter","stLinePointOne","stLinePointTwo","stLinePointThree","stLinePointFour","stHandleOne","stHandleTwo","stHandleThree","stHandleFour","newRtpoints","newStpoints","viewportSlabThicknessControlsOn","lineActive","rotHandlesActive","rotationHandles","rotHandleWorldOne","rotHandleWorldTwo","slabThicknessHandlesActive","slabThicknessHandles","slabThicknessHandleWorldOne","slabThicknessHandleWorldTwo","slabThicknessHandleWorldThree","slabThicknessHandleWorldFour","handleUID","drawHandles","viewportIdArrayOne","viewportIdArrayTwo","itemFound","otherLinkedViewportAnnotationsFromSameScene","otherViewportsAnnotationsWithUniqueCameras","cameraFound","jj","cameraOfStocked","otherNonLinkedViewportAnnotationsFromSameScene","_checkIfViewportsRenderingSameScene","volumeIds","getAllVolumeIds","otherVolumeIds","sameScene","dir1","dir2","finalPointCanvas","originalPointCanvas","_isClockWise","rotationAxis","buildFromRadian","otherViewportsIds","referenceAnnotations","viewportsIds","mod","currentPoint","currentCenter","otherViewportRotationPoints","dotProdDirection","projectedDirection","normalizedProjectedDirection","normalizedProjectedDelta","MINIMUM_SLAB_THICKNESS","_pointNearReferenceLine","getToolInstance","setSlabThickness","lineViewport","lineSegment1","distanceToPoint1","lineSegment2","distanceToPoint2","getReferenceLineDraggableRotatable","getReferenceLineSlabThicknessControlsOn","onSetToolPassive","scrollDelta","_getRotationHandleNearImagePoint","_getSlabThicknessHandleNearImagePoint","toolCenterCanvas","visiblePointCanvas","visiblePointWorld","actorUIDs","blendModeToUse","COMPOSITE","setBlendMode","annotationCanvasCoordinate","stPointLineCanvas1","stPointLineCanvas2","stPointLineCanvas1Start","stPointLineCanvas2Start","MAGNIFY_VIEWPORT_ID","MagnifyTool","magnifySize","magnifyWidth","magnifyHeight","_hasBeenRemoved","_getReferencedImageId","_createMagnificationViewport","viewportProperties","originalViewportRotation","canvasPos","magnifyToolElement","querySelector","magnifyElement","classList","display","magnifyViewport","_cancelCallback","stopPropagation","_dragEndCallback","viewportElement","removeChild","getTargetId","csEvents","isSegmentation","AdvancedMagnifyToolActions","PARALLEL_THRESHOLD","AdvancedMagnifyTool","Actions","magnifyingGlass","zoomFactor","zoomFactorList","padding","actions","showZoomFactorsList","method","bindings","mouseButton","MouseBindings","Secondary","modifierKey","KeyboardBindings","Shift","config","canvasHandlePoints","_getCanvasHandlePoints","magnifyViewportId","sourceViewportId","isCanvasAnnotation","activeHandleIndex","magnifyViewportManager","createViewport","sourceEnabledElement","annotationPoints","canvasDelta","dispose","getAllAnnotations","canvasTop","canvasBottom","canvasLeft","radiusPoint","getCanvasCircleRadius","handleIndex","newAnnotation","_dragDrawCallback","hasMoved","_dragModifyCallback","_dragHandle","canvasCenter","currentCanvasPoints","newRadius","newCanvasHandlePoints","getStyle","activeHandleCanvasCoords","isAnnotationVisible","handleGroupUID","update","canvasCenterPos","canvasRadius","AdvancedMagnifyViewportManager","getInstance","currentZoomFactor","dropdown","_getZoomFactorsListDropdown","newZoomFactor","parentElement","assign","focus","onChangeCallback","keyCode","which","toLowerCase","option","title","defaultSelected","sourceViewport","sourceElement","AdvancedMagnifyViewport","_addSourceElementEventListener","_magnifyViewportsMap","magnifyViewportInfo","_annotationRemovedCallback","destroyViewport","_newStackImageCallback","magnifyViewportsMapEntries","_getMagnifyViewportsMapEntriesBySourceViewportId","getEnabledElementByViewportId","stackActorReInitialized","_reset","_newVolumeImageCallback","currentViewPlaneNormal","worldImagePlanePoint","vecHandleToImagePlane","worldDist","worldDelta","_initialize","_singleton","_removeEventListeners","_destroyViewports","magnifyViewportMapEntry","_removeSourceElementEventListener","newEnabledElement","_addEventListeners","ANNOTATION_REMOVED","newStackHandler","VIEWPORT_NEW_IMAGE_SET","newVolumeHandler","_enabledElement","_sourceToolGroup","_magnifyToolGroup","_isViewportReady","_radius","_resized","_canAutoPan","_viewportId","_sourceEnabledElement","_autoPan","_browserMouseDownCallback","_browserMouseUpCallback","_handleToolModeChanged","_mouseDragCallback","_resizeViewportAsync","debounce","_resizeViewport","_syncViewports","parentNode","magnifyToolGroup","mode","toolBindingsOptions","setToolActive","setToolPassive","setToolEnabled","Disabled","setToolDisabled","_inheritBorderRadius","borderRadius","_createViewportNode","overflow","boxSizing","_convertZoomFactorToParallelScale","offsetWidth","_isStackViewport","_isVolumeViewport","_cloneToolGroups","sourceActors","magnifyToolGroupId","sourceToolGroup","toolInstance","addViewport","addSegmentationRepresentations","segmentationId","SegmentationRepresentations","Labelmap","_cloneStack","_cloneVolumes","volumeInputArray","_cloneViewport","sourceViewportOptions","toolGroups","_cancelMouseEventCallback","closest","canvasCurrent","magnifyRadius","dist","panDist","canvasDeltaPos","newCanvasPosition","currentWorldPos","newWorldPos","worldDeltaPos","autoPanCallbackData","currentPosition","_addBrowserEventListeners","_removeBrowserEventListeners","TOOL_MODE_CHANGED","sourceCanvas","_syncViewportsCameras","_syncStackViewports","setImageIdIndex","sourceProperties","resize","ReferenceLines","AnnotationDisplayTool","enforceSameFrameOfReference","showFullDimension","_init","getRenderingEngines","filterViewportsWithToolEnabled","sourceViewportCanvasCornersInWorld","topLeft","bottomRight","sourceViewPlaneNormal","isParallel","targetViewportPlane","pointSet1","pointSet2","pointSetToUse","topBottomVec","topRightVec","newNormal","isPerpendicular","lineStartWorld","lineEndWorld","handleFullDimension","vec1","vec2","targetImage","getTargetImageData","topLeftImageCoord","topRightImageCoord","bottomRightImageCoord","bottomLeftImageCoord","lineStartImageCoord","lineEndImageCoord","intersectInfiniteLines","isInBound","err","line1Start","line1End","line2Start","line2End","x3","y3","x4","y4","a1","b1","c1","a2","b2","c2","OverlayGridTool","sourceImageIds","pointSets","calculateImageIdPointSets","viewportData","imageIdNormal","getImageIdNormal","targetData","initializeViewportData","pointSetsToUse","lineStartsWorld","lineEndsWorld","SegmentationIntersectionTool","actorsWorldPointsMap","calculateSurfaceSegmentationIntersectionsForViewport","calculateSurfaceSegmentationIntersections","actorEntries","cacheId","getCacheId","clippingFilter","actorWorldPointMap","polyLineIdx","worldPointsSet","canvasPoints","fillColor","fillOpacity","closePath","polyLineUID","drawPath","actorWorldPointsMap","getOutputData","colorArray","colorComponentToString","component","componentString","colorToString","getColor","decimals","pointToString","ReferenceCursors","preventHandleOutsideImage","displayThreshold","positionSync","disableCursor","isHandleOutsideImage","_elementWithCursor","_currentCursorWorldPosition","_currentCanvasPosition","_disableCursorEnabled","getActiveAnnotation","createInitialAnnotation","updateAnnotationPosition","textBox","worldPosition","worldBoundingBox","previousCamera","oldFocalPoint","cameraNormal","isElementWithCursor","updateViewportImage","lineWidthBase","crosshairUIDs","right","centerSpace","lineLength","currentMousePosition","closestIndex","currentDistance","normalizedViewPlane","scaledPlaneNormal","renderViewport","viewportsWithAnnotations","ScaleOverlayTool","scaleLocation","enabledElements","viewportCanvasCornersInWorld","thisAnnotation","computeScaleSize","worldWidthViewport","worldHeightViewport","location","scaleSizes","currentScaleSize","scaleSize","computeEndScaleTicks","locationTickOffset","bottom","endTick1","endTick2","computeInnerScaleTicks","leftTick","rightTick","canvasScaleSize","tickIds","tickUIDs","tickCoordinates","numberSmallTicks","tickSpacing","locationOffset","computeWorldScaleCoordinates","pointSet","worldCoordinates","midpointLocation","midpoint","computeCanvasScaleCoordinates","canvasSize","vscaleBounds","hscaleBounds","scaleCanvasCoordinates","worldDistanceOnCanvas","computeScaleBounds","horizontalReduction","verticalReduction","hReduction","vReduction","locationBounds","canvasBounds","scaleTicks","scaleId","leftTickId","rightTickId","locationTextOffest","textCanvasCoordinates","textBoxLines","_getTextLines","drawTextBox","fontFamily","fontSize","scaleSizeDisplayValue","scaleSizeUnits","SculptorTool","minSpacing","referencedToolNames","toolShape","referencedToolName","updateCursorSize","registeredShapes","isActive","commonData","activeAnnotationUID","isEditingOpenContour","canvasLocation","configureToolSize","selectFreehandTool","activateModify","updateCursor","endCallback","deactivateModify","activeAnnotation","filterSculptableAnnotationsForElement","calculateStats","HandlesUpdated","dragCallback","sculpt","registerShapes","CircleSculptCursor","shapeName","setToolShape","shapeClass","shape","cursorShape","selectedShape","sculptData","mousePoint","mouseCanvasPoint","deltaWorld","maxSpacing","getMaxSpacing","pushedHandles","pushHandles","first","insertNewHandles","interpolatePointsWithinMaxSpacing","indicesToInsertAfter","nextHandleIndex","contourIndex","currentCanvasPoint","nextCanvasPoint","updateToolSize","sculptableAnnotations","findNewHandleIndices","newIndexModifier","insertHandleRadially","previousIndex","nextIndex","handleData","getInsertPosition","closestAnnotationUID","getClosestFreehandToolOnElement","toolIndex","isLocked","isVisible","distanceFromTool","distancePointToContour","AnnotationStyleStates","Default","Highlighted","renderShape","DIRECTIONS","VolumeRotateTool","ax","ay","az","LabelTool","getTextCallback","changeTextCallback","svgLayer","textGroup","textGroupElement","bbox","getBBox","getAttribute","translateX","translateY","matches","createAnnotation","initialWorldPos","anchorWorldPos","doneEditMemo","getLinkedTextBoxStyle","textBoxUID","hydrate","autoGenerated","_evt","_annotation","_handle","_interactionType","_doneChangingTextCallback","_isInsideVolume","index1","index2","doneChangingTextCallback","prompt","LengthTool","getTextLines","defaultGetTextLines","movingTextBox","canvasPoint1","canvasPoint2","worldPosDelta","unit","_throttledCalculateCachedStats","_calculateCachedStats","showHandlesAlways","textLines","canvasTextBoxCoords","getTextBoxCoordsCanvas","textBoxPosition","boundingBox","drawLinkedTextBox","throttle","trailing","hydrateBase","serializableOptions","_calculateLength","pos1","pos2","worldPos1","worldPos2","targetIds","StatsUpdated","cachedVolumeStats","HeightTool","heightUID","drawHeight","_calculateHeight","outside","ProbeTool","probeDefaults","textCanvasOffset","mergeDefaultProps","createAnnotationForViewport","eventDispatchDetail","getStackViewports","referencedImageURI","currentImageURI","textUID","changeType","pixelUnitsOptions","isViewportPreScaled","isSuvScaled","ijk","modalityUnit","getAtIJKPoint","calibratedResults","hasEnhancedRegionValues","units","getPixelValueUnits","DragProbeTool","postMouseDownCallback","postTouchStartCallback","EllipticalROITool","storePointData","centerPointRadius","statsCalculator","BasicStatsCalculator","w","h","minorEllipse","xRadius","yRadius","majorEllipse","pointInMinorEllipse","_pointInEllipseCanvas","originalHandleCanvas","pointsCanvas","dX","dY","bottomCanvas","topCanvas","leftCanvas","rightCanvas","dYCanvas","newHalfCanvasWidth","canvasRight","dXCanvas","newHalfCanvasHeight","canvasCorners","getCanvasEllipseCorners","areaUnit","area","ellipseUID","centerPoint","_getCanvasEllipseCenter","pos1Index","pos2Index","zRadius","ellipseObj","worldWidth","worldHeight","getWorldWidthAndHeightFromTwoPoints","isEmptyArea","aspect","statsCallback","isInObject","pointInEllipse","fast","getStatistics","statsArray","ellipse","rotLocation","ellipseCanvasPoints","areaLine","CircleROITool","canvasHandles","radiusCanvas","newRadiusCanvas","getCanvasCircleCorners","radiusUnit","perimeter","wasInvalidated","radiusLine","ETDRSGridTool","degrees","diameters","canvasEnd","diametersCanvas","diameter","worldMeasureToCanvas","degreesRad","angleRadians","degree","cos","sin","measurement","p1Canvas","p2Canvas","DEFAULT_SPLINE_CONFIG","controlPointAdditionDistance","controlPointDeletionDistance","showControlPointsConnectors","controlPointAdditionEnabled","controlPointDeletionEnabled","SplineTypesEnum","SplineToolActions","splineToolNames","SplineROITool","ContourSegmentationBaseTool","SplineTypes","simplifiedSpline","contourHoleAdditionModifierKey","epsilon","spline","Cardinal","Class","CatmullRom","Linear","drawPreviewEnabled","enableTwoPointPreview","lastControlPointDeletionKeys","AddControlPoint","Primary","DeleteControlPoint","Ctrl","fireChangeOnUpdate","contourHoleProcessingEnabled","Completed","_keyDownCallback","controlPointIndex","_deleteControlPointByIndex","_mouseMoveCallback","lastCanvasPoint","_mouseDownCallback","doubleClick","MOUSE_DOUBLE_CLICK","closeContour","addNewPoint","moveAnnotation","eventType","ANNOTATION_COMPLETED","ANNOTATION_MODIFIED","triggerChangeEvent","KEY_DOWN","MOUSE_DOWN","_renderStats","textboxStyle","addControlPointCallback","splineType","splineConfig","_getSplineConfig","closestPointInfo","deleteControlPointCallback","originalWorldPoint","deltaXPoint","deltaYPoint","deltaInX","deltaInY","canvasMaxX","canvasMaxY","canvasMinX","canvasMinY","getAABB","topLeftBBWorld","topLeftBBIndex","bottomRightBBWorld","getArea","annotationCompletedBinded","annotationCompleted","sourceAnnotation","isContourSegmentationTool","convertContourSegmentationAnnotation","initializeListeners","removeListeners","getMouseModifier","event","cancelAnnotation","renderAnnotationInstance","renderContext","annotationStyle","locked","annotationLocked","childAnnotations","getChildAnnotations","childAnnotationUIDs","_isSplineROIAnnotation","splinePolylineCanvas","_updateSplineInstance","updateContourPolyline","targetWindingDirection","Clockwise","updateWindingDirection","previewPolylinePoints","drawPolyline","controlPointsConnectors","textbox","createInterpolatedSplineControl","isSplineAnnotation","createSplineObjectFromType","contourAnnotation","createSpline","onInterpolationComplete","splineConfigs","splineInstance","SplineClass","SplineContourSegmentationTool","annotationCutMergeCompletedBinded","annotationCutMergeCompleted","ANNOTATION_CUT_MERGE_PROCESS_COMPLETED","LivewireContourTool","snapHandleNearby","nearestEdge","showInterpolationPolyline","cancelInProgress","proximitySquared","clearAnnotation","clearEditData","triggerContourAnnotationCompleted","worldToSlice","sliceToWorld","worldPosOriginal","currentPath","closestHandlePoint","distSquared","worldControlPoint","canvasControlPoint","snapPoint","scissors","findMinNearby","pathPoints","findPathToPoint","addPoints","prependPath","confirmedPath","lastPoint","getLastPoint","startSearch","updateAnnotation","imgWidth","imgHeight","slicePoint","editHandle","setupBaseEditData","nextPos","viewportImageData","sliceImageData","ijkPoint","startPos","LivewireScissors","createInstanceFromRawPixelData","scissorsNext","currentPathNext","confirmedPathNext","handlePoints","numHandles","previousHandle","nextHandle","findHandlePolylineIndex","slicePos","pathPointsLeft","pathPointsRight","appendPath","contourSegmentationAnnotation","livewirePath","pointArray","imagePoints","LivewireContourSegmentationTool","updateInterpolatedAnnotation","interpolationSources","originalPolyline","queueMicrotask","repeatInterpolation","originalPoints","handleSmoothing","hIndex","testPoint","minPoint","acceptedPath","path","InterpolationUpdated","rendered","polylineCanvasPoints","ArrowAnnotateTool","arrowFirst","arrowHeadStyle","touchTapCallback","taps","doubleClickCallback","clickedAnnotation","stopImmediatePropagation","markerSize","arrowUID","drawArrow","viaMarker","AngleTool","showAngleArc","arcOffset","angleStartedNotYetCompleted","line1","canvasPoint3","line2","angleArcLineDash","anglePoints","temp","segments","worldPos3","fromCharCode","CobbAngleTool","showArcLines","distanceToLines","isNearFirstLine","isNearSecondLine","TOUCH_START","arc1Angle","arc2Angle","arc1Start","arc1End","arc2Start","arc2End","firstLine","secondLine","mid1","midPoint","mid2","arc1TextBoxUID","arc1TextLine","arch1TextPosCanvas","arc2TextBoxUID","arc2TextLine","arch2TextPosCanvas","point4","canvasPoint4","getArcsStartEndPoints","linkLine","arc1Side","arc2Side","midLinkLine","linkLineLength","midFirstLine","midSecondLine","directionVectorStartArc1","magnitudeStartArc1","normalizedDirectionStartArc1","directionVectorEndArc1","magnitudeEndArc1","normalizedDirectionEndArc1","directionVectorStartArc2","magnitudeStartArc2","normalizedDirectionStartArc2","directionVectorEndArc2","magnitudeEndArc2","normalizedDirectionEndArc2","seg1","seg2","minDist","MAX_VALUE","UltrasoundDirectionalTool","displayBothAxesDistances","startedDrawing","xValues","yValues","isHorizontal","isUnitless","drawHandle","canvasDeltaY","canvasDeltaX","projectedPointCanvas","imageIndex1","imageIndex2","values1","units1","values2","units2","dist1","dist2","UltrasoundPleuraBLineTool","USPleuraBLineAnnotationType","BLINE","PLEURA","bLineColor","pleuraColor","drawDepthGuide","depth_ratio","depthGuideColor","depthGuideThickness","depthGuideDashLength","depthGuideDashGap","depthGuideOpacity","fanOpacity","showFanAnnotations","updatePercentageCallback","pleuraAnnotations","bLineAnnotations","annotationType","getActiveAnnotationType","allPointsInsideShape","newPoint","isInsideFanShape","getFanShapeGeometryParameters","fanCenter","indexToCanvasRatio","getIndexToCanvasRatio","unMergedPleuraIntervals","mergedPleuraIntervals","pleuraIntervalsDisplayed","bLineIntervalsDisplayed","drawAnnotation","getColorForLineType","lineInterval","fanNumber","interval","clippedInterval","fanDataId","fanUID","drawFan","pleuraAnnotationsToDraw","bLineAnnotationsToDraw","calculateBLinePleuraPercentage","activeAnnotationType","filterAnnotations","filterFunction","countAnnotations","getImageIdIndex","annotationMapping","counts","bLine","pleura","deleteAnnotations","setActiveAnnotationType","deleteLastAnnotationType","annotationList","updateFanGeometryConfiguration","isFanShapeGeometryParametersValid","deriveFanGeometryFromViewport","pleuraIntervals","bLineIntervals","diffVector","radToDegree","rad","degreeToRad","indexToCanvas","depth_radius","theta_start","theta_range","arc_length","num_dashes","theta_step","theta1","theta2","start_point","end_point","strokeOpacity","KeyImageTool","dataSeries","seriesLevel","dataPoint","isPoint","canvasPosition","updatedText","AnnotationEraserTool","_deleteNearbyAnnotations","toolGroup","tools","_toolInstances","annotationsToRemove","interactableAnnotations","setAnnotationSelected","getAnnotation","createAnnotationMemo","deleting","RegionSegmentTool","GrowCutBaseTool","isPartialVolume","positiveSeedVariance","negativeSeedVariance","currentWorldPoint","growCutData","circleBorderPoint","runGrowCut","circleCenterPoint","getGrowCutLabelmap","segmentation","sphereInfo","growCut","segmentationData","canvasCenterPoint","canvasBorderPoint","vecCenterToBorder","getSegmentStyle","segmentIndex","RegionSegmentPlusTool","subVolumePaddingPercentage","islandRemoval","mouseTimer","allowedToProceed","clearTimeout","onMouseStable","mouseStabilityDelay","refVolume","seeds","positiveSeedIndices","negativeSeedIndices","requestAnimationFrame","worldIslandPoints","getRemoveIslandData","mergedOptions","NEGATIVE_PIXEL_RANGE","POSITIVE_PIXEL_RANGE","ISLAND_PIXEL_RANGE","WholeBodySegmentTool","positivePixelRange","negativePixelRange","islandPixelRange","_getHorizontalLineWorldPoints","horizontalLines","worldLine1P1","worldLine1P2","worldLine2P1","worldLine2P2","worldSquarePoints","worldTopLeft","worldBottomRight","_getWorldBoundingBoxFromProjectedSquare","boundingBoxInfo","ijkBottomRight","positiveSeedValue","negativeSeedValue","labelmapVolumeId","labelmapVolume","referencedVolumeData","labelmapData","islandPointIndexes","pixelValue","_projectWorldPointAcrossSlices","worldEdgePoint","vecDirection","_getViewportVolume","ijkLineP1","ijkLineP2","_getCuboidIJKEdgePointsFromProjectedWorldPoint","_getWorldCuboidCornerPoints","cuboidPoints","worldSquarePoint","worldEdgePoints","worldCuboidPoints","_getHorizontalLineIJKPoints","ijkPoint1","ijkPoint2","RectangleScissorsTool","LabelmapBaseTool","strategies","FILL_INSIDE","ERASE_INSIDE","defaultStrategy","activeStrategy","activeLabelmapSegmentation","activeSegmentation","segmentsLocked","segmentLocking","segmentColor","representationData","getSegmentation","segmentationImageId","getCurrentLabelmapImageIdForViewport","operationData","applyActiveStrategy","toolMetadata","CircleScissorsTool","SphereScissorsTool","activeSegmentationRepresentation","getEditData","CircleROIStartEndThresholdTool","numSlicesToPropagate","calculatePointsInsideVolume","showTextBox","throttleTimeout","spacingInNormal","startCoord","_getStartCoordinate","endCoord","_getEndCoordinate","startCoordinate","endCoordinate","pointsInVolume","projectionPoints","statistics","labelmapUID","_computeProjectionPoints","_computePointsInsideVolume","filterAnnotationsWithinSamePlane","annotationEnabledElement","viewplaneNormal","tempStartCoordinate","tempEndCoordinate","_getCoordinateForViewplaneNormal","roundedStartCoordinate","roundedEndCoordinate","cameraCoordinate","roundedCameraCoordinate","middleCoordinate","isMiddleSlice","_getIndexOfCoordinatesForViewplaneNormal","iteratorVolumeIDs","lineWidthToUse","lineDashToUse","_calculateCachedStatsTool","projectionAxisIndex","startWorld","endWorld","handlesOnStartPlane","handlesToStart","newProjectionPoints","pointsInsideVolume","baseTopLeftCanvas","baseBottomRightCanvas","basePos1","basePos2","measureInfo","modalityUnitOptions","currentCanvasCoordinates","worldPos1Index","worldProjectionPointIndex","indexOfProjection","worldPos2Index","numSlicesToPropagateFromStart","numSlicesToPropagateToEnd","endPos","viewplaneNormalAbs","_context","PaintFillTool","currentSegmentationImageId","fixedDimension","getFixedDimension","floodFillGetter","getLabelValue","getScalarDataPositionFromPlane","inPlaneSeedPoint","fixedDimensionValue","generateHelpers","clickedLabelValue","floodFillResult","flooded","scalarDataIndex","setAtIndex","framesModified","getFramesModified","triggerSegmentationDataModified","boundaries","minJ","maxJ","seedIndex3D","getAtIJK","generateFloodFillGetter","generateGetScalarDataPositionFromPlane","getScalarDataPosition","xDirection","yDirection","zDirection","absoluteOfViewPlaneNormal","absoluteOfXDirection","absoluteOfYDirection","absoluteOfZDirection","OverlayMarkerType","OrientationMarkerTool","CUBE","AXIS","VTPFILE","OVERLAY_MARKER_TYPES","orientationWidget","viewportCorner","Corners","BOTTOM_RIGHT","viewportSize","minPixelSize","maxPixelSize","overlayMarkerType","ANNOTATED_CUBE","overlayConfiguration","faceProperties","xPlus","text","faceColor","faceRotation","xMinus","yPlus","fontColor","yMinus","zPlus","zMinus","defaultStyle","fontStyle","fontSizeScale","res","edgeThickness","edgeColor","AXES","CUSTOM","polyDataURL","initViewports","_subscribeToViewportEvents","cleanUpData","orientationMarker","orientationMarkers","updateViewport","updatingOrientationMarker","unsubscribe","unobserve","setEnabled","getOffscreenMultiRenderWindow","getRenderWindow","widget","getWidget","isDeleted","addAxisActorInViewport","removeActor","createAnnotationCube","createCustomActor","renderWindow","interactor","getInteractor","parentRenderer","setViewportCorner","setViewportSize","setMinPixelSize","setMaxPixelSize","updateMarkerOrientation","addWidget","url","response","fetch","arrayBuffer","vtpReader","parseAsArrayBuffer","shallowCopy","setActiveScalars","setColorModeToDirectScalars","rotateZ","setDefaultStyle","setXPlusFaceProperty","setXMinusFaceProperty","setYPlusFaceProperty","setYMinusFaceProperty","setZPlusFaceProperty","setZMinusFaceProperty","createAnnotatedCubeActor","annotatedCube","methodName","charAt","SegmentSelectTool","SelectMode","Inside","Border","hoverTimeout","searchRadius","hoverTimer","_setActiveSegment","getActiveSegmentation","_setActiveSegmentForType","hoveredSegmentIndex","getSegmentIndexAtWorldPoint","getSegmentIndexAtLabelmapBorder","Contour","getHoveredContourSegmentationAnnotation","Surface","setActiveSegmentIndex","triggerSegmentationModified","SegmentBidirectionalTool","BidirectionalTool","getSegmentIndexColor","dataId1","dataId2","secondLineUID","toolAnnotations","existingAnnotation","majorAxis","minorAxis","major0","major1","minor0","minor1","SegmentLabelTool","_setHoveredSegment","_setHoveredSegmentForType","_editData","hoveredSegmentLabel","LabelMapEditWithContourTool","PlanarFreehandContourSegmentationTool","annotationsToViewportMap","viewportIdsChecked","allowOpenContours","onViewportAddedToToolGroupBinded","onViewportAddedToToolGroup","onSegmentationModifiedBinded","onSegmentationModified","annotationModified","SEGMENTATION_MODIFIED","SEGMENTATION_REPRESENTATION_MODIFIED","cleanUpListeners","checkContourSegmentation","activeSeg","representations","getSegmentationRepresentation","BrushTool","viewportContoursToLabelmap","VideoRedactionTool","toolConfiguration","viewportUIDsToRender","toolDataCanvasCoordinate","rect","_getRectangleImageCoordinates","rectangle","active","drawRedactionRect","point0","viewportUID","renderingEngineUID","sceneUID","targetUIDs","targetUID","_getImageVolumeFromTargetUID","worldToIndexVec3","valueMinusMean","_getTargetVolumeUID","scene","volumeUID","getVolumeActors","coloneIndex","_getTargetStackUID","Dir","visited","DEFAULT_VALUES","publicAPI","model","initialValues","arguments","m","algo","requestData","inData","outData","output","extractContours","traverseLoop","pd","startLineId","startPtId","loopPoints","lineId","lastPtId","terminated","numInserted","cellPointIds","getCellPoints","ptId","lineCell","getPointCells","loops","inLines","setData","li","getNumberOfCells","outLines","insertNextCell","vtkContourLoopExtraction","newInstance","projectTo2D","geometricSurfaceUtils","checkStandardBasis","rotatePoints","getBoundingBoxAroundShapeWorld","isPlaneIntersectingAABB","polySegConverters","polySeg","polySegInitializing","polySegInitializingPromise","initializePolySeg","progressCallback","ICRPolySeg","moduleId","peerImport","default","initialize","updateProgress","convertContourToSurface","args","callbacks","polylines","numPointsArray","convertContourRoiToSurface","convertLabelmapToSurface","results","rotationInfo","isStandard","rotatedPoints","rotationMatrix","convertContourToVolumeLabelmap","segmentIndices","annotationUIDsInSegmentMap","segmentationVoxelManager","createScalarVolumeVoxelManager","setDimensions","setDirection","setSpacing","scalarArray","setScalars","holesPolyline","projectedPolyline","sharedDimensionIndex","holes","hole","projectedHole","firstDim","secondDim","setAtIJKPoint","point2D","convertContourToStackLabelmap","segmentationsInfo","segmentationVoxelManagers","segmentationInfo","manager","convertSurfaceToVolumeLabelmap","convertSurfaceToLabelmap","polys","convertSurfacesToVolumeLabelmap","segmentsInfo","promises","all","targetImageData","totalSize","outputVolumesInfo","extent","roundedIndex","getSurfacesAABBs","surfacesInfo","aabbs","numDimensions","cutSurfacesIntoPlanes","planesInfo","surfacesAABB","updateCacheCallback","numberOfPlanes","cutter","plane1","setCutFunction","surfacePolyData","planeInfo","sliceIndex","polyDataResults","polyDataInfo","aabb3","getPolys","setNormal","getNumberOfPoints","cutterOutput","buildLinks","loopExtraction","loopOutput","numberOfCells","loopError","progress","VIEWPORT_ELEMENT","getSvgNode","canvasHash","cacheKey","svgNodeCache","domRef","appendNode","svgLayerElement","svgNode","touched","setNodeTouched","clearUntouched","cacheEntry","internalDivElement","_getSvgLayer","svgNodeCacheForCanvas","fn","strokeWidth","svgNodeHash","existingCircleElement","attributes","stroke","newCircleElement","createElementNS","existingEllipse","rx","ry","svgEllipseElement","linkUID","annotationAnchorPoints","refPoint","findClosestPoint","boundingBoxPoints","halfWidth","halfHeight","_boundingBoxPoints","centering","canvasBoundingBox","midX","endfirstLine","endsecondLine","threeLine","zIndex","_getHash","existingFanElement","startRad","endRad","centerX","centerY","outerStartX","outerStartY","outerEndX","outerEndY","innerStartX","innerStartY","largeArcFlag","pathData","setAttributesIfNecessary","newFanElement","setNewAttributesIfValid","svgns","headLength","legacyDrawArrow","markerFullId","defs","arrowMarker","arrowPath","markerEndId","_width","existingRect","svgRectElement","Swipe","renderers","planarContourToolName","triggerSegmentationRender","segmentationRenderingEngine","renderSegmentationsForViewport","_needsRender","_pendingRenderQueue","_animationFrameSet","_animationFrameHandle","_getAllViewports","_renderFlaggedSegmentations","_throwIfDestroyed","_triggerRender","nextViewportIds","shift","_setViewportsToBeRenderedNextFrame","_getViewportIdsForSegmentation","renderSegmentation","segmentationRepresentations","_render","viewportRenderList","segmentationRenderList","representation","_addPlanarFreeHandToolIfAbsent","allSettled","segmentationDetails","status","onSegmentationRender","SEGMENTATION_RENDERED","hasTool","addTool","initialDefaultState","colorLUT","segmentations","viewportSegRepresentations","internalComputeVolumeLabelmapFromStack","segmentationImageIds","volumeLoader","internalConvertStackToVolumeLabelmap","defaultSegmentationStateManager","getDefaultRenderingConfig","_stackLabelmapImageIdReferenceMap","_labelmapImageIdReferenceMap","freeze","getState","updateState","updater","newState","getColorLUT","lutIndex","getNextColorLUTIndex","resetState","updateSegmentation","draftState","addSegmentation","newSegmentation","getLabelmapImageIds","removeSegmentation","filteredSegmentations","triggerSegmentationRemoved","addSegmentationRepresentation","renderingConfig","getSegmentationRepresentations","setRenderInactiveSegmentations","addDefaultSegmentationRepresentation","addLabelmapRepresentation","triggerSegmentationRepresentationModified","segmentReps","colorLUTIndex","_setActiveSegmentation","processLabelmapRepresentationAddition","isBaseVolumeSegmentation","updateLabelmapSegmentationImageReferences","_updateLabelmapSegmentationReferences","labelmapImageIds","updateCallback","referenceImageId","viewableLabelmapImageIdFound","labelmapImageId","isReferenceViewable","asOverlay","_updateLabelmapImageIdReferenceMap","_updateAllLabelmapSegmentationImageReferences","withNavigation","getLabelmapImageIdsForImageId","_generateMapKey","getCurrentLabelmapImageIdsForViewport","getStackSegmentationImageIdsForViewport","associatedReferenceImageAndLabelmapImageIds","removeSegmentationRepresentationsInternal","specifier","removedRepresentations","currentRepresentations","activeRepresentationRemoved","shouldRemove","removeSegmentationRepresentations","triggerSegmentationRepresentationRemoved","remainingRepresentations","removeSegmentationRepresentation","suppressEvent","currentValues","newValues","setActiveSegmentation","activeSegRep","segRep","viewportRepresentations","typeMatch","idMatch","getSegmentationRepresentationVisibility","viewportRepresentation","setSegmentationRepresentationVisibility","addColorLUT","removeColorLUT","_getStackIdForImageIds","getAllViewportSegmentationRepresentations","getSegmentationRepresentationsBySegmentationId","viewportReps","filteredReps","segmentationStyle","global","viewportsStyle","setStyle","styles","currentStyles","updatedStyles","copyActiveToInactiveIfNotProvided","renderInactiveSegmentations","repConfig","perSegment","allSegments","ALL_SEGMENTATIONS_KEY","segConfig","processedStyles","labelmapStyles","renderOutlineInactive","renderOutline","outlineWidthInactive","outlineWidth","renderFillInactive","renderFill","fillAlphaInactive","fillAlpha","outlineOpacityInactive","outlineOpacity","contourStyles","outlineDashInactive","outlineDash","combinedStyle","getDefaultStyle","allSegmentationsKey","getRenderInactiveSegmentations","clearSegmentationStyle","clearAllSegmentationStyles","clearViewportStyle","clearAllViewportStyles","resetToGlobalStyle","hasCustomStyle","segmentationStateManager","indexToUse","colorLUTToUse","missingColorLUTs","segmentationInputArray","segmentationInput","addContourRepresentationToViewport","contourInputArray","inputData","contourData","geometryIds","annotationUIDsMap","normalizedSegments","segmentsConfig","rest","normalizedSegment","geometryId","geometry","getGeometry","normalizeContourSegments","surfaceData","normalizeSurfaceSegments","normalizeSegments","addSegmentations","setColorLUT","colorLUTsIndex","segmentationRepresentation","colorValue","setSegmentIndexColor","colorReference","modifiedSlicesToUse","SEGMENTATION_DATA_MODIFIED","getSegmentations","getViewportSegmentations","getViewportSegmentationRepresentations","convertVolumeToStackLabelmap","segmentationVolume","computeVolumeLabelmapFromStack","internalAddSegmentationRepresentation","representationInput","getColorLUTIndex","getActiveSegmentIndex","firstSegmentIndex","segmentKeys","colorLUTOrIndex","parse","rep","removeAllSegmentations","immediate","_removeSegmentationRepresentations","labelmapDisplay","contourDisplay","removeRepresentation","surfaceDisplay","_removeRepresentationObject","removeAllSegmentationRepresentations","removeLabelmapRepresentation","removeContourRepresentation","removeSurfaceRepresentation","isSegmentIndexLocked","setSegmentIndexLocked","getAnnotationsUIDMapFromSegmentation","annotationUIDs","setAnnotationLocked","_setContourSegmentationSegmentAnnotationsLocked","getLockedSegmentIndices","destroy","contourRepresentationData","re","toolGroupFilteredByIds","tg","firstLineSegmentLength","longAxis","shortAxisPoint0","shortAxisPoint1","longAxisVector","counterClockWisePerpendicularToLongAxis","currentShortAxisVector","shortAxis","canvasCoordPoints","shortAxisDistFromCenter","vectorX","vectorY","xMid","yMid","startX","startY","endX","endY","_dragModifyHandle","movingHandleIndex","canvasCoordHandlesCurrent","firstLineSegment","secondLineSegment","proposedPoint","proposedCanvasCoord","fixedHandleCanvasCoord","fixedHandleToProposedCoordVec","fixedHandleToOldCoordVec","proposedFirstLineSegment","_movingLongAxisWouldPutItThroughShortAxis","centerOfRotation","_getSignedAngle","firstPointX","firstPointY","secondPointX","secondPointY","rotatedFirstPoint","rotatedFirstPointY","rotatedSecondPoint","rotatedSecondPointY","newFirstPoint","newSecondPoint","translateHandleIndex","canvasCoordsCurrent","longLineSegment","shortLineSegment","longLineSegmentVec","longLineSegmentVecNormalized","proposedToCurrentVec","movementLength","movementAlongLineSegmentLength","newTranslatedPoint","vectorInSecondLineDirection","extendedSecondLineSegment","worldPos4","index3","index4","handles1","handles2","scale1","scale2","widthUnit","vector1","vector2","renderResult","pointCanProjectOnLine","PlanarFreehandROITool","alwaysRenderOpenContourHandles","closeContourProximity","checkCanvasEditFallbackProximity","makeClockWise","subPixelResolution","smoothing","smoothOnAdd","smoothOnEdit","knotsRatioPercentageOnAdd","knotsRatioPercentageOnEdit","displayOnePointAsCrosshairs","isEditingClosed","isEditingOpen","activateDraw","activateOpenContourEndEdit","activateClosedContourEdit","activateOpenContourEdit","previousPoint","pStart","pEnd","cancelDrawing","cancelOpenContourEdit","cancelClosedContourEdit","calibratedScale","numPoints","updateClosedCachedStats","updateOpenCachedStats","annotationsToDisplay","filterAnnotationsWithinSlice","filterAnnotationsForDisplay","annotationsWithParallelNormals","td","annotationViewPlaneNormal","vector","annotationsWithinSlice","renderContourBeingDrawn","renderClosedContourBeingEdited","renderOpenContourBeingEdited","renderPointContourWithMarker","renderContour","_calculateStatsIfActive","worldPosIndex","worldPosIndex2","iDelta","jDelta","kDelta","ceil","worldPosEnd","canvasPosEnd","curRow","intersectionCounter","_pointIJK","getLineSegmentIntersectionsCoordinates","RectangleROITool","FILL_INSIDE_CIRCLE","ERASE_INSIDE_CIRCLE","FILL_INSIDE_SPHERE","ERASE_INSIDE_SPHERE","THRESHOLD_INSIDE_CIRCLE","THRESHOLD_INSIDE_SPHERE","THRESHOLD_INSIDE_SPHERE_WITH_ISLAND_REMOVAL","brushSize","useCenterSegmentIndex","preview","previewColors","previewTimeMs","previewMoveDistance","dragMoveDistance","dragTimeMs","StrategyCallbacks","AcceptPreview","RejectPreview","Interpolate","useBallStructuringElement","noUseDistanceTransform","noUseExtrapolation","interpolateExtrapolation","_lastDragInfo","createEditData","_previewData","isDrag","timerStart","Date","now","hoverData","_hoverData","createHoverData","getOperationData","applyActiveStrategyCallback","OnInteractionStart","timer","time","rejectPreview","previewCallback","strategyData","strategy","Preview","currentCanvas","currentWorld","_calculateCursor","strokePointsWorld","currentCanvasClone","OnInteractionEnd","acceptPreview","viewRight","centerCursorInWorld","bottomCursorInWorld","topCursorInWorld","leftCursorInWorld","rightCursorInWorld","brushCursor","computeInnerCircleRadius","GetStatistics","interpolate","invalidateBrushCursor","getActiveSegmentationData","brushCursorUID","centerSegmentIndexInfo","dynamicRadiusInCanvas","circleUID1","previewData","NaN","memoMap","acceptedMemoIds","hasSegmentIndex","hasPreviewIndex","changedIndices","_historyRedoHandler","memoData","hasPreviewData","shouldResolvePreviewRequests","voxelManagerId","redoVoxelManager","ERROR_EVENT","message","cancelable","actors","volumes","referencedVolumeIdToThreshold","activeRepresentation","configColor","previewColor","previewSegmentIndex","factor","lightenColor","previewOnHover","addPreview","acceptReject","AddPreview","removeContours","viewAnnotations","contourAnnotations","fillInsideCircle","previewVoxels","segmentationVoxels","sourceVoxelManager","bound","activeIndex","startIndex","startValue","hasZeroIndex","hasPositiveIndex","polyPoint","polyIndex","polyValue","isPointInsidePolyline3D","setAtIJK","slices","getArrayOfModifiedSlices","getEllipseCornersFromCanvasCoordinates","initializeCircle","Initialize","segmentationImageData","centerIJK","brushRadius","cornersInWorld","normalizedViewUp","normalizedPlaneNormal","strokeCenters","strokeCornersWorld","centerVec","createCircleCornersForCenter","circleCornersIJK","getBoundingBoxAroundShapeIJK","createPointInEllipse","isInObjectBoundsIJK","majorAxisVec","minorAxisVec","radiusForStroke","strokePredicate","centers","radiusSquared","centerVecs","lengthSquared","projX","projY","projZ","distX","distY","distZ","createStrokePredicate","sphereObj","radius2","pointVec","distToPlane","proj","fromTopLeft","centerToTopLeft","CIRCLE_STRATEGY","regionFill","setValue","determineSegmentIndex","labelmapStatistics","CIRCLE_THRESHOLD_STRATEGY","dynamicThreshold","strategyFunction","thresholdInsideCircle","initializeRectangle","rectangleCornersIJK","coord","axisU","axisV","uLen","vLen","EPS","vproj","createPointInRectangle","RECTANGLE_STRATEGY","RECTANGLE_THRESHOLD_STRATEGY","fillInsideRectangle","getClosestImageIdForStackViewport","ImagePositionPatient","calculateDistanceToImage","numSlicesToProject","sliceNormalIndex","calculateBoundingBox","isWorld","is3D","clipBounds","DEFAULT_CONTOUR_SEG_TOOL_NAME","removeContourSegmentationAnnotation","endPointWorld","originalToolName","interpolationUID","interpolationCompleted","addContourSegmentationAnnotation","closestDistance","testIndex","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","useRAF","TypeError","invokeFunc","thisArg","startTimer","pendingFunc","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","timeSinceLastInvoke","timeWaiting","remainingWait","debounced","isInvoking","leadingEdge","cancelAnimationFrame","cancelTimer","flush","pending","annotationCanvasPoints","handlesLeftToRight","_compareX","handlesTopToBottom","_compareY","_determineCorners","PIXEL_UNITS","VOXEL_UNITS","SUPPORTED_REGION_DATA_TYPES","SUPPORTED_LENGTH_VARIANT","SUPPORTED_PROBE_VARIANT","UNIT_MAPPING","SQUARE","getCalibratedLengthUnitsAndScale","hasPixelSpacing","volumeUnit","calibrationType","sequenceOfUltrasoundRegions","UNCALIBRATED","regions","region","regionLocationMinX0","regionLocationMaxX1","regionLocationMinY0","regionLocationMaxY1","regionDataType","physicalUnitsXDirection","physicalUnitsYDirection","physicalDeltaX","physicalDeltaY","USER","ERROR","getCalibratedProbeUnitsAndValue","supportedRegionsMetadata","referencePixelX0","referencePixelY0","yValue","getCalibratedAspect","_getSphereBoundsInfo","circlePoints","directionVectors","radiusWorld","rowCosine","columnCosine","vecNormal","topLeftIJK","bottomRightIJK","pointsIJK","_computeBoundsIJK","getSphereBoundsInfo","scanAxis","getSphereBoundsInfoFromViewport","getViewportForAnnotation","pointInSphere","sphere","SegmentStatsCalculator","calculators","indices","statsInit","statsData","calculator","lpad","string","character","seed","onBoundary","equals","startNode","permutations","perms","permutation","permute","perm","countNonZeroes","prunedPermutations","visits","currentArgs","job","getArgs","prevArgs","previousArgs","iKey","markAsVisited","member","markAsFlooded","nextArgs","pushAdjacent","markAsBoundary","getBrushToolInstances","toolInstances","indexIJK","onEdge","getNeighborIndex","deltaI","deltaJ","neighborCanvas","isSegmentOnEdge","isSegmentOnEdgeCanvas","segmentationActorEntry","deltaK","neighborIJK","isSegmentOnEdgeIJK","neighborRange","neighborIndex","desiredRepresentation","representationType","getScalarValueFromWorld","getSegmentIndexAtWorldForLabelmap","annotationsSet","getSegmentIndexAtWorldForContour","WEBGPU_MEMORY_LIMIT","DEFAULT_GROWCUT_OPTIONS","windowSize","maxProcessingTime","inspection","numCyclesInterval","numCyclesBelowThreshold","referenceVolumeId","workGroupSize","labelmap","numIterations","volumePixelData","requiredLimits","maxStorageBufferBindingSize","maxBufferSize","adapter","navigator","gpu","requestAdapter","device","requestDevice","BUFFER_SIZE","UPDATED_VOXELS_COUNTER_BUFFER_SIZE","Uint32Array","BYTES_PER_ELEMENT","BOUNDS_BUFFER_SIZE","Int32Array","shaderModule","createShaderModule","code","paramsArrayValues","gpuParamsBuffer","createBuffer","usage","GPUBufferUsage","UNIFORM","COPY_DST","gpuVolumePixelDataBuffer","STORAGE","queue","writeBuffer","gpuLabelmapBuffers","COPY_SRC","gpuStrengthBuffers","gpuCounterBuffer","gpuBoundsBuffer","initialBounds","bindGroupLayout","createBindGroupLayout","binding","GPUShaderStage","COMPUTE","bindGroups","outputLabelmapBuffer","outputStrengthBuffer","previouLabelmapBuffer","previousStrengthBuffer","createBindGroup","layout","resource","pipeline","createComputePipeline","createPipelineLayout","bindGroupLayouts","compute","module","entryPoint","constants","workGroupSizeX","workGroupSizeY","workGroupSizeZ","numWorkGroups","gpuUpdatedVoxelsCounterStagingBuffer","MAP_READ","limitProcessingTime","performance","currentInspectionNumCyclesInterval","belowThresholdCounter","commandEncoder","createCommandEncoder","passEncoder","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","copyBufferToBuffer","submit","finish","mapAsync","GPUMapMode","READ","updatedVoxelsCounterResultBuffer","getMappedRange","updatedVoxelsRatio","unmap","outputLabelmapBufferIndex","labelmapStagingBuffer","boundsStagingBuffer","labelmapResultBuffer","labelmapResult","boundsResultBuffer","boundsResult","clearBounds","setBounds","POSITIVE_SEED_VALUE","NEGATIVE_SEED_VALUE","_createAndCacheSegmentationSubVolumeForBoundingBox","subVolPixelData","startSliceIndex","stopSliceIndex","pixelsPerSlice","zOffset","_setPositiveSeedValues","sliceOffset","bfs","slicePixelIndex","volumeVoxelIndex","volumeVoxelValue","scanLine","limitX","incX","_setNegativeSeedValues","runGrowCutForBoundingBox","subVolumeBoundsIJK","POSITIVE_SEED_VARIANCE","NEGATIVE_SEED_VARIANCE","vecColumn","sphereCenterPoint","refVolImageData","topCirclePoint","bottomCirclePoint","sphereBoundsInfo","_getGrowCutSphereBoundsInfo","_createAndCacheSegmentationSubVolumeForSphere","refVolumePixelData","worldStartPos","ijkStartPosition","referencePixelValue","positiveSeedVarianceValue","minPositivePixelValue","maxPositivePixelValue","neighborsCoordDelta","startVoxelIndex","ijkVoxel","neighborCoordDelta","nz","neighborVoxelIndex","neighborPixelValue","ijkSphereCenter","negativeSeedVarianceValue","minNegativePixelValue","maxNegativePixelValue","rotationAngle","worldQuat","vecRotation","worldCircleBorderPoint","ijkCircleBorderPoint","runGrowCutForSphere","vec","sphereBoundsIJK","_createSubVolumeFromSphere","MAX_POSITIVE_SEEDS","calculateGrowCutSeeds","refImageData","referenceVolumeVoxelManager","neighborhoodRadius","initialNeighborhoodRadius","positiveK","positiveStdDevMultiplier","negativeK","negativeStdDevMultiplier","negativeSeedMargin","negativeSeedsTargetPatches","ijkStart","initialStats","positiveIntensityMin","positiveIntensityMax","currentQueueIndex","neighborValue","positiveSum","positiveSumSq","positiveCount","positiveMean","positiveVariance","negativeDiffThreshold","minXm","minYm","minZm","maxXm","maxYm","maxZm","attempts","patchesAdded","maxAttempts","rz","centerValue","patchContributed","runOneClickGrowCut","positiveSeedLabel","negativeSeedLabel","tool","getViewportsInfo","getDeltaPoints","curr","getMeanPoints","_subtractPoints2D","getDeltaDistance","_getDistance2D","_getDistance3D","getDeltaDistanceBetweenIPoints","_getMeanDistanceBetweenAllIPoints","lastDistance","copyPointsList","copyPoints","getMeanTouchPoints","touch","identifier","radiusX","radiusY","force","pairedDistance","triggerAnnotationRenderForToolGroupIds","toolGroupIds","DesiredOutputPrecision","DEFAULT","SINGLE","DOUBLE","Constants","AttributeCopyOperations","COPYTUPLE","INTERPOLATE","PASSDATA","ALLCOPY","AttributeLimitTypes","MAX","EXACT","NOLIMIT","AttributeTypes","SCALARS","VECTORS","NORMALS","TCOORDS","TENSORS","GLOBALIDS","PEDIGREEIDS","EDGEFLAG","NUM_ATTRIBUTES","CellGhostTypes","DUPLICATECELL","HIGHCONNECTIVITYCELL","LOWCONNECTIVITYCELL","REFINEDCELL","EXTERIORCELL","HIDDENCELL","PointGhostTypes","DUPLICATEPOINT","HIDDENPOINT","ghostArrayName","vtkErrorMacro","dataDescription","EMPTY","Float64Array","setGetArray","getArray","classHierarchy","setExtent","deleted","_len","inExtent","_key","extentArray","changeDetected","dims","nCells","SINGLE_POINT","X_LINE","Y_LINE","Z_LINE","XY_PLANE","YZ_PLANE","XZ_PLANE","XYZ_GRID","coords","getSpatialExtent","ex","computeTransforms","ain","aout","indexToWorldVec3","indexToWorldBounds","bin","bout","worldToIndexBounds","onModified","getCenter","computeHistogram","voxelFunction","yStride","zStride","pixels","maximum","minimum","sumOfSquares","isum","inum","average","sigma","computeIncrements","increments","incr","computeOffsetIndex","_ref","getNumberOfComponents","getOffsetIndexFromWorld","offsetIndex","getComponent","vtkImageData$1","ColorSpace","Scale","ScalarMappingTarget","vtkDebugMacro","vtkWarningMacro","vtkColorTransferFunctionLabToMsh","lab","msh","L","M","vtkColorTransferFunctionAdjustHue","unsatM","hueSpin","vtkColorTransferFunctionInterpolateDiverging","rgb1","rgb2","lab1","lab2","msh1","msh2","localS","adiff","vtkColorTransferFunctionAngleDiff","Mmid","mshTmp","labTmp","vtkColorTransferFunctionMshToLab","clamping","colorSpace","RGB","hSVWrap","nanColor","belowRangeColor","aboveRangeColor","useAboveRangeColor","useBelowRangeColor","allowDuplicateScalars","tableSize","buildTime","discretize","numberOfValues","setGet","enum","setArray","addRGBPointLong","sharpness","removePoint","sortAndUpdateRange","addHSVPoint","addHSVPointLong","rgb","hsv","setNodes","before","after","modifiedInvoked","updateRange","oldRange","mappingRange","retVal","movePoint","oldX","newX","addRGBSegment","r1","g1","r2","g2","addHSVSegment","h1","s1","h2","hsv1","hsv2","mapValue","indexedLookup","numNodes","getAnnotatedValueIndexInternal","getNanColorByReference","nodeVal","getRedValue","getGreenValue","getBlueValue","xStart_","xEnd_","xStart","xEnd","lastR","lastG","lastB","tmpVec","usingLogScale","LOG10","logStart","logEnd","logX","log10","tidx","deltaRange","xn","discretizeIndex","getUseAboveRangeColor","getUseBelowRangeColor","HSV","hsvTmp","LAB","DIVERGING","ss","sss","h3","h4","getUint8Table","withAlpha","getMTime","tableWithAlpha","nbChannels","tmpTable","numComponents","getNumberOfTuples","buildFunctionFromTable","getNumberOfAvailableColors","nNodes","getIndexedColor","nodeValue","fillFromDataPointer","nb","ptr","originalRange","adjustRange","functionRange","estimateMinNumberOfSamples","findMinimumXDistance","currentDist","mapScalarsThroughTable","outFormat","inputOffset","mapDataIndexed","alpha","getAlpha","inIncr","outputV","inputV","RGBA","LUMINANCE","LUMINANCE_ALPHA","colorMap","oldColorSpace","isModified","oldNanColor","NanColor","oldNodes","callModified","vtkColorTransferFunction","vtkColorTransferFunction$1","out","fromValues","copy","subtract","multiply","divide","scaleAndAdd","squaredDistance","squaredLength","negate","inverse","normalize","bx","by","bz","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","q","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","rotateX","rotateY","mag","cosine","zero","exactEquals","a0","b0","mul","div","sqrDist","sqrLen","stride","arg","l","bisector","compare1","compare2","lo","hi","mid","zip","interpolator","samples"],"sourceRoot":""}