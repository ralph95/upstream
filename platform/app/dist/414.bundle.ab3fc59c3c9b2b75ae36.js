"use strict";(globalThis.webpackChunk=globalThis.webpackChunk||[]).push([[414,8402],{11026:(e,t,r)=>{r.d(t,{A:()=>c,v:()=>o});var a=r(40680);const n=-1,s=0,i=3,o={STANDARD:"standard",SIMPLIFIED:"simplified",NONE:"none"};const c=function({servicesManager:e,extensionManager:t},r,c){const{uiViewportDialogService:d,customizationService:u}=e.services,l=t._appConfig,{viewportId:S,StudyInstanceUID:p,SeriesInstanceUID:m}=c.data||c;return new Promise(async function(e,t){const r=l?.measurementTrackingMode===o.STANDARD;let c;c=l?.measurementTrackingMode===o.NONE?n:r?await function(e,t,r){return new Promise(function(o,c){const d=t.getCustomization("viewportNotification.beginTrackingMessage"),u=[{id:"prompt-begin-tracking-cancel",type:"secondary",text:a.A.t("Common:No"),value:s},{id:"prompt-begin-tracking-no-do-not-ask-again",type:"secondary",text:a.A.t("MeasurementTable:No, do not ask again"),value:n},{id:"prompt-begin-tracking-yes",type:"primary",text:a.A.t("Common:Yes"),value:i}],l=t=>{e.hide(),o(t)};e.show({viewportId:r,id:"measurement-tracking-prompt-begin-tracking",type:"info",message:d,actions:u,onSubmit:l,onOutsideClick:()=>{e.hide(),o(s)},onKeyPress:e=>{if("Enter"===e.key){const e=u.find(e=>"prompt-begin-tracking-yes"===e.id);l(e.value)}}})})}(d,u,S):i,e({userResponse:c,StudyInstanceUID:p,SeriesInstanceUID:m,viewportId:S})})}},55844:(e,t,r)=>{r.d(t,{A:()=>P,B:()=>b});var a=r(86326),n=r(97598),s=r.n(n),i=r(70574),o=r(95261),c=r(96283);const d=-1,u=0,l=1,S=2,p=3,m=4,g=5,I={id:"measurementTracking",initial:"idle",context:{activeViewportId:null,trackedStudy:"",trackedSeries:[],ignoredSeries:[],prevTrackedStudy:"",prevTrackedSeries:[],prevIgnoredSeries:[],ignoredSRSeriesForHydration:[],isDirty:!1},states:{off:{type:"final"},labellingOnly:{on:{TRACK_SERIES:[{target:"promptLabelAnnotation",actions:["setPreviousState"]}]}},idle:{entry:"clearContext",on:{TRACK_SERIES:[{target:"promptLabelAnnotation",cond:"isLabelOnMeasure",actions:["setPreviousState"]},{target:"promptBeginTracking",actions:["setPreviousState"]}],SET_TRACKED_SERIES:[{target:"tracking",actions:["setTrackedStudyAndMultipleSeries","setIsDirtyToClean"]}],PROMPT_HYDRATE_SR:{target:"promptHydrateStructuredReport",cond:"hasNotIgnoredSRSeriesForHydration"},RESTORE_PROMPT_HYDRATE_SR:"promptHydrateStructuredReport",HYDRATE_SR:"hydrateStructuredReport",UPDATE_ACTIVE_VIEWPORT_ID:{actions:(0,i.kp)({activeViewportId:(e,t)=>t.activeViewportId})}}},promptBeginTracking:{invoke:{src:"promptBeginTracking",onDone:[{target:"tracking",actions:["setTrackedStudyAndSeries","setIsDirty"],cond:"shouldSetStudyAndSeries"},{target:"labellingOnly",cond:"isLabelOnMeasureAndShouldKillMachine"},{target:"off",cond:"shouldKillMachine"},{target:"idle"}],onError:{target:"idle"}}},tracking:{on:{TRACK_SERIES:[{target:"promptLabelAnnotation",cond:"isLabelOnMeasure",actions:["setPreviousState"]},{target:"promptTrackNewStudy",cond:"isNewStudy"},{target:"promptTrackNewSeries",cond:"isNewSeries"}],UNTRACK_SERIES:[{target:"tracking",actions:["removeTrackedSeries","setIsDirty","clearDisplaySetHydratedState"],cond:"hasRemainingTrackedSeries"},{target:"idle"}],UNTRACK_ALL:[{target:"tracking",actions:["clearContext","setIsDirtyToClean","clearDisplaySetHydratedState","clearAllMeasurements"]}],SET_TRACKED_SERIES:[{target:"tracking",actions:["setTrackedStudyAndMultipleSeries"]}],SAVE_REPORT:"promptSaveReport",SET_DIRTY:[{target:"tracking",actions:["setIsDirty"],cond:"shouldSetDirty"},{target:"tracking"}],CHECK_DIRTY:{target:"promptHasDirtyAnnotations",cond:"hasDirtyAndSimplified"},PROMPT_HYDRATE_SR:{target:"promptHydrateStructuredReport",cond:"isSimplifiedConfig",actions:["clearAllMeasurements","clearDisplaySetHydratedState"]}}},promptTrackNewSeries:{invoke:{src:"promptTrackNewSeries",onDone:[{target:"tracking",actions:["addTrackedSeries","setIsDirty"],cond:"shouldAddSeries"},{target:"tracking",actions:["discardPreviouslyTrackedMeasurements","setTrackedStudyAndSeries","setIsDirty"],cond:"shouldSetStudyAndSeries"},{target:"promptSaveReport",cond:"shouldPromptSaveReport"},{target:"tracking"}],onError:{target:"idle"}}},promptTrackNewStudy:{invoke:{src:"promptTrackNewStudy",onDone:[{target:"tracking",actions:["discardPreviouslyTrackedMeasurements","setTrackedStudyAndSeries","setIsDirty"],cond:"shouldSetStudyAndSeries"},{target:"tracking",actions:["ignoreSeries"],cond:"shouldAddIgnoredSeries"},{target:"promptSaveReport",cond:"shouldPromptSaveReport"},{target:"tracking"}],onError:{target:"idle"}}},promptSaveReport:{invoke:{src:"promptSaveReport",onDone:[{target:"tracking",actions:["clearAllMeasurements","clearDisplaySetHydratedState","setIsDirty","updatedViewports"],cond:"simplifiedAndLoadSR"},{target:"idle",actions:["clearAllMeasurements","showStructuredReportDisplaySetInActiveViewport"],cond:"shouldSaveAndContinueWithSameReport"},{target:"tracking",actions:["discardPreviouslyTrackedMeasurements","setTrackedStudyAndSeries"],cond:"shouldSaveAndStartNewReport"},{target:"tracking"}],onError:{target:"idle"}}},promptHydrateStructuredReport:{invoke:{src:"promptHydrateStructuredReport",onDone:[{target:"tracking",actions:["setTrackedStudyAndMultipleSeries","jumpToSameImageInActiveViewport","setIsDirtyToClean"],cond:"shouldHydrateStructuredReport"},{target:"idle",actions:["ignoreHydrationForSRSeries"],cond:"shouldIgnoreHydrationForSR"}],onError:{target:"idle"}}},hydrateStructuredReport:{invoke:{src:"hydrateStructuredReport",onDone:[{target:"tracking",actions:["setTrackedStudyAndMultipleSeries","jumpToSameImageInActiveViewport","setIsDirtyToClean"]}],onError:{target:"idle"}}},promptLabelAnnotation:{invoke:{src:"promptLabelAnnotation",onDone:[{target:"labellingOnly",cond:"wasLabellingOnly"},{target:"promptBeginTracking",cond:"wasIdle"},{target:"promptTrackNewStudy",cond:"wasTrackingAndIsNewStudy"},{target:"promptTrackNewSeries",cond:"wasTrackingAndIsNewSeries"},{target:"tracking",cond:"wasTracking"},{target:"off"}]}},promptHasDirtyAnnotations:{invoke:{src:"promptHasDirtyAnnotations",onDone:[{target:"tracking",actions:["clearAllMeasurements","clearDisplaySetHydratedState","setIsDirty","updatedViewports"],cond:"shouldSetStudyAndSeries"},{target:"promptSaveReport",cond:"shouldPromptSaveReport"},{target:"tracking"}]}}},strict:!0},y={services:{promptBeginTracking:(e,t)=>{},promptTrackNewStudy:(e,t)=>{},promptTrackNewSeries:(e,t)=>{}},actions:{discardPreviouslyTrackedMeasurements:(e,t)=>{console.log("discardPreviouslyTrackedMeasurements: not implemented")},clearAllMeasurements:(e,t)=>{console.log("clearAllMeasurements: not implemented")},jumpToFirstMeasurementInActiveViewport:(e,t)=>{console.warn("jumpToFirstMeasurementInActiveViewport: not implemented")},showStructuredReportDisplaySetInActiveViewport:(e,t)=>{console.warn("showStructuredReportDisplaySetInActiveViewport: not implemented")},clearContext:(0,i.kp)({trackedStudy:"",trackedSeries:[],ignoredSeries:[],prevTrackedStudy:"",prevTrackedSeries:[],prevIgnoredSeries:[]}),setTrackedStudyAndSeries:(0,i.kp)((e,t)=>({prevTrackedStudy:e.trackedStudy,prevTrackedSeries:e.trackedSeries.slice(),prevIgnoredSeries:e.ignoredSeries.slice(),trackedStudy:t.data.StudyInstanceUID,trackedSeries:[t.data.SeriesInstanceUID],ignoredSeries:[]})),setTrackedStudyAndMultipleSeries:(0,i.kp)((e,t)=>{const r=t.StudyInstanceUID||t.data.StudyInstanceUID,a=t.SeriesInstanceUIDs||t.data.SeriesInstanceUIDs;return{prevTrackedStudy:e.trackedStudy,prevTrackedSeries:e.trackedSeries.slice(),prevIgnoredSeries:e.ignoredSeries.slice(),trackedStudy:r,trackedSeries:[...e.trackedSeries,...a],ignoredSeries:[]}}),setIsDirtyToClean:(0,i.kp)((e,t)=>({isDirty:!1})),setIsDirty:(0,i.kp)((e,t)=>({isDirty:!0})),ignoreSeries:(0,i.kp)((e,t)=>({prevIgnoredSeries:[...e.ignoredSeries],ignoredSeries:[...e.ignoredSeries,t.data.SeriesInstanceUID]})),ignoreHydrationForSRSeries:(0,i.kp)((e,t)=>({ignoredSRSeriesForHydration:[...e.ignoredSRSeriesForHydration,t.data.srSeriesInstanceUID]})),addTrackedSeries:(0,i.kp)((e,t)=>({prevTrackedSeries:[...e.trackedSeries],trackedSeries:[...e.trackedSeries,t.data.SeriesInstanceUID]})),removeTrackedSeries:(0,i.kp)((e,t)=>({prevTrackedSeries:e.trackedSeries.slice().filter(e=>e!==t.SeriesInstanceUID),trackedSeries:e.trackedSeries.slice().filter(e=>e!==t.SeriesInstanceUID)})),setPreviousState:(0,i.kp)((e,t,r)=>({prevState:r.state.value}))},guards:{shouldSetDirty:(e,t)=>void 0===t.SeriesInstanceUID||e.trackedSeries.includes(t.SeriesInstanceUID),wasLabellingOnly:(e,t,r)=>"labellingOnly"===e.prevState,wasIdle:(e,t,r)=>"idle"===e.prevState,wasTracking:(e,t,r)=>"tracking"===e.prevState,wasTrackingAndIsNewStudy:(e,t,r)=>"tracking"===e.prevState&&!e.ignoredSeries.includes(t.data.SeriesInstanceUID)&&e.trackedStudy!==t.data.StudyInstanceUID,wasTrackingAndIsNewSeries:(e,t,r)=>"tracking"===e.prevState&&!e.ignoredSeries.includes(t.data.SeriesInstanceUID)&&!e.trackedSeries.includes(t.data.SeriesInstanceUID),shouldKillMachine:(e,t)=>t.data&&t.data.userResponse===d,shouldAddSeries:(e,t)=>t.data&&t.data.userResponse===S,shouldSetStudyAndSeries:(e,t)=>t.data&&t.data.userResponse===p,shouldAddIgnoredSeries:(e,t)=>t.data&&t.data.userResponse===m,shouldPromptSaveReport:(e,t)=>t.data&&t.data.userResponse===l,shouldIgnoreHydrationForSR:(e,t)=>t.data&&t.data.userResponse===u,shouldSaveAndContinueWithSameReport:(e,t)=>t.data&&t.data.userResponse===l&&!0===t.data.isBackupSave,shouldSaveAndStartNewReport:(e,t)=>t.data&&t.data.userResponse===l&&!1===t.data.isBackupSave,shouldHydrateStructuredReport:(e,t)=>t.data&&t.data.userResponse===g,hasRemainingTrackedSeries:(e,t)=>e.trackedSeries.length>1||!e.trackedSeries.includes(t.SeriesInstanceUID),hasNotIgnoredSRSeriesForHydration:(e,t)=>!e.ignoredSRSeriesForHydration.includes(t.SeriesInstanceUID),isNewStudy:(e,t)=>!e.ignoredSeries.includes(t.SeriesInstanceUID)&&e.trackedStudy!==t.StudyInstanceUID,isNewSeries:(e,t)=>!e.ignoredSeries.includes(t.SeriesInstanceUID)&&!e.trackedSeries.includes(t.SeriesInstanceUID)}};var v=r(11026),k=r(34113);const D=function({servicesManager:e,extensionManager:t,commandsManager:r,appConfig:a},n,s){const{displaySetService:i}=e.services,{viewportId:o,displaySetInstanceUID:c}=s,d=i.getDisplaySetByUID(c);return new Promise((n,i)=>{const u=(0,k.hydrateStructuredReport)({servicesManager:e,extensionManager:t,commandsManager:r,appConfig:a},c),l=u.StudyInstanceUID,S=u.SeriesInstanceUIDs;n({displaySetInstanceUID:s.displaySetInstanceUID,srSeriesInstanceUID:d.SeriesInstanceUID,viewportId:o,StudyInstanceUID:l,SeriesInstanceUIDs:S})})};var M=r(45981);const T=({servicesManager:e,extensionManager:t},r,a)=>{const{customizationService:n}=e.services;return n.getCustomization("measurement.promptBeginTracking")({servicesManager:e,extensionManager:t},r,a)},E=({servicesManager:e,extensionManager:t,commandsManager:r,appConfig:a},n,s)=>{const{customizationService:i}=e.services;return i.getCustomization("measurement.promptHydrateStructuredReport")({servicesManager:e,extensionManager:t,commandsManager:r,appConfig:a},n,s)},h=({servicesManager:e,extensionManager:t},r,a)=>{const{customizationService:n}=e.services;return n.getCustomization("measurement.promptTrackNewSeries")({servicesManager:e,extensionManager:t},r,a)},R=({servicesManager:e,extensionManager:t},r,a)=>{const{customizationService:n}=e.services;return n.getCustomization("measurement.promptTrackNewStudy")({servicesManager:e,extensionManager:t},r,a)},w=({servicesManager:e},t,r)=>{const{customizationService:a}=e.services;return a.getCustomization("measurement.promptLabelAnnotation")({servicesManager:e},t,r)},f=({servicesManager:e,commandsManager:t,extensionManager:r},a,n)=>{const{customizationService:s}=e.services;return s.getCustomization("measurement.promptSaveReport")({servicesManager:e,commandsManager:t,extensionManager:r},a,n)},A=({servicesManager:e,commandsManager:t,extensionManager:r},a,n)=>{const{customizationService:s}=e.services;return s.getCustomization("measurement.promptHasDirtyAnnotations")({servicesManager:e,commandsManager:t,extensionManager:r},a,n)},C=a.createContext();C.displayName="TrackedMeasurementsContext";const b=()=>(0,a.useContext)(C),U="@ohif/extension-cornerstone-dicom-sr.sopClassHandlerModule.dicom-sr",N="@ohif/extension-cornerstone-dicom-sr.sopClassHandlerModule.dicom-sr-3d",_=e=>[U,N].includes(e.SOPClassHandlerId);function x({servicesManager:e,commandsManager:t,extensionManager:r},{children:n}){const[s]=(0,M.r)(),[u,l]=(0,c.ihW)(),{activeViewportId:S,viewports:p}=u,{measurementService:m,displaySetService:g,customizationService:k,trackedMeasurementsService:b}=e.services,U=Object.assign({},y);U.actions=Object.assign({},U.actions,{jumpToFirstMeasurementInActiveViewport:(e,t)=>{const{trackedStudy:r,trackedSeries:a}=e,{viewportId:n}=t.data,s=m.getMeasurements().filter(e=>r===e.referenceStudyUID&&a.includes(e.referenceSeriesUID));console.log("jumping to measurement reset viewport",n,s[0]);const i=s[0].displaySetInstanceUID,o=g.getDisplaySetByUID(i).images,c=o[0].imageId.startsWith("volumeId"),d=s[0].data;let u=0;!c&&d&&(u=o.findIndex(e=>{const t=Object.keys(d)[0].substring(8);return e.imageId===t}),-1===u&&(console.warn("Could not find image index for tracked measurement, using 0"),u=0)),l.setDisplaySetsForViewport({viewportId:n,displaySetInstanceUIDs:[i],viewportOptions:{initialImageOptions:{index:u}}})},jumpToSameImageInActiveViewport:(e,r)=>{const{trackedStudy:a,trackedSeries:n}=e,{viewportId:s}=r.data,i=m.getMeasurements(),o=i.filter(e=>a===e.referenceStudyUID&&n.includes(e.referenceSeriesUID));if(!o?.length)return void console.warn("Didn't find any tracked measurements",i,a,n);const c=o[o.length-1],d=c.displaySetInstanceUID;t.runCommand("updateStoredPositionPresentation",{viewportId:s,displaySetInstanceUIDs:[d],referencedImageId:c.referencedImageId}),l.setDisplaySetsForViewport({viewportId:s,displaySetInstanceUIDs:[d]})},showStructuredReportDisplaySetInActiveViewport:(e,t)=>{if(t.data.createdDisplaySetInstanceUIDs.length>0){const e=t.data.createdDisplaySetInstanceUIDs[0];l.setDisplaySetsForViewport({viewportId:t.data.viewportId,displaySetInstanceUIDs:[e]})}},discardPreviouslyTrackedMeasurements:(e,t)=>{const r=m.getMeasurements().filter(t=>e.prevTrackedSeries.includes(t.referenceSeriesUID)).map(e=>e.id);for(let e=0;e<r.length;e++)m.remove(r[e])},clearAllMeasurements:(e,t)=>{m.clearMeasurements(),m.setIsMeasurementDeletedIndividually(!1)},clearDisplaySetHydratedState:(e,t)=>{const{displaySetInstanceUID:r}=t.data??t,a=g.getActiveDisplaySets();a?.forEach(e=>{"SR"===e.Modality&&e.displaySetInstanceUID!==r&&e.isHydrated&&(e.isHydrated=!1,e.isLoaded=!1)})},updatedViewports:(t,r)=>{const{hangingProtocolService:a}=e.services,{displaySetInstanceUID:n,viewportId:s}=r.data??r,i=a.getViewportsRequireUpdate(s,n);l.setDisplaySetsForViewports(i)}}),U.services=Object.assign({},U.services,{promptBeginTracking:T.bind(null,{servicesManager:e,extensionManager:r,appConfig:s}),promptTrackNewSeries:h.bind(null,{servicesManager:e,extensionManager:r,appConfig:s}),promptTrackNewStudy:R.bind(null,{servicesManager:e,extensionManager:r,appConfig:s}),promptSaveReport:f.bind(null,{servicesManager:e,commandsManager:t,extensionManager:r,appConfig:s}),promptHydrateStructuredReport:E.bind(null,{servicesManager:e,extensionManager:r,commandsManager:t,appConfig:s}),promptHasDirtyAnnotations:A.bind(null,{servicesManager:e,extensionManager:r,commandsManager:t,appConfig:s}),hydrateStructuredReport:D.bind(null,{servicesManager:e,extensionManager:r,commandsManager:t,appConfig:s}),promptLabelAnnotation:w.bind(null,{servicesManager:e,extensionManager:r,commandsManager:t})}),U.guards=Object.assign({},U.guards,{isLabelOnMeasure:(e,t,r)=>{const a=k.getCustomization("measurementLabels");return a?.labelOnMeasure},isLabelOnMeasureAndShouldKillMachine:(e,t,r)=>{const a=k.getCustomization("measurementLabels");return t.data&&t.data.userResponse===d&&a?.labelOnMeasure},isSimplifiedConfig:(e,t,r)=>s?.measurementTrackingMode===v.v.SIMPLIFIED,simplifiedAndLoadSR:(e,t,r)=>s?.measurementTrackingMode===v.v.SIMPLIFIED&&!1===t.data.isBackupSave,hasDirtyAndSimplified:(e,t,r)=>{const a=m.getMeasurements(),n=a.some(e=>e.isDirty)||a.length&&m.getIsMeasurementDeletedIndividually();return s?.measurementTrackingMode===v.v.SIMPLIFIED&&n}});const N=(0,a.useMemo)(()=>(0,i.u5)(I,U),[]),[x,P]=(0,o.zl)(N);return(0,a.useEffect)(()=>{x?.context?.trackedSeries&&b&&b.updateTrackedSeries(x.context.trackedSeries)},[x?.context?.trackedSeries,b]),(0,a.useEffect)(()=>{P("UPDATE_ACTIVE_VIEWPORT_ID",{activeViewportId:S})},[S,P]),(0,a.useEffect)(()=>{(async()=>{if(p.size>0){const t=p.get(S);if(!t||!t?.displaySetInstanceUIDs?.length)return;const{displaySetService:r}=e.services,a=r.getDisplaySetByUID(t.displaySetInstanceUIDs[0]);if(!a)return;if(_(a)&&!a.isLoaded&&a.load&&await a.load(),_(a)&&!0===a.isRehydratable&&!a.isHydrated){const e={displaySetInstanceUID:a.displaySetInstanceUID,SeriesInstanceUID:a.SeriesInstanceUID,viewportId:S},t=s?.disableConfirmationPrompts;P(t?"HYDRATE_SR":"PROMPT_HYDRATE_SR",e)}}})()},[x,S,P,e.services,p,s]),(0,a.useEffect)(()=>{t.registerCommand("DEFAULT","loadTrackedSRMeasurements",{commandFn:e=>P("HYDRATE_SR",e)})},[t,P]),a.createElement(C.Provider,{value:[x,P]},n)}x.propTypes={children:s().oneOf([s().func,s().node]),appConfig:s().object};const P=function({servicesManager:e,extensionManager:t,commandsManager:r}){const a=x.bind(null,{servicesManager:e,extensionManager:t,commandsManager:r});return[{name:"TrackedMeasurementsContext",context:C,provider:a}]}},8877:(e,t,r)=>{r.r(t),r.d(t,{default:()=>X,measurementTrackingMode:()=>C.v});var a=r(55844),n=r(86326),s=r(97598),i=r.n(s),o=r(42356),c=r(40565),d=r(96283);function u({hide:e,onConfirm:t,message:r}){return n.createElement("div",{className:"text-foreground text-[13px]"},n.createElement("div",null,n.createElement("p",null,r),n.createElement("p",{className:"mt-2"},"This action cannot be undone and will delete all your existing measurements.")),n.createElement(d.esu,{className:"mt-4"},n.createElement(d.esu.Right,null,n.createElement(d.esu.Secondary,{onClick:e},"Cancel"),n.createElement(d.esu.Primary,{onClick:()=>{t(),e()}},"Untrack"))))}const l=["SR","SEG","RTSTRUCT","RTPLAN","RTDOSE","PMAP"];function S({getImageSrc:e,getStudiesForPatientByMRN:t,requestDisplaySetCreationForStudy:r,dataSource:s}){const{servicesManager:i}=(0,o.Jg)(),{displaySetService:d,uiModalService:S,measurementService:p,viewportGridService:m}=i.services,[g,I]=(0,a.B)(),{trackedSeries:y}=g.context,v=e=>{const t=d.getDisplaySetByUID(e);if("SR"===t.Modality||"ANN"===t.Modality){const t=m.getActiveViewportId();I("CHECK_DIRTY",{viewportId:t,displaySetInstanceUID:e})}};(0,n.useEffect)(()=>{const e=m.subscribe(m.EVENTS.VIEWPORT_ONDROP_HANDLED,({eventData:e})=>{v(e.displaySetInstanceUID)});return()=>{e.unsubscribe()}},[]);const k=e=>l.includes(e.Modality)||e.unsupported||null===e.thumbnailSrc?"thumbnailNoImage":"thumbnailTracked";return n.createElement(c.A,{getImageSrc:e,getStudiesForPatientByMRN:t,requestDisplaySetCreationForStudy:r,dataSource:s,customMapDisplaySets:(e,t,r,a)=>{const n=[],s=[];return e.filter(e=>!e.excludeFromThumbnailBrowser).forEach(e=>{const{thumbnailSrc:a,displaySetInstanceUID:i}=e,o=k(e),c="thumbnailTracked"===o?n:s,d=t?.[i];c.push({displaySetInstanceUID:i,description:e.SeriesDescription||"",seriesNumber:e.SeriesNumber,modality:e.Modality,seriesDate:e.SeriesDate?new Date(e.SeriesDate).toLocaleDateString():"",numInstances:e.numImageFrames,loadingProgress:d,countIcon:e.countIcon,messages:e.messages,StudyInstanceUID:e.StudyInstanceUID,componentType:o,imageSrc:a||r[i],dragData:{type:"displayset",displaySetInstanceUID:i},isTracked:y.includes(e.SeriesInstanceUID),isHydratedForDerivedDisplaySet:e.isHydrated})}),[...n,...s]},onClickUntrack:e=>{S.show({title:"Untrack Series",content:u,contentProps:{onConfirm:()=>{const t=d.getDisplaySetByUID(e);I("UNTRACK_SERIES",{SeriesInstanceUID:t.SeriesInstanceUID});p.getMeasurements().forEach(e=>{e.referenceSeriesUID===t.SeriesInstanceUID&&p.remove(e.uid)})},message:"Are you sure you want to untrack this series?"}})},onDoubleClickThumbnailHandlerCallBack:v})}S.propTypes={dataSource:i().shape({getImageIdsForDisplaySet:i().func.isRequired}).isRequired,getImageSrc:i().func.isRequired,getStudiesForPatientByMRN:i().func.isRequired,requestDisplaySetCreationForStudy:i().func.isRequired};const p=function(e,t){return new Promise((r,a)=>{const n=document.createElement("canvas");e.utilities.loadImageToCanvas({canvas:n,imageId:t,thumbnail:!0}).then(e=>{r(n.toDataURL())}).catch(a)})};var m=r(39548);const g=function(){const{extensionManager:e}=(0,o.Jg)(),t=e.getActiveDataSource()[0],r=function(e){const t=e.getModuleEntry("@ohif/extension-default.utilityModule.common"),{getStudiesForPatientByMRN:r}=t.exports;return r}(e).bind(null,t),a=(0,n.useCallback)(function(e){const t=e.getModuleEntry("@ohif/extension-cornerstone.utilityModule.common");try{const{cornerstone:e}=t.exports.getCornerstoneLibraries();return p.bind(null,e)}catch(e){throw new Error("Required command not found")}}(e),[]),s=m.requestDisplaySetCreationForStudy.bind(null,t);return n.createElement(S,{dataSource:t,getImageSrc:a,getStudiesForPatientByMRN:r,requestDisplaySetCreationForStudy:s})};var I=r(37948);function y(){return y=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)({}).hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e},y.apply(null,arguments)}const{filterMeasurementsBySeriesUID:v,filterAny:k}=o.Wp.MeasurementFilters;const D=function(e){const[t]=(0,d.ihW)(),{servicesManager:r}=(0,o.Jg)(),{measurementService:s,uiModalService:i}=r.services,[c,l]=(0,a.B)(),{trackedStudy:S,trackedSeries:p}=c.context,m=S?v(p):k,g=()=>{l("UNTRACK_ALL",{})},D={createSR:({StudyInstanceUID:e})=>{l("SAVE_REPORT",{viewportId:t.activeViewportId,isBackupSave:!0,StudyInstanceUID:e,measurementFilter:m})},onDelete:()=>{s.getMeasurements().some(e=>e.isDirty)?i.show({title:"Untrack Study",content:u,contentProps:{onConfirm:g,message:"Are you sure you want to untrack study and delete all measurements?"}}):g()}},M=e=>n.createElement(d.$m7,{asChild:!0,className:"px-0"},n.createElement("div",{"data-cy":"TrackingHeader"},n.createElement(I.StudySummaryFromMetadata,y({},e,{actions:D}))));return n.createElement(d.FKN,null,n.createElement("div",{"data-cy":"trackedMeasurements-panel"},n.createElement(I.PanelMeasurement,{measurementFilter:m,emptyComponent:()=>n.createElement("div",{"data-cy":"trackedMeasurements-panel"},n.createElement(d.VaM,{title:"Measurements",isExpanded:!1},n.createElement(d.VaM.Body,null))),sourceChildren:e.children},n.createElement(I.StudyMeasurements,{grouping:e.grouping},n.createElement(I.AccordionGroup.Trigger,{key:"trackingMeasurementsHeader",asChild:!0},n.createElement(M,{key:"trackingHeadChild"})),n.createElement(I.MeasurementsOrAdditionalFindings,{key:"measurementsOrAdditionalFindings",activeStudyUID:S,customHeader:I.StudyMeasurementsActions,measurementFilter:m,actions:D})))))};var M=r(40680);function T(){return T=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)({}).hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e},T.apply(null,arguments)}const E=function({commandsManager:e,extensionManager:t,servicesManager:r}){return[{name:"seriesList",iconName:"tab-studies",iconLabel:"Studies",label:M.A.t("SidePanel:Studies"),component:e=>n.createElement(g,e)},{name:"trackedMeasurements",iconName:"tab-linear",iconLabel:"Measure",label:M.A.t("SidePanel:Measurements"),component:a=>n.createElement(D,T({},a,{key:"trackedMeasurements-panel",commandsManager:e,extensionManager:t,servicesManager:r}))}]};function h(){return h=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)({}).hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e},h.apply(null,arguments)}const R=n.lazy(()=>r.e(9862).then(r.bind(r,49862))),w=e=>n.createElement(n.Suspense,{fallback:n.createElement("div",null,"Loading...")},n.createElement(R,e));const f=function({servicesManager:e,commandsManager:t,extensionManager:r}){return[{name:"cornerstone-tracked",component:a=>n.createElement(w,h({servicesManager:e,commandsManager:t,extensionManager:r},a)),isReferenceViewable:I.utils.isReferenceViewable.bind(null,e)}]},A=JSON.parse('{"UU":"@ohif/extension-measurement-tracking"}').UU;var C=r(11026);const b=0,U=1,N=3;const _=function({servicesManager:e},t,r){const{viewportId:a,displaySetInstanceUID:n}=r.data||r;return new Promise(async function(t,r){const{uiViewportDialogService:s,customizationService:i}=e.services,o=await function(e,t,r){return new Promise(function(a,n){const s=t.getCustomization("viewportNotification.discardDirtyMessage"),i=[{id:"cancel",type:"cancel",text:"Cancel",value:b},{id:"discard-existing",type:"secondary",text:"No, discard existing",value:N},{id:"save-existing",type:"primary",text:"Yes",value:U}],o=t=>{e.hide(),a(t)};e.show({viewportId:r,id:"measurement-tracking-prompt-dirty-measurement",type:"info",message:s,actions:i,onSubmit:o,onOutsideClick:()=>{e.hide(),a(b)},onKeyPress:e=>{if("Enter"===e.key){const e=i.find(e=>"save-existing"===e.id);o(e.value)}}})})}(s,i,a);t({displaySetInstanceUID:n,userResponse:o,viewportId:a,isBackupSave:!1})})};const x=function({servicesManager:e,commandsManager:t},r,a){const{displaySetService:n}=e.services,{viewportId:s,displaySetInstanceUID:i}=a,o=n.getDisplaySetByUID(i),c={...o,displaySetInstanceUID:i};return I.utils.promptHydrationDialog({servicesManager:e,viewportId:s,displaySet:c,hydrateCallback:async()=>t.runCommand("hydrateSecondaryDisplaySet",{displaySet:o,viewportId:s}),type:"SR"})},P=0,H=1,O=2,V=3;const L=function({servicesManager:e,extensionManager:t},r,a){const{UIViewportDialogService:n,customizationService:s}=e.services,{viewportId:i,StudyInstanceUID:o,SeriesInstanceUID:c}=a.data||a;return new Promise(async function(e,a){const d=t._appConfig;let u=d?.measurementTrackingMode===C.v.STANDARD?await function(e,t,r){return new Promise(function(a,n){const s=t.getCustomization("viewportNotification.trackNewSeriesMessage"),i=[{type:"secondary",text:"Cancel",value:P},{type:"primary",text:"Create new report",value:H},{type:"primary",text:"Add to existing report",value:O}],o=t=>{e.hide(),a(t)};e.show({viewportId:r,type:"info",message:s,actions:i,onSubmit:o,onOutsideClick:()=>{e.hide(),a(P)}})})}(n,s,i):O;u===H&&(u=r.isDirty?await function(e,t,r){return new Promise(function(a,n){const s=t.getCustomization("viewportNotification.discardSeriesMessage"),i=[{type:"secondary",text:"Cancel",value:P},{type:"secondary",text:"Save",value:H},{type:"primary",text:"Discard",value:V}],o=t=>{e.hide(),a(t)};e.show({viewportId:r,type:"warning",message:s,actions:i,onSubmit:o,onOutsideClick:()=>{e.hide(),a(P)}})})}(n,s,i):V),e({userResponse:u,StudyInstanceUID:o,SeriesInstanceUID:c,viewportId:i,isBackupSave:!1})})},F=0,B=1,K=3,z=4;const G=function({servicesManager:e,extensionManager:t},r,a){const{uiViewportDialogService:n,customizationService:s}=e.services,{viewportId:i,StudyInstanceUID:o,SeriesInstanceUID:c}=a.data||a;return new Promise(async function(e,a){const d=t._appConfig,u=d?.measurementTrackingMode===C.v.STANDARD,l=d?.measurementTrackingMode===C.v.SIMPLIFIED;let S=u?await function(e,t,r){return new Promise(function(a,n){const s=t.getCustomization("viewportNotification.trackNewStudyMessage"),i=[{type:"cancel",text:M.A.t("MeasurementTable:No"),value:F},{type:"secondary",text:M.A.t("MeasurementTable:No, do not ask again"),value:z},{type:"primary",text:M.A.t("MeasurementTable:Yes"),value:K}],o=t=>{e.hide(),a(t)};e.show({viewportId:r,type:"info",message:s,actions:i,onSubmit:o,onOutsideClick:()=>{e.hide(),a(F)},onKeyPress:e=>{if("Enter"===e.key){const e=i.find(e=>e.value===K);o(e.value)}}})})}(n,s,i):K;S===K&&(S=r.isDirty&&(u||l)?await function(e,t,r){return new Promise(function(a,n){const s=t.getCustomization("viewportNotification.discardStudyMessage"),i=[{type:"cancel",text:"Cancel",value:F},{type:"secondary",text:"No, discard previously tracked series & measurements",value:K},{type:"primary",text:"Yes",value:B}],o=t=>{e.hide(),a(t)};e.show({viewportId:r,type:"warning",message:s,actions:i,onSubmit:o,onOutsideClick:()=>{e.hide(),a(F)}})})}(n,s,i):K),e({userResponse:S,StudyInstanceUID:o,SeriesInstanceUID:c,viewportId:i,isBackupSave:!1})})},j={"measurement.promptBeginTracking":C.A,"measurement.promptHydrateStructuredReport":x,"measurement.promptTrackNewSeries":L,"measurement.promptTrackNewStudy":G,"measurement.promptLabelAnnotation":m.promptLabelAnnotation,"measurement.promptSaveReport":m.promptSaveReport,"measurement.promptHasDirtyAnnotations":_};const Y={callbacks:[({activeViewportId:e,servicesManager:t,isHangingProtocolLayout:r,appConfig:a})=>async n=>{const{hangingProtocolService:s,viewportGridService:i,uiNotificationService:o}=t.services;let c=[];const d=e,u=W({servicesManager:t,appConfig:a,displaySetInstanceUID:n});try{u||(c=s.getViewportsRequireUpdate(d,n,r),i.setDisplaySetsForViewports(c))}catch(e){console.warn(e),o.show({title:"Thumbnail Double Click",message:"The selected display sets could not be added to the viewport.",type:"error",duration:3e3})}}]},q=async e=>{const t=W(e);return Promise.resolve({handled:t})},W=e=>{const{servicesManager:t,appConfig:r,displaySetInstanceUID:a}=e,n=r.measurementTrackingMode===C.v.SIMPLIFIED,{measurementService:s,displaySetService:i}=t.services,o=s.getMeasurements(),c=o.some(e=>e.isDirty)||o.length&&s.getIsMeasurementDeletedIndividually();return"SR"===i.getDisplaySetByUID(a).Modality&&n&&c};var J;const $={TRACKED_SERIES_CHANGED:"event::trackedmeasurements:trackedserieschanged",SERIES_ADDED:"event::trackedmeasurements:seriesadded",SERIES_REMOVED:"event::trackedmeasurements:seriesremoved",TRACKING_ENABLED:"event::trackedmeasurements:trackingenabled",TRACKING_DISABLED:"event::trackedmeasurements:trackingdisabled"};class Q extends o.Rc{constructor(){super($),this._trackedSeries=[]}updateTrackedSeries(e){e||(e=[]);if(this._trackedSeries.length!==e.length||this._trackedSeries.some((t,r)=>t!==e[r])){const t=[...this._trackedSeries];this._trackedSeries=[...e];const r=0===t.length,a=0===e.length;r&&!a?this._broadcastEvent($.TRACKING_ENABLED,{trackedSeries:this.getTrackedSeries()}):!r&&a&&this._broadcastEvent($.TRACKING_DISABLED,{trackedSeries:this.getTrackedSeries()}),this._broadcastEvent($.TRACKED_SERIES_CHANGED,{trackedSeries:this.getTrackedSeries()})}}addTrackedSeries(e){if(!e||this.isSeriesTracked(e))return;const t=0===this._trackedSeries.length;this._trackedSeries=[...this._trackedSeries,e],this._broadcastEvent($.SERIES_ADDED,{seriesInstanceUID:e,trackedSeries:this.getTrackedSeries()}),t&&this._broadcastEvent($.TRACKING_ENABLED,{trackedSeries:this.getTrackedSeries()}),this._broadcastEvent($.TRACKED_SERIES_CHANGED,{trackedSeries:this.getTrackedSeries()})}removeTrackedSeries(e){e&&this.isSeriesTracked(e)&&(this._trackedSeries=this._trackedSeries.filter(t=>t!==e),this._broadcastEvent($.SERIES_REMOVED,{seriesInstanceUID:e,trackedSeries:this.getTrackedSeries()}),0===this._trackedSeries.length&&this._broadcastEvent($.TRACKING_DISABLED,{trackedSeries:this.getTrackedSeries()}),this._broadcastEvent($.TRACKED_SERIES_CHANGED,{trackedSeries:this.getTrackedSeries()}))}getTrackedSeries(){return[...this._trackedSeries]}isSeriesTracked(e){return this._trackedSeries.includes(e)}reset(){const e=this._trackedSeries.length>0;this._trackedSeries=[],e&&(this._broadcastEvent($.TRACKING_DISABLED,{trackedSeries:[]}),this._broadcastEvent($.TRACKED_SERIES_CHANGED,{trackedSeries:[]})),super.reset()}isTrackingEnabled(){return this._trackedSeries.length>0}}J=Q,Q.REGISTRATION={name:"trackedMeasurementsService",altName:"TrackedMeasurementsService",create:({configuration:e={}})=>new J};const X={id:A,getContextModule:a.A,getPanelModule:E,getViewportModule:f,preRegistration({servicesManager:e}){e.registerService(Q.REGISTRATION)},onModeEnter({servicesManager:e}){const{customizationService:t,toolbarService:r,trackedMeasurementsService:a}=e.services;r.registerEventForToolbarUpdate(a,[a.EVENTS.TRACKED_SERIES_CHANGED,a.EVENTS.SERIES_ADDED,a.EVENTS.SERIES_REMOVED,a.EVENTS.TRACKING_ENABLED,a.EVENTS.TRACKING_DISABLED]),t.setCustomizations({"studyBrowser.thumbnailDoubleClickCallback":{$set:Y},customOnDropHandler:{$set:q}})},getCustomizationModule:function(){return[{name:"default",value:{...j}}]}}}}]);
//# sourceMappingURL=414.bundle.ab3fc59c3c9b2b75ae36.js.map