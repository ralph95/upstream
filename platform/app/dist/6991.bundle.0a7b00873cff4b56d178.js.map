{"version":3,"file":"6991.bundle.0a7b00873cff4b56d178.js","mappings":"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","sources":["webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ChangeTypes.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Events.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/SegmentationRepresentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/StrategyCallbacks.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ToolBindings.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ToolModes.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Touch.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/AnnotationStyleStates.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/WorkerTypes.js","webpack:///../../../extensions/usAnnotation/src/PleuraBlinePercentage.ts","webpack:///../../../extensions/usAnnotation/src/id.js","webpack:///../../../extensions/usAnnotation/src/panels/USAnnotationPanel.tsx","webpack:///../../../extensions/usAnnotation/src/getPanelModule.tsx","webpack:///../../../extensions/usAnnotation/src/getCommandsModule.ts","webpack:///../../../extensions/usAnnotation/src/index.ts","webpack:///../../../extensions/usAnnotation/src/getInstanceByImageId.ts"],"sourcesContent":["var ChangeTypes;\n(function (ChangeTypes) {\n    ChangeTypes[\"Interaction\"] = \"Interaction\";\n    ChangeTypes[\"HandlesUpdated\"] = \"HandlesUpdated\";\n    ChangeTypes[\"StatsUpdated\"] = \"StatsUpdated\";\n    ChangeTypes[\"InitialSetup\"] = \"InitialSetup\";\n    ChangeTypes[\"Completed\"] = \"Completed\";\n    ChangeTypes[\"InterpolationUpdated\"] = \"InterpolationUpdated\";\n    ChangeTypes[\"History\"] = \"History\";\n    ChangeTypes[\"MetadataReferenceModified\"] = \"MetadataReferenceModified\";\n    ChangeTypes[\"LabelChange\"] = \"LabelChange\";\n})(ChangeTypes || (ChangeTypes = {}));\nexport default ChangeTypes;\n","var Events;\n(function (Events) {\n    Events[\"TOOL_ACTIVATED\"] = \"CORNERSTONE_TOOLS_TOOL_ACTIVATED\";\n    Events[\"TOOLGROUP_VIEWPORT_ADDED\"] = \"CORNERSTONE_TOOLS_TOOLGROUP_VIEWPORT_ADDED\";\n    Events[\"TOOLGROUP_VIEWPORT_REMOVED\"] = \"CORNERSTONE_TOOLS_TOOLGROUP_VIEWPORT_REMOVED\";\n    Events[\"TOOL_MODE_CHANGED\"] = \"CORNERSTONE_TOOLS_TOOL_MODE_CHANGED\";\n    Events[\"CROSSHAIR_TOOL_CENTER_CHANGED\"] = \"CORNERSTONE_TOOLS_CROSSHAIR_TOOL_CENTER_CHANGED\";\n    Events[\"VOLUMECROPPINGCONTROL_TOOL_CHANGED\"] = \"CORNERSTONE_TOOLS_VOLUMECROPPINGCONTROL_TOOL_CHANGED\";\n    Events[\"VOLUMECROPPING_TOOL_CHANGED\"] = \"CORNERSTONE_TOOLS_VOLUMECROPPING_TOOL_CHANGED\";\n    Events[\"STACK_PREFETCH_COMPLETE\"] = \"CORNERSTONE_TOOLS_STACK_PREFETCH_COMPLETE\";\n    Events[\"ANNOTATION_ADDED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_ADDED\";\n    Events[\"ANNOTATION_COMPLETED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_COMPLETED\";\n    Events[\"ANNOTATION_MODIFIED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_MODIFIED\";\n    Events[\"ANNOTATION_REMOVED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_REMOVED\";\n    Events[\"ANNOTATION_SELECTION_CHANGE\"] = \"CORNERSTONE_TOOLS_ANNOTATION_SELECTION_CHANGE\";\n    Events[\"ANNOTATION_LOCK_CHANGE\"] = \"CORNERSTONE_TOOLS_ANNOTATION_LOCK_CHANGE\";\n    Events[\"ANNOTATION_VISIBILITY_CHANGE\"] = \"CORNERSTONE_TOOLS_ANNOTATION_VISIBILITY_CHANGE\";\n    Events[\"ANNOTATION_RENDERED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_RENDERED\";\n    Events[\"ANNOTATION_CUT_MERGE_PROCESS_COMPLETED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_CUT_MERGE_PROCESS_COMPLETED\";\n    Events[\"ANNOTATION_INTERPOLATION_PROCESS_COMPLETED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_INTERPOLATION_PROCESS_COMPLETED\";\n    Events[\"INTERPOLATED_ANNOTATIONS_REMOVED\"] = \"CORNERSTONE_TOOLS_INTERPOLATED_ANNOTATIONS_REMOVED\";\n    Events[\"SEGMENTATION_MODIFIED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_MODIFIED\";\n    Events[\"SEGMENTATION_RENDERED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_RENDERED\";\n    Events[\"SEGMENTATION_REPRESENTATION_ADDED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_ADDED\";\n    Events[\"SEGMENTATION_ADDED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_ADDED\";\n    Events[\"SEGMENTATION_REPRESENTATION_MODIFIED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_MODIFIED\";\n    Events[\"SEGMENTATION_REMOVED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REMOVED\";\n    Events[\"SEGMENTATION_REPRESENTATION_REMOVED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_REMOVED\";\n    Events[\"SEGMENTATION_DATA_MODIFIED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_DATA_MODIFIED\";\n    Events[\"HISTORY_UNDO\"] = \"CORNERSTONE_TOOLS_HISTORY_UNDO\";\n    Events[\"HISTORY_REDO\"] = \"CORNERSTONE_TOOLS_HISTORY_REDO\";\n    Events[\"KEY_DOWN\"] = \"CORNERSTONE_TOOLS_KEY_DOWN\";\n    Events[\"KEY_UP\"] = \"CORNERSTONE_TOOLS_KEY_UP\";\n    Events[\"MOUSE_DOWN\"] = \"CORNERSTONE_TOOLS_MOUSE_DOWN\";\n    Events[\"MOUSE_UP\"] = \"CORNERSTONE_TOOLS_MOUSE_UP\";\n    Events[\"MOUSE_DOWN_ACTIVATE\"] = \"CORNERSTONE_TOOLS_MOUSE_DOWN_ACTIVATE\";\n    Events[\"MOUSE_DRAG\"] = \"CORNERSTONE_TOOLS_MOUSE_DRAG\";\n    Events[\"MOUSE_MOVE\"] = \"CORNERSTONE_TOOLS_MOUSE_MOVE\";\n    Events[\"MOUSE_CLICK\"] = \"CORNERSTONE_TOOLS_MOUSE_CLICK\";\n    Events[\"MOUSE_DOUBLE_CLICK\"] = \"CORNERSTONE_TOOLS_MOUSE_DOUBLE_CLICK\";\n    Events[\"MOUSE_WHEEL\"] = \"CORNERSTONE_TOOLS_MOUSE_WHEEL\";\n    Events[\"TOUCH_START\"] = \"CORNERSTONE_TOOLS_TOUCH_START\";\n    Events[\"TOUCH_START_ACTIVATE\"] = \"CORNERSTONE_TOOLS_TOUCH_START_ACTIVATE\";\n    Events[\"TOUCH_PRESS\"] = \"CORNERSTONE_TOOLS_TOUCH_PRESS\";\n    Events[\"TOUCH_DRAG\"] = \"CORNERSTONE_TOOLS_TOUCH_DRAG\";\n    Events[\"TOUCH_END\"] = \"CORNERSTONE_TOOLS_TOUCH_END\";\n    Events[\"TOUCH_TAP\"] = \"CORNERSTONE_TOOLS_TAP\";\n    Events[\"TOUCH_SWIPE\"] = \"CORNERSTONE_TOOLS_SWIPE\";\n})(Events || (Events = {}));\nexport default Events;\n","var SegmentationRepresentations;\n(function (SegmentationRepresentations) {\n    SegmentationRepresentations[\"Labelmap\"] = \"Labelmap\";\n    SegmentationRepresentations[\"Contour\"] = \"Contour\";\n    SegmentationRepresentations[\"Surface\"] = \"Surface\";\n})(SegmentationRepresentations || (SegmentationRepresentations = {}));\nexport default SegmentationRepresentations;\n","var StrategyCallbacks;\n(function (StrategyCallbacks) {\n    StrategyCallbacks[\"OnInteractionStart\"] = \"onInteractionStart\";\n    StrategyCallbacks[\"OnInteractionEnd\"] = \"onInteractionEnd\";\n    StrategyCallbacks[\"Preview\"] = \"preview\";\n    StrategyCallbacks[\"RejectPreview\"] = \"rejectPreview\";\n    StrategyCallbacks[\"AcceptPreview\"] = \"acceptPreview\";\n    StrategyCallbacks[\"Fill\"] = \"fill\";\n    StrategyCallbacks[\"Interpolate\"] = \"interpolate\";\n    StrategyCallbacks[\"StrategyFunction\"] = \"strategyFunction\";\n    StrategyCallbacks[\"CreateIsInThreshold\"] = \"createIsInThreshold\";\n    StrategyCallbacks[\"Initialize\"] = \"initialize\";\n    StrategyCallbacks[\"INTERNAL_setValue\"] = \"setValue\";\n    StrategyCallbacks[\"AddPreview\"] = \"addPreview\";\n    StrategyCallbacks[\"ComputeInnerCircleRadius\"] = \"computeInnerCircleRadius\";\n    StrategyCallbacks[\"GetStatistics\"] = \"getStatistics\";\n    StrategyCallbacks[\"EnsureImageVolumeFor3DManipulation\"] = \"ensureImageVolumeFor3DManipulation\";\n    StrategyCallbacks[\"EnsureSegmentationVolumeFor3DManipulation\"] = \"ensureSegmentationVolumeFor3DManipulation\";\n})(StrategyCallbacks || (StrategyCallbacks = {}));\nexport default StrategyCallbacks;\n","var MouseBindings;\n(function (MouseBindings) {\n    MouseBindings[MouseBindings[\"Primary\"] = 1] = \"Primary\";\n    MouseBindings[MouseBindings[\"Secondary\"] = 2] = \"Secondary\";\n    MouseBindings[MouseBindings[\"Primary_And_Secondary\"] = 3] = \"Primary_And_Secondary\";\n    MouseBindings[MouseBindings[\"Auxiliary\"] = 4] = \"Auxiliary\";\n    MouseBindings[MouseBindings[\"Primary_And_Auxiliary\"] = 5] = \"Primary_And_Auxiliary\";\n    MouseBindings[MouseBindings[\"Secondary_And_Auxiliary\"] = 6] = \"Secondary_And_Auxiliary\";\n    MouseBindings[MouseBindings[\"Primary_And_Secondary_And_Auxiliary\"] = 7] = \"Primary_And_Secondary_And_Auxiliary\";\n    MouseBindings[MouseBindings[\"Fourth_Button\"] = 8] = \"Fourth_Button\";\n    MouseBindings[MouseBindings[\"Fifth_Button\"] = 16] = \"Fifth_Button\";\n    MouseBindings[MouseBindings[\"Wheel\"] = 524288] = \"Wheel\";\n    MouseBindings[MouseBindings[\"Wheel_Primary\"] = 524289] = \"Wheel_Primary\";\n})(MouseBindings || (MouseBindings = {}));\nvar KeyboardBindings;\n(function (KeyboardBindings) {\n    KeyboardBindings[KeyboardBindings[\"Shift\"] = 16] = \"Shift\";\n    KeyboardBindings[KeyboardBindings[\"Ctrl\"] = 17] = \"Ctrl\";\n    KeyboardBindings[KeyboardBindings[\"Alt\"] = 18] = \"Alt\";\n    KeyboardBindings[KeyboardBindings[\"Meta\"] = 91] = \"Meta\";\n    KeyboardBindings[KeyboardBindings[\"ShiftCtrl\"] = 1617] = \"ShiftCtrl\";\n    KeyboardBindings[KeyboardBindings[\"ShiftAlt\"] = 1618] = \"ShiftAlt\";\n    KeyboardBindings[KeyboardBindings[\"ShiftMeta\"] = 1691] = \"ShiftMeta\";\n    KeyboardBindings[KeyboardBindings[\"CtrlAlt\"] = 1718] = \"CtrlAlt\";\n    KeyboardBindings[KeyboardBindings[\"CtrlMeta\"] = 1791] = \"CtrlMeta\";\n    KeyboardBindings[KeyboardBindings[\"AltMeta\"] = 1891] = \"AltMeta\";\n})(KeyboardBindings || (KeyboardBindings = {}));\nexport { MouseBindings, KeyboardBindings };\n","var ToolModes;\n(function (ToolModes) {\n    ToolModes[\"Active\"] = \"Active\";\n    ToolModes[\"Passive\"] = \"Passive\";\n    ToolModes[\"Enabled\"] = \"Enabled\";\n    ToolModes[\"Disabled\"] = \"Disabled\";\n})(ToolModes || (ToolModes = {}));\nexport default ToolModes;\n","var Swipe;\n(function (Swipe) {\n    Swipe[\"UP\"] = \"UP\";\n    Swipe[\"DOWN\"] = \"DOWN\";\n    Swipe[\"LEFT\"] = \"LEFT\";\n    Swipe[\"RIGHT\"] = \"RIGHT\";\n})(Swipe || (Swipe = {}));\nexport { Swipe };\n","var AnnotationStyleStates;\n(function (AnnotationStyleStates) {\n    AnnotationStyleStates[\"Default\"] = \"\";\n    AnnotationStyleStates[\"Highlighted\"] = \"Highlighted\";\n    AnnotationStyleStates[\"Selected\"] = \"Selected\";\n    AnnotationStyleStates[\"Locked\"] = \"Locked\";\n    AnnotationStyleStates[\"AutoGenerated\"] = \"AutoGenerated\";\n})(AnnotationStyleStates || (AnnotationStyleStates = {}));\nexport default AnnotationStyleStates;\n","var ChangeTypes;\n(function (ChangeTypes) {\n    ChangeTypes[\"POLYSEG_CONTOUR_TO_LABELMAP\"] = \"Converting Contour to Labelmap\";\n    ChangeTypes[\"POLYSEG_SURFACE_TO_LABELMAP\"] = \"Converting Surfaces to Labelmap\";\n    ChangeTypes[\"POLYSEG_CONTOUR_TO_SURFACE\"] = \"Converting Contour to Surface\";\n    ChangeTypes[\"POLYSEG_LABELMAP_TO_SURFACE\"] = \"Converting Labelmap to Surface\";\n    ChangeTypes[\"SURFACE_CLIPPING\"] = \"Clipping Surfaces\";\n    ChangeTypes[\"COMPUTE_STATISTICS\"] = \"Computing Statistics\";\n    ChangeTypes[\"INTERPOLATE_LABELMAP\"] = \"Interpolating Labelmap\";\n    ChangeTypes[\"COMPUTE_LARGEST_BIDIRECTIONAL\"] = \"Computing Largest Bidirectional\";\n    ChangeTypes[\"GENERATE_CONTOUR_SETS\"] = \"Generating Contour Sets\";\n})(ChangeTypes || (ChangeTypes = {}));\nexport default ChangeTypes;\n","// Global state to control whether to show the percentage in the overlay\r\nexport let showPercentage = true;\r\n\r\n/**\r\n * Sets whether to show the pleura percentage in the viewport overlay\r\n * @param value - Boolean indicating whether to show the percentage\r\n */\r\nexport function setShowPercentage(value) {\r\n  showPercentage = value;\r\n}\r\n","import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\n\r\nexport { id };\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Enums as csToolsEnums, UltrasoundPleuraBLineTool } from '@cornerstonejs/tools';\r\nimport { eventTarget, utilities } from '@cornerstonejs/core';\r\nimport { useSystem } from '@ohif/core';\r\n\r\nimport {\r\n  /* Layout */\r\n  PanelSection,\r\n  ScrollArea,\r\n  /* Controls */\r\n  Label,\r\n  Button,\r\n  Icons,\r\n  Switch,\r\n  DropdownMenu,\r\n  DropdownMenuTrigger,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  Tabs,\r\n  TabsList,\r\n  TabsTrigger,\r\n  Separator,\r\n} from '@ohif/ui-next';\r\n\r\n/**\r\n * A side panel that drives the ultrasound annotation workflow.\r\n * It provides controls for managing annotations, toggling display options,\r\n * and downloading annotations as JSON.\r\n * @returns The USAnnotationPanel component\r\n */\r\nexport default function USAnnotationPanel() {\r\n  const { servicesManager, commandsManager } = useSystem();\r\n\r\n  /** ──────────────────────────────────────────────────────\r\n   * Local state – purely UI related (no business logic).   */\r\n\r\n  const { viewportGridService, cornerstoneViewportService, measurementService } =\r\n    servicesManager.services as AppTypes.Services;\r\n\r\n  // UI state variables\r\n  const [depthGuide, setDepthGuide] = useState(true);\r\n  const [autoAdd, setAutoAdd] = useState(true);\r\n  const [showPleuraPct, setShowPleuraPct] = useState(true);\r\n  const [showOverlay, setShowOverlay] = useState(true);\r\n\r\n  // Data state variables\r\n  const [annotatedFrames, setAnnotatedFrames] = useState<any[]>([]);\r\n  const [imageIdsToObserve, setImageIdsToObserve] = useState<string[]>([]);\r\n  const [labels, setLabels] = useState<string[]>([]);\r\n\r\n  /** ──────────────────────────────────────────────────────\r\n   * Helper – commands bridging back to OHIF services.       */\r\n\r\n  /**\r\n   * Switches the active annotation type (pleura or B-line)\r\n   * @param type - The annotation type to switch to\r\n   */\r\n  const switchAnnotation = (type: string) => {\r\n    commandsManager.runCommand('setToolActive', { toolName: UltrasoundPleuraBLineTool.toolName });\r\n    commandsManager.runCommand('switchUSAnnotation', { annotationType: type });\r\n  };\r\n\r\n  /**\r\n   * Deletes the last annotation of the specified type\r\n   * @param type - The annotation type to delete\r\n   */\r\n  const deleteLast = (type: string) => {\r\n    commandsManager.runCommand('deleteLastAnnotation', { annotationType: type });\r\n    updateAnnotatedFrames();\r\n  };\r\n\r\n  /**\r\n   * Sets the depth guide display state\r\n   * @param value - Boolean indicating whether to show the depth guide\r\n   */\r\n  const setDepthGuideCommand = (value: boolean) => {\r\n    commandsManager.runCommand('setDepthGuide', { value });\r\n    setDepthGuide(value);\r\n  };\r\n  /**\r\n   * Sets the auto-add annotations state\r\n   * When enabled, all frames are monitored for annotations\r\n   * When disabled, only manually added frames are monitored\r\n   * @param value - Boolean indicating whether to auto-add annotations\r\n   */\r\n  const setAutoAddCommand = (value: boolean) => {\r\n    if (value) {\r\n      setImageIdsToObserve([]);\r\n    } else {\r\n      const imageIds = annotatedFrames.map(item => item.imageId);\r\n      if (imageIds.length > 0) {\r\n        setImageIdsToObserve(imageIds);\r\n      } else {\r\n        setImageIdsToObserve(['Manual']);\r\n      }\r\n    }\r\n    setAutoAdd(value);\r\n  };\r\n  /**\r\n   * Sets whether to show the pleura percentage in the viewport overlay\r\n   * @param value - Boolean indicating whether to show the percentage\r\n   */\r\n  const setShowPleuraPercentageCommand = (value: boolean) => {\r\n    commandsManager.runCommand('setShowPleuraPercentage', { value });\r\n    setShowPleuraPct(value);\r\n  };\r\n  /**\r\n   * Sets whether to show the fan overlay in the viewport\r\n   * @param value - Boolean indicating whether to show the overlay\r\n   */\r\n  const setShowOverlayCommand = (value: boolean) => {\r\n    commandsManager.runCommand('setDisplayFanAnnotation', { value });\r\n    commandsManager.runCommand('setShowPleuraPercentage', { value });\r\n    setShowOverlay(value);\r\n  };\r\n  /**\r\n   * Downloads the annotations as a JSON file\r\n   * Uses the labels and imageIdsToObserve state variables\r\n   */\r\n  const downloadJSON = () => {\r\n    commandsManager.runCommand('downloadJSON', { labels, imageIds: imageIdsToObserve });\r\n  };\r\n\r\n  /**\r\n   * Adds the current image ID to the list of monitored image IDs\r\n   * Only works when auto-add is disabled\r\n   */\r\n  const addCurrentImageId = () => {\r\n    if (!autoAdd) {\r\n      const activeViewportId = viewportGridService.getActiveViewportId();\r\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\r\n      const currentImageId = viewport.getCurrentImageId();\r\n      const imageIds = [...imageIdsToObserve];\r\n      if (!imageIds.includes(currentImageId)) {\r\n        imageIds.push(currentImageId);\r\n      }\r\n      setImageIdsToObserve(imageIds);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handles clicking on a row in the annotated frames table\r\n   * Scrolls the viewport to the selected frame\r\n   * @param item - The annotated frame item that was clicked\r\n   */\r\n  const handleRowClick = item => {\r\n    const activeViewportId = viewportGridService.getActiveViewportId();\r\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\r\n    utilities.scroll(viewport, { delta: item.frame - viewport.getCurrentImageIdIndex() });\r\n  };\r\n\r\n  /**\r\n   * Render helpers so the JSX doesn’t become spaghetti.     */\r\n  const renderWorkflowToggles = () => (\r\n    <PanelSection.Content>\r\n      <div className=\"space-y-3 p-2 text-sm text-[rgb(var(--text))]\">\r\n        <div className=\"flex items-center\">\r\n          <Switch\r\n            id=\"depth-guide-switch\"\r\n            className=\"mr-3\"\r\n            checked={depthGuide}\r\n            onCheckedChange={() => setDepthGuideCommand(!depthGuide)}\r\n          />\r\n          <label\r\n            htmlFor=\"depth-guide-switch\"\r\n            className=\"cursor-pointer\"\r\n            onClick={() => setDepthGuideCommand(!depthGuide)}\r\n          >\r\n            Depth guide toggle\r\n          </label>\r\n        </div>\r\n\r\n        {/* <div className=\"flex items-center\">\r\n          <Switch\r\n            id=\"auto-add-switch\"\r\n            className=\"mr-3\"\r\n            checked={autoAdd}\r\n            onCheckedChange={() => setAutoAddCommand(!autoAdd)}\r\n          />\r\n          <label\r\n            htmlFor=\"auto-add-switch\"\r\n            className=\"cursor-pointer\"\r\n            onClick={() => setAutoAddCommand(!autoAdd)}\r\n          >\r\n            Auto-add annotations\r\n          </label>\r\n        </div> */}\r\n\r\n        <div className=\"flex items-center\">\r\n          <Switch\r\n            id=\"pleura-percentage-switch\"\r\n            className=\"mr-3\"\r\n            checked={showPleuraPct}\r\n            onCheckedChange={() => setShowPleuraPercentageCommand(!showPleuraPct)}\r\n          />\r\n          <label\r\n            htmlFor=\"pleura-percentage-switch\"\r\n            className=\"cursor-pointer\"\r\n            onClick={() => setShowPleuraPercentageCommand(!showPleuraPct)}\r\n          >\r\n            Show pleura percentage\r\n          </label>\r\n        </div>\r\n      </div>\r\n    </PanelSection.Content>\r\n  );\r\n\r\n  const renderSectorAnnotations = () => (\r\n    <PanelSection.Content>\r\n      <div className=\"flex flex-col gap-4 p-2\">\r\n        <Label>Sector Annotations</Label>\r\n        <div className=\"flex items-center gap-2\">\r\n          <Tabs\r\n            defaultValue={UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE}\r\n            onValueChange={newValue => switchAnnotation(newValue)}\r\n          >\r\n            <TabsList>\r\n              <TabsTrigger value={UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA}>\r\n                <Icons.Plus /> Pleura line\r\n              </TabsTrigger>\r\n              <TabsTrigger value={UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE}>\r\n                <Icons.Plus /> B-line\r\n              </TabsTrigger>\r\n              <Separator orientation=\"vertical\" />\r\n              <Separator orientation=\"vertical\" />\r\n            </TabsList>\r\n          </Tabs>\r\n\r\n          <DropdownMenu>\r\n            <DropdownMenuTrigger asChild>\r\n              <Button variant=\"ghost\" className=\"ml-auto\">\r\n                <Icons.More />\r\n              </Button>\r\n            </DropdownMenuTrigger>\r\n            <DropdownMenuContent>\r\n              <DropdownMenuItem\r\n                onClick={() =>\r\n                  deleteLast(UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE)\r\n                }\r\n              >\r\n                <Icons.Delete className=\"text-foreground\" />\r\n                <span className=\"pl-2\">B-line annotation</span>\r\n              </DropdownMenuItem>\r\n              <DropdownMenuItem\r\n                onClick={() =>\r\n                  deleteLast(UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA)\r\n                }\r\n              >\r\n                <Icons.Delete className=\"text-foreground\" />\r\n                <span className=\"pl-2\">Pleura annotation</span>\r\n              </DropdownMenuItem>\r\n            </DropdownMenuContent>\r\n          </DropdownMenu>\r\n        </div>\r\n\r\n        <div className=\"mt-2 flex items-center gap-2\">\r\n          <Switch\r\n            id=\"show-overlay-switch\"\r\n            checked={showOverlay}\r\n            onCheckedChange={() => setShowOverlayCommand(!showOverlay)}\r\n            className=\"data-[state=checked]:bg-blue-500\"\r\n          />\r\n          <label htmlFor=\"show-overlay-switch\" className=\"cursor-pointer text-blue-300\">\r\n            Show Overlay\r\n          </label>\r\n        </div>\r\n\r\n        {/* Divider */}\r\n        <hr className=\"border-t border-gray-800\" />\r\n      </div>\r\n    </PanelSection.Content>\r\n  );\r\n\r\n  const renderAnnotatedFrames = () => (\r\n    <ScrollArea className=\"h-full\">\r\n      <PanelSection.Content>\r\n        <div className=\"mb-4 flex items-center justify-between\">\r\n          {/* <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            className=\"text-blue-300\"\r\n            disabled={autoAdd}\r\n            onClick={addCurrentImageId}\r\n          >\r\n            <Icons.Plus className=\"mr-2\" /> Add current frame\r\n          </Button> */}\r\n          <Button variant=\"ghost\" onClick={() => downloadJSON()}>\r\n            <Icons.Download className=\"h-5 w-5\" />\r\n            <span>JSON</span>\r\n          </Button>\r\n          <Button variant=\"ghost\" onClick={() => setShowOverlayCommand(!showOverlay)}>\r\n            {showOverlay ? <Icons.Hide className=\"h-5 w-5\" /> : <Icons.Show className=\"h-5 w-5\" />}\r\n          </Button>\r\n        </div>\r\n        <div className=\"w-full overflow-hidden\">\r\n          <table className=\"w-full border-collapse text-sm\">\r\n            <thead>\r\n              <tr className=\"border-b border-blue-900 text-blue-300\">\r\n                <th></th>\r\n                <th className=\"py-2 px-3 text-left\">Frame</th>\r\n                <th className=\"py-2 px-3 text-center\">Pleura lines</th>\r\n                <th className=\"py-2 px-3 text-center\">B-lines</th>\r\n                <th className=\"w-10\"></th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {annotatedFrames.map(item => (\r\n                <tr\r\n                  key={item.frame}\r\n                  className={`border-b border-blue-900 ${\r\n                    item.frame === 5 ? 'bg-cyan-800 bg-opacity-30' : ''\r\n                  }`}\r\n                  onClick={() => handleRowClick(item)}\r\n                  style={{ cursor: 'pointer' }}\r\n                >\r\n                  <td className=\"py-3 px-3\">{item.index}</td>\r\n                  <td className=\"py-3 px-3\">{item.frame + 1}</td>\r\n                  <td className=\"py-3 px-3 text-center\">{item.pleura}</td>\r\n                  <td className=\"py-3 px-3 text-center\">{item.bLine}</td>\r\n                  <td className=\"py-3 px-3 text-right\">\r\n                    {item.frame === 5 && (\r\n                      <div className=\"flex items-center justify-end\">\r\n                        <Button variant=\"ghost\" className=\"p-0 text-blue-300\">\r\n                          <Icons.EyeVisible />\r\n                        </Button>\r\n                        <Button variant=\"ghost\" className=\"ml-2 p-0 text-blue-300\">\r\n                          <Icons.More />\r\n                        </Button>\r\n                      </div>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </PanelSection.Content>\r\n    </ScrollArea>\r\n  );\r\n\r\n  const updateAnnotatedFrames = () => {\r\n    const activeViewportId = viewportGridService.getActiveViewportId();\r\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\r\n    // copying to avoid mutating the original array\r\n    const imageIdsMonitored = [...imageIdsToObserve];\r\n    const imageIdFilter = (imageId: string) => {\r\n      if (imageIdsMonitored.length === 0) {\r\n        return true;\r\n      }\r\n      return imageIdsMonitored.includes(imageId);\r\n    };\r\n    const mapping = UltrasoundPleuraBLineTool.countAnnotations(viewport.element, imageIdFilter);\r\n    if (!mapping) {\r\n      setAnnotatedFrames([]);\r\n      return;\r\n    }\r\n    const keys = Array.from(mapping.keys());\r\n    const updatedFrames = keys.map((key, index) => {\r\n      const { pleura, bLine, frame } = mapping.get(key) || { pleura: 0, bLine: 0, frame: 0 };\r\n      return { imageId: key, index: index + 1, frame, pleura, bLine };\r\n    });\r\n    setAnnotatedFrames(updatedFrames);\r\n  };\r\n  /**\r\n   * Callback function that is called when an annotation is modified\r\n   * Updates the annotatedFrames state with the latest annotation data\r\n   */\r\n  const annotationModified = React.useCallback(\r\n    event => {\r\n      if (event.detail.annotation.metadata.toolName === UltrasoundPleuraBLineTool.toolName) {\r\n        updateAnnotatedFrames();\r\n      }\r\n    },\r\n    [viewportGridService, cornerstoneViewportService, imageIdsToObserve]\r\n  );\r\n\r\n  useEffect(() => {\r\n    eventTarget.addEventListener(csToolsEnums.Events.ANNOTATION_MODIFIED, annotationModified);\r\n    const { unsubscribe } = measurementService.subscribe(\r\n      measurementService.EVENTS.MEASUREMENT_REMOVED,\r\n      () => {\r\n        updateAnnotatedFrames();\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      eventTarget.removeEventListener(csToolsEnums.Events.ANNOTATION_MODIFIED, annotationModified);\r\n      unsubscribe();\r\n    };\r\n  }, [annotationModified, measurementService]);\r\n\r\n  /**\r\n   * ──────────────────────────────────────────────────────\r\n   *  🖼  Final Render                                      */\r\n  return (\r\n    <div\r\n      className=\"h-full bg-[rgb(var(--background))] text-[rgb(var(--text))]\"\r\n      style={{ minWidth: 240, maxWidth: 480, width: '100%' }}\r\n    >\r\n      {/* Workflow */}\r\n      <PanelSection>\r\n        <PanelSection.Header>Workflow</PanelSection.Header>\r\n        {renderWorkflowToggles()}\r\n      </PanelSection>\r\n\r\n      {/* Progress\r\n      <PanelSection>\r\n        <SectionHeader title=\"Workflow Progress\" actionLabel=\"Source Folder\" />\r\n        {renderWorkflowProgress()}\r\n      </PanelSection> */}\r\n\r\n      {/* Annotations */}\r\n      <PanelSection>\r\n        <PanelSection.Header> Annotations </PanelSection.Header>\r\n        {renderSectorAnnotations()}\r\n      </PanelSection>\r\n\r\n      {/* Annotated frames */}\r\n      <PanelSection className=\"flex-1\">\r\n        <PanelSection.Header> Annotated Frames </PanelSection.Header>\r\n        {renderAnnotatedFrames()}\r\n      </PanelSection>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport USAnnotationPanel from './panels/USAnnotationPanel';\r\n\r\n/**\r\n * Creates and returns the panel module for ultrasound annotation\r\n * @param params - Object containing commandsManager, servicesManager, and extensionManager\r\n * @returns Array of panel configurations\r\n */\r\nconst getPanelModule = ({ commandsManager, servicesManager, extensionManager }: withAppTypes) => {\r\n  /**\r\n   * Wrapper component for the USAnnotationPanel that injects the required props\r\n   * @param props - Component props including configuration\r\n   * @returns The wrapped USAnnotationPanel component\r\n   */\r\n  const wrappedUSAnnotationPanel = ({ configuration }) => {\r\n    return <USAnnotationPanel />;\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: 'USAnnotationPanel',\r\n      iconName: 'tab-linear',\r\n      iconLabel: 'US Annotation',\r\n      label: 'USAnnotation',\r\n      component: wrappedUSAnnotationPanel,\r\n    },\r\n  ];\r\n};\r\n\r\nexport default getPanelModule;\r\n","import { UltrasoundPleuraBLineTool, Enums as csToolsEnums } from '@cornerstonejs/tools';\r\nimport { Types as OhifTypes } from '@ohif/core';\r\nimport { eventTarget, triggerEvent, utilities } from '@cornerstonejs/core';\r\nimport getInstanceByImageId from './getInstanceByImageId';\r\nimport { setShowPercentage } from './PleuraBlinePercentage';\r\n\r\nconst { transformWorldToIndex } = utilities;\r\n\r\n/**\r\n * Creates and returns the commands module for ultrasound annotation\r\n * @param params - Extension parameters including servicesManager and commandsManager\r\n * @returns The commands module with actions and definitions\r\n */\r\nfunction commandsModule({\r\n  servicesManager,\r\n  commandsManager,\r\n}: OhifTypes.Extensions.ExtensionParams): OhifTypes.Extensions.CommandsModule {\r\n  const { viewportGridService, toolGroupService, cornerstoneViewportService } =\r\n    servicesManager.services as AppTypes.Services;\r\n\r\n  const actions = {\r\n    /**\r\n     * Switches the active ultrasound annotation type\r\n     * @param options - Object containing the annotationType to switch to\r\n     */\r\n    switchUSPleuraBLineAnnotation: ({ annotationType }) => {\r\n      const activeViewportId = viewportGridService.getActiveViewportId();\r\n      const toolGroup = toolGroupService.getToolGroupForViewport(activeViewportId);\r\n      if (!toolGroup) {\r\n        return;\r\n      }\r\n      const usAnnotation = toolGroup.getToolInstance(UltrasoundPleuraBLineTool.toolName);\r\n      if (usAnnotation) {\r\n        usAnnotation.setActiveAnnotationType(annotationType);\r\n      }\r\n    },\r\n    /**\r\n     * Convenience method to switch to pleura line annotation type\r\n     */\r\n    switchUSPleuraBLineAnnotationToPleuraLine: () => {\r\n      actions.switchUSPleuraBLineAnnotation({\r\n        annotationType: UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA,\r\n      });\r\n    },\r\n    /**\r\n     * Convenience method to switch to B-line annotation type\r\n     */\r\n    switchUSPleuraBLineAnnotationToBLine: () => {\r\n      actions.switchUSPleuraBLineAnnotation({\r\n        annotationType: UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE,\r\n      });\r\n    },\r\n    /**\r\n     * Deletes the last annotation of the specified type\r\n     * @param options - Object containing the annotationType to delete\r\n     */\r\n    deleteLastUSPleuraBLineAnnotation: ({ annotationType }) => {\r\n      const activeViewportId = viewportGridService.getActiveViewportId();\r\n      const toolGroup = toolGroupService.getToolGroupForViewport(activeViewportId);\r\n      if (!toolGroup) {\r\n        return;\r\n      }\r\n      const usAnnotation = toolGroup.getToolInstance(UltrasoundPleuraBLineTool.toolName);\r\n      if (usAnnotation) {\r\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\r\n        usAnnotation.deleteLastAnnotationType(viewport.element, annotationType);\r\n        viewport.render();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Convenience method to delete the last pleura line annotation\r\n     */\r\n    deleteLastPleuraAnnotation: () => {\r\n      actions.deleteLastUSPleuraBLineAnnotation({\r\n        annotationType: UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA,\r\n      });\r\n    },\r\n    /**\r\n     * Convenience method to delete the last B-line annotation\r\n     */\r\n    deleteLastBLineAnnotation: () => {\r\n      actions.deleteLastUSPleuraBLineAnnotation({\r\n        annotationType: UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE,\r\n      });\r\n    },\r\n    /**\r\n     * Toggles a boolean attribute of the ultrasound annotation tool\r\n     * @param options - Object containing the attribute name to toggle\r\n     */\r\n    toggleUSToolAttribute: ({ attribute }) => {\r\n      const activeViewportId = viewportGridService.getActiveViewportId();\r\n      const toolGroup = toolGroupService.getToolGroupForViewport(activeViewportId);\r\n      if (!toolGroup) {\r\n        return;\r\n      }\r\n      const configuration = toolGroup.getToolConfiguration(UltrasoundPleuraBLineTool.toolName);\r\n      if (!configuration) {\r\n        return;\r\n      }\r\n      toolGroup.setToolConfiguration(UltrasoundPleuraBLineTool.toolName, {\r\n        [attribute]: !configuration[attribute],\r\n      });\r\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\r\n      viewport.render();\r\n    },\r\n    /**\r\n     * Sets a specific attribute of the ultrasound annotation tool to a given value\r\n     * @param options - Object containing the attribute name and value to set\r\n     */\r\n    setUSToolAttribute: ({ attribute, value }) => {\r\n      const activeViewportId = viewportGridService.getActiveViewportId();\r\n      const toolGroup = toolGroupService.getToolGroupForViewport(activeViewportId);\r\n      if (!toolGroup) {\r\n        return;\r\n      }\r\n      const configuration = toolGroup.getToolConfiguration(UltrasoundPleuraBLineTool.toolName);\r\n      if (!configuration) {\r\n        return;\r\n      }\r\n      toolGroup.setToolConfiguration(UltrasoundPleuraBLineTool.toolName, {\r\n        [attribute]: value,\r\n      });\r\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\r\n      viewport.render();\r\n    },\r\n    /**\r\n     * Toggles the display of fan annotations\r\n     */\r\n    toggleDisplayFanAnnotation: () => {\r\n      actions.toggleUSToolAttribute({\r\n        attribute: 'showFanAnnotations',\r\n      });\r\n    },\r\n    /**\r\n     * Toggles the display of the depth guide\r\n     */\r\n    toggleDepthGuide: () => {\r\n      actions.toggleUSToolAttribute({\r\n        attribute: 'drawDepthGuide',\r\n      });\r\n    },\r\n    /**\r\n     * Sets the depth guide display state\r\n     * @param options - Object containing the boolean value to set\r\n     */\r\n    setDepthGuide: ({ value }) => {\r\n      actions.setUSToolAttribute({\r\n        attribute: 'drawDepthGuide',\r\n        value,\r\n      });\r\n    },\r\n    /**\r\n     * Sets the fan annotation display state\r\n     * @param options - Object containing the boolean value to set\r\n     */\r\n    setDisplayFanAnnotation: ({ value }) => {\r\n      actions.setUSToolAttribute({\r\n        attribute: 'showFanAnnotations',\r\n        value,\r\n      });\r\n    },\r\n    /**\r\n     * Sets whether to show the pleura percentage in the viewport overlay\r\n     * @param options - Object containing the boolean value to set\r\n     */\r\n    setShowPleuraPercentage: ({ value }) => {\r\n      setShowPercentage(value);\r\n      // Trigger ANNOTATION_MODIFIED event to update the overlay\r\n      triggerEvent(eventTarget, csToolsEnums.Events.ANNOTATION_MODIFIED, {\r\n        annotation: {\r\n          metadata: {\r\n            toolName: UltrasoundPleuraBLineTool.toolName,\r\n          },\r\n        },\r\n      });\r\n    },\r\n    /**\r\n     * Generates a JSON representation of the ultrasound annotations\r\n     * @param labels - Array of annotation labels\r\n     * @param imageIds - Array of image IDs to include in the JSON\r\n     * @returns A JSON object containing the annotations data or undefined if generation fails\r\n     */\r\n    generateUSPleuraBLineAnnotationsJSON: (labels: string[] = [], imageIds: string[] = []) => {\r\n      const activeViewportId = viewportGridService.getActiveViewportId();\r\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\r\n      if (!viewport) {\r\n        return;\r\n      }\r\n      const { imageData } = viewport.getImageData() || {};\r\n      if (!imageData) {\r\n        return;\r\n      }\r\n\r\n      const toolGroup = toolGroupService.getToolGroupForViewport(activeViewportId);\r\n      if (!toolGroup) {\r\n        return;\r\n      }\r\n      const usAnnotation = toolGroup.getToolInstance(UltrasoundPleuraBLineTool.toolName);\r\n      if (usAnnotation) {\r\n        const configuration = toolGroup.getToolConfiguration(UltrasoundPleuraBLineTool.toolName);\r\n        const imageId = viewport.getCurrentImageId();\r\n        const filterImageIds = (imageId: string) => {\r\n          if (imageIds.length === 0) {\r\n            return true;\r\n          } else {\r\n            return imageIds.includes(imageId);\r\n          }\r\n        };\r\n        const annotations = UltrasoundPleuraBLineTool.filterAnnotations(\r\n          viewport.element,\r\n          filterImageIds\r\n        );\r\n        const frame_annotations = {};\r\n        const viewportImageIds = viewport.getImageIds();\r\n        annotations.forEach(annotation => {\r\n          const imageId = annotation.metadata.referencedImageId;\r\n          const { annotationType } = annotation.data;\r\n          const [point1, point2] = annotation.data.handles.points;\r\n          const p1 = transformWorldToIndex(imageData, point1);\r\n          const p2 = transformWorldToIndex(imageData, point2);\r\n          const imageIdIndex = viewportImageIds.indexOf(imageId);\r\n          if (frame_annotations[imageIdIndex] === undefined) {\r\n            frame_annotations[imageIdIndex] = {\r\n              pleura_lines: [],\r\n              b_lines: [],\r\n            };\r\n          }\r\n          if (annotationType === UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\r\n            frame_annotations[imageIdIndex].pleura_lines.push([\r\n              [p1[0], p1[1], 0],\r\n              [p2[0], p2[1], 0],\r\n            ]);\r\n          } else if (\r\n            annotationType === UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE\r\n          ) {\r\n            frame_annotations[imageIdIndex].b_lines.push([\r\n              [p1[0], p1[1], 0],\r\n              [p2[0], p2[1], 0],\r\n            ]);\r\n          }\r\n        });\r\n\r\n        const instance = getInstanceByImageId(servicesManager.services, imageId);\r\n        const json = {\r\n          SOPInstanceUID: instance.SOPInstanceUID,\r\n          GrayscaleConversion: false,\r\n          mask_type: 'fan',\r\n          angle1: configuration.startAngle,\r\n          angle2: configuration.endAngle,\r\n          center_rows_px: configuration.center[0],\r\n          center_cols_px: configuration.center[1],\r\n          radius1: configuration.innerRadius,\r\n          radius2: configuration.outerRadius,\r\n          image_size_rows: instance.rows,\r\n          image_size_cols: instance.columns,\r\n          AnnotationLabels: labels,\r\n          frame_annotations,\r\n        };\r\n        return json;\r\n      }\r\n    },\r\n    /**\r\n     * Downloads the ultrasound annotations as a JSON file\r\n     * @param options - Object containing labels and imageIds arrays\r\n     */\r\n    downloadUSPleuraBLineAnnotationsJSON({ labels = [], imageIds = [] }) {\r\n      const json = actions.generateUSPleuraBLineAnnotationsJSON(labels, imageIds);\r\n      if (!json) {\r\n        return;\r\n      }\r\n\r\n      // Convert JSON object to a string\r\n      const jsonString = JSON.stringify(json, null, 2);\r\n\r\n      // Create a blob with the JSON data\r\n      const blob = new Blob([jsonString], { type: 'application/json' });\r\n\r\n      // Create a URL for the blob\r\n      const url = URL.createObjectURL(blob);\r\n\r\n      // Create an anchor element\r\n      const a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = `ultrasound_annotations_${new Date().toISOString().slice(0, 10)}.json`;\r\n\r\n      // Append to the document, click to download, and remove\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n\r\n      // Clean up by revoking the URL\r\n      URL.revokeObjectURL(url);\r\n    },\r\n  };\r\n\r\n  const definitions = {\r\n    switchUSAnnotation: {\r\n      commandFn: actions.switchUSPleuraBLineAnnotation,\r\n    },\r\n    deleteLastAnnotation: {\r\n      commandFn: actions.deleteLastUSPleuraBLineAnnotation,\r\n    },\r\n    toggleDepthGuide: {\r\n      commandFn: actions.toggleDepthGuide,\r\n    },\r\n    setDepthGuide: {\r\n      commandFn: actions.setDepthGuide,\r\n    },\r\n    setShowPleuraPercentage: {\r\n      commandFn: actions.setShowPleuraPercentage,\r\n    },\r\n    toggleUSToolAttribute: {\r\n      commandFn: actions.toggleUSToolAttribute,\r\n    },\r\n    setUSToolAttribute: {\r\n      commandFn: actions.setUSToolAttribute,\r\n    },\r\n    toggleDisplayFanAnnotation: {\r\n      commandFn: actions.toggleDisplayFanAnnotation,\r\n    },\r\n    setDisplayFanAnnotation: {\r\n      commandFn: actions.setDisplayFanAnnotation,\r\n    },\r\n    generateJSON: {\r\n      commandFn: actions.generateUSPleuraBLineAnnotationsJSON,\r\n    },\r\n    downloadJSON: {\r\n      commandFn: actions.downloadUSPleuraBLineAnnotationsJSON,\r\n    },\r\n    switchUSAnnotationToPleuraLine: {\r\n      commandFn: actions.switchUSPleuraBLineAnnotationToPleuraLine,\r\n    },\r\n    switchUSAnnotationToBLine: {\r\n      commandFn: actions.switchUSPleuraBLineAnnotationToBLine,\r\n    },\r\n    deleteLastPleuraAnnotation: {\r\n      commandFn: actions.deleteLastPleuraAnnotation,\r\n    },\r\n    deleteLastBLineAnnotation: {\r\n      commandFn: actions.deleteLastBLineAnnotation,\r\n    },\r\n  };\r\n\r\n  return {\r\n    actions,\r\n    definitions,\r\n    defaultContext: 'CORNERSTONE',\r\n  };\r\n}\r\n\r\nexport default commandsModule;\r\n","import { id } from './id';\r\nimport getPanelModule from './getPanelModule';\r\nimport getCommandsModule from './getCommandsModule';\r\nimport { showPercentage, setShowPercentage } from './PleuraBlinePercentage';\r\n/**\r\n * You can remove any of the following modules if you don't need them.\r\n */\r\nexport default {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   * You ID can be anything you want, but it should be unique.\r\n   */\r\n  id,\r\n  /**\r\n   * PanelModule should provide a list of panels that will be available in OHIF\r\n   * for Modes to consume and render. Each panel is defined by a {name,\r\n   * iconName, iconLabel, label, component} object. Example of a panel module\r\n   * is the StudyBrowserPanel that is provided by the default extension in OHIF.\r\n   */\r\n  getPanelModule,\r\n  /**\r\n   * CommandsModule should provide a list of commands that will be available in OHIF\r\n   * for Modes to consume and use in the viewports. Each command is defined by\r\n   * an object of { actions, definitions, defaultContext } where actions is an\r\n   * object of functions, definitions is an object of available commands, their\r\n   * options, and defaultContext is the default context for the command to run against.\r\n   */\r\n  getCommandsModule,\r\n};\r\n\r\nexport { showPercentage, setShowPercentage };\r\n","/**\r\n * Retrieves the DICOM instance associated with a specific imageId\r\n * @param services - The OHIF services object\r\n * @param imageId - The image ID to find the instance for\r\n * @returns The DICOM instance object or undefined if not found\r\n */\r\nexport default function getInstanceByImageId(services: AppTypes.Services, imageId: string) {\r\n  const activeDisplaySets = services.displaySetService.getActiveDisplaySets();\r\n  const displaySet = activeDisplaySets.find(displaySet => displaySet?.imageIds?.includes(imageId));\r\n  return displaySet?.instance;\r\n}\r\n"],"names":["ChangeTypes","Events","SegmentationRepresentations","StrategyCallbacks","MouseBindings","KeyboardBindings","ToolModes","Swipe","AnnotationStyleStates","showPercentage","setShowPercentage","value","id","packageJson","USAnnotationPanel","servicesManager","commandsManager","useSystem","viewportGridService","cornerstoneViewportService","measurementService","services","depthGuide","setDepthGuide","useState","autoAdd","setAutoAdd","showPleuraPct","setShowPleuraPct","showOverlay","setShowOverlay","annotatedFrames","setAnnotatedFrames","imageIdsToObserve","setImageIdsToObserve","labels","setLabels","deleteLast","type","runCommand","annotationType","updateAnnotatedFrames","setDepthGuideCommand","setShowPleuraPercentageCommand","setShowOverlayCommand","activeViewportId","getActiveViewportId","viewport","getCornerstoneViewport","imageIdsMonitored","mapping","UltrasoundPleuraBLineTool","countAnnotations","element","imageId","length","includes","updatedFrames","Array","from","keys","map","key","index","pleura","bLine","frame","get","annotationModified","React","event","detail","annotation","metadata","toolName","useEffect","eventTarget","addEventListener","csToolsEnums","ANNOTATION_MODIFIED","unsubscribe","subscribe","EVENTS","MEASUREMENT_REMOVED","removeEventListener","className","style","minWidth","maxWidth","width","PanelSection","Header","Content","Switch","checked","onCheckedChange","htmlFor","onClick","Label","Tabs","defaultValue","USPleuraBLineAnnotationType","BLINE","onValueChange","newValue","switchAnnotation","TabsList","TabsTrigger","PLEURA","Icons","Plus","Separator","orientation","DropdownMenu","DropdownMenuTrigger","asChild","Button","variant","More","DropdownMenuContent","DropdownMenuItem","Delete","ScrollArea","imageIds","Download","Hide","Show","item","utilities","delta","getCurrentImageIdIndex","handleRowClick","cursor","EyeVisible","getPanelModule","extensionManager","name","iconName","iconLabel","label","component","wrappedUSAnnotationPanel","configuration","transformWorldToIndex","getCommandsModule","toolGroupService","actions","switchUSPleuraBLineAnnotation","toolGroup","getToolGroupForViewport","usAnnotation","getToolInstance","setActiveAnnotationType","switchUSPleuraBLineAnnotationToPleuraLine","switchUSPleuraBLineAnnotationToBLine","deleteLastUSPleuraBLineAnnotation","deleteLastAnnotationType","render","deleteLastPleuraAnnotation","deleteLastBLineAnnotation","toggleUSToolAttribute","attribute","getToolConfiguration","setToolConfiguration","setUSToolAttribute","toggleDisplayFanAnnotation","toggleDepthGuide","setDisplayFanAnnotation","setShowPleuraPercentage","triggerEvent","generateUSPleuraBLineAnnotationsJSON","imageData","getImageData","getCurrentImageId","filterImageIds","annotations","filterAnnotations","frame_annotations","viewportImageIds","getImageIds","forEach","referencedImageId","data","point1","point2","handles","points","p1","p2","imageIdIndex","indexOf","undefined","pleura_lines","b_lines","push","instance","displaySet","displaySetService","getActiveDisplaySets","find","getInstanceByImageId","SOPInstanceUID","GrayscaleConversion","mask_type","angle1","startAngle","angle2","endAngle","center_rows_px","center","center_cols_px","radius1","innerRadius","radius2","outerRadius","image_size_rows","rows","image_size_cols","columns","AnnotationLabels","downloadUSPleuraBLineAnnotationsJSON","json","jsonString","JSON","stringify","blob","Blob","url","URL","createObjectURL","a","document","createElement","href","download","Date","toISOString","slice","body","appendChild","click","removeChild","revokeObjectURL","definitions","switchUSAnnotation","commandFn","deleteLastAnnotation","generateJSON","downloadJSON","switchUSAnnotationToPleuraLine","switchUSAnnotationToBLine","defaultContext"],"sourceRoot":""}