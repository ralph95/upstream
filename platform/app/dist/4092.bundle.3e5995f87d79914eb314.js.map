{"version":3,"file":"4092.bundle.3e5995f87d79914eb314.js","mappings":"yIAEMA,E,6DAAKC,GAELC,EAAoB,GAAGF,oC,+ECK7B,MAAMG,EAAe,CAAC,+BAAgC,gCAEhDC,EAAe,CAAC,EAEtB,SAASC,EACPC,EACAC,EACAC,GAEA,MAAMC,EAAWH,EAAU,IAErB,iBACJI,EAAgB,kBAChBC,EAAiB,eACjBC,EAAc,kBACdC,EAAiB,aACjBC,EAAY,WACZC,EAAU,YACVC,EAAW,SACXC,EAAQ,QACRC,EAAO,YACPC,GACEV,EAEEW,EAAa,CACjBC,SAAU,MACVC,SAAS,EACTC,mBAAmB,EACnBC,sBAAuBC,EAAAA,GAAMC,OAC7Bb,oBACAC,eACAC,aACAH,iBACAD,oBACAD,mBACAR,kBAAiB,EACjBc,cACAW,iBAAkB,KAClBC,4BAA6B,KAC7BC,gCAAiC,KACjCC,qBAAqB,EACrBC,UAAU,EACVC,YAAY,EACZC,SAAU,CAAC,EACX9B,eACAM,WACAH,UAAW,CAACG,GACZQ,WACAE,cACAD,UACAgB,qBAAqB,EACrBC,MAAOtB,GAAqB,GAAGuB,EAAAA,EAAKC,EAAE,aAAavB,OAAkBsB,EAAAA,EAAKC,EAAE,UAGxEC,EAA2B7B,EAAS8B,yBAE1C,IAAKD,EAEH,YADAE,QAAQC,MAAM,mDAIhB,MAAMC,EAAmBJ,EAAyB,IAAMA,EAExDlB,EAAWO,iBAAmBlB,EAAS8B,yBAAyBI,2BAChEvB,EAAWQ,4BAA8Bc,EAAiB/B,kBAC1D,MAAM,kBAAEiC,GAAsBrC,EAAgBsC,SAKxCC,EAJwBF,EAAkBG,wBAC9C3B,EAAWQ,6BAGsC,GAEnD,GAAKkB,EAkBH1B,EAAWS,gCAAkCiB,EAAqBtB,sBAClEJ,EAAWG,kBAAoBuB,EAAqBvB,sBAnB3B,CAEzB,MAAM,YAAEyB,GAAgBJ,EAAkBK,UACxCL,EAAkBM,OAAOC,mBACzB,EAAGC,uBAKD,MAAMC,EAAkBD,EAAiB,GACrCC,EAAgB1C,oBAAsBS,EAAWQ,8BACnDR,EAAWS,gCAAkCwB,EAAgB7B,sBAC7DJ,EAAWG,kBAAoB8B,EAAgB9B,kBAC/CyB,MAIR,CAQA,OAHA5B,EAAWkC,KAAOC,OAASC,mBAM7B,SACEC,EACAlD,EACAC,EACAgD,GAEA,MAAM,eAAE5C,GAAmB6C,GACrB,oBAAEC,GAAwBnD,EAAgBsC,SAEhD,IACGY,EAAcnC,SAAWmC,EAAc1B,WACxC3B,EAAaQ,IAkHjB,SAA6B6C,GAC3B,OAAOE,EAAAA,aAAAA,MAAAA,gBAAsCF,EAAcjC,sBAC7D,CAnHIoC,CAAoBH,GAEpB,OAAOrD,EAAaQ,GAkCtB,OA/BA6C,EAAcnC,SAAU,EAIxBlB,EAAaQ,GAAkB,IAAIiD,QAAQN,MAAOO,EAASC,KACzD,IAAKN,EAAcxB,UAA2D,IAA/C+B,OAAOC,KAAKR,EAAcxB,UAAUiC,OACjE,UA4BNX,gBAA6B,iBAC3B/C,EAAgB,gBAChBD,EAAe,cACfkD,EAAa,QACbD,IAEA,MAAMW,EAAgB3D,EAAiB4D,eACrC,qDAGI,oBAAEV,EAAmB,sBAAEW,GAA0B9D,EAAgBsC,UAEjE,mBAAEyB,GAAuBH,EAAcI,QACvCC,QAAoBF,EAAmBG,qBAAqBhB,EAAe,KAAMD,GAEjFV,EAAuBvC,EAAgBsC,SAASD,kBAAkB8B,mBACtEjB,EAAc5B,iCAGhB,IAAKiB,EACH,MAAM,IAAI6B,MAAM,2CAGlB,IAAI,SAAEC,GAAa9B,EAEnB,IAAK8B,EAAU,CAEb,MAAM,OAAEC,GAAW/B,EACnB8B,EAAWC,EAAOC,IAAIC,GAASA,EAAMC,QACvC,CAGA,MAAMC,EAAY,KAClBC,EAAAA,YAAYC,iBAAiBC,EAAAA,GAAAA,EAAaC,2BAA4BC,IACpE,MAAM,gBAAEC,GAAoBD,EAAIE,OAChC9B,EAAoB+B,gBAAgB/B,EAAoBR,OAAOwC,yBAA0B,CACvFH,sBAIJ,MAAMI,QAAgBC,EAAAA,GAAYC,cAAcC,aAAaC,yBAC3DnB,EACAJ,EACA,CAAEwB,iBAAkBC,EAAAA,SAAUhB,cAGhC,IAAIiB,GAAoC,EACxCP,EAAQQ,YAAYC,KAAKC,QAAQ,CAACD,EAAME,KCxM1C,IAAuBC,EDyMfD,EAAI,IACNF,EAAKI,KAAOJ,EAAKK,8BAEbL,EAAKI,KACPJ,EAAKI,MC7MUD,ED6MWH,EAAKI,KC5MzBE,EAAAA,GAAAA,KAAWC,OAAOC,aAAaL,GAAQzB,IAAI+B,GAAKC,KAAKC,MAAU,IAAJF,MD8MjEX,GAAoC,EACpCE,EAAKI,KAAOQ,EAAAA,UAAAA,UAAoBV,EAAIU,EAAAA,UAAAA,UAAoB9C,YAKzDgC,GAEH7B,EAAsB4C,KAAK,CACzBC,MAAO,mBACPC,QACE,wGACFC,KAAM,UACNC,SAAU,MAIdrD,OAAOsD,OAAO7D,EAAekC,EAC/B,CAnGc4B,CAAc,CAClB/G,mBACAD,kBACAkD,gBACAD,WAEJ,CAAE,MAAOgE,GAEP,OADA/D,EAAcnC,SAAU,EACjByC,EAAOyD,EAChB,CAGF9D,EACG+D,mCAAmChE,GACnCiE,KAAK,KACJjE,EAAcnC,SAAU,EACxBwC,MAED6D,MAAMlF,IACLgB,EAAcnC,SAAU,EACxByC,EAAOtB,OAINrC,EAAaQ,EACtB,CAtDUgH,CAAMxG,EAAYb,EAAiBC,EAAkBgD,GAEtD,CAACpC,EACV,CAkJA,QAfA,SAAkCyG,GAChC,MAAM,gBAAEtH,EAAe,iBAAEC,GAAqBqH,EAK9C,MAAO,CACL,CACEC,KAAM,YACN3H,eACA4H,yBAR6BzH,GACxBD,EAA0BC,EAAWC,EAAiBC,IAUjE,EEzPMwH,EAA8C,CAClDhI,GAAI,YAIJ8H,KAAM,gBAENG,sBAAuB,GACvBC,aAAc,CAAC,WAIfC,yBAA0B,EAG1BC,gBAAiB,CACfC,gBAAiB,CACfC,aAAc,QACdC,YAAa,UACbC,oBAAoB,EACpBC,WAAY,CACV,CACErB,KAAM,aACNpH,GAAI,YACJ0I,QAAQ,EACRC,QAAQ,KAOdC,YAAa,CACX,CACE5I,GAAI,kBACJ6I,yBAA0B,KAIhCC,oBAAqB,CACnBC,gBAAiB,CACfC,oBAAqB,CACnB,CACEC,UAAW,WACXC,WAAY,CACVC,OAAQ,WAMlBC,OAAQ,CACN,CACEtB,KAAM,gBACNuB,kBAAmB,CACjBC,WAAY,OACZC,WAAY,CACVC,KAAM,EACNC,QAAS,IAGbC,UAAW,CACT,CACErB,gBAAiB,CACfG,oBAAoB,EACpBC,WAAY,CACV,CACErB,KAAM,aACNpH,GAAI,YACJ0I,QAAQ,EACRC,QAAQ,KAOdC,YAAa,CACX,CACE5I,GAAI,yBAkBlB,QATA,WACE,MAAO,CACL,CACE8H,KAAME,EAAYhI,GAClB2J,SAAU3B,GAGhB,E,0BCvFA,MAAM,cAAE4B,GAAkBlD,EAAAA,GAAAA,MAYxBb,eACEC,cAAc,qBAAE+D,KAEhBjE,EAAAA,IAGFC,eACEiE,MAAM,8BAAEC,KAERC,EAAAA,IAEIC,GAAAA,GAAsBC,EAAAA,GA8T9B,EA5TuBC,EACrB5J,kBACAC,uBAEA,MAAM,oBAAEkD,EAAmB,kBAAEd,EAAiB,oBAAEwH,GAC9C7J,EAAgBsC,SAEZwH,EAAU,CAWdC,6BAA8B/G,OAASgH,gBAAeC,iBAEpD,MAAMC,EA3CcC,GAAGF,aAAYJ,0BACvC,MAAM,UAAEV,EAAS,iBAAEiB,GAAqBP,EAAoBQ,WACtDC,EAAmBL,GAAcG,EAIvC,OAFiBjB,EAAUoB,IAAID,IAuCVH,CAAkB,CAAEF,aAAYJ,wBAC3C5I,EAAwBiJ,EAASM,uBAAuB,GAExDC,EAAeT,EAAc,GAC7BU,EAAiBD,EAAaC,eAC9B9I,EAAQ6I,EAAaE,OAAO/I,MAC5BF,EAAW+I,EAAaE,OAAOjJ,SAE/Bb,EAAawB,EAAkB8B,mBAAmBlD,GAcxD,aAZMkC,EAAoByH,4BAA4B/J,EAAY,CAChE6J,iBACAhJ,WACAE,UAGFuB,EAAoB0H,wBAAwBJ,SAEtCtH,EAAoB2H,8BAA8BZ,EAASD,WAAY,CAC3ES,mBAGKA,GAeTpB,qBAAsBA,EAAGoB,iBAAgBK,UAAU,CAAC,MAClD,MAAMN,EAAeO,EAAAA,aAAAA,MAAAA,gBAAmDN,IAElE,SAAErG,GAAaoG,EAAaQ,mBAAmBC,SAE/CC,EAAY9G,EAASE,IAAIE,GAAW2G,EAAAA,MAAMC,SAAS5G,IACnDrD,EAAmB+J,EAAU5G,IAAIC,GAAS4G,EAAAA,MAAMC,SAAS7G,EAAM8G,oBAE/DC,EAAc,GAEpB,IAAIC,EAAI,EAER,IAAK,MAAMC,KAAYN,EAAW,CAChC,MAAMO,EAAqB,IAAIC,IACzBC,EAAYH,EAASI,gBACrB,KAAE5C,EAAI,QAAEC,GAAYuC,EAG1B,IAAK,IAAI1F,EAAI,EAAGA,EAAI6F,EAAUjI,OAAQoC,IAAK,CACzC,MAAM+F,EAAUF,EAAU7F,GACV,IAAZ+F,GACFJ,EAAmBK,IAAID,EAE3B,CAEAP,EAAYC,KAAO,CACjBE,mBAAoBM,MAAMC,KAAKP,GAC/BE,YACA3C,OACAC,UAEJ,CAEA,MAAMgD,EAAwBX,EAAYhH,IAAI4H,GAAYA,EAAST,oBAE7DU,EAAa,CACjBV,mBAAoBM,MAAMC,KAAK,IAAIN,IAAIO,EAAsBG,SAC7DC,SAAU,GACVf,eAGIgB,EAAqBpJ,EAAoBqJ,gBAAgB9B,GACzD+B,EAAkBtJ,EAAoBuJ,kCAAkChC,GAE9EjH,OAAOkJ,QAAQJ,EAAmB7K,UAAUoE,QAAQ,EAAE8G,EAAcd,MAElE,IAAKA,EACH,OAGF,MAAM,MAAElK,GAAUkK,EAEZe,EAAsBJ,EAAgB,GACtCK,EAAQ3J,EAAoB4J,gBAChCF,EAAoB5C,WACpBS,EACAoB,EAAQc,cAGJ1G,EAAgCC,EAAAA,GAAAA,KAAWC,OAAO4G,aACtDF,EAAMG,MAAM,EAAG,GAAG1I,IAAI2I,GAASA,EAAQ,MACvC3I,IAAI2I,GAAS3G,KAAKC,MAAM0G,IAEpBC,EAAkB,CACtBC,cAAeR,EAAaS,WAC5BC,aAAc1L,EACd2L,qBAAsBzB,GAAS0B,eAAiB,SAChDC,qBAAsB3B,GAAS4B,eAAiB,aAChDxH,gCACAyH,sCAAuC,CACrCC,UAAW,UACXC,uBAAwB,MACxBC,YAAa,UAEfC,kCAAmC,CACjCH,UAAW,UACXC,uBAAwB,MACxBC,YAAa,WAGjB1B,EAAWE,SAASM,GAAgBO,IAUtC,OAP8B7D,EAC5BlI,EACAgL,EACA1G,EAAAA,SACAqF,IAeJiD,qBAAsBA,EAAGtD,qBACvB,MAAM6B,EAAqBpJ,EAAoBqJ,gBAAgB9B,GACzDuD,EAAwBnE,EAAQR,qBAAqB,CACzDoB,mBAGFhB,EAAkBuE,EAAsBC,QAAS,GAAG3B,EAAmB3K,UAczEuM,kBAAmBnL,OAAS0H,iBAAgB0D,iBAC1C,MAAM3D,EAAetH,EAAoBqJ,gBAAgB9B,GAEzD,IAAKD,EACH,MAAM,IAAIrG,MAAM,yBAGlB,MAAM,MAAExC,GAAU6I,EACZ4D,EAAoBD,GAAcnO,EAAiBqO,sBAAsB,IAG7EpB,MAAOqB,EACPC,eAAgBC,EAAkB,OAClCC,SACQC,EAAAA,EAAAA,0BAAyB,CACjC3O,kBACAC,mBACA0G,MAAO,uBAGT,GAAI+H,IAAWE,EAAAA,EAAiBC,cAC9B,IACE,MAAMC,EAA2BL,EAC7BxO,EAAiB8O,eAAeN,GAAoB,GACpDJ,EAEEW,EAAgBlF,EAAQR,qBAAqB,CACjDoB,iBACAK,QAAS,CACPzK,kBAAmBiO,GAAc3M,GAAS,6BAI9C,IAAKoN,IAAkBA,EAAcd,QACnC,MAAM,IAAI9J,MAAM,wCAGlB,MAAQ8J,QAASe,GAAsBD,EAcvC,MAXkC,gBAA9BC,EAAkBC,UACpBD,EAAkBC,QAAU,UAGxBJ,EAAyBK,MAAMC,MAAMH,GAG3CA,EAAkBvO,SAAWoO,EAAyBO,YAAY3O,SAElE4O,EAAAA,GAAmBC,aAAa,CAACN,IAAoB,GAE9CA,CACT,CAAE,MAAO/M,GAEP,MADAD,QAAQuN,MAAM,8BAA+BtN,GACvCA,CACR,GAUJuN,aAAczM,OAAS0H,qBACrB,MAAMV,EAAgB7G,EAAoBqJ,gBAAgB9B,GAGpDmC,EACJ1J,EAAoBuJ,kCAAkChC,GAAgB,GACxEjH,OAAOkJ,QAAQ3C,EAActI,UAAUoE,QAAQ,EAAE8G,EAAcd,MAC7DA,EAAQgB,MAAQ3J,EAAoB4J,gBAClCF,EAAoB5C,WACpBS,EACAkC,KAIJ,MAAMrD,QAAaC,EACjBQ,EACA0F,EAAAA,GAAQC,iBACRL,EAAAA,IAGF,IACE,MAAMM,EAAavG,EAAcE,GAG3BsG,EAAYC,IAAIC,gBAAgBH,GACtCI,OAAOC,SAASlJ,OAAO8I,EACzB,CAAE,MAAO5I,GACPhF,QAAQiO,KAAKjJ,EACf,GAEFkJ,gCAAiCA,EAAGC,OAAQC,MAC1C,MAAM,QAAEC,EAAO,WAAEC,GAAeC,EAAAA,gBAAgBnG,WAC1CoG,EAAiBH,EAAmC,4BAAMD,EAChEpO,QAAQyO,IAAI,kCAAmCD,EAAgBJ,GAG7DE,EAAW,4BADTE,EACsC,KAEAJ,KAKxCM,EAAc,CAClB5G,6BAA8B,CAC5B6G,UAAW9G,EAAQC,8BAGrBT,qBAAsB,CACpBsH,UAAW9G,EAAQR,sBAErB0E,qBAAsB,CACpB4C,UAAW9G,EAAQkE,sBAErBG,kBAAmB,CACjByC,UAAW9G,EAAQqE,mBAErBsB,aAAc,CACZmB,UAAW9G,EAAQ2F,cAErBU,gCAAiC,CAC/BS,UAAW9G,EAAQqG,kCAIvB,MAAO,CACLrG,UACA6G,cACAE,eAAgB,iB,qCCpUpB,MAAM,iBAAEC,GAAqBC,EAAAA,oBACvBhG,EAAU,CACd,CACEmC,MAAO,QACP8D,iBAAkBF,EAAiBG,MACnCrP,MAAO,QACPsP,KAAM,wBACNC,WAAY,wBAEd,CACEjE,MAAO,YACP8D,iBAAkBF,EAAiBM,UACnCxP,MAAO,YACPsP,KAAM,4BACNC,WAAY,4BAEd,CACEjE,MAAO,WACP8D,iBAAkBF,EAAiBO,SACnCzP,MAAO,WACPsP,KAAM,2BACNC,WAAY,4BAKhB,SAASG,GAAgB,MACvB1P,EAAK,MACLsL,EAAK,cACLqE,EAAa,SACb7P,EAAQ,YACR8P,EAAc,qBAQd,OACEC,EAAAA,cAAA,OAAKC,UAAU,8BACbD,EAAAA,cAAA,WAAM7P,GACN6P,EAAAA,cAACE,EAAAA,IAAM,CACLC,IAAK,kBAAkBhQ,IACvB2P,cAAeA,EACfrE,MAAOA,GAEPuE,EAAAA,cAACI,EAAAA,IAAa,CAACH,UAAU,mBACvBD,EAAAA,cAACK,EAAAA,IAAW,CAACN,YAAaA,KAE5BC,EAAAA,cAACM,EAAAA,IAAa,KACXrQ,EAAS6C,IAAIuH,GACZ2F,EAAAA,cAACO,EAAAA,IAAU,CACTJ,IAAK9F,EAAQc,aACbM,MAAOpB,EAAQc,aAAaS,YAE3BvB,EAAQlK,UAOvB,CA4JA,QA1JA,WACE,MAAM,gBAAE5B,IAAoBiS,EAAAA,EAAAA,OACtB,oBAAE9O,GAAwBnD,EAAgBsC,UAC1C,iCAAE4P,IAAqCC,EAAAA,EAAAA,gDAEvCC,EAAuBF,GAAkCG,KAC7D,EAAGC,oBAAqBA,GAAgBC,QAGpC7Q,EAAW0Q,EACb3O,OAAO+O,OAAOJ,EAAqB3H,aAAa/I,UAChD,GAGE+Q,EAAmBL,EACrBjP,EAAoBuP,6BAClBN,EAAqB3H,aAAaC,gBAEpC,EAEEiI,EAAgBjR,EAAS2Q,KAAKvG,GAAWA,EAAQyG,QAEjDK,EAAqBD,GAAe/F,cAAgB,GAEnDiG,EAAWC,IAAgBC,EAAAA,EAAAA,UAAShI,EAAQ,KAC5CiI,EAAUC,IAAeF,EAAAA,EAAAA,UAAiBH,GAAoBvF,YAAc,KAC5E6F,EAAUC,IAAeJ,EAAAA,EAAAA,UAAiB,KAC1CK,EAAkBC,IAAuBN,EAAAA,EAAAA,WAAkB,IAC3DO,EAAgBC,IAAqBR,EAAAA,EAAAA,UAAiB,KAE7DS,EAAAA,EAAAA,WAAU,KACRP,EAAYL,GAAoBvF,YAAc,OAC7C,CAACuF,KAEJY,EAAAA,EAAAA,WAAU,KACRD,EAAkB,WAAWd,MAC5B,CAACA,IAEJ,MAAMgB,GAAaC,EAAAA,EAAAA,MAEbC,GAA+BC,EAAAA,EAAAA,aAAY,KAC/C,IAAIC,EAAqBb,EACrBI,IACFS,EAAqBpB,EAAiBpF,WACtCoG,EAAW,aAAc,CACvB/I,eAAgB0H,EAAqB3H,aAAaC,eAClDC,OAAQ,CACN/I,MAAO0R,EACP1G,aAAc6F,MAIpBgB,EAAW,+BAAgC,CACzCK,aAAc,CACZpJ,eAAgB0H,EAAqB3H,aAAaC,eAClDkC,aAAcmH,SAASf,IAEzBgB,aAAc,CACZtJ,eAAgB0H,EAAqB3H,aAAaC,eAClDkC,aAAcmH,SAASb,IAEzBe,kBAAmB,CACjBvJ,eAAgB0H,EAAqB3H,aAAaC,eAClDkC,aAAcmH,SAASF,IAEzB7C,iBAAkB6B,EAAU7B,oBAE7B,CACDoB,GAAsB3H,cAAcC,eACpC0I,EACAE,EACAb,EACAI,EAAU7B,iBACVyC,EACAT,EACAE,IAGF,OACEzB,EAAAA,cAAA,OAAKC,UAAU,iCACbD,EAAAA,cAAA,OAAKC,UAAU,oCACbD,EAAAA,cAAA,OAAKC,UAAU,8EACbD,EAAAA,cAACyC,EAAAA,IAAI,CAAChH,MAAO2F,EAAU3F,OACrBuE,EAAAA,cAAC0C,EAAAA,IAAQ,CAACzC,UAAU,yBACjB3G,EAAQxG,IAAI6P,IACX,MAAM,MAAElH,EAAK,KAAEgE,GAASkD,EACxB,OACE3C,EAAAA,cAAC4C,EAAAA,IAAW,CACVnH,MAAOA,EACP0E,IAAK,6BAA6B1E,IAClCoH,QAASA,IAAMxB,EAAasB,IAE5B3C,EAAAA,cAAC8C,EAAAA,IAAMC,OAAM,CAACjN,KAAM2J,SAM9BO,EAAAA,cAAA,WAAMoB,EAAUjR,QAElB6P,EAAAA,cAAA,OAAKC,UAAU,+FACbD,EAAAA,cAAC8C,EAAAA,IAAMC,OAAM,CAACjN,KAAMsL,EAAU1B,eAGlCM,EAAAA,cAACH,EAAe,CACd1P,MAAM,IACNsL,MAAO8F,EACPzB,cAAe0B,EACfvR,SAAUA,IAEZ+P,EAAAA,cAACH,EAAe,CACd1P,MAAM,IACNsL,MAAOgG,EACP3B,cAAe4B,EACfzR,SAAUA,IAEZ+P,EAAAA,cAAA,OAAKC,UAAU,8BACbD,EAAAA,cAACgD,EAAAA,IAAM,CACL/C,UAAU,gCACVgD,QAAQ,QACRJ,QAASA,KACPX,MAGDd,EAAUjR,QAGf6P,EAAAA,cAACkD,EAAAA,IAAS,CAACjD,UAAU,0BACrBD,EAAAA,cAAA,OAAKC,UAAU,uBACbD,EAAAA,cAAA,OAAKC,UAAU,yCACbD,EAAAA,cAACmD,EAAAA,IAAM,CACLnV,GAAG,uDACHoV,gBAAiBxB,IAEnB5B,EAAAA,cAACqD,EAAAA,IAAK,CAACC,QAAQ,wDAAuD,yBAIxEtD,EAAAA,cAAA,OAAKC,UAAU,QACbD,EAAAA,cAACuD,EAAAA,IAAK,CACJtD,WAAWuD,EAAAA,EAAAA,IAAG7B,EAAmB,UAAY,UAC7C8B,UAAW9B,EACX3T,GAAG,sDACHoH,KAAK,OACL2K,YAAY,mBACZtE,MAAOoG,EACP6B,SAAUlO,GAAKsM,EAAkBtM,EAAEmB,OAAO8E,WAMtD,EC1KA,QAlEA,WACE,MAAOkI,EAAeC,IAAoBtC,EAAAA,EAAAA,UAAS,IAE7CU,GAAaC,EAAAA,EAAAA,MAEnB,OACEjC,EAAAA,cAAA,OAAKC,UAAU,+EACbD,EAAAA,cAAA,OAAKC,UAAU,sEACbD,EAAAA,cAAA,WAAK,sBACLA,EAAAA,cAACgD,EAAAA,IAAM,CACL/C,UAAU,2BACVgD,QAAQ,QACRJ,QAASA,KACPb,EAAW,wBAEd,cAGDhC,EAAAA,cAACkD,EAAAA,IAAS,CAACjD,UAAU,gCAEvBD,EAAAA,cAAA,OAAKC,UAAU,sEACbD,EAAAA,cAAA,WAAK,yBACLA,EAAAA,cAAA,OAAKC,UAAU,oCACbD,EAAAA,cAACqD,EAAAA,IAAK,CACJC,QAAQ,2BACRrD,UAAU,yBACX,kBAGDD,EAAAA,cAACuD,EAAAA,IAAK,CACJvV,GAAG,2BACHiS,UAAU,OACV7K,KAAK,SACLqG,MAAOkI,EACPD,SAAUlO,GAAKoO,EAAiBC,OAAOrO,EAAEmB,OAAO8E,WAGpDuE,EAAAA,cAACgD,EAAAA,IAAM,CACL/C,UAAU,2BACVgD,QAAQ,QACRJ,QAASA,KACPb,EAAW,sBAAuB,CAChC2B,oBAGL,yBAGD3D,EAAAA,cAACkD,EAAAA,IAAS,CAACjD,UAAU,gCAEvBD,EAAAA,cAAA,OAAKC,UAAU,sEACbD,EAAAA,cAAA,WAAK,iCACLA,EAAAA,cAACgD,EAAAA,IAAM,CACL/C,UAAU,2BACVgD,QAAQ,QACRJ,QAASA,KACPb,EAAW,yBAEd,uBAMT,EC9BA,QAlCA,WACE,MAAMA,GAAaC,EAAAA,EAAAA,MAEnB,OACEjC,EAAAA,cAAA,OAAKC,UAAU,+EACbD,EAAAA,cAAA,OAAKC,UAAU,sEACbD,EAAAA,cAAA,WAAK,oBACLA,EAAAA,cAACgD,EAAAA,IAAM,CACL/C,UAAU,2BACVgD,QAAQ,QACRJ,QAASA,KACPb,EAAW,oBAEd,gBAGDhC,EAAAA,cAACkD,EAAAA,IAAS,CAACjD,UAAU,gCAEvBD,EAAAA,cAAA,OAAKC,UAAU,sEACbD,EAAAA,cAAA,WAAK,uBACLA,EAAAA,cAACgD,EAAAA,IAAM,CACL/C,UAAU,2BACVgD,QAAQ,QACRJ,QAASA,KACPb,EAAW,sBAEd,kBAMT,E,wNC5BA,MAAM8B,EAAY9D,EAAAA,KAAW,IACpB,iCAGH+D,EAA6BC,GAE/BhE,EAAAA,cAACA,EAAAA,SAAc,CAACiE,SAAUjE,EAAAA,cAAA,WAAK,eAC7BA,EAAAA,cAAC8D,EAAcE,IAwCrB,EAhCkB,CAKhBhW,GAAE,EACFkW,kBAAiB,EACjBC,iBCzBK,UAA0B,gBAAE5V,IACjC,MAAM,oBAAEmD,EAAmB,eAAE0S,EAAc,iBAAEC,GAAqB9V,EAAgBsC,SAClF,MAAO,CACL,CACEiF,KAAM,qCACNwO,iBAAkBC,GAEpB,CACEzO,KAAM,8CACNwO,iBAAkBE,GAEpB,CACE1O,KAAM,oCACNwO,iBAAkBG,GAEpB,CACE3O,KAAM,0CACN4O,SAAUA,EAAGC,aACX,MAAM,QAAE9F,GAAYE,EAAAA,gBAAgBnG,WACpC,MAAO,CACLgM,SAAU/F,EAAmC,4BAAM8F,EAAO3W,MAIhE,CACE8H,KAAM,uCACN4O,SAAUA,EAAGlM,iBACX,MAAMD,EAAgB7G,EAAoBmT,+BAA+BrM,GACzE,MAAO,CACLiL,UAAWlL,GAAerG,UAIhC,CACE4D,KAAM,6CACN4O,SAAUA,EAAGlM,aAAYsM,qCACvB,MAAMvM,EAAgB7G,EAAoBmT,+BAA+BrM,GAEzE,OAAKD,GAAerG,OAQjBqG,EAAcwM,KAAK/L,GAClBgM,QAAQhM,EAAa5D,OAAS0P,SAFlC,EAKS,CACLrB,UAAU,EACVwB,aAAc,MAAMH,6BAbf,CACLrB,UAAU,EACVwB,aAAc,gCAgBtB,CACEnP,KAAM,oCACN4O,SAAUA,EAAGlM,aAAYmM,SAAQO,YAAWD,mBAK1C,MAAM1M,EAAgB7G,EAAoBmT,+BAA+BrM,GACzE,IAAKD,GAAerG,OAClB,MAAO,CACLuR,UAAU,EACVwB,aAAcA,GAAgB,8BAIlC,MAAME,EAAqBzT,EAAoB0T,sBAAsB5M,GACrE,IAAKxG,OAAOC,KAAKkT,EAAmBlV,UAAUiC,OAC5C,MAAO,CACLuR,UAAU,EACVwB,aAAc,mCAIlB,MAAMI,EAAYhB,EAAiBiB,wBAAwB9M,GAE3D,IAAK6M,EACH,MAAO,CACL5B,UAAU,EACVwB,aAAcA,GAAgB,yCAIlC,IAAKC,EACH,MAAO,CACLzB,UAAU,GAKd,MAAM8B,EAAWnB,EAAeoB,qBAAqBb,GAErD,IAAKU,EAAUI,QAAQF,KAAcL,EACnC,MAAO,CACLzB,UAAU,EACVwB,aAAcA,GAAgB,yCAQlC,MAAO,CACLxB,UAAU,EACVmB,SANsBM,EACpBA,EAAUQ,SAASL,EAAUM,mCAC7BN,EAAUM,oCAAsCJ,KAS5D,ED1FEK,kBAAiBA,EAAC,gBAAErX,EAAe,iBAAEC,EAAgB,gBAAEqX,KAY9C,CAAC,CAAE/P,KAAM,YAAagQ,UAXc9B,GAEvChE,EAAAA,cAAC+D,EAA0BgC,EAAA,CACzBxX,gBAAiBA,EACjBC,iBAAkBA,EAClBqX,gBAAiBA,GACb7B,MAaZgC,yBAAwB,EACxBC,yBAAwBA,E","sources":["webpack:///../../../extensions/cornerstone-dicom-seg/src/id.js","webpack:///../../../extensions/cornerstone-dicom-seg/src/getSopClassHandlerModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/dicomlabToRGB.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/getHangingProtocolModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/commandsModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/components/LogicalContourOperationsOptions.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/components/SimplifyContourOptions.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/components/SmoothContoursOptions.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/index.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/getToolbarModule.ts"],"sourcesContent":["import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\nconst SOPClassHandlerName = 'dicom-seg';\r\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.${SOPClassHandlerName}`;\r\n\r\nexport { id, SOPClassHandlerId, SOPClassHandlerName };\r\n","import { utils, Types as OhifTypes } from '@ohif/core';\r\nimport i18n from '@ohif/i18n';\r\nimport { metaData, eventTarget } from '@cornerstonejs/core';\r\nimport { CONSTANTS, segmentation as cstSegmentation } from '@cornerstonejs/tools';\r\nimport { adaptersSEG, Enums } from '@cornerstonejs/adapters';\r\n\r\nimport { SOPClassHandlerId } from './id';\r\nimport { dicomlabToRGB } from './utils/dicomlabToRGB';\r\n\r\nconst sopClassUids = ['1.2.840.10008.5.1.4.1.1.66.4', '1.2.840.10008.5.1.4.1.1.66.7'];\r\n\r\nconst loadPromises = {};\r\n\r\nfunction _getDisplaySetsFromSeries(\r\n  instances,\r\n  servicesManager: AppTypes.ServicesManager,\r\n  extensionManager\r\n) {\r\n  const instance = instances[0];\r\n\r\n  const {\r\n    StudyInstanceUID,\r\n    SeriesInstanceUID,\r\n    SOPInstanceUID,\r\n    SeriesDescription,\r\n    SeriesNumber,\r\n    SeriesDate,\r\n    SOPClassUID,\r\n    wadoRoot,\r\n    wadoUri,\r\n    wadoUriRoot,\r\n  } = instance;\r\n\r\n  const displaySet = {\r\n    Modality: 'SEG',\r\n    loading: false,\r\n    isReconstructable: false,\r\n    displaySetInstanceUID: utils.guid(),\r\n    SeriesDescription,\r\n    SeriesNumber,\r\n    SeriesDate,\r\n    SOPInstanceUID,\r\n    SeriesInstanceUID,\r\n    StudyInstanceUID,\r\n    SOPClassHandlerId,\r\n    SOPClassUID,\r\n    referencedImages: null,\r\n    referencedSeriesInstanceUID: null,\r\n    referencedDisplaySetInstanceUID: null,\r\n    isDerivedDisplaySet: true,\r\n    isLoaded: false,\r\n    isHydrated: false,\r\n    segments: {},\r\n    sopClassUids,\r\n    instance,\r\n    instances: [instance],\r\n    wadoRoot,\r\n    wadoUriRoot,\r\n    wadoUri,\r\n    isOverlayDisplaySet: true,\r\n    label: SeriesDescription || `${i18n.t('Series')} ${SeriesNumber} - ${i18n.t('SEG')}`,\r\n  };\r\n\r\n  const referencedSeriesSequence = instance.ReferencedSeriesSequence;\r\n\r\n  if (!referencedSeriesSequence) {\r\n    console.error('ReferencedSeriesSequence is missing for the SEG');\r\n    return;\r\n  }\r\n\r\n  const referencedSeries = referencedSeriesSequence[0] || referencedSeriesSequence;\r\n\r\n  displaySet.referencedImages = instance.ReferencedSeriesSequence.ReferencedInstanceSequence;\r\n  displaySet.referencedSeriesInstanceUID = referencedSeries.SeriesInstanceUID;\r\n  const { displaySetService } = servicesManager.services;\r\n  const referencedDisplaySets = displaySetService.getDisplaySetsForSeries(\r\n    displaySet.referencedSeriesInstanceUID\r\n  );\r\n\r\n  const referencedDisplaySet = referencedDisplaySets[0];\r\n\r\n  if (!referencedDisplaySet) {\r\n    // subscribe to display sets added which means at some point it will be available\r\n    const { unsubscribe } = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SETS_ADDED,\r\n      ({ displaySetsAdded }) => {\r\n        // here we can also do a little bit of search, since sometimes DICOM SEG\r\n        // does not contain the referenced display set uid , and we can just\r\n        // see which of the display sets added is more similar and assign it\r\n        // to the referencedDisplaySet\r\n        const addedDisplaySet = displaySetsAdded[0];\r\n        if (addedDisplaySet.SeriesInstanceUID === displaySet.referencedSeriesInstanceUID) {\r\n          displaySet.referencedDisplaySetInstanceUID = addedDisplaySet.displaySetInstanceUID;\r\n          displaySet.isReconstructable = addedDisplaySet.isReconstructable;\r\n          unsubscribe();\r\n        }\r\n      }\r\n    );\r\n  } else {\r\n    displaySet.referencedDisplaySetInstanceUID = referencedDisplaySet.displaySetInstanceUID;\r\n    displaySet.isReconstructable = referencedDisplaySet.isReconstructable;\r\n  }\r\n\r\n  displaySet.load = async ({ headers }) =>\r\n    await _load(displaySet, servicesManager, extensionManager, headers);\r\n\r\n  return [displaySet];\r\n}\r\n\r\nfunction _load(\r\n  segDisplaySet,\r\n  servicesManager: AppTypes.ServicesManager,\r\n  extensionManager,\r\n  headers\r\n) {\r\n  const { SOPInstanceUID } = segDisplaySet;\r\n  const { segmentationService } = servicesManager.services;\r\n\r\n  if (\r\n    (segDisplaySet.loading || segDisplaySet.isLoaded) &&\r\n    loadPromises[SOPInstanceUID] &&\r\n    _segmentationExists(segDisplaySet)\r\n  ) {\r\n    return loadPromises[SOPInstanceUID];\r\n  }\r\n\r\n  segDisplaySet.loading = true;\r\n\r\n  // We don't want to fire multiple loads, so we'll wait for the first to finish\r\n  // and also return the same promise to any other callers.\r\n  loadPromises[SOPInstanceUID] = new Promise(async (resolve, reject) => {\r\n    if (!segDisplaySet.segments || Object.keys(segDisplaySet.segments).length === 0) {\r\n      try {\r\n        await _loadSegments({\r\n          extensionManager,\r\n          servicesManager,\r\n          segDisplaySet,\r\n          headers,\r\n        });\r\n      } catch (e) {\r\n        segDisplaySet.loading = false;\r\n        return reject(e);\r\n      }\r\n    }\r\n\r\n    segmentationService\r\n      .createSegmentationForSEGDisplaySet(segDisplaySet)\r\n      .then(() => {\r\n        segDisplaySet.loading = false;\r\n        resolve();\r\n      })\r\n      .catch(error => {\r\n        segDisplaySet.loading = false;\r\n        reject(error);\r\n      });\r\n  });\r\n\r\n  return loadPromises[SOPInstanceUID];\r\n}\r\n\r\nasync function _loadSegments({\r\n  extensionManager,\r\n  servicesManager,\r\n  segDisplaySet,\r\n  headers,\r\n}: withAppTypes) {\r\n  const utilityModule = extensionManager.getModuleEntry(\r\n    '@ohif/extension-cornerstone.utilityModule.common'\r\n  );\r\n\r\n  const { segmentationService, uiNotificationService } = servicesManager.services;\r\n\r\n  const { dicomLoaderService } = utilityModule.exports;\r\n  const arrayBuffer = await dicomLoaderService.findDicomDataPromise(segDisplaySet, null, headers);\r\n\r\n  const referencedDisplaySet = servicesManager.services.displaySetService.getDisplaySetByUID(\r\n    segDisplaySet.referencedDisplaySetInstanceUID\r\n  );\r\n\r\n  if (!referencedDisplaySet) {\r\n    throw new Error('referencedDisplaySet is missing for SEG');\r\n  }\r\n\r\n  let { imageIds } = referencedDisplaySet;\r\n\r\n  if (!imageIds) {\r\n    // try images\r\n    const { images } = referencedDisplaySet;\r\n    imageIds = images.map(image => image.imageId);\r\n  }\r\n\r\n  // Todo: what should be defaults here\r\n  const tolerance = 0.001;\r\n  eventTarget.addEventListener(Enums.Events.SEGMENTATION_LOAD_PROGRESS, evt => {\r\n    const { percentComplete } = evt.detail;\r\n    segmentationService._broadcastEvent(segmentationService.EVENTS.SEGMENT_LOADING_COMPLETE, {\r\n      percentComplete,\r\n    });\r\n  });\r\n\r\n  const results = await adaptersSEG.Cornerstone3D.Segmentation.createFromDICOMSegBuffer(\r\n    imageIds,\r\n    arrayBuffer,\r\n    { metadataProvider: metaData, tolerance }\r\n  );\r\n\r\n  let usedRecommendedDisplayCIELabValue = true;\r\n  results.segMetadata.data.forEach((data, i) => {\r\n    if (i > 0) {\r\n      data.rgba = data.RecommendedDisplayCIELabValue;\r\n\r\n      if (data.rgba) {\r\n        data.rgba = dicomlabToRGB(data.rgba);\r\n      } else {\r\n        usedRecommendedDisplayCIELabValue = false;\r\n        data.rgba = CONSTANTS.COLOR_LUT[i % CONSTANTS.COLOR_LUT.length];\r\n      }\r\n    }\r\n  });\r\n\r\n  if (!usedRecommendedDisplayCIELabValue) {\r\n    // Display a notification about the non-utilization of RecommendedDisplayCIELabValue\r\n    uiNotificationService.show({\r\n      title: 'DICOM SEG import',\r\n      message:\r\n        'RecommendedDisplayCIELabValue not found for one or more segments. The default color was used instead.',\r\n      type: 'warning',\r\n      duration: 5000,\r\n    });\r\n  }\r\n\r\n  Object.assign(segDisplaySet, results);\r\n}\r\n\r\nfunction _segmentationExists(segDisplaySet) {\r\n  return cstSegmentation.state.getSegmentation(segDisplaySet.displaySetInstanceUID);\r\n}\r\n\r\nfunction getSopClassHandlerModule(params: OhifTypes.Extensions.ExtensionParams) {\r\n  const { servicesManager, extensionManager } = params;\r\n  const getDisplaySetsFromSeries = instances => {\r\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: 'dicom-seg',\r\n      sopClassUids,\r\n      getDisplaySetsFromSeries,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getSopClassHandlerModule;\r\n","import dcmjs from 'dcmjs';\r\n\r\n/**\r\n * Converts a CIELAB color to an RGB color using the dcmjs library.\r\n * @param cielab - The CIELAB color to convert.\r\n * @returns The RGB color as an array of three integers between 0 and 255.\r\n */\r\nfunction dicomlabToRGB(cielab: number[]): number[] {\r\n  const rgb = dcmjs.data.Colors.dicomlab2RGB(cielab).map(x => Math.round(x * 255));\r\n\r\n  return rgb;\r\n}\r\n\r\nexport { dicomlabToRGB };\r\n","import { Types } from '@ohif/core';\r\n\r\nconst segProtocol: Types.HangingProtocol.Protocol = {\r\n  id: '@ohif/seg',\r\n  // Don't store this hanging protocol as it applies to the currently active\r\n  // display set by default\r\n  // cacheId: null,\r\n  name: 'Segmentations',\r\n  // Just apply this one when specifically listed\r\n  protocolMatchingRules: [],\r\n  toolGroupIds: ['default'],\r\n  // -1 would be used to indicate active only, whereas other values are\r\n  // the number of required priors referenced - so 0 means active with\r\n  // 0 or more priors.\r\n  numberOfPriorsReferenced: 0,\r\n  // Default viewport is used to define the viewport when\r\n  // additional viewports are added using the layout tool\r\n  defaultViewport: {\r\n    viewportOptions: {\r\n      viewportType: 'stack',\r\n      toolGroupId: 'default',\r\n      allowUnmatchedView: true,\r\n      syncGroups: [\r\n        {\r\n          type: 'hydrateseg',\r\n          id: 'sameFORId',\r\n          source: true,\r\n          target: true,\r\n          // options: {\r\n          //   matchingRules: ['sameFOR'],\r\n          // },\r\n        },\r\n      ],\r\n    },\r\n    displaySets: [\r\n      {\r\n        id: 'segDisplaySetId',\r\n        matchedDisplaySetsIndex: -1,\r\n      },\r\n    ],\r\n  },\r\n  displaySetSelectors: {\r\n    segDisplaySetId: {\r\n      seriesMatchingRules: [\r\n        {\r\n          attribute: 'Modality',\r\n          constraint: {\r\n            equals: 'SEG',\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  stages: [\r\n    {\r\n      name: 'Segmentations',\r\n      viewportStructure: {\r\n        layoutType: 'grid',\r\n        properties: {\r\n          rows: 1,\r\n          columns: 1,\r\n        },\r\n      },\r\n      viewports: [\r\n        {\r\n          viewportOptions: {\r\n            allowUnmatchedView: true,\r\n            syncGroups: [\r\n              {\r\n                type: 'hydrateseg',\r\n                id: 'sameFORId',\r\n                source: true,\r\n                target: true,\r\n                // options: {\r\n                //   matchingRules: ['sameFOR'],\r\n                // },\r\n              },\r\n            ],\r\n          },\r\n          displaySets: [\r\n            {\r\n              id: 'segDisplaySetId',\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nfunction getHangingProtocolModule() {\r\n  return [\r\n    {\r\n      name: segProtocol.id,\r\n      protocol: segProtocol,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getHangingProtocolModule;\r\nexport { segProtocol };\r\n","import dcmjs from 'dcmjs';\r\nimport { classes, Types } from '@ohif/core';\r\nimport { cache, metaData } from '@cornerstonejs/core';\r\nimport { segmentation as cornerstoneToolsSegmentation } from '@cornerstonejs/tools';\r\nimport { adaptersRT, helpers, adaptersSEG } from '@cornerstonejs/adapters';\r\nimport { createReportDialogPrompt, useUIStateStore } from '@ohif/extension-default';\r\nimport { DicomMetadataStore } from '@ohif/core';\r\n\r\nimport PROMPT_RESPONSES from '../../default/src/utils/_shared/PROMPT_RESPONSES';\r\n\r\nconst { datasetToBlob } = dcmjs.data;\r\n\r\nconst getTargetViewport = ({ viewportId, viewportGridService }) => {\r\n  const { viewports, activeViewportId } = viewportGridService.getState();\r\n  const targetViewportId = viewportId || activeViewportId;\r\n\r\n  const viewport = viewports.get(targetViewportId);\r\n\r\n  return viewport;\r\n};\r\n\r\nconst {\r\n  Cornerstone3D: {\r\n    Segmentation: { generateSegmentation },\r\n  },\r\n} = adaptersSEG;\r\n\r\nconst {\r\n  Cornerstone3D: {\r\n    RTSS: { generateRTSSFromSegmentations },\r\n  },\r\n} = adaptersRT;\r\n\r\nconst { downloadDICOMData } = helpers;\r\n\r\nconst commandsModule = ({\r\n  servicesManager,\r\n  extensionManager,\r\n}: Types.Extensions.ExtensionParams): Types.Extensions.CommandsModule => {\r\n  const { segmentationService, displaySetService, viewportGridService } =\r\n    servicesManager.services as AppTypes.Services;\r\n\r\n  const actions = {\r\n    /**\r\n     * Loads segmentations for a specified viewport.\r\n     * The function prepares the viewport for rendering, then loads the segmentation details.\r\n     * Additionally, if the segmentation has scalar data, it is set for the corresponding label map volume.\r\n     *\r\n     * @param {Object} params - Parameters for the function.\r\n     * @param params.segmentations - Array of segmentations to be loaded.\r\n     * @param params.viewportId - the target viewport ID.\r\n     *\r\n     */\r\n    loadSegmentationsForViewport: async ({ segmentations, viewportId }) => {\r\n      // Todo: handle adding more than one segmentation\r\n      const viewport = getTargetViewport({ viewportId, viewportGridService });\r\n      const displaySetInstanceUID = viewport.displaySetInstanceUIDs[0];\r\n\r\n      const segmentation = segmentations[0];\r\n      const segmentationId = segmentation.segmentationId;\r\n      const label = segmentation.config.label;\r\n      const segments = segmentation.config.segments;\r\n\r\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n\r\n      await segmentationService.createLabelmapForDisplaySet(displaySet, {\r\n        segmentationId,\r\n        segments,\r\n        label,\r\n      });\r\n\r\n      segmentationService.addOrUpdateSegmentation(segmentation);\r\n\r\n      await segmentationService.addSegmentationRepresentation(viewport.viewportId, {\r\n        segmentationId,\r\n      });\r\n\r\n      return segmentationId;\r\n    },\r\n    /**\r\n     * Generates a segmentation from a given segmentation ID.\r\n     * This function retrieves the associated segmentation and\r\n     * its referenced volume, extracts label maps from the\r\n     * segmentation volume, and produces segmentation data\r\n     * alongside associated metadata.\r\n     *\r\n     * @param {Object} params - Parameters for the function.\r\n     * @param params.segmentationId - ID of the segmentation to be generated.\r\n     * @param params.options - Optional configuration for the generation process.\r\n     *\r\n     * @returns Returns the generated segmentation data.\r\n     */\r\n    generateSegmentation: ({ segmentationId, options = {} }) => {\r\n      const segmentation = cornerstoneToolsSegmentation.state.getSegmentation(segmentationId);\r\n\r\n      const { imageIds } = segmentation.representationData.Labelmap;\r\n\r\n      const segImages = imageIds.map(imageId => cache.getImage(imageId));\r\n      const referencedImages = segImages.map(image => cache.getImage(image.referencedImageId));\r\n\r\n      const labelmaps2D = [];\r\n\r\n      let z = 0;\r\n\r\n      for (const segImage of segImages) {\r\n        const segmentsOnLabelmap = new Set();\r\n        const pixelData = segImage.getPixelData();\r\n        const { rows, columns } = segImage;\r\n\r\n        // Use a single pass through the pixel data\r\n        for (let i = 0; i < pixelData.length; i++) {\r\n          const segment = pixelData[i];\r\n          if (segment !== 0) {\r\n            segmentsOnLabelmap.add(segment);\r\n          }\r\n        }\r\n\r\n        labelmaps2D[z++] = {\r\n          segmentsOnLabelmap: Array.from(segmentsOnLabelmap),\r\n          pixelData,\r\n          rows,\r\n          columns,\r\n        };\r\n      }\r\n\r\n      const allSegmentsOnLabelmap = labelmaps2D.map(labelmap => labelmap.segmentsOnLabelmap);\r\n\r\n      const labelmap3D = {\r\n        segmentsOnLabelmap: Array.from(new Set(allSegmentsOnLabelmap.flat())),\r\n        metadata: [],\r\n        labelmaps2D,\r\n      };\r\n\r\n      const segmentationInOHIF = segmentationService.getSegmentation(segmentationId);\r\n      const representations = segmentationService.getRepresentationsForSegmentation(segmentationId);\r\n\r\n      Object.entries(segmentationInOHIF.segments).forEach(([segmentIndex, segment]) => {\r\n        // segmentation service already has a color for each segment\r\n        if (!segment) {\r\n          return;\r\n        }\r\n\r\n        const { label } = segment;\r\n\r\n        const firstRepresentation = representations[0];\r\n        const color = segmentationService.getSegmentColor(\r\n          firstRepresentation.viewportId,\r\n          segmentationId,\r\n          segment.segmentIndex\r\n        );\r\n\r\n        const RecommendedDisplayCIELabValue = dcmjs.data.Colors.rgb2DICOMLAB(\r\n          color.slice(0, 3).map(value => value / 255)\r\n        ).map(value => Math.round(value));\r\n\r\n        const segmentMetadata = {\r\n          SegmentNumber: segmentIndex.toString(),\r\n          SegmentLabel: label,\r\n          SegmentAlgorithmType: segment?.algorithmType || 'MANUAL',\r\n          SegmentAlgorithmName: segment?.algorithmName || 'OHIF Brush',\r\n          RecommendedDisplayCIELabValue,\r\n          SegmentedPropertyCategoryCodeSequence: {\r\n            CodeValue: 'T-D0050',\r\n            CodingSchemeDesignator: 'SRT',\r\n            CodeMeaning: 'Tissue',\r\n          },\r\n          SegmentedPropertyTypeCodeSequence: {\r\n            CodeValue: 'T-D0050',\r\n            CodingSchemeDesignator: 'SRT',\r\n            CodeMeaning: 'Tissue',\r\n          },\r\n        };\r\n        labelmap3D.metadata[segmentIndex] = segmentMetadata;\r\n      });\r\n\r\n      const generatedSegmentation = generateSegmentation(\r\n        referencedImages,\r\n        labelmap3D,\r\n        metaData,\r\n        options\r\n      );\r\n\r\n      return generatedSegmentation;\r\n    },\r\n    /**\r\n     * Downloads a segmentation based on the provided segmentation ID.\r\n     * This function retrieves the associated segmentation and\r\n     * uses it to generate the corresponding DICOM dataset, which\r\n     * is then downloaded with an appropriate filename.\r\n     *\r\n     * @param {Object} params - Parameters for the function.\r\n     * @param params.segmentationId - ID of the segmentation to be downloaded.\r\n     *\r\n     */\r\n    downloadSegmentation: ({ segmentationId }) => {\r\n      const segmentationInOHIF = segmentationService.getSegmentation(segmentationId);\r\n      const generatedSegmentation = actions.generateSegmentation({\r\n        segmentationId,\r\n      });\r\n\r\n      downloadDICOMData(generatedSegmentation.dataset, `${segmentationInOHIF.label}`);\r\n    },\r\n    /**\r\n     * Stores a segmentation based on the provided segmentationId into a specified data source.\r\n     * The SeriesDescription is derived from user input or defaults to the segmentation label,\r\n     * and in its absence, defaults to 'Research Derived Series'.\r\n     *\r\n     * @param {Object} params - Parameters for the function.\r\n     * @param params.segmentationId - ID of the segmentation to be stored.\r\n     * @param params.dataSource - Data source where the generated segmentation will be stored.\r\n     *\r\n     * @returns {Object|void} Returns the naturalized report if successfully stored,\r\n     * otherwise throws an error.\r\n     */\r\n    storeSegmentation: async ({ segmentationId, dataSource }) => {\r\n      const segmentation = segmentationService.getSegmentation(segmentationId);\r\n\r\n      if (!segmentation) {\r\n        throw new Error('No segmentation found');\r\n      }\r\n\r\n      const { label } = segmentation;\r\n      const defaultDataSource = dataSource ?? extensionManager.getActiveDataSource()[0];\r\n\r\n      const {\r\n        value: reportName,\r\n        dataSourceName: selectedDataSource,\r\n        action,\r\n      } = await createReportDialogPrompt({\r\n        servicesManager,\r\n        extensionManager,\r\n        title: 'Store Segmentation',\r\n      });\r\n\r\n      if (action === PROMPT_RESPONSES.CREATE_REPORT) {\r\n        try {\r\n          const selectedDataSourceConfig = selectedDataSource\r\n            ? extensionManager.getDataSources(selectedDataSource)[0]\r\n            : defaultDataSource;\r\n\r\n          const generatedData = actions.generateSegmentation({\r\n            segmentationId,\r\n            options: {\r\n              SeriesDescription: reportName || label || 'Research Derived Series',\r\n            },\r\n          });\r\n\r\n          if (!generatedData || !generatedData.dataset) {\r\n            throw new Error('Error during segmentation generation');\r\n          }\r\n\r\n          const { dataset: naturalizedReport } = generatedData;\r\n\r\n          // DCMJS assigns a dummy study id during creation, and this can cause problems, so clearing it out\r\n          if (naturalizedReport.StudyID === 'No Study ID') {\r\n            naturalizedReport.StudyID = '';\r\n          }\r\n\r\n          await selectedDataSourceConfig.store.dicom(naturalizedReport);\r\n\r\n          // add the information for where we stored it to the instance as well\r\n          naturalizedReport.wadoRoot = selectedDataSourceConfig.getConfig().wadoRoot;\r\n\r\n          DicomMetadataStore.addInstances([naturalizedReport], true);\r\n\r\n          return naturalizedReport;\r\n        } catch (error) {\r\n          console.debug('Error storing segmentation:', error);\r\n          throw error;\r\n        }\r\n      }\r\n    },\r\n    /**\r\n     * Converts segmentations into RTSS for download.\r\n     * This sample function retrieves all segentations and passes to\r\n     * cornerstone tool adapter to convert to DICOM RTSS format. It then\r\n     * converts dataset to downloadable blob.\r\n     *\r\n     */\r\n    downloadRTSS: async ({ segmentationId }) => {\r\n      const segmentations = segmentationService.getSegmentation(segmentationId);\r\n\r\n      // inject colors to the segmentIndex\r\n      const firstRepresentation =\r\n        segmentationService.getRepresentationsForSegmentation(segmentationId)[0];\r\n      Object.entries(segmentations.segments).forEach(([segmentIndex, segment]) => {\r\n        segment.color = segmentationService.getSegmentColor(\r\n          firstRepresentation.viewportId,\r\n          segmentationId,\r\n          segmentIndex\r\n        );\r\n      });\r\n\r\n      const RTSS = await generateRTSSFromSegmentations(\r\n        segmentations,\r\n        classes.MetadataProvider,\r\n        DicomMetadataStore\r\n      );\r\n\r\n      try {\r\n        const reportBlob = datasetToBlob(RTSS);\r\n\r\n        //Create a URL for the binary.\r\n        const objectUrl = URL.createObjectURL(reportBlob);\r\n        window.location.assign(objectUrl);\r\n      } catch (e) {\r\n        console.warn(e);\r\n      }\r\n    },\r\n    toggleActiveSegmentationUtility: ({ itemId: buttonId }) => {\r\n      const { uiState, setUIState } = useUIStateStore.getState();\r\n      const isButtonActive = uiState['activeSegmentationUtility'] === buttonId;\r\n      console.log('toggleActiveSegmentationUtility', isButtonActive, buttonId);\r\n      // if the button is active, clear the active segmentation utility\r\n      if (isButtonActive) {\r\n        setUIState('activeSegmentationUtility', null);\r\n      } else {\r\n        setUIState('activeSegmentationUtility', buttonId);\r\n      }\r\n    },\r\n  };\r\n\r\n  const definitions = {\r\n    loadSegmentationsForViewport: {\r\n      commandFn: actions.loadSegmentationsForViewport,\r\n    },\r\n\r\n    generateSegmentation: {\r\n      commandFn: actions.generateSegmentation,\r\n    },\r\n    downloadSegmentation: {\r\n      commandFn: actions.downloadSegmentation,\r\n    },\r\n    storeSegmentation: {\r\n      commandFn: actions.storeSegmentation,\r\n    },\r\n    downloadRTSS: {\r\n      commandFn: actions.downloadRTSS,\r\n    },\r\n    toggleActiveSegmentationUtility: {\r\n      commandFn: actions.toggleActiveSegmentationUtility,\r\n    },\r\n  };\r\n\r\n  return {\r\n    actions,\r\n    definitions,\r\n    defaultContext: 'SEGMENTATION',\r\n  };\r\n};\r\n\r\nexport default commandsModule;\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { useRunCommand, useSystem } from '@ohif/core';\r\nimport { useActiveViewportSegmentationRepresentations } from '@ohif/extension-cornerstone';\r\nimport {\r\n  Button,\r\n  cn,\r\n  Input,\r\n  Label,\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n  Separator,\r\n  Switch,\r\n  Tabs,\r\n  TabsList,\r\n  TabsTrigger,\r\n} from '@ohif/ui-next';\r\nimport { Icons } from '@ohif/ui-next';\r\nimport { contourSegmentation } from '@cornerstonejs/tools/utilities';\r\nimport { Segment } from '@cornerstonejs/tools/types';\r\n\r\nconst { LogicalOperation } = contourSegmentation;\r\nconst options = [\r\n  {\r\n    value: 'merge',\r\n    logicalOperation: LogicalOperation.Union,\r\n    label: 'Merge',\r\n    icon: 'actions-combine-merge',\r\n    helperIcon: 'helper-combine-merge',\r\n  },\r\n  {\r\n    value: 'intersect',\r\n    logicalOperation: LogicalOperation.Intersect,\r\n    label: 'Intersect',\r\n    icon: 'actions-combine-intersect',\r\n    helperIcon: 'helper-combine-intersect',\r\n  },\r\n  {\r\n    value: 'subtract',\r\n    logicalOperation: LogicalOperation.Subtract,\r\n    label: 'Subtract',\r\n    icon: 'actions-combine-subtract',\r\n    helperIcon: 'helper-combine-subtract',\r\n  },\r\n];\r\n\r\n// Shared component for segment selection\r\nfunction SegmentSelector({\r\n  label,\r\n  value,\r\n  onValueChange,\r\n  segments,\r\n  placeholder = 'Select a segment',\r\n}: {\r\n  label: string;\r\n  value: string;\r\n  onValueChange: (value: string) => void;\r\n  segments: Segment[];\r\n  placeholder?: string;\r\n}) {\r\n  return (\r\n    <div className=\"flex justify-between gap-6\">\r\n      <div>{label}</div>\r\n      <Select\r\n        key={`select-segment-${label}`}\r\n        onValueChange={onValueChange}\r\n        value={value}\r\n      >\r\n        <SelectTrigger className=\"overflow-hidden\">\r\n          <SelectValue placeholder={placeholder} />\r\n        </SelectTrigger>\r\n        <SelectContent>\r\n          {segments.map(segment => (\r\n            <SelectItem\r\n              key={segment.segmentIndex}\r\n              value={segment.segmentIndex.toString()}\r\n            >\r\n              {segment.label}\r\n            </SelectItem>\r\n          ))}\r\n        </SelectContent>\r\n      </Select>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction LogicalContourOperationOptions() {\r\n  const { servicesManager } = useSystem();\r\n  const { segmentationService } = servicesManager.services;\r\n  const { segmentationsWithRepresentations } = useActiveViewportSegmentationRepresentations();\r\n\r\n  const activeRepresentation = segmentationsWithRepresentations?.find(\r\n    ({ representation }) => representation?.active\r\n  );\r\n\r\n  const segments = activeRepresentation\r\n    ? Object.values(activeRepresentation.segmentation.segments)\r\n    : [];\r\n\r\n  // Calculate the next available segment index\r\n  const nextSegmentIndex = activeRepresentation\r\n    ? segmentationService.getNextAvailableSegmentIndex(\r\n        activeRepresentation.segmentation.segmentationId\r\n      )\r\n    : 1;\r\n\r\n  const activeSegment = segments.find(segment => segment.active);\r\n\r\n  const activeSegmentIndex = activeSegment?.segmentIndex || 0;\r\n\r\n  const [operation, setOperation] = useState(options[0]);\r\n  const [segmentA, setSegmentA] = useState<string>(activeSegmentIndex?.toString() || '');\r\n  const [segmentB, setSegmentB] = useState<string>('');\r\n  const [createNewSegment, setCreateNewSegment] = useState<boolean>(false);\r\n  const [newSegmentName, setNewSegmentName] = useState<string>('');\r\n\r\n  useEffect(() => {\r\n    setSegmentA(activeSegmentIndex?.toString() || null);\r\n  }, [activeSegmentIndex]);\r\n\r\n  useEffect(() => {\r\n    setNewSegmentName(`Segment ${nextSegmentIndex}`);\r\n  }, [nextSegmentIndex]);\r\n\r\n  const runCommand = useRunCommand();\r\n\r\n  const applyLogicalContourOperation = useCallback(() => {\r\n    let resultSegmentIndex = segmentA;\r\n    if (createNewSegment) {\r\n      resultSegmentIndex = nextSegmentIndex.toString();\r\n      runCommand('addSegment', {\r\n        segmentationId: activeRepresentation.segmentation.segmentationId,\r\n        config: {\r\n          label: newSegmentName,\r\n          segmentIndex: nextSegmentIndex,\r\n        },\r\n      });\r\n    }\r\n    runCommand('applyLogicalContourOperation', {\r\n      segmentAInfo: {\r\n        segmentationId: activeRepresentation.segmentation.segmentationId,\r\n        segmentIndex: parseInt(segmentA),\r\n      },\r\n      segmentBInfo: {\r\n        segmentationId: activeRepresentation.segmentation.segmentationId,\r\n        segmentIndex: parseInt(segmentB),\r\n      },\r\n      resultSegmentInfo: {\r\n        segmentationId: activeRepresentation.segmentation.segmentationId,\r\n        segmentIndex: parseInt(resultSegmentIndex),\r\n      },\r\n      logicalOperation: operation.logicalOperation,\r\n    });\r\n  }, [\r\n    activeRepresentation?.segmentation?.segmentationId,\r\n    createNewSegment,\r\n    newSegmentName,\r\n    nextSegmentIndex,\r\n    operation.logicalOperation,\r\n    runCommand,\r\n    segmentA,\r\n    segmentB,\r\n  ]);\r\n\r\n  return (\r\n    <div className=\"flex w-[245px] flex-col gap-4\">\r\n      <div className=\"flex items-start justify-between\">\r\n        <div className=\"flex w-auto flex-col items-center gap-2 text-base font-normal leading-none\">\r\n          <Tabs value={operation.value}>\r\n            <TabsList className=\"inline-flex space-x-1\">\r\n              {options.map(option => {\r\n                const { value, icon } = option;\r\n                return (\r\n                  <TabsTrigger\r\n                    value={value}\r\n                    key={`logical-contour-operation-${value}`}\r\n                    onClick={() => setOperation(option)}\r\n                  >\r\n                    <Icons.ByName name={icon}></Icons.ByName>\r\n                  </TabsTrigger>\r\n                );\r\n              })}\r\n            </TabsList>\r\n          </Tabs>\r\n          <div>{operation.label}</div>\r\n        </div>\r\n        <div className=\"flex h-[62px] w-[88px] items-center justify-center rounded-lg bg-[rgb(var(--primary-dark))]\">\r\n          <Icons.ByName name={operation.helperIcon}></Icons.ByName>\r\n        </div>\r\n      </div>\r\n      <SegmentSelector\r\n        label=\"A\"\r\n        value={segmentA}\r\n        onValueChange={setSegmentA}\r\n        segments={segments}\r\n      />\r\n      <SegmentSelector\r\n        label=\"B\"\r\n        value={segmentB}\r\n        onValueChange={setSegmentB}\r\n        segments={segments}\r\n      />\r\n      <div className=\"flex justify-end pl-[34px]\">\r\n        <Button\r\n          className=\"border-primary/60 grow border\"\r\n          variant=\"ghost\"\r\n          onClick={() => {\r\n            applyLogicalContourOperation();\r\n          }}\r\n        >\r\n          {operation.label}\r\n        </Button>\r\n      </div>\r\n      <Separator className=\"bg-input mt-2 h-[1px]\" />\r\n      <div className=\"flex flex-col gap-2\">\r\n        <div className=\"flex items-center justify-start gap-2\">\r\n          <Switch\r\n            id=\"logical-contour-operations-create-new-segment-switch\"\r\n            onCheckedChange={setCreateNewSegment}\r\n          ></Switch>\r\n          <Label htmlFor=\"logical-contour-operations-create-new-segment-switch\">\r\n            Create a new segment\r\n          </Label>\r\n        </div>\r\n        <div className=\"pl-9\">\r\n          <Input\r\n            className={cn(createNewSegment ? 'visible' : 'hidden')}\r\n            disabled={!createNewSegment}\r\n            id=\"logical-contour-operations-create-new-segment-input\"\r\n            type=\"text\"\r\n            placeholder=\"New segment name\"\r\n            value={newSegmentName}\r\n            onChange={e => setNewSegmentName(e.target.value)}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LogicalContourOperationOptions;\r\n","import React, { useState } from 'react';\r\nimport { Button, Input, Label, Separator } from '@ohif/ui-next';\r\nimport { useRunCommand } from '@ohif/core';\r\n\r\nfunction SimplifyContourOptions() {\r\n  const [areaThreshold, setAreaThreshold] = useState(10);\r\n\r\n  const runCommand = useRunCommand();\r\n\r\n  return (\r\n    <div className=\"flex w-auto w-[252px] flex-col gap-[8px] text-base font-normal leading-none\">\r\n      <div className=\"flex w-auto flex-col gap-[10px] text-base font-normal leading-none\">\r\n        <div>Fill contour holes</div>\r\n        <Button\r\n          className=\"border-primary/60 border\"\r\n          variant=\"ghost\"\r\n          onClick={() => {\r\n            runCommand('removeContourHoles');\r\n          }}\r\n        >\r\n          Fill Holes\r\n        </Button>\r\n        <Separator className=\"bg-input mt-[20px] h-[1px]\" />\r\n      </div>\r\n      <div className=\"flex w-auto flex-col gap-[10px] text-base font-normal leading-none\">\r\n        <div>Remove Small Contours</div>\r\n        <div className=\"flex items-center gap-2 self-end\">\r\n          <Label\r\n            htmlFor=\"simplify-contour-options\"\r\n            className=\"text-muted-foreground\"\r\n          >\r\n            Area Threshold\r\n          </Label>\r\n          <Input\r\n            id=\"simplify-contour-options\"\r\n            className=\"w-20\"\r\n            type=\"number\"\r\n            value={areaThreshold}\r\n            onChange={e => setAreaThreshold(Number(e.target.value))}\r\n          />\r\n        </div>\r\n        <Button\r\n          className=\"border-primary/60 border\"\r\n          variant=\"ghost\"\r\n          onClick={() => {\r\n            runCommand('removeSmallContours', {\r\n              areaThreshold,\r\n            });\r\n          }}\r\n        >\r\n          Remove Small Contours\r\n        </Button>\r\n        <Separator className=\"bg-input mt-[20px] h-[1px]\" />\r\n      </div>\r\n      <div className=\"flex w-auto flex-col gap-[10px] text-base font-normal leading-none\">\r\n        <div>Create New Segment from Holes</div>\r\n        <Button\r\n          className=\"border-primary/60 border\"\r\n          variant=\"ghost\"\r\n          onClick={() => {\r\n            runCommand('convertContourHoles');\r\n          }}\r\n        >\r\n          Create New Segment\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SimplifyContourOptions;\r\n","import React from 'react';\r\nimport { Button, Separator } from '@ohif/ui-next';\r\nimport { useRunCommand } from '@ohif/core';\r\n\r\nfunction SmoothContoursOptions() {\r\n  const runCommand = useRunCommand();\r\n\r\n  return (\r\n    <div className=\"flex w-auto w-[245px] flex-col gap-[8px] text-base font-normal leading-none\">\r\n      <div className=\"flex w-auto flex-col gap-[10px] text-base font-normal leading-none\">\r\n        <div>Smooth all edges</div>\r\n        <Button\r\n          className=\"border-primary/60 border\"\r\n          variant=\"ghost\"\r\n          onClick={() => {\r\n            runCommand('smoothContours');\r\n          }}\r\n        >\r\n          Smooth Edges\r\n        </Button>\r\n        <Separator className=\"bg-input mt-[20px] h-[1px]\" />\r\n      </div>\r\n      <div className=\"flex w-auto flex-col gap-[10px] text-base font-normal leading-none\">\r\n        <div>Remove extra points</div>\r\n        <Button\r\n          className=\"border-primary/60 border\"\r\n          variant=\"ghost\"\r\n          onClick={() => {\r\n            runCommand('decimateContours');\r\n          }}\r\n        >\r\n          Remove Points\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SmoothContoursOptions;\r\n","import { id } from './id';\r\nimport React from 'react';\r\n\r\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\r\nimport getHangingProtocolModule from './getHangingProtocolModule';\r\nimport getCommandsModule from './commandsModule';\r\nimport { getToolbarModule } from './getToolbarModule';\r\n\r\nconst Component = React.lazy(() => {\r\n  return import(/* webpackPrefetch: true */ './viewports/OHIFCornerstoneSEGViewport');\r\n});\r\n\r\nconst OHIFCornerstoneSEGViewport = props => {\r\n  return (\r\n    <React.Suspense fallback={<div>Loading...</div>}>\r\n      <Component {...props} />\r\n    </React.Suspense>\r\n  );\r\n};\r\n\r\n/**\r\n * You can remove any of the following modules if you don't need them.\r\n */\r\nconst extension = {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   * You ID can be anything you want, but it should be unique.\r\n   */\r\n  id,\r\n  getCommandsModule,\r\n  getToolbarModule,\r\n  getViewportModule({ servicesManager, extensionManager, commandsManager }) {\r\n    const ExtendedOHIFCornerstoneSEGViewport = props => {\r\n      return (\r\n        <OHIFCornerstoneSEGViewport\r\n          servicesManager={servicesManager}\r\n          extensionManager={extensionManager}\r\n          commandsManager={commandsManager}\r\n          {...props}\r\n        />\r\n      );\r\n    };\r\n\r\n    return [{ name: 'dicom-seg', component: ExtendedOHIFCornerstoneSEGViewport }];\r\n  },\r\n  /**\r\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\r\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\r\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\r\n   * Examples include the default sop class handler provided by the default extension\r\n   */\r\n  getSopClassHandlerModule,\r\n  getHangingProtocolModule,\r\n};\r\n\r\nexport default extension;\r\n","import { useUIStateStore } from '@ohif/extension-default';\r\nimport LogicalContourOperationsOptions from './components/LogicalContourOperationsOptions';\r\nimport SimplifyContourOptions from './components/SimplifyContourOptions';\r\nimport SmoothContoursOptions from './components/SmoothContoursOptions';\r\n\r\nexport function getToolbarModule({ servicesManager }: withAppTypes) {\r\n  const { segmentationService, toolbarService, toolGroupService } = servicesManager.services;\r\n  return [\r\n    {\r\n      name: 'cornerstone.SimplifyContourOptions',\r\n      defaultComponent: SimplifyContourOptions,\r\n    },\r\n    {\r\n      name: 'cornerstone.LogicalContourOperationsOptions',\r\n      defaultComponent: LogicalContourOperationsOptions,\r\n    },\r\n    {\r\n      name: 'cornerstone.SmoothContoursOptions',\r\n      defaultComponent: SmoothContoursOptions,\r\n    },\r\n    {\r\n      name: 'cornerstone.isActiveSegmentationUtility',\r\n      evaluate: ({ button }) => {\r\n        const { uiState } = useUIStateStore.getState();\r\n        return {\r\n          isActive: uiState[`activeSegmentationUtility`] === button.id,\r\n        };\r\n      },\r\n    },\r\n    {\r\n      name: 'evaluate.cornerstone.hasSegmentation',\r\n      evaluate: ({ viewportId }) => {\r\n        const segmentations = segmentationService.getSegmentationRepresentations(viewportId);\r\n        return {\r\n          disabled: !segmentations?.length,\r\n        };\r\n      },\r\n    },\r\n    {\r\n      name: 'evaluate.cornerstone.hasSegmentationOfType',\r\n      evaluate: ({ viewportId, segmentationRepresentationType }) => {\r\n        const segmentations = segmentationService.getSegmentationRepresentations(viewportId);\r\n\r\n        if (!segmentations?.length) {\r\n          return {\r\n            disabled: true,\r\n            disabledText: 'No segmentations available',\r\n          };\r\n        }\r\n\r\n        if (\r\n          !segmentations.some(segmentation =>\r\n            Boolean(segmentation.type === segmentationRepresentationType)\r\n          )\r\n        ) {\r\n          return {\r\n            disabled: true,\r\n            disabledText: `No ${segmentationRepresentationType} segmentations available`,\r\n          };\r\n        }\r\n      },\r\n    },\r\n    {\r\n      name: 'evaluate.cornerstone.segmentation',\r\n      evaluate: ({ viewportId, button, toolNames, disabledText }) => {\r\n        // Todo: we need to pass in the button section Id since we are kind of\r\n        // forcing the button to have black background since initially\r\n        // it is designed for the toolbox not the toolbar on top\r\n        // we should then branch the buttonSectionId to have different styles\r\n        const segmentations = segmentationService.getSegmentationRepresentations(viewportId);\r\n        if (!segmentations?.length) {\r\n          return {\r\n            disabled: true,\r\n            disabledText: disabledText ?? 'No segmentations available',\r\n          };\r\n        }\r\n\r\n        const activeSegmentation = segmentationService.getActiveSegmentation(viewportId);\r\n        if (!Object.keys(activeSegmentation.segments).length) {\r\n          return {\r\n            disabled: true,\r\n            disabledText: 'Add segment to enable this tool',\r\n          };\r\n        }\r\n\r\n        const toolGroup = toolGroupService.getToolGroupForViewport(viewportId);\r\n\r\n        if (!toolGroup) {\r\n          return {\r\n            disabled: true,\r\n            disabledText: disabledText ?? 'Not available on the current viewport',\r\n          };\r\n        }\r\n\r\n        if (!toolNames) {\r\n          return {\r\n            disabled: false,\r\n            // isActive: false,\r\n          };\r\n        }\r\n\r\n        const toolName = toolbarService.getToolNameForButton(button);\r\n\r\n        if (!toolGroup.hasTool(toolName) && !toolNames) {\r\n          return {\r\n            disabled: true,\r\n            disabledText: disabledText ?? 'Not available on the current viewport',\r\n          };\r\n        }\r\n\r\n        const isPrimaryActive = toolNames\r\n          ? toolNames.includes(toolGroup.getActivePrimaryMouseButtonTool())\r\n          : toolGroup.getActivePrimaryMouseButtonTool() === toolName;\r\n\r\n        return {\r\n          disabled: false,\r\n          isActive: isPrimaryActive,\r\n        };\r\n      },\r\n    },\r\n  ];\r\n}\r\n"],"names":["id","packageJson","SOPClassHandlerId","sopClassUids","loadPromises","_getDisplaySetsFromSeries","instances","servicesManager","extensionManager","instance","StudyInstanceUID","SeriesInstanceUID","SOPInstanceUID","SeriesDescription","SeriesNumber","SeriesDate","SOPClassUID","wadoRoot","wadoUri","wadoUriRoot","displaySet","Modality","loading","isReconstructable","displaySetInstanceUID","utils","guid","referencedImages","referencedSeriesInstanceUID","referencedDisplaySetInstanceUID","isDerivedDisplaySet","isLoaded","isHydrated","segments","isOverlayDisplaySet","label","i18n","t","referencedSeriesSequence","ReferencedSeriesSequence","console","error","referencedSeries","ReferencedInstanceSequence","displaySetService","services","referencedDisplaySet","getDisplaySetsForSeries","unsubscribe","subscribe","EVENTS","DISPLAY_SETS_ADDED","displaySetsAdded","addedDisplaySet","load","async","headers","segDisplaySet","segmentationService","cstSegmentation","_segmentationExists","Promise","resolve","reject","Object","keys","length","utilityModule","getModuleEntry","uiNotificationService","dicomLoaderService","exports","arrayBuffer","findDicomDataPromise","getDisplaySetByUID","Error","imageIds","images","map","image","imageId","tolerance","eventTarget","addEventListener","Enums","SEGMENTATION_LOAD_PROGRESS","evt","percentComplete","detail","_broadcastEvent","SEGMENT_LOADING_COMPLETE","results","adaptersSEG","Cornerstone3D","Segmentation","createFromDICOMSegBuffer","metadataProvider","metaData","usedRecommendedDisplayCIELabValue","segMetadata","data","forEach","i","cielab","rgba","RecommendedDisplayCIELabValue","dcmjs","Colors","dicomlab2RGB","x","Math","round","CONSTANTS","show","title","message","type","duration","assign","_loadSegments","e","createSegmentationForSEGDisplaySet","then","catch","_load","params","name","getDisplaySetsFromSeries","segProtocol","protocolMatchingRules","toolGroupIds","numberOfPriorsReferenced","defaultViewport","viewportOptions","viewportType","toolGroupId","allowUnmatchedView","syncGroups","source","target","displaySets","matchedDisplaySetsIndex","displaySetSelectors","segDisplaySetId","seriesMatchingRules","attribute","constraint","equals","stages","viewportStructure","layoutType","properties","rows","columns","viewports","protocol","datasetToBlob","generateSegmentation","RTSS","generateRTSSFromSegmentations","adaptersRT","downloadDICOMData","helpers","commandsModule","viewportGridService","actions","loadSegmentationsForViewport","segmentations","viewportId","viewport","getTargetViewport","activeViewportId","getState","targetViewportId","get","displaySetInstanceUIDs","segmentation","segmentationId","config","createLabelmapForDisplaySet","addOrUpdateSegmentation","addSegmentationRepresentation","options","cornerstoneToolsSegmentation","representationData","Labelmap","segImages","cache","getImage","referencedImageId","labelmaps2D","z","segImage","segmentsOnLabelmap","Set","pixelData","getPixelData","segment","add","Array","from","allSegmentsOnLabelmap","labelmap","labelmap3D","flat","metadata","segmentationInOHIF","getSegmentation","representations","getRepresentationsForSegmentation","entries","segmentIndex","firstRepresentation","color","getSegmentColor","rgb2DICOMLAB","slice","value","segmentMetadata","SegmentNumber","toString","SegmentLabel","SegmentAlgorithmType","algorithmType","SegmentAlgorithmName","algorithmName","SegmentedPropertyCategoryCodeSequence","CodeValue","CodingSchemeDesignator","CodeMeaning","SegmentedPropertyTypeCodeSequence","downloadSegmentation","generatedSegmentation","dataset","storeSegmentation","dataSource","defaultDataSource","getActiveDataSource","reportName","dataSourceName","selectedDataSource","action","createReportDialogPrompt","PROMPT_RESPONSES","CREATE_REPORT","selectedDataSourceConfig","getDataSources","generatedData","naturalizedReport","StudyID","store","dicom","getConfig","DicomMetadataStore","addInstances","debug","downloadRTSS","classes","MetadataProvider","reportBlob","objectUrl","URL","createObjectURL","window","location","warn","toggleActiveSegmentationUtility","itemId","buttonId","uiState","setUIState","useUIStateStore","isButtonActive","log","definitions","commandFn","defaultContext","LogicalOperation","contourSegmentation","logicalOperation","Union","icon","helperIcon","Intersect","Subtract","SegmentSelector","onValueChange","placeholder","React","className","Select","key","SelectTrigger","SelectValue","SelectContent","SelectItem","useSystem","segmentationsWithRepresentations","useActiveViewportSegmentationRepresentations","activeRepresentation","find","representation","active","values","nextSegmentIndex","getNextAvailableSegmentIndex","activeSegment","activeSegmentIndex","operation","setOperation","useState","segmentA","setSegmentA","segmentB","setSegmentB","createNewSegment","setCreateNewSegment","newSegmentName","setNewSegmentName","useEffect","runCommand","useRunCommand","applyLogicalContourOperation","useCallback","resultSegmentIndex","segmentAInfo","parseInt","segmentBInfo","resultSegmentInfo","Tabs","TabsList","option","TabsTrigger","onClick","Icons","ByName","Button","variant","Separator","Switch","onCheckedChange","Label","htmlFor","Input","cn","disabled","onChange","areaThreshold","setAreaThreshold","Number","Component","OHIFCornerstoneSEGViewport","props","fallback","getCommandsModule","getToolbarModule","toolbarService","toolGroupService","defaultComponent","SimplifyContourOptions","LogicalContourOperationsOptions","SmoothContoursOptions","evaluate","button","isActive","getSegmentationRepresentations","segmentationRepresentationType","some","Boolean","disabledText","toolNames","activeSegmentation","getActiveSegmentation","toolGroup","getToolGroupForViewport","toolName","getToolNameForButton","hasTool","includes","getActivePrimaryMouseButtonTool","getViewportModule","commandsManager","component","_extends","getSopClassHandlerModule","getHangingProtocolModule"],"sourceRoot":""}