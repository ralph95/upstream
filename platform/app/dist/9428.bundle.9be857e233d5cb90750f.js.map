{"version":3,"file":"9428.bundle.9be857e233d5cb90750f.js","mappings":"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","sources":["webpack:///../../../extensions/tmtv/src/id.js","webpack:///../../../extensions/tmtv/src/utils/hpViewports.ts","webpack:///../../../extensions/tmtv/src/getHangingProtocolModule.ts","webpack:///../../../extensions/tmtv/src/Panels/PanelPetSUV.tsx","webpack:///../../../extensions/tmtv/src/Panels/PanelROIThresholdSegmentation/PanelROIThresholdExport.tsx","webpack:///../../../extensions/tmtv/src/Panels/PanelROIThresholdSegmentation/index.ts","webpack:///../../../extensions/tmtv/src/Panels/PanelTMTV.tsx","webpack:///../../../extensions/tmtv/src/getPanelModule.tsx","webpack:///../../../extensions/tmtv/src/utils/measurementServiceMappings/constants/supportedTools.js","webpack:///../../../extensions/tmtv/src/utils/measurementServiceMappings/RectangleROIStartEndThreshold.js","webpack:///../../../extensions/tmtv/src/utils/measurementServiceMappings/CircleROIStartEndThreshold.js","webpack:///../../../extensions/tmtv/src/utils/measurementServiceMappings/measurementServiceMappingsFactory.js","webpack:///../../../extensions/tmtv/src/init.js","webpack:///../../../extensions/tmtv/src/utils/getThresholdValue.ts","webpack:///../../../extensions/tmtv/src/utils/dicomRTAnnotationExport/RTStructureSet/dicomRTAnnotationExport.js","webpack:///../../../extensions/tmtv/src/utils/dicomRTAnnotationExport/RTStructureSet/index.js","webpack:///../../../extensions/tmtv/src/commandsModule.ts","webpack:///../../../extensions/tmtv/src/utils/createAndDownloadTMTVReport.js","webpack:///../../../extensions/tmtv/src/Panels/PanelROIThresholdSegmentation/ROIThresholdConfiguration.tsx","webpack:///../../../extensions/tmtv/src/Panels/RectangleROIOptions.tsx","webpack:///../../../extensions/tmtv/src/index.tsx","webpack:///../../../extensions/tmtv/src/getToolbarModule.tsx"],"sourcesContent":["import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\n\r\nexport { id };\r\n","// Common sync group configurations\r\nconst cameraPositionSync = (id: string) => ({\r\n  type: 'cameraPosition',\r\n  id,\r\n  source: true,\r\n  target: true,\r\n});\r\n\r\nconst hydrateSegSync = {\r\n  type: 'hydrateseg',\r\n  id: 'sameFORId',\r\n  source: true,\r\n  target: true,\r\n  options: {\r\n    matchingRules: ['sameFOR'],\r\n  },\r\n};\r\n\r\nconst ctAXIAL: AppTypes.HangingProtocol.Viewport = {\r\n  viewportOptions: {\r\n    viewportId: 'ctAXIAL',\r\n    viewportType: 'volume',\r\n    orientation: 'axial',\r\n    toolGroupId: 'ctToolGroup',\r\n    initialImageOptions: {\r\n      // index: 5,\r\n      preset: 'first', // 'first', 'last', 'middle'\r\n    },\r\n    syncGroups: [\r\n      cameraPositionSync('axialSync'),\r\n      {\r\n        type: 'voi',\r\n        id: 'ctWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n      hydrateSegSync,\r\n    ],\r\n  },\r\n  displaySets: [\r\n    {\r\n      id: 'ctDisplaySet',\r\n    },\r\n  ],\r\n};\r\n\r\nconst ctSAGITTAL: AppTypes.HangingProtocol.Viewport = {\r\n  viewportOptions: {\r\n    viewportId: 'ctSAGITTAL',\r\n    viewportType: 'volume',\r\n    orientation: 'sagittal',\r\n    toolGroupId: 'ctToolGroup',\r\n    syncGroups: [\r\n      cameraPositionSync('sagittalSync'),\r\n      {\r\n        type: 'voi',\r\n        id: 'ctWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n      hydrateSegSync,\r\n    ],\r\n  },\r\n  displaySets: [\r\n    {\r\n      id: 'ctDisplaySet',\r\n    },\r\n  ],\r\n};\r\n\r\nconst ctCORONAL: AppTypes.HangingProtocol.Viewport = {\r\n  viewportOptions: {\r\n    viewportId: 'ctCORONAL',\r\n    viewportType: 'volume',\r\n    orientation: 'coronal',\r\n    toolGroupId: 'ctToolGroup',\r\n    syncGroups: [\r\n      cameraPositionSync('coronalSync'),\r\n      {\r\n        type: 'voi',\r\n        id: 'ctWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n      hydrateSegSync,\r\n    ],\r\n  },\r\n  displaySets: [\r\n    {\r\n      id: 'ctDisplaySet',\r\n    },\r\n  ],\r\n};\r\n\r\nconst ptAXIAL: AppTypes.HangingProtocol.Viewport = {\r\n  viewportOptions: {\r\n    viewportId: 'ptAXIAL',\r\n    viewportType: 'volume',\r\n    background: [1, 1, 1],\r\n    orientation: 'axial',\r\n    toolGroupId: 'ptToolGroup',\r\n    initialImageOptions: {\r\n      // index: 5,\r\n      preset: 'first', // 'first', 'last', 'middle'\r\n    },\r\n    syncGroups: [\r\n      cameraPositionSync('axialSync'),\r\n      {\r\n        type: 'voi',\r\n        id: 'ptWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ptFusionWLSync',\r\n        source: true,\r\n        target: false,\r\n        options: {\r\n          syncColormap: false,\r\n          syncInvertState: false,\r\n        },\r\n      },\r\n      hydrateSegSync,\r\n    ],\r\n  },\r\n  displaySets: [\r\n    {\r\n      options: {\r\n        voi: {\r\n          custom: 'getPTVOIRange',\r\n        },\r\n        voiInverted: true,\r\n      },\r\n      id: 'ptDisplaySet',\r\n    },\r\n  ],\r\n};\r\n\r\nconst ptSAGITTAL: AppTypes.HangingProtocol.Viewport = {\r\n  viewportOptions: {\r\n    viewportId: 'ptSAGITTAL',\r\n    viewportType: 'volume',\r\n    orientation: 'sagittal',\r\n    background: [1, 1, 1],\r\n    toolGroupId: 'ptToolGroup',\r\n    syncGroups: [\r\n      cameraPositionSync('sagittalSync'),\r\n      {\r\n        type: 'voi',\r\n        id: 'ptWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ptFusionWLSync',\r\n        source: true,\r\n        target: false,\r\n        options: {\r\n          syncColormap: false,\r\n          syncInvertState: false,\r\n        },\r\n      },\r\n      hydrateSegSync,\r\n    ],\r\n  },\r\n  displaySets: [\r\n    {\r\n      options: {\r\n        voi: {\r\n          custom: 'getPTVOIRange',\r\n        },\r\n        voiInverted: true,\r\n      },\r\n      id: 'ptDisplaySet',\r\n    },\r\n  ],\r\n};\r\n\r\nconst ptCORONAL: AppTypes.HangingProtocol.Viewport = {\r\n  viewportOptions: {\r\n    viewportId: 'ptCORONAL',\r\n    viewportType: 'volume',\r\n    orientation: 'coronal',\r\n    background: [1, 1, 1],\r\n    toolGroupId: 'ptToolGroup',\r\n    syncGroups: [\r\n      cameraPositionSync('coronalSync'),\r\n      {\r\n        type: 'voi',\r\n        id: 'ptWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ptFusionWLSync',\r\n        source: true,\r\n        target: false,\r\n        options: {\r\n          syncColormap: false,\r\n          syncInvertState: false,\r\n        },\r\n      },\r\n      hydrateSegSync,\r\n    ],\r\n  },\r\n  displaySets: [\r\n    {\r\n      options: {\r\n        voi: {\r\n          custom: 'getPTVOIRange',\r\n        },\r\n        voiInverted: true,\r\n      },\r\n      id: 'ptDisplaySet',\r\n    },\r\n  ],\r\n};\r\n\r\nconst fusionAXIAL: AppTypes.HangingProtocol.Viewport = {\r\n  viewportOptions: {\r\n    viewportId: 'fusionAXIAL',\r\n    viewportType: 'volume',\r\n    orientation: 'axial',\r\n    toolGroupId: 'fusionToolGroup',\r\n    initialImageOptions: {\r\n      // index: 5,\r\n      preset: 'first', // 'first', 'last', 'middle'\r\n    },\r\n    syncGroups: [\r\n      cameraPositionSync('axialSync'),\r\n      {\r\n        type: 'voi',\r\n        id: 'ctWLSync',\r\n        source: false,\r\n        target: true,\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'fusionWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ptFusionWLSync',\r\n        source: false,\r\n        target: true,\r\n        options: {\r\n          syncColormap: false,\r\n          syncInvertState: false,\r\n        },\r\n      },\r\n      hydrateSegSync,\r\n    ],\r\n  },\r\n  displaySets: [\r\n    {\r\n      id: 'ctDisplaySet',\r\n    },\r\n    {\r\n      id: 'ptDisplaySet',\r\n      options: {\r\n        colormap: {\r\n          name: 'hsv',\r\n          opacity: [\r\n            { value: 0, opacity: 0 },\r\n            { value: 0.1, opacity: 0.8 },\r\n            { value: 1, opacity: 0.9 },\r\n          ],\r\n        },\r\n        voi: {\r\n          custom: 'getPTVOIRange',\r\n        },\r\n      },\r\n    },\r\n  ],\r\n};\r\n\r\nconst fusionSAGITTAL = {\r\n  viewportOptions: {\r\n    viewportId: 'fusionSAGITTAL',\r\n    viewportType: 'volume',\r\n    orientation: 'sagittal',\r\n    toolGroupId: 'fusionToolGroup',\r\n    // initialImageOptions: {\r\n    //   index: 180,\r\n    //   preset: 'middle', // 'first', 'last', 'middle'\r\n    // },\r\n    syncGroups: [\r\n      cameraPositionSync('sagittalSync'),\r\n      {\r\n        type: 'voi',\r\n        id: 'ctWLSync',\r\n        source: false,\r\n        target: true,\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'fusionWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ptFusionWLSync',\r\n        source: false,\r\n        target: true,\r\n        options: {\r\n          syncColormap: false,\r\n          syncInvertState: false,\r\n        },\r\n      },\r\n      hydrateSegSync,\r\n    ],\r\n  },\r\n  displaySets: [\r\n    {\r\n      id: 'ctDisplaySet',\r\n    },\r\n    {\r\n      id: 'ptDisplaySet',\r\n      options: {\r\n        colormap: {\r\n          name: 'hsv',\r\n          opacity: [\r\n            { value: 0, opacity: 0 },\r\n            { value: 0.1, opacity: 0.8 },\r\n            { value: 1, opacity: 0.9 },\r\n          ],\r\n        },\r\n        voi: {\r\n          custom: 'getPTVOIRange',\r\n        },\r\n      },\r\n    },\r\n  ],\r\n};\r\n\r\nconst fusionCORONAL = {\r\n  viewportOptions: {\r\n    viewportId: 'fusionCoronal',\r\n    viewportType: 'volume',\r\n    orientation: 'coronal',\r\n    toolGroupId: 'fusionToolGroup',\r\n    // initialImageOptions: {\r\n    //   index: 180,\r\n    //   preset: 'middle', // 'first', 'last', 'middle'\r\n    // },\r\n    syncGroups: [\r\n      cameraPositionSync('coronalSync'),\r\n      {\r\n        type: 'voi',\r\n        id: 'ctWLSync',\r\n        source: false,\r\n        target: true,\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'fusionWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ptFusionWLSync',\r\n        source: false,\r\n        target: true,\r\n        options: {\r\n          syncColormap: false,\r\n          syncInvertState: false,\r\n        },\r\n      },\r\n      hydrateSegSync,\r\n    ],\r\n  },\r\n  displaySets: [\r\n    {\r\n      id: 'ctDisplaySet',\r\n    },\r\n    {\r\n      id: 'ptDisplaySet',\r\n      options: {\r\n        colormap: {\r\n          name: 'hsv',\r\n          opacity: [\r\n            { value: 0, opacity: 0 },\r\n            { value: 0.1, opacity: 0.8 },\r\n            { value: 1, opacity: 0.9 },\r\n          ],\r\n        },\r\n        voi: {\r\n          custom: 'getPTVOIRange',\r\n        },\r\n      },\r\n    },\r\n  ],\r\n};\r\n\r\nconst mipSAGITTAL: AppTypes.HangingProtocol.Viewport = {\r\n  viewportOptions: {\r\n    viewportId: 'mipSagittal',\r\n    viewportType: 'volume',\r\n    orientation: 'sagittal',\r\n    background: [1, 1, 1],\r\n    toolGroupId: 'mipToolGroup',\r\n    syncGroups: [\r\n      {\r\n        type: 'voi',\r\n        id: 'ptWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ptFusionWLSync',\r\n        source: true,\r\n        target: false,\r\n        options: {\r\n          syncColormap: false,\r\n          syncInvertState: false,\r\n        },\r\n      },\r\n      hydrateSegSync,\r\n    ],\r\n\r\n    // Custom props can be used to set custom properties which extensions\r\n    // can react on.\r\n    customViewportProps: {\r\n      // We use viewportDisplay to filter the viewports which are displayed\r\n      // in mip and we set the scrollbar according to their rotation index\r\n      // in the cornerstone extension.\r\n      hideOverlays: true,\r\n    },\r\n  },\r\n  displaySets: [\r\n    {\r\n      options: {\r\n        blendMode: 'MIP',\r\n        slabThickness: 'fullVolume',\r\n        voi: {\r\n          custom: 'getPTVOIRange',\r\n        },\r\n        voiInverted: true,\r\n      },\r\n      id: 'ptDisplaySet',\r\n    },\r\n  ],\r\n};\r\n\r\nexport {\r\n  ctAXIAL,\r\n  ctSAGITTAL,\r\n  ctCORONAL,\r\n  ptAXIAL,\r\n  ptSAGITTAL,\r\n  ptCORONAL,\r\n  fusionAXIAL,\r\n  fusionSAGITTAL,\r\n  fusionCORONAL,\r\n  mipSAGITTAL,\r\n};\r\n","import {\r\n  ctAXIAL,\r\n  ctCORONAL,\r\n  ctSAGITTAL,\r\n  fusionAXIAL,\r\n  fusionCORONAL,\r\n  fusionSAGITTAL,\r\n  mipSAGITTAL,\r\n  ptAXIAL,\r\n  ptCORONAL,\r\n  ptSAGITTAL,\r\n} from './utils/hpViewports';\r\n\r\n/**\r\n * represents a 3x4 viewport layout configuration. The layout displays CT axial, sagittal, and coronal\r\n * images in the first row, PT axial, sagittal, and coronal images in the second row, and fusion axial,\r\n * sagittal, and coronal images in the third row. The fourth column is fully spanned by a MIP sagittal\r\n * image, covering all three rows. It has synchronizers for windowLevel for all CT and PT images, and\r\n * also camera synchronizer for each orientation\r\n */\r\nconst stage1: AppTypes.HangingProtocol.ProtocolStage = {\r\n  name: 'default',\r\n  id: 'default',\r\n  viewportStructure: {\r\n    layoutType: 'grid',\r\n    properties: {\r\n      rows: 3,\r\n      columns: 4,\r\n      layoutOptions: [\r\n        {\r\n          x: 0,\r\n          y: 0,\r\n          width: 1 / 4,\r\n          height: 1 / 3,\r\n        },\r\n        {\r\n          x: 1 / 4,\r\n          y: 0,\r\n          width: 1 / 4,\r\n          height: 1 / 3,\r\n        },\r\n        {\r\n          x: 2 / 4,\r\n          y: 0,\r\n          width: 1 / 4,\r\n          height: 1 / 3,\r\n        },\r\n        {\r\n          x: 0,\r\n          y: 1 / 3,\r\n          width: 1 / 4,\r\n          height: 1 / 3,\r\n        },\r\n        {\r\n          x: 1 / 4,\r\n          y: 1 / 3,\r\n          width: 1 / 4,\r\n          height: 1 / 3,\r\n        },\r\n        {\r\n          x: 2 / 4,\r\n          y: 1 / 3,\r\n          width: 1 / 4,\r\n          height: 1 / 3,\r\n        },\r\n        {\r\n          x: 0,\r\n          y: 2 / 3,\r\n          width: 1 / 4,\r\n          height: 1 / 3,\r\n        },\r\n        {\r\n          x: 1 / 4,\r\n          y: 2 / 3,\r\n          width: 1 / 4,\r\n          height: 1 / 3,\r\n        },\r\n        {\r\n          x: 2 / 4,\r\n          y: 2 / 3,\r\n          width: 1 / 4,\r\n          height: 1 / 3,\r\n        },\r\n        {\r\n          x: 3 / 4,\r\n          y: 0,\r\n          width: 1 / 4,\r\n          height: 1,\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  viewports: [\r\n    ctAXIAL,\r\n    ctSAGITTAL,\r\n    ctCORONAL,\r\n    ptAXIAL,\r\n    ptSAGITTAL,\r\n    ptCORONAL,\r\n    fusionAXIAL,\r\n    fusionSAGITTAL,\r\n    fusionCORONAL,\r\n    mipSAGITTAL,\r\n  ],\r\n  createdDate: '2021-02-23T18:32:42.850Z',\r\n};\r\n\r\n/**\r\n * The layout displays CT axial image in the top-left viewport, fusion axial image\r\n * in the top-right viewport, PT axial image in the bottom-left viewport, and MIP\r\n * sagittal image in the bottom-right viewport. The layout follows a simple grid\r\n * pattern with 2 rows and 2 columns. It includes synchronizers as well.\r\n */\r\nconst stage2 = {\r\n  name: 'Fusion 2x2',\r\n  id: 'Fusion-2x2',\r\n  viewportStructure: {\r\n    layoutType: 'grid',\r\n    properties: {\r\n      rows: 2,\r\n      columns: 2,\r\n    },\r\n  },\r\n  viewports: [ctAXIAL, fusionAXIAL, ptAXIAL, mipSAGITTAL],\r\n};\r\n\r\n/**\r\n * The top row displays CT images in axial, sagittal, and coronal orientations from\r\n * left to right, respectively. The bottom row displays PT images in axial, sagittal,\r\n * and coronal orientations from left to right, respectively.\r\n * The layout follows a simple grid pattern with 2 rows and 3 columns.\r\n * It includes synchronizers as well.\r\n */\r\nconst stage3: AppTypes.HangingProtocol.ProtocolStage = {\r\n  name: '2x3-layout',\r\n  id: '2x3-layout',\r\n  viewportStructure: {\r\n    layoutType: 'grid',\r\n    properties: {\r\n      rows: 2,\r\n      columns: 3,\r\n    },\r\n  },\r\n  viewports: [ctAXIAL, ctSAGITTAL, ctCORONAL, ptAXIAL, ptSAGITTAL, ptCORONAL],\r\n};\r\n\r\n/**\r\n * In this layout, the top row displays PT images in coronal, sagittal, and axial\r\n * orientations from left to right, respectively, followed by a MIP sagittal image\r\n * that spans both rows on the rightmost side. The bottom row displays fusion images\r\n * in coronal, sagittal, and axial orientations from left to right, respectively.\r\n * There is no viewport in the bottom row's rightmost position, as the MIP sagittal viewport\r\n * from the top row spans the full height of both rows.\r\n * It includes synchronizers as well.\r\n */\r\nconst stage4: AppTypes.HangingProtocol.ProtocolStage = {\r\n  name: '2x4-layout',\r\n  id: '2x4-layout',\r\n  viewportStructure: {\r\n    layoutType: 'grid',\r\n    properties: {\r\n      rows: 2,\r\n      columns: 4,\r\n      layoutOptions: [\r\n        {\r\n          x: 0,\r\n          y: 0,\r\n          width: 1 / 4,\r\n          height: 1 / 2,\r\n        },\r\n        {\r\n          x: 1 / 4,\r\n          y: 0,\r\n          width: 1 / 4,\r\n          height: 1 / 2,\r\n        },\r\n        {\r\n          x: 2 / 4,\r\n          y: 0,\r\n          width: 1 / 4,\r\n          height: 1 / 2,\r\n        },\r\n        {\r\n          x: 3 / 4,\r\n          y: 0,\r\n          width: 1 / 4,\r\n          height: 1,\r\n        },\r\n        {\r\n          x: 0,\r\n          y: 1 / 2,\r\n          width: 1 / 4,\r\n          height: 1 / 2,\r\n        },\r\n        {\r\n          x: 1 / 4,\r\n          y: 1 / 2,\r\n          width: 1 / 4,\r\n          height: 1 / 2,\r\n        },\r\n        {\r\n          x: 2 / 4,\r\n          y: 1 / 2,\r\n          width: 1 / 4,\r\n          height: 1 / 2,\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  viewports: [\r\n    ptCORONAL,\r\n    ptSAGITTAL,\r\n    ptAXIAL,\r\n    mipSAGITTAL,\r\n    fusionCORONAL,\r\n    fusionSAGITTAL,\r\n    fusionAXIAL,\r\n  ],\r\n};\r\n\r\n/**\r\n * This layout displays three fusion viewports: axial, sagittal, and coronal.\r\n * It follows a simple grid pattern with 1 row and 3 columns.\r\n */\r\n// const stage0: AppTypes.HangingProtocol.ProtocolStage = {\r\n//   name: 'Fusion 1x3',\r\n//   viewportStructure: {\r\n//     layoutType: 'grid',\r\n//     properties: {\r\n//       rows: 1,\r\n//       columns: 3,\r\n//     },\r\n//   },\r\n//   viewports: [fusionAXIAL, fusionSAGITTAL, fusionCORONAL],\r\n// };\r\n\r\nconst ptCT: AppTypes.HangingProtocol.Protocol = {\r\n  id: '@ohif/extension-tmtv.hangingProtocolModule.ptCT',\r\n  locked: true,\r\n  name: 'Default',\r\n  createdDate: '2021-02-23T19:22:08.894Z',\r\n  modifiedDate: '2022-10-04T19:22:08.894Z',\r\n  availableTo: {},\r\n  editableBy: {},\r\n  imageLoadStrategy: 'interleaveTopToBottom', // \"default\" , \"interleaveTopToBottom\",  \"interleaveCenter\"\r\n  protocolMatchingRules: [\r\n    {\r\n      attribute: 'ModalitiesInStudy',\r\n      constraint: {\r\n        contains: ['CT', 'PT'],\r\n      },\r\n    },\r\n    {\r\n      attribute: 'StudyDescription',\r\n      constraint: {\r\n        contains: 'PETCT',\r\n      },\r\n    },\r\n    {\r\n      attribute: 'StudyDescription',\r\n      constraint: {\r\n        contains: 'PET/CT',\r\n      },\r\n    },\r\n  ],\r\n  displaySetSelectors: {\r\n    ctDisplaySet: {\r\n      seriesMatchingRules: [\r\n        {\r\n          attribute: 'Modality',\r\n          constraint: {\r\n            equals: {\r\n              value: 'CT',\r\n            },\r\n          },\r\n          required: true,\r\n        },\r\n        {\r\n          attribute: 'isReconstructable',\r\n          constraint: {\r\n            equals: {\r\n              value: true,\r\n            },\r\n          },\r\n          required: true,\r\n        },\r\n        {\r\n          attribute: 'SeriesDescription',\r\n          constraint: {\r\n            contains: 'CT',\r\n          },\r\n        },\r\n        {\r\n          attribute: 'SeriesDescription',\r\n          constraint: {\r\n            contains: 'CT WB',\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    ptDisplaySet: {\r\n      seriesMatchingRules: [\r\n        {\r\n          attribute: 'Modality',\r\n          constraint: {\r\n            equals: 'PT',\r\n          },\r\n          required: true,\r\n        },\r\n        {\r\n          attribute: 'isReconstructable',\r\n          constraint: {\r\n            equals: {\r\n              value: true,\r\n            },\r\n          },\r\n          required: true,\r\n        },\r\n        {\r\n          attribute: 'SeriesDescription',\r\n          constraint: {\r\n            contains: 'Corrected',\r\n          },\r\n        },\r\n        {\r\n          weight: 2,\r\n          attribute: 'SeriesDescription',\r\n          constraint: {\r\n            doesNotContain: {\r\n              value: 'Uncorrected',\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  stages: [stage1, stage2, stage3, stage4],\r\n  numberOfPriorsReferenced: -1,\r\n};\r\n\r\nfunction getHangingProtocolModule() {\r\n  return [\r\n    {\r\n      name: ptCT.id,\r\n      protocol: ptCT,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getHangingProtocolModule;\r\n","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { DicomMetadataStore } from '@ohif/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Button, Input, Label, PanelSection } from '@ohif/ui-next';\r\nimport { useSystem } from '@ohif/core/src';\r\n\r\nconst DEFAULT_MEATADATA = {\r\n  PatientWeight: null,\r\n  PatientSex: null,\r\n  SeriesTime: null,\r\n  RadiopharmaceuticalInformationSequence: {\r\n    RadionuclideTotalDose: null,\r\n    RadionuclideHalfLife: null,\r\n    RadiopharmaceuticalStartTime: null,\r\n  },\r\n};\r\n\r\n/*\r\n * PETSUV panel enables the user to modify the patient related information, such as\r\n * patient sex, patientWeight. This is allowed since\r\n * sometimes these metadata are missing or wrong. By changing them\r\n * @param param0\r\n * @returns\r\n */\r\n\r\n// InputRow compound component\r\nconst InputRow = ({ children, className, ...props }) => {\r\n  return (\r\n    <div\r\n      className={`flex flex-row items-center space-x-4 ${className || ''}`}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\n// InputRow sub-components\r\nInputRow.Label = ({ children, unit, className, ...props }) => (\r\n  <Label\r\n    className={`min-w-32 flex-shrink-0 ${className || ''}`}\r\n    {...props}\r\n  >\r\n    {children}\r\n    {unit && <span className=\"text-muted-foreground\"> {unit}</span>}\r\n  </Label>\r\n);\r\n\r\nInputRow.Input = ({ className, ...props }) => (\r\n  <Input\r\n    className={`h-7 flex-1 ${className || ''}`}\r\n    {...props}\r\n  />\r\n);\r\n\r\n// Set display names for better debugging\r\nInputRow.Label.displayName = 'InputRow.Label';\r\nInputRow.Input.displayName = 'InputRow.Input';\r\n\r\nexport default function PanelPetSUV() {\r\n  const { commandsManager, servicesManager } = useSystem();\r\n  const { t } = useTranslation('PanelSUV');\r\n  const { displaySetService, hangingProtocolService } = servicesManager.services;\r\n  const [metadata, setMetadata] = useState(DEFAULT_MEATADATA);\r\n  const [ptDisplaySet, setPtDisplaySet] = useState(null);\r\n\r\n  const handleMetadataChange = metadata => {\r\n    setMetadata(prevState => {\r\n      const newState = { ...prevState };\r\n      Object.keys(metadata).forEach(key => {\r\n        if (typeof metadata[key] === 'object') {\r\n          newState[key] = {\r\n            ...prevState[key],\r\n            ...metadata[key],\r\n          };\r\n        } else {\r\n          newState[key] = metadata[key];\r\n        }\r\n      });\r\n      return newState;\r\n    });\r\n  };\r\n\r\n  const getMatchingPTDisplaySet = viewportMatchDetails => {\r\n    const ptDisplaySet = commandsManager.runCommand('getMatchingPTDisplaySet', {\r\n      viewportMatchDetails,\r\n    });\r\n\r\n    if (!ptDisplaySet) {\r\n      return;\r\n    }\r\n\r\n    const metadata = commandsManager.runCommand('getPTMetadata', {\r\n      ptDisplaySet,\r\n    });\r\n\r\n    return {\r\n      ptDisplaySet,\r\n      metadata,\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n    const displaySets = displaySetService.getActiveDisplaySets();\r\n    const { viewportMatchDetails } = hangingProtocolService.getMatchDetails();\r\n    if (!displaySets.length) {\r\n      return;\r\n    }\r\n\r\n    const displaySetInfo = getMatchingPTDisplaySet(viewportMatchDetails);\r\n\r\n    if (!displaySetInfo) {\r\n      return;\r\n    }\r\n\r\n    const { ptDisplaySet, metadata } = displaySetInfo;\r\n    setPtDisplaySet(ptDisplaySet);\r\n    setMetadata(metadata);\r\n  }, []);\r\n\r\n  // get the patientMetadata from the StudyInstanceUIDs and update the state\r\n  useEffect(() => {\r\n    const { unsubscribe } = hangingProtocolService.subscribe(\r\n      hangingProtocolService.EVENTS.PROTOCOL_CHANGED,\r\n      ({ viewportMatchDetails }) => {\r\n        const displaySetInfo = getMatchingPTDisplaySet(viewportMatchDetails);\r\n\r\n        if (!displaySetInfo) {\r\n          return;\r\n        }\r\n        const { ptDisplaySet, metadata } = displaySetInfo;\r\n        setPtDisplaySet(ptDisplaySet);\r\n        setMetadata(metadata);\r\n      }\r\n    );\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  function updateMetadata() {\r\n    if (!ptDisplaySet) {\r\n      throw new Error('No ptDisplaySet found');\r\n    }\r\n\r\n    // metadata should be dcmjs naturalized\r\n    DicomMetadataStore.updateMetadataForSeries(\r\n      ptDisplaySet.StudyInstanceUID,\r\n      ptDisplaySet.SeriesInstanceUID,\r\n      metadata\r\n    );\r\n\r\n    // update the displaySets\r\n    displaySetService.setDisplaySetMetadataInvalidated(ptDisplaySet.displaySetInstanceUID);\r\n\r\n    // Crosshair position depends on the metadata values such as the positioning interaction\r\n    // between series, so when the metadata is updated, the crosshairs need to be reset.\r\n    setTimeout(() => {\r\n      commandsManager.runCommand('resetCrosshairs');\r\n    }, 0);\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"ohif-scrollbar flex min-h-0 flex-auto select-none flex-col justify-between overflow-auto\">\r\n        <div className=\"flex min-h-0 flex-1 flex-col bg-[rgb(var(--background))] text-base\">\r\n          <PanelSection defaultOpen={true}>\r\n            <PanelSection.Header>{t('Patient Information')}</PanelSection.Header>\r\n            <PanelSection.Content>\r\n              <div className=\"flex flex-col gap-3 bg-[rgb(var(--primary-dark))] p-2\">\r\n                <InputRow>\r\n                  <InputRow.Label>{t('Patient Sex')}</InputRow.Label>\r\n                  <InputRow.Input\r\n                    value={metadata.PatientSex || ''}\r\n                    onChange={e => {\r\n                      handleMetadataChange({\r\n                        PatientSex: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </InputRow>\r\n\r\n                <InputRow>\r\n                  <InputRow.Label unit=\"kg\">{t('Weight')}</InputRow.Label>\r\n                  <InputRow.Input\r\n                    value={metadata.PatientWeight || ''}\r\n                    onChange={e => {\r\n                      handleMetadataChange({\r\n                        PatientWeight: e.target.value,\r\n                      });\r\n                    }}\r\n                    id=\"weight-input\"\r\n                  />\r\n                </InputRow>\r\n\r\n                <InputRow>\r\n                  <InputRow.Label unit=\"bq\">{t('Total Dose')}</InputRow.Label>\r\n                  <InputRow.Input\r\n                    value={\r\n                      metadata.RadiopharmaceuticalInformationSequence.RadionuclideTotalDose || ''\r\n                    }\r\n                    onChange={e => {\r\n                      handleMetadataChange({\r\n                        RadiopharmaceuticalInformationSequence: {\r\n                          RadionuclideTotalDose: e.target.value,\r\n                        },\r\n                      });\r\n                    }}\r\n                  />\r\n                </InputRow>\r\n\r\n                <InputRow>\r\n                  <InputRow.Label unit=\"s\">{t('Half Life')}</InputRow.Label>\r\n                  <InputRow.Input\r\n                    value={\r\n                      metadata.RadiopharmaceuticalInformationSequence.RadionuclideHalfLife || ''\r\n                    }\r\n                    onChange={e => {\r\n                      handleMetadataChange({\r\n                        RadiopharmaceuticalInformationSequence: {\r\n                          RadionuclideHalfLife: e.target.value,\r\n                        },\r\n                      });\r\n                    }}\r\n                  />\r\n                </InputRow>\r\n\r\n                <InputRow>\r\n                  <InputRow.Label unit=\"s\">{t('Injection Time')}</InputRow.Label>\r\n                  <InputRow.Input\r\n                    value={\r\n                      metadata.RadiopharmaceuticalInformationSequence\r\n                        .RadiopharmaceuticalStartTime || ''\r\n                    }\r\n                    onChange={e => {\r\n                      handleMetadataChange({\r\n                        RadiopharmaceuticalInformationSequence: {\r\n                          RadiopharmaceuticalStartTime: e.target.value,\r\n                        },\r\n                      });\r\n                    }}\r\n                  />\r\n                </InputRow>\r\n\r\n                <InputRow>\r\n                  <InputRow.Label unit=\"s\">{t('Acquisition Time')}</InputRow.Label>\r\n                  <InputRow.Input\r\n                    value={metadata.SeriesTime || ''}\r\n                    onChange={() => {}}\r\n                  />\r\n                </InputRow>\r\n\r\n                <Button\r\n                  variant=\"default\"\r\n                  size=\"sm\"\r\n                  className=\"w-28 self-end\"\r\n                  onClick={updateMetadata}\r\n                >\r\n                  Reload Data\r\n                </Button>\r\n              </div>\r\n            </PanelSection.Content>\r\n          </PanelSection>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nPanelPetSUV.propTypes = {\r\n  servicesManager: PropTypes.shape({\r\n    services: PropTypes.shape({\r\n      measurementService: PropTypes.shape({\r\n        getMeasurements: PropTypes.func.isRequired,\r\n        subscribe: PropTypes.func.isRequired,\r\n        EVENTS: PropTypes.object.isRequired,\r\n        VALUE_TYPES: PropTypes.object.isRequired,\r\n      }).isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n};\r\n","import React from 'react';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n  Label,\r\n  Input,\r\n  Button,\r\n} from '@ohif/ui-next';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport const ROI_STAT = 'roi_stat';\r\nconst RANGE = 'range';\r\n\r\nconst options = [\r\n  { value: ROI_STAT, label: 'Max', placeHolder: 'Max' },\r\n  { value: RANGE, label: 'Range', placeHolder: 'Range' },\r\n];\r\n\r\nfunction ROIThresholdConfiguration({ config, dispatch, runCommand }) {\r\n  const { t } = useTranslation('ROIThresholdConfiguration');\r\n\r\n  const handlePercentageOfMaxSUVChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    let value = e.target.value;\r\n\r\n    if (value === '.') {\r\n      value = '0.';\r\n    }\r\n\r\n    if (isNaN(Number(value)) || Number(value) < 0 || Number(value) > 1) {\r\n      return;\r\n    }\r\n    dispatch({ type: 'setWeight', payload: { weight: value } });\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col space-y-4 bg-[rgb(var(--primary-dark))] p-px\">\r\n      <div className=\"flex items-end space-x-3\">\r\n        <div className=\"flex min-w-0 flex-1 flex-col\">\r\n          {/* The original panel design does not include \"Strategy,\" but it was found in the code.\r\n    Need to determine if it should be included or removed.\r\n          <Label className=\"my-2\">{t('Strategy')}</Label>  */}\r\n          <Select\r\n            value={config.strategy}\r\n            onValueChange={value => {\r\n              dispatch({ type: 'setStrategy', payload: { strategy: value } });\r\n            }}\r\n          >\r\n            <SelectTrigger className=\"w-full\">\r\n              <SelectValue\r\n                placeholder={options.find(option => option.value === config.strategy)?.placeHolder}\r\n              />\r\n            </SelectTrigger>\r\n            <SelectContent className=\"\">\r\n              {options.map(option => (\r\n                <SelectItem\r\n                  key={option.value}\r\n                  value={option.value}\r\n                >\r\n                  {option.label}\r\n                </SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n        <div className=\"flex-shrink-0\">\r\n          <div className=\"flex justify-end space-x-2\">\r\n            <Button\r\n              variant=\"secondary\"\r\n              onClick={() => runCommand('setStartSliceForROIThresholdTool')}\r\n            >\r\n              {t('Start')}\r\n            </Button>\r\n            <Button\r\n              variant=\"secondary\"\r\n              onClick={() => runCommand('setEndSliceForROIThresholdTool')}\r\n            >\r\n              {t('End')}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {config.strategy === ROI_STAT && (\r\n        <div className=\"mr-0\">\r\n          <div className=\"mb-2\">\r\n            <Label>{t('Percentage of Max SUV')}</Label>\r\n          </div>\r\n          <Input\r\n            data-cy=\"percentage-of-max-suv-input\"\r\n            className=\"w-full\"\r\n            type=\"text\"\r\n            value={config.weight}\r\n            onChange={handlePercentageOfMaxSUVChange}\r\n          />\r\n        </div>\r\n      )}\r\n      {config.strategy !== ROI_STAT && (\r\n        <div className=\"mr-2 text-sm\">\r\n          <div className=\"flex flex-col space-y-2\">\r\n            {/* Header */}\r\n            <Label>Lower & Upper Ranges</Label>\r\n\r\n            {/* CT Row */}\r\n            <div className=\"flex items-center\">\r\n              <div className=\"w-10 text-left\">\r\n                <Label>CT</Label>\r\n              </div>\r\n              <div className=\"flex flex-1 space-x-2\">\r\n                <div className=\"flex-1\">\r\n                  <Input\r\n                    className=\"w-full\"\r\n                    type=\"text\"\r\n                    value={config.ctLower}\r\n                    onChange={e => {\r\n                      dispatch({ type: 'setThreshold', payload: { ctLower: e.target.value } });\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <Input\r\n                    className=\"w-full\"\r\n                    type=\"text\"\r\n                    value={config.ctUpper}\r\n                    onChange={e => {\r\n                      dispatch({ type: 'setThreshold', payload: { ctUpper: e.target.value } });\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* PT Row */}\r\n            <div className=\"flex items-center\">\r\n              <div className=\"w-10 text-left\">\r\n                <Label>PT</Label>\r\n              </div>\r\n              <div className=\"flex flex-1 space-x-2\">\r\n                <div className=\"flex-1\">\r\n                  <Input\r\n                    className=\"w-full\"\r\n                    type=\"text\"\r\n                    value={config.ptLower}\r\n                    onChange={e => {\r\n                      dispatch({ type: 'setThreshold', payload: { ptLower: e.target.value } });\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <Input\r\n                    className=\"w-full\"\r\n                    type=\"text\"\r\n                    value={config.ptUpper}\r\n                    onChange={e => {\r\n                      dispatch({ type: 'setThreshold', payload: { ptUpper: e.target.value } });\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ROIThresholdConfiguration;\r\n","import PanelROIThresholdExport from './PanelROIThresholdExport';\r\n\r\nexport default PanelROIThresholdExport;\r\n","import React from 'react';\r\nimport { PanelSegmentation } from '@ohif/extension-cornerstone';\r\nimport PanelROIThresholdExport from './PanelROIThresholdSegmentation/PanelROIThresholdExport';\r\n\r\nexport default function PanelTMTV({ configuration }: withAppTypes) {\r\n  return (\r\n    <>\r\n      <PanelSegmentation configuration={configuration}>\r\n        <PanelROIThresholdExport />\r\n      </PanelSegmentation>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { PanelPetSUV, PanelROIThresholdExport } from './Panels';\r\nimport { Toolbox } from '@ohif/extension-default';\r\nimport PanelTMTV from './Panels/PanelTMTV';\r\n\r\nfunction getPanelModule({ commandsManager, extensionManager, servicesManager }) {\r\n  const { toolbarService } = servicesManager.services;\r\n\r\n  const wrappedPanelPetSuv = () => {\r\n    return <PanelPetSUV />;\r\n  };\r\n\r\n  const wrappedROIThresholdToolbox = () => {\r\n    return (\r\n      <Toolbox\r\n        buttonSectionId={toolbarService.sections.roiThresholdToolbox}\r\n        title=\"Threshold Tools\"\r\n      />\r\n    );\r\n  };\r\n\r\n  const wrappedROIThresholdExport = () => {\r\n    return <PanelROIThresholdExport />;\r\n  };\r\n\r\n  const wrappedPanelTMTV = () => {\r\n    return (\r\n      <>\r\n        <Toolbox\r\n          buttonSectionId={toolbarService.sections.roiThresholdToolbox}\r\n          title=\"Threshold Tools\"\r\n        />\r\n        <PanelTMTV\r\n          commandsManager={commandsManager}\r\n          servicesManager={servicesManager}\r\n        />\r\n      </>\r\n    );\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: 'petSUV',\r\n      iconName: 'tab-patient-info',\r\n      iconLabel: 'Patient Info',\r\n      label: 'Patient Info',\r\n      component: wrappedPanelPetSuv,\r\n    },\r\n    {\r\n      name: 'tmtv',\r\n      iconName: 'tab-segmentation',\r\n      iconLabel: 'Segmentation',\r\n      component: wrappedPanelTMTV,\r\n    },\r\n    {\r\n      name: 'tmtvBox',\r\n      iconName: 'tab-segmentation',\r\n      iconLabel: 'Segmentation',\r\n      label: 'Segmentation Toolbox',\r\n      component: wrappedROIThresholdToolbox,\r\n    },\r\n    {\r\n      name: 'tmtvExport',\r\n      iconName: 'tab-segmentation',\r\n      iconLabel: 'Segmentation',\r\n      label: 'Segmentation Export',\r\n      component: wrappedROIThresholdExport,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getPanelModule;\r\n","export default ['RectangleROIStartEndThreshold','CircleROIStartEndThreshold'];\r\n","import SUPPORTED_TOOLS from './constants/supportedTools';\r\nimport { getSOPInstanceAttributes } from '@ohif/extension-cornerstone';\r\n\r\nconst RectangleROIStartEndThreshold = {\r\n  toAnnotation: (measurement, definition) => {},\r\n\r\n  /**\r\n   * Maps cornerstone annotation event data to measurement service format.\r\n   *\r\n   * @param {Object} cornerstone Cornerstone event data\r\n   * @return {Measurement} Measurement instance\r\n   */\r\n  toMeasurement: (csToolsEventDetail, displaySetService, cornerstoneViewportService) => {\r\n    const { annotation, viewportId } = csToolsEventDetail;\r\n    const { metadata, data, annotationUID } = annotation;\r\n\r\n    if (!metadata || !data) {\r\n      console.warn('Length tool: Missing metadata or data');\r\n      return null;\r\n    }\r\n\r\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\r\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\r\n\r\n    if (!validToolType) {\r\n      throw new Error('Tool not supported');\r\n    }\r\n\r\n    const { SOPInstanceUID, SeriesInstanceUID, StudyInstanceUID } = getSOPInstanceAttributes(\r\n      referencedImageId,\r\n      cornerstoneViewportService,\r\n      viewportId\r\n    );\r\n\r\n    let displaySet;\r\n\r\n    if (SOPInstanceUID) {\r\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\r\n        SOPInstanceUID,\r\n        SeriesInstanceUID\r\n      );\r\n    } else {\r\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID);\r\n    }\r\n\r\n    return {\r\n      uid: annotationUID,\r\n      SOPInstanceUID,\r\n      FrameOfReferenceUID,\r\n      // points,\r\n      metadata,\r\n      referenceSeriesUID: SeriesInstanceUID,\r\n      referenceStudyUID: StudyInstanceUID,\r\n      toolName: metadata.toolName,\r\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\r\n      label: metadata.label,\r\n      data: data.cachedStats,\r\n      type: 'RectangleROIStartEndThreshold',\r\n    };\r\n  },\r\n};\r\n\r\nexport default RectangleROIStartEndThreshold;\r\n","import SUPPORTED_TOOLS from './constants/supportedTools';\r\nimport { getSOPInstanceAttributes } from '@ohif/extension-cornerstone';\r\n\r\nconst CircleROIStartEndThreshold = {\r\n  toAnnotation: (measurement, definition) => {},\r\n\r\n  /**\r\n   * Maps cornerstone annotation event data to measurement service format.\r\n   *\r\n   * @param {Object} cornerstone Cornerstone event data\r\n   * @return {Measurement} Measurement instance\r\n   */\r\n  toMeasurement: (csToolsEventDetail, displaySetService, cornerstoneViewportService) => {\r\n    const { annotation, viewportId } = csToolsEventDetail;\r\n    const { metadata, data, annotationUID } = annotation;\r\n\r\n    if (!metadata || !data) {\r\n      console.warn('Length tool: Missing metadata or data');\r\n      return null;\r\n    }\r\n\r\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\r\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\r\n\r\n    if (!validToolType) {\r\n      throw new Error('Tool not supported');\r\n    }\r\n\r\n    const { SOPInstanceUID, SeriesInstanceUID, StudyInstanceUID } = getSOPInstanceAttributes(\r\n      referencedImageId,\r\n      cornerstoneViewportService,\r\n      viewportId\r\n    );\r\n\r\n    let displaySet;\r\n\r\n    if (SOPInstanceUID) {\r\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\r\n        SOPInstanceUID,\r\n        SeriesInstanceUID\r\n      );\r\n    } else {\r\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID);\r\n    }\r\n\r\n    const { cachedStats } = data;\r\n\r\n    return {\r\n      uid: annotationUID,\r\n      SOPInstanceUID,\r\n      FrameOfReferenceUID,\r\n      // points,\r\n      metadata,\r\n      referenceSeriesUID: SeriesInstanceUID,\r\n      referenceStudyUID: StudyInstanceUID,\r\n      toolName: metadata.toolName,\r\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\r\n      label: metadata.label,\r\n      // displayText: displayText,\r\n      data: data.cachedStats,\r\n      type: 'CircleROIStartEndThreshold',\r\n      // getReport,\r\n    };\r\n  },\r\n};\r\n\r\nexport default CircleROIStartEndThreshold;\r\n","import RectangleROIStartEndThreshold from './RectangleROIStartEndThreshold';\r\nimport CircleROIStartEndThreshold from './CircleROIStartEndThreshold';\r\n\r\nconst measurementServiceMappingsFactory = (\r\n  measurementService,\r\n  displaySetService,\r\n  cornerstoneViewportService\r\n) => {\r\n  return {\r\n    RectangleROIStartEndThreshold: {\r\n      toAnnotation: RectangleROIStartEndThreshold.toAnnotation,\r\n      toMeasurement: csToolsAnnotation =>\r\n        RectangleROIStartEndThreshold.toMeasurement(\r\n          csToolsAnnotation,\r\n          displaySetService,\r\n          cornerstoneViewportService\r\n        ),\r\n      matchingCriteria: [\r\n        {\r\n          valueType: measurementService.VALUE_TYPES.ROI_THRESHOLD_MANUAL,\r\n        },\r\n      ],\r\n    },\r\n    CircleROIStartEndThreshold: {\r\n      toAnnotation: CircleROIStartEndThreshold.toAnnotation,\r\n      toMeasurement: csToolsAnnotation =>\r\n        CircleROIStartEndThreshold.toMeasurement(\r\n          csToolsAnnotation,\r\n          displaySetService,\r\n          cornerstoneViewportService\r\n        ),\r\n      matchingCriteria: [\r\n        {\r\n          valueType: measurementService.VALUE_TYPES.ROI_THRESHOLD_MANUAL,\r\n        },\r\n      ],\r\n    },\r\n  };\r\n};\r\n\r\nexport default measurementServiceMappingsFactory;\r\n","import {\r\n  addTool,\r\n  RectangleROIStartEndThresholdTool,\r\n  CircleROIStartEndThresholdTool,\r\n} from '@cornerstonejs/tools';\r\nimport { Enums as CSExtensionEnums } from '@ohif/extension-cornerstone';\r\n\r\nimport measurementServiceMappingsFactory from './utils/measurementServiceMappings/measurementServiceMappingsFactory';\r\n\r\nconst { CORNERSTONE_3D_TOOLS_SOURCE_NAME, CORNERSTONE_3D_TOOLS_SOURCE_VERSION } = CSExtensionEnums;\r\n\r\n/**\r\n *\r\n * @param {Object} servicesManager\r\n * @param {Object} configuration\r\n * @param {Object|Array} configuration.csToolsConfig\r\n */\r\nexport default function init({ servicesManager }) {\r\n  const { measurementService, displaySetService, cornerstoneViewportService } =\r\n    servicesManager.services;\r\n\r\n  addTool(RectangleROIStartEndThresholdTool);\r\n  addTool(CircleROIStartEndThresholdTool);\r\n\r\n  const { RectangleROIStartEndThreshold, CircleROIStartEndThreshold } =\r\n    measurementServiceMappingsFactory(\r\n      measurementService,\r\n      displaySetService,\r\n      cornerstoneViewportService\r\n    );\r\n\r\n  const csTools3DVer1MeasurementSource = measurementService.getSource(\r\n    CORNERSTONE_3D_TOOLS_SOURCE_NAME,\r\n    CORNERSTONE_3D_TOOLS_SOURCE_VERSION\r\n  );\r\n\r\n  measurementService.addMapping(\r\n    csTools3DVer1MeasurementSource,\r\n    'RectangleROIStartEndThreshold',\r\n    RectangleROIStartEndThreshold.matchingCriteria,\r\n    RectangleROIStartEndThreshold.toAnnotation,\r\n    RectangleROIStartEndThreshold.toMeasurement\r\n  );\r\n\r\n  measurementService.addMapping(\r\n    csTools3DVer1MeasurementSource,\r\n    'CircleROIStartEndThreshold',\r\n    CircleROIStartEndThreshold.matchingCriteria,\r\n    CircleROIStartEndThreshold.toAnnotation,\r\n    CircleROIStartEndThreshold.toMeasurement\r\n  );\r\n}\r\n","import { cache } from '@cornerstonejs/core';\r\nimport * as csTools from '@cornerstonejs/tools';\r\n\r\nfunction getRoiStats(displaySet, annotations) {\r\n  const { imageIds } = displaySet;\r\n\r\n  const ptVolumeInfo = cache.getVolumeContainingImageId(imageIds[0]);\r\n\r\n  if (!ptVolumeInfo) {\r\n    throw new Error('No volume found for display set');\r\n  }\r\n\r\n  const { volume } = ptVolumeInfo;\r\n  const { voxelManager } = volume;\r\n\r\n  // Todo: add support for other strategies\r\n  const { fn, baseValue } = _getStrategyFn('max');\r\n  let value = baseValue;\r\n\r\n  const boundsIJK = csTools.utilities.rectangleROITool.getBoundsIJKFromRectangleAnnotations(\r\n    annotations,\r\n    volume\r\n  );\r\n\r\n  // Use the voxelManager's forEach method to iterate over the bounds\r\n  voxelManager.forEach(\r\n    ({ value: voxelValue }) => {\r\n      value = fn(voxelValue, value);\r\n    },\r\n    {\r\n      boundsIJK,\r\n    }\r\n  );\r\n\r\n  return value;\r\n}\r\n\r\nfunction getThresholdValues(\r\n  annotationUIDs,\r\n  ptDisplaySet,\r\n  config\r\n): { ptLower: number; ptUpper: number; ctLower: number; ctUpper: number } {\r\n  if (config.strategy === 'range') {\r\n    return {\r\n      ptLower: Number(config.ptLower),\r\n      ptUpper: Number(config.ptUpper),\r\n      ctLower: Number(config.ctLower),\r\n      ctUpper: Number(config.ctUpper),\r\n    };\r\n  }\r\n\r\n  const { weight } = config;\r\n  const annotations = annotationUIDs.map(annotationUID =>\r\n    csTools.annotation.state.getAnnotation(annotationUID)\r\n  );\r\n\r\n  const ptValue = getRoiStats(ptDisplaySet, annotations);\r\n\r\n  return {\r\n    ctLower: -Infinity,\r\n    ctUpper: +Infinity,\r\n    ptLower: weight * ptValue,\r\n    ptUpper: +Infinity,\r\n  };\r\n}\r\n\r\nfunction _getStrategyFn(statistic): {\r\n  fn: (a: number, b: number) => number;\r\n  baseValue: number;\r\n} {\r\n  const baseValue = -Infinity;\r\n  const fn = (number, maxValue) => {\r\n    if (number > maxValue) {\r\n      maxValue = number;\r\n    }\r\n    return maxValue;\r\n  };\r\n  return { fn, baseValue };\r\n}\r\n\r\nexport default getThresholdValues;\r\n","import dcmjs from 'dcmjs';\r\nimport { classes, DicomMetadataStore } from '@ohif/core';\r\nimport { adaptersRT } from '@cornerstonejs/adapters';\r\n\r\nconst { datasetToBlob } = dcmjs.data;\r\nconst metadataProvider = classes.MetadataProvider;\r\n\r\nexport default function dicomRTAnnotationExport(annotations) {\r\n  const dataset = adaptersRT.Cornerstone3D.RTSS.generateRTSSFromAnnotations(\r\n    annotations,\r\n    metadataProvider,\r\n    DicomMetadataStore\r\n  );\r\n  const reportBlob = datasetToBlob(dataset);\r\n\r\n  //Create a URL for the binary.\r\n  var objectUrl = URL.createObjectURL(reportBlob);\r\n  window.location.assign(objectUrl);\r\n}\r\n","import dicomRTAnnotationExport from './dicomRTAnnotationExport';\r\n\r\nexport default dicomRTAnnotationExport;\r\n","import OHIF from '@ohif/core';\r\nimport * as cs from '@cornerstonejs/core';\r\nimport * as csTools from '@cornerstonejs/tools';\r\nimport { classes } from '@ohif/core';\r\nimport i18n from '@ohif/i18n';\r\nimport getThresholdValues from './utils/getThresholdValue';\r\nimport createAndDownloadTMTVReport from './utils/createAndDownloadTMTVReport';\r\n\r\nimport dicomRTAnnotationExport from './utils/dicomRTAnnotationExport/RTStructureSet';\r\n\r\nimport { Enums } from '@cornerstonejs/tools';\r\nimport { utils } from '@ohif/core';\r\n\r\nconst { SegmentationRepresentations } = Enums;\r\nconst { formatPN } = utils;\r\n\r\nconst metadataProvider = classes.MetadataProvider;\r\nconst ROI_THRESHOLD_MANUAL_TOOL_IDS = [\r\n  'RectangleROIStartEndThreshold',\r\n  'RectangleROIThreshold',\r\n  'CircleROIStartEndThreshold',\r\n];\r\n\r\nconst commandsModule = ({ servicesManager, commandsManager, extensionManager }: withAppTypes) => {\r\n  const {\r\n    viewportGridService,\r\n    uiNotificationService,\r\n    displaySetService,\r\n    hangingProtocolService,\r\n    toolGroupService,\r\n    cornerstoneViewportService,\r\n    segmentationService,\r\n  } = servicesManager.services;\r\n\r\n  const utilityModule = extensionManager.getModuleEntry(\r\n    '@ohif/extension-cornerstone.utilityModule.common'\r\n  );\r\n\r\n  const { getEnabledElement } = utilityModule.exports;\r\n\r\n  function _getActiveViewportsEnabledElement() {\r\n    const { activeViewportId } = viewportGridService.getState();\r\n    const { element } = getEnabledElement(activeViewportId) || {};\r\n    const enabledElement = cs.getEnabledElement(element);\r\n    return enabledElement;\r\n  }\r\n\r\n  function _getAnnotationsSelectedByToolNames(toolNames) {\r\n    return toolNames.reduce((allAnnotationUIDs, toolName) => {\r\n      const annotationUIDs =\r\n        csTools.annotation.selection.getAnnotationsSelectedByToolName(toolName);\r\n\r\n      return allAnnotationUIDs.concat(annotationUIDs);\r\n    }, []);\r\n  }\r\n\r\n  const actions = {\r\n    getMatchingPTDisplaySet: ({ viewportMatchDetails }) => {\r\n      // Todo: this is assuming that the hanging protocol has successfully matched\r\n      // the correct PT. For future, we should have a way to filter out the PTs\r\n      // that are in the viewer layout (but then we have the problem of the attenuation\r\n      // corrected PT vs the non-attenuation correct PT)\r\n\r\n      let ptDisplaySet = null;\r\n      for (const [, viewportDetails] of viewportMatchDetails) {\r\n        const { displaySetsInfo } = viewportDetails;\r\n        const displaySets = displaySetsInfo.map(({ displaySetInstanceUID }) =>\r\n          displaySetService.getDisplaySetByUID(displaySetInstanceUID)\r\n        );\r\n\r\n        if (!displaySets || displaySets.length === 0) {\r\n          continue;\r\n        }\r\n\r\n        ptDisplaySet = displaySets.find(displaySet => displaySet.Modality === 'PT');\r\n        if (ptDisplaySet) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      return ptDisplaySet;\r\n    },\r\n    getPTMetadata: ({ ptDisplaySet }) => {\r\n      const dataSource = extensionManager.getDataSources()[0];\r\n      const imageIds = dataSource.getImageIdsForDisplaySet(ptDisplaySet);\r\n\r\n      const firstImageId = imageIds[0];\r\n      const instance = metadataProvider.get('instance', firstImageId);\r\n      if (instance.Modality !== 'PT') {\r\n        return;\r\n      }\r\n\r\n      const metadata = {\r\n        SeriesTime: instance.SeriesTime,\r\n        Modality: instance.Modality,\r\n        PatientSex: instance.PatientSex,\r\n        PatientWeight: instance.PatientWeight,\r\n        RadiopharmaceuticalInformationSequence: {\r\n          RadionuclideTotalDose:\r\n            instance.RadiopharmaceuticalInformationSequence[0].RadionuclideTotalDose,\r\n          RadionuclideHalfLife:\r\n            instance.RadiopharmaceuticalInformationSequence[0].RadionuclideHalfLife,\r\n          RadiopharmaceuticalStartTime:\r\n            instance.RadiopharmaceuticalInformationSequence[0].RadiopharmaceuticalStartTime,\r\n          RadiopharmaceuticalStartDateTime:\r\n            instance.RadiopharmaceuticalInformationSequence[0].RadiopharmaceuticalStartDateTime,\r\n        },\r\n      };\r\n\r\n      return metadata;\r\n    },\r\n    createNewLabelmapFromPT: async ({ label }) => {\r\n      // Create a segmentation of the same resolution as the source data\r\n      // using volumeLoader.createAndCacheDerivedVolume.\r\n\r\n      const { viewportMatchDetails } = hangingProtocolService.getMatchDetails();\r\n\r\n      const ptDisplaySet = actions.getMatchingPTDisplaySet({\r\n        viewportMatchDetails,\r\n      });\r\n\r\n      let withPTViewportId = null;\r\n\r\n      for (const [viewportId, { displaySetsInfo }] of viewportMatchDetails.entries()) {\r\n        const isPT = displaySetsInfo.some(\r\n          ({ displaySetInstanceUID }) =>\r\n            displaySetInstanceUID === ptDisplaySet.displaySetInstanceUID\r\n        );\r\n\r\n        if (isPT) {\r\n          withPTViewportId = viewportId;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (!ptDisplaySet) {\r\n        uiNotificationService.error('No matching PT display set found');\r\n        return;\r\n      }\r\n\r\n      const currentSegmentations =\r\n        segmentationService.getSegmentationRepresentations(withPTViewportId);\r\n\r\n      const displaySet = displaySetService.getDisplaySetByUID(ptDisplaySet.displaySetInstanceUID);\r\n\r\n      const segmentationId = await segmentationService.createLabelmapForDisplaySet(displaySet, {\r\n        label: `Segmentation ${currentSegmentations.length + 1}`,\r\n        segments: { 1: { label: `${i18n.t('Segment')} 1`, active: true } },\r\n      });\r\n\r\n      segmentationService.addSegmentationRepresentation(withPTViewportId, {\r\n        segmentationId,\r\n      });\r\n\r\n      return segmentationId;\r\n    },\r\n    thresholdSegmentationByRectangleROITool: ({ segmentationId, config, segmentIndex }) => {\r\n      const segmentation = csTools.segmentation.state.getSegmentation(segmentationId);\r\n\r\n      const { representationData } = segmentation;\r\n      const { displaySetMatchDetails: matchDetails } = hangingProtocolService.getMatchDetails();\r\n      const ctDisplaySetMatch = matchDetails.get('ctDisplaySet');\r\n      const ptDisplaySetMatch = matchDetails.get('ptDisplaySet');\r\n\r\n      const ctDisplaySet = displaySetService.getDisplaySetByUID(\r\n        ctDisplaySetMatch.displaySetInstanceUID\r\n      );\r\n      const ptDisplaySet = displaySetService.getDisplaySetByUID(\r\n        ptDisplaySetMatch.displaySetInstanceUID\r\n      );\r\n\r\n      const { volumeId: segVolumeId } = representationData[\r\n        SegmentationRepresentations.Labelmap\r\n      ] as csTools.Types.LabelmapToolOperationDataVolume;\r\n\r\n      const labelmapVolume = cs.cache.getVolume(segVolumeId);\r\n\r\n      const annotationUIDs = _getAnnotationsSelectedByToolNames(ROI_THRESHOLD_MANUAL_TOOL_IDS);\r\n\r\n      if (annotationUIDs.length === 0) {\r\n        uiNotificationService.show({\r\n          title: 'Commands Module',\r\n          message: 'No ROIThreshold Tool is Selected',\r\n          type: 'error',\r\n        });\r\n        return;\r\n      }\r\n\r\n      const { ptLower, ptUpper, ctLower, ctUpper } = getThresholdValues(\r\n        annotationUIDs,\r\n        ptDisplaySet,\r\n        config\r\n      );\r\n\r\n      const { imageIds: ptImageIds } = ptDisplaySet;\r\n\r\n      const ptVolumeInfo = cs.cache.getVolumeContainingImageId(ptImageIds[0]);\r\n\r\n      if (!ptVolumeInfo) {\r\n        uiNotificationService.error('No PT volume found');\r\n        return;\r\n      }\r\n\r\n      const { imageIds: ctImageIds } = ctDisplaySet;\r\n      const ctVolumeInfo = cs.cache.getVolumeContainingImageId(ctImageIds[0]);\r\n\r\n      if (!ctVolumeInfo) {\r\n        uiNotificationService.error('No CT volume found');\r\n        return;\r\n      }\r\n\r\n      const ptVolume = ptVolumeInfo.volume;\r\n      const ctVolume = ctVolumeInfo.volume;\r\n\r\n      return csTools.utilities.segmentation.rectangleROIThresholdVolumeByRange(\r\n        annotationUIDs,\r\n        labelmapVolume,\r\n        [\r\n          { volume: ptVolume, lower: ptLower, upper: ptUpper },\r\n          { volume: ctVolume, lower: ctLower, upper: ctUpper },\r\n        ],\r\n        { overwrite: true, segmentIndex, segmentationId }\r\n      );\r\n    },\r\n    calculateTMTV: async ({ segmentations }) => {\r\n      const segmentationIds = segmentations.map(segmentation => segmentation.segmentationId);\r\n\r\n      const stats = await csTools.utilities.segmentation.computeMetabolicStats({\r\n        segmentationIds,\r\n        segmentIndex: 1,\r\n      });\r\n\r\n      segmentationService.setSegmentationGroupStats(segmentationIds, stats);\r\n      return stats;\r\n    },\r\n    exportTMTVReportCSV: async ({ segmentations, tmtv, config, options }) => {\r\n      const segReport = commandsManager.runCommand('getSegmentationCSVReport', {\r\n        segmentations,\r\n      });\r\n\r\n      let total_tlg = 0;\r\n      for (const segmentationId in segReport) {\r\n        const report = segReport[segmentationId];\r\n        const tlg = report['namedStats_lesionGlycolysis'];\r\n        total_tlg += tlg.value;\r\n      }\r\n      const additionalReportRows = [\r\n        { key: 'Total Lesion Glycolysis', value: { tlg: total_tlg.toFixed(4) } },\r\n        { key: 'Threshold Configuration', value: { ...config } },\r\n      ];\r\n\r\n      if (tmtv !== undefined) {\r\n        additionalReportRows.unshift({\r\n          key: 'Total Metabolic Tumor Volume',\r\n          value: { tmtv },\r\n        });\r\n      }\r\n\r\n      createAndDownloadTMTVReport(segReport, additionalReportRows, options);\r\n    },\r\n\r\n    setStartSliceForROIThresholdTool: () => {\r\n      const { viewport } = _getActiveViewportsEnabledElement();\r\n      const { focalPoint } = viewport.getCamera();\r\n\r\n      const selectedAnnotationUIDs = _getAnnotationsSelectedByToolNames(\r\n        ROI_THRESHOLD_MANUAL_TOOL_IDS\r\n      );\r\n\r\n      const annotationUID = selectedAnnotationUIDs[0];\r\n\r\n      const annotation = csTools.annotation.state.getAnnotation(annotationUID);\r\n\r\n      // set the current focal point\r\n      annotation.data.startCoordinate = focalPoint;\r\n      // IMPORTANT: invalidate the toolData for the cached stat to get updated\r\n      // and re-calculate the projection points\r\n      annotation.invalidated = true;\r\n      viewport.render();\r\n    },\r\n    setEndSliceForROIThresholdTool: () => {\r\n      const { viewport } = _getActiveViewportsEnabledElement();\r\n\r\n      const selectedAnnotationUIDs = _getAnnotationsSelectedByToolNames(\r\n        ROI_THRESHOLD_MANUAL_TOOL_IDS\r\n      );\r\n\r\n      const annotationUID = selectedAnnotationUIDs[0];\r\n\r\n      const annotation = csTools.annotation.state.getAnnotation(annotationUID);\r\n\r\n      // get the current focal point\r\n      const focalPointToEnd = viewport.getCamera().focalPoint;\r\n      annotation.data.endCoordinate = focalPointToEnd;\r\n\r\n      // IMPORTANT: invalidate the toolData for the cached stat to get updated\r\n      // and re-calculate the projection points\r\n      annotation.invalidated = true;\r\n\r\n      viewport.render();\r\n    },\r\n    createTMTVRTReport: () => {\r\n      // get all Rectangle ROI annotation\r\n      const stateManager = csTools.annotation.state.getAnnotationManager();\r\n\r\n      const annotations = [];\r\n\r\n      Object.keys(stateManager.annotations).forEach(frameOfReferenceUID => {\r\n        const forAnnotations = stateManager.annotations[frameOfReferenceUID];\r\n        const ROIAnnotations = ROI_THRESHOLD_MANUAL_TOOL_IDS.reduce(\r\n          (annotations, toolName) => [...annotations, ...(forAnnotations[toolName] ?? [])],\r\n          []\r\n        );\r\n\r\n        annotations.push(...ROIAnnotations);\r\n      });\r\n\r\n      commandsManager.runCommand('exportRTReportForAnnotations', {\r\n        annotations,\r\n      });\r\n    },\r\n    getSegmentationCSVReport: ({ segmentations }) => {\r\n      if (!segmentations || !segmentations.length) {\r\n        segmentations = segmentationService.getSegmentations();\r\n      }\r\n\r\n      const report = {};\r\n\r\n      for (const segmentation of segmentations) {\r\n        const { label, segmentationId, representationData } =\r\n          segmentation as csTools.Types.Segmentation;\r\n        const id = segmentationId;\r\n\r\n        const segReport = { id, label };\r\n\r\n        if (!representationData) {\r\n          report[id] = segReport;\r\n          continue;\r\n        }\r\n\r\n        const { cachedStats } = segmentation.segments[1] || {}; // Assuming we want stats from the first segment\r\n\r\n        if (cachedStats) {\r\n          Object.entries(cachedStats).forEach(([key, value]) => {\r\n            if (typeof value !== 'object') {\r\n              segReport[key] = value;\r\n            } else {\r\n              Object.entries(value).forEach(([subKey, subValue]) => {\r\n                const newKey = `${key}_${subKey}`;\r\n                segReport[newKey] = subValue;\r\n              });\r\n            }\r\n          });\r\n        }\r\n\r\n        const labelmapVolume =\r\n          segmentation.representationData[SegmentationRepresentations.Labelmap];\r\n\r\n        if (!labelmapVolume) {\r\n          report[id] = segReport;\r\n          continue;\r\n        }\r\n\r\n        const referencedVolume =\r\n          csTools.utilities.segmentation.getReferenceVolumeForSegmentationVolume(\r\n            labelmapVolume.volumeId\r\n          );\r\n\r\n        if (!referencedVolume) {\r\n          report[id] = segReport;\r\n          continue;\r\n        }\r\n\r\n        if (!referencedVolume.imageIds || !referencedVolume.imageIds.length) {\r\n          report[id] = segReport;\r\n          continue;\r\n        }\r\n\r\n        const firstImageId = referencedVolume.imageIds[0];\r\n        const instance = OHIF.classes.MetadataProvider.get('instance', firstImageId);\r\n\r\n        if (!instance) {\r\n          report[id] = segReport;\r\n          continue;\r\n        }\r\n\r\n        report[id] = {\r\n          ...segReport,\r\n          PatientID: instance.PatientID ?? '000000',\r\n          PatientName: formatPN(instance.PatientName),\r\n          StudyInstanceUID: instance.StudyInstanceUID,\r\n          SeriesInstanceUID: instance.SeriesInstanceUID,\r\n          StudyDate: instance.StudyDate,\r\n        };\r\n      }\r\n\r\n      return report;\r\n    },\r\n    exportRTReportForAnnotations: ({ annotations }) => {\r\n      dicomRTAnnotationExport(annotations);\r\n    },\r\n    setFusionPTColormap: ({ toolGroupId, colormap }) => {\r\n      const toolGroup = toolGroupService.getToolGroup(toolGroupId);\r\n\r\n      if (!toolGroup) {\r\n        return;\r\n      }\r\n\r\n      const { viewportMatchDetails } = hangingProtocolService.getMatchDetails();\r\n\r\n      const ptDisplaySet = actions.getMatchingPTDisplaySet({\r\n        viewportMatchDetails,\r\n      });\r\n\r\n      if (!ptDisplaySet) {\r\n        return;\r\n      }\r\n\r\n      const fusionViewportIds = toolGroup.getViewportIds();\r\n\r\n      const viewports = [];\r\n      fusionViewportIds.forEach(viewportId => {\r\n        commandsManager.runCommand('setViewportColormap', {\r\n          viewportId,\r\n          displaySetInstanceUID: ptDisplaySet.displaySetInstanceUID,\r\n          colormap: {\r\n            name: colormap,\r\n          },\r\n        });\r\n\r\n        viewports.push(cornerstoneViewportService.getCornerstoneViewport(viewportId));\r\n      });\r\n\r\n      viewports.forEach(viewport => {\r\n        viewport.render();\r\n      });\r\n    },\r\n  };\r\n\r\n  const definitions = {\r\n    setEndSliceForROIThresholdTool: {\r\n      commandFn: actions.setEndSliceForROIThresholdTool,\r\n    },\r\n    setStartSliceForROIThresholdTool: {\r\n      commandFn: actions.setStartSliceForROIThresholdTool,\r\n    },\r\n    getMatchingPTDisplaySet: {\r\n      commandFn: actions.getMatchingPTDisplaySet,\r\n    },\r\n    getPTMetadata: {\r\n      commandFn: actions.getPTMetadata,\r\n    },\r\n    createNewLabelmapFromPT: {\r\n      commandFn: actions.createNewLabelmapFromPT,\r\n    },\r\n    thresholdSegmentationByRectangleROITool: {\r\n      commandFn: actions.thresholdSegmentationByRectangleROITool,\r\n    },\r\n    calculateTMTV: {\r\n      commandFn: actions.calculateTMTV,\r\n    },\r\n    exportTMTVReportCSV: {\r\n      commandFn: actions.exportTMTVReportCSV,\r\n    },\r\n    createTMTVRTReport: {\r\n      commandFn: actions.createTMTVRTReport,\r\n    },\r\n    getSegmentationCSVReport: {\r\n      commandFn: actions.getSegmentationCSVReport,\r\n    },\r\n    exportRTReportForAnnotations: {\r\n      commandFn: actions.exportRTReportForAnnotations,\r\n    },\r\n    setFusionPTColormap: {\r\n      commandFn: actions.setFusionPTColormap,\r\n    },\r\n  };\r\n\r\n  return {\r\n    actions,\r\n    definitions,\r\n    defaultContext: 'TMTV:CORNERSTONE',\r\n  };\r\n};\r\n\r\nexport default commandsModule;\r\n","export default function createAndDownloadTMTVReport(segReport, additionalReportRows, options = {}) {\r\n  const firstReport = segReport[Object.keys(segReport)[0]];\r\n  const columns = Object.keys(firstReport);\r\n  const csv = [\r\n    columns\r\n      .map(column =>\r\n        column.toLowerCase().startsWith('namedstats_') ? column.substring(11) : column\r\n      )\r\n      .join(','),\r\n  ];\r\n\r\n  Object.values(segReport).forEach(segmentation => {\r\n    const row = [];\r\n    columns.forEach(column => {\r\n      // if it is array then we need to replace , with space to avoid csv parsing error\r\n      row.push(\r\n        segmentation[column] && typeof segmentation[column] === 'object'\r\n          ? Array.isArray(segmentation[column])\r\n            ? segmentation[column].join(' ')\r\n            : segmentation[column].value && Array.isArray(segmentation[column].value)\r\n              ? segmentation[column].value.join(' ')\r\n              : (segmentation[column].value ?? segmentation[column])\r\n          : segmentation[column]\r\n      );\r\n    });\r\n    csv.push(row.join(','));\r\n  });\r\n\r\n  csv.push('');\r\n  csv.push('');\r\n  csv.push('');\r\n\r\n  csv.push(`Patient ID,${firstReport.PatientID}`);\r\n  csv.push(`Study Date,${firstReport.StudyDate}`);\r\n  csv.push('');\r\n  additionalReportRows.forEach(({ key, value: values }) => {\r\n    const temp = [];\r\n    temp.push(`${key}`);\r\n    Object.keys(values).forEach(k => {\r\n      temp.push(`${k}`);\r\n      temp.push(`${values[k]}`);\r\n    });\r\n\r\n    csv.push(temp.join(','));\r\n  });\r\n\r\n  const blob = new Blob([csv.join('\\n')], {\r\n    type: 'text/csv;charset=utf-8',\r\n  });\r\n\r\n  const url = URL.createObjectURL(blob);\r\n\r\n  const a = document.createElement('a');\r\n  a.href = url;\r\n  a.download = options.filename ?? `${firstReport.PatientID}_tmtv.csv`;\r\n  a.click();\r\n}\r\n","import React from 'react';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n  Label,\r\n  Input,\r\n  Button,\r\n} from '@ohif/ui-next';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport const ROI_STAT = 'roi_stat';\r\nconst RANGE = 'range';\r\n\r\nconst options = [\r\n  { value: ROI_STAT, label: 'Max', placeHolder: 'Max' },\r\n  { value: RANGE, label: 'Range', placeHolder: 'Range' },\r\n];\r\n\r\nfunction ROIThresholdConfiguration({ config, dispatch, runCommand }) {\r\n  const { t } = useTranslation('ROIThresholdConfiguration');\r\n\r\n  const handlePercentageOfMaxSUVChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    let value = e.target.value;\r\n\r\n    if (value === '.') {\r\n      value = '0.';\r\n    }\r\n\r\n    if (isNaN(Number(value)) || Number(value) < 0 || Number(value) > 1) {\r\n      return;\r\n    }\r\n    dispatch({ type: 'setWeight', payload: { weight: value } });\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col space-y-4 bg-[rgb(var(--primary-dark))] p-px\">\r\n      <div className=\"flex items-end space-x-3\">\r\n        <div className=\"flex min-w-0 flex-1 flex-col\">\r\n          {/* The original panel design does not include \"Strategy,\" but it was found in the code.\r\n    Need to determine if it should be included or removed.\r\n          <Label className=\"my-2\">{t('Strategy')}</Label>  */}\r\n          <Select\r\n            value={config.strategy}\r\n            onValueChange={value => {\r\n              dispatch({ type: 'setStrategy', payload: { strategy: value } });\r\n            }}\r\n          >\r\n            <SelectTrigger className=\"w-full\">\r\n              <SelectValue\r\n                placeholder={options.find(option => option.value === config.strategy)?.placeHolder}\r\n              />\r\n            </SelectTrigger>\r\n            <SelectContent className=\"\">\r\n              {options.map(option => (\r\n                <SelectItem\r\n                  key={option.value}\r\n                  value={option.value}\r\n                >\r\n                  {option.label}\r\n                </SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n        <div className=\"flex-shrink-0\">\r\n          <div className=\"flex justify-end space-x-2\">\r\n            <Button\r\n              variant=\"secondary\"\r\n              onClick={() => runCommand('setStartSliceForROIThresholdTool')}\r\n            >\r\n              {t('Start')}\r\n            </Button>\r\n            <Button\r\n              variant=\"secondary\"\r\n              onClick={() => runCommand('setEndSliceForROIThresholdTool')}\r\n            >\r\n              {t('End')}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {config.strategy === ROI_STAT && (\r\n        <div className=\"mr-0\">\r\n          <div className=\"mb-2\">\r\n            <Label>{t('Percentage of Max SUV')}</Label>\r\n          </div>\r\n          <Input\r\n            data-cy=\"percentage-of-max-suv-input\"\r\n            className=\"w-full\"\r\n            type=\"text\"\r\n            value={config.weight}\r\n            onChange={handlePercentageOfMaxSUVChange}\r\n          />\r\n        </div>\r\n      )}\r\n      {config.strategy !== ROI_STAT && (\r\n        <div className=\"mr-2 text-sm\">\r\n          <div className=\"flex flex-col space-y-2\">\r\n            {/* Header */}\r\n            <Label>Lower & Upper Ranges</Label>\r\n\r\n            {/* CT Row */}\r\n            <div className=\"flex items-center\">\r\n              <div className=\"w-10 text-left\">\r\n                <Label>CT</Label>\r\n              </div>\r\n              <div className=\"flex flex-1 space-x-2\">\r\n                <div className=\"flex-1\">\r\n                  <Input\r\n                    className=\"w-full\"\r\n                    type=\"text\"\r\n                    value={config.ctLower}\r\n                    onChange={e => {\r\n                      dispatch({ type: 'setThreshold', payload: { ctLower: e.target.value } });\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <Input\r\n                    className=\"w-full\"\r\n                    type=\"text\"\r\n                    value={config.ctUpper}\r\n                    onChange={e => {\r\n                      dispatch({ type: 'setThreshold', payload: { ctUpper: e.target.value } });\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* PT Row */}\r\n            <div className=\"flex items-center\">\r\n              <div className=\"w-10 text-left\">\r\n                <Label>PT</Label>\r\n              </div>\r\n              <div className=\"flex flex-1 space-x-2\">\r\n                <div className=\"flex-1\">\r\n                  <Input\r\n                    className=\"w-full\"\r\n                    type=\"text\"\r\n                    value={config.ptLower}\r\n                    onChange={e => {\r\n                      dispatch({ type: 'setThreshold', payload: { ptLower: e.target.value } });\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <Input\r\n                    className=\"w-full\"\r\n                    type=\"text\"\r\n                    value={config.ptUpper}\r\n                    onChange={e => {\r\n                      dispatch({ type: 'setThreshold', payload: { ptUpper: e.target.value } });\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ROIThresholdConfiguration;\r\n","import React, { useCallback, useReducer } from 'react';\r\nimport { Button } from '@ohif/ui-next';\r\nimport ROIThresholdConfiguration, {\r\n  ROI_STAT,\r\n} from './PanelROIThresholdSegmentation/ROIThresholdConfiguration';\r\nimport * as cs3dTools from '@cornerstonejs/tools';\r\nimport { useSystem } from '@ohif/core';\r\nimport { useSegmentations } from '@ohif/extension-cornerstone';\r\n\r\nconst LOWER_CT_THRESHOLD_DEFAULT = -1024;\r\nconst UPPER_CT_THRESHOLD_DEFAULT = 1024;\r\nconst LOWER_PT_THRESHOLD_DEFAULT = 2.5;\r\nconst UPPER_PT_THRESHOLD_DEFAULT = 100;\r\nconst WEIGHT_DEFAULT = 0.41; // a default weight for suv max often used in the literature\r\nconst DEFAULT_STRATEGY = ROI_STAT;\r\n\r\nfunction reducer(state, action) {\r\n  const { payload } = action;\r\n  const { strategy, ctLower, ctUpper, ptLower, ptUpper, weight } = payload;\r\n\r\n  switch (action.type) {\r\n    case 'setStrategy':\r\n      return {\r\n        ...state,\r\n        strategy,\r\n      };\r\n    case 'setThreshold':\r\n      return {\r\n        ...state,\r\n        ctLower: ctLower ? ctLower : state.ctLower,\r\n        ctUpper: ctUpper ? ctUpper : state.ctUpper,\r\n        ptLower: ptLower ? ptLower : state.ptLower,\r\n        ptUpper: ptUpper ? ptUpper : state.ptUpper,\r\n      };\r\n    case 'setWeight':\r\n      return {\r\n        ...state,\r\n        weight,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction RectangleROIOptions() {\r\n  const { commandsManager } = useSystem();\r\n  const segmentations = useSegmentations();\r\n  const activeSegmentation = segmentations[0];\r\n\r\n  const runCommand = useCallback(\r\n    (commandName, commandOptions = {}) => {\r\n      return commandsManager.runCommand(commandName, commandOptions);\r\n    },\r\n    [commandsManager]\r\n  );\r\n\r\n  const [config, dispatch] = useReducer(reducer, {\r\n    strategy: DEFAULT_STRATEGY,\r\n    ctLower: LOWER_CT_THRESHOLD_DEFAULT,\r\n    ctUpper: UPPER_CT_THRESHOLD_DEFAULT,\r\n    ptLower: LOWER_PT_THRESHOLD_DEFAULT,\r\n    ptUpper: UPPER_PT_THRESHOLD_DEFAULT,\r\n    weight: WEIGHT_DEFAULT,\r\n  });\r\n\r\n  const handleROIThresholding = useCallback(() => {\r\n    if (!activeSegmentation) {\r\n      return;\r\n    }\r\n\r\n    const segmentationId = activeSegmentation.segmentationId;\r\n    const activeSegmentIndex =\r\n      cs3dTools.segmentation.segmentIndex.getActiveSegmentIndex(segmentationId);\r\n\r\n    runCommand('thresholdSegmentationByRectangleROITool', {\r\n      segmentationId,\r\n      config,\r\n      segmentIndex: activeSegmentIndex,\r\n    });\r\n  }, [activeSegmentation, config]);\r\n\r\n  return (\r\n    <div className=\"invisible-scrollbar mb-1 flex flex-col overflow-y-auto overflow-x-hidden\">\r\n      <ROIThresholdConfiguration\r\n        config={config}\r\n        dispatch={dispatch}\r\n        runCommand={runCommand}\r\n      />\r\n      {activeSegmentation && (\r\n        <Button\r\n          variant=\"default\"\r\n          className=\"my-3 mr-auto w-20\"\r\n          onClick={handleROIThresholding}\r\n        >\r\n          Run\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RectangleROIOptions;\r\n","import { id } from './id';\r\nimport getHangingProtocolModule from './getHangingProtocolModule';\r\nimport getPanelModule from './getPanelModule';\r\nimport init from './init';\r\nimport commandsModule from './commandsModule';\r\nimport getToolbarModule from './getToolbarModule';\r\n\r\n/**\r\n *\r\n */\r\nconst tmtvExtension = {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   */\r\n  id,\r\n  preRegistration({ servicesManager, commandsManager, extensionManager, configuration = {} }) {\r\n    init({ servicesManager, commandsManager, extensionManager, configuration });\r\n  },\r\n  getToolbarModule,\r\n  getPanelModule,\r\n  getHangingProtocolModule,\r\n  getCommandsModule({ servicesManager, commandsManager, extensionManager }) {\r\n    return commandsModule({\r\n      servicesManager,\r\n      commandsManager,\r\n      extensionManager,\r\n    });\r\n  },\r\n};\r\n\r\nexport default tmtvExtension;\r\n","import RectangleROIOptions from './Panels/RectangleROIOptions';\r\n\r\nexport default function getToolbarModule() {\r\n  return [\r\n    {\r\n      name: 'tmtv.RectangleROIThresholdOptions',\r\n      defaultComponent: RectangleROIOptions,\r\n    },\r\n  ];\r\n}\r\n"],"names":["id","packageJson","cameraPositionSync","type","source","target","hydrateSegSync","options","matchingRules","ctAXIAL","viewportOptions","viewportId","viewportType","orientation","toolGroupId","initialImageOptions","preset","syncGroups","syncColormap","displaySets","ctSAGITTAL","ctCORONAL","ptAXIAL","background","syncInvertState","voi","custom","voiInverted","ptSAGITTAL","ptCORONAL","fusionAXIAL","colormap","name","opacity","value","fusionSAGITTAL","fusionCORONAL","mipSAGITTAL","customViewportProps","hideOverlays","blendMode","slabThickness","ptCT","locked","createdDate","modifiedDate","availableTo","editableBy","imageLoadStrategy","protocolMatchingRules","attribute","constraint","contains","displaySetSelectors","ctDisplaySet","seriesMatchingRules","equals","required","ptDisplaySet","weight","doesNotContain","stages","viewportStructure","layoutType","properties","rows","columns","layoutOptions","x","y","width","height","viewports","numberOfPriorsReferenced","protocol","DEFAULT_MEATADATA","PatientWeight","PatientSex","SeriesTime","RadiopharmaceuticalInformationSequence","RadionuclideTotalDose","RadionuclideHalfLife","RadiopharmaceuticalStartTime","InputRow","children","className","props","React","_extends","PanelPetSUV","commandsManager","servicesManager","useSystem","t","useTranslation","displaySetService","hangingProtocolService","services","metadata","setMetadata","useState","setPtDisplaySet","handleMetadataChange","prevState","newState","Object","keys","forEach","key","getMatchingPTDisplaySet","viewportMatchDetails","runCommand","useEffect","getActiveDisplaySets","getMatchDetails","length","displaySetInfo","unsubscribe","subscribe","EVENTS","PROTOCOL_CHANGED","PanelSection","defaultOpen","Header","Content","Label","Input","onChange","e","unit","Button","variant","size","onClick","Error","DicomMetadataStore","updateMetadataForSeries","StudyInstanceUID","SeriesInstanceUID","setDisplaySetMetadataInvalidated","displaySetInstanceUID","setTimeout","displayName","propTypes","PropTypes","measurementService","getMeasurements","isRequired","VALUE_TYPES","ROI_STAT","label","placeHolder","config","dispatch","Select","strategy","onValueChange","payload","SelectTrigger","SelectValue","placeholder","find","option","SelectContent","map","SelectItem","isNaN","Number","ctLower","ctUpper","ptLower","ptUpper","PanelTMTV","configuration","PanelSegmentation","PanelROIThresholdExport","extensionManager","toolbarService","iconName","iconLabel","component","wrappedPanelPetSuv","wrappedPanelTMTV","Toolbox","buttonSectionId","sections","roiThresholdToolbox","title","wrappedROIThresholdToolbox","wrappedROIThresholdExport","toAnnotation","measurement","definition","toMeasurement","csToolsEventDetail","cornerstoneViewportService","annotation","data","annotationUID","console","warn","toolName","referencedImageId","FrameOfReferenceUID","SUPPORTED_TOOLS","includes","SOPInstanceUID","getSOPInstanceAttributes","displaySet","getDisplaySetForSOPInstanceUID","getDisplaySetsForSeries","uid","referenceSeriesUID","referenceStudyUID","cachedStats","measurementServiceMappingsFactory","RectangleROIStartEndThreshold","csToolsAnnotation","matchingCriteria","valueType","ROI_THRESHOLD_MANUAL","CircleROIStartEndThreshold","CORNERSTONE_3D_TOOLS_SOURCE_NAME","CORNERSTONE_3D_TOOLS_SOURCE_VERSION","CSExtensionEnums","getRoiStats","annotations","imageIds","ptVolumeInfo","cache","getVolumeContainingImageId","volume","voxelManager","fn","baseValue","Infinity","number","maxValue","_getStrategyFn","boundsIJK","csTools","voxelValue","annotationUIDs","getAnnotation","datasetToBlob","dcmjs","metadataProvider","classes","MetadataProvider","dataset","adaptersRT","Cornerstone3D","RTSS","generateRTSSFromAnnotations","reportBlob","objectUrl","URL","createObjectURL","window","location","assign","SegmentationRepresentations","Enums","formatPN","utils","ROI_THRESHOLD_MANUAL_TOOL_IDS","commandsModule","viewportGridService","uiNotificationService","toolGroupService","segmentationService","utilityModule","getModuleEntry","getEnabledElement","exports","_getActiveViewportsEnabledElement","activeViewportId","getState","element","cs","_getAnnotationsSelectedByToolNames","toolNames","reduce","allAnnotationUIDs","concat","actions","viewportDetails","displaySetsInfo","getDisplaySetByUID","Modality","getPTMetadata","firstImageId","getDataSources","getImageIdsForDisplaySet","instance","get","RadiopharmaceuticalStartDateTime","createNewLabelmapFromPT","async","withPTViewportId","entries","some","error","currentSegmentations","getSegmentationRepresentations","segmentationId","createLabelmapForDisplaySet","segments","i18n","active","addSegmentationRepresentation","thresholdSegmentationByRectangleROITool","segmentIndex","segmentation","representationData","displaySetMatchDetails","matchDetails","ctDisplaySetMatch","ptDisplaySetMatch","volumeId","segVolumeId","Labelmap","labelmapVolume","getVolume","show","message","getThresholdValues","ptImageIds","ctImageIds","ctVolumeInfo","ptVolume","ctVolume","lower","upper","overwrite","calculateTMTV","segmentations","segmentationIds","stats","setSegmentationGroupStats","exportTMTVReportCSV","tmtv","segReport","total_tlg","additionalReportRows","tlg","toFixed","undefined","unshift","firstReport","csv","column","toLowerCase","startsWith","substring","join","values","row","push","Array","isArray","PatientID","StudyDate","temp","k","blob","Blob","url","a","document","createElement","href","download","filename","click","createAndDownloadTMTVReport","setStartSliceForROIThresholdTool","viewport","focalPoint","getCamera","startCoordinate","invalidated","render","setEndSliceForROIThresholdTool","focalPointToEnd","endCoordinate","createTMTVRTReport","stateManager","getAnnotationManager","frameOfReferenceUID","forAnnotations","ROIAnnotations","getSegmentationCSVReport","getSegmentations","report","subKey","subValue","referencedVolume","OHIF","PatientName","exportRTReportForAnnotations","dicomRTAnnotationExport","setFusionPTColormap","toolGroup","getToolGroup","fusionViewportIds","getViewportIds","getCornerstoneViewport","definitions","commandFn","defaultContext","DEFAULT_STRATEGY","reducer","state","action","activeSegmentation","useSegmentations","useCallback","commandName","commandOptions","useReducer","handleROIThresholding","activeSegmentIndex","cs3dTools","ROIThresholdConfiguration","tmtvExtension","preRegistration","addTool","RectangleROIStartEndThresholdTool","CircleROIStartEndThresholdTool","csTools3DVer1MeasurementSource","getSource","addMapping","init","getToolbarModule","defaultComponent","RectangleROIOptions","getPanelModule","getHangingProtocolModule","getCommandsModule"],"sourceRoot":""}