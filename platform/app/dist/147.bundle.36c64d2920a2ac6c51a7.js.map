{"version":3,"file":"147.bundle.36c64d2920a2ac6c51a7.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/ViewportImageScrollbar.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/utils.ts","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/CustomizableViewportOverlay.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/ViewportOrientationMarkers.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/ViewportImageSliceLoadingIndicator.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/CornerstoneOverlays.tsx","webpack:///../../../extensions/cornerstone/src/components/CinePlayer/CinePlayer.tsx","webpack:///../../../extensions/cornerstone/src/components/CinePlayer/index.ts","webpack:///../../../extensions/cornerstone/src/components/OHIFViewportActionCorners.tsx","webpack:///../../../extensions/cornerstone/src/utils/ActiveViewportBehavior.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/OHIFCornerstoneViewport.tsx","webpack:///../../../extensions/cornerstone/src/utils/presentations/getViewportPresentations.ts"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Enums, VolumeViewport3D, utilities as csUtils } from '@cornerstonejs/core';\r\nimport { ImageScrollbar } from '@ohif/ui-next';\r\n\r\nfunction CornerstoneImageScrollbar({\r\n  viewportData,\r\n  viewportId,\r\n  element,\r\n  imageSliceData,\r\n  setImageSliceData,\r\n  scrollbarHeight,\r\n  servicesManager,\r\n}: withAppTypes<{\r\n  element: HTMLElement;\r\n}>) {\r\n  const { cineService, cornerstoneViewportService } = servicesManager.services;\r\n\r\n  const onImageScrollbarChange = (imageIndex, viewportId) => {\r\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n\r\n    const { isCineEnabled } = cineService.getState();\r\n\r\n    if (isCineEnabled) {\r\n      // on image scrollbar change, stop the CINE if it is playing\r\n      cineService.stopClip(element, { viewportId });\r\n      cineService.setCine({ id: viewportId, isPlaying: false });\r\n    }\r\n\r\n    csUtils.jumpToSlice(viewport.element, {\r\n      imageIndex,\r\n      debounceLoading: true,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!viewportData) {\r\n      return;\r\n    }\r\n\r\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n\r\n    if (!viewport || viewport instanceof VolumeViewport3D) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const imageIndex = viewport.getCurrentImageIdIndex();\r\n      const numberOfSlices = viewport.getNumberOfSlices();\r\n\r\n      setImageSliceData({\r\n        imageIndex: imageIndex,\r\n        numberOfSlices,\r\n      });\r\n    } catch (error) {\r\n      console.warn(error);\r\n    }\r\n  }, [viewportId, viewportData]);\r\n\r\n  useEffect(() => {\r\n    if (!viewportData) {\r\n      return;\r\n    }\r\n    const { viewportType } = viewportData;\r\n    const eventId =\r\n      (viewportType === Enums.ViewportType.STACK && Enums.Events.STACK_NEW_IMAGE) ||\r\n      (viewportType === Enums.ViewportType.ORTHOGRAPHIC && Enums.Events.VOLUME_NEW_IMAGE) ||\r\n      Enums.Events.IMAGE_RENDERED;\r\n\r\n    const updateIndex = event => {\r\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n      if (!viewport || viewport instanceof VolumeViewport3D) {\r\n        return;\r\n      }\r\n      const { imageIndex, newImageIdIndex = imageIndex, imageIdIndex } = event.detail;\r\n      const numberOfSlices = viewport.getNumberOfSlices();\r\n      // find the index of imageId in the imageIds\r\n      setImageSliceData({\r\n        imageIndex: newImageIdIndex ?? imageIdIndex,\r\n        numberOfSlices,\r\n      });\r\n    };\r\n\r\n    element.addEventListener(eventId, updateIndex);\r\n\r\n    return () => {\r\n      element.removeEventListener(eventId, updateIndex);\r\n    };\r\n  }, [viewportData, element]);\r\n\r\n  return (\r\n    <ImageScrollbar\r\n      onChange={evt => onImageScrollbarChange(evt, viewportId)}\r\n      max={imageSliceData.numberOfSlices ? imageSliceData.numberOfSlices - 1 : 0}\r\n      height={scrollbarHeight}\r\n      value={imageSliceData.imageIndex || 0}\r\n    />\r\n  );\r\n}\r\n\r\nCornerstoneImageScrollbar.propTypes = {\r\n  viewportData: PropTypes.object,\r\n  viewportId: PropTypes.string.isRequired,\r\n  element: PropTypes.instanceOf(Element),\r\n  scrollbarHeight: PropTypes.string,\r\n  imageSliceData: PropTypes.object.isRequired,\r\n  setImageSliceData: PropTypes.func.isRequired,\r\n  servicesManager: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default CornerstoneImageScrollbar;\r\n","import moment from 'moment';\r\nimport { metaData } from '@cornerstonejs/core';\r\n\r\n/**\r\n * Checks if value is valid.\r\n *\r\n * @param {number} value\r\n * @returns {boolean} is valid.\r\n */\r\nexport function isValidNumber(value) {\r\n  return typeof value === 'number' && !isNaN(value);\r\n}\r\n\r\n/**\r\n * Formats number precision.\r\n *\r\n * @param {number} number\r\n * @param {number} precision\r\n * @returns {number} formatted number.\r\n */\r\nexport function formatNumberPrecision(number, precision = 0) {\r\n  if (number !== null) {\r\n    return parseFloat(number).toFixed(precision);\r\n  }\r\n}\r\n\r\n/**\r\n * Formats DICOM date.\r\n *\r\n * @param {string} date\r\n * @param {string} strFormat\r\n * @returns {string} formatted date.\r\n */\r\nexport function formatDICOMDate(date, strFormat = 'MMM D, YYYY') {\r\n  return moment(date, 'YYYYMMDD').format(strFormat);\r\n}\r\n\r\n/**\r\n *    DICOM Time is stored as HHmmss.SSS, where:\r\n *      HH 24 hour time:\r\n *        m mm        0..59   Minutes\r\n *        s ss        0..59   Seconds\r\n *        S SS SSS    0..999  Fractional seconds\r\n *\r\n *        Goal: '24:12:12'\r\n *\r\n * @param {*} time\r\n * @param {string} strFormat\r\n * @returns {string} formatted name.\r\n */\r\nexport function formatDICOMTime(time, strFormat = 'HH:mm:ss') {\r\n  return moment(time, 'HH:mm:ss').format(strFormat);\r\n}\r\n\r\n/**\r\n * Gets compression type\r\n *\r\n * @param {number} imageId\r\n * @returns {string} compression type.\r\n */\r\nexport function getCompression(imageId) {\r\n  const generalImageModule = metaData.get('generalImageModule', imageId) || {};\r\n  const { lossyImageCompression, lossyImageCompressionRatio, lossyImageCompressionMethod } =\r\n    generalImageModule;\r\n\r\n  if (lossyImageCompression === '01' && lossyImageCompressionRatio !== '') {\r\n    const compressionMethod = lossyImageCompressionMethod || 'Lossy: ';\r\n    const compressionRatio = formatNumberPrecision(lossyImageCompressionRatio, 2);\r\n    return compressionMethod + compressionRatio + ' : 1';\r\n  }\r\n\r\n  return 'Lossless / Uncompressed';\r\n}\r\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { vec3 } from 'gl-matrix';\r\nimport PropTypes from 'prop-types';\r\nimport { metaData, Enums, utilities, eventTarget } from '@cornerstonejs/core';\r\nimport { Enums as csToolsEnums, UltrasoundPleuraBLineTool } from '@cornerstonejs/tools';\r\nimport type { ImageSliceData } from '@cornerstonejs/core/types';\r\nimport { ViewportOverlay } from '@ohif/ui-next';\r\nimport type { InstanceMetadata } from '@ohif/core/src/types';\r\nimport { formatDICOMDate, formatDICOMTime, formatNumberPrecision } from './utils';\r\nimport { utils } from '@ohif/core';\r\nimport { StackViewportData, VolumeViewportData } from '../../types/CornerstoneCacheService';\r\n\r\nimport './CustomizableViewportOverlay.css';\r\nimport { useViewportRendering } from '../../hooks';\r\n\r\nconst EPSILON = 1e-4;\r\nconst { formatPN } = utils;\r\n\r\ntype ViewportData = StackViewportData | VolumeViewportData;\r\n\r\ninterface OverlayItemProps {\r\n  element: HTMLElement;\r\n  viewportData: ViewportData;\r\n  imageSliceData: ImageSliceData;\r\n  servicesManager: AppTypes.ServicesManager;\r\n  viewportId: string;\r\n  instance: InstanceMetadata;\r\n  customization: any;\r\n  formatters: {\r\n    formatPN: (val) => string;\r\n    formatDate: (val) => string;\r\n    formatTime: (val) => string;\r\n    formatNumberPrecision: (val, number) => string;\r\n  };\r\n\r\n  // calculated values\r\n  voi: {\r\n    windowWidth: number;\r\n    windowCenter: number;\r\n  };\r\n  instanceNumber?: number;\r\n  scale?: number;\r\n}\r\n\r\nconst OverlayItemComponents = {\r\n  'ohif.overlayItem': OverlayItem,\r\n  'ohif.overlayItem.windowLevel': VOIOverlayItem,\r\n  'ohif.overlayItem.zoomLevel': ZoomOverlayItem,\r\n  'ohif.overlayItem.instanceNumber': InstanceNumberOverlayItem,\r\n};\r\n\r\n/**\r\n * Customizable Viewport Overlay\r\n */\r\nfunction CustomizableViewportOverlay({\r\n  element,\r\n  viewportData,\r\n  imageSliceData,\r\n  viewportId,\r\n  servicesManager,\r\n}: {\r\n  element: HTMLElement;\r\n  viewportData: ViewportData;\r\n  imageSliceData: ImageSliceData;\r\n  viewportId: string;\r\n  servicesManager: AppTypes.ServicesManager;\r\n}) {\r\n  const { cornerstoneViewportService, customizationService, toolGroupService, displaySetService } =\r\n    servicesManager.services;\r\n  const [voi, setVOI] = useState({ windowCenter: null, windowWidth: null });\r\n  const [scale, setScale] = useState(1);\r\n  const [annotationState, setAnnotationState] = useState(0);\r\n  const { isViewportBackgroundLight: isLight } = useViewportRendering(viewportId);\r\n  const { imageIndex } = imageSliceData;\r\n\r\n  // Historical usage defined the overlays as separate items due to lack of\r\n  // append functionality.  This code enables the historical usage, but\r\n  // the recommended functionality is to append to the default values in\r\n  // cornerstoneOverlay rather than defining individual items.\r\n  const topLeftCustomization = customizationService.getCustomization('viewportOverlay.topLeft');\r\n  const topRightCustomization = customizationService.getCustomization('viewportOverlay.topRight');\r\n  const bottomLeftCustomization = customizationService.getCustomization(\r\n    'viewportOverlay.bottomLeft'\r\n  );\r\n  const bottomRightCustomization = customizationService.getCustomization(\r\n    'viewportOverlay.bottomRight'\r\n  );\r\n\r\n  const instanceNumber = useMemo(\r\n    () =>\r\n      viewportData\r\n        ? getInstanceNumber(viewportData, viewportId, imageIndex, cornerstoneViewportService)\r\n        : null,\r\n    [viewportData, viewportId, imageIndex, cornerstoneViewportService]\r\n  );\r\n\r\n  const displaySetProps = useMemo(() => {\r\n    const displaySets = getDisplaySets(viewportData, displaySetService);\r\n    if (!displaySets) {\r\n      return null;\r\n    }\r\n    const [displaySet] = displaySets;\r\n    const { instances, instance: referenceInstance } = displaySet;\r\n    return {\r\n      displaySets,\r\n      displaySet,\r\n      instance: instances?.[imageIndex],\r\n      instances,\r\n      referenceInstance,\r\n    };\r\n  }, [viewportData, viewportId, instanceNumber, cornerstoneViewportService]);\r\n\r\n  /**\r\n   * Updating the VOI when the viewport changes its voi\r\n   */\r\n  useEffect(() => {\r\n    const updateVOI = eventDetail => {\r\n      const { range } = eventDetail.detail;\r\n\r\n      if (!range) {\r\n        return;\r\n      }\r\n\r\n      const { lower, upper } = range;\r\n      const { windowWidth, windowCenter } = utilities.windowLevel.toWindowLevel(lower, upper);\r\n\r\n      setVOI({ windowCenter, windowWidth });\r\n    };\r\n\r\n    element.addEventListener(Enums.Events.VOI_MODIFIED, updateVOI);\r\n\r\n    return () => {\r\n      element.removeEventListener(Enums.Events.VOI_MODIFIED, updateVOI);\r\n    };\r\n  }, [viewportId, viewportData, voi, element]);\r\n\r\n  const annotationModified = useCallback(evt => {\r\n    if (evt.detail.annotation.metadata.toolName === UltrasoundPleuraBLineTool.toolName) {\r\n      // Update the annotation state to trigger a re-render\r\n      setAnnotationState(prevState => prevState + 1);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    eventTarget.addEventListener(csToolsEnums.Events.ANNOTATION_MODIFIED, annotationModified);\r\n\r\n    return () => {\r\n      eventTarget.removeEventListener(csToolsEnums.Events.ANNOTATION_MODIFIED, annotationModified);\r\n    };\r\n  }, [annotationModified]);\r\n  /**\r\n   * Updating the scale when the viewport changes its zoom\r\n   */\r\n  useEffect(() => {\r\n    const updateScale = eventDetail => {\r\n      const { previousCamera, camera } = eventDetail.detail;\r\n\r\n      if (\r\n        previousCamera.parallelScale !== camera.parallelScale ||\r\n        previousCamera.scale !== camera.scale\r\n      ) {\r\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n\r\n        if (!viewport) {\r\n          return;\r\n        }\r\n\r\n        const scale = viewport.getZoom();\r\n\r\n        setScale(scale);\r\n      }\r\n    };\r\n\r\n    element.addEventListener(Enums.Events.CAMERA_MODIFIED, updateScale);\r\n\r\n    return () => {\r\n      element.removeEventListener(Enums.Events.CAMERA_MODIFIED, updateScale);\r\n    };\r\n  }, [viewportId, viewportData, cornerstoneViewportService, element]);\r\n\r\n  const _renderOverlayItem = useCallback(\r\n    (item, props) => {\r\n      const overlayItemProps = {\r\n        ...props,\r\n        element,\r\n        viewportData,\r\n        imageSliceData,\r\n        viewportId,\r\n        servicesManager,\r\n        customization: item,\r\n        isLight,\r\n        formatters: {\r\n          formatPN,\r\n          formatDate: formatDICOMDate,\r\n          formatTime: formatDICOMTime,\r\n          formatNumberPrecision,\r\n        },\r\n      };\r\n\r\n      if (!item) {\r\n        return null;\r\n      }\r\n\r\n      const { inheritsFrom } = item;\r\n      const OverlayItemComponent = OverlayItemComponents[inheritsFrom];\r\n\r\n      if (OverlayItemComponent) {\r\n        return <OverlayItemComponent {...overlayItemProps} />;\r\n      } else {\r\n        const renderItem = customizationService.transform(item);\r\n\r\n        if (typeof renderItem.contentF === 'function') {\r\n          return renderItem.contentF(overlayItemProps);\r\n        }\r\n      }\r\n    },\r\n    [\r\n      element,\r\n      viewportData,\r\n      imageSliceData,\r\n      viewportId,\r\n      servicesManager,\r\n      customizationService,\r\n      displaySetProps,\r\n      voi,\r\n      scale,\r\n      instanceNumber,\r\n      annotationState,\r\n    ]\r\n  );\r\n\r\n  const getContent = useCallback(\r\n    (customization, keyPrefix) => {\r\n      const props = {\r\n        ...displaySetProps,\r\n        formatters: { formatDate: formatDICOMDate },\r\n        voi,\r\n        scale,\r\n        instanceNumber,\r\n        viewportId,\r\n        toolGroupService,\r\n        isLight,\r\n      };\r\n\r\n      return (\r\n        <>\r\n          {customization.map((item, index) => (\r\n            <div key={`${keyPrefix}_${index}`}>\r\n              {((!item?.condition || item.condition(props)) && _renderOverlayItem(item, props)) ||\r\n                null}\r\n            </div>\r\n          ))}\r\n        </>\r\n      );\r\n    },\r\n    [_renderOverlayItem]\r\n  );\r\n\r\n  return (\r\n    <ViewportOverlay\r\n      topLeft={getContent(topLeftCustomization, 'topLeftOverlayItem')}\r\n      topRight={getContent(topRightCustomization, 'topRightOverlayItem')}\r\n      bottomLeft={getContent(bottomLeftCustomization, 'bottomLeftOverlayItem')}\r\n      bottomRight={getContent(bottomRightCustomization, 'bottomRightOverlayItem')}\r\n      color={isLight ? 'text-neutral-dark' : 'text-neutral-light'}\r\n      shadowClass={isLight ? 'shadow-light' : 'shadow-dark'}\r\n    />\r\n  );\r\n}\r\n\r\n/**\r\n * Gets an array of display sets for the given viewport, based on the viewport data.\r\n * Returns null if none found.\r\n */\r\nfunction getDisplaySets(viewportData, displaySetService) {\r\n  if (!viewportData?.data?.length) {\r\n    return null;\r\n  }\r\n  const displaySets = viewportData.data\r\n    .map(datum => displaySetService.getDisplaySetByUID(datum.displaySetInstanceUID))\r\n    .filter(it => !!it);\r\n  if (!displaySets.length) {\r\n    return null;\r\n  }\r\n  return displaySets;\r\n}\r\n\r\nconst getInstanceNumber = (viewportData, viewportId, imageIndex, cornerstoneViewportService) => {\r\n  let instanceNumber;\r\n\r\n  switch (viewportData.viewportType) {\r\n    case Enums.ViewportType.STACK:\r\n      instanceNumber = _getInstanceNumberFromStack(viewportData, imageIndex);\r\n      break;\r\n    case Enums.ViewportType.ORTHOGRAPHIC:\r\n      instanceNumber = _getInstanceNumberFromVolume(\r\n        viewportData,\r\n        viewportId,\r\n        cornerstoneViewportService,\r\n        imageIndex\r\n      );\r\n      break;\r\n  }\r\n\r\n  return instanceNumber ?? null;\r\n};\r\n\r\nfunction _getInstanceNumberFromStack(viewportData, imageIndex) {\r\n  const imageIds = viewportData.data[0].imageIds;\r\n  const imageId = imageIds[imageIndex];\r\n\r\n  if (!imageId) {\r\n    return;\r\n  }\r\n\r\n  const generalImageModule = metaData.get('generalImageModule', imageId) || {};\r\n  const { instanceNumber } = generalImageModule;\r\n\r\n  const stackSize = imageIds.length;\r\n\r\n  if (stackSize <= 1) {\r\n    return;\r\n  }\r\n\r\n  return parseInt(instanceNumber);\r\n}\r\n\r\n// Since volume viewports can be in any view direction, they can render\r\n// a reconstructed image which don't have imageIds; therefore, no instance and instanceNumber\r\n// Here we check if viewport is in the acquisition direction and if so, we get the instanceNumber\r\nfunction _getInstanceNumberFromVolume(\r\n  viewportData,\r\n  viewportId,\r\n  cornerstoneViewportService,\r\n  imageIndex\r\n) {\r\n  const volumes = viewportData.data;\r\n\r\n  if (!volumes) {\r\n    return;\r\n  }\r\n\r\n  // Todo: support fusion of acquisition plane which has instanceNumber\r\n  const { volume } = volumes[0];\r\n\r\n  if (!volume) {\r\n    return;\r\n  }\r\n\r\n  const { direction, imageIds } = volume;\r\n\r\n  const cornerstoneViewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n\r\n  if (!cornerstoneViewport) {\r\n    return;\r\n  }\r\n\r\n  const camera = cornerstoneViewport.getCamera();\r\n  const { viewPlaneNormal } = camera;\r\n  // checking if camera is looking at the acquisition plane (defined by the direction on the volume)\r\n\r\n  const scanAxisNormal = direction.slice(6, 9);\r\n\r\n  // check if viewPlaneNormal is parallel to scanAxisNormal\r\n  const cross = vec3.cross(vec3.create(), viewPlaneNormal, scanAxisNormal);\r\n  const isAcquisitionPlane = vec3.length(cross) < EPSILON;\r\n\r\n  if (isAcquisitionPlane) {\r\n    const imageId = imageIds[imageIndex];\r\n\r\n    if (!imageId) {\r\n      return {};\r\n    }\r\n\r\n    const { instanceNumber } = metaData.get('generalImageModule', imageId) || {};\r\n    return parseInt(instanceNumber);\r\n  }\r\n}\r\n\r\nfunction OverlayItem(props) {\r\n  const { instance, customization = {} } = props;\r\n  const { color, attribute, title, label, background } = customization;\r\n  const value = customization.contentF?.(props, customization) ?? instance?.[attribute];\r\n  if (value === undefined || value === null) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div\r\n      className=\"overlay-item flex flex-row\"\r\n      style={{ color, background }}\r\n      title={title}\r\n    >\r\n      {label ? <span className=\"mr-1 shrink-0\">{label}</span> : null}\r\n      <span className=\"ml-0 mr-2 shrink-0\">{value}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Window Level / Center Overlay item\r\n * //\r\n */\r\nfunction VOIOverlayItem({ voi, customization }: OverlayItemProps) {\r\n  const { windowWidth, windowCenter } = voi;\r\n  if (typeof windowCenter !== 'number' || typeof windowWidth !== 'number') {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"overlay-item flex flex-row\"\r\n      style={{ color: customization?.color }}\r\n    >\r\n      <span className=\"mr-0.5 shrink-0 opacity-[0.70]\">W:</span>\r\n      <span className=\"mr-2.5 shrink-0\">{windowWidth.toFixed(0)}</span>\r\n      <span className=\"mr-0.5 shrink-0 opacity-[0.70]\">L:</span>\r\n      <span className=\"shrink-0\">{windowCenter.toFixed(0)}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Zoom Level Overlay item\r\n */\r\nfunction ZoomOverlayItem({ scale, customization }: OverlayItemProps) {\r\n  return (\r\n    <div\r\n      className=\"overlay-item flex flex-row\"\r\n      style={{ color: (customization && customization.color) || undefined }}\r\n    >\r\n      <span className=\"mr-0.5 shrink-0 opacity-[0.70]\">Zoom:</span>\r\n      <span>{scale.toFixed(2)}x</span>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Instance Number Overlay Item\r\n */\r\nfunction InstanceNumberOverlayItem({\r\n  instanceNumber,\r\n  imageSliceData,\r\n  customization,\r\n}: OverlayItemProps) {\r\n  const { imageIndex, numberOfSlices } = imageSliceData;\r\n\r\n  return (\r\n    <div\r\n      className=\"overlay-item flex flex-row\"\r\n      style={{ color: (customization && customization.color) || undefined }}\r\n    >\r\n      <span>\r\n        {instanceNumber !== undefined && instanceNumber !== null ? (\r\n          <>\r\n            <span className=\"mr-0.5 shrink-0 opacity-[0.70]\">I:</span>\r\n            <span>{`${instanceNumber} (${imageIndex + 1}/${numberOfSlices})`}</span>\r\n          </>\r\n        ) : (\r\n          `${imageIndex + 1}/${numberOfSlices}`\r\n        )}\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n\r\nCustomizableViewportOverlay.propTypes = {\r\n  viewportData: PropTypes.object,\r\n  imageIndex: PropTypes.number,\r\n  viewportId: PropTypes.string,\r\n};\r\n\r\nexport default CustomizableViewportOverlay;\r\n\r\nexport { CustomizableViewportOverlay };\r\n","import React, { useEffect, useState, useMemo } from 'react';\r\nimport classNames from 'classnames';\r\nimport { metaData, Enums, getEnabledElement } from '@cornerstonejs/core';\r\nimport { utilities } from '@cornerstonejs/tools';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nimport './ViewportOrientationMarkers.css';\r\nimport { useViewportRendering } from '../../hooks';\r\nconst { getOrientationStringLPS, invertOrientationStringLPS } = utilities.orientation;\r\n\r\nfunction ViewportOrientationMarkers({\r\n  element,\r\n  viewportData,\r\n  imageSliceData,\r\n  viewportId,\r\n  servicesManager,\r\n  orientationMarkers = ['top', 'left'],\r\n}: withAppTypes) {\r\n  const [cameraModifiedTime, setCameraModifiedTime] = useState(0);\r\n  const { isViewportBackgroundLight: isLight } = useViewportRendering(viewportId);\r\n  const { cornerstoneViewportService } = servicesManager.services;\r\n\r\n  useEffect(() => {\r\n    const cameraModifiedListener = () => setCameraModifiedTime(Date.now());\r\n    element.addEventListener(Enums.Events.CAMERA_MODIFIED, cameraModifiedListener);\r\n\r\n    return () => {\r\n      element.removeEventListener(Enums.Events.CAMERA_MODIFIED, cameraModifiedListener);\r\n    };\r\n  }, [element]);\r\n\r\n  const markers = useMemo(() => {\r\n    if (!viewportData || cameraModifiedTime === 0) {\r\n      return '';\r\n    }\r\n\r\n    if (!element || !getEnabledElement(element)) {\r\n      console.log(`ViewportOrientationMarkers :: Viewport element not enabled (${viewportId})`);\r\n      return '';\r\n    }\r\n\r\n    const ohifViewport = cornerstoneViewportService.getViewportInfo(viewportId);\r\n\r\n    if (!ohifViewport) {\r\n      console.log(`ViewportOrientationMarkers :: No viewport (${viewportId})`);\r\n      return '';\r\n    }\r\n\r\n    if (viewportData.viewportType === 'stack') {\r\n      const imageIndex = imageSliceData.imageIndex;\r\n      const imageId = viewportData.data[0].imageIds?.[imageIndex];\r\n\r\n      // Workaround for below TODO stub\r\n      if (!imageId) {\r\n        return false;\r\n      }\r\n\r\n      const { isDefaultValueSetForRowCosine, isDefaultValueSetForColumnCosine } =\r\n        metaData.get('imagePlaneModule', imageId) || {};\r\n\r\n      if (isDefaultValueSetForColumnCosine || isDefaultValueSetForRowCosine) {\r\n        return '';\r\n      }\r\n    }\r\n\r\n    const { viewport } = getEnabledElement(element);\r\n    const p00 = viewport.canvasToWorld([0, 0]);\r\n    const p10 = viewport.canvasToWorld([1, 0]);\r\n    const p01 = viewport.canvasToWorld([0, 1]);\r\n    const rowCosines = vec3.sub(vec3.create(), p10, p00);\r\n    const columnCosines = vec3.sub(vec3.create(), p01, p00);\r\n\r\n    vec3.normalize(rowCosines, rowCosines);\r\n    vec3.normalize(columnCosines, columnCosines);\r\n\r\n    const markers = _getOrientationMarkers(rowCosines, columnCosines);\r\n\r\n    return orientationMarkers.map((m, index) => (\r\n      <div\r\n        className={classNames(\r\n          'overlay-text',\r\n          `${m}-mid orientation-marker`,\r\n          isLight ? 'text-neutral-dark/70' : 'text-neutral-light/70',\r\n          isLight ? 'shadow-light' : 'shadow-dark',\r\n          'text-base',\r\n          'leading-5'\r\n        )}\r\n        key={`${m}-mid orientation-marker`}\r\n      >\r\n        <div className=\"orientation-marker-value\">{markers[m]}</div>\r\n      </div>\r\n    ));\r\n  }, [viewportData, imageSliceData, cameraModifiedTime, orientationMarkers, element, isLight]);\r\n\r\n  return <div className=\"ViewportOrientationMarkers select-none\">{markers}</div>;\r\n}\r\n\r\n/**\r\n *\r\n * Computes the orientation labels on a Cornerstone-enabled Viewport element\r\n * when the viewport settings change (e.g. when a horizontal flip or a rotation occurs)\r\n *\r\n * @param {*} rowCosines\r\n * @param {*} columnCosines\r\n */\r\nfunction _getOrientationMarkers(rowCosines, columnCosines) {\r\n  const rowString = getOrientationStringLPS(rowCosines);\r\n  const columnString = getOrientationStringLPS(columnCosines);\r\n  const oppositeRowString = invertOrientationStringLPS(rowString);\r\n  const oppositeColumnString = invertOrientationStringLPS(columnString);\r\n\r\n  const markers = {\r\n    top: oppositeColumnString,\r\n    left: oppositeRowString,\r\n    right: rowString,\r\n    bottom: columnString,\r\n  };\r\n\r\n  return markers;\r\n}\r\n\r\nexport default ViewportOrientationMarkers;\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Enums } from '@cornerstonejs/core';\r\n\r\nfunction ViewportImageSliceLoadingIndicator({ viewportData, element }) {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(false);\r\n\r\n  const loadIndicatorRef = useRef(null);\r\n  const imageIdToBeLoaded = useRef(null);\r\n\r\n  const setLoadingState = evt => {\r\n    clearTimeout(loadIndicatorRef.current);\r\n\r\n    loadIndicatorRef.current = setTimeout(() => {\r\n      setLoading(true);\r\n    }, 50);\r\n  };\r\n\r\n  const setFinishLoadingState = evt => {\r\n    clearTimeout(loadIndicatorRef.current);\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  const setErrorState = evt => {\r\n    clearTimeout(loadIndicatorRef.current);\r\n\r\n    if (imageIdToBeLoaded.current === evt.detail.imageId) {\r\n      setError(evt.detail.error);\r\n      imageIdToBeLoaded.current = null;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    element.addEventListener(Enums.Events.STACK_VIEWPORT_SCROLL, setLoadingState);\r\n    element.addEventListener(Enums.Events.IMAGE_LOAD_ERROR, setErrorState);\r\n    element.addEventListener(Enums.Events.STACK_NEW_IMAGE, setFinishLoadingState);\r\n\r\n    return () => {\r\n      element.removeEventListener(Enums.Events.STACK_VIEWPORT_SCROLL, setLoadingState);\r\n\r\n      element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, setFinishLoadingState);\r\n\r\n      element.removeEventListener(Enums.Events.IMAGE_LOAD_ERROR, setErrorState);\r\n    };\r\n  }, [element, viewportData]);\r\n\r\n  if (error) {\r\n    return (\r\n      <>\r\n        <div className=\"absolute top-0 left-0 h-full w-full bg-[rgb(var(--background))] opacity-50\">\r\n          <div className=\"transparent flex h-full w-full items-center justify-center\">\r\n            <p className=\"text-primary-light text-xl font-light\">\r\n              <h4>Error Loading Image</h4>\r\n              <p>An error has occurred.</p>\r\n              <p>{error}</p>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      // IMPORTANT: we need to use the pointer-events-none class to prevent the loading indicator from\r\n      // interacting with the mouse, since scrolling should propagate to the viewport underneath\r\n      <div className=\"pointer-events-none absolute top-0 left-0 h-full w-full bg-[rgb(var(--background))] opacity-50\">\r\n        <div className=\"transparent flex h-full w-full items-center justify-center\">\r\n          <p className=\"text-primary-light text-xl font-light\">Loading...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nViewportImageSliceLoadingIndicator.propTypes = {\r\n  error: PropTypes.object,\r\n  element: PropTypes.object,\r\n};\r\n\r\nexport default ViewportImageSliceLoadingIndicator;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport ViewportImageScrollbar from './ViewportImageScrollbar';\r\nimport CustomizableViewportOverlay from './CustomizableViewportOverlay';\r\nimport ViewportOrientationMarkers from './ViewportOrientationMarkers';\r\nimport ViewportImageSliceLoadingIndicator from './ViewportImageSliceLoadingIndicator';\r\n\r\nfunction CornerstoneOverlays(props: withAppTypes) {\r\n  const { viewportId, element, scrollbarHeight, servicesManager } = props;\r\n  const { cornerstoneViewportService } = servicesManager.services;\r\n  const [imageSliceData, setImageSliceData] = useState({\r\n    imageIndex: 0,\r\n    numberOfSlices: 0,\r\n  });\r\n  const [viewportData, setViewportData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const { unsubscribe } = cornerstoneViewportService.subscribe(\r\n      cornerstoneViewportService.EVENTS.VIEWPORT_DATA_CHANGED,\r\n      props => {\r\n        if (props.viewportId !== viewportId) {\r\n          return;\r\n        }\r\n\r\n        setViewportData(props.viewportData);\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [viewportId]);\r\n\r\n  if (!element) {\r\n    return null;\r\n  }\r\n\r\n  if (viewportData) {\r\n    const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\r\n\r\n    if (viewportInfo?.viewportOptions?.customViewportProps?.hideOverlays) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"noselect\">\r\n      <ViewportImageScrollbar\r\n        viewportId={viewportId}\r\n        viewportData={viewportData}\r\n        element={element}\r\n        imageSliceData={imageSliceData}\r\n        setImageSliceData={setImageSliceData}\r\n        scrollbarHeight={scrollbarHeight}\r\n        servicesManager={servicesManager}\r\n      />\r\n\r\n      <CustomizableViewportOverlay\r\n        imageSliceData={imageSliceData}\r\n        viewportData={viewportData}\r\n        viewportId={viewportId}\r\n        servicesManager={servicesManager}\r\n        element={element}\r\n      />\r\n\r\n      <ViewportImageSliceLoadingIndicator\r\n        viewportData={viewportData}\r\n        element={element}\r\n      />\r\n\r\n      <ViewportOrientationMarkers\r\n        imageSliceData={imageSliceData}\r\n        element={element}\r\n        viewportData={viewportData}\r\n        servicesManager={servicesManager}\r\n        viewportId={viewportId}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CornerstoneOverlays;\r\n","import React, { useCallback, useEffect, useState, useRef } from 'react';\r\nimport { useCine } from '@ohif/ui-next';\r\nimport { Enums, eventTarget, cache } from '@cornerstonejs/core';\r\nimport { useAppConfig } from '@state';\r\n\r\nfunction WrappedCinePlayer({\r\n  enabledVPElement,\r\n  viewportId,\r\n  servicesManager,\r\n}: withAppTypes<{\r\n  enabledVPElement: HTMLElement;\r\n  viewportId: string;\r\n}>) {\r\n  const { customizationService, displaySetService, viewportGridService } = servicesManager.services;\r\n  const [{ isCineEnabled, cines }, cineService] = useCine();\r\n  const [newStackFrameRate, setNewStackFrameRate] = useState(24);\r\n  const [dynamicInfo, setDynamicInfo] = useState(null);\r\n  const [appConfig] = useAppConfig();\r\n  const isMountedRef = useRef(null);\r\n\r\n  const cineHandler = () => {\r\n    if (!cines?.[viewportId] || !enabledVPElement) {\r\n      return;\r\n    }\r\n\r\n    const { isPlaying = false, frameRate = 24 } = cines[viewportId];\r\n    const validFrameRate = Math.max(frameRate, 1);\r\n\r\n    return isPlaying\r\n      ? cineService.playClip(enabledVPElement, { framesPerSecond: validFrameRate, viewportId })\r\n      : cineService.stopClip(enabledVPElement);\r\n  };\r\n\r\n  const newDisplaySetHandler = useCallback(() => {\r\n    if (!enabledVPElement || !isCineEnabled) {\r\n      return;\r\n    }\r\n\r\n    const { viewports } = viewportGridService.getState();\r\n    const { displaySetInstanceUIDs } = viewports.get(viewportId);\r\n    let frameRate = 24;\r\n    let isPlaying = cines[viewportId]?.isPlaying || false;\r\n    displaySetInstanceUIDs.forEach(displaySetInstanceUID => {\r\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n\r\n      if (displaySet.FrameRate) {\r\n        // displaySet.FrameRate corresponds to DICOM tag (0018,1063) which is defined as the the frame time in milliseconds\r\n        // So a bit of math to get the actual frame rate.\r\n        frameRate = Math.round(1000 / displaySet.FrameRate);\r\n        isPlaying ||= !!appConfig.autoPlayCine;\r\n      }\r\n\r\n      // check if the displaySet is dynamic and set the dynamic info\r\n      if (displaySet.isDynamicVolume) {\r\n        const { dynamicVolumeInfo } = displaySet;\r\n        const numDimensionGroups = dynamicVolumeInfo.timePoints.length;\r\n        const label = dynamicVolumeInfo.splittingTag;\r\n        const dimensionGroupNumber = dynamicVolumeInfo.dimensionGroupNumber || 1;\r\n        setDynamicInfo({\r\n          volumeId: displaySet.displaySetInstanceUID,\r\n          dimensionGroupNumber,\r\n          numDimensionGroups,\r\n          label,\r\n        });\r\n      } else {\r\n        setDynamicInfo(null);\r\n      }\r\n    });\r\n\r\n    if (isPlaying) {\r\n      cineService.setIsCineEnabled(isPlaying);\r\n    }\r\n    cineService.setCine({ id: viewportId, isPlaying, frameRate });\r\n    setNewStackFrameRate(frameRate);\r\n  }, [displaySetService, viewportId, viewportGridService, cines, isCineEnabled, enabledVPElement]);\r\n\r\n  useEffect(() => {\r\n    isMountedRef.current = true;\r\n\r\n    newDisplaySetHandler();\r\n\r\n    return () => {\r\n      isMountedRef.current = false;\r\n    };\r\n  }, [isCineEnabled, newDisplaySetHandler]);\r\n\r\n  useEffect(() => {\r\n    if (!isCineEnabled) {\r\n      return;\r\n    }\r\n\r\n    cineHandler();\r\n  }, [isCineEnabled, cineHandler, enabledVPElement]);\r\n\r\n  /**\r\n   * Use effect for handling new display set\r\n   */\r\n  useEffect(() => {\r\n    if (!enabledVPElement) {\r\n      return;\r\n    }\r\n\r\n    enabledVPElement.addEventListener(Enums.Events.VIEWPORT_NEW_IMAGE_SET, newDisplaySetHandler);\r\n    // this doesn't makes sense that we are listening to this event on viewport element\r\n    enabledVPElement.addEventListener(\r\n      Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\r\n      newDisplaySetHandler\r\n    );\r\n\r\n    return () => {\r\n      cineService.setCine({ id: viewportId, isPlaying: false });\r\n\r\n      enabledVPElement.removeEventListener(\r\n        Enums.Events.VIEWPORT_NEW_IMAGE_SET,\r\n        newDisplaySetHandler\r\n      );\r\n      enabledVPElement.removeEventListener(\r\n        Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\r\n        newDisplaySetHandler\r\n      );\r\n    };\r\n  }, [enabledVPElement, newDisplaySetHandler, viewportId]);\r\n\r\n  useEffect(() => {\r\n    if (!cines || !cines[viewportId] || !enabledVPElement || !isMountedRef.current) {\r\n      return;\r\n    }\r\n\r\n    cineHandler();\r\n\r\n    return () => {\r\n      cineService.stopClip(enabledVPElement, { viewportId });\r\n    };\r\n  }, [cines, viewportId, cineService, enabledVPElement, cineHandler]);\r\n\r\n  if (!isCineEnabled) {\r\n    return null;\r\n  }\r\n\r\n  const cine = cines[viewportId];\r\n  const isPlaying = cine?.isPlaying || false;\r\n\r\n  return (\r\n    <RenderCinePlayer\r\n      viewportId={viewportId}\r\n      cineService={cineService}\r\n      newStackFrameRate={newStackFrameRate}\r\n      isPlaying={isPlaying}\r\n      dynamicInfo={dynamicInfo}\r\n      customizationService={customizationService}\r\n    />\r\n  );\r\n}\r\n\r\nfunction RenderCinePlayer({\r\n  viewportId,\r\n  cineService,\r\n  newStackFrameRate,\r\n  isPlaying,\r\n  dynamicInfo: dynamicInfoProp,\r\n  customizationService,\r\n}) {\r\n  const CinePlayerComponent = customizationService.getCustomization('cinePlayer');\r\n\r\n  const [dynamicInfo, setDynamicInfo] = useState(dynamicInfoProp);\r\n\r\n  useEffect(() => {\r\n    setDynamicInfo(dynamicInfoProp);\r\n  }, [dynamicInfoProp]);\r\n\r\n  /**\r\n   * Use effect for handling 4D time index changed\r\n   */\r\n  useEffect(() => {\r\n    if (!dynamicInfo) {\r\n      return;\r\n    }\r\n\r\n    const handleDimensionGroupChange = evt => {\r\n      const { volumeId, dimensionGroupNumber, numDimensionGroups, splittingTag } = evt.detail;\r\n      setDynamicInfo({ volumeId, dimensionGroupNumber, numDimensionGroups, label: splittingTag });\r\n    };\r\n\r\n    eventTarget.addEventListener(\r\n      Enums.Events.DYNAMIC_VOLUME_DIMENSION_GROUP_CHANGED,\r\n      handleDimensionGroupChange\r\n    );\r\n\r\n    return () => {\r\n      eventTarget.removeEventListener(\r\n        Enums.Events.DYNAMIC_VOLUME_DIMENSION_GROUP_CHANGED,\r\n        handleDimensionGroupChange\r\n      );\r\n    };\r\n  }, [dynamicInfo]);\r\n\r\n  useEffect(() => {\r\n    if (!dynamicInfo) {\r\n      return;\r\n    }\r\n\r\n    const { volumeId, dimensionGroupNumber, numDimensionGroups, splittingTag } = dynamicInfo || {};\r\n    const volume = cache.getVolume(volumeId, true);\r\n    volume.dimensionGroupNumber = dimensionGroupNumber;\r\n\r\n    setDynamicInfo({ volumeId, dimensionGroupNumber, numDimensionGroups, label: splittingTag });\r\n  }, []);\r\n\r\n  const updateDynamicInfo = useCallback(props => {\r\n    const { volumeId, dimensionGroupNumber } = props;\r\n    const volume = cache.getVolume(volumeId, true);\r\n    volume.dimensionGroupNumber = dimensionGroupNumber;\r\n  }, []);\r\n\r\n  return (\r\n    <CinePlayerComponent\r\n      className=\"absolute left-1/2 bottom-3 -translate-x-1/2\"\r\n      frameRate={newStackFrameRate}\r\n      isPlaying={isPlaying}\r\n      onClose={() => {\r\n        // also stop the clip\r\n        cineService.setCine({\r\n          id: viewportId,\r\n          isPlaying: false,\r\n        });\r\n        cineService.setIsCineEnabled(false);\r\n        cineService.setViewportCineClosed(viewportId);\r\n      }}\r\n      onPlayPauseChange={isPlaying => {\r\n        cineService.setCine({\r\n          id: viewportId,\r\n          isPlaying,\r\n        });\r\n      }}\r\n      onFrameRateChange={frameRate =>\r\n        cineService.setCine({\r\n          id: viewportId,\r\n          frameRate,\r\n        })\r\n      }\r\n      dynamicInfo={dynamicInfo}\r\n      updateDynamicInfo={updateDynamicInfo}\r\n    />\r\n  );\r\n}\r\n\r\nexport default WrappedCinePlayer;","import CinePlayer from './CinePlayer';\r\n\r\nexport default CinePlayer;\r\n","import React, { memo } from 'react';\r\nimport { ViewportActionCorners, IconPresentationProvider, ToolButton } from '@ohif/ui-next';\r\nimport { Toolbar } from '@ohif/extension-default/src/Toolbar/Toolbar';\r\nimport { ButtonLocation } from '@ohif/core/src/services/ToolBarService/ToolbarService';\r\nimport { useViewportHover } from '../hooks';\r\n\r\nexport type OHIFViewportActionCornersProps = {\r\n  viewportId: string;\r\n};\r\n\r\nfunction OHIFViewportActionCornersComponent({ viewportId }: OHIFViewportActionCornersProps) {\r\n  // Use the viewport hover hook to track if viewport is hovered or active\r\n  const { isHovered, isActive } = useViewportHover(viewportId);\r\n\r\n  const shouldShowCorners = isHovered || isActive;\r\n\r\n  if (!shouldShowCorners) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <IconPresentationProvider\r\n      size=\"medium\"\r\n      IconContainer={ToolButton}\r\n      containerProps={{\r\n        size: 'tiny',\r\n        className: 'font-normal text-primary hover:bg-primary/25',\r\n      }}\r\n    >\r\n      <ViewportActionCorners.Container>\r\n        <ViewportActionCorners.TopLeft>\r\n          <Toolbar\r\n            buttonSection=\"viewportActionMenu.topLeft\"\r\n            viewportId={viewportId}\r\n            location={ButtonLocation.TopLeft}\r\n          />\r\n        </ViewportActionCorners.TopLeft>\r\n        <ViewportActionCorners.TopMiddle>\r\n          <Toolbar\r\n            buttonSection=\"viewportActionMenu.topMiddle\"\r\n            viewportId={viewportId}\r\n            location={ButtonLocation.TopMiddle}\r\n          />\r\n        </ViewportActionCorners.TopMiddle>\r\n        <ViewportActionCorners.TopRight>\r\n          <Toolbar\r\n            buttonSection=\"viewportActionMenu.topRight\"\r\n            viewportId={viewportId}\r\n            location={ButtonLocation.TopRight}\r\n          />\r\n        </ViewportActionCorners.TopRight>\r\n        <ViewportActionCorners.LeftMiddle>\r\n          <Toolbar\r\n            buttonSection=\"viewportActionMenu.leftMiddle\"\r\n            viewportId={viewportId}\r\n            location={ButtonLocation.LeftMiddle}\r\n          />\r\n        </ViewportActionCorners.LeftMiddle>\r\n        <ViewportActionCorners.RightMiddle>\r\n          <Toolbar\r\n            buttonSection=\"viewportActionMenu.rightMiddle\"\r\n            viewportId={viewportId}\r\n            location={ButtonLocation.RightMiddle}\r\n          />\r\n        </ViewportActionCorners.RightMiddle>\r\n        <ViewportActionCorners.BottomLeft>\r\n          <Toolbar\r\n            buttonSection=\"viewportActionMenu.bottomLeft\"\r\n            viewportId={viewportId}\r\n            location={ButtonLocation.BottomLeft}\r\n          />\r\n        </ViewportActionCorners.BottomLeft>\r\n        <ViewportActionCorners.BottomMiddle>\r\n          <Toolbar\r\n            buttonSection=\"viewportActionMenu.bottomMiddle\"\r\n            viewportId={viewportId}\r\n            location={ButtonLocation.BottomMiddle}\r\n          />\r\n        </ViewportActionCorners.BottomMiddle>\r\n        <ViewportActionCorners.BottomRight>\r\n          <Toolbar\r\n            buttonSection=\"viewportActionMenu.bottomRight\"\r\n            viewportId={viewportId}\r\n            location={ButtonLocation.BottomRight}\r\n          />\r\n        </ViewportActionCorners.BottomRight>\r\n      </ViewportActionCorners.Container>\r\n    </IconPresentationProvider>\r\n  );\r\n}\r\n\r\nconst OHIFViewportActionCorners = memo(OHIFViewportActionCornersComponent);\r\n\r\nexport default OHIFViewportActionCorners;\r\n","import { useEffect, useState, memo, useCallback } from 'react';\r\n\r\nconst ActiveViewportBehavior = memo(\r\n  ({ servicesManager, viewportId }: withAppTypes<{ viewportId: string }>) => {\r\n    const {\r\n      displaySetService,\r\n      cineService,\r\n      viewportGridService,\r\n      customizationService,\r\n      cornerstoneViewportService,\r\n    } = servicesManager.services;\r\n\r\n    const [activeViewportId, setActiveViewportId] = useState(viewportId);\r\n\r\n    const handleCineEnable = useCallback(() => {\r\n      if (cineService.isViewportCineClosed(activeViewportId)) {\r\n        return;\r\n      }\r\n\r\n      const displaySetInstanceUIDs =\r\n        viewportGridService.getDisplaySetsUIDsForViewport(activeViewportId);\r\n\r\n      if (!displaySetInstanceUIDs) {\r\n        return;\r\n      }\r\n\r\n      const displaySets = displaySetInstanceUIDs.map(uid =>\r\n        displaySetService.getDisplaySetByUID(uid)\r\n      );\r\n\r\n      if (!displaySets.length) {\r\n        return;\r\n      }\r\n\r\n      const modalities = displaySets.map(displaySet => displaySet?.Modality);\r\n      const isDynamicVolume = displaySets.some(displaySet => displaySet?.isDynamicVolume);\r\n\r\n      const sourceModalities = customizationService.getCustomization('autoCineModalities');\r\n\r\n      const requiresCine = modalities.some(modality => sourceModalities.includes(modality));\r\n\r\n      if ((requiresCine || isDynamicVolume) && !cineService.getState().isCineEnabled) {\r\n        cineService.setIsCineEnabled(true);\r\n      }\r\n    }, [\r\n      activeViewportId,\r\n      cineService,\r\n      viewportGridService,\r\n      displaySetService,\r\n      customizationService,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n      const subscription = viewportGridService.subscribe(\r\n        viewportGridService.EVENTS.ACTIVE_VIEWPORT_ID_CHANGED,\r\n        ({ viewportId }) => setActiveViewportId(viewportId)\r\n      );\r\n\r\n      return () => subscription.unsubscribe();\r\n    }, [viewportId, viewportGridService]);\r\n\r\n    useEffect(() => {\r\n      const subscription = cornerstoneViewportService.subscribe(\r\n        cornerstoneViewportService.EVENTS.VIEWPORT_DATA_CHANGED,\r\n        () => {\r\n          const activeViewportId = viewportGridService.getActiveViewportId();\r\n          setActiveViewportId(activeViewportId);\r\n          handleCineEnable();\r\n        }\r\n      );\r\n\r\n      return () => subscription.unsubscribe();\r\n    }, [viewportId, cornerstoneViewportService, viewportGridService, handleCineEnable]);\r\n\r\n    useEffect(() => {\r\n      handleCineEnable();\r\n    }, [handleCineEnable]);\r\n\r\n    return null;\r\n  },\r\n  arePropsEqual\r\n);\r\n\r\nActiveViewportBehavior.displayName = 'ActiveViewportBehavior';\r\n\r\nfunction arePropsEqual(prevProps, nextProps) {\r\n  return (\r\n    prevProps.viewportId === nextProps.viewportId &&\r\n    prevProps.servicesManager === nextProps.servicesManager\r\n  );\r\n}\r\n\r\nexport default ActiveViewportBehavior;\r\n","import React, { useEffect, useRef, useCallback, useState } from 'react';\r\nimport * as cs3DTools from '@cornerstonejs/tools';\r\nimport { Enums, eventTarget, getEnabledElement } from '@cornerstonejs/core';\r\nimport { MeasurementService, useViewportRef } from '@ohif/core';\r\nimport { useViewportDialog } from '@ohif/ui-next';\r\nimport type { Types as csTypes } from '@cornerstonejs/core';\r\n\r\nimport { setEnabledElement } from '../state';\r\n\r\nimport './OHIFCornerstoneViewport.css';\r\nimport CornerstoneOverlays from './Overlays/CornerstoneOverlays';\r\nimport CinePlayer from '../components/CinePlayer';\r\nimport type { Types } from '@ohif/core';\r\n\r\nimport OHIFViewportActionCorners from '../components/OHIFViewportActionCorners';\r\nimport { getViewportPresentations } from '../utils/presentations/getViewportPresentations';\r\nimport { useSynchronizersStore } from '../stores/useSynchronizersStore';\r\nimport ActiveViewportBehavior from '../utils/ActiveViewportBehavior';\r\nimport { WITH_NAVIGATION } from '../services/ViewportService/CornerstoneViewportService';\r\n\r\nconst STACK = 'stack';\r\n\r\n// Cache for viewport dimensions, persists across component remounts\r\nconst viewportDimensions = new Map<string, { width: number; height: number }>();\r\n\r\n// Todo: This should be done with expose of internal API similar to react-vtkjs-viewport\r\n// Then we don't need to worry about the re-renders if the props change.\r\nconst OHIFCornerstoneViewport = React.memo(\r\n  (\r\n    props: withAppTypes<{\r\n      viewportId: string;\r\n      displaySets: AppTypes.DisplaySet[];\r\n      viewportOptions: AppTypes.ViewportGrid.GridViewportOptions;\r\n      initialImageIndex: number;\r\n    }>\r\n  ) => {\r\n    const {\r\n      displaySets,\r\n      dataSource,\r\n      viewportOptions,\r\n      displaySetOptions,\r\n      servicesManager,\r\n      onElementEnabled,\r\n      // eslint-disable-next-line react/prop-types\r\n      onElementDisabled,\r\n      isJumpToMeasurementDisabled = false,\r\n      // Note: you SHOULD NOT use the initialImageIdOrIndex for manipulation\r\n      // of the imageData in the OHIFCornerstoneViewport. This prop is used\r\n      // to set the initial state of the viewport's first image to render\r\n      // eslint-disable-next-line react/prop-types\r\n      initialImageIndex,\r\n      // if the viewport is part of a hanging protocol layout\r\n      // we should not really rely on the old synchronizers and\r\n      // you see below we only rehydrate the synchronizers if the viewport\r\n      // is not part of the hanging protocol layout. HPs should\r\n      // define their own synchronizers. Since the synchronizers are\r\n      // viewportId dependent and\r\n      // eslint-disable-next-line react/prop-types\r\n      isHangingProtocolLayout,\r\n    } = props;\r\n    const viewportId = viewportOptions.viewportId;\r\n\r\n    if (!viewportId) {\r\n      throw new Error('Viewport ID is required');\r\n    }\r\n\r\n    // Make sure displaySetOptions has one object per displaySet\r\n    while (displaySetOptions.length < displaySets.length) {\r\n      displaySetOptions.push({});\r\n    }\r\n\r\n    // Since we only have support for dynamic data in volume viewports, we should\r\n    // handle this case here and set the viewportType to volume if any of the\r\n    // displaySets are dynamic volumes\r\n    viewportOptions.viewportType = displaySets.some(\r\n      ds => ds.isDynamicVolume && ds.isReconstructable\r\n    )\r\n      ? 'volume'\r\n      : viewportOptions.viewportType;\r\n\r\n    const [scrollbarHeight, setScrollbarHeight] = useState('100px');\r\n    const [enabledVPElement, setEnabledVPElement] = useState(null);\r\n    const elementRef = useRef() as React.MutableRefObject<HTMLDivElement>;\r\n    const viewportRef = useViewportRef(viewportId);\r\n\r\n    const {\r\n      displaySetService,\r\n      toolbarService,\r\n      toolGroupService,\r\n      syncGroupService,\r\n      cornerstoneViewportService,\r\n      segmentationService,\r\n      cornerstoneCacheService,\r\n      customizationService,\r\n      measurementService,\r\n    } = servicesManager.services;\r\n\r\n    const [viewportDialogState] = useViewportDialog();\r\n    // useCallback for scroll bar height calculation\r\n    const setImageScrollBarHeight = useCallback(() => {\r\n      const scrollbarHeight = `${elementRef.current.clientHeight - 10}px`;\r\n      setScrollbarHeight(scrollbarHeight);\r\n    }, [elementRef]);\r\n\r\n    // useCallback for onResize\r\n    const onResize = useCallback(\r\n      (entries: ResizeObserverEntry[]) => {\r\n        if (elementRef.current && entries?.length) {\r\n          const entry = entries[0];\r\n          const { width, height } = entry.contentRect;\r\n\r\n          const prevDimensions = viewportDimensions.get(viewportId) || { width: 0, height: 0 };\r\n\r\n          // Check if dimensions actually changed and then only resize if they have changed\r\n          const hasDimensionsChanged =\r\n            prevDimensions.width !== width || prevDimensions.height !== height;\r\n\r\n          if (width > 0 && height > 0 && hasDimensionsChanged) {\r\n            viewportDimensions.set(viewportId, { width, height });\r\n            // Perform resize operations\r\n            cornerstoneViewportService.resize();\r\n            setImageScrollBarHeight();\r\n          }\r\n        }\r\n      },\r\n      [viewportId, elementRef, cornerstoneViewportService, setImageScrollBarHeight]\r\n    );\r\n\r\n    useEffect(() => {\r\n      const element = elementRef.current;\r\n      if (!element) {\r\n        return;\r\n      }\r\n\r\n      const resizeObserver = new ResizeObserver(onResize);\r\n      resizeObserver.observe(element);\r\n\r\n      // Cleanup function\r\n      return () => {\r\n        resizeObserver.unobserve(element);\r\n        resizeObserver.disconnect();\r\n      };\r\n    }, [onResize]);\r\n\r\n    const cleanUpServices = useCallback(\r\n      viewportInfo => {\r\n        const renderingEngineId = viewportInfo.getRenderingEngineId();\r\n        const syncGroups = viewportInfo.getSyncGroups();\r\n\r\n        toolGroupService.removeViewportFromToolGroup(viewportId, renderingEngineId);\r\n        syncGroupService.removeViewportFromSyncGroup(viewportId, renderingEngineId, syncGroups);\r\n\r\n        segmentationService.clearSegmentationRepresentations(viewportId);\r\n      },\r\n      [viewportId, segmentationService, syncGroupService, toolGroupService]\r\n    );\r\n\r\n    const elementEnabledHandler = useCallback(\r\n      evt => {\r\n        // check this is this element reference and return early if doesn't match\r\n        if (evt.detail.element !== elementRef.current) {\r\n          return;\r\n        }\r\n\r\n        const { viewportId, element } = evt.detail;\r\n        const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\r\n\r\n        if (!viewportInfo) {\r\n          return;\r\n        }\r\n\r\n        setEnabledElement(viewportId, element);\r\n        setEnabledVPElement(element);\r\n\r\n        const renderingEngineId = viewportInfo.getRenderingEngineId();\r\n        const toolGroupId = viewportInfo.getToolGroupId();\r\n        const syncGroups = viewportInfo.getSyncGroups();\r\n\r\n        toolGroupService.addViewportToToolGroup(viewportId, renderingEngineId, toolGroupId);\r\n\r\n        syncGroupService.addViewportToSyncGroup(viewportId, renderingEngineId, syncGroups);\r\n\r\n        // we don't need reactivity here so just use state\r\n        const { synchronizersStore } = useSynchronizersStore.getState();\r\n        if (synchronizersStore?.[viewportId]?.length && !isHangingProtocolLayout) {\r\n          // If the viewport used to have a synchronizer, re apply it again\r\n          _rehydrateSynchronizers(viewportId, syncGroupService);\r\n        }\r\n\r\n        if (onElementEnabled && typeof onElementEnabled === 'function') {\r\n          onElementEnabled(evt);\r\n        }\r\n      },\r\n      [viewportId, onElementEnabled, toolGroupService]\r\n    );\r\n\r\n    // disable the element upon unmounting\r\n    useEffect(() => {\r\n      cornerstoneViewportService.enableViewport(viewportId, elementRef.current);\r\n\r\n      eventTarget.addEventListener(Enums.Events.ELEMENT_ENABLED, elementEnabledHandler);\r\n\r\n      setImageScrollBarHeight();\r\n\r\n      return () => {\r\n        const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\r\n\r\n        if (!viewportInfo) {\r\n          return;\r\n        }\r\n\r\n        cornerstoneViewportService.storePresentation({ viewportId });\r\n\r\n        // This should be done after the store presentation since synchronizers\r\n        // will get cleaned up and they need the viewportInfo to be present\r\n        cleanUpServices(viewportInfo);\r\n\r\n        if (onElementDisabled && typeof onElementDisabled === 'function') {\r\n          onElementDisabled(viewportInfo);\r\n        }\r\n\r\n        cornerstoneViewportService.disableElement(viewportId);\r\n        viewportRef.unregister();\r\n\r\n        eventTarget.removeEventListener(Enums.Events.ELEMENT_ENABLED, elementEnabledHandler);\r\n      };\r\n    }, []);\r\n\r\n    // subscribe to displaySet metadata invalidation (updates)\r\n    // Currently, if the metadata changes we need to re-render the display set\r\n    // for it to take effect in the viewport. As we deal with scaling in the loading,\r\n    // we need to remove the old volume from the cache, and let the\r\n    // viewport to re-add it which will use the new metadata. Otherwise, the\r\n    // viewport will use the cached volume and the new metadata will not be used.\r\n    // Note: this approach does not actually end of sending network requests\r\n    // and it uses the network cache\r\n    useEffect(() => {\r\n      const { unsubscribe } = displaySetService.subscribe(\r\n        displaySetService.EVENTS.DISPLAY_SET_SERIES_METADATA_INVALIDATED,\r\n        async ({\r\n          displaySetInstanceUID: invalidatedDisplaySetInstanceUID,\r\n          invalidateData,\r\n        }: Types.DisplaySetSeriesMetadataInvalidatedEvent) => {\r\n          if (!invalidateData) {\r\n            return;\r\n          }\r\n\r\n          const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\r\n\r\n          if (viewportInfo.hasDisplaySet(invalidatedDisplaySetInstanceUID)) {\r\n            const viewportData = viewportInfo.getViewportData();\r\n            const newViewportData = await cornerstoneCacheService.invalidateViewportData(\r\n              viewportData,\r\n              invalidatedDisplaySetInstanceUID,\r\n              dataSource,\r\n              displaySetService\r\n            );\r\n\r\n            const keepCamera = true;\r\n            cornerstoneViewportService.updateViewport(viewportId, newViewportData, keepCamera);\r\n          }\r\n        }\r\n      );\r\n      return () => {\r\n        unsubscribe();\r\n      };\r\n    }, [viewportId]);\r\n\r\n    useEffect(() => {\r\n      // handle the default viewportType to be stack\r\n      if (!viewportOptions.viewportType) {\r\n        viewportOptions.viewportType = STACK;\r\n      }\r\n\r\n      const loadViewportData = async () => {\r\n        const viewportData = await cornerstoneCacheService.createViewportData(\r\n          displaySets,\r\n          viewportOptions,\r\n          dataSource,\r\n          initialImageIndex\r\n        );\r\n\r\n        const presentations = getViewportPresentations(viewportId, viewportOptions);\r\n\r\n        // Note: This is a hack to get the grid to re-render the OHIFCornerstoneViewport component\r\n        // Used for segmentation hydration right now, since the logic to decide whether\r\n        // a viewport needs to render a segmentation lives inside the CornerstoneViewportService\r\n        // so we need to re-render (force update via change of the needsRerendering) so that React\r\n        // does the diffing and decides we should render this again (although the id and element has not changed)\r\n        // so that the CornerstoneViewportService can decide whether to render the segmentation or not. Not that we reached here we can turn it off.\r\n        if (viewportOptions.needsRerendering) {\r\n          viewportOptions.needsRerendering = false;\r\n        }\r\n\r\n        cornerstoneViewportService.setViewportData(\r\n          viewportId,\r\n          viewportData,\r\n          viewportOptions,\r\n          displaySetOptions,\r\n          presentations\r\n        );\r\n      };\r\n\r\n      loadViewportData();\r\n    }, [viewportOptions, displaySets, dataSource]);\r\n\r\n    const Notification = customizationService.getCustomization('ui.notificationComponent');\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"viewport-wrapper\">\r\n          <div\r\n            className=\"cornerstone-viewport-element\"\r\n            style={{ height: '100%', width: '100%' }}\r\n            onContextMenu={e => e.preventDefault()}\r\n            onMouseDown={e => e.preventDefault()}\r\n            data-viewportid={viewportId}\r\n            ref={el => {\r\n              elementRef.current = el;\r\n              if (el) {\r\n                viewportRef.register(el);\r\n              }\r\n            }}\r\n          ></div>\r\n          <CornerstoneOverlays\r\n            viewportId={viewportId}\r\n            toolBarService={toolbarService}\r\n            element={elementRef.current}\r\n            scrollbarHeight={scrollbarHeight}\r\n            servicesManager={servicesManager}\r\n          />\r\n          <CinePlayer\r\n            enabledVPElement={enabledVPElement}\r\n            viewportId={viewportId}\r\n            servicesManager={servicesManager}\r\n          />\r\n          <ActiveViewportBehavior\r\n            viewportId={viewportId}\r\n            servicesManager={servicesManager}\r\n          />\r\n        </div>\r\n        {/* top offset of 24px to account for ViewportActionCorners. */}\r\n        <div className=\"absolute top-[24px] w-full\">\r\n          {viewportDialogState.viewportId === viewportId && (\r\n            <Notification\r\n              id=\"viewport-notification\"\r\n              message={viewportDialogState.message}\r\n              type={viewportDialogState.type}\r\n              actions={viewportDialogState.actions}\r\n              onSubmit={viewportDialogState.onSubmit}\r\n              onOutsideClick={viewportDialogState.onOutsideClick}\r\n              onKeyPress={viewportDialogState.onKeyPress}\r\n            />\r\n          )}\r\n        </div>\r\n        {/* The OHIFViewportActionCorners follows the viewport in the DOM so that it is naturally at a higher z-index.*/}\r\n        <OHIFViewportActionCorners viewportId={viewportId} />\r\n      </React.Fragment>\r\n    );\r\n  },\r\n  areEqual\r\n);\r\n\r\nfunction _rehydrateSynchronizers(viewportId: string, syncGroupService: any) {\r\n  const { synchronizersStore } = useSynchronizersStore.getState();\r\n  const synchronizers = synchronizersStore[viewportId];\r\n\r\n  if (!synchronizers) {\r\n    return;\r\n  }\r\n\r\n  synchronizers.forEach(synchronizerObj => {\r\n    if (!synchronizerObj.id) {\r\n      return;\r\n    }\r\n\r\n    const { id, sourceViewports, targetViewports } = synchronizerObj;\r\n\r\n    const synchronizer = syncGroupService.getSynchronizer(id);\r\n\r\n    if (!synchronizer) {\r\n      return;\r\n    }\r\n\r\n    const sourceViewportInfo = sourceViewports.find(\r\n      sourceViewport => sourceViewport.viewportId === viewportId\r\n    );\r\n\r\n    const targetViewportInfo = targetViewports.find(\r\n      targetViewport => targetViewport.viewportId === viewportId\r\n    );\r\n\r\n    const isSourceViewportInSynchronizer = synchronizer\r\n      .getSourceViewports()\r\n      .find(sourceViewport => sourceViewport.viewportId === viewportId);\r\n\r\n    const isTargetViewportInSynchronizer = synchronizer\r\n      .getTargetViewports()\r\n      .find(targetViewport => targetViewport.viewportId === viewportId);\r\n\r\n    // if the viewport was previously a source viewport, add it again\r\n    if (sourceViewportInfo && !isSourceViewportInSynchronizer) {\r\n      synchronizer.addSource({\r\n        viewportId: sourceViewportInfo.viewportId,\r\n        renderingEngineId: sourceViewportInfo.renderingEngineId,\r\n      });\r\n    }\r\n\r\n    // if the viewport was previously a target viewport, add it again\r\n    if (targetViewportInfo && !isTargetViewportInSynchronizer) {\r\n      synchronizer.addTarget({\r\n        viewportId: targetViewportInfo.viewportId,\r\n        renderingEngineId: targetViewportInfo.renderingEngineId,\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\n// Component displayName\r\nOHIFCornerstoneViewport.displayName = 'OHIFCornerstoneViewport';\r\n\r\nfunction areEqual(prevProps, nextProps) {\r\n  if (nextProps.needsRerendering) {\r\n    return false;\r\n  }\r\n\r\n  if (prevProps.displaySets.length !== nextProps.displaySets.length) {\r\n    return false;\r\n  }\r\n\r\n  if (prevProps.viewportOptions.orientation !== nextProps.viewportOptions.orientation) {\r\n    return false;\r\n  }\r\n\r\n  if (prevProps.viewportOptions.toolGroupId !== nextProps.viewportOptions.toolGroupId) {\r\n    return false;\r\n  }\r\n\r\n  if (\r\n    nextProps.viewportOptions.viewportType &&\r\n    prevProps.viewportOptions.viewportType !== nextProps.viewportOptions.viewportType\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  if (nextProps.viewportOptions.needsRerendering) {\r\n    return false;\r\n  }\r\n\r\n  const prevDisplaySets = prevProps.displaySets;\r\n  const nextDisplaySets = nextProps.displaySets;\r\n\r\n  if (prevDisplaySets.length !== nextDisplaySets.length) {\r\n    return false;\r\n  }\r\n\r\n  for (let i = 0; i < prevDisplaySets.length; i++) {\r\n    const prevDisplaySet = prevDisplaySets[i];\r\n\r\n    const foundDisplaySet = nextDisplaySets.find(\r\n      nextDisplaySet =>\r\n        nextDisplaySet.displaySetInstanceUID === prevDisplaySet.displaySetInstanceUID\r\n    );\r\n\r\n    if (!foundDisplaySet) {\r\n      return false;\r\n    }\r\n\r\n    // check they contain the same image\r\n    if (foundDisplaySet.images?.length !== prevDisplaySet.images?.length) {\r\n      return false;\r\n    }\r\n\r\n    // check if their imageIds are the same\r\n    if (foundDisplaySet.images?.length) {\r\n      for (let j = 0; j < foundDisplaySet.images.length; j++) {\r\n        if (foundDisplaySet.images[j].imageId !== prevDisplaySet.images[j].imageId) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nexport default OHIFCornerstoneViewport;\r\n","import { usePositionPresentationStore } from '../../stores/usePositionPresentationStore';\r\nimport { useLutPresentationStore } from '../../stores/useLutPresentationStore';\r\nimport { useSegmentationPresentationStore } from '../../stores/useSegmentationPresentationStore';\r\n\r\nexport function getViewportPresentations(\r\n  viewportId: string,\r\n  viewportOptions: AppTypes.ViewportGrid.GridViewportOptions\r\n) {\r\n  const { lutPresentationStore } = useLutPresentationStore.getState();\r\n  const { positionPresentationStore } = usePositionPresentationStore.getState();\r\n  const { segmentationPresentationStore } = useSegmentationPresentationStore.getState();\r\n\r\n  // NOTE: this is the new viewport state, we should not get the presentationIds from the cornerstoneViewportService\r\n  // since that has the old viewport state\r\n  const { presentationIds } = viewportOptions;\r\n\r\n  if (!presentationIds) {\r\n    return {\r\n      positionPresentation: null,\r\n      lutPresentation: null,\r\n      segmentationPresentation: null,\r\n    };\r\n  }\r\n\r\n  const { lutPresentationId, positionPresentationId, segmentationPresentationId } = presentationIds;\r\n\r\n  const positionPresentation = positionPresentationStore[positionPresentationId];\r\n  const lutPresentation = lutPresentationStore[lutPresentationId];\r\n  const segmentationPresentation = segmentationPresentationStore[segmentationPresentationId];\r\n\r\n  return {\r\n    positionPresentation,\r\n    lutPresentation,\r\n    segmentationPresentation,\r\n  };\r\n}\r\n"],"names":["CornerstoneImageScrollbar","viewportData","viewportId","element","imageSliceData","setImageSliceData","scrollbarHeight","servicesManager","cineService","cornerstoneViewportService","services","useEffect","viewport","getCornerstoneViewport","VolumeViewport3D","imageIndex","getCurrentImageIdIndex","numberOfSlices","getNumberOfSlices","error","console","warn","viewportType","eventId","Enums","STACK","STACK_NEW_IMAGE","ORTHOGRAPHIC","VOLUME_NEW_IMAGE","IMAGE_RENDERED","updateIndex","event","newImageIdIndex","imageIdIndex","detail","addEventListener","removeEventListener","React","ImageScrollbar","onChange","evt","onImageScrollbarChange","isCineEnabled","getState","stopClip","setCine","id","isPlaying","csUtils","debounceLoading","max","height","value","propTypes","PropTypes","isRequired","Element","formatNumberPrecision","number","precision","parseFloat","toFixed","formatDICOMDate","date","strFormat","moment","format","formatDICOMTime","time","EPSILON","formatPN","utils","OverlayItemComponents","props","instance","customization","color","attribute","title","label","background","contentF","className","style","voi","windowWidth","windowCenter","scale","undefined","instanceNumber","CustomizableViewportOverlay","customizationService","toolGroupService","displaySetService","setVOI","useState","setScale","annotationState","setAnnotationState","isViewportBackgroundLight","isLight","useViewportRendering","topLeftCustomization","getCustomization","topRightCustomization","bottomLeftCustomization","bottomRightCustomization","useMemo","getInstanceNumber","displaySetProps","displaySets","data","length","map","datum","getDisplaySetByUID","displaySetInstanceUID","filter","it","getDisplaySets","displaySet","instances","referenceInstance","updateVOI","eventDetail","range","lower","upper","utilities","VOI_MODIFIED","annotationModified","useCallback","annotation","metadata","toolName","UltrasoundPleuraBLineTool","prevState","eventTarget","csToolsEnums","ANNOTATION_MODIFIED","updateScale","previousCamera","camera","parallelScale","getZoom","CAMERA_MODIFIED","_renderOverlayItem","item","overlayItemProps","formatters","formatDate","formatTime","inheritsFrom","OverlayItemComponent","renderItem","transform","getContent","keyPrefix","index","key","condition","ViewportOverlay","topLeft","topRight","bottomLeft","bottomRight","shadowClass","imageIds","imageId","generalImageModule","metaData","parseInt","_getInstanceNumberFromStack","volumes","volume","direction","cornerstoneViewport","getCamera","viewPlaneNormal","scanAxisNormal","slice","cross","vec3","_getInstanceNumberFromVolume","getOrientationStringLPS","invertOrientationStringLPS","orientationMarkers","cameraModifiedTime","setCameraModifiedTime","cameraModifiedListener","Date","now","markers","getEnabledElement","log","getViewportInfo","isDefaultValueSetForRowCosine","isDefaultValueSetForColumnCosine","p00","canvasToWorld","p10","p01","rowCosines","columnCosines","rowString","columnString","oppositeRowString","top","left","right","bottom","_getOrientationMarkers","m","classNames","ViewportImageSliceLoadingIndicator","loading","setLoading","setError","loadIndicatorRef","useRef","imageIdToBeLoaded","setLoadingState","clearTimeout","current","setTimeout","setFinishLoadingState","setErrorState","STACK_VIEWPORT_SCROLL","IMAGE_LOAD_ERROR","setViewportData","unsubscribe","subscribe","EVENTS","VIEWPORT_DATA_CHANGED","viewportInfo","viewportOptions","customViewportProps","hideOverlays","ViewportImageScrollbar","ViewportOrientationMarkers","RenderCinePlayer","newStackFrameRate","dynamicInfo","dynamicInfoProp","CinePlayerComponent","setDynamicInfo","handleDimensionGroupChange","volumeId","dimensionGroupNumber","numDimensionGroups","splittingTag","DYNAMIC_VOLUME_DIMENSION_GROUP_CHANGED","cache","getVolume","updateDynamicInfo","frameRate","onClose","setIsCineEnabled","setViewportCineClosed","onPlayPauseChange","onFrameRateChange","enabledVPElement","viewportGridService","cines","useCine","setNewStackFrameRate","appConfig","useAppConfig","isMountedRef","cineHandler","validFrameRate","Math","playClip","framesPerSecond","newDisplaySetHandler","viewports","displaySetInstanceUIDs","get","forEach","FrameRate","round","autoPlayCine","isDynamicVolume","dynamicVolumeInfo","timePoints","VIEWPORT_NEW_IMAGE_SET","VOLUME_VIEWPORT_NEW_VOLUME","cine","OHIFViewportActionCornersComponent","isHovered","isActive","useViewportHover","IconPresentationProvider","size","IconContainer","ToolButton","containerProps","ViewportActionCorners","Container","TopLeft","Toolbar","buttonSection","location","ButtonLocation","TopMiddle","TopRight","LeftMiddle","RightMiddle","BottomLeft","BottomMiddle","BottomRight","memo","ActiveViewportBehavior","activeViewportId","setActiveViewportId","handleCineEnable","isViewportCineClosed","getDisplaySetsUIDsForViewport","uid","modalities","Modality","some","sourceModalities","modality","includes","subscription","ACTIVE_VIEWPORT_ID_CHANGED","getActiveViewportId","arePropsEqual","prevProps","nextProps","displayName","viewportDimensions","Map","OHIFCornerstoneViewport","dataSource","displaySetOptions","onElementEnabled","onElementDisabled","isJumpToMeasurementDisabled","initialImageIndex","isHangingProtocolLayout","Error","push","ds","isReconstructable","setScrollbarHeight","setEnabledVPElement","elementRef","viewportRef","useViewportRef","toolbarService","syncGroupService","segmentationService","cornerstoneCacheService","measurementService","viewportDialogState","useViewportDialog","setImageScrollBarHeight","clientHeight","onResize","entries","entry","width","contentRect","prevDimensions","hasDimensionsChanged","set","resize","resizeObserver","ResizeObserver","observe","unobserve","disconnect","cleanUpServices","renderingEngineId","getRenderingEngineId","syncGroups","getSyncGroups","removeViewportFromToolGroup","removeViewportFromSyncGroup","clearSegmentationRepresentations","elementEnabledHandler","setEnabledElement","toolGroupId","getToolGroupId","addViewportToToolGroup","addViewportToSyncGroup","synchronizersStore","useSynchronizersStore","synchronizers","synchronizerObj","sourceViewports","targetViewports","synchronizer","getSynchronizer","sourceViewportInfo","find","sourceViewport","targetViewportInfo","targetViewport","isSourceViewportInSynchronizer","getSourceViewports","isTargetViewportInSynchronizer","getTargetViewports","addSource","addTarget","_rehydrateSynchronizers","enableViewport","ELEMENT_ENABLED","storePresentation","disableElement","unregister","DISPLAY_SET_SERIES_METADATA_INVALIDATED","async","invalidatedDisplaySetInstanceUID","invalidateData","hasDisplaySet","getViewportData","newViewportData","invalidateViewportData","keepCamera","updateViewport","createViewportData","presentations","lutPresentationStore","useLutPresentationStore","positionPresentationStore","usePositionPresentationStore","segmentationPresentationStore","useSegmentationPresentationStore","presentationIds","positionPresentation","lutPresentation","segmentationPresentation","lutPresentationId","positionPresentationId","segmentationPresentationId","getViewportPresentations","needsRerendering","loadViewportData","Notification","onContextMenu","e","preventDefault","onMouseDown","ref","el","register","CornerstoneOverlays","toolBarService","CinePlayer","message","type","actions","onSubmit","onOutsideClick","onKeyPress","OHIFViewportActionCorners","areEqual","orientation","prevDisplaySets","nextDisplaySets","i","prevDisplaySet","foundDisplaySet","nextDisplaySet","images","j"],"sourceRoot":""}