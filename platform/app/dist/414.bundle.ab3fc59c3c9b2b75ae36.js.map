{"version":3,"file":"414.bundle.ab3fc59c3c9b2b75ae36.js","mappings":"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","sources":["webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptBeginTracking.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/measurementTrackingMachine.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/hydrateStructuredReport.tsx","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptWrapperFunctions.ts","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/TrackedMeasurementsContext.tsx","webpack:///../../../extensions/measurement-tracking/src/getContextModule.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/untrackSeriesModal.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/PanelStudyBrowserTracking.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/getImageSrcFromImageId.js","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/index.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelMeasurementTableTracking.tsx","webpack:///../../../extensions/measurement-tracking/src/getPanelModule.tsx","webpack:///../../../extensions/measurement-tracking/src/getViewportModule.tsx","webpack:///../../../extensions/measurement-tracking/src/id.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptHasDirtyAnnotations.ts","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptHydrateStructuredReport.ts","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptTrackNewSeries.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptTrackNewStudy.ts","webpack:///../../../extensions/measurement-tracking/src/customizations/measurementTrackingPrompts.tsx","webpack:///../../../extensions/measurement-tracking/src/customizations/studyBrowserCustomization.ts","webpack:///../../../extensions/measurement-tracking/src/services/TrackedMeasurementsService/TrackedMeasurementsService.ts","webpack:///../../../extensions/measurement-tracking/src/index.tsx","webpack:///../../../extensions/measurement-tracking/src/getCustomizationModule.ts"],"sourcesContent":["import i18n from 'i18next';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n};\r\n\r\nexport const measurementTrackingMode = {\r\n  STANDARD: 'standard',\r\n  SIMPLIFIED: 'simplified',\r\n  NONE: 'none',\r\n};\r\n\r\nfunction promptBeginTracking({ servicesManager, extensionManager }, ctx, evt) {\r\n  const { uiViewportDialogService, customizationService } = servicesManager.services;\r\n  const appConfig = extensionManager._appConfig;\r\n  // When the state change happens after a promise, the state machine sends the retult in evt.data;\r\n  // In case of direct transition to the state, the state machine sends the data in evt;\r\n  const { viewportId, StudyInstanceUID, SeriesInstanceUID } = evt.data || evt;\r\n\r\n  return new Promise(async function (resolve, reject) {\r\n    const standardMode = appConfig?.measurementTrackingMode === measurementTrackingMode.STANDARD;\r\n    const noTrackingMode = appConfig?.measurementTrackingMode === measurementTrackingMode.NONE;\r\n    let promptResult;\r\n\r\n    promptResult = noTrackingMode\r\n      ? RESPONSE.NO_NEVER\r\n      : standardMode\r\n        ? await _askTrackMeasurements(uiViewportDialogService, customizationService, viewportId)\r\n        : RESPONSE.SET_STUDY_AND_SERIES;\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUID,\r\n      viewportId,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askTrackMeasurements(uiViewportDialogService, customizationService, viewportId) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = customizationService.getCustomization(\r\n      'viewportNotification.beginTrackingMessage'\r\n    );\r\n    const actions = [\r\n      {\r\n        id: 'prompt-begin-tracking-cancel',\r\n        type: 'secondary',\r\n        text: i18n.t('Common:No'),\r\n        value: RESPONSE.CANCEL,\r\n      },\r\n      {\r\n        id: 'prompt-begin-tracking-no-do-not-ask-again',\r\n        type: 'secondary',\r\n        text: i18n.t('MeasurementTable:No, do not ask again'),\r\n        value: RESPONSE.NO_NEVER,\r\n      },\r\n      {\r\n        id: 'prompt-begin-tracking-yes',\r\n        type: 'primary',\r\n        text: i18n.t('Common:Yes'),\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      uiViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    uiViewportDialogService.show({\r\n      viewportId,\r\n      id: 'measurement-tracking-prompt-begin-tracking',\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        uiViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n      onKeyPress: event => {\r\n        if (event.key === 'Enter') {\r\n          const action = actions.find(action => action.id === 'prompt-begin-tracking-yes');\r\n          onSubmit(action.value);\r\n        }\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptBeginTracking;\r\n","import { assign } from 'xstate';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n  HYDRATE_REPORT: 5,\r\n};\r\n\r\nconst machineConfiguration = {\r\n  id: 'measurementTracking',\r\n  initial: 'idle',\r\n  context: {\r\n    activeViewportId: null,\r\n    trackedStudy: '',\r\n    trackedSeries: [],\r\n    ignoredSeries: [],\r\n    //\r\n    prevTrackedStudy: '',\r\n    prevTrackedSeries: [],\r\n    prevIgnoredSeries: [],\r\n    //\r\n    ignoredSRSeriesForHydration: [],\r\n    isDirty: false,\r\n  },\r\n  states: {\r\n    off: {\r\n      type: 'final',\r\n    },\r\n    labellingOnly: {\r\n      on: {\r\n        TRACK_SERIES: [\r\n          {\r\n            target: 'promptLabelAnnotation',\r\n            actions: ['setPreviousState'],\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    idle: {\r\n      entry: 'clearContext',\r\n      on: {\r\n        TRACK_SERIES: [\r\n          {\r\n            target: 'promptLabelAnnotation',\r\n            cond: 'isLabelOnMeasure',\r\n            actions: ['setPreviousState'],\r\n          },\r\n          {\r\n            target: 'promptBeginTracking',\r\n            actions: ['setPreviousState'],\r\n          },\r\n        ],\r\n        SET_TRACKED_SERIES: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setTrackedStudyAndMultipleSeries', 'setIsDirtyToClean'],\r\n          },\r\n        ],\r\n        PROMPT_HYDRATE_SR: {\r\n          target: 'promptHydrateStructuredReport',\r\n          cond: 'hasNotIgnoredSRSeriesForHydration',\r\n        },\r\n        RESTORE_PROMPT_HYDRATE_SR: 'promptHydrateStructuredReport',\r\n        HYDRATE_SR: 'hydrateStructuredReport',\r\n        UPDATE_ACTIVE_VIEWPORT_ID: {\r\n          actions: assign({\r\n            activeViewportId: (_, event) => event.activeViewportId,\r\n          }),\r\n        },\r\n      },\r\n    },\r\n    promptBeginTracking: {\r\n      invoke: {\r\n        src: 'promptBeginTracking',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setTrackedStudyAndSeries', 'setIsDirty'],\r\n            cond: 'shouldSetStudyAndSeries',\r\n          },\r\n          {\r\n            target: 'labellingOnly',\r\n            cond: 'isLabelOnMeasureAndShouldKillMachine',\r\n          },\r\n          {\r\n            target: 'off',\r\n            cond: 'shouldKillMachine',\r\n          },\r\n          {\r\n            target: 'idle',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    tracking: {\r\n      on: {\r\n        TRACK_SERIES: [\r\n          {\r\n            target: 'promptLabelAnnotation',\r\n            cond: 'isLabelOnMeasure',\r\n            actions: ['setPreviousState'],\r\n          },\r\n          {\r\n            target: 'promptTrackNewStudy',\r\n            cond: 'isNewStudy',\r\n          },\r\n          {\r\n            target: 'promptTrackNewSeries',\r\n            cond: 'isNewSeries',\r\n          },\r\n        ],\r\n        UNTRACK_SERIES: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['removeTrackedSeries', 'setIsDirty', 'clearDisplaySetHydratedState'],\r\n            cond: 'hasRemainingTrackedSeries',\r\n          },\r\n          {\r\n            target: 'idle',\r\n          },\r\n        ],\r\n        UNTRACK_ALL: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'clearContext',\r\n              'setIsDirtyToClean',\r\n              'clearDisplaySetHydratedState',\r\n              'clearAllMeasurements',\r\n            ],\r\n          },\r\n        ],\r\n        SET_TRACKED_SERIES: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setTrackedStudyAndMultipleSeries'],\r\n          },\r\n        ],\r\n        SAVE_REPORT: 'promptSaveReport',\r\n        SET_DIRTY: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setIsDirty'],\r\n            cond: 'shouldSetDirty',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n        CHECK_DIRTY: {\r\n          target: 'promptHasDirtyAnnotations',\r\n          cond: 'hasDirtyAndSimplified',\r\n        },\r\n        PROMPT_HYDRATE_SR: {\r\n          target: 'promptHydrateStructuredReport',\r\n          cond: 'isSimplifiedConfig',\r\n          actions: ['clearAllMeasurements', 'clearDisplaySetHydratedState'],\r\n        },\r\n      },\r\n    },\r\n    promptTrackNewSeries: {\r\n      invoke: {\r\n        src: 'promptTrackNewSeries',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['addTrackedSeries', 'setIsDirty'],\r\n            cond: 'shouldAddSeries',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'discardPreviouslyTrackedMeasurements',\r\n              'setTrackedStudyAndSeries',\r\n              'setIsDirty',\r\n            ],\r\n            cond: 'shouldSetStudyAndSeries',\r\n          },\r\n          {\r\n            target: 'promptSaveReport',\r\n            cond: 'shouldPromptSaveReport',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    promptTrackNewStudy: {\r\n      invoke: {\r\n        src: 'promptTrackNewStudy',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'discardPreviouslyTrackedMeasurements',\r\n              'setTrackedStudyAndSeries',\r\n              'setIsDirty',\r\n            ],\r\n            cond: 'shouldSetStudyAndSeries',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n            actions: ['ignoreSeries'],\r\n            cond: 'shouldAddIgnoredSeries',\r\n          },\r\n          {\r\n            target: 'promptSaveReport',\r\n            cond: 'shouldPromptSaveReport',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    promptSaveReport: {\r\n      invoke: {\r\n        src: 'promptSaveReport',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'clearAllMeasurements',\r\n              'clearDisplaySetHydratedState',\r\n              'setIsDirty',\r\n              'updatedViewports',\r\n            ],\r\n            cond: 'simplifiedAndLoadSR',\r\n          },\r\n          // \"clicked the save button\"\r\n          // - should clear all measurements\r\n          // - show DICOM SR\r\n          {\r\n            target: 'idle',\r\n            actions: ['clearAllMeasurements', 'showStructuredReportDisplaySetInActiveViewport'],\r\n            cond: 'shouldSaveAndContinueWithSameReport',\r\n          },\r\n          // \"starting a new report\"\r\n          // - remove \"just saved\" measurements\r\n          // - start tracking a new study + report\r\n          {\r\n            target: 'tracking',\r\n            actions: ['discardPreviouslyTrackedMeasurements', 'setTrackedStudyAndSeries'],\r\n            cond: 'shouldSaveAndStartNewReport',\r\n          },\r\n          // Cancel, back to tracking\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    promptHydrateStructuredReport: {\r\n      invoke: {\r\n        src: 'promptHydrateStructuredReport',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'setTrackedStudyAndMultipleSeries',\r\n              'jumpToSameImageInActiveViewport',\r\n              'setIsDirtyToClean',\r\n            ],\r\n            cond: 'shouldHydrateStructuredReport',\r\n          },\r\n          {\r\n            target: 'idle',\r\n            actions: ['ignoreHydrationForSRSeries'],\r\n            cond: 'shouldIgnoreHydrationForSR',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    hydrateStructuredReport: {\r\n      invoke: {\r\n        src: 'hydrateStructuredReport',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'setTrackedStudyAndMultipleSeries',\r\n              'jumpToSameImageInActiveViewport',\r\n              'setIsDirtyToClean',\r\n            ],\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    promptLabelAnnotation: {\r\n      invoke: {\r\n        src: 'promptLabelAnnotation',\r\n        onDone: [\r\n          {\r\n            target: 'labellingOnly',\r\n            cond: 'wasLabellingOnly',\r\n          },\r\n          {\r\n            target: 'promptBeginTracking',\r\n            cond: 'wasIdle',\r\n          },\r\n          {\r\n            target: 'promptTrackNewStudy',\r\n            cond: 'wasTrackingAndIsNewStudy',\r\n          },\r\n          {\r\n            target: 'promptTrackNewSeries',\r\n            cond: 'wasTrackingAndIsNewSeries',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n            cond: 'wasTracking',\r\n          },\r\n          {\r\n            target: 'off',\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    promptHasDirtyAnnotations: {\r\n      invoke: {\r\n        src: 'promptHasDirtyAnnotations',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'clearAllMeasurements',\r\n              'clearDisplaySetHydratedState',\r\n              'setIsDirty',\r\n              'updatedViewports',\r\n            ],\r\n            cond: 'shouldSetStudyAndSeries',\r\n          },\r\n          {\r\n            target: 'promptSaveReport',\r\n            cond: 'shouldPromptSaveReport',\r\n          },\r\n          { target: 'tracking' },\r\n        ],\r\n      },\r\n    },\r\n  },\r\n  strict: true,\r\n};\r\n\r\nconst defaultOptions = {\r\n  services: {\r\n    promptBeginTracking: (ctx, evt) => {\r\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\r\n    },\r\n    promptTrackNewStudy: (ctx, evt) => {\r\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\r\n    },\r\n    promptTrackNewSeries: (ctx, evt) => {\r\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\r\n    },\r\n  },\r\n  actions: {\r\n    discardPreviouslyTrackedMeasurements: (ctx, evt) => {\r\n      console.log('discardPreviouslyTrackedMeasurements: not implemented');\r\n    },\r\n    clearAllMeasurements: (ctx, evt) => {\r\n      console.log('clearAllMeasurements: not implemented');\r\n    },\r\n    jumpToFirstMeasurementInActiveViewport: (ctx, evt) => {\r\n      console.warn('jumpToFirstMeasurementInActiveViewport: not implemented');\r\n    },\r\n    showStructuredReportDisplaySetInActiveViewport: (ctx, evt) => {\r\n      console.warn('showStructuredReportDisplaySetInActiveViewport: not implemented');\r\n    },\r\n    clearContext: assign({\r\n      trackedStudy: '',\r\n      trackedSeries: [],\r\n      ignoredSeries: [],\r\n      prevTrackedStudy: '',\r\n      prevTrackedSeries: [],\r\n      prevIgnoredSeries: [],\r\n    }),\r\n    // Promise resolves w/ `evt.data.*`\r\n    setTrackedStudyAndSeries: assign((ctx, evt) => ({\r\n      prevTrackedStudy: ctx.trackedStudy,\r\n      prevTrackedSeries: ctx.trackedSeries.slice(),\r\n      prevIgnoredSeries: ctx.ignoredSeries.slice(),\r\n      //\r\n      trackedStudy: evt.data.StudyInstanceUID,\r\n      trackedSeries: [evt.data.SeriesInstanceUID],\r\n      ignoredSeries: [],\r\n    })),\r\n    setTrackedStudyAndMultipleSeries: assign((ctx, evt) => {\r\n      const studyInstanceUID = evt.StudyInstanceUID || evt.data.StudyInstanceUID;\r\n      const seriesInstanceUIDs = evt.SeriesInstanceUIDs || evt.data.SeriesInstanceUIDs;\r\n\r\n      return {\r\n        prevTrackedStudy: ctx.trackedStudy,\r\n        prevTrackedSeries: ctx.trackedSeries.slice(),\r\n        prevIgnoredSeries: ctx.ignoredSeries.slice(),\r\n        //\r\n        trackedStudy: studyInstanceUID,\r\n        trackedSeries: [...ctx.trackedSeries, ...seriesInstanceUIDs],\r\n        ignoredSeries: [],\r\n      };\r\n    }),\r\n    setIsDirtyToClean: assign((ctx, evt) => ({\r\n      isDirty: false,\r\n    })),\r\n    setIsDirty: assign((ctx, evt) => ({\r\n      isDirty: true,\r\n    })),\r\n    ignoreSeries: assign((ctx, evt) => ({\r\n      prevIgnoredSeries: [...ctx.ignoredSeries],\r\n      ignoredSeries: [...ctx.ignoredSeries, evt.data.SeriesInstanceUID],\r\n    })),\r\n    ignoreHydrationForSRSeries: assign((ctx, evt) => ({\r\n      ignoredSRSeriesForHydration: [\r\n        ...ctx.ignoredSRSeriesForHydration,\r\n        evt.data.srSeriesInstanceUID,\r\n      ],\r\n    })),\r\n    addTrackedSeries: assign((ctx, evt) => ({\r\n      prevTrackedSeries: [...ctx.trackedSeries],\r\n      trackedSeries: [...ctx.trackedSeries, evt.data.SeriesInstanceUID],\r\n    })),\r\n    removeTrackedSeries: assign((ctx, evt) => ({\r\n      prevTrackedSeries: ctx.trackedSeries.slice().filter(ser => ser !== evt.SeriesInstanceUID),\r\n      trackedSeries: ctx.trackedSeries.slice().filter(ser => ser !== evt.SeriesInstanceUID),\r\n    })),\r\n    setPreviousState: assign((ctx, evt, meta) => {\r\n      return {\r\n        prevState: meta.state.value,\r\n      };\r\n    }),\r\n  },\r\n  guards: {\r\n    // We set dirty any time we performan an action that:\r\n    // - Tracks a new study\r\n    // - Tracks a new series\r\n    // - Adds a measurement to an already tracked study/series\r\n    //\r\n    // We set clean any time we restore from an SR\r\n    //\r\n    // This guard/condition is specific to \"new measurements\"\r\n    // to make sure we only track dirty when the new measurement is specific\r\n    // to a series we're already tracking\r\n    //\r\n    // tl;dr\r\n    // Any report change, that is not a hydration of an existing report, should\r\n    // result in a \"dirty\" report\r\n    //\r\n    // Where dirty means there would be \"loss of data\" if we blew away measurements\r\n    // without creating a new SR.\r\n    shouldSetDirty: (ctx, evt) => {\r\n      return (\r\n        // When would this happen?\r\n        evt.SeriesInstanceUID === undefined || ctx.trackedSeries.includes(evt.SeriesInstanceUID)\r\n      );\r\n    },\r\n    wasLabellingOnly: (ctx, evt, condMeta) => {\r\n      return ctx.prevState === 'labellingOnly';\r\n    },\r\n    wasIdle: (ctx, evt, condMeta) => {\r\n      return ctx.prevState === 'idle';\r\n    },\r\n    wasTracking: (ctx, evt, condMeta) => {\r\n      return ctx.prevState === 'tracking';\r\n    },\r\n    wasTrackingAndIsNewStudy: (ctx, evt, condMeta) => {\r\n      return (\r\n        ctx.prevState === 'tracking' &&\r\n        !ctx.ignoredSeries.includes(evt.data.SeriesInstanceUID) &&\r\n        ctx.trackedStudy !== evt.data.StudyInstanceUID\r\n      );\r\n    },\r\n    wasTrackingAndIsNewSeries: (ctx, evt, condMeta) => {\r\n      return (\r\n        ctx.prevState === 'tracking' &&\r\n        !ctx.ignoredSeries.includes(evt.data.SeriesInstanceUID) &&\r\n        !ctx.trackedSeries.includes(evt.data.SeriesInstanceUID)\r\n      );\r\n    },\r\n\r\n    shouldKillMachine: (ctx, evt) => evt.data && evt.data.userResponse === RESPONSE.NO_NEVER,\r\n    shouldAddSeries: (ctx, evt) => evt.data && evt.data.userResponse === RESPONSE.ADD_SERIES,\r\n    shouldSetStudyAndSeries: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.SET_STUDY_AND_SERIES,\r\n    shouldAddIgnoredSeries: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.NO_NOT_FOR_SERIES,\r\n    shouldPromptSaveReport: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.CREATE_REPORT,\r\n    shouldIgnoreHydrationForSR: (ctx, evt) => evt.data && evt.data.userResponse === RESPONSE.CANCEL,\r\n    shouldSaveAndContinueWithSameReport: (ctx, evt) =>\r\n      evt.data &&\r\n      evt.data.userResponse === RESPONSE.CREATE_REPORT &&\r\n      evt.data.isBackupSave === true,\r\n    shouldSaveAndStartNewReport: (ctx, evt) =>\r\n      evt.data &&\r\n      evt.data.userResponse === RESPONSE.CREATE_REPORT &&\r\n      evt.data.isBackupSave === false,\r\n    shouldHydrateStructuredReport: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.HYDRATE_REPORT,\r\n    // Has more than 1, or SeriesInstanceUID is not in list\r\n    // --> Post removal would have non-empty trackedSeries array\r\n    hasRemainingTrackedSeries: (ctx, evt) =>\r\n      ctx.trackedSeries.length > 1 || !ctx.trackedSeries.includes(evt.SeriesInstanceUID),\r\n    hasNotIgnoredSRSeriesForHydration: (ctx, evt) => {\r\n      return !ctx.ignoredSRSeriesForHydration.includes(evt.SeriesInstanceUID);\r\n    },\r\n    isNewStudy: (ctx, evt) =>\r\n      !ctx.ignoredSeries.includes(evt.SeriesInstanceUID) &&\r\n      ctx.trackedStudy !== evt.StudyInstanceUID,\r\n    isNewSeries: (ctx, evt) =>\r\n      !ctx.ignoredSeries.includes(evt.SeriesInstanceUID) &&\r\n      !ctx.trackedSeries.includes(evt.SeriesInstanceUID),\r\n  },\r\n};\r\n\r\nexport { defaultOptions, machineConfiguration, RESPONSE };\r\n","import { hydrateStructuredReport as baseHydrateStructuredReport } from '@ohif/extension-cornerstone-dicom-sr';\r\n\r\nfunction hydrateStructuredReport(\r\n  { servicesManager, extensionManager, commandsManager, appConfig }: withAppTypes,\r\n  ctx,\r\n  evt\r\n) {\r\n  const { displaySetService } = servicesManager.services;\r\n  const { viewportId, displaySetInstanceUID } = evt;\r\n  const srDisplaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const hydrationResult = baseHydrateStructuredReport(\r\n      { servicesManager, extensionManager, commandsManager, appConfig },\r\n      displaySetInstanceUID\r\n    );\r\n\r\n    const StudyInstanceUID = hydrationResult.StudyInstanceUID;\r\n    const SeriesInstanceUIDs = hydrationResult.SeriesInstanceUIDs;\r\n\r\n    resolve({\r\n      displaySetInstanceUID: evt.displaySetInstanceUID,\r\n      srSeriesInstanceUID: srDisplaySet.SeriesInstanceUID,\r\n      viewportId,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUIDs,\r\n    });\r\n  });\r\n}\r\n\r\nexport default hydrateStructuredReport;\r\n","const promptBeginTrackingWrapper = ({ servicesManager, extensionManager }, ctx, evt) => {\r\n  const { customizationService } = servicesManager.services;\r\n  const promptBeginTracking = customizationService.getCustomization(\r\n    'measurement.promptBeginTracking'\r\n  );\r\n  return promptBeginTracking({ servicesManager, extensionManager }, ctx, evt);\r\n};\r\n\r\nconst promptHydrateStructuredReportWrapper = (\r\n  { servicesManager, extensionManager, commandsManager, appConfig },\r\n  ctx,\r\n  evt\r\n) => {\r\n  const { customizationService } = servicesManager.services;\r\n  const promptHydrateStructuredReport = customizationService.getCustomization(\r\n    'measurement.promptHydrateStructuredReport'\r\n  );\r\n  return promptHydrateStructuredReport(\r\n    { servicesManager, extensionManager, commandsManager, appConfig },\r\n    ctx,\r\n    evt\r\n  );\r\n};\r\n\r\nconst promptTrackNewSeriesWrapper = ({ servicesManager, extensionManager }, ctx, evt) => {\r\n  const { customizationService } = servicesManager.services;\r\n  const promptTrackNewSeries = customizationService.getCustomization(\r\n    'measurement.promptTrackNewSeries'\r\n  );\r\n  return promptTrackNewSeries({ servicesManager, extensionManager }, ctx, evt);\r\n};\r\n\r\nconst promptTrackNewStudyWrapper = ({ servicesManager, extensionManager }, ctx, evt) => {\r\n  const { customizationService } = servicesManager.services;\r\n  const promptTrackNewStudy = customizationService.getCustomization(\r\n    'measurement.promptTrackNewStudy'\r\n  );\r\n  return promptTrackNewStudy({ servicesManager, extensionManager }, ctx, evt);\r\n};\r\n\r\nconst promptLabelAnnotationWrapper = ({ servicesManager }, ctx, evt) => {\r\n  const { customizationService } = servicesManager.services;\r\n  const promptLabelAnnotation = customizationService.getCustomization(\r\n    'measurement.promptLabelAnnotation'\r\n  );\r\n  return promptLabelAnnotation({ servicesManager }, ctx, evt);\r\n};\r\n\r\nconst promptSaveReportWrapper = (\r\n  { servicesManager, commandsManager, extensionManager },\r\n  ctx,\r\n  evt\r\n) => {\r\n  const { customizationService } = servicesManager.services;\r\n  const promptSaveReport = customizationService.getCustomization('measurement.promptSaveReport');\r\n  return promptSaveReport({ servicesManager, commandsManager, extensionManager }, ctx, evt);\r\n};\r\n\r\nconst promptHasDirtyAnnotationsWrapper = (\r\n  { servicesManager, commandsManager, extensionManager },\r\n  ctx,\r\n  evt\r\n) => {\r\n  const { customizationService } = servicesManager.services;\r\n  const promptHasDirtyAnnotations = customizationService.getCustomization(\r\n    'measurement.promptHasDirtyAnnotations'\r\n  );\r\n  return promptHasDirtyAnnotations(\r\n    { servicesManager, commandsManager, extensionManager },\r\n    ctx,\r\n    evt\r\n  );\r\n};\r\n\r\nexport {\r\n  promptBeginTrackingWrapper,\r\n  promptHydrateStructuredReportWrapper,\r\n  promptTrackNewSeriesWrapper,\r\n  promptTrackNewStudyWrapper,\r\n  promptLabelAnnotationWrapper,\r\n  promptSaveReportWrapper,\r\n  promptHasDirtyAnnotationsWrapper,\r\n};\r\n","import React, { useContext, useEffect, useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Machine } from 'xstate';\r\nimport { useMachine } from '@xstate/react';\r\nimport { useViewportGrid } from '@ohif/ui-next';\r\nimport { machineConfiguration, defaultOptions, RESPONSE } from './measurementTrackingMachine';\r\nimport { measurementTrackingMode } from './promptBeginTracking';\r\nimport hydrateStructuredReport from './hydrateStructuredReport';\r\nimport { useAppConfig } from '@state';\r\nimport {\r\n  promptBeginTrackingWrapper,\r\n  promptHydrateStructuredReportWrapper,\r\n  promptTrackNewSeriesWrapper,\r\n  promptTrackNewStudyWrapper,\r\n  promptLabelAnnotationWrapper,\r\n  promptSaveReportWrapper,\r\n  promptHasDirtyAnnotationsWrapper,\r\n} from './promptWrapperFunctions';\r\n\r\nconst TrackedMeasurementsContext = React.createContext();\r\nTrackedMeasurementsContext.displayName = 'TrackedMeasurementsContext';\r\nconst useTrackedMeasurements = () => useContext(TrackedMeasurementsContext);\r\n\r\nconst SR_SOP_CLASS_HANDLER_ID =\r\n  '@ohif/extension-cornerstone-dicom-sr.sopClassHandlerModule.dicom-sr';\r\nconst COMPREHENSIVE_3D_SR_SOP_CLASS_HANDLER_ID =\r\n  '@ohif/extension-cornerstone-dicom-sr.sopClassHandlerModule.dicom-sr-3d';\r\n\r\nconst hasValidSOPClassHandlerId = displaySet => {\r\n  return [SR_SOP_CLASS_HANDLER_ID, COMPREHENSIVE_3D_SR_SOP_CLASS_HANDLER_ID].includes(\r\n    displaySet.SOPClassHandlerId\r\n  );\r\n};\r\n\r\n/**\r\n *\r\n * @param {*} param0\r\n */\r\nfunction TrackedMeasurementsContextProvider(\r\n  { servicesManager, commandsManager, extensionManager }: withAppTypes, // Bound by consumer\r\n  { children } // Component props\r\n) {\r\n  const [appConfig] = useAppConfig();\r\n\r\n  const [viewportGrid, viewportGridService] = useViewportGrid();\r\n  const { activeViewportId, viewports } = viewportGrid;\r\n  const {\r\n    measurementService,\r\n    displaySetService,\r\n    customizationService,\r\n    trackedMeasurementsService,\r\n  } = servicesManager.services as AppTypes.Services;\r\n\r\n  const machineOptions = Object.assign({}, defaultOptions);\r\n  machineOptions.actions = Object.assign({}, machineOptions.actions, {\r\n    jumpToFirstMeasurementInActiveViewport: (ctx, evt) => {\r\n      const { trackedStudy, trackedSeries } = ctx;\r\n      const { viewportId: activeViewportId } = evt.data;\r\n      const measurements = measurementService.getMeasurements();\r\n      const trackedMeasurements = measurements.filter(\r\n        m => trackedStudy === m.referenceStudyUID && trackedSeries.includes(m.referenceSeriesUID)\r\n      );\r\n\r\n      console.log(\r\n        'jumping to measurement reset viewport',\r\n        activeViewportId,\r\n        trackedMeasurements[0]\r\n      );\r\n\r\n      const referencedDisplaySetUID = trackedMeasurements[0].displaySetInstanceUID;\r\n      const referencedDisplaySet = displaySetService.getDisplaySetByUID(referencedDisplaySetUID);\r\n\r\n      const referencedImages = referencedDisplaySet.images;\r\n      const isVolumeIdReferenced = referencedImages[0].imageId.startsWith('volumeId');\r\n\r\n      const measurementData = trackedMeasurements[0].data;\r\n\r\n      let imageIndex = 0;\r\n      if (!isVolumeIdReferenced && measurementData) {\r\n        // if it is imageId referenced find the index of the imageId, we don't have\r\n        // support for volumeId referenced images yet\r\n        imageIndex = referencedImages.findIndex(image => {\r\n          const imageIdToUse = Object.keys(measurementData)[0].substring(8);\r\n          return image.imageId === imageIdToUse;\r\n        });\r\n\r\n        if (imageIndex === -1) {\r\n          console.warn('Could not find image index for tracked measurement, using 0');\r\n          imageIndex = 0;\r\n        }\r\n      }\r\n\r\n      viewportGridService.setDisplaySetsForViewport({\r\n        viewportId: activeViewportId,\r\n        displaySetInstanceUIDs: [referencedDisplaySetUID],\r\n        viewportOptions: {\r\n          initialImageOptions: {\r\n            index: imageIndex,\r\n          },\r\n        },\r\n      });\r\n    },\r\n\r\n    jumpToSameImageInActiveViewport: (ctx, evt) => {\r\n      const { trackedStudy, trackedSeries } = ctx;\r\n      const { viewportId: activeViewportId } = evt.data;\r\n      const measurements = measurementService.getMeasurements();\r\n      const trackedMeasurements = measurements.filter(\r\n        m => trackedStudy === m.referenceStudyUID && trackedSeries.includes(m.referenceSeriesUID)\r\n      );\r\n\r\n      // Jump to the last tracked measurement - most recent\r\n      if (!trackedMeasurements?.length) {\r\n        console.warn(\r\n          \"Didn't find any tracked measurements\",\r\n          measurements,\r\n          trackedStudy,\r\n          trackedSeries\r\n        );\r\n        return;\r\n      }\r\n      const trackedMeasurement = trackedMeasurements[trackedMeasurements.length - 1];\r\n      const referencedDisplaySetUID = trackedMeasurement.displaySetInstanceUID;\r\n\r\n      // update the previously stored positionPresentation with the new viewportId\r\n      // presentation so that when we put the referencedDisplaySet back in the viewport\r\n      // it will be in the correct position zoom and pan\r\n      commandsManager.runCommand('updateStoredPositionPresentation', {\r\n        viewportId: activeViewportId,\r\n        displaySetInstanceUIDs: [referencedDisplaySetUID],\r\n        referencedImageId: trackedMeasurement.referencedImageId,\r\n      });\r\n\r\n      viewportGridService.setDisplaySetsForViewport({\r\n        viewportId: activeViewportId,\r\n        displaySetInstanceUIDs: [referencedDisplaySetUID],\r\n      });\r\n    },\r\n    showStructuredReportDisplaySetInActiveViewport: (ctx, evt) => {\r\n      if (evt.data.createdDisplaySetInstanceUIDs.length > 0) {\r\n        const StructuredReportDisplaySetInstanceUID = evt.data.createdDisplaySetInstanceUIDs[0];\r\n\r\n        viewportGridService.setDisplaySetsForViewport({\r\n          viewportId: evt.data.viewportId,\r\n          displaySetInstanceUIDs: [StructuredReportDisplaySetInstanceUID],\r\n        });\r\n      }\r\n    },\r\n    discardPreviouslyTrackedMeasurements: (ctx, evt) => {\r\n      const measurements = measurementService.getMeasurements();\r\n      const filteredMeasurements = measurements.filter(ms =>\r\n        ctx.prevTrackedSeries.includes(ms.referenceSeriesUID)\r\n      );\r\n      const measurementIds = filteredMeasurements.map(fm => fm.id);\r\n\r\n      for (let i = 0; i < measurementIds.length; i++) {\r\n        measurementService.remove(measurementIds[i]);\r\n      }\r\n    },\r\n    clearAllMeasurements: (ctx, evt) => {\r\n      measurementService.clearMeasurements();\r\n      measurementService.setIsMeasurementDeletedIndividually(false);\r\n    },\r\n    clearDisplaySetHydratedState: (ctx, evt) => {\r\n      const { displaySetInstanceUID } = evt.data ?? evt;\r\n\r\n      const displaysets = displaySetService.getActiveDisplaySets();\r\n      displaysets?.forEach(displayset => {\r\n        if (\r\n          displayset.Modality === 'SR' &&\r\n          displayset.displaySetInstanceUID !== displaySetInstanceUID &&\r\n          displayset.isHydrated\r\n        ) {\r\n          displayset.isHydrated = false;\r\n          displayset.isLoaded = false;\r\n        }\r\n      });\r\n    },\r\n    updatedViewports: (ctx, evt) => {\r\n      const { hangingProtocolService } = servicesManager.services;\r\n      const { displaySetInstanceUID, viewportId } = evt.data ?? evt;\r\n\r\n      const updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\r\n        viewportId,\r\n        displaySetInstanceUID\r\n      );\r\n\r\n      viewportGridService.setDisplaySetsForViewports(updatedViewports);\r\n    },\r\n  });\r\n  machineOptions.services = Object.assign({}, machineOptions.services, {\r\n    promptBeginTracking: promptBeginTrackingWrapper.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n    promptTrackNewSeries: promptTrackNewSeriesWrapper.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n    promptTrackNewStudy: promptTrackNewStudyWrapper.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n    promptSaveReport: promptSaveReportWrapper.bind(null, {\r\n      servicesManager,\r\n      commandsManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n    promptHydrateStructuredReport: promptHydrateStructuredReportWrapper.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      commandsManager,\r\n      appConfig,\r\n    }),\r\n    promptHasDirtyAnnotations: promptHasDirtyAnnotationsWrapper.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      commandsManager,\r\n      appConfig,\r\n    }),\r\n    hydrateStructuredReport: hydrateStructuredReport.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      commandsManager,\r\n      appConfig,\r\n    }),\r\n    promptLabelAnnotation: promptLabelAnnotationWrapper.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      commandsManager,\r\n    }),\r\n  });\r\n  machineOptions.guards = Object.assign({}, machineOptions.guards, {\r\n    isLabelOnMeasure: (ctx, evt, condMeta) => {\r\n      const labelConfig = customizationService.getCustomization('measurementLabels');\r\n      return labelConfig?.labelOnMeasure;\r\n    },\r\n    isLabelOnMeasureAndShouldKillMachine: (ctx, evt, condMeta) => {\r\n      const labelConfig = customizationService.getCustomization('measurementLabels');\r\n      return evt.data && evt.data.userResponse === RESPONSE.NO_NEVER && labelConfig?.labelOnMeasure;\r\n    },\r\n    isSimplifiedConfig: (ctx, evt, condMeta) => {\r\n      return appConfig?.measurementTrackingMode === measurementTrackingMode.SIMPLIFIED;\r\n    },\r\n    simplifiedAndLoadSR: (ctx, evt, condMeta) => {\r\n      return (\r\n        appConfig?.measurementTrackingMode === measurementTrackingMode.SIMPLIFIED &&\r\n        evt.data.isBackupSave === false\r\n      );\r\n    },\r\n    hasDirtyAndSimplified: (ctx, evt, condMeta) => {\r\n      const measurements = measurementService.getMeasurements();\r\n      const hasDirtyMeasurements =\r\n        measurements.some(measurement => measurement.isDirty) ||\r\n        (measurements.length && measurementService.getIsMeasurementDeletedIndividually());\r\n      return (\r\n        appConfig?.measurementTrackingMode === measurementTrackingMode.SIMPLIFIED &&\r\n        hasDirtyMeasurements\r\n      );\r\n    },\r\n  });\r\n\r\n  // TODO: IMPROVE\r\n  // - Add measurement_updated to cornerstone; debounced? (ext side, or consumption?)\r\n  // - Friendlier transition/api in front of measurementTracking machine?\r\n  // - Blocked: viewport overlay shouldn't clip when resized\r\n  // TODO: PRIORITY\r\n  // - Fix \"ellipses\" series description dynamic truncate length\r\n  // - Fix viewport border resize\r\n  // - created/destroyed hooks for extensions (cornerstone measurement subscriptions in it's `init`)\r\n\r\n  const measurementTrackingMachine = useMemo(() => {\r\n    return Machine(machineConfiguration, machineOptions);\r\n  }, []); // Empty dependency array ensures this is only created once\r\n\r\n  const [trackedMeasurements, sendTrackedMeasurementsEvent] = useMachine(\r\n    measurementTrackingMachine\r\n  );\r\n\r\n  // Update TrackedMeasurementsService when trackedSeries changes in context\r\n  useEffect(() => {\r\n    if (trackedMeasurements?.context?.trackedSeries && trackedMeasurementsService) {\r\n      trackedMeasurementsService.updateTrackedSeries(trackedMeasurements.context.trackedSeries);\r\n    }\r\n  }, [trackedMeasurements?.context?.trackedSeries, trackedMeasurementsService]);\r\n\r\n  useEffect(() => {\r\n    // Update the state machine with the active viewport ID\r\n    sendTrackedMeasurementsEvent('UPDATE_ACTIVE_VIEWPORT_ID', {\r\n      activeViewportId,\r\n    });\r\n  }, [activeViewportId, sendTrackedMeasurementsEvent]);\r\n\r\n  // ~~ Listen for changes to ViewportGrid for potential SRs hung in panes when idle\r\n  useEffect(() => {\r\n    const triggerPromptHydrateFlow = async () => {\r\n      if (viewports.size > 0) {\r\n        const activeViewport = viewports.get(activeViewportId);\r\n\r\n        if (!activeViewport || !activeViewport?.displaySetInstanceUIDs?.length) {\r\n          return;\r\n        }\r\n\r\n        // Todo: Getting the first displaySetInstanceUID is wrong, but we don't have\r\n        // tracking fusion viewports yet. This should change when we do.\r\n        const { displaySetService } = servicesManager.services;\r\n        const displaySet = displaySetService.getDisplaySetByUID(\r\n          activeViewport.displaySetInstanceUIDs[0]\r\n        );\r\n\r\n        if (!displaySet) {\r\n          return;\r\n        }\r\n\r\n        // If this is an SR produced by our SR SOPClassHandler,\r\n        // and it hasn't been loaded yet, do that now so we\r\n        // can check if it can be rehydrated or not.\r\n        //\r\n        // Note: This happens:\r\n        // - If the viewport is not currently an OHIFCornerstoneSRViewport\r\n        // - If the displaySet has never been hung\r\n        //\r\n        // Otherwise, the displaySet will be loaded by the useEffect handler\r\n        // listening to displaySet changes inside OHIFCornerstoneSRViewport.\r\n        // The issue here is that this handler in TrackedMeasurementsContext\r\n        // ends up occurring before the Viewport is created, so the displaySet\r\n        // is not loaded yet, and isRehydratable is undefined unless we call load().\r\n        if (hasValidSOPClassHandlerId(displaySet) && !displaySet.isLoaded && displaySet.load) {\r\n          await displaySet.load();\r\n        }\r\n\r\n        // Magic string\r\n        // load function added by our sopClassHandler module\r\n        if (\r\n          hasValidSOPClassHandlerId(displaySet) &&\r\n          displaySet.isRehydratable === true &&\r\n          !displaySet.isHydrated\r\n        ) {\r\n          const params = {\r\n            displaySetInstanceUID: displaySet.displaySetInstanceUID,\r\n            SeriesInstanceUID: displaySet.SeriesInstanceUID,\r\n            viewportId: activeViewportId,\r\n          };\r\n\r\n          // Check if we should bypass the confirmation prompt\r\n          const disableConfirmationPrompts = appConfig?.disableConfirmationPrompts;\r\n\r\n          if (disableConfirmationPrompts) {\r\n            sendTrackedMeasurementsEvent('HYDRATE_SR', params);\r\n          } else {\r\n            sendTrackedMeasurementsEvent('PROMPT_HYDRATE_SR', params);\r\n          }\r\n        }\r\n      }\r\n    };\r\n    triggerPromptHydrateFlow();\r\n  }, [\r\n    trackedMeasurements,\r\n    activeViewportId,\r\n    sendTrackedMeasurementsEvent,\r\n    servicesManager.services,\r\n    viewports,\r\n    appConfig,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    // The command needs to be bound to the context's sendTrackedMeasurementsEvent\r\n    // so the command has to be registered in a React component.\r\n    commandsManager.registerCommand('DEFAULT', 'loadTrackedSRMeasurements', {\r\n      commandFn: props => sendTrackedMeasurementsEvent('HYDRATE_SR', props),\r\n    });\r\n  }, [commandsManager, sendTrackedMeasurementsEvent]);\r\n\r\n  return (\r\n    <TrackedMeasurementsContext.Provider\r\n      value={[trackedMeasurements, sendTrackedMeasurementsEvent]}\r\n    >\r\n      {children}\r\n    </TrackedMeasurementsContext.Provider>\r\n  );\r\n}\r\n\r\nTrackedMeasurementsContextProvider.propTypes = {\r\n  children: PropTypes.oneOf([PropTypes.func, PropTypes.node]),\r\n  appConfig: PropTypes.object,\r\n};\r\n\r\nexport { TrackedMeasurementsContext, TrackedMeasurementsContextProvider, useTrackedMeasurements };\r\n","import {\r\n  TrackedMeasurementsContext,\r\n  TrackedMeasurementsContextProvider,\r\n  useTrackedMeasurements,\r\n} from './contexts';\r\n\r\nfunction getContextModule({ servicesManager, extensionManager, commandsManager }) {\r\n  const BoundTrackedMeasurementsContextProvider = TrackedMeasurementsContextProvider.bind(null, {\r\n    servicesManager,\r\n    extensionManager,\r\n    commandsManager,\r\n  });\r\n\r\n  return [\r\n    {\r\n      name: 'TrackedMeasurementsContext',\r\n      context: TrackedMeasurementsContext,\r\n      provider: BoundTrackedMeasurementsContextProvider,\r\n    },\r\n  ];\r\n}\r\n\r\nexport { useTrackedMeasurements };\r\nexport default getContextModule;\r\n","import React from 'react';\r\nimport { FooterAction } from '@ohif/ui-next';\r\n\r\nexport function UntrackSeriesModal({ hide, onConfirm, message }) {\r\n  return (\r\n    <div className=\"text-foreground text-[13px]\">\r\n      <div>\r\n        <p>{message}</p>\r\n        <p className=\"mt-2\">\r\n          This action cannot be undone and will delete all your existing measurements.\r\n        </p>\r\n      </div>\r\n      <FooterAction className=\"mt-4\">\r\n        <FooterAction.Right>\r\n          <FooterAction.Secondary onClick={hide}>Cancel</FooterAction.Secondary>\r\n          <FooterAction.Primary\r\n            onClick={() => {\r\n              onConfirm();\r\n              hide();\r\n            }}\r\n          >\r\n            Untrack\r\n          </FooterAction.Primary>\r\n        </FooterAction.Right>\r\n      </FooterAction>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSystem } from '@ohif/core';\r\nimport PanelStudyBrowser from '@ohif/extension-default/src/Panels/StudyBrowser/PanelStudyBrowser';\r\nimport { UntrackSeriesModal } from './untrackSeriesModal';\r\nimport { useTrackedMeasurements } from '../../getContextModule';\r\n\r\nconst thumbnailNoImageModalities = ['SR', 'SEG', 'RTSTRUCT', 'RTPLAN', 'RTDOSE', 'PMAP'];\r\n\r\n/**\r\n * Panel component for the Study Browser with tracking capabilities\r\n */\r\nexport default function PanelStudyBrowserTracking({\r\n  getImageSrc,\r\n  getStudiesForPatientByMRN,\r\n  requestDisplaySetCreationForStudy,\r\n  dataSource,\r\n}) {\r\n  const { servicesManager } = useSystem();\r\n  const { displaySetService, uiModalService, measurementService, viewportGridService } =\r\n    servicesManager.services;\r\n  const [trackedMeasurements, sendTrackedMeasurementsEvent] = useTrackedMeasurements();\r\n  const { trackedSeries } = trackedMeasurements.context;\r\n\r\n  const checkDirtyMeasurements = displaySetInstanceUID => {\r\n    const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n    if (displaySet.Modality === 'SR' || displaySet.Modality === 'ANN') {\r\n      const activeViewportId = viewportGridService.getActiveViewportId();\r\n      sendTrackedMeasurementsEvent('CHECK_DIRTY', {\r\n        viewportId: activeViewportId,\r\n        displaySetInstanceUID: displaySetInstanceUID,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const subscriptionOndropFired = viewportGridService.subscribe(\r\n      viewportGridService.EVENTS.VIEWPORT_ONDROP_HANDLED,\r\n      ({ eventData }) => {\r\n        checkDirtyMeasurements(eventData.displaySetInstanceUID);\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      subscriptionOndropFired.unsubscribe();\r\n    };\r\n  }, []);\r\n  const onClickUntrack = displaySetInstanceUID => {\r\n    const onConfirm = () => {\r\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n      sendTrackedMeasurementsEvent('UNTRACK_SERIES', {\r\n        SeriesInstanceUID: displaySet.SeriesInstanceUID,\r\n      });\r\n      const measurements = measurementService.getMeasurements();\r\n      measurements.forEach(m => {\r\n        if (m.referenceSeriesUID === displaySet.SeriesInstanceUID) {\r\n          measurementService.remove(m.uid);\r\n        }\r\n      });\r\n    };\r\n\r\n    uiModalService.show({\r\n      title: 'Untrack Series',\r\n      content: UntrackSeriesModal,\r\n      contentProps: {\r\n        onConfirm,\r\n        message: 'Are you sure you want to untrack this series?',\r\n      },\r\n    });\r\n  };\r\n\r\n  // Custom mapping function to add tracking data to display sets\r\n  const mapDisplaySetsWithTracking = (\r\n    displaySets,\r\n    displaySetLoadingState,\r\n    thumbnailImageSrcMap,\r\n    viewports\r\n  ) => {\r\n    const thumbnailDisplaySets = [];\r\n    const thumbnailNoImageDisplaySets = [];\r\n    displaySets\r\n      .filter(ds => !ds.excludeFromThumbnailBrowser)\r\n      .forEach(ds => {\r\n        const { thumbnailSrc, displaySetInstanceUID } = ds;\r\n        const componentType = getComponentType(ds);\r\n\r\n        const array =\r\n          componentType === 'thumbnailTracked' ? thumbnailDisplaySets : thumbnailNoImageDisplaySets;\r\n\r\n        const loadingProgress = displaySetLoadingState?.[displaySetInstanceUID];\r\n\r\n        array.push({\r\n          displaySetInstanceUID,\r\n          description: ds.SeriesDescription || '',\r\n          seriesNumber: ds.SeriesNumber,\r\n          modality: ds.Modality,\r\n          seriesDate: ds.SeriesDate ? new Date(ds.SeriesDate).toLocaleDateString() : '',\r\n          numInstances: ds.numImageFrames,\r\n          loadingProgress,\r\n          countIcon: ds.countIcon,\r\n          messages: ds.messages,\r\n          StudyInstanceUID: ds.StudyInstanceUID,\r\n          componentType,\r\n          imageSrc: thumbnailSrc || thumbnailImageSrcMap[displaySetInstanceUID],\r\n          dragData: {\r\n            type: 'displayset',\r\n            displaySetInstanceUID,\r\n          },\r\n          isTracked: trackedSeries.includes(ds.SeriesInstanceUID),\r\n          isHydratedForDerivedDisplaySet: ds.isHydrated,\r\n        });\r\n      });\r\n\r\n    return [...thumbnailDisplaySets, ...thumbnailNoImageDisplaySets];\r\n  };\r\n\r\n  // Override component type to use tracking specific components\r\n  const getComponentType = ds => {\r\n    if (\r\n      thumbnailNoImageModalities.includes(ds.Modality) ||\r\n      ds.unsupported ||\r\n      ds.thumbnailSrc === null\r\n    ) {\r\n      return 'thumbnailNoImage';\r\n    }\r\n    return 'thumbnailTracked';\r\n  };\r\n\r\n  return (\r\n    <PanelStudyBrowser\r\n      getImageSrc={getImageSrc}\r\n      getStudiesForPatientByMRN={getStudiesForPatientByMRN}\r\n      requestDisplaySetCreationForStudy={requestDisplaySetCreationForStudy}\r\n      dataSource={dataSource}\r\n      customMapDisplaySets={mapDisplaySetsWithTracking}\r\n      onClickUntrack={onClickUntrack}\r\n      onDoubleClickThumbnailHandlerCallBack={checkDirtyMeasurements}\r\n    />\r\n  );\r\n}\r\n\r\nPanelStudyBrowserTracking.propTypes = {\r\n  dataSource: PropTypes.shape({\r\n    getImageIdsForDisplaySet: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  getImageSrc: PropTypes.func.isRequired,\r\n  getStudiesForPatientByMRN: PropTypes.func.isRequired,\r\n  requestDisplaySetCreationForStudy: PropTypes.func.isRequired,\r\n};\r\n","/**\r\n * @param {*} cornerstone\r\n * @param {*} imageId\r\n */\r\nfunction getImageSrcFromImageId(cornerstone, imageId) {\r\n  return new Promise((resolve, reject) => {\r\n    const canvas = document.createElement('canvas');\r\n    cornerstone.utilities\r\n      .loadImageToCanvas({ canvas, imageId, thumbnail: true })\r\n      .then(imageId => {\r\n        resolve(canvas.toDataURL());\r\n      })\r\n      .catch(reject);\r\n  });\r\n}\r\n\r\nexport default getImageSrcFromImageId;\r\n","import React, { useCallback } from 'react';\r\n//\r\nimport PanelStudyBrowserTracking from './PanelStudyBrowserTracking';\r\nimport getImageSrcFromImageId from './getImageSrcFromImageId';\r\nimport { requestDisplaySetCreationForStudy } from '@ohif/extension-default';\r\nimport { useSystem } from '@ohif/core';\r\n\r\nfunction _getStudyForPatientUtility(extensionManager) {\r\n  const utilityModule = extensionManager.getModuleEntry(\r\n    '@ohif/extension-default.utilityModule.common'\r\n  );\r\n\r\n  const { getStudiesForPatientByMRN } = utilityModule.exports;\r\n  return getStudiesForPatientByMRN;\r\n}\r\n\r\n/**\r\n * Wraps the PanelStudyBrowser and provides features afforded by managers/services\r\n *\r\n * @param {object} params\r\n * @param {object} commandsManager\r\n * @param {object} extensionManager\r\n */\r\nfunction WrappedPanelStudyBrowserTracking() {\r\n  const { extensionManager } = useSystem();\r\n  const dataSource = extensionManager.getActiveDataSource()[0];\r\n\r\n  const getStudiesForPatientByMRN = _getStudyForPatientUtility(extensionManager);\r\n  const _getStudiesForPatientByMRN = getStudiesForPatientByMRN.bind(null, dataSource);\r\n  const _getImageSrcFromImageId = useCallback(\r\n    _createGetImageSrcFromImageIdFn(extensionManager),\r\n    []\r\n  );\r\n  const _requestDisplaySetCreationForStudy = requestDisplaySetCreationForStudy.bind(\r\n    null,\r\n    dataSource\r\n  );\r\n\r\n  return (\r\n    <PanelStudyBrowserTracking\r\n      dataSource={dataSource}\r\n      getImageSrc={_getImageSrcFromImageId}\r\n      getStudiesForPatientByMRN={_getStudiesForPatientByMRN}\r\n      requestDisplaySetCreationForStudy={_requestDisplaySetCreationForStudy}\r\n    />\r\n  );\r\n}\r\n\r\n/**\r\n * Grabs cornerstone library reference using a dependent command from\r\n * the @ohif/extension-cornerstone extension. Then creates a helper function\r\n * that can take an imageId and return an image src.\r\n *\r\n * @param {func} getCommand - CommandManager's getCommand method\r\n * @returns {func} getImageSrcFromImageId - A utility function powered by\r\n * cornerstone\r\n */\r\nfunction _createGetImageSrcFromImageIdFn(extensionManager) {\r\n  const utilities = extensionManager.getModuleEntry(\r\n    '@ohif/extension-cornerstone.utilityModule.common'\r\n  );\r\n\r\n  try {\r\n    const { cornerstone } = utilities.exports.getCornerstoneLibraries();\r\n    return getImageSrcFromImageId.bind(null, cornerstone);\r\n  } catch (ex) {\r\n    throw new Error('Required command not found');\r\n  }\r\n}\r\n\r\nexport default WrappedPanelStudyBrowserTracking;\r\n","import React from 'react';\r\nimport { useSystem, utils } from '@ohif/core';\r\nimport { AccordionTrigger, MeasurementTable, ScrollArea, useViewportGrid } from '@ohif/ui-next';\r\nimport {\r\n  PanelMeasurement,\r\n  StudyMeasurements,\r\n  StudySummaryFromMetadata,\r\n  AccordionGroup,\r\n  StudyMeasurementsActions,\r\n  MeasurementsOrAdditionalFindings,\r\n} from '@ohif/extension-cornerstone';\r\n\r\nimport { useTrackedMeasurements } from '../getContextModule';\r\nimport { UntrackSeriesModal } from './PanelStudyBrowserTracking/untrackSeriesModal';\r\n\r\nconst { filterMeasurementsBySeriesUID, filterAny } =\r\n  utils.MeasurementFilters;\r\n\r\nfunction PanelMeasurementTableTracking(props) {\r\n  const [viewportGrid] = useViewportGrid();\r\n  const { servicesManager } = useSystem();\r\n  const { measurementService, uiModalService } = servicesManager.services;\r\n\r\n  const [trackedMeasurements, sendTrackedMeasurementsEvent] = useTrackedMeasurements();\r\n  const { trackedStudy, trackedSeries } = trackedMeasurements.context;\r\n  const measurementFilter = trackedStudy\r\n    ? filterMeasurementsBySeriesUID(trackedSeries)\r\n    : filterAny;\r\n\r\n  const onUntrackConfirm = () => {\r\n    sendTrackedMeasurementsEvent('UNTRACK_ALL', {});\r\n  };\r\n\r\n  const onDelete = () => {\r\n    const hasDirtyMeasurements = measurementService\r\n      .getMeasurements()\r\n      .some(measurement => measurement.isDirty);\r\n    hasDirtyMeasurements\r\n      ? uiModalService.show({\r\n          title: 'Untrack Study',\r\n          content: UntrackSeriesModal,\r\n          contentProps: {\r\n            onConfirm: onUntrackConfirm,\r\n            message: 'Are you sure you want to untrack study and delete all measurements?',\r\n          },\r\n        })\r\n      : onUntrackConfirm();\r\n  };\r\n\r\n  const EmptyComponent = () => (\r\n    <div data-cy=\"trackedMeasurements-panel\">\r\n      <MeasurementTable\r\n        title=\"Measurements\"\r\n        isExpanded={false}\r\n      >\r\n        <MeasurementTable.Body />\r\n      </MeasurementTable>\r\n    </div>\r\n  );\r\n\r\n  const actions = {\r\n    createSR: ({ StudyInstanceUID }) => {\r\n      sendTrackedMeasurementsEvent('SAVE_REPORT', {\r\n        viewportId: viewportGrid.activeViewportId,\r\n        isBackupSave: true,\r\n        StudyInstanceUID,\r\n        measurementFilter,\r\n      });\r\n    },\r\n    onDelete,\r\n  };\r\n\r\n  const Header = props => (\r\n    <AccordionTrigger\r\n      asChild={true}\r\n      className=\"px-0\"\r\n    >\r\n      <div data-cy=\"TrackingHeader\">\r\n        <StudySummaryFromMetadata\r\n          {...props}\r\n          actions={actions}\r\n        />\r\n      </div>\r\n    </AccordionTrigger>\r\n  );\r\n\r\n  return (\r\n    <ScrollArea>\r\n      <div data-cy=\"trackedMeasurements-panel\">\r\n        <PanelMeasurement\r\n          measurementFilter={measurementFilter}\r\n          emptyComponent={EmptyComponent}\r\n          sourceChildren={props.children}\r\n        >\r\n          <StudyMeasurements grouping={props.grouping}>\r\n            <AccordionGroup.Trigger\r\n              key=\"trackingMeasurementsHeader\"\r\n              asChild={true}\r\n            >\r\n              <Header key=\"trackingHeadChild\" />\r\n            </AccordionGroup.Trigger>\r\n            <MeasurementsOrAdditionalFindings\r\n              key=\"measurementsOrAdditionalFindings\"\r\n              activeStudyUID={trackedStudy}\r\n              customHeader={StudyMeasurementsActions}\r\n              measurementFilter={measurementFilter}\r\n              actions={actions}\r\n            />\r\n          </StudyMeasurements>\r\n        </PanelMeasurement>\r\n      </div>\r\n    </ScrollArea>\r\n  );\r\n}\r\n\r\nexport default PanelMeasurementTableTracking;\r\n","import { Types } from '@ohif/core';\r\nimport { PanelMeasurementTableTracking, PanelStudyBrowserTracking } from './panels';\r\nimport i18n from 'i18next';\r\nimport React from 'react';\r\n\r\n// TODO:\r\n// - No loading UI exists yet\r\n// - cancel promises when component is destroyed\r\n// - show errors in UI for thumbnails if promise fails\r\n\r\nfunction getPanelModule({ commandsManager, extensionManager, servicesManager }): Types.Panel[] {\r\n  return [\r\n    {\r\n      name: 'seriesList',\r\n      iconName: 'tab-studies',\r\n      iconLabel: 'Studies',\r\n      label: i18n.t('SidePanel:Studies'),\r\n      component: props => <PanelStudyBrowserTracking {...props} />,\r\n    },\r\n    {\r\n      name: 'trackedMeasurements',\r\n      iconName: 'tab-linear',\r\n      iconLabel: 'Measure',\r\n      label: i18n.t('SidePanel:Measurements'),\r\n      component: props => (\r\n        <PanelMeasurementTableTracking\r\n          {...props}\r\n          key=\"trackedMeasurements-panel\"\r\n          commandsManager={commandsManager}\r\n          extensionManager={extensionManager}\r\n          servicesManager={servicesManager}\r\n        />\r\n      ),\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getPanelModule;\r\n","import React from 'react';\r\nimport { utils } from '@ohif/extension-cornerstone';\r\n\r\nconst Component = React.lazy(() => {\r\n  return import(/* webpackPrefetch: true */ './viewports/TrackedCornerstoneViewport');\r\n});\r\n\r\nconst OHIFCornerstoneViewport = props => {\r\n  return (\r\n    <React.Suspense fallback={<div>Loading...</div>}>\r\n      <Component {...props} />\r\n    </React.Suspense>\r\n  );\r\n};\r\n\r\nfunction getViewportModule({ servicesManager, commandsManager, extensionManager }) {\r\n  const ExtendedOHIFCornerstoneTrackingViewport = props => {\r\n    return (\r\n      <OHIFCornerstoneViewport\r\n        servicesManager={servicesManager}\r\n        commandsManager={commandsManager}\r\n        extensionManager={extensionManager}\r\n        {...props}\r\n      />\r\n    );\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: 'cornerstone-tracked',\r\n      component: ExtendedOHIFCornerstoneTrackingViewport,\r\n      isReferenceViewable: utils.isReferenceViewable.bind(null, servicesManager),\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getViewportModule;\r\n","import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\n\r\nexport { id };\r\n","const RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n};\r\n\r\nfunction promptHasDirtyAnnotations({ servicesManager }: withAppTypes, ctx, evt) {\r\n  const { viewportId, displaySetInstanceUID } = evt.data || evt;\r\n\r\n  return new Promise(async function (resolve, reject) {\r\n    const { uiViewportDialogService, customizationService } = servicesManager.services;\r\n\r\n    const promptResult = await _askSaveDiscardOrCancel(\r\n      uiViewportDialogService,\r\n      customizationService,\r\n      viewportId\r\n    );\r\n\r\n    resolve({\r\n      displaySetInstanceUID,\r\n      userResponse: promptResult,\r\n      viewportId,\r\n      isBackupSave: false,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askSaveDiscardOrCancel(\r\n  UIViewportDialogService: AppTypes.UIViewportDialogService,\r\n  customizationService: AppTypes.CustomizationService,\r\n  viewportId\r\n) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = customizationService.getCustomization(\r\n      'viewportNotification.discardDirtyMessage'\r\n    );\r\n    const actions = [\r\n      { id: 'cancel', type: 'cancel', text: 'Cancel', value: RESPONSE.CANCEL },\r\n      {\r\n        id: 'discard-existing',\r\n        type: 'secondary',\r\n        text: 'No, discard existing',\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n      {\r\n        id: 'save-existing',\r\n        type: 'primary',\r\n        text: 'Yes',\r\n        value: RESPONSE.CREATE_REPORT,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      UIViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    UIViewportDialogService.show({\r\n      viewportId,\r\n      id: 'measurement-tracking-prompt-dirty-measurement',\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        UIViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n      onKeyPress: event => {\r\n        if (event.key === 'Enter') {\r\n          const action = actions.find(action => action.id === 'save-existing');\r\n          onSubmit(action.value);\r\n        }\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptHasDirtyAnnotations;\r\n","import { utils } from '@ohif/extension-cornerstone';\r\n\r\nfunction promptHydrateStructuredReport({ servicesManager, commandsManager }, ctx, evt) {\r\n  const { displaySetService } = servicesManager.services;\r\n  const { viewportId, displaySetInstanceUID } = evt;\r\n  const srDisplaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n\r\n  const hydrateCallback = async () => {\r\n    return commandsManager.runCommand('hydrateSecondaryDisplaySet', {\r\n      displaySet: srDisplaySet,\r\n      viewportId,\r\n    });\r\n  };\r\n\r\n  // For SR we need to use the whole context\r\n  const enhancedSrDisplaySet = {\r\n    ...srDisplaySet,\r\n    displaySetInstanceUID,\r\n  };\r\n\r\n  return utils.promptHydrationDialog({\r\n    servicesManager,\r\n    viewportId,\r\n    displaySet: enhancedSrDisplaySet,\r\n    hydrateCallback,\r\n    type: 'SR',\r\n  });\r\n}\r\n\r\nexport default promptHydrateStructuredReport;\r\n","import { measurementTrackingMode } from './promptBeginTracking';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n};\r\n\r\nfunction promptTrackNewSeries({ servicesManager, extensionManager }, ctx, evt) {\r\n  const { UIViewportDialogService, customizationService } = servicesManager.services;\r\n  // When the state change happens after a promise, the state machine sends the retult in evt.data;\r\n  // In case of direct transition to the state, the state machine sends the data in evt;\r\n  const { viewportId, StudyInstanceUID, SeriesInstanceUID } = evt.data || evt;\r\n\r\n  return new Promise(async function (resolve, reject) {\r\n    const appConfig = extensionManager._appConfig;\r\n\r\n    const showPrompt = appConfig?.measurementTrackingMode === measurementTrackingMode.STANDARD;\r\n    let promptResult = showPrompt\r\n      ? await _askShouldAddMeasurements(UIViewportDialogService, customizationService, viewportId)\r\n      : RESPONSE.ADD_SERIES;\r\n\r\n    if (promptResult === RESPONSE.CREATE_REPORT) {\r\n      promptResult = ctx.isDirty\r\n        ? await _askSaveDiscardOrCancel(UIViewportDialogService, customizationService, viewportId)\r\n        : RESPONSE.SET_STUDY_AND_SERIES;\r\n    }\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUID,\r\n      viewportId,\r\n      isBackupSave: false,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askShouldAddMeasurements(uiViewportDialogService, customizationService, viewportId) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = customizationService.getCustomization(\r\n      'viewportNotification.trackNewSeriesMessage'\r\n    );\r\n    const actions = [\r\n      {\r\n        type: 'secondary',\r\n        text: 'Cancel',\r\n        value: RESPONSE.CANCEL,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: 'Create new report',\r\n        value: RESPONSE.CREATE_REPORT,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: 'Add to existing report',\r\n        value: RESPONSE.ADD_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      uiViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    uiViewportDialogService.show({\r\n      viewportId,\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        uiViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askSaveDiscardOrCancel(UIViewportDialogService, customizationService, viewportId) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = customizationService.getCustomization(\r\n      'viewportNotification.discardSeriesMessage'\r\n    );\r\n\r\n    const actions = [\r\n      { type: 'secondary', text: 'Cancel', value: RESPONSE.CANCEL },\r\n      {\r\n        type: 'secondary',\r\n        text: 'Save',\r\n        value: RESPONSE.CREATE_REPORT,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: 'Discard',\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      UIViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    UIViewportDialogService.show({\r\n      viewportId,\r\n      type: 'warning',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        UIViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptTrackNewSeries;\r\n","import i18n from 'i18next';\r\nimport { measurementTrackingMode } from './promptBeginTracking';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n};\r\n\r\nfunction promptTrackNewStudy({ servicesManager, extensionManager }: withAppTypes, ctx, evt) {\r\n  const { uiViewportDialogService, customizationService } = servicesManager.services;\r\n  // When the state change happens after a promise, the state machine sends the retult in evt.data;\r\n  // In case of direct transition to the state, the state machine sends the data in evt;\r\n  const { viewportId, StudyInstanceUID, SeriesInstanceUID } = evt.data || evt;\r\n\r\n  return new Promise(async function (resolve, reject) {\r\n    const appConfig = extensionManager._appConfig;\r\n\r\n    const standardMode = appConfig?.measurementTrackingMode === measurementTrackingMode.STANDARD;\r\n    const simplifiedMode =\r\n      appConfig?.measurementTrackingMode === measurementTrackingMode.SIMPLIFIED;\r\n    let promptResult = standardMode\r\n      ? await _askTrackMeasurements(uiViewportDialogService, customizationService, viewportId)\r\n      : RESPONSE.SET_STUDY_AND_SERIES;\r\n\r\n    if (promptResult === RESPONSE.SET_STUDY_AND_SERIES) {\r\n      promptResult =\r\n        ctx.isDirty && (standardMode || simplifiedMode)\r\n          ? await _askSaveDiscardOrCancel(uiViewportDialogService, customizationService, viewportId)\r\n          : RESPONSE.SET_STUDY_AND_SERIES;\r\n    }\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUID,\r\n      viewportId,\r\n      isBackupSave: false,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askTrackMeasurements(\r\n  UIViewportDialogService: AppTypes.UIViewportDialogService,\r\n  customizationService: AppTypes.CustomizationService,\r\n  viewportId\r\n) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = customizationService.getCustomization(\r\n      'viewportNotification.trackNewStudyMessage'\r\n    );\r\n    const actions = [\r\n      { type: 'cancel', text: i18n.t('MeasurementTable:No'), value: RESPONSE.CANCEL },\r\n      {\r\n        type: 'secondary',\r\n        text: i18n.t('MeasurementTable:No, do not ask again'),\r\n        value: RESPONSE.NO_NOT_FOR_SERIES,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: i18n.t('MeasurementTable:Yes'),\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      UIViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    UIViewportDialogService.show({\r\n      viewportId,\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        UIViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n      onKeyPress: event => {\r\n        if (event.key === 'Enter') {\r\n          const action = actions.find(action => action.value === RESPONSE.SET_STUDY_AND_SERIES);\r\n          onSubmit(action.value);\r\n        }\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askSaveDiscardOrCancel(\r\n  UIViewportDialogService: AppTypes.UIViewportDialogService,\r\n  customizationService: AppTypes.CustomizationService,\r\n  viewportId\r\n) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = customizationService.getCustomization(\r\n      'viewportNotification.discardStudyMessage'\r\n    );\r\n    const actions = [\r\n      { type: 'cancel', text: 'Cancel', value: RESPONSE.CANCEL },\r\n      {\r\n        type: 'secondary',\r\n        text: 'No, discard previously tracked series & measurements',\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: 'Yes',\r\n        value: RESPONSE.CREATE_REPORT,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      UIViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    UIViewportDialogService.show({\r\n      viewportId,\r\n      type: 'warning',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        UIViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptTrackNewStudy;\r\n","import promptBeginTracking from '../contexts/TrackedMeasurementsContext/promptBeginTracking';\r\nimport promptHasDirtyAnnotations from '../contexts/TrackedMeasurementsContext/promptHasDirtyAnnotations';\r\nimport promptHydrateStructuredReport from '../contexts/TrackedMeasurementsContext/promptHydrateStructuredReport';\r\nimport promptTrackNewSeries from '../contexts/TrackedMeasurementsContext/promptTrackNewSeries';\r\nimport promptTrackNewStudy from '../contexts/TrackedMeasurementsContext/promptTrackNewStudy';\r\nimport { promptLabelAnnotation, promptSaveReport } from '@ohif/extension-default';\r\n\r\nexport default {\r\n  'measurement.promptBeginTracking': promptBeginTracking,\r\n  'measurement.promptHydrateStructuredReport': promptHydrateStructuredReport,\r\n  'measurement.promptTrackNewSeries': promptTrackNewSeries,\r\n  'measurement.promptTrackNewStudy': promptTrackNewStudy,\r\n  'measurement.promptLabelAnnotation': promptLabelAnnotation,\r\n  'measurement.promptSaveReport': promptSaveReport,\r\n  'measurement.promptHasDirtyAnnotations': promptHasDirtyAnnotations,\r\n};\r\n","import { measurementTrackingMode } from '../contexts/TrackedMeasurementsContext/promptBeginTracking';\r\n\r\ntype CheckHasDirtyAndSimplifiedModeProps = {\r\n  servicesManager: AppTypes.ServicesManager;\r\n  appConfig: AppTypes.Config;\r\n  displaySetInstanceUID: string;\r\n};\r\n\r\nconst onDoubleClickHandler = {\r\n  callbacks: [\r\n    ({ activeViewportId, servicesManager, isHangingProtocolLayout, appConfig }) =>\r\n      async displaySetInstanceUID => {\r\n        const { hangingProtocolService, viewportGridService, uiNotificationService } =\r\n          servicesManager.services;\r\n        let updatedViewports = [];\r\n        const viewportId = activeViewportId;\r\n        const haveDirtyMeasurementsInSimplifiedMode = checkHasDirtyAndSimplifiedMode({\r\n          servicesManager,\r\n          appConfig,\r\n          displaySetInstanceUID,\r\n        });\r\n\r\n        try {\r\n          if (!haveDirtyMeasurementsInSimplifiedMode) {\r\n            updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\r\n              viewportId,\r\n              displaySetInstanceUID,\r\n              isHangingProtocolLayout\r\n            );\r\n            viewportGridService.setDisplaySetsForViewports(updatedViewports);\r\n          }\r\n        } catch (error) {\r\n          console.warn(error);\r\n          uiNotificationService.show({\r\n            title: 'Thumbnail Double Click',\r\n            message: 'The selected display sets could not be added to the viewport.',\r\n            type: 'error',\r\n            duration: 3000,\r\n          });\r\n        }\r\n      },\r\n  ],\r\n};\r\n\r\nconst customOnDropHandlerCallback = async props => {\r\n  const handled = checkHasDirtyAndSimplifiedMode(props);\r\n  return Promise.resolve({ handled });\r\n};\r\n\r\nconst checkHasDirtyAndSimplifiedMode = (props: CheckHasDirtyAndSimplifiedModeProps) => {\r\n  const { servicesManager, appConfig, displaySetInstanceUID } = props;\r\n  const simplifiedMode = appConfig.measurementTrackingMode === measurementTrackingMode.SIMPLIFIED;\r\n  const { measurementService, displaySetService } = servicesManager.services;\r\n  const measurements = measurementService.getMeasurements();\r\n  const haveDirtyMeasurements =\r\n    measurements.some(m => m.isDirty) ||\r\n    (measurements.length && measurementService.getIsMeasurementDeletedIndividually());\r\n  const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n  const hasDirtyAndSimplifiedMode =\r\n    displaySet.Modality === 'SR' && simplifiedMode && haveDirtyMeasurements;\r\n  return hasDirtyAndSimplifiedMode;\r\n};\r\n\r\nexport { onDoubleClickHandler, customOnDropHandlerCallback };\r\n","import { PubSubService } from '@ohif/core';\r\n\r\nconst EVENTS = {\r\n  TRACKED_SERIES_CHANGED: 'event::trackedmeasurements:trackedserieschanged',\r\n  SERIES_ADDED: 'event::trackedmeasurements:seriesadded',\r\n  SERIES_REMOVED: 'event::trackedmeasurements:seriesremoved',\r\n  TRACKING_ENABLED: 'event::trackedmeasurements:trackingenabled',\r\n  TRACKING_DISABLED: 'event::trackedmeasurements:trackingdisabled',\r\n};\r\n\r\n/**\r\n * Service class for accessing tracked measurements data.\r\n * This service provides a robust way to access tracked series information\r\n * from anywhere in the application, including outside of React components.\r\n */\r\nexport class TrackedMeasurementsService extends PubSubService {\r\n  public static readonly REGISTRATION = {\r\n    name: 'trackedMeasurementsService',\r\n    altName: 'TrackedMeasurementsService',\r\n    create: ({ configuration = {} }) => {\r\n      return new TrackedMeasurementsService();\r\n    },\r\n  };\r\n\r\n  private _trackedSeries: string[] = [];\r\n\r\n  constructor() {\r\n    super(EVENTS);\r\n  }\r\n\r\n  /**\r\n   * Updates the tracked series and notifies subscribers\r\n   * @param trackedSeries Array of series UIDs being tracked\r\n   */\r\n  public updateTrackedSeries(trackedSeries: string[]): void {\r\n    if (!trackedSeries) {\r\n      trackedSeries = [];\r\n    }\r\n\r\n    const hasChanged =\r\n      this._trackedSeries.length !== trackedSeries.length ||\r\n      this._trackedSeries.some((seriesUID, index) => seriesUID !== trackedSeries[index]);\r\n\r\n    if (hasChanged) {\r\n      const oldSeries = [...this._trackedSeries];\r\n      this._trackedSeries = [...trackedSeries];\r\n\r\n      const wasEmpty = oldSeries.length === 0;\r\n      const isEmpty = trackedSeries.length === 0;\r\n\r\n      if (wasEmpty && !isEmpty) {\r\n        this._broadcastEvent(EVENTS.TRACKING_ENABLED, {\r\n          trackedSeries: this.getTrackedSeries(),\r\n        });\r\n      } else if (!wasEmpty && isEmpty) {\r\n        this._broadcastEvent(EVENTS.TRACKING_DISABLED, {\r\n          trackedSeries: this.getTrackedSeries(),\r\n        });\r\n      }\r\n\r\n      this._broadcastEvent(EVENTS.TRACKED_SERIES_CHANGED, {\r\n        trackedSeries: this.getTrackedSeries(),\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a single series to tracking\r\n   * @param seriesInstanceUID Series instance UID to add to tracking\r\n   */\r\n  public addTrackedSeries(seriesInstanceUID: string): void {\r\n    if (!seriesInstanceUID || this.isSeriesTracked(seriesInstanceUID)) {\r\n      return;\r\n    }\r\n\r\n    const wasEmpty = this._trackedSeries.length === 0;\r\n    this._trackedSeries = [...this._trackedSeries, seriesInstanceUID];\r\n\r\n    this._broadcastEvent(EVENTS.SERIES_ADDED, {\r\n      seriesInstanceUID,\r\n      trackedSeries: this.getTrackedSeries(),\r\n    });\r\n\r\n    if (wasEmpty) {\r\n      this._broadcastEvent(EVENTS.TRACKING_ENABLED, {\r\n        trackedSeries: this.getTrackedSeries(),\r\n      });\r\n    }\r\n\r\n    this._broadcastEvent(EVENTS.TRACKED_SERIES_CHANGED, {\r\n      trackedSeries: this.getTrackedSeries(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Removes a single series from tracking\r\n   * @param seriesInstanceUID Series instance UID to remove from tracking\r\n   */\r\n  public removeTrackedSeries(seriesInstanceUID: string): void {\r\n    if (!seriesInstanceUID || !this.isSeriesTracked(seriesInstanceUID)) {\r\n      return;\r\n    }\r\n\r\n    this._trackedSeries = this._trackedSeries.filter(uid => uid !== seriesInstanceUID);\r\n\r\n    this._broadcastEvent(EVENTS.SERIES_REMOVED, {\r\n      seriesInstanceUID,\r\n      trackedSeries: this.getTrackedSeries(),\r\n    });\r\n\r\n    if (this._trackedSeries.length === 0) {\r\n      this._broadcastEvent(EVENTS.TRACKING_DISABLED, {\r\n        trackedSeries: this.getTrackedSeries(),\r\n      });\r\n    }\r\n\r\n    this._broadcastEvent(EVENTS.TRACKED_SERIES_CHANGED, {\r\n      trackedSeries: this.getTrackedSeries(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Retrieves the currently tracked series\r\n   * @returns Array of series UIDs being tracked\r\n   */\r\n  public getTrackedSeries(): string[] {\r\n    return [...this._trackedSeries];\r\n  }\r\n\r\n  /**\r\n   * Checks if a specific series is being tracked\r\n   * @param seriesInstanceUID Series instance UID to check\r\n   * @returns boolean indicating if series is tracked\r\n   */\r\n  public isSeriesTracked(seriesInstanceUID: string): boolean {\r\n    return this._trackedSeries.includes(seriesInstanceUID);\r\n  }\r\n\r\n  /**\r\n   * Resets the service state\r\n   */\r\n  public reset(): void {\r\n    const wasTracking = this._trackedSeries.length > 0;\r\n    this._trackedSeries = [];\r\n\r\n    if (wasTracking) {\r\n      this._broadcastEvent(EVENTS.TRACKING_DISABLED, {\r\n        trackedSeries: [],\r\n      });\r\n\r\n      this._broadcastEvent(EVENTS.TRACKED_SERIES_CHANGED, {\r\n        trackedSeries: [],\r\n      });\r\n    }\r\n\r\n    super.reset();\r\n  }\r\n\r\n  /**\r\n   * Checks if any series are being tracked\r\n   * @returns boolean indicating if tracking is active\r\n   */\r\n  public isTrackingEnabled(): boolean {\r\n    return this._trackedSeries.length > 0;\r\n  }\r\n}\r\n\r\nexport default TrackedMeasurementsService;\r\n","import getContextModule from './getContextModule';\r\nimport getPanelModule from './getPanelModule';\r\nimport getViewportModule from './getViewportModule';\r\nimport { id } from './id.js';\r\nimport { measurementTrackingMode } from './contexts/TrackedMeasurementsContext/promptBeginTracking';\r\nimport getCustomizationModule from './getCustomizationModule';\r\nimport {\r\n  onDoubleClickHandler,\r\n  customOnDropHandlerCallback,\r\n} from './customizations/studyBrowserCustomization';\r\nimport { TrackedMeasurementsService } from './services';\r\n// Import types to ensure they're included in the build\r\nimport './types';\r\n\r\nconst measurementTrackingExtension = {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   */\r\n  id,\r\n\r\n  getContextModule,\r\n  getPanelModule,\r\n  getViewportModule,\r\n\r\n  /**\r\n   * Service configuration\r\n   */\r\n  preRegistration({ servicesManager }) {\r\n    servicesManager.registerService(TrackedMeasurementsService.REGISTRATION);\r\n  },\r\n\r\n  onModeEnter({ servicesManager }) {\r\n    const { customizationService, toolbarService, trackedMeasurementsService } =\r\n      servicesManager.services;\r\n\r\n    toolbarService.registerEventForToolbarUpdate(trackedMeasurementsService, [\r\n      trackedMeasurementsService.EVENTS.TRACKED_SERIES_CHANGED,\r\n      trackedMeasurementsService.EVENTS.SERIES_ADDED,\r\n      trackedMeasurementsService.EVENTS.SERIES_REMOVED,\r\n      trackedMeasurementsService.EVENTS.TRACKING_ENABLED,\r\n      trackedMeasurementsService.EVENTS.TRACKING_DISABLED,\r\n    ]);\r\n\r\n    customizationService.setCustomizations({\r\n      'studyBrowser.thumbnailDoubleClickCallback': {\r\n        $set: onDoubleClickHandler,\r\n      },\r\n      customOnDropHandler: {\r\n        $set: customOnDropHandlerCallback,\r\n      },\r\n    });\r\n  },\r\n  getCustomizationModule,\r\n};\r\n\r\nexport default measurementTrackingExtension;\r\n\r\nexport { measurementTrackingMode };\r\n","import measurementTrackingPrompts from './customizations/measurementTrackingPrompts';\r\n\r\nexport default function getCustomizationModule() {\r\n  return [\r\n    {\r\n      name: 'default',\r\n      value: { ...measurementTrackingPrompts },\r\n    },\r\n  ];\r\n}\r\n"],"names":["RESPONSE","measurementTrackingMode","STANDARD","SIMPLIFIED","NONE","servicesManager","extensionManager","ctx","evt","uiViewportDialogService","customizationService","services","appConfig","_appConfig","viewportId","StudyInstanceUID","SeriesInstanceUID","data","Promise","async","resolve","reject","standardMode","promptResult","message","getCustomization","actions","id","type","text","i18n","t","value","onSubmit","result","hide","show","onOutsideClick","onKeyPress","event","key","action","find","_askTrackMeasurements","userResponse","machineConfiguration","initial","context","activeViewportId","trackedStudy","trackedSeries","ignoredSeries","prevTrackedStudy","prevTrackedSeries","prevIgnoredSeries","ignoredSRSeriesForHydration","isDirty","states","off","labellingOnly","on","TRACK_SERIES","target","idle","entry","cond","SET_TRACKED_SERIES","PROMPT_HYDRATE_SR","RESTORE_PROMPT_HYDRATE_SR","HYDRATE_SR","UPDATE_ACTIVE_VIEWPORT_ID","assign","_","promptBeginTracking","invoke","src","onDone","onError","tracking","UNTRACK_SERIES","UNTRACK_ALL","SAVE_REPORT","SET_DIRTY","CHECK_DIRTY","promptTrackNewSeries","promptTrackNewStudy","promptSaveReport","promptHydrateStructuredReport","hydrateStructuredReport","promptLabelAnnotation","promptHasDirtyAnnotations","strict","defaultOptions","discardPreviouslyTrackedMeasurements","console","log","clearAllMeasurements","jumpToFirstMeasurementInActiveViewport","warn","showStructuredReportDisplaySetInActiveViewport","clearContext","setTrackedStudyAndSeries","slice","setTrackedStudyAndMultipleSeries","studyInstanceUID","seriesInstanceUIDs","SeriesInstanceUIDs","setIsDirtyToClean","setIsDirty","ignoreSeries","ignoreHydrationForSRSeries","srSeriesInstanceUID","addTrackedSeries","removeTrackedSeries","filter","ser","setPreviousState","meta","prevState","state","guards","shouldSetDirty","undefined","includes","wasLabellingOnly","condMeta","wasIdle","wasTracking","wasTrackingAndIsNewStudy","wasTrackingAndIsNewSeries","shouldKillMachine","shouldAddSeries","shouldSetStudyAndSeries","shouldAddIgnoredSeries","shouldPromptSaveReport","shouldIgnoreHydrationForSR","shouldSaveAndContinueWithSameReport","isBackupSave","shouldSaveAndStartNewReport","shouldHydrateStructuredReport","hasRemainingTrackedSeries","length","hasNotIgnoredSRSeriesForHydration","isNewStudy","isNewSeries","commandsManager","displaySetService","displaySetInstanceUID","srDisplaySet","getDisplaySetByUID","hydrationResult","baseHydrateStructuredReport","promptBeginTrackingWrapper","promptHydrateStructuredReportWrapper","promptTrackNewSeriesWrapper","promptTrackNewStudyWrapper","promptLabelAnnotationWrapper","promptSaveReportWrapper","promptHasDirtyAnnotationsWrapper","TrackedMeasurementsContext","React","displayName","useTrackedMeasurements","useContext","SR_SOP_CLASS_HANDLER_ID","COMPREHENSIVE_3D_SR_SOP_CLASS_HANDLER_ID","hasValidSOPClassHandlerId","displaySet","SOPClassHandlerId","TrackedMeasurementsContextProvider","children","useAppConfig","viewportGrid","viewportGridService","useViewportGrid","viewports","measurementService","trackedMeasurementsService","machineOptions","Object","trackedMeasurements","getMeasurements","m","referenceStudyUID","referenceSeriesUID","referencedDisplaySetUID","referencedImages","images","isVolumeIdReferenced","imageId","startsWith","measurementData","imageIndex","findIndex","image","imageIdToUse","keys","substring","setDisplaySetsForViewport","displaySetInstanceUIDs","viewportOptions","initialImageOptions","index","jumpToSameImageInActiveViewport","measurements","trackedMeasurement","runCommand","referencedImageId","createdDisplaySetInstanceUIDs","StructuredReportDisplaySetInstanceUID","measurementIds","ms","map","fm","i","remove","clearMeasurements","setIsMeasurementDeletedIndividually","clearDisplaySetHydratedState","displaysets","getActiveDisplaySets","forEach","displayset","Modality","isHydrated","isLoaded","updatedViewports","hangingProtocolService","getViewportsRequireUpdate","setDisplaySetsForViewports","bind","isLabelOnMeasure","labelConfig","labelOnMeasure","isLabelOnMeasureAndShouldKillMachine","isSimplifiedConfig","simplifiedAndLoadSR","hasDirtyAndSimplified","hasDirtyMeasurements","some","measurement","getIsMeasurementDeletedIndividually","measurementTrackingMachine","useMemo","Machine","sendTrackedMeasurementsEvent","useMachine","useEffect","updateTrackedSeries","size","activeViewport","get","load","isRehydratable","params","disableConfirmationPrompts","triggerPromptHydrateFlow","registerCommand","commandFn","props","Provider","propTypes","PropTypes","BoundTrackedMeasurementsContextProvider","name","provider","UntrackSeriesModal","onConfirm","className","FooterAction","Right","Secondary","onClick","Primary","thumbnailNoImageModalities","PanelStudyBrowserTracking","getImageSrc","getStudiesForPatientByMRN","requestDisplaySetCreationForStudy","dataSource","useSystem","uiModalService","checkDirtyMeasurements","getActiveViewportId","subscriptionOndropFired","subscribe","EVENTS","VIEWPORT_ONDROP_HANDLED","eventData","unsubscribe","getComponentType","ds","unsupported","thumbnailSrc","PanelStudyBrowser","customMapDisplaySets","mapDisplaySetsWithTracking","displaySets","displaySetLoadingState","thumbnailImageSrcMap","thumbnailDisplaySets","thumbnailNoImageDisplaySets","excludeFromThumbnailBrowser","componentType","array","loadingProgress","push","description","SeriesDescription","seriesNumber","SeriesNumber","modality","seriesDate","SeriesDate","Date","toLocaleDateString","numInstances","numImageFrames","countIcon","messages","imageSrc","dragData","isTracked","isHydratedForDerivedDisplaySet","onClickUntrack","title","content","contentProps","uid","onDoubleClickThumbnailHandlerCallBack","getImageIdsForDisplaySet","isRequired","cornerstone","canvas","document","createElement","utilities","loadImageToCanvas","thumbnail","then","toDataURL","catch","getActiveDataSource","_getStudiesForPatientByMRN","utilityModule","getModuleEntry","exports","_getStudyForPatientUtility","_getImageSrcFromImageId","useCallback","getCornerstoneLibraries","getImageSrcFromImageId","ex","Error","_createGetImageSrcFromImageIdFn","_requestDisplaySetCreationForStudy","filterMeasurementsBySeriesUID","filterAny","utils","MeasurementFilters","measurementFilter","onUntrackConfirm","createSR","onDelete","Header","AccordionTrigger","asChild","StudySummaryFromMetadata","_extends","ScrollArea","PanelMeasurement","emptyComponent","EmptyComponent","MeasurementTable","isExpanded","Body","sourceChildren","StudyMeasurements","grouping","AccordionGroup","Trigger","MeasurementsOrAdditionalFindings","activeStudyUID","customHeader","StudyMeasurementsActions","iconName","iconLabel","label","component","PanelMeasurementTableTracking","Component","OHIFCornerstoneViewport","fallback","isReferenceViewable","packageJson","UIViewportDialogService","_askSaveDiscardOrCancel","enhancedSrDisplaySet","promptHydrationDialog","hydrateCallback","_askShouldAddMeasurements","simplifiedMode","onDoubleClickHandler","callbacks","isHangingProtocolLayout","uiNotificationService","haveDirtyMeasurementsInSimplifiedMode","checkHasDirtyAndSimplifiedMode","error","duration","customOnDropHandlerCallback","handled","haveDirtyMeasurements","TRACKED_SERIES_CHANGED","SERIES_ADDED","SERIES_REMOVED","TRACKING_ENABLED","TRACKING_DISABLED","TrackedMeasurementsService","PubSubService","constructor","super","_trackedSeries","this","seriesUID","oldSeries","wasEmpty","isEmpty","_broadcastEvent","getTrackedSeries","seriesInstanceUID","isSeriesTracked","reset","isTrackingEnabled","_TrackedMeasurementsService","REGISTRATION","altName","create","configuration","getContextModule","getPanelModule","getViewportModule","preRegistration","registerService","onModeEnter","toolbarService","registerEventForToolbarUpdate","setCustomizations","$set","customOnDropHandler","getCustomizationModule","measurementTrackingPrompts"],"sourceRoot":""}