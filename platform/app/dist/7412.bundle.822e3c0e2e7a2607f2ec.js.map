{"version":3,"file":"7412.bundle.822e3c0e2e7a2607f2ec.js","mappings":"uJAEA,IAAIA,EAAS,CAAC,EACP,SAASC,IACZ,OAAOD,CACX,CACO,SAASE,EAAUC,GACtBH,EAASG,CACb,CAIA,IAAIC,GAAqB,EAClB,SAASC,IACZ,IAAKL,EAAOM,QAAQC,QAEhB,OADAC,QAAQC,KAAK,6SACN,KAEX,MAAMC,EAAUV,EAAOM,OAAOC,QAK9B,OAJKH,IACDM,EAAQC,OACRP,GAAqB,GAElBM,CACX,C,gDCxBA,MAiQA,EAjQ8B,CAC1B,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,I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","sources":["webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/config.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/constants/COLOR_LUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/MouseCursor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/ImageMouseCursor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/SVGCursorDescriptor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/SVGMouseCursor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/setCursorForElement.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawEllipse.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawEllipseByCoordinates.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawHandle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLine.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawPath.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawPolyline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawRectByCoordinates.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawTextBox.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawHeight.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawFan.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawArrow.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawRedactionRect.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/setAttributesIfNecessary.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/setNewAttributesIfValid.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/annotationInterpolationEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/cameraModifiedEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/cameraResetEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/imageRenderedEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/imageSpacingCalibratedEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/keyboardToolEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseToolEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchToolEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/mouse/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/touch/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/wheel/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/labelmap/onLabelmapSegmentationDataModified.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/labelmap/performVolumeLabelmapUpdate.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/labelmap/performStackLabelmapUpdate.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/segmentationDataModifiedEventListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/segmentationModifiedEventListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/imageChangeEventListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/contourSegmentation/contourSegmentationCompleted.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/annotationCompletedListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/annotationSelectionListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/annotationModifiedListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/annotationRemovedListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/contourSegmentation/contourSegmentationRemoved.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/segmentationRepresentationModifiedListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/init.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/AnnotationRenderingEngine.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/FrameOfReferenceSpecificAnnotationManager.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationLocking.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationSelection.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationVisibility.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/ToolStyle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/helpers.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/getState.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/getFont.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/helpers/state.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/AnnotationGroup.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationRenderingEngine.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationStateManager.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/activeSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/setActiveSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addColorLUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addSegmentationRepresentationsToViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/normalizeSegmentationInput.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addSegmentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationColor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getActiveSegmentIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getColorLUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getCurrentLabelmapImageIdForViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getNextColorLUTIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentationRepresentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getViewportIdsWithSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getViewportSegmentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/computeStackLabelmapFromVolume.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/computeVolumeLabelmapFromStack.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/getSegmentationActor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/updateSegmentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationVisibility.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/setSegmentationRepresentationVisibility.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/styleHelpers.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/clearSegmentValue.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeSegment.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/removeSegmentAnnotations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getLabelmapImageIds.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/internalAddSegmentationRepresentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeSegmentationRepresentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentLocking.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeColorLUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getStackSegmentationImageIdsForViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/updateLabelmapSegmentationImageReferences.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/convertContourHoles.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/decimateContours.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/getPolylineMap.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/extractSegmentPolylines.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/getAnnotationMapFromSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/getAnnotationsUIDMapFromSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/getViewportAssociatedToSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/removeCompleteContourAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/removeContourHoles.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/removeContourIslands.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/utilities/smoothContours.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/Synchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/createSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/destroy.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/destroySynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/getAllSynchronizers.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/getSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/getSynchronizersForViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getToolGroup.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/ToolGroup.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/createToolGroup.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/destroyToolGroup.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/destroy.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getAllToolGroups.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/addEnabledElement.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/addTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/cancelActiveManipulations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/removeEnabledElement.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/state.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/svgNodeCache.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/areViewportsCoplanar.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/cameraSyncCallback.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/imageSliceSyncCallback.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/presentationViewSyncCallback.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/slabThicknessSyncCallback.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/voiSyncCallback.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/zoomPanSyncCallback.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createCameraPositionSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createImageSliceSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createPresentationViewSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createSlabThicknessSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createVOISynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createZoomPanSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/AdvancedMagnifyTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/AnnotationEraserTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/CrosshairsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/MIPJumpToClickTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/MagnifyTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/OrientationMarkerTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/OverlayGridTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/PanTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/PlanarRotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ReferenceCursors.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ReferenceLinesTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ScaleOverlayTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/SculptorTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/SegmentationIntersectionTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/StackScrollTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/TrackballRotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/VolumeCroppingControlTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/VolumeCroppingTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/VolumeRotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/WindowLevelRegionTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/WindowLevelTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ZoomTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/AngleTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ArrowAnnotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/BidirectionalTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/CircleROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/CobbAngleTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/DragProbeTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ETDRSGridTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/EllipticalROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/HeightTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/KeyImageTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LabelTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LengthTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LivewireContourSegmentationTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LivewireContourTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ProbeTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RegionSegmentPlusTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RegionSegmentTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/SplineContourSegmentationTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/SplineROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundDirectionalTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/UltrasoundPleuraBLineTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/calculateFanShapeCorners.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/deriveFanGeometry.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/fanExtraction.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/generateConvexHullFromContour.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/segmentLargestUSOutlineFromBuffer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/VideoRedactionTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/WholeBodySegmentTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/BSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/CardinalSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/CatmullRomSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/CubicSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/LinearSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/QuadraticBezier.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/QuadraticSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/Spline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/AnnotationDisplayTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/BaseTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/contourDisplay.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/labelmapDisplay.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Surface/surfaceDisplay.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/BrushTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/CircleROIStartEndThresholdTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/CircleScissorsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/LabelmapEditWithContour.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/PaintFillTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleROIStartEndThresholdTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleROIThresholdTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleScissorsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SegmentBidirectionalTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SegmentLabelTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SegmentSelectTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SphereScissorsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/compositions/ensureImageVolume.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/compositions/ensureSegmentationVolume.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillCircle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillRectangle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/utils/getStrategyData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/types/ContourAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/AnnotationMultiSlice.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/annotationHydration.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/extend2DBoundingBoxInViewAxis.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/getBoundingBoxAroundShape.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/calibrateImageSpacing.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/events.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/playClip.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/state.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/addContourSegmentationAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/areSameSegment.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/areViewReferencesEqual.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/contourSegmentationOperation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/copyAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/getIntersectingAnnotations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/getViewReferenceFromAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/convertContourSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/isContourSegmentationAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/addPolylinesToSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/logicalOperators.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/mergeMultipleAnnotations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/polylineIntersect.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/polylineSubtract.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/polylineUnify.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/polylineXor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/removeContourSegmentationAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/sharedOperations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/calculatePerimeter.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/contourFinder.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/findHandlePolylineIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/findIslands.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/getContourHolesDataCanvas.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/getContourHolesDataWorld.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/getDeduplicatedVTKPolyDataPoints.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/areCoplanarContours.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/detectContourHoles.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/findContourHoles.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/generateContourSetsFromLabelmap.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/AnnotationToPointData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/interpolation/acceptAutogeneratedInterpolations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/updateContourPolyline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/dynamicVolume/generateImageFromTimeData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/dynamicVolume/getDataInTime.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getAnnotationNearPoint.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getCalibratedUnits.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getPixelValueUnits.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getSphereBoundsInfo.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getViewportsForAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/arePolylinesIdentical.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/containsPoints.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/decimate.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getSignedArea.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/isClosed.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/vec2/findClosestPoint.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/moveAnnotationToViewPlane.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/normalizeViewportPlane.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/orientation/getOrientationStringLPS.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/orientation/invertOrientationStringLPS.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/interpolation/interpolateSegmentPoints.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/pointInSurroundingSphereCallback.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/pointToString.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/polyData/utils.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/rectangleROITool/getBoundsIJKFromRectangleAnnotations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/rectangleROITool/isAxisAlignedRectangle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/registerComputeWorker.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/InterpolationManager/InterpolationManager.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/SegmentStatsCalculator.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/VolumetricCalculator.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/brushSizeForToolGroup.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/brushThresholdForToolGroup.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/computeMetabolicStats.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getReferenceVolumeForSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/contourAndFindLargestBidirectional.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/createBidirectionalToolData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/createLabelmapMemo.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/createLabelmapVolumeForViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/createMergedLabelmapForIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/findLargestBidirectional.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/floodFill.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getBrushToolInstances.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getHoveredContourSegmentationAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getOrCreateImageVolume.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getOrCreateSegmentationVolume.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getReferenceVolumeForSegmentationVolume.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getSegmentIndexAtLabelmapBorder.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getSegmentIndexAtWorldPoint.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getSegmentLargestBidirectional.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getStatistics.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getUniqueSegmentIndices.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/growCutShader.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runGrowCut.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runGrowCutForBoundingBox.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runGrowCutForSphere.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runOneClickGrowCut.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/invalidateBrushCursor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/isLineInSegment.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/islandRemoval.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/rectangleROIThresholdVolumeByRange.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/segmentContourAction.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/thresholdSegmentationByRange.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/thresholdVolumeByRange.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/utilities.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/utilsForWorker.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/validateLabelmap.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/setAnnotationLabel.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/stackPrefetch/stackContextPrefetch.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/stackPrefetch/stackPrefetch.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/touch/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRender.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForToolGroupIds.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/filterViewportsWithFrameOfReferenceUID.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/filterViewportsWithParallelNormals.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/filterViewportsWithToolEnabled.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/Colorbar.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/ViewportColorbar.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/enums/ColorbarRangeTextPosition.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/windowlevel/calculateMinMaxMean.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/windowlevel/extractWindowLevelRegionToolData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/windowlevel/getLuminanceFromRegion.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/version.js","webpack:///../../../node_modules/lodash.get/index.js"],"sourcesContent":["import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport Events from './enums/Events';\nlet config = {};\nexport function getConfig() {\n    return config;\n}\nexport function setConfig(newConfig) {\n    config = newConfig;\n}\nexport function getAddOns() {\n    return config.addons;\n}\nlet polysegInitialized = false;\nexport function getPolySeg() {\n    if (!config.addons?.polySeg) {\n        console.warn('PolySeg add-on not configured. This will prevent automatic conversion between segmentation representations (labelmap, contour, surface). To enable these features, install @cornerstonejs/polymorphic-segmentation and register it during initialization: cornerstoneTools.init({ addons: { polySeg } }).');\n        return null;\n    }\n    const polyseg = config.addons.polySeg;\n    if (!polysegInitialized) {\n        polyseg.init();\n        polysegInitialized = true;\n    }\n    return polyseg;\n}\n","const CORNERSTONE_COLOR_LUT = [\n    [0, 0, 0, 0],\n    [221, 84, 84, 255],\n    [77, 228, 121, 255],\n    [166, 70, 235, 255],\n    [189, 180, 116, 255],\n    [109, 182, 196, 255],\n    [204, 101, 157, 255],\n    [123, 211, 94, 255],\n    [93, 87, 218, 255],\n    [225, 128, 80, 255],\n    [73, 232, 172, 255],\n    [181, 119, 186, 255],\n    [176, 193, 112, 255],\n    [105, 153, 200, 255],\n    [208, 97, 120, 255],\n    [90, 215, 101, 255],\n    [135, 83, 222, 255],\n    [229, 178, 76, 255],\n    [122, 183, 181, 255],\n    [190, 115, 171, 255],\n    [149, 197, 108, 255],\n    [100, 118, 205, 255],\n    [212, 108, 93, 255],\n    [86, 219, 141, 255],\n    [183, 79, 226, 255],\n    [233, 233, 72, 255],\n    [118, 167, 187, 255],\n    [194, 111, 146, 255],\n    [116, 201, 104, 255],\n    [115, 96, 209, 255],\n    [216, 147, 89, 255],\n    [82, 223, 188, 255],\n    [230, 75, 224, 255],\n    [163, 184, 121, 255],\n    [114, 143, 191, 255],\n    [198, 107, 114, 255],\n    [99, 206, 122, 255],\n    [153, 92, 213, 255],\n    [220, 192, 85, 255],\n    [78, 215, 227, 255],\n    [234, 71, 173, 255],\n    [141, 188, 117, 255],\n    [110, 113, 195, 255],\n    [202, 128, 103, 255],\n    [95, 210, 157, 255],\n    [195, 88, 217, 255],\n    [206, 224, 81, 255],\n    [74, 166, 231, 255],\n    [185, 120, 139, 255],\n    [113, 192, 113, 255],\n    [133, 106, 199, 255],\n    [207, 162, 98, 255],\n    [91, 214, 198, 255],\n    [221, 84, 198, 255],\n    [159, 228, 77, 255],\n    [70, 111, 235, 255],\n    [189, 119, 116, 255],\n    [109, 196, 138, 255],\n    [165, 101, 204, 255],\n    [211, 201, 94, 255],\n    [87, 191, 218, 255],\n    [225, 80, 153, 255],\n    [106, 232, 73, 255],\n    [124, 119, 186, 255],\n    [193, 142, 112, 255],\n    [105, 200, 168, 255],\n    [203, 97, 208, 255],\n    [184, 215, 90, 255],\n    [83, 147, 222, 255],\n    [229, 76, 101, 255],\n    [122, 183, 130, 255],\n    [146, 115, 190, 255],\n    [197, 171, 108, 255],\n    [100, 205, 205, 255],\n    [212, 93, 177, 255],\n    [141, 219, 86, 255],\n    [79, 97, 226, 255],\n    [233, 99, 72, 255],\n    [118, 187, 150, 255],\n    [173, 111, 194, 255],\n    [197, 201, 104, 255],\n    [96, 171, 209, 255],\n    [216, 89, 137, 255],\n    [94, 223, 82, 255],\n    [107, 75, 230, 255],\n    [184, 153, 121, 255],\n    [114, 191, 175, 255],\n    [198, 107, 191, 255],\n    [166, 206, 99, 255],\n    [92, 132, 213, 255],\n    [220, 85, 91, 255],\n    [78, 227, 115, 255],\n    [159, 71, 234, 255],\n    [188, 176, 117, 255],\n    [110, 185, 195, 255],\n    [202, 103, 161, 255],\n    [129, 210, 95, 255],\n    [88, 88, 217, 255],\n    [224, 123, 81, 255],\n    [74, 231, 166, 255],\n    [177, 120, 185, 255],\n    [179, 192, 113, 255],\n    [106, 156, 199, 255],\n    [207, 98, 125, 255],\n    [91, 214, 96, 255],\n    [130, 84, 221, 255],\n    [228, 171, 77, 255],\n    [70, 235, 221, 255],\n    [189, 116, 174, 255],\n    [153, 196, 109, 255],\n    [101, 123, 204, 255],\n    [211, 104, 94, 255],\n    [87, 218, 136, 255],\n    [177, 80, 225, 255],\n    [232, 225, 73, 255],\n    [119, 169, 186, 255],\n    [193, 112, 149, 255],\n    [121, 200, 105, 255],\n    [111, 97, 208, 255],\n    [215, 142, 90, 255],\n    [83, 222, 181, 255],\n    [229, 76, 229, 255],\n    [165, 183, 122, 255],\n    [115, 146, 190, 255],\n    [197, 108, 119, 255],\n    [100, 205, 118, 255],\n    [148, 93, 212, 255],\n    [219, 186, 86, 255],\n    [79, 220, 226, 255],\n    [233, 72, 179, 255],\n    [144, 187, 118, 255],\n    [111, 118, 194, 255],\n    [201, 124, 104, 255],\n    [96, 209, 153, 255],\n    [189, 89, 216, 255],\n    [211, 223, 82, 255],\n    [75, 172, 230, 255],\n    [184, 121, 142, 255],\n    [117, 191, 114, 255],\n    [130, 107, 198, 255],\n    [206, 157, 99, 255],\n    [92, 213, 193, 255],\n    [220, 85, 203, 255],\n    [165, 227, 78, 255],\n    [71, 118, 234, 255],\n    [188, 117, 117, 255],\n    [110, 195, 135, 255],\n    [161, 103, 202, 255],\n    [210, 195, 95, 255],\n    [88, 195, 217, 255],\n    [224, 81, 158, 255],\n    [113, 231, 74, 255],\n    [123, 120, 185, 255],\n    [192, 139, 113, 255],\n    [106, 199, 164, 255],\n    [198, 98, 207, 255],\n    [188, 214, 91, 255],\n    [84, 153, 221, 255],\n    [228, 77, 108, 255],\n    [70, 235, 84, 255],\n    [143, 116, 189, 255],\n    [196, 167, 109, 255],\n    [101, 204, 199, 255],\n    [211, 94, 182, 255],\n    [147, 218, 87, 255],\n    [80, 104, 225, 255],\n    [232, 93, 73, 255],\n    [119, 186, 147, 255],\n    [170, 112, 193, 255],\n    [200, 200, 105, 255],\n    [97, 175, 208, 255],\n    [215, 90, 142, 255],\n    [100, 222, 83, 255],\n    [101, 76, 229, 255],\n    [183, 150, 122, 255],\n    [115, 190, 171, 255],\n    [197, 108, 194, 255],\n    [170, 205, 100, 255],\n    [93, 138, 212, 255],\n    [219, 86, 97, 255],\n    [79, 226, 110, 255],\n    [153, 72, 233, 255],\n    [187, 173, 118, 255],\n    [111, 187, 194, 255],\n    [201, 104, 165, 255],\n    [134, 209, 96, 255],\n    [89, 95, 216, 255],\n    [223, 117, 82, 255],\n    [75, 230, 159, 255],\n    [174, 121, 184, 255],\n    [182, 191, 114, 255],\n    [107, 160, 198, 255],\n    [206, 99, 130, 255],\n    [92, 213, 92, 255],\n    [124, 85, 220, 255],\n    [227, 165, 78, 255],\n    [71, 234, 214, 255],\n    [188, 117, 176, 255],\n    [156, 195, 110, 255],\n    [103, 128, 202, 255],\n    [210, 100, 95, 255],\n    [88, 217, 131, 255],\n    [170, 81, 224, 255],\n    [231, 218, 74, 255],\n    [120, 172, 185, 255],\n    [192, 113, 153, 255],\n    [125, 199, 106, 255],\n    [107, 98, 207, 255],\n    [214, 137, 91, 255],\n    [84, 221, 175, 255],\n    [222, 77, 228, 255],\n    [194, 235, 70, 255],\n    [116, 149, 189, 255],\n    [196, 109, 123, 255],\n    [101, 204, 114, 255],\n    [143, 94, 211, 255],\n    [218, 180, 87, 255],\n    [80, 225, 225, 255],\n    [232, 73, 186, 255],\n    [147, 186, 119, 255],\n    [112, 122, 193, 255],\n    [200, 121, 105, 255],\n    [97, 208, 148, 255],\n    [184, 90, 215, 255],\n    [216, 222, 83, 255],\n    [76, 178, 229, 255],\n    [183, 122, 145, 255],\n    [121, 190, 115, 255],\n    [126, 108, 197, 255],\n    [205, 153, 100, 255],\n    [93, 212, 187, 255],\n    [219, 86, 208, 255],\n    [171, 226, 79, 255],\n    [72, 126, 233, 255],\n    [187, 118, 121, 255],\n    [111, 194, 132, 255],\n    [157, 104, 201, 255],\n    [209, 190, 96, 255],\n    [89, 200, 216, 255],\n    [223, 82, 164, 255],\n    [120, 230, 75, 255],\n    [121, 121, 184, 255],\n    [191, 136, 114, 255],\n    [107, 198, 160, 255],\n    [192, 99, 206, 255],\n    [193, 213, 92, 255],\n    [85, 158, 220, 255],\n    [227, 78, 115, 255],\n    [71, 234, 78, 255],\n    [141, 117, 188, 255],\n    [195, 163, 110, 255],\n    [103, 202, 194, 255],\n    [210, 95, 186, 255],\n    [153, 217, 88, 255],\n    [81, 111, 224, 255],\n];\nexport default CORNERSTONE_COLOR_LUT;\n","const DEFINED_CURSORS = Symbol('DefinedCursors');\nconst STANDARD_CURSORS = new Set([\n    'alias',\n    'all-scroll',\n    'auto',\n    'cell',\n    'col-resize',\n    'context-menu',\n    'copy',\n    'crosshair',\n    'default',\n    'e-resize',\n    'ew-resize',\n    'grab',\n    'grabbing',\n    'help',\n    'move',\n    'ne-resize',\n    'nesw-resize',\n    'no-drop',\n    'none',\n    'not-allowed',\n    'n-resize',\n    'ns-resize',\n    'nw-resize',\n    'nwse-resize',\n    'pointer',\n    'progress',\n    'row-resize',\n    'se-resize',\n    's-resize',\n    'sw-resize',\n    'text',\n    'vertical-text',\n    'wait',\n    'w-resize',\n    'zoom-in',\n    'zoom-out',\n]);\nexport default class MouseCursor {\n    constructor(name, fallback) {\n        this.name = name + '';\n        this.fallback = fallback;\n    }\n    getName() {\n        return this.name + '';\n    }\n    addFallbackStyleProperty(style) {\n        const { fallback } = this;\n        if (fallback instanceof MouseCursor) {\n            return `${style}, ${fallback.getStyleProperty()}`;\n        }\n        return style + '';\n    }\n    getStyleProperty() {\n        return this.addFallbackStyleProperty(this.name) + '';\n    }\n    static getDefinedCursor(name) {\n        const definedCursors = getDefinedCursors(MouseCursor, DEFINED_CURSORS);\n        let mouseCursor = definedCursors.get(name);\n        if (mouseCursor instanceof MouseCursor) {\n            return mouseCursor;\n        }\n        if (STANDARD_CURSORS.has(name)) {\n            mouseCursor = new MouseCursor(name);\n            definedCursors.set(name, mouseCursor);\n            return mouseCursor;\n        }\n    }\n    static setDefinedCursor(name, cursor) {\n        if (cursor instanceof MouseCursor) {\n            const definedCursors = getDefinedCursors(MouseCursor, DEFINED_CURSORS);\n            definedCursors.set(name, cursor);\n            return true;\n        }\n        return false;\n    }\n}\nfunction getDefinedCursors(context, symbol) {\n    let definedCursors = context[symbol];\n    if (!(definedCursors instanceof Map)) {\n        definedCursors = new Map();\n        Object.defineProperty(context, symbol, { value: definedCursors });\n    }\n    return definedCursors;\n}\nconst standardCursorNames = STANDARD_CURSORS.values();\nexport { standardCursorNames };\n","import MouseCursor from './MouseCursor';\nconst ELEMENT_CURSORS_MAP = Symbol('ElementCursorsMap');\nfunction initElementCursor(element, cursor) {\n    _getElementCursors(element)[0] = cursor;\n    _setElementCursor(element, cursor);\n}\nfunction _setElementCursor(element, cursor) {\n    const cursors = _getElementCursors(element);\n    cursors[1] = cursors[0];\n    cursors[0] = cursor;\n    element.style.cursor = (cursor instanceof MouseCursor\n        ? cursor\n        : MouseCursor.getDefinedCursor('auto')).getStyleProperty();\n}\nfunction resetElementCursor(element) {\n    _setElementCursor(element, _getElementCursors(element)[1]);\n}\nfunction hideElementCursor(element) {\n    _setElementCursor(element, MouseCursor.getDefinedCursor('none'));\n}\nfunction _getElementCursors(element) {\n    let map = _getElementCursors[ELEMENT_CURSORS_MAP];\n    if (!(map instanceof WeakMap)) {\n        map = new WeakMap();\n        Object.defineProperty(_getElementCursors, ELEMENT_CURSORS_MAP, {\n            value: map,\n        });\n    }\n    let cursors = map.get(element);\n    if (!cursors) {\n        cursors = [null, null];\n        map.set(element, cursors);\n    }\n    return cursors;\n}\nexport { initElementCursor, resetElementCursor, hideElementCursor, _setElementCursor as setElementCursor, };\n","import { utilities } from '@cornerstonejs/core';\nimport MouseCursor from './MouseCursor';\nconst DEFAULT_NAME = 'image-cursor';\nexport default class ImageMouseCursor extends MouseCursor {\n    constructor(url, x, y, name, fallback) {\n        super(name || ImageMouseCursor.getUniqueInstanceName(DEFAULT_NAME), fallback);\n        this.url = url;\n        this.x = Number(x) || 0;\n        this.y = Number(y) || 0;\n    }\n    getStyleProperty() {\n        const { url, x, y } = this;\n        let style = `url('${url}')`;\n        if (x >= 0 && y >= 0 && (x > 0 || y > 0)) {\n            style += ` ${x} ${y}`;\n        }\n        return this.addFallbackStyleProperty(style);\n    }\n    static getUniqueInstanceName(prefix) {\n        return `${prefix}-${utilities.getRuntimeId(ImageMouseCursor)}`;\n    }\n}\n","const BASE = {\n    iconContent: '',\n    iconSize: 16,\n    viewBox: {\n        x: 16,\n        y: 16,\n    },\n    mousePoint: {\n        x: 8,\n        y: 8,\n    },\n    mousePointerGroupString: `\n    <path stroke=\"{{color}}\" d=\"M8 16L8 0\"></path>\n    <path stroke=\"{{color}}\" d=\"M16 8L0 8\"></path>\n  `,\n};\nconst SEGMENTATION_CURSOR_BOUNDARIES = {\n    x: 127,\n    y: 60,\n};\nconst MINUS_RECT = `\n<rect fill=\"{{color}}\" x=\"80.19\" y=\"25.03\" width=\"47.14\" height=\"15.85\"/>\n`;\nconst PLUS_RECT = `\n<rect fill=\"{{color}}\" x=\"80.19\" y=\"25.03\" width=\"47.14\" height=\"15.85\"/>\n<rect fill=\"{{color}}\" x=\"95.84\" y=\"9.38\" width=\"15.85\" height=\"47.14\"/>\n`;\nconst SCISSOR_ICON = `<path fill=\"{{color}}\" d=\"M82.89,10a12.09,12.09,0,0,0-16.8-2.5l-27.5,20.4-8.5-6.3a2.93,2.93,0,0,1-1.1-3,14.66,14.66,0,0,0,.1-6.6,14.08,14.08,0,1,0-6.5,15.2,2.87,2.87,0,0,1,3.2.2l8.2,6.1-8.2,6.1a2.87,2.87,0,0,1-3.2.2,14.16,14.16,0,1,0,6.7,14.4,14,14,0,0,0-.3-5.8,2.93,2.93,0,0,1,1.1-3l8.5-6.3,27.5,20.4A11.91,11.91,0,0,0,82.89,57l-31.7-23.5ZM15.29,21a5.9,5.9,0,1,1,5.9-5.9A5.91,5.91,0,0,1,15.29,21Zm0,36.8a5.9,5.9,0,1,1,5.9-5.9A5.91,5.91,0,0,1,15.29,57.77Zm28.3-21.5a2.8,2.8,0,1,1,2.8-2.8A2.8,2.8,0,0,1,43.59,36.27Z\" transform=\"translate(-1.17 -0.96)\"/>`;\nconst RECTANGLE_ICON = `<path fill=\"{{color}}\" d=\"M8.86,2.25V66.08H72.69V2.25H8.86ZM65.28,58.67h-49v-49h49v49Z\" transform=\"translate(-8.86 -2.25)\"/>`;\nconst CIRCLE_ICON = `<path fill=\"{{color}}\" d=\"M40.77,2.25A31.92,31.92,0,1,0,72.69,34.16,31.92,31.92,0,0,0,40.77,2.25Zm0,57.63A25.71,25.71,0,1,1,66.48,34.16,25.71,25.71,0,0,1,40.77,59.87Z\" transform=\"translate(-8.86 -2.25)\"/>`;\nconst CursorSVG = {\n    Angle: extend(BASE, {\n        name: 'Angle',\n        iconContent: `<path fill=\"{{color}}\" d=\"M1203 544q0 13-10 23l-393 393 393 393q10 10 10 23t-10 23l-50\n    50q-10 10-23 10t-23-10l-466-466q-10-10-10-23t10-23l466-466q10-10 23-10t23\n    10l50 50q10 10 10 23z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    ArrowAnnotate: extend(BASE, {\n        name: 'ArrowAnnotate',\n        iconContent: `<g id=\"arrowAnnotate-group\" fill=\"none\" stroke-width=\"1\" stroke=\"{{color}}\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path id=\"arrowAnnotate-arrow\" d=\"M23,7 l-15,15 M7,17 l0,6 6,0\" stroke-width=\"2\" />\n  </g>`,\n        viewBox: {\n            x: 24,\n            y: 24,\n        },\n    }),\n    Bidirectional: extend(BASE, {\n        name: 'Bidirectional',\n        iconContent: `<g fill=\"{{color}}\" stroke-width=\"3\" stroke=\"{{color}}\">\n    <path d=\"M27.63 3.21L3.12 28.81\"></path>\n    <path d=\"M27.63 15.75L15.27 4.43\"></path>\n    <path d=\"M16.5 4.28C16.5 4.96 15.95 5.51 15.27 5.51C14.59 5.51 14.03 4.96 14.03 4.28C14.03 3.59 14.59 3.04 15.27 3.04C15.95 3.04 16.5 3.59 16.5 4.28Z\" ></path>\n    <path d=\"M28.87 3.19C28.87 3.87 28.31 4.43 27.63 4.43C26.95 4.43 26.4 3.87 26.4 3.19C26.4 2.51 26.95 1.95 27.63 1.95C28.31 1.95 28.87 2.51 28.87 3.19Z\"></path>\n    <path d=\"M28.87 15.75C28.87 16.43 28.31 16.99 27.63 16.99C26.95 16.99 26.4 16.43 26.4 15.75C26.4 15.07 26.95 14.51 27.63 14.51C28.31 14.51 28.87 15.07 28.87 15.75Z\"></path>\n    <path d=\"M4.73 28.44C4.73 29.12 4.17 29.68 3.49 29.68C2.81 29.68 2.25 29.12 2.25 28.44C2.25 27.76 2.81 27.2 3.49 27.2C4.17 27.2 4.73 27.76 4.73 28.44Z\"></path>\n  </g>`,\n        viewBox: {\n            x: 48,\n            y: 48,\n        },\n    }),\n    CobbAngle: extend(BASE, {\n        name: 'CobbAngle',\n        iconContent: `<g stroke=\"{{color}}\" stroke-width=\"3\">\n    <path d=\"M28.59 2.34L3.82 12.32\"></path>\n    <path d=\"M28.59 29.66L3.82 19.68\"></path>\n    <path stroke-dasharray=\"2\" fill-opacity=\"0\" d=\"M12.37\n      23.06C12.67 22.36 12.85 21.93 12.92 21.76C14.6 17.8 14.68 13.35 13.15\n      9.33C13.11 9.24 13.02 9 12.88 8.63\">\n    </path>\n  </g>`,\n        viewBox: {\n            x: 32,\n            y: 32,\n        },\n    }),\n    CircleROI: extend(BASE, {\n        name: 'CircleROI',\n        iconContent: `<circle stroke=\"{{color}}\" fill=\"none\" stroke-width=\"3\" cx=\"16\" cy=\"16\" r=\"14\" />`,\n        viewBox: {\n            x: 32,\n            y: 32,\n        },\n    }),\n    EllipticalROI: extend(BASE, {\n        name: 'EllipticalROI',\n        iconContent: `<path stroke=\"{{color}}\" fill=\"none\" stroke-width=\"3\" d=\"M30.74 15.76C30.74 20.99 24.14 25.23 16\n    25.23C7.86 25.23 1.26 20.99 1.26 15.76C1.26 10.54 7.86 6.3 16 6.3C24.14\n    6.3 30.74 10.54 30.74 15.76Z\" />`,\n        viewBox: {\n            x: 32,\n            y: 32,\n        },\n    }),\n    FreehandROI: extend(BASE, {\n        name: 'FreehandROI',\n        iconContent: `<g fill=\"{{color}}\" stroke=\"{{color}}\" stroke-width=\"2\">\n    <ellipse ry=\"1\" rx=\"1\" id=\"svg_3\" cy=\"4.240343\" cx=\"14.306499\"/>\n    <line id=\"svg_4\" y2=\"3.58462\" x2=\"12.242186\" y1=\"3.997482\" x1=\"13.432202\"/>\n    <line id=\"svg_5\" y2=\"3.268901\" x2=\"10.857882\" y1=\"3.608906\" x1=\"12.387902\"/>\n    <line id=\"svg_6\" y2=\"3.147471\" x2=\"9.740724\" y1=\"3.293187\" x1=\"10.955026\"/>\n    <line id=\"svg_7\" y2=\"3.147471\" x2=\"8.089274\" y1=\"3.196043\" x1=\"9.983585\"/>\n    <line id=\"svg_8\" y2=\"3.268901\" x2=\"6.874972\" y1=\"3.123185\" x1=\"8.307848\"/>\n    <line id=\"svg_9\" y2=\"3.657478\" x2=\"5.587812\" y1=\"3.220329\" x1=\"7.020688\"/>\n    <line id=\"svg_10\" y2=\"4.046054\" x2=\"4.737801\" y1=\"3.560334\" x1=\"5.854959\"/>\n    <line id=\"svg_11\" y2=\"4.337487\" x2=\"4.300652\" y1=\"3.997482\" x1=\"4.834945\"/>\n    <line id=\"svg_12\" y2=\"4.726063\" x2=\"3.88779\" y1=\"4.191771\" x1=\"4.470655\"/>\n    <line id=\"svg_15\" y2=\"5.3575\" x2=\"3.377783\" y1=\"4.604633\" x1=\"3.960648\"/>\n    <line id=\"svg_16\" y2=\"6.183226\" x2=\"2.916348\" y1=\"5.138926\" x1=\"3.547785\"/>\n    <line id=\"svg_17\" y2=\"6.960379\" x2=\"2.770632\" y1=\"5.867507\" x1=\"3.037779\"/>\n    <line id=\"svg_18\" y2=\"7.713246\" x2=\"2.673488\" y1=\"6.741804\" x1=\"2.819204\"/>\n    <line id=\"svg_19\" y2=\"8.684687\" x2=\"2.697774\" y1=\"7.616102\" x1=\"2.673488\"/>\n    <line id=\"svg_20\" y2=\"9.753273\" x2=\"2.892062\" y1=\"8.611829\" x1=\"2.697774\"/>\n    <line id=\"svg_21\" y2=\"10.724714\" x2=\"3.134923\" y1=\"9.534698\" x1=\"2.84349\"/>\n    <line id=\"svg_23\" y2=\"11.647583\" x2=\"3.596357\" y1=\"10.578998\" x1=\"3.086351\"/>\n    <line id=\"svg_25\" y2=\"12.521881\" x2=\"4.276366\" y1=\"11.501867\" x1=\"3.499213\"/>\n    <line id=\"svg_26\" y2=\"13.930471\" x2=\"5.830673\" y1=\"12.376165\" x1=\"4.13065\"/>\n    <line id=\"svg_28\" y2=\"14.707624\" x2=\"7.263549\" y1=\"13.881899\" x1=\"5.733528\"/>\n    <line id=\"svg_29\" y2=\"15.339061\" x2=\"8.963571\" y1=\"14.61048\" x1=\"7.06926\"/>\n    <line id=\"svg_30\" y2=\"15.581921\" x2=\"10.882168\" y1=\"15.314775\" x1=\"8.817855\"/>\n    <line id=\"svg_31\" y2=\"15.460491\" x2=\"12.023612\" y1=\"15.581921\" x1=\"10.785024\"/>\n    <line id=\"svg_33\" y2=\"15.120487\" x2=\"13.092197\" y1=\"15.484777\" x1=\"11.877895\"/>\n    <line id=\"svg_34\" y2=\"14.586194\" x2=\"13.86935\" y1=\"15.217631\" x1=\"12.897909\"/>\n    <line id=\"svg_35\" y2=\"13.833327\" x2=\"14.597931\" y1=\"14.756196\" x1=\"13.699348\"/>\n    <line id=\"svg_37\" y2=\"12.716169\" x2=\"15.180796\" y1=\"13.881899\" x1=\"14.549359\"/>\n    <line id=\"svg_39\" y2=\"11.429009\" x2=\"15.520801\" y1=\"12.813313\" x1=\"15.15651\"/>\n    <ellipse ry=\"1\" rx=\"1\" id=\"svg_40\" cy=\"10.967574\" cx=\"15.520801\"/>\n  </g>`,\n        viewBox: {\n            x: 18,\n            y: 18,\n        },\n    }),\n    FreehandROISculptor: extend(BASE, {\n        name: 'FreehandROISculptor',\n        iconContent: `<g id=\"icon-freehand-sculpt\" fill=\"none\" stroke-width=\"1.5\" stroke=\"{{color}}\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <line id=\"svg_1\" y2=\"2.559367\" x2=\"10.184807\" y1=\"4.467781\" x1=\"8.81711\"/>\n    <line id=\"svg_4\" y2=\"1.493836\" x2=\"11.727442\" y1=\"2.766112\" x1=\"10.089386\"/>\n    <line id=\"svg_7\" y2=\"1.080346\" x2=\"13.047428\" y1=\"1.748291\" x1=\"11.345759\"/>\n    <line id=\"svg_8\" y2=\"1.000829\" x2=\"14.351511\" y1=\"1.112153\" x1=\"12.77707\"/>\n    <line id=\"svg_9\" y2=\"1.350705\" x2=\"15.242104\" y1=\"0.905408\" x1=\"13.969828\"/>\n    <line id=\"svg_10\" y2=\"2.098167\" x2=\"15.862339\" y1=\"1.14396\" x1=\"14.955842\"/>\n    <line id=\"svg_11\" y2=\"3.195505\" x2=\"16.41896\" y1=\"1.939133\" x1=\"15.766918\"/>\n    <line id=\"svg_12\" y2=\"4.292843\" x2=\"16.530284\" y1=\"2.925147\" x1=\"16.387153\"/>\n    <line id=\"svg_16\" y2=\"5.644637\" x2=\"16.196311\" y1=\"3.831643\" x1=\"16.593898\"/>\n    <line id=\"svg_18\" y2=\"7.266789\" x2=\"15.623787\" y1=\"5.19934\" x1=\"16.275829\"/>\n    <line id=\"svg_19\" y2=\"10.813258\" x2=\"14.526449\" y1=\"6.726071\" x1=\"15.766918\"/>\n    <line id=\"svg_20\" y2=\"5.056209\" x2=\"8.085552\" y1=\"4.181519\" x1=\"8.976145\"/>\n    <line id=\"svg_23\" y2=\"5.326568\" x2=\"7.481221\" y1=\"4.78585\" x1=\"8.403621\"/>\n    <line id=\"svg_24\" y2=\"5.565119\" x2=\"6.749662\" y1=\"5.294761\" x1=\"7.624352\"/>\n    <line id=\"svg_25\" y2=\"5.994512\" x2=\"5.429675\" y1=\"5.533312\" x1=\"6.956407\"/>\n    <line id=\"svg_27\" y2=\"6.551133\" x2=\"4.284627\" y1=\"5.962706\" x1=\"5.572807\"/>\n    <line id=\"svg_28\" y2=\"7.584858\" x2=\"3.044158\" y1=\"6.392099\" x1=\"4.427758\"/>\n    <line id=\"svg_29\" y2=\"8.84123\" x2=\"2.185372\" y1=\"7.489437\" x1=\"3.219096\"/>\n    <line id=\"svg_31\" y2=\"10.606513\" x2=\"1.644654\" y1=\"8.602678\" x1=\"2.280792\"/>\n    <line id=\"svg_32\" y2=\"13.214679\" x2=\"1.48562\" y1=\"10.352058\" x1=\"1.724171\"/>\n    <line id=\"svg_33\" y2=\"14.375631\" x2=\"1.676461\" y1=\"12.992031\" x1=\"1.453813\"/>\n    <line id=\"svg_34\" y2=\"15.298031\" x2=\"2.264889\" y1=\"14.152983\" x1=\"1.517427\"/>\n    <line id=\"svg_35\" y2=\"16.172721\" x2=\"3.521261\" y1=\"14.948155\" x1=\"1.915013\"/>\n    <line id=\"svg_36\" y2=\"16.824762\" x2=\"5.207027\" y1=\"15.997783\" x1=\"3.28271\"/>\n    <line id=\"svg_38\" y2=\"17.063314\" x2=\"7.035924\" y1=\"16.745245\" x1=\"4.968475\"/>\n    <line id=\"svg_39\" y2=\"16.888376\" x2=\"9.278311\" y1=\"17.047411\" x1=\"6.733758\"/>\n    <line id=\"svg_40\" y2=\"16.284045\" x2=\"10.661911\" y1=\"16.983797\" x1=\"8.992048\"/>\n    <line id=\"svg_41\" y2=\"15.313934\" x2=\"11.647925\" y1=\"16.395369\" x1=\"10.455166\"/>\n    <line id=\"svg_44\" y2=\"13.898527\" x2=\"12.82478\" y1=\"15.425259\" x1=\"11.504794\"/>\n    <line id=\"svg_45\" y2=\"12.037824\" x2=\"14.144766\" y1=\"14.312017\" x1=\"12.522614\"/>\n    <line id=\"svg_47\" y2=\"10.59061\" x2=\"14.605966\" y1=\"12.228665\" x1=\"13.953925\"/>\n    <ellipse ry=\"1\" rx=\"1\" id=\"svg_48\" cy=\"3.982726\" cx=\"13.460918\"/>\n  </g>`,\n        viewBox: {\n            x: 18,\n            y: 18,\n        },\n    }),\n    Length: extend(BASE, {\n        name: 'Length',\n        iconContent: `<g id=\"length-group\" fill=\"none\" stroke-width=\"1\" stroke=\"{{color}}\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path id=\"length-dashes\" d=\"m22.5,6 -16.5,16.5\" stroke-width=\"3\" stroke-dasharray=\"0.6666,5\" />\n  </g>`,\n        viewBox: {\n            x: 24,\n            y: 24,\n        },\n    }),\n    Height: extend(BASE, {\n        name: 'Height',\n        iconContent: `<path d=\"m 6 22 l 8.5 0 v -16 h 8\" stroke-width=\"3\" fill=\"none\" stroke=\"{{color}}\" />`,\n        viewBox: {\n            x: 24,\n            y: 24,\n        },\n    }),\n    Probe: extend(BASE, {\n        name: 'Probe',\n        iconContent: `<path fill=\"{{color}}\" d=\"M1152 896q0 106-75 181t-181 75-181-75-75-181 75-181 181-75 181 75\n    75 181zm-256-544q-148 0-273 73t-198 198-73 273 73 273 198 198 273 73 273-73\n    198-198 73-273-73-273-198-198-273-73zm768 544q0 209-103 385.5t-279.5\n    279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5\n    385.5-103 385.5 103 279.5 279.5 103 385.5z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    RectangleROI: extend(BASE, {\n        name: 'RectangleROI',\n        iconContent: `<path fill=\"{{color}}\" d=\"M1312 256h-832q-66 0-113 47t-47 113v832q0 66 47\n    113t113 47h832q66 0 113-47t47-113v-832q0-66-47-113t-113-47zm288 160v832q0\n    119-84.5 203.5t-203.5 84.5h-832q-119 0-203.5-84.5t-84.5-203.5v-832q0-119\n    84.5-203.5t203.5-84.5h832q119 0 203.5 84.5t84.5 203.5z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    Label: extend(BASE, {\n        name: 'Label',\n        iconContent: `<path fill=\"{{color}}\" d=\"M789 559l-170 450q33 0 136.5 2t160.5 2q19 0\n    57-2-87-253-184-452zm-725 1105l2-79q23-7 56-12.5t57-10.5 49.5-14.5 44.5-29\n    31-50.5l237-616 280-724h128q8 14 11 21l205 480q33 78 106 257.5t114 274.5q15\n    34 58 144.5t72 168.5q20 45 35 57 19 15 88 29.5t84 20.5q6 38 6 57 0 5-.5\n    13.5t-.5 12.5q-63 0-190-8t-191-8q-76 0-215 7t-178 8q0-43 4-78l131-28q1 0\n    12.5-2.5t15.5-3.5 14.5-4.5 15-6.5 11-8 9-11\n    2.5-14q0-16-31-96.5t-72-177.5-42-100l-450-2q-26 58-76.5 195.5t-50.5 162.5q0\n    22 14 37.5t43.5 24.5 48.5 13.5 57 8.5 41 4q1 19 1 58 0 9-2 27-58\n    0-174.5-10t-174.5-10q-8 0-26.5 4t-21.5 4q-80 14-188 14z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    Crosshairs: extend(BASE, {\n        name: 'Crosshairs',\n        iconContent: `<path fill=\"{{color}}\" d=\"M1325 1024h-109q-26 0-45-19t-19-45v-128q0-26\n    19-45t45-19h109q-32-108-112.5-188.5t-188.5-112.5v109q0 26-19 45t-45\n    19h-128q-26 0-45-19t-19-45v-109q-108 32-188.5 112.5t-112.5 188.5h109q26\n    0 45 19t19 45v128q0 26-19 45t-45 19h-109q32 108 112.5 188.5t188.5\n    112.5v-109q0-26 19-45t45-19h128q26 0 45 19t19 45v109q108-32\n    188.5-112.5t112.5-188.5zm339-192v128q0 26-19 45t-45 19h-143q-37 161-154.5\n    278.5t-278.5 154.5v143q0 26-19 45t-45 19h-128q-26\n    0-45-19t-19-45v-143q-161-37-278.5-154.5t-154.5-278.5h-143q-26\n    0-45-19t-19-45v-128q0-26 19-45t45-19h143q37-161\n    154.5-278.5t278.5-154.5v-143q0-26 19-45t45-19h128q26 0 45 19t19 45v143q161\n    37 278.5 154.5t154.5 278.5h143q26 0 45 19t19 45z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    Eraser: extend(BASE, {\n        name: 'Eraser',\n        iconContent: `<path transform=\"translate(0,1792) scale(1,-1)\" fill=\"{{color}}\" d=\"M960 1408l336-384h-768l-336 384h768zm1013-1077q15\n    34 9.5 71.5t-30.5 65.5l-896 1024q-38 44-96 44h-768q-38\n    0-69.5-20.5t-47.5-54.5q-15-34-9.5-71.5t30.5-65.5l896-1024q38-44 96-44h768q38\n    0 69.5 20.5t47.5 54.5z\" />`,\n        viewBox: {\n            x: 2048,\n            y: 1792,\n        },\n    }),\n    Magnify: extend(BASE, {\n        name: 'Magnify',\n        iconContent: `<path fill=\"{{color}}\" d=\"M508.5 481.6l-129-129c-2.3-2.3-5.3-3.5-8.5-3.5h-10.3C395\n    312 416 262.5 416 208 416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c54.5\n    0 104-21 141.1-55.2V371c0 3.2 1.3 6.2 3.5 8.5l129 129c4.7 4.7 12.3 4.7 17\n    0l9.9-9.9c4.7-4.7 4.7-12.3 0-17zM208 384c-97.3 0-176-78.7-176-176S110.7 32 208\n    32s176 78.7 176 176-78.7 176-176 176z\" />`,\n        viewBox: {\n            x: 512,\n            y: 512,\n        },\n    }),\n    Pan: extend(BASE, {\n        name: 'Pan',\n        iconContent: `<path fill=\"{{color}}\" d=\"M1411 541l-355 355 355 355 144-144q29-31 70-14 39 17\n    39 59v448q0 26-19 45t-45 19h-448q-42 0-59-40-17-39 14-69l144-144-355-355-355\n    355 144 144q31 30 14 69-17 40-59 40h-448q-26 0-45-19t-19-45v-448q0-42 40-59\n    39-17 69 14l144 144 355-355-355-355-144 144q-19 19-45 19-12\n    0-24-5-40-17-40-59v-448q0-26 19-45t45-19h448q42 0 59 40 17 39-14 69l-144\n    144 355 355 355-355-144-144q-31-30-14-69 17-40 59-40h448q26 0 45 19t19\n    45v448q0 42-39 59-13 5-25 5-26 0-45-19z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    Rotate: extend(BASE, {\n        name: 'Rotate',\n        iconContent: `<path fill=\"{{color}}\" d=\"M1664 256v448q0 26-19 45t-45 19h-448q-42 0-59-40-17-39\n    14-69l138-138q-148-137-349-137-104 0-198.5 40.5t-163.5 109.5-109.5\n    163.5-40.5 198.5 40.5 198.5 109.5 163.5 163.5 109.5 198.5 40.5q119 0\n    225-52t179-147q7-10 23-12 15 0 25 9l137 138q9 8 9.5 20.5t-7.5 22.5q-109\n    132-264 204.5t-327 72.5q-156 0-298-61t-245-164-164-245-61-298 61-298\n    164-245 245-164 298-61q147 0 284.5 55.5t244.5 156.5l130-129q29-31 70-14\n    39 17 39 59z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    StackScroll: extend(BASE, {\n        name: 'StackScroll',\n        iconContent: `<path fill=\"{{color}}\" d=\"M24 21v2c0 0.547-0.453 1-1 1h-22c-0.547\n    0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547 0 1 0.453 1 1zM24 13v2c0\n    0.547-0.453 1-1 1h-22c-0.547 0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547\n    0 1 0.453 1 1zM24 5v2c0 0.547-0.453 1-1 1h-22c-0.547\n    0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547 0 1 0.453 1 1z\" />`,\n        viewBox: {\n            x: 24,\n            y: 28,\n        },\n    }),\n    WindowLevelRegion: extend(BASE, {\n        name: 'WindowLevelRegion',\n        iconContent: `<path fill=\"{{color}}\" d=\"M1664 416v960q0 119-84.5 203.5t-203.5 84.5h-960q-119\n    0-203.5-84.5t-84.5-203.5v-960q0-119 84.5-203.5t203.5-84.5h960q119 0 203.5\n    84.5t84.5 203.5z\" />`,\n        viewBox: {\n            x: 1792,\n            y: 1792,\n        },\n    }),\n    WindowLevel: extend(BASE, {\n        name: 'WindowLevel',\n        iconContent: `\n    <path fill=\"{{color}}\" d=\"M14.5,3.5 a1 1 0 0 1 -11,11 Z\" stroke=\"none\" opacity=\"0.8\" />\n    <circle cx=\"9\" cy=\"9\" r=\"8\" fill=\"none\" stroke-width=\"2\" stroke=\"{{color}}\" />`,\n        viewBox: {\n            x: 18,\n            y: 18,\n        },\n    }),\n    Zoom: extend(BASE, {\n        name: 'Zoom',\n        iconContent: `\n  <path fill=\"{{color}}\" d=\"M508.5 481.6l-129-129c-2.3-2.3-5.3-3.5-8.5-3.5h-10.3C395\n    312 416 262.5 416 208 416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c54.5\n    0 104-21 141.1-55.2V371c0 3.2 1.3 6.2 3.5 8.5l129 129c4.7 4.7 12.3 4.7 17\n    0l9.9-9.9c4.7-4.7 4.7-12.3 0-17zM208 384c-97.3 0-176-78.7-176-176S110.7 32 208\n    32s176 78.7 176 176-78.7 176-176 176z\" />\n  <path fill=\"{{color}}\" transform=\"scale(0.22,0.22) translate(1400,0)\" d=\"M1216\n    320q0 26-19 45t-45 19h-128v1024h128q26 0 45 19t19 45-19 45l-256 256q-19\n    19-45 19t-45-19l-256-256q-19-19-19-45t19-45 45-19h128v-1024h-128q-26\n    0-45-19t-19-45 19-45l256-256q19-19 45-19t45 19l256 256q19 19 19 45z\" />`,\n        viewBox: {\n            x: 640,\n            y: 512,\n        },\n    }),\n    SegmentationFreeHandEraseInside: extend(BASE, {\n        name: 'SegmentationFreeHandEraseInside',\n        iconContent: `${SCISSOR_ICON} ${MINUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    SegmentationFreeHandFillInside: extend(BASE, {\n        name: 'SegmentationFreeHandFillInside',\n        iconContent: `${SCISSOR_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    SegmentationFreeHandEraseOutside: extend(BASE, {\n        name: 'SegmentationFreeHandEraseOutside',\n        iconContent: `${SCISSOR_ICON} ${MINUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    SegmentationFreeHandFillOutside: extend(BASE, {\n        name: 'SegmentationFreeHandFillOutside',\n        iconContent: `${SCISSOR_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    SegmentationRectangleEraseInside: extend(BASE, {\n        name: 'SegmentationRectangleEraseInside',\n        iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    RectangleScissor: extend(BASE, {\n        name: 'RectangleScissor',\n        iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    'RectangleScissor.FILL_INSIDE': extend(BASE, {\n        name: 'RectangleScissor.FILL_INSIDE',\n        iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    'RectangleScissor.FILL_OUTSIDE': extend(BASE, {\n        name: 'RectangleScissor.FILL_OUTSIDE',\n        iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    'RectangleScissor.ERASE_OUTSIDE': extend(BASE, {\n        name: 'RectangleScissor.ERASE_OUTSIDE',\n        iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    'RectangleScissor.ERASE_INSIDE': extend(BASE, {\n        name: 'RectangleScissor.ERASE_INSIDE',\n        iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    CircleScissor: extend(BASE, {\n        name: 'CircleScissor',\n        iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    'CircleScissor.FILL_INSIDE': extend(BASE, {\n        name: 'CircleScissor.FILL_INSIDE',\n        iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    'CircleScissor.ERASE_OUTSIDE': extend(BASE, {\n        name: 'CircleScissor.ERASE_OUTSIDE',\n        iconContent: `${CIRCLE_ICON} ${MINUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n    'CircleScissor.FILL_OUTSIDE': extend(BASE, {\n        name: 'CircleScissor.FILL_OUTSIDE',\n        iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,\n        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n    }),\n};\nfunction extend(base, values) {\n    return Object.assign(Object.create(base), {\n        ...values,\n        name: values.name || base.name,\n    });\n}\nfunction registerCursor(toolName, iconContent, viewBox) {\n    CursorSVG[toolName] = extend(BASE, {\n        iconContent,\n        viewBox,\n    });\n}\nfunction getDefinedSVGCursorDescriptor(name) {\n    return CursorSVG[name];\n}\nconst svgCursorNames = Object.keys(CursorSVG);\nexport { getDefinedSVGCursorDescriptor, registerCursor, svgCursorNames, CursorSVG, };\n","import { ToolModes, AnnotationStyleStates } from '../enums';\nimport ImageMouseCursor from './ImageMouseCursor';\nimport { getDefinedSVGCursorDescriptor } from './SVGCursorDescriptor';\nimport { getStyleProperty } from '../stateManagement/annotation/config/helpers';\nconst PROPERTY = 'color';\nconst STATE = AnnotationStyleStates.Highlighted;\nconst MODE = ToolModes.Active;\nexport default class SVGMouseCursor extends ImageMouseCursor {\n    constructor(url, x, y, name, fallback) {\n        super(url, x, y, name, fallback);\n    }\n    static getDefinedCursor(name, pointer = false, color) {\n        if (!color) {\n            color = getStyleProperty(PROPERTY, {}, STATE, MODE);\n        }\n        const urn = getCursorURN(name, pointer, color);\n        let cursor = super.getDefinedCursor(urn);\n        const pointerStrokeWidth = Number(getStyleProperty('pointerStrokeWidth', {}));\n        if (!cursor) {\n            const descriptor = getDefinedSVGCursorDescriptor(name);\n            if (descriptor) {\n                cursor = createSVGMouseCursor(descriptor, urn, pointer, color, pointerStrokeWidth, super.getDefinedCursor('default'));\n                super.setDefinedCursor(urn, cursor);\n            }\n        }\n        return cursor;\n    }\n}\nfunction format(template, dictionary) {\n    const dict = Object(dictionary);\n    const defined = Object.prototype.hasOwnProperty.bind(dict);\n    return (template + '').replace(/\\{\\{(\\w+)\\}\\}/g, (match, key) => {\n        return defined(key) ? dict[key] + '' : '';\n    });\n}\nfunction getCursorURN(name, pointer, color) {\n    const type = pointer ? 'pointer' : 'cursor';\n    return `${type}:${name}/${color}`;\n}\nfunction createSVGMouseCursor(descriptor, name, pointer, color, pointerStrokeWidth, fallback) {\n    const { x, y } = descriptor.mousePoint;\n    return new SVGMouseCursor(createSVGIconUrl(descriptor, pointer, { color, pointerStrokeWidth }), x, y, name, fallback);\n}\nfunction createSVGIconUrl(descriptor, pointer, options) {\n    const blob = createSVGIconBlob(descriptor, pointer, options);\n    const url = URL.createObjectURL(blob);\n    const urn = `${url}#${descriptor.name || 'unknown'}-${pointer ? 'pointer' : 'cursor'}`;\n    return urn;\n}\nfunction createSVGIconBlob(descriptor, pointer, options) {\n    const svgString = (pointer ? createSVGIconWithPointer : createSVGIcon)(descriptor, options);\n    return new Blob([svgString], { type: 'image/svg+xml' });\n}\nfunction createSVGIcon(descriptor, options) {\n    const { iconContent, iconSize, viewBox } = descriptor;\n    const svgString = `\n    <svg data-icon=\"cursor\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"${iconSize}\" height=\"${iconSize}\" viewBox=\"0 0\n      ${viewBox.x} ${viewBox.y}\">\n      ${iconContent}\n    </svg>`;\n    return format(svgString, options);\n}\nfunction createSVGIconWithPointer(descriptor, options) {\n    const { iconContent, iconSize, viewBox, mousePointerGroupString } = descriptor;\n    const scale = iconSize / Math.max(viewBox.x, viewBox.y, 1);\n    const svgSize = 16 + iconSize;\n    const pointerStrokeWidth = options.pointerStrokeWidth || 1;\n    const svgString = `\n    <svg data-icon=\"cursor\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"${svgSize}\" height=\"${svgSize}\" viewBox=\"0 0 ${svgSize} ${svgSize}\">\n      <g stroke-width=\"${pointerStrokeWidth}\">${mousePointerGroupString}</g>\n      <g transform=\"translate(16, 16) scale(${scale})\">${iconContent}</g>\n    </svg>`;\n    return format(svgString, options);\n}\n","import { setElementCursor } from './elementCursor';\nimport MouseCursor from './MouseCursor';\nimport SVGMouseCursor from './SVGMouseCursor';\nfunction setCursorForElement(element, cursorName) {\n    let cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n    if (!cursor) {\n        cursor = MouseCursor.getDefinedCursor(cursorName);\n    }\n    if (!cursor) {\n        console.log(`Cursor ${cursorName} is not defined either as SVG or as a standard cursor.`);\n        cursor = MouseCursor.getDefinedCursor(cursorName);\n    }\n    setElementCursor(element, cursor);\n}\nexport default setCursorForElement;\n","import MouseCursor, { standardCursorNames } from './MouseCursor';\nimport ImageMouseCursor from './ImageMouseCursor';\nimport SVGMouseCursor from './SVGMouseCursor';\nimport * as elementCursor from './elementCursor';\nimport setCursorForElement from './setCursorForElement';\nimport { registerCursor, svgCursorNames, CursorSVG, } from './SVGCursorDescriptor';\nconst CursorNames = [...svgCursorNames, ...standardCursorNames];\nexport { MouseCursor, ImageMouseCursor, SVGMouseCursor, elementCursor, registerCursor, CursorNames, CursorSVG, setCursorForElement, };\n","import _getHash from './_getHash';\nimport drawEllipseByCoordinates from './drawEllipseByCoordinates';\nfunction drawEllipse(svgDrawingHelper, annotationUID, ellipseUID, corner1, corner2, options = {}, dataId = '') {\n    const top = [(corner1[0] + corner2[0]) / 2, corner1[1]];\n    const bottom = [(corner1[0] + corner2[0]) / 2, corner2[1]];\n    const left = [corner1[0], (corner1[1] + corner2[1]) / 2];\n    const right = [corner2[0], (corner1[1] + corner2[1]) / 2];\n    drawEllipseByCoordinates(svgDrawingHelper, annotationUID, ellipseUID, [bottom, top, left, right], (options = {}), (dataId = ''));\n}\nexport default drawEllipse;\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nfunction drawEllipseByCoordinates(svgDrawingHelper, annotationUID, ellipseUID, canvasCoordinates, options = {}, dataId = '') {\n    const { color, width, lineWidth, lineDash } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'ellipse', ellipseUID);\n    const existingEllipse = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const [bottom, top, left, right] = canvasCoordinates;\n    const w = Math.hypot(left[0] - right[0], left[1] - right[1]);\n    const h = Math.hypot(top[0] - bottom[0], top[1] - bottom[1]);\n    const angle = (Math.atan2(left[1] - right[1], left[0] - right[0]) * 180) / Math.PI;\n    const center = [(left[0] + right[0]) / 2, (top[1] + bottom[1]) / 2];\n    const radiusX = w / 2;\n    const radiusY = h / 2;\n    const attributes = {\n        cx: `${center[0]}`,\n        cy: `${center[1]}`,\n        rx: `${radiusX}`,\n        ry: `${radiusY}`,\n        stroke: color,\n        fill: 'transparent',\n        transform: `rotate(${angle} ${center[0]} ${center[1]})`,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n    };\n    if (existingEllipse) {\n        setAttributesIfNecessary(attributes, existingEllipse);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const svgEllipseElement = document.createElementNS(svgns, 'ellipse');\n        if (dataId !== '') {\n            svgEllipseElement.setAttribute('data-id', dataId);\n        }\n        setNewAttributesIfValid(attributes, svgEllipseElement);\n        svgDrawingHelper.appendNode(svgEllipseElement, svgNodeHash);\n    }\n}\nexport default drawEllipseByCoordinates;\n","import _getHash from './_getHash';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nfunction drawHandle(svgDrawingHelper, annotationUID, handleGroupUID, handle, options = {}, uniqueIndex) {\n    const { color, handleRadius, width, lineWidth, fill, type, opacity } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        handleRadius: '6',\n        width: '2',\n        lineWidth: undefined,\n        fill: 'transparent',\n        type: 'circle',\n        opacity: 1,\n    }, options);\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'handle', `hg-${handleGroupUID}-index-${uniqueIndex}`);\n    let attributes;\n    if (type === 'circle') {\n        attributes = {\n            cx: `${handle[0]}`,\n            cy: `${handle[1]}`,\n            r: handleRadius,\n            stroke: color,\n            fill,\n            'stroke-width': strokeWidth,\n            opacity: opacity,\n        };\n    }\n    else if (type === 'rect') {\n        const handleRadiusFloat = parseFloat(handleRadius);\n        const side = handleRadiusFloat * 1.5;\n        const x = handle[0] - side * 0.5;\n        const y = handle[1] - side * 0.5;\n        attributes = {\n            x: `${x}`,\n            y: `${y}`,\n            width: `${side}`,\n            height: `${side}`,\n            stroke: color,\n            fill,\n            'stroke-width': strokeWidth,\n            rx: `${side * 0.1}`,\n            opacity: opacity,\n        };\n    }\n    else {\n        throw new Error(`Unsupported handle type: ${type}`);\n    }\n    const existingHandleElement = svgDrawingHelper.getSvgNode(svgNodeHash);\n    if (existingHandleElement) {\n        setAttributesIfNecessary(attributes, existingHandleElement);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const newHandleElement = document.createElementNS(svgns, type);\n        setNewAttributesIfValid(attributes, newHandleElement);\n        svgDrawingHelper.appendNode(newHandleElement, svgNodeHash);\n    }\n}\nexport default drawHandle;\n","import _getHash from './_getHash';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nexport default function drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, options = {}, dataId = '') {\n    if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n        return;\n    }\n    const { color = 'rgb(0, 255, 0)', width = 10, lineWidth, lineDash, markerStartId = null, markerEndId = null, shadow = false, strokeOpacity = 1, } = options;\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'line', lineUID);\n    const existingLine = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const layerId = svgDrawingHelper.svgLayerElement.id;\n    const dropShadowStyle = shadow ? `filter:url(#shadow-${layerId});` : '';\n    const attributes = {\n        x1: `${start[0]}`,\n        y1: `${start[1]}`,\n        x2: `${end[0]}`,\n        y2: `${end[1]}`,\n        stroke: color,\n        style: dropShadowStyle,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n        'marker-start': markerStartId ? `url(#${markerStartId})` : '',\n        'marker-end': markerEndId ? `url(#${markerEndId})` : '',\n        'stroke-opacity': strokeOpacity,\n    };\n    if (existingLine) {\n        setAttributesIfNecessary(attributes, existingLine);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const newLine = document.createElementNS(svgns, 'line');\n        if (dataId !== '') {\n            newLine.setAttribute('data-id', dataId);\n        }\n        setNewAttributesIfValid(attributes, newLine);\n        svgDrawingHelper.appendNode(newLine, svgNodeHash);\n    }\n}\n","import _getHash from './_getHash';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nexport default function drawPath(svgDrawingHelper, annotationUID, pathUID, points, options) {\n    const hasSubArrays = points.length && points[0].length && Array.isArray(points[0][0]);\n    const pointsArrays = hasSubArrays ? points : [points];\n    const { color = 'rgb(0, 255, 0)', width = 10, fillColor = 'none', fillOpacity = 0, lineWidth, lineDash, closePath = false, } = options;\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'path', pathUID);\n    const existingNode = svgDrawingHelper.getSvgNode(svgNodeHash);\n    let pointsAttribute = '';\n    for (let i = 0, numArrays = pointsArrays.length; i < numArrays; i++) {\n        const points = pointsArrays[i];\n        const numPoints = points.length;\n        if (numPoints < 2) {\n            continue;\n        }\n        for (let j = 0; j < numPoints; j++) {\n            const point = points[j];\n            const cmd = j ? 'L' : 'M';\n            pointsAttribute += `${cmd} ${point[0].toFixed(1)}, ${point[1].toFixed(1)} `;\n        }\n        if (closePath) {\n            pointsAttribute += 'Z ';\n        }\n    }\n    if (!pointsAttribute) {\n        return;\n    }\n    const attributes = {\n        d: pointsAttribute,\n        stroke: color,\n        fill: fillColor,\n        'fill-opacity': fillOpacity,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n    };\n    if (existingNode) {\n        setAttributesIfNecessary(attributes, existingNode);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const newNode = document.createElementNS(svgns, 'path');\n        setNewAttributesIfValid(attributes, newNode);\n        svgDrawingHelper.appendNode(newNode, svgNodeHash);\n    }\n}\n","import _getHash from './_getHash';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nexport default function drawPolyline(svgDrawingHelper, annotationUID, polylineUID, points, options) {\n    if (points.length < 2) {\n        return;\n    }\n    const { color = 'rgb(0, 255, 0)', width = 10, fillColor = 'none', fillOpacity = 0, lineWidth, lineDash, closePath = false, markerStartId = null, markerEndId = null, } = options;\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'polyline', polylineUID);\n    const existingPolyLine = svgDrawingHelper.getSvgNode(svgNodeHash);\n    let pointsAttribute = '';\n    for (const point of points) {\n        pointsAttribute += `${point[0].toFixed(1)}, ${point[1].toFixed(1)} `;\n    }\n    if (closePath) {\n        const firstPoint = points[0];\n        pointsAttribute += `${firstPoint[0]}, ${firstPoint[1]}`;\n    }\n    const attributes = {\n        points: pointsAttribute,\n        stroke: color,\n        fill: fillColor,\n        'fill-opacity': fillOpacity,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n        'marker-start': markerStartId ? `url(#${markerStartId})` : '',\n        'marker-end': markerEndId ? `url(#${markerEndId})` : '',\n    };\n    if (existingPolyLine) {\n        setAttributesIfNecessary(attributes, existingPolyLine);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const newPolyLine = document.createElementNS(svgns, 'polyline');\n        setNewAttributesIfValid(attributes, newPolyLine);\n        svgDrawingHelper.appendNode(newPolyLine, svgNodeHash);\n    }\n}\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nexport default function drawRectByCoordinates(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates, options = {}, dataId = '') {\n    const { color, width: _width, lineWidth, lineDash, } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const strokeWidth = lineWidth || _width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'rect', rectangleUID);\n    const existingRect = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const [topLeft, topRight, bottomLeft, bottomRight] = canvasCoordinates;\n    const width = Math.hypot(topLeft[0] - topRight[0], topLeft[1] - topRight[1]);\n    const height = Math.hypot(topLeft[0] - bottomLeft[0], topLeft[1] - bottomLeft[1]);\n    const center = [\n        (bottomRight[0] + topLeft[0]) / 2,\n        (bottomRight[1] + topLeft[1]) / 2,\n    ];\n    const leftEdgeCenter = [\n        (bottomLeft[0] + topLeft[0]) / 2,\n        (bottomLeft[1] + topLeft[1]) / 2,\n    ];\n    const angle = (Math.atan2(center[1] - leftEdgeCenter[1], center[0] - leftEdgeCenter[0]) *\n        180) /\n        Math.PI;\n    const attributes = {\n        x: `${center[0] - width / 2}`,\n        y: `${center[1] - height / 2}`,\n        width: `${width}`,\n        height: `${height}`,\n        stroke: color,\n        fill: 'transparent',\n        transform: `rotate(${angle} ${center[0]} ${center[1]})`,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n    };\n    if (existingRect) {\n        setAttributesIfNecessary(attributes, existingRect);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const svgRectElement = document.createElementNS(svgns, 'rect');\n        if (dataId !== '') {\n            svgRectElement.setAttribute('data-id', dataId);\n        }\n        setNewAttributesIfValid(attributes, svgRectElement);\n        svgDrawingHelper.appendNode(svgRectElement, svgNodeHash);\n    }\n}\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nfunction drawTextBox(svgDrawingHelper, annotationUID, textUID, textLines, position, options = {}) {\n    const mergedOptions = Object.assign({\n        fontFamily: 'Helvetica, Arial, sans-serif',\n        fontSize: '14px',\n        color: 'rgb(255, 255, 0)',\n        background: '',\n        padding: 25,\n        centerX: false,\n        centerY: true,\n    }, options);\n    const textGroupBoundingBox = _drawTextGroup(svgDrawingHelper, annotationUID, textUID, textLines, position, mergedOptions);\n    return textGroupBoundingBox;\n}\nfunction _drawTextGroup(svgDrawingHelper, annotationUID, textUID, textLines = [''], position, options) {\n    const { padding, color, fontFamily, fontSize, background } = options;\n    let textGroupBoundingBox;\n    const [x, y] = [position[0] + padding, position[1] + padding];\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'text', textUID);\n    const existingTextGroup = svgDrawingHelper.getSvgNode(svgNodeHash);\n    if (existingTextGroup) {\n        const textElement = existingTextGroup.querySelector('text');\n        const textSpans = Array.from(textElement.children);\n        for (let i = 0; i < textSpans.length; i++) {\n            const textSpanElement = textSpans[i];\n            const text = textLines[i] || '';\n            textSpanElement.textContent = text;\n        }\n        if (textLines.length > textSpans.length) {\n            for (let i = 0; i < textLines.length - textSpans.length; i++) {\n                const textLine = textLines[i + textSpans.length];\n                const textSpan = _createTextSpan(textLine);\n                textElement.appendChild(textSpan);\n            }\n            existingTextGroup.appendChild(textElement);\n            svgDrawingHelper.appendNode(existingTextGroup, svgNodeHash);\n        }\n        const textAttributes = {\n            fill: color,\n            'font-size': fontSize,\n            'font-family': fontFamily,\n        };\n        const textGroupAttributes = {\n            transform: `translate(${x} ${y})`,\n        };\n        setAttributesIfNecessary(textAttributes, textElement);\n        setAttributesIfNecessary(textGroupAttributes, existingTextGroup);\n        existingTextGroup.setAttribute('data-annotation-uid', annotationUID);\n        textGroupBoundingBox = _drawTextBackground(existingTextGroup, background);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const textGroup = document.createElementNS(svgns, 'g');\n        textGroup.setAttribute('data-annotation-uid', annotationUID);\n        textGroup.setAttribute('transform', `translate(${x} ${y})`);\n        const textElement = _createTextElement(svgDrawingHelper, options);\n        for (let i = 0; i < textLines.length; i++) {\n            const textLine = textLines[i];\n            const textSpan = _createTextSpan(textLine);\n            textElement.appendChild(textSpan);\n        }\n        textGroup.appendChild(textElement);\n        svgDrawingHelper.appendNode(textGroup, svgNodeHash);\n        textGroupBoundingBox = _drawTextBackground(textGroup, background);\n    }\n    return Object.assign({}, textGroupBoundingBox, {\n        x,\n        y,\n        height: textGroupBoundingBox.height + padding,\n        width: textGroupBoundingBox.width + padding,\n    });\n}\nfunction _createTextElement(svgDrawingHelper, options) {\n    const { color, fontFamily, fontSize } = options;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const textElement = document.createElementNS(svgns, 'text');\n    const noSelectStyle = 'user-select: none; pointer-events: none; -webkit-tap-highlight-color:  rgba(255, 255, 255, 0);';\n    const dropShadowStyle = `filter:url(#shadow-${svgDrawingHelper.svgLayerElement.id});`;\n    const combinedStyle = `${noSelectStyle}${dropShadowStyle}`;\n    textElement.setAttribute('x', '0');\n    textElement.setAttribute('y', '0');\n    textElement.setAttribute('fill', color);\n    textElement.setAttribute('font-family', fontFamily);\n    textElement.setAttribute('font-size', fontSize);\n    textElement.setAttribute('style', combinedStyle);\n    textElement.setAttribute('pointer-events', 'visible');\n    return textElement;\n}\nfunction _createTextSpan(text) {\n    const svgns = 'http://www.w3.org/2000/svg';\n    const textSpanElement = document.createElementNS(svgns, 'tspan');\n    textSpanElement.setAttribute('x', '0');\n    textSpanElement.setAttribute('dy', '1.2em');\n    textSpanElement.textContent = text;\n    return textSpanElement;\n}\nfunction _drawTextBackground(group, color) {\n    let element = group.querySelector('rect.background');\n    if (!color) {\n        if (element) {\n            group.removeChild(element);\n        }\n        return group.getBBox();\n    }\n    if (!element) {\n        element = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n        element.setAttribute('class', 'background');\n        group.insertBefore(element, group.firstChild);\n    }\n    const bBox = group.getBBox();\n    const attributes = {\n        x: `${bBox.x}`,\n        y: `${bBox.y}`,\n        width: `${bBox.width}`,\n        height: `${bBox.height}`,\n        fill: color,\n    };\n    setAttributesIfNecessary(attributes, element);\n    return bBox;\n}\nexport default drawTextBox;\n","import drawLine from './drawLine';\nexport default function drawHeight(svgDrawingHelper, annotationUID, heightUID, start, end, options = {}) {\n    if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n        return;\n    }\n    const { color, width, lineWidth, lineDash } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const midX = end[0] + (start[0] - end[0]) / 2;\n    const endfirstLine = [midX, start[1]];\n    const endsecondLine = [midX, end[1]];\n    const firstLine = {\n        start: start,\n        end: endfirstLine,\n    };\n    const secondLine = {\n        start: endfirstLine,\n        end: endsecondLine,\n    };\n    const threeLine = {\n        start: endsecondLine,\n        end: end,\n    };\n    drawLine(svgDrawingHelper, annotationUID, '1', firstLine.start, firstLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '2', secondLine.start, secondLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '3', threeLine.start, threeLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n}\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nfunction drawFan(svgDrawingHelper, annotationUID, fanUID, center, innerRadius, outerRadius, startAngle, endAngle, options = {}, dataId = '', zIndex) {\n    const { color, fill, width, lineWidth, lineDash, fillOpacity, strokeOpacity, } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        fill: 'transparent',\n        width: '2',\n        lineDash: undefined,\n        lineWidth: undefined,\n        strokeOpacity: 1,\n        fillOpacity: 1,\n    }, options);\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'fan', fanUID);\n    const existingFanElement = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const startRad = (startAngle * Math.PI) / 180;\n    const endRad = (endAngle * Math.PI) / 180;\n    const centerX = center[0];\n    const centerY = center[1];\n    const outerStartX = centerX + outerRadius * Math.cos(startRad);\n    const outerStartY = centerY + outerRadius * Math.sin(startRad);\n    const outerEndX = centerX + outerRadius * Math.cos(endRad);\n    const outerEndY = centerY + outerRadius * Math.sin(endRad);\n    const innerStartX = centerX + innerRadius * Math.cos(startRad);\n    const innerStartY = centerY + innerRadius * Math.sin(startRad);\n    const innerEndX = centerX + innerRadius * Math.cos(endRad);\n    const innerEndY = centerY + innerRadius * Math.sin(endRad);\n    const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1;\n    let pathData = `M ${outerStartX} ${outerStartY}`;\n    pathData += ` A ${outerRadius} ${outerRadius} 0 ${largeArcFlag} 1 ${outerEndX} ${outerEndY}`;\n    pathData += ` L ${innerEndX} ${innerEndY}`;\n    pathData += ` A ${innerRadius} ${innerRadius} 0 ${largeArcFlag} 0 ${innerStartX} ${innerStartY}`;\n    pathData += ` Z`;\n    const attributes = {\n        d: pathData,\n        stroke: color,\n        fill,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n        'fill-opacity': fillOpacity,\n        'stroke-opacity': strokeOpacity,\n        'mix-blend-mode': 'normal',\n    };\n    if (existingFanElement) {\n        setAttributesIfNecessary(attributes, existingFanElement);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const newFanElement = document.createElementNS(svgns, 'path');\n        if (dataId !== '') {\n            newFanElement.setAttribute('data-id', dataId);\n        }\n        if (zIndex !== undefined) {\n            newFanElement.style.zIndex = zIndex.toString();\n        }\n        setNewAttributesIfValid(attributes, newFanElement);\n        svgDrawingHelper.appendNode(newFanElement, svgNodeHash);\n    }\n}\nexport default drawFan;\n","import drawLine from './drawLine';\nconst svgns = 'http://www.w3.org/2000/svg';\nexport default function drawArrow(svgDrawingHelper, annotationUID, arrowUID, start, end, options = {}) {\n    if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n        return;\n    }\n    const { viaMarker = false, color = 'rgb(0, 255, 0)', markerSize = 10, } = options;\n    if (!viaMarker) {\n        legacyDrawArrow(svgDrawingHelper, annotationUID, arrowUID, start, end, options);\n        return;\n    }\n    const layerId = svgDrawingHelper.svgLayerElement.id;\n    const markerBaseId = `arrow-${annotationUID}`;\n    const markerFullId = `${markerBaseId}-${layerId}`;\n    const defs = svgDrawingHelper.svgLayerElement.querySelector('defs');\n    let arrowMarker = defs.querySelector(`#${markerFullId}`);\n    if (!arrowMarker) {\n        arrowMarker = document.createElementNS(svgns, 'marker');\n        arrowMarker.setAttribute('id', markerFullId);\n        arrowMarker.setAttribute('viewBox', '0 0 10 10');\n        arrowMarker.setAttribute('refX', '8');\n        arrowMarker.setAttribute('refY', '5');\n        arrowMarker.setAttribute('markerWidth', `${markerSize}`);\n        arrowMarker.setAttribute('markerHeight', `${markerSize}`);\n        arrowMarker.setAttribute('orient', 'auto');\n        const arrowPath = document.createElementNS(svgns, 'path');\n        arrowPath.setAttribute('d', 'M 0 0 L 10 5 L 0 10 z');\n        arrowPath.setAttribute('fill', color);\n        arrowMarker.appendChild(arrowPath);\n        defs.appendChild(arrowMarker);\n    }\n    else {\n        arrowMarker.setAttribute('markerWidth', `${markerSize}`);\n        arrowMarker.setAttribute('markerHeight', `${markerSize}`);\n        const arrowPath = arrowMarker.querySelector('path');\n        if (arrowPath) {\n            arrowPath.setAttribute('fill', color);\n        }\n    }\n    options.markerEndId = markerFullId;\n    drawLine(svgDrawingHelper, annotationUID, arrowUID, start, end, options);\n}\nfunction legacyDrawArrow(svgDrawingHelper, annotationUID, arrowUID, start, end, options = {}) {\n    const { color = 'rgb(0, 255, 0)', width = 2, lineWidth, lineDash } = options;\n    const headLength = 10;\n    const angle = Math.atan2(end[1] - start[1], end[0] - start[0]);\n    const firstLine = {\n        start: [\n            end[0] - headLength * Math.cos(angle - Math.PI / 7),\n            end[1] - headLength * Math.sin(angle - Math.PI / 7),\n        ],\n        end: end,\n    };\n    const secondLine = {\n        start: [\n            end[0] - headLength * Math.cos(angle + Math.PI / 7),\n            end[1] - headLength * Math.sin(angle + Math.PI / 7),\n        ],\n        end: end,\n    };\n    drawLine(svgDrawingHelper, annotationUID, arrowUID, start, end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '2', firstLine.start, firstLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '3', secondLine.start, secondLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n}\n","import _getHash from './_getHash';\nimport _setAttributesIfNecessary from './setAttributesIfNecessary';\nimport _setNewAttributesIfValid from './setNewAttributesIfValid';\nexport default function drawRedactionRect(svgDrawingHelper, annotationUID, rectangleUID, start, end, options = {}) {\n    const { color, width: _width, lineWidth, lineDash, } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const strokeWidth = lineWidth || _width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'rect', rectangleUID);\n    const existingRect = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const tlhc = [Math.min(start[0], end[0]), Math.min(start[1], end[1])];\n    const width = Math.abs(start[0] - end[0]);\n    const height = Math.abs(start[1] - end[1]);\n    const attributes = {\n        x: `${tlhc[0]}`,\n        y: `${tlhc[1]}`,\n        width: `${width}`,\n        height: `${height}`,\n        stroke: color,\n        fill: 'black',\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n    };\n    if (existingRect) {\n        _setAttributesIfNecessary(attributes, existingRect);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const svgRectElement = document.createElementNS(svgns, 'rect');\n        _setNewAttributesIfValid(attributes, svgRectElement);\n        svgDrawingHelper.appendNode(svgRectElement, svgNodeHash);\n    }\n}\n","export function setAttributesIfNecessary(attributes, svgNode) {\n    Object.keys(attributes).forEach((key) => {\n        const currentValue = svgNode.getAttribute(key);\n        const newValue = attributes[key];\n        if (newValue === undefined || newValue === '') {\n            svgNode.removeAttribute(key);\n        }\n        else if (currentValue !== newValue) {\n            svgNode.setAttribute(key, newValue);\n        }\n    });\n}\nexport default setAttributesIfNecessary;\n","export function setNewAttributesIfValid(attributes, svgNode) {\n    Object.keys(attributes).forEach((key) => {\n        const newValue = attributes[key];\n        if (newValue !== undefined && newValue !== '') {\n            svgNode.setAttribute(key, newValue);\n        }\n    });\n}\nexport default setNewAttributesIfValid;\n","import { eventTarget } from '@cornerstonejs/core';\nimport Events from '../enums/Events';\nimport InterpolationManager from '../utilities/segmentation/InterpolationManager/InterpolationManager';\nconst enable = function () {\n    eventTarget.addEventListener(Events.ANNOTATION_COMPLETED, InterpolationManager.handleAnnotationCompleted);\n    eventTarget.addEventListener(Events.ANNOTATION_MODIFIED, InterpolationManager.handleAnnotationUpdate);\n    eventTarget.addEventListener(Events.ANNOTATION_REMOVED, InterpolationManager.handleAnnotationDelete);\n};\nconst disable = function () {\n    eventTarget.removeEventListener(Events.ANNOTATION_COMPLETED, InterpolationManager.handleAnnotationCompleted);\n    eventTarget.removeEventListener(Events.ANNOTATION_MODIFIED, InterpolationManager.handleAnnotationUpdate);\n    eventTarget.removeEventListener(Events.ANNOTATION_REMOVED, InterpolationManager.handleAnnotationDelete);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { Enums } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\nconst { Active, Passive, Enabled } = ToolModes;\nconst onCameraModified = function (evt) {\n    const enabledTools = getToolsWithModesForMouseEvent(evt, [\n        Active,\n        Passive,\n        Enabled,\n    ]);\n    enabledTools.forEach((tool) => {\n        if (tool.onCameraModified) {\n            tool.onCameraModified(evt);\n        }\n    });\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.CAMERA_MODIFIED, onCameraModified);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.CAMERA_MODIFIED, onCameraModified);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { Enums } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\nconst { Active, Passive, Enabled } = ToolModes;\nconst onCameraReset = function (evt) {\n    const enabledTools = getToolsWithModesForMouseEvent(evt, [\n        Active,\n        Passive,\n        Enabled,\n    ]);\n    enabledTools.forEach((tool) => {\n        if (tool.onResetCamera) {\n            tool.onResetCamera(evt);\n        }\n    });\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.CAMERA_RESET, onCameraReset);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.CAMERA_RESET, onCameraReset);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { Enums } from '@cornerstonejs/core';\nimport triggerAnnotationRender from '../utilities/triggerAnnotationRender';\nconst onImageRendered = function (evt) {\n    triggerAnnotationRender(evt.detail.element);\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.IMAGE_RENDERED, onImageRendered);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.IMAGE_RENDERED, onImageRendered);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { Enums } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\nconst { Active, Passive, Enabled } = ToolModes;\nconst onImageSpacingCalibrated = function (evt) {\n    const enabledTools = getToolsWithModesForMouseEvent(evt, [\n        Active,\n        Passive,\n        Enabled,\n    ]);\n    enabledTools.forEach((tool) => {\n        if (tool.onImageSpacingCalibrated) {\n            tool.onImageSpacingCalibrated(evt);\n        }\n    });\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.IMAGE_SPACING_CALIBRATED, onImageSpacingCalibrated);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.IMAGE_SPACING_CALIBRATED, onImageSpacingCalibrated);\n};\nexport default {\n    enable,\n    disable,\n};\n","import Events from '../enums/Events';\nimport { keyDown, keyUp } from './keyboardEventHandlers';\nconst enable = function (element) {\n    element.addEventListener(Events.KEY_DOWN, keyDown);\n    element.addEventListener(Events.KEY_UP, keyUp);\n};\nconst disable = function (element) {\n    element.removeEventListener(Events.KEY_DOWN, keyDown);\n    element.removeEventListener(Events.KEY_UP, keyUp);\n};\nconst keyboardToolEventDispatcher = {\n    enable,\n    disable,\n};\nexport default keyboardToolEventDispatcher;\n","import Events from '../enums/Events';\nimport { mouseClick, mouseDown, mouseDownActivate, mouseDoubleClick, mouseDrag, mouseMove, mouseUp, mouseWheel, } from './mouseEventHandlers';\nconst enable = function (element) {\n    element.addEventListener(Events.MOUSE_CLICK, mouseClick);\n    element.addEventListener(Events.MOUSE_DOWN, mouseDown);\n    element.addEventListener(Events.MOUSE_DOWN_ACTIVATE, mouseDownActivate);\n    element.addEventListener(Events.MOUSE_DOUBLE_CLICK, mouseDoubleClick);\n    element.addEventListener(Events.MOUSE_DRAG, mouseDrag);\n    element.addEventListener(Events.MOUSE_MOVE, mouseMove);\n    element.addEventListener(Events.MOUSE_UP, mouseUp);\n    element.addEventListener(Events.MOUSE_WHEEL, mouseWheel);\n};\nconst disable = function (element) {\n    element.removeEventListener(Events.MOUSE_CLICK, mouseClick);\n    element.removeEventListener(Events.MOUSE_DOWN, mouseDown);\n    element.removeEventListener(Events.MOUSE_DOWN_ACTIVATE, mouseDownActivate);\n    element.removeEventListener(Events.MOUSE_DOUBLE_CLICK, mouseDoubleClick);\n    element.removeEventListener(Events.MOUSE_DRAG, mouseDrag);\n    element.removeEventListener(Events.MOUSE_MOVE, mouseMove);\n    element.removeEventListener(Events.MOUSE_UP, mouseUp);\n    element.removeEventListener(Events.MOUSE_WHEEL, mouseWheel);\n};\nconst mouseToolEventDispatcher = {\n    enable,\n    disable,\n};\nexport default mouseToolEventDispatcher;\n","import Events from '../enums/Events';\nimport { touchStart, touchStartActivate, touchDrag, touchEnd, touchTap, touchPress, } from './touchEventHandlers';\nconst enable = function (element) {\n    element.addEventListener(Events.TOUCH_START, touchStart);\n    element.addEventListener(Events.TOUCH_START_ACTIVATE, touchStartActivate);\n    element.addEventListener(Events.TOUCH_DRAG, touchDrag);\n    element.addEventListener(Events.TOUCH_END, touchEnd);\n    element.addEventListener(Events.TOUCH_TAP, touchTap);\n    element.addEventListener(Events.TOUCH_PRESS, touchPress);\n};\nconst disable = function (element) {\n    element.removeEventListener(Events.TOUCH_START, touchStart);\n    element.removeEventListener(Events.TOUCH_START_ACTIVATE, touchStartActivate);\n    element.removeEventListener(Events.TOUCH_DRAG, touchDrag);\n    element.removeEventListener(Events.TOUCH_END, touchEnd);\n    element.removeEventListener(Events.TOUCH_PRESS, touchPress);\n};\nconst touchToolEventDispatcher = {\n    enable,\n    disable,\n};\nexport default touchToolEventDispatcher;\n","import mouseDoubleClickListener from './mouseDoubleClickListener';\nimport mouseDownListener, { mouseDoubleClickIgnoreListener, } from './mouseDownListener';\nimport mouseMoveListener from './mouseMoveListener';\nfunction disable(element) {\n    element.removeEventListener('dblclick', mouseDoubleClickListener);\n    element.removeEventListener('mousedown', mouseDownListener);\n    element.removeEventListener('mousemove', mouseMoveListener);\n    element.removeEventListener('dblclick', mouseDoubleClickIgnoreListener, {\n        capture: true,\n    });\n}\nfunction enable(element) {\n    disable(element);\n    element.addEventListener('dblclick', mouseDoubleClickListener);\n    element.addEventListener('mousedown', mouseDownListener);\n    element.addEventListener('mousemove', mouseMoveListener);\n    element.addEventListener('dblclick', mouseDoubleClickIgnoreListener, {\n        capture: true,\n    });\n}\nexport default {\n    enable,\n    disable,\n};\n","import preventGhostClick from './preventGhostClick';\nimport touchStartListener from './touchStartListener';\nfunction disable(element) {\n    preventGhostClick.disable(element);\n    element.removeEventListener('touchstart', touchStartListener);\n}\nfunction enable(element) {\n    disable(element);\n    preventGhostClick.enable(element);\n    element.addEventListener('touchstart', touchStartListener, {\n        passive: false,\n    });\n}\nexport default {\n    enable,\n    disable,\n};\n","import wheelListener from './wheelListener';\nfunction enable(element) {\n    disable(element);\n    element.addEventListener('wheel', wheelListener, { passive: false });\n}\nfunction disable(element) {\n    element.removeEventListener('wheel', wheelListener);\n}\nexport default {\n    enable,\n    disable,\n};\n","import { VolumeViewport, getEnabledElementByViewportId, StackViewport, } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../../enums';\nimport { performVolumeLabelmapUpdate } from './performVolumeLabelmapUpdate';\nimport { performStackLabelmapUpdate } from './performStackLabelmapUpdate';\nimport { getSegmentation } from '../../../stateManagement/segmentation/getSegmentation';\nimport { getViewportIdsWithSegmentation } from '../../../stateManagement/segmentation/getViewportIdsWithSegmentation';\nconst onLabelmapSegmentationDataModified = function (evt) {\n    const { segmentationId, modifiedSlicesToUse } = evt.detail;\n    const { representationData } = getSegmentation(segmentationId);\n    const viewportIds = getViewportIdsWithSegmentation(segmentationId);\n    const hasVolumeViewport = viewportIds.some((viewportId) => {\n        const { viewport } = getEnabledElementByViewportId(viewportId);\n        return viewport instanceof VolumeViewport;\n    });\n    const hasStackViewport = viewportIds.some((viewportId) => {\n        const { viewport } = getEnabledElementByViewportId(viewportId);\n        return viewport instanceof StackViewport;\n    });\n    const hasBothStackAndVolume = hasVolumeViewport && hasStackViewport;\n    viewportIds.forEach((viewportId) => {\n        const { viewport } = getEnabledElementByViewportId(viewportId);\n        if (viewport instanceof VolumeViewport) {\n            performVolumeLabelmapUpdate({\n                modifiedSlicesToUse: hasBothStackAndVolume ? [] : modifiedSlicesToUse,\n                representationData,\n                type: SegmentationRepresentations.Labelmap,\n            });\n        }\n        if (viewport instanceof StackViewport) {\n            performStackLabelmapUpdate({\n                viewportIds,\n                segmentationId,\n            });\n        }\n    });\n};\nexport default onLabelmapSegmentationDataModified;\n","import { cache } from '@cornerstonejs/core';\nexport function performVolumeLabelmapUpdate({ modifiedSlicesToUse, representationData, type, }) {\n    const segmentationVolume = cache.getVolume(representationData[type].volumeId);\n    if (!segmentationVolume) {\n        console.warn('segmentation not found in cache');\n        return;\n    }\n    const { imageData, vtkOpenGLTexture } = segmentationVolume;\n    let slicesToUpdate;\n    if (modifiedSlicesToUse?.length > 0) {\n        slicesToUpdate = modifiedSlicesToUse;\n    }\n    else {\n        const numSlices = imageData.getDimensions()[2];\n        slicesToUpdate = [...Array(numSlices).keys()];\n    }\n    slicesToUpdate.forEach((i) => {\n        vtkOpenGLTexture.setUpdatedFrame(i);\n    });\n    imageData.modified();\n}\n","import { cache, utilities as csUtils, VolumeViewport, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../../enums';\nimport { getLabelmapActorEntries } from '../../../stateManagement/segmentation/helpers/getSegmentationActor';\nimport { getSegmentationRepresentations } from '../../../stateManagement/segmentation/getSegmentationRepresentation';\nimport { getCurrentLabelmapImageIdsForViewport } from '../../../stateManagement/segmentation/getCurrentLabelmapImageIdForViewport';\nexport function performStackLabelmapUpdate({ viewportIds, segmentationId, }) {\n    viewportIds.forEach((viewportId) => {\n        let representations = getSegmentationRepresentations(viewportId, {\n            segmentationId,\n        });\n        representations = representations.filter((representation) => representation.type === SegmentationRepresentations.Labelmap);\n        representations.forEach((representation) => {\n            if (representation.segmentationId !== segmentationId) {\n                return;\n            }\n            const enabledElement = getEnabledElementByViewportId(viewportId);\n            if (!enabledElement) {\n                return;\n            }\n            const { viewport } = enabledElement;\n            if (viewport instanceof VolumeViewport) {\n                return;\n            }\n            const actorEntries = getLabelmapActorEntries(viewportId, segmentationId);\n            if (!actorEntries?.length) {\n                return;\n            }\n            actorEntries.forEach((actorEntry, i) => {\n                const segImageData = actorEntry.actor.getMapper().getInputData();\n                const currentSegmentationImageIds = getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId);\n                const segmentationImage = cache.getImage(currentSegmentationImageIds[i]);\n                segImageData.modified();\n                csUtils.updateVTKImageDataWithCornerstoneImage(segImageData, segmentationImage);\n            });\n        });\n    });\n}\n","import { triggerSegmentationRenderBySegmentationId } from '../../stateManagement/segmentation/SegmentationRenderingEngine';\nimport onLabelmapSegmentationDataModified from './labelmap/onLabelmapSegmentationDataModified';\nimport { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nconst onSegmentationDataModified = function (evt) {\n    const { segmentationId } = evt.detail;\n    const { representationData } = getSegmentation(segmentationId);\n    if (representationData.Labelmap) {\n        onLabelmapSegmentationDataModified(evt);\n    }\n    triggerSegmentationRenderBySegmentationId(segmentationId);\n};\nexport default onSegmentationDataModified;\n","import { triggerSegmentationRenderBySegmentationId } from '../../stateManagement/segmentation/SegmentationRenderingEngine';\nconst segmentationModifiedListener = function (evt) {\n    const { segmentationId } = evt.detail;\n    triggerSegmentationRenderBySegmentationId(segmentationId);\n};\nexport default segmentationModifiedListener;\n","import vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport { BaseVolumeViewport, getEnabledElement, Enums, getEnabledElementByIds, cache, utilities, } from '@cornerstonejs/core';\nimport { triggerSegmentationRender } from '../../stateManagement/segmentation/SegmentationRenderingEngine';\nimport { updateLabelmapSegmentationImageReferences } from '../../stateManagement/segmentation/updateLabelmapSegmentationImageReferences';\nimport { getCurrentLabelmapImageIdsForViewport } from '../../stateManagement/segmentation/getCurrentLabelmapImageIdForViewport';\nimport { SegmentationRepresentations } from '../../enums';\nimport { getLabelmapActorEntries } from '../../stateManagement/segmentation/helpers/getSegmentationActor';\nimport { getSegmentationRepresentations } from '../../stateManagement/segmentation/getSegmentationRepresentation';\nconst enable = function (element) {\n    if (!element) {\n        return;\n    }\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        return;\n    }\n    const { viewport } = enabledElement;\n    if (viewport instanceof BaseVolumeViewport) {\n        return;\n    }\n    element.addEventListener(Enums.Events.PRE_STACK_NEW_IMAGE, _imageChangeEventListener);\n    element.addEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.PRE_STACK_NEW_IMAGE, _imageChangeEventListener);\n    element.removeEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n};\nconst perViewportManualTriggers = new Map();\nfunction _imageChangeEventListener(evt) {\n    const eventData = evt.detail;\n    const { viewportId, renderingEngineId } = eventData;\n    const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n    const representations = getSegmentationRepresentations(viewportId);\n    if (!representations?.length) {\n        return;\n    }\n    const labelmapRepresentations = representations.filter((representation) => representation.type === SegmentationRepresentations.Labelmap);\n    const actors = viewport.getActors();\n    labelmapRepresentations.forEach((representation) => {\n        const { segmentationId } = representation;\n        updateLabelmapSegmentationImageReferences(viewportId, segmentationId);\n    });\n    const labelmapActors = labelmapRepresentations\n        .flatMap((representation) => {\n        return getLabelmapActorEntries(viewportId, representation.segmentationId);\n    })\n        .filter((actor) => actor !== undefined);\n    if (!labelmapActors.length) {\n        return;\n    }\n    labelmapActors.forEach((actor) => {\n        const validActor = labelmapRepresentations.find((representation) => {\n            const derivedImageIds = getCurrentLabelmapImageIdsForViewport(viewportId, representation.segmentationId);\n            return derivedImageIds?.includes(actor.referencedId);\n        });\n        if (!validActor) {\n            viewport.removeActors([actor.uid]);\n        }\n    });\n    labelmapRepresentations.forEach((representation) => {\n        const { segmentationId } = representation;\n        const currentImageId = viewport.getCurrentImageId();\n        const derivedImageIds = getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId);\n        if (!derivedImageIds) {\n            return;\n        }\n        let shouldTriggerSegmentationRender = false;\n        const updateSegmentationActor = (derivedImageId) => {\n            const derivedImage = cache.getImage(derivedImageId);\n            if (!derivedImage) {\n                console.warn('No derived image found in the cache for segmentation representation', representation);\n                return;\n            }\n            const segmentationActorInput = actors.find((actor) => actor.referencedId === derivedImageId);\n            if (!segmentationActorInput) {\n                const { dimensions, spacing, direction } = viewport.getImageDataMetadata(derivedImage);\n                const currentImage = cache.getImage(currentImageId) ||\n                    {\n                        imageId: currentImageId,\n                    };\n                const { origin: currentOrigin } = viewport.getImageDataMetadata(currentImage);\n                const originToUse = currentOrigin;\n                const constructor = derivedImage.voxelManager.getConstructor();\n                const newPixelData = derivedImage.voxelManager.getScalarData();\n                const scalarArray = vtkDataArray.newInstance({\n                    name: 'Pixels',\n                    numberOfComponents: 1,\n                    values: new constructor(newPixelData),\n                });\n                const imageData = vtkImageData.newInstance();\n                imageData.setDimensions(dimensions[0], dimensions[1], 1);\n                imageData.setSpacing(spacing);\n                imageData.setDirection(direction);\n                imageData.setOrigin(originToUse);\n                imageData.getPointData().setScalars(scalarArray);\n                imageData.modified();\n                viewport.addImages([\n                    {\n                        imageId: derivedImageId,\n                        representationUID: `${segmentationId}-${SegmentationRepresentations.Labelmap}-${derivedImage.imageId}`,\n                        callback: ({ imageActor }) => {\n                            imageActor.getMapper().setInputData(imageData);\n                        },\n                    },\n                ]);\n                shouldTriggerSegmentationRender = true;\n                return;\n            }\n            else {\n                const segmentationImageData = segmentationActorInput.actor\n                    .getMapper()\n                    .getInputData();\n                if (segmentationImageData.setDerivedImage) {\n                    segmentationImageData.setDerivedImage(derivedImage);\n                }\n                else {\n                    utilities.updateVTKImageDataWithCornerstoneImage(segmentationImageData, derivedImage);\n                }\n            }\n        };\n        derivedImageIds.forEach(updateSegmentationActor);\n        if (shouldTriggerSegmentationRender) {\n            triggerSegmentationRender(viewportId);\n        }\n        viewport.render();\n        if (evt.type === Enums.Events.IMAGE_RENDERED) {\n            viewport.element.removeEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n        }\n    });\n}\nexport default {\n    enable,\n    disable,\n};\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport getViewportsForAnnotation from '../../../utilities/getViewportsForAnnotation';\nimport { getAllAnnotations } from '../../../stateManagement/annotation/annotationState';\nimport { areSameSegment, isContourSegmentationAnnotation, } from '../../../utilities/contourSegmentation';\nimport { getToolGroupForViewport } from '../../../store/ToolGroupManager';\nimport { findAllIntersectingContours } from '../../../utilities/contourSegmentation/getIntersectingAnnotations';\nimport { processMultipleIntersections } from '../../../utilities/contourSegmentation/mergeMultipleAnnotations';\nimport { convertContourPolylineToCanvasSpace, createPolylineHole, combinePolylines, } from '../../../utilities/contourSegmentation/sharedOperations';\nimport { Events } from '../../../enums';\nconst DEFAULT_CONTOUR_SEG_TOOL_NAME = 'PlanarFreehandContourSegmentationTool';\nexport default async function contourSegmentationCompletedListener(evt) {\n    const sourceAnnotation = evt.detail\n        .annotation;\n    if (!isContourSegmentationAnnotation(sourceAnnotation)) {\n        return;\n    }\n    const viewport = getViewport(sourceAnnotation);\n    const contourSegmentationAnnotations = getValidContourSegmentationAnnotations(viewport, sourceAnnotation);\n    if (!contourSegmentationAnnotations.length) {\n        triggerEvent(eventTarget, Events.ANNOTATION_CUT_MERGE_PROCESS_COMPLETED, {\n            element: viewport.element,\n            sourceAnnotation,\n        });\n        return;\n    }\n    const sourcePolyline = convertContourPolylineToCanvasSpace(sourceAnnotation.data.contour.polyline, viewport);\n    const intersectingContours = findAllIntersectingContours(viewport, sourcePolyline, contourSegmentationAnnotations);\n    if (!intersectingContours.length) {\n        triggerEvent(eventTarget, Events.ANNOTATION_CUT_MERGE_PROCESS_COMPLETED, {\n            element: viewport.element,\n            sourceAnnotation,\n        });\n        return;\n    }\n    if (intersectingContours.length > 1) {\n        processMultipleIntersections(viewport, sourceAnnotation, sourcePolyline, intersectingContours);\n        return;\n    }\n    const { targetAnnotation, targetPolyline, isContourHole } = intersectingContours[0];\n    if (isContourHole) {\n        const { contourHoleProcessingEnabled = false } = evt.detail;\n        if (!contourHoleProcessingEnabled) {\n            return;\n        }\n        createPolylineHole(viewport, targetAnnotation, sourceAnnotation);\n    }\n    else {\n        combinePolylines(viewport, targetAnnotation, targetPolyline, sourceAnnotation, sourcePolyline);\n    }\n}\nfunction isFreehandContourSegToolRegisteredForViewport(viewport, silent = false) {\n    const toolName = 'PlanarFreehandContourSegmentationTool';\n    const toolGroup = getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\n    let errorMessage;\n    if (!toolGroup) {\n        errorMessage = `ToolGroup not found for viewport ${viewport.id}`;\n    }\n    else if (!toolGroup.hasTool(toolName)) {\n        errorMessage = `Tool ${toolName} not added to ${toolGroup.id} toolGroup`;\n    }\n    else if (!toolGroup.getToolOptions(toolName)) {\n        errorMessage = `Tool ${toolName} must be in active/passive state in ${toolGroup.id} toolGroup`;\n    }\n    if (errorMessage && !silent) {\n        console.warn(errorMessage);\n    }\n    return !errorMessage;\n}\nfunction getViewport(annotation) {\n    const viewports = getViewportsForAnnotation(annotation);\n    const viewportWithToolRegistered = viewports.find((viewport) => isFreehandContourSegToolRegisteredForViewport(viewport, true));\n    return viewportWithToolRegistered ?? viewports[0];\n}\nfunction getValidContourSegmentationAnnotations(viewport, sourceAnnotation) {\n    const { annotationUID: sourceAnnotationUID } = sourceAnnotation;\n    const allAnnotations = getAllAnnotations();\n    return allAnnotations.filter((targetAnnotation) => targetAnnotation.annotationUID &&\n        targetAnnotation.annotationUID !== sourceAnnotationUID &&\n        isContourSegmentationAnnotation(targetAnnotation) &&\n        areSameSegment(targetAnnotation, sourceAnnotation) &&\n        viewport.isReferenceViewable(targetAnnotation.metadata));\n}\n","import * as contourSegUtils from '../../utilities/contourSegmentation';\nimport { contourSegmentationCompleted } from './contourSegmentation';\nexport default function annotationCompletedListener(evt) {\n    const annotation = evt.detail.annotation;\n    if (contourSegUtils.isContourSegmentationAnnotation(annotation)) {\n        contourSegmentationCompleted(evt);\n    }\n}\n","import { getRenderingEngines } from '@cornerstonejs/core';\nimport { triggerAnnotationRenderForViewportIds } from '../../utilities/triggerAnnotationRenderForViewportIds';\nfunction annotationSelectionListener(evt) {\n    const deselectedAnnotation = evt.detail.removed;\n    if (!deselectedAnnotation.length) {\n        return;\n    }\n    const renderingEngines = getRenderingEngines();\n    renderingEngines.forEach((renderingEngine) => {\n        const viewports = renderingEngine.getViewports();\n        const viewportIds = viewports.map((vp) => vp.id);\n        triggerAnnotationRenderForViewportIds(viewportIds);\n    });\n}\nexport default annotationSelectionListener;\n","import triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nfunction annotationModifiedListener(evt) {\n    const { viewportId } = evt.detail;\n    triggerAnnotationRenderForViewportIds([viewportId]);\n}\nexport default annotationModifiedListener;\n","import * as contourSegUtils from '../../utilities/contourSegmentation';\nimport { contourSegmentationRemoved } from './contourSegmentation';\nexport default function annotationRemovedListener(evt) {\n    const annotation = evt.detail.annotation;\n    if (contourSegUtils.isContourSegmentationAnnotation(annotation)) {\n        contourSegmentationRemoved(evt);\n    }\n}\n","import { removeContourSegmentationAnnotation } from '../../../utilities/contourSegmentation';\nexport default function contourSegmentationRemovedListener(evt) {\n    const annotation = evt.detail.annotation;\n    removeContourSegmentationAnnotation(annotation);\n}\n","import { triggerSegmentationRender } from '../../stateManagement/segmentation/SegmentationRenderingEngine';\nconst segmentationRepresentationModifiedListener = function (evt) {\n    const { viewportId } = evt.detail;\n    triggerSegmentationRender(viewportId);\n};\nexport default segmentationRepresentationModifiedListener;\n","import { eventTarget, Enums } from '@cornerstonejs/core';\nimport { getAnnotationManager } from './stateManagement/annotation/annotationState';\nimport { Events as TOOLS_EVENTS } from './enums';\nimport { addEnabledElement, removeEnabledElement } from './store';\nimport { resetCornerstoneToolsState } from './store/state';\nimport { annotationCompletedListener, annotationRemovedListener, annotationSelectionListener, annotationModifiedListener, segmentationDataModifiedEventListener, segmentationModifiedListener, } from './eventListeners';\nimport { annotationInterpolationEventDispatcher } from './eventDispatchers';\nimport * as ToolGroupManager from './store/ToolGroupManager';\nimport { defaultSegmentationStateManager } from './stateManagement/segmentation/SegmentationStateManager';\nimport segmentationRepresentationModifiedListener from './eventListeners/segmentation/segmentationRepresentationModifiedListener';\nimport { setConfig } from './config';\nlet csToolsInitialized = false;\nexport function init(defaultConfiguration = {}) {\n    if (csToolsInitialized) {\n        return;\n    }\n    setConfig(defaultConfiguration);\n    _addCornerstoneEventListeners();\n    _addCornerstoneToolsEventListeners();\n    csToolsInitialized = true;\n}\nexport function destroy() {\n    _removeCornerstoneEventListeners();\n    _removeCornerstoneToolsEventListeners();\n    ToolGroupManager.destroy();\n    resetCornerstoneToolsState();\n    const annotationManager = getAnnotationManager();\n    const segmentationStateManager = defaultSegmentationStateManager;\n    annotationManager.restoreAnnotations({});\n    segmentationStateManager.resetState();\n    csToolsInitialized = false;\n}\nfunction _addCornerstoneEventListeners() {\n    _removeCornerstoneEventListeners();\n    const elementEnabledEvent = Enums.Events.ELEMENT_ENABLED;\n    const elementDisabledEvent = Enums.Events.ELEMENT_DISABLED;\n    eventTarget.addEventListener(elementEnabledEvent, addEnabledElement);\n    eventTarget.addEventListener(elementDisabledEvent, removeEnabledElement);\n    annotationInterpolationEventDispatcher.enable();\n}\nfunction _removeCornerstoneEventListeners() {\n    const elementEnabledEvent = Enums.Events.ELEMENT_ENABLED;\n    const elementDisabledEvent = Enums.Events.ELEMENT_DISABLED;\n    eventTarget.removeEventListener(elementEnabledEvent, addEnabledElement);\n    eventTarget.removeEventListener(elementDisabledEvent, removeEnabledElement);\n    annotationInterpolationEventDispatcher.disable();\n}\nfunction _addCornerstoneToolsEventListeners() {\n    _removeCornerstoneToolsEventListeners();\n    eventTarget.addEventListener(TOOLS_EVENTS.ANNOTATION_COMPLETED, annotationCompletedListener);\n    eventTarget.addEventListener(TOOLS_EVENTS.ANNOTATION_MODIFIED, annotationModifiedListener);\n    eventTarget.addEventListener(TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE, annotationSelectionListener);\n    eventTarget.addEventListener(TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE, annotationSelectionListener);\n    eventTarget.addEventListener(TOOLS_EVENTS.ANNOTATION_REMOVED, annotationRemovedListener);\n    eventTarget.addEventListener(TOOLS_EVENTS.SEGMENTATION_MODIFIED, segmentationModifiedListener);\n    eventTarget.addEventListener(TOOLS_EVENTS.SEGMENTATION_DATA_MODIFIED, segmentationDataModifiedEventListener);\n    eventTarget.addEventListener(TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_MODIFIED, segmentationRepresentationModifiedListener);\n    eventTarget.addEventListener(TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_ADDED, segmentationRepresentationModifiedListener);\n}\nfunction _removeCornerstoneToolsEventListeners() {\n    eventTarget.removeEventListener(TOOLS_EVENTS.ANNOTATION_COMPLETED, annotationCompletedListener);\n    eventTarget.removeEventListener(TOOLS_EVENTS.ANNOTATION_MODIFIED, annotationModifiedListener);\n    eventTarget.removeEventListener(TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE, annotationSelectionListener);\n    eventTarget.removeEventListener(TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE, annotationSelectionListener);\n    eventTarget.removeEventListener(TOOLS_EVENTS.SEGMENTATION_MODIFIED, segmentationModifiedListener);\n    eventTarget.removeEventListener(TOOLS_EVENTS.SEGMENTATION_DATA_MODIFIED, segmentationDataModifiedEventListener);\n    eventTarget.removeEventListener(TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_MODIFIED, segmentationRepresentationModifiedListener);\n    eventTarget.removeEventListener(TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_ADDED, segmentationRepresentationModifiedListener);\n}\nexport default init;\n","import { getEnabledElement, triggerEvent, getRenderingEngine, } from '@cornerstonejs/core';\nimport { Events, ToolModes } from '../../enums';\nimport { draw as drawSvg } from '../../drawingSvg';\nimport getToolsWithModesForElement from '../../utilities/getToolsWithModesForElement';\nconst { Active, Passive, Enabled } = ToolModes;\nclass AnnotationRenderingEngine {\n    constructor() {\n        this._needsRender = new Set();\n        this._animationFrameSet = false;\n        this._animationFrameHandle = null;\n        this._renderFlaggedViewports = () => {\n            this._throwIfDestroyed();\n            const elements = Array.from(this._viewportElements.values());\n            for (let i = 0; i < elements.length; i++) {\n                const element = elements[i];\n                if (this._needsRender.has(element)) {\n                    this._triggerRender(element);\n                    this._needsRender.delete(element);\n                    if (this._needsRender.size === 0) {\n                        break;\n                    }\n                }\n            }\n            this._animationFrameSet = false;\n            this._animationFrameHandle = null;\n            this._render();\n        };\n        this._viewportElements = new Map();\n    }\n    addViewportElement(viewportId, element) {\n        this._viewportElements.set(viewportId, element);\n    }\n    removeViewportElement(viewportId, element) {\n        this._viewportElements.delete(viewportId);\n        this._needsRender.delete(element);\n        this._reset();\n    }\n    renderViewport(element) {\n        this._setViewportsToBeRenderedNextFrame([element]);\n    }\n    _throwIfDestroyed() {\n        if (this.hasBeenDestroyed) {\n            throw new Error('this.destroy() has been manually called to free up memory, can not longer use this instance. Instead make a new one.');\n        }\n    }\n    _setAllViewportsToBeRenderedNextFrame() {\n        const elements = [...this._viewportElements.values()];\n        elements.forEach((element) => {\n            this._needsRender.add(element);\n        });\n        this._renderFlaggedViewports();\n    }\n    _setViewportsToBeRenderedNextFrame(elements) {\n        const elementsEnabled = [...this._viewportElements.values()];\n        elements.forEach((element) => {\n            if (elementsEnabled.indexOf(element) !== -1) {\n                this._needsRender.add(element);\n            }\n        });\n        this._render();\n    }\n    _render() {\n        if (this._needsRender.size > 0 && this._animationFrameSet === false) {\n            this._animationFrameHandle = window.requestAnimationFrame(this._renderFlaggedViewports);\n            this._animationFrameSet = true;\n        }\n    }\n    _triggerRender(element) {\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        const renderingEngine = getRenderingEngine(enabledElement.renderingEngineId);\n        if (!renderingEngine) {\n            console.warn('rendering Engine has been destroyed');\n            return;\n        }\n        const enabledTools = getToolsWithModesForElement(element, [\n            Active,\n            Passive,\n            Enabled,\n        ]);\n        const { renderingEngineId, viewportId } = enabledElement;\n        const eventDetail = {\n            element,\n            renderingEngineId,\n            viewportId,\n        };\n        drawSvg(element, (svgDrawingHelper) => {\n            let anyRendered = false;\n            const handleDrawSvg = (tool) => {\n                if (tool.renderAnnotation) {\n                    const rendered = tool.renderAnnotation(enabledElement, svgDrawingHelper);\n                    anyRendered = anyRendered || rendered;\n                }\n            };\n            enabledTools.forEach(handleDrawSvg);\n            if (anyRendered) {\n                triggerEvent(element, Events.ANNOTATION_RENDERED, { ...eventDetail });\n            }\n        });\n    }\n    _reset() {\n        window.cancelAnimationFrame(this._animationFrameHandle);\n        this._needsRender.clear();\n        this._animationFrameSet = false;\n        this._animationFrameHandle = null;\n        this._setAllViewportsToBeRenderedNextFrame();\n    }\n}\nconst annotationRenderingEngine = new AnnotationRenderingEngine();\nexport { annotationRenderingEngine };\n","import { Enums, eventTarget, getEnabledElement, utilities, } from '@cornerstonejs/core';\nclass FrameOfReferenceSpecificAnnotationManager {\n    constructor(uid) {\n        this.getGroupKey = (annotationGroupSelector) => {\n            if (typeof annotationGroupSelector === 'string') {\n                return annotationGroupSelector;\n            }\n            const element = annotationGroupSelector;\n            const enabledElement = getEnabledElement(element);\n            if (!enabledElement) {\n                throw new Error('Element not enabled, you must have an enabled element if you are not providing a FrameOfReferenceUID');\n            }\n            return enabledElement.FrameOfReferenceUID;\n        };\n        this._imageVolumeModifiedHandler = (evt) => {\n            const eventDetail = evt.detail;\n            const { FrameOfReferenceUID } = eventDetail;\n            const annotations = this.annotations;\n            const frameOfReferenceSpecificAnnotations = annotations[FrameOfReferenceUID];\n            if (!frameOfReferenceSpecificAnnotations) {\n                return;\n            }\n            Object.keys(frameOfReferenceSpecificAnnotations).forEach((toolName) => {\n                const toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n                toolSpecificAnnotations.forEach((annotation) => {\n                    const invalidated = annotation.invalidated;\n                    if (invalidated !== undefined) {\n                        annotation.invalidated = true;\n                    }\n                });\n            });\n        };\n        this.getFramesOfReference = () => {\n            return Object.keys(this.annotations);\n        };\n        this.getAnnotations = (groupKey, toolName) => {\n            const annotations = this.annotations;\n            if (!annotations[groupKey]) {\n                return [];\n            }\n            if (toolName) {\n                return annotations[groupKey][toolName]\n                    ? annotations[groupKey][toolName]\n                    : [];\n            }\n            return annotations[groupKey];\n        };\n        this.getAnnotation = (annotationUID) => {\n            const annotations = this.annotations;\n            for (const frameOfReferenceUID in annotations) {\n                const frameOfReferenceAnnotations = annotations[frameOfReferenceUID];\n                for (const toolName in frameOfReferenceAnnotations) {\n                    const toolSpecificAnnotations = frameOfReferenceAnnotations[toolName];\n                    for (const annotation of toolSpecificAnnotations) {\n                        if (annotationUID === annotation.annotationUID) {\n                            return annotation;\n                        }\n                    }\n                }\n            }\n        };\n        this.getNumberOfAnnotations = (groupKey, toolName) => {\n            const annotations = this.getAnnotations(groupKey, toolName);\n            if (!annotations.length) {\n                return 0;\n            }\n            if (toolName) {\n                return annotations.length;\n            }\n            let total = 0;\n            for (const toolName in annotations) {\n                total += annotations[toolName].length;\n            }\n            return total;\n        };\n        this.addAnnotation = (annotation, groupKey) => {\n            const { metadata } = annotation;\n            const { FrameOfReferenceUID, toolName } = metadata;\n            groupKey = groupKey || FrameOfReferenceUID;\n            const annotations = this.annotations;\n            let frameOfReferenceSpecificAnnotations = annotations[groupKey];\n            if (!frameOfReferenceSpecificAnnotations) {\n                annotations[groupKey] = {};\n                frameOfReferenceSpecificAnnotations = annotations[groupKey];\n            }\n            let toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n            if (!toolSpecificAnnotations) {\n                frameOfReferenceSpecificAnnotations[toolName] = [];\n                toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n            }\n            if (this.preprocessingFn) {\n                annotation = this.preprocessingFn(annotation);\n            }\n            toolSpecificAnnotations.push(annotation);\n        };\n        this.removeAnnotation = (annotationUID) => {\n            const { annotations } = this;\n            for (const groupKey in annotations) {\n                const groupAnnotations = annotations[groupKey];\n                for (const toolName in groupAnnotations) {\n                    const toolAnnotations = groupAnnotations[toolName];\n                    const index = toolAnnotations.findIndex((annotation) => annotation.annotationUID === annotationUID);\n                    if (index !== -1) {\n                        toolAnnotations.splice(index, 1);\n                        if (toolAnnotations.length === 0) {\n                            delete groupAnnotations[toolName];\n                        }\n                    }\n                }\n                if (Object.keys(groupAnnotations).length === 0) {\n                    delete annotations[groupKey];\n                }\n            }\n        };\n        this.removeAnnotations = (groupKey, toolName) => {\n            const annotations = this.annotations;\n            const removedAnnotations = [];\n            if (!annotations[groupKey]) {\n                return removedAnnotations;\n            }\n            if (toolName) {\n                const annotationsForTool = annotations[groupKey][toolName];\n                if (annotationsForTool) {\n                    for (const annotation of annotationsForTool) {\n                        this.removeAnnotation(annotation.annotationUID);\n                        removedAnnotations.push(annotation);\n                    }\n                }\n            }\n            else {\n                for (const toolName in annotations[groupKey]) {\n                    const annotationsForTool = annotations[groupKey][toolName];\n                    for (const annotation of annotationsForTool) {\n                        this.removeAnnotation(annotation.annotationUID);\n                        removedAnnotations.push(annotation);\n                    }\n                }\n            }\n            return removedAnnotations;\n        };\n        this.saveAnnotations = (groupKey, toolName) => {\n            const annotations = this.annotations;\n            if (groupKey && toolName) {\n                const frameOfReferenceSpecificAnnotations = annotations[groupKey];\n                if (!frameOfReferenceSpecificAnnotations) {\n                    return;\n                }\n                const toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n                return structuredClone(toolSpecificAnnotations);\n            }\n            else if (groupKey) {\n                const frameOfReferenceSpecificAnnotations = annotations[groupKey];\n                return structuredClone(frameOfReferenceSpecificAnnotations);\n            }\n            return structuredClone(annotations);\n        };\n        this.restoreAnnotations = (state, groupKey, toolName) => {\n            const annotations = this.annotations;\n            if (groupKey && toolName) {\n                let frameOfReferenceSpecificAnnotations = annotations[groupKey];\n                if (!frameOfReferenceSpecificAnnotations) {\n                    annotations[groupKey] = {};\n                    frameOfReferenceSpecificAnnotations = annotations[groupKey];\n                }\n                frameOfReferenceSpecificAnnotations[toolName] = state;\n            }\n            else if (groupKey) {\n                annotations[groupKey] = state;\n            }\n            else {\n                this.annotations = structuredClone(state);\n            }\n        };\n        this.getAllAnnotations = () => {\n            return Object.values(this.annotations)\n                .map((frameOfReferenceSpecificAnnotations) => Object.values(frameOfReferenceSpecificAnnotations))\n                .flat(2);\n        };\n        this.getNumberOfAllAnnotations = () => {\n            let count = 0;\n            const annotations = this.annotations;\n            for (const groupKey in annotations) {\n                const frameOfReferenceSpecificAnnotations = annotations[groupKey];\n                for (const toolName in frameOfReferenceSpecificAnnotations) {\n                    const toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n                    count += toolSpecificAnnotations.length;\n                }\n            }\n            return count;\n        };\n        this.removeAllAnnotations = () => {\n            const removedAnnotations = [];\n            for (const annotation of this.getAllAnnotations()) {\n                this.removeAnnotation(annotation.annotationUID);\n                removedAnnotations.push(annotation);\n            }\n            return removedAnnotations;\n        };\n        if (!uid) {\n            uid = utilities.uuidv4();\n        }\n        this.annotations = {};\n        this.uid = uid;\n        eventTarget.addEventListener(Enums.Events.IMAGE_VOLUME_MODIFIED, this._imageVolumeModifiedHandler);\n    }\n    setPreprocessingFn(preprocessingFn) {\n        this.preprocessingFn = preprocessingFn;\n    }\n}\nconst defaultFrameOfReferenceSpecificAnnotationManager = new FrameOfReferenceSpecificAnnotationManager('DEFAULT');\nexport { defaultFrameOfReferenceSpecificAnnotationManager };\nexport default FrameOfReferenceSpecificAnnotationManager;\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport { getAnnotation } from './annotationState';\nconst globalLockedAnnotationUIDsSet = new Set();\nfunction setAnnotationLocked(annotationUID, locked = true) {\n    const detail = makeEventDetail();\n    if (annotationUID) {\n        if (locked) {\n            lock(annotationUID, globalLockedAnnotationUIDsSet, detail);\n        }\n        else {\n            unlock(annotationUID, globalLockedAnnotationUIDsSet, detail);\n        }\n    }\n    publish(detail, globalLockedAnnotationUIDsSet);\n}\nfunction unlockAllAnnotations() {\n    const detail = makeEventDetail();\n    clearLockedAnnotationsSet(globalLockedAnnotationUIDsSet, detail);\n    publish(detail, globalLockedAnnotationUIDsSet);\n}\nfunction getAnnotationsLocked() {\n    return Array.from(globalLockedAnnotationUIDsSet);\n}\nfunction isAnnotationLocked(annotationUID) {\n    return globalLockedAnnotationUIDsSet.has(annotationUID);\n}\nfunction getAnnotationsLockedCount() {\n    return globalLockedAnnotationUIDsSet.size;\n}\nfunction checkAndSetAnnotationLocked(annotationUID) {\n    const isLocked = isAnnotationLocked(annotationUID);\n    setAnnotationLocked(annotationUID, isLocked);\n    return isLocked;\n}\nfunction makeEventDetail() {\n    return Object.freeze({\n        added: [],\n        removed: [],\n        locked: [],\n    });\n}\nfunction lock(annotationUID, lockedAnnotationUIDsSet, detail) {\n    if (!lockedAnnotationUIDsSet.has(annotationUID)) {\n        lockedAnnotationUIDsSet.add(annotationUID);\n        detail.added.push(annotationUID);\n        const annotation = getAnnotation(annotationUID);\n        if (annotation) {\n            annotation.isLocked = true;\n        }\n    }\n}\nfunction unlock(annotationUID, lockedAnnotationUIDsSet, detail) {\n    if (lockedAnnotationUIDsSet.delete(annotationUID)) {\n        detail.removed.push(annotationUID);\n        const annotation = getAnnotation(annotationUID);\n        if (annotation) {\n            annotation.isLocked = false;\n        }\n    }\n}\nfunction clearLockedAnnotationsSet(lockedAnnotationUIDsSet, detail) {\n    lockedAnnotationUIDsSet.forEach((annotationUID) => {\n        unlock(annotationUID, lockedAnnotationUIDsSet, detail);\n    });\n}\nfunction publish(detail, lockedAnnotationUIDsSet) {\n    if (detail.added.length > 0 || detail.removed.length > 0) {\n        lockedAnnotationUIDsSet.forEach((item) => void detail.locked.push(item));\n        triggerEvent(eventTarget, Events.ANNOTATION_LOCK_CHANGE, detail);\n    }\n}\nexport { setAnnotationLocked, getAnnotationsLocked, getAnnotationsLockedCount, unlockAllAnnotations, isAnnotationLocked, checkAndSetAnnotationLocked, };\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport { getAnnotation } from './annotationState';\nconst selectedAnnotationUIDs = new Set();\nfunction setAnnotationSelected(annotationUID, selected = true, preserveSelected = false) {\n    if (selected) {\n        selectAnnotation(annotationUID, preserveSelected);\n    }\n    else {\n        deselectAnnotation(annotationUID);\n    }\n}\nfunction selectAnnotation(annotationUID, preserveSelected = false) {\n    const detail = makeEventDetail();\n    if (!preserveSelected) {\n        clearSelectionSet(selectedAnnotationUIDs, detail);\n        const annotation = getAnnotation(annotationUID);\n        if (annotation) {\n            annotation.isSelected = true;\n        }\n    }\n    if (annotationUID && !selectedAnnotationUIDs.has(annotationUID)) {\n        selectedAnnotationUIDs.add(annotationUID);\n        detail.added.push(annotationUID);\n        const annotation = getAnnotation(annotationUID);\n        if (annotation) {\n            annotation.isSelected = true;\n        }\n    }\n    publish(detail, selectedAnnotationUIDs);\n}\nfunction deselectAnnotation(annotationUID) {\n    const detail = makeEventDetail();\n    if (annotationUID) {\n        if (selectedAnnotationUIDs.delete(annotationUID)) {\n            detail.removed.push(annotationUID);\n            const annotation = getAnnotation(annotationUID);\n            annotation.isSelected = false;\n        }\n    }\n    else {\n        clearSelectionSet(selectedAnnotationUIDs, detail);\n    }\n    publish(detail, selectedAnnotationUIDs);\n}\nfunction getAnnotationsSelected() {\n    return Array.from(selectedAnnotationUIDs);\n}\nfunction getAnnotationsSelectedByToolName(toolName) {\n    return getAnnotationsSelected().filter((annotationUID) => {\n        const annotation = getAnnotation(annotationUID);\n        return annotation?.metadata?.toolName === toolName;\n    });\n}\nfunction isAnnotationSelected(annotationUID) {\n    return selectedAnnotationUIDs.has(annotationUID);\n}\nfunction getAnnotationsSelectedCount() {\n    return selectedAnnotationUIDs.size;\n}\nfunction makeEventDetail() {\n    return Object.freeze({\n        added: [],\n        removed: [],\n        selection: [],\n    });\n}\nfunction clearSelectionSet(selectionSet, detail) {\n    selectionSet.forEach((value) => {\n        if (selectionSet.delete(value)) {\n            detail.removed.push(value);\n            const annotation = getAnnotation(value);\n            if (annotation) {\n                annotation.isSelected = false;\n            }\n        }\n    });\n}\nfunction publish(detail, selectionSet) {\n    if (detail.added.length > 0 || detail.removed.length > 0) {\n        selectionSet.forEach((item) => void detail.selection.push(item));\n        triggerEvent(eventTarget, Events.ANNOTATION_SELECTION_CHANGE, detail);\n    }\n}\nexport { setAnnotationSelected, getAnnotationsSelected, getAnnotationsSelectedByToolName, getAnnotationsSelectedCount, deselectAnnotation, isAnnotationSelected, };\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { triggerAnnotationAddedForElement, triggerAnnotationAddedForFOR, triggerAnnotationRemoved, } from './helpers/state';\nlet defaultManager;\nfunction getAnnotationManager() {\n    return defaultManager;\n}\nfunction setAnnotationManager(annotationManager) {\n    defaultManager = annotationManager;\n}\nfunction getAnnotations(toolName, annotationGroupSelector) {\n    const manager = getAnnotationManager();\n    const groupKey = manager.getGroupKey(annotationGroupSelector);\n    return manager.getAnnotations(groupKey, toolName);\n}\nfunction getAnnotation(annotationUID) {\n    const manager = getAnnotationManager();\n    return manager.getAnnotation(annotationUID);\n}\nfunction getAllAnnotations() {\n    const manager = getAnnotationManager();\n    return manager.getAllAnnotations();\n}\nfunction clearParentAnnotation(annotation) {\n    const { annotationUID: childUID, parentAnnotationUID } = annotation;\n    if (!parentAnnotationUID) {\n        return;\n    }\n    const parentAnnotation = getAnnotation(parentAnnotationUID);\n    const childUIDIndex = parentAnnotation.childAnnotationUIDs.indexOf(childUID);\n    parentAnnotation.childAnnotationUIDs.splice(childUIDIndex, 1);\n    annotation.parentAnnotationUID = undefined;\n}\nfunction addChildAnnotation(parentAnnotation, childAnnotation) {\n    const { annotationUID: parentUID } = parentAnnotation;\n    const { annotationUID: childUID } = childAnnotation;\n    clearParentAnnotation(childAnnotation);\n    if (!parentAnnotation.childAnnotationUIDs) {\n        parentAnnotation.childAnnotationUIDs = [];\n    }\n    if (parentAnnotation.childAnnotationUIDs.includes(childUID)) {\n        return;\n    }\n    parentAnnotation.childAnnotationUIDs.push(childUID);\n    childAnnotation.parentAnnotationUID = parentUID;\n}\nfunction getParentAnnotation(annotation) {\n    return annotation.parentAnnotationUID\n        ? getAnnotation(annotation.parentAnnotationUID)\n        : undefined;\n}\nfunction getChildAnnotations(annotation) {\n    return (annotation.childAnnotationUIDs?.map((childAnnotationUID) => getAnnotation(childAnnotationUID)) ?? []);\n}\nfunction addAnnotation(annotation, annotationGroupSelector) {\n    if (!annotation.annotationUID) {\n        annotation.annotationUID = csUtils.uuidv4();\n    }\n    const manager = getAnnotationManager();\n    if (annotationGroupSelector instanceof HTMLDivElement) {\n        const groupKey = manager.getGroupKey(annotationGroupSelector);\n        manager.addAnnotation(annotation, groupKey);\n        triggerAnnotationAddedForElement(annotation, annotationGroupSelector);\n    }\n    else {\n        manager.addAnnotation(annotation, undefined);\n        triggerAnnotationAddedForFOR(annotation);\n    }\n    return annotation.annotationUID;\n}\nfunction getNumberOfAnnotations(toolName, annotationGroupSelector) {\n    const manager = getAnnotationManager();\n    const groupKey = manager.getGroupKey(annotationGroupSelector);\n    return manager.getNumberOfAnnotations(groupKey, toolName);\n}\nfunction removeAnnotation(annotationUID) {\n    if (!annotationUID) {\n        return;\n    }\n    const manager = getAnnotationManager();\n    const annotation = manager.getAnnotation(annotationUID);\n    if (!annotation) {\n        return;\n    }\n    annotation.childAnnotationUIDs?.forEach((childAnnotationUID) => removeAnnotation(childAnnotationUID));\n    manager.removeAnnotation(annotationUID);\n    triggerAnnotationRemoved({ annotation, annotationManagerUID: manager.uid });\n}\nfunction removeAllAnnotations() {\n    const manager = getAnnotationManager();\n    const removedAnnotations = manager.removeAllAnnotations();\n    for (const annotation of removedAnnotations) {\n        triggerAnnotationRemoved({\n            annotation,\n            annotationManagerUID: manager.uid,\n        });\n    }\n}\nfunction removeAnnotations(toolName, annotationGroupSelector) {\n    const manager = getAnnotationManager();\n    const groupKey = manager.getGroupKey(annotationGroupSelector);\n    const removedAnnotations = manager.removeAnnotations(groupKey, toolName);\n    for (const annotation of removedAnnotations) {\n        triggerAnnotationRemoved({\n            annotation,\n            annotationManagerUID: manager.uid,\n        });\n    }\n}\nfunction invalidateAnnotation(annotation) {\n    let currAnnotation = annotation;\n    while (currAnnotation) {\n        currAnnotation.invalidated = true;\n        currAnnotation = currAnnotation.parentAnnotationUID\n            ? getAnnotation(currAnnotation.parentAnnotationUID)\n            : undefined;\n    }\n}\nexport { getAllAnnotations, getAnnotations, getParentAnnotation, getChildAnnotations, clearParentAnnotation, addChildAnnotation, getNumberOfAnnotations, addAnnotation, removeAnnotation, removeAnnotations, removeAllAnnotations, setAnnotationManager, getAnnotationManager, invalidateAnnotation, getAnnotation, };\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport { isAnnotationSelected, deselectAnnotation, } from './annotationSelection';\nimport { getAnnotation } from './annotationState';\nconst globalHiddenAnnotationUIDsSet = new Set();\nfunction setAnnotationVisibility(annotationUID, visible = true) {\n    const detail = makeEventDetail();\n    if (annotationUID) {\n        if (visible) {\n            show(annotationUID, globalHiddenAnnotationUIDsSet, detail);\n        }\n        else {\n            hide(annotationUID, globalHiddenAnnotationUIDsSet, detail);\n        }\n    }\n    publish(detail);\n}\nfunction showAllAnnotations() {\n    const detail = makeEventDetail();\n    globalHiddenAnnotationUIDsSet.forEach((annotationUID) => {\n        show(annotationUID, globalHiddenAnnotationUIDsSet, detail);\n    });\n    publish(detail);\n}\nfunction isAnnotationVisible(annotationUID) {\n    const annotation = getAnnotation(annotationUID);\n    if (annotation) {\n        return !globalHiddenAnnotationUIDsSet.has(annotationUID);\n    }\n}\nfunction makeEventDetail() {\n    return Object.freeze({\n        lastVisible: [],\n        lastHidden: [],\n        hidden: [],\n    });\n}\nfunction show(annotationUID, annotationUIDsSet, detail) {\n    if (annotationUIDsSet.delete(annotationUID)) {\n        detail.lastVisible.push(annotationUID);\n        const annotation = getAnnotation(annotationUID);\n        annotation.isVisible = true;\n    }\n}\nfunction hide(annotationUID, annotationUIDsSet, detail) {\n    if (!annotationUIDsSet.has(annotationUID)) {\n        annotationUIDsSet.add(annotationUID);\n        if (isAnnotationSelected(annotationUID)) {\n            deselectAnnotation(annotationUID);\n        }\n        detail.lastHidden.push(annotationUID);\n        const annotation = getAnnotation(annotationUID);\n        annotation.isVisible = false;\n    }\n}\nfunction publish(detail) {\n    if (detail.lastHidden.length > 0 || detail.lastVisible.length > 0) {\n        globalHiddenAnnotationUIDsSet.forEach((item) => void detail.hidden.push(item));\n        triggerEvent(eventTarget, Events.ANNOTATION_VISIBILITY_CHANGE, detail);\n    }\n}\nfunction checkAndSetAnnotationVisibility(annotationUID) {\n    const isVisible = !globalHiddenAnnotationUIDsSet.has(annotationUID);\n    setAnnotationVisibility(annotationUID, isVisible);\n    return isVisible;\n}\nexport { setAnnotationVisibility, showAllAnnotations, isAnnotationVisible, checkAndSetAnnotationVisibility, };\n","class ToolStyle {\n    constructor() {\n        const defaultConfig = {\n            color: 'rgb(255, 255, 0)',\n            colorHighlighted: 'rgb(0, 255, 0)',\n            colorSelected: 'rgb(0, 220, 0)',\n            colorLocked: 'rgb(209, 193, 90)',\n            lineWidth: '1',\n            lineDash: '',\n            shadow: true,\n            textBoxVisibility: true,\n            textBoxFontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif',\n            textBoxFontSize: '14px',\n            textBoxColor: 'rgb(255, 255, 0)',\n            textBoxColorHighlighted: 'rgb(0, 255, 0)',\n            textBoxColorSelected: 'rgb(0, 255, 0)',\n            textBoxColorLocked: 'rgb(209, 193, 90)',\n            textBoxBackground: '',\n            textBoxLinkLineWidth: '1',\n            textBoxLinkLineDash: '2,3',\n            textBoxShadow: true,\n            markerSize: '10',\n            angleArcLineDash: '',\n        };\n        this._initializeConfig(defaultConfig);\n    }\n    getAnnotationToolStyles(annotationUID) {\n        return this.config.annotations && this.config.annotations[annotationUID];\n    }\n    getViewportToolStyles(viewportId) {\n        return this.config.viewports && this.config.viewports[viewportId];\n    }\n    getToolGroupToolStyles(toolGroupId) {\n        return this.config.toolGroups && this.config.toolGroups[toolGroupId];\n    }\n    getDefaultToolStyles() {\n        return this.config.default;\n    }\n    setAnnotationStyles(annotationUID, styles) {\n        let annotationSpecificStyles = this.config.annotations;\n        if (!annotationSpecificStyles) {\n            this.config = {\n                ...this.config,\n                annotations: {},\n            };\n            annotationSpecificStyles = this.config.annotations;\n        }\n        annotationSpecificStyles[annotationUID] = styles;\n    }\n    setViewportToolStyles(viewportId, styles) {\n        let viewportSpecificStyles = this.config.viewports;\n        if (!viewportSpecificStyles) {\n            this.config = {\n                ...this.config,\n                viewports: {},\n            };\n            viewportSpecificStyles = this.config.viewports;\n        }\n        viewportSpecificStyles[viewportId] = styles;\n    }\n    setToolGroupToolStyles(toolGroupId, styles) {\n        let toolGroupSpecificStyles = this.config.toolGroups;\n        if (!toolGroupSpecificStyles) {\n            this.config = {\n                ...this.config,\n                toolGroups: {},\n            };\n            toolGroupSpecificStyles = this.config.toolGroups;\n        }\n        toolGroupSpecificStyles[toolGroupId] = styles;\n    }\n    setDefaultToolStyles(styles) {\n        this.config.default = styles;\n    }\n    getStyleProperty(toolStyle, specifications) {\n        const { annotationUID, viewportId, toolGroupId, toolName } = specifications;\n        return this._getToolStyle(toolStyle, annotationUID, viewportId, toolGroupId, toolName);\n    }\n    _getToolStyle(property, annotationUID, viewportId, toolGroupId, toolName) {\n        if (annotationUID) {\n            const annotationToolStyles = this.getAnnotationToolStyles(annotationUID);\n            if (annotationToolStyles) {\n                if (annotationToolStyles[property] !== undefined) {\n                    return annotationToolStyles[property];\n                }\n            }\n        }\n        if (viewportId) {\n            const viewportToolStyles = this.getViewportToolStyles(viewportId);\n            if (viewportToolStyles) {\n                if (viewportToolStyles[toolName] &&\n                    viewportToolStyles[toolName][property] !== undefined) {\n                    return viewportToolStyles[toolName][property];\n                }\n                if (viewportToolStyles.global &&\n                    viewportToolStyles.global[property] !== undefined) {\n                    return viewportToolStyles.global[property];\n                }\n            }\n        }\n        if (toolGroupId) {\n            const toolGroupToolStyles = this.getToolGroupToolStyles(toolGroupId);\n            if (toolGroupToolStyles) {\n                if (toolGroupToolStyles[toolName] &&\n                    toolGroupToolStyles[toolName][property] !== undefined) {\n                    return toolGroupToolStyles[toolName][property];\n                }\n                if (toolGroupToolStyles.global &&\n                    toolGroupToolStyles.global[property] !== undefined) {\n                    return toolGroupToolStyles.global[property];\n                }\n            }\n        }\n        const globalStyles = this.getDefaultToolStyles();\n        if (globalStyles[toolName] &&\n            globalStyles[toolName][property] !== undefined) {\n            return globalStyles[toolName][property];\n        }\n        if (globalStyles.global && globalStyles.global[property] !== undefined) {\n            return globalStyles.global[property];\n        }\n    }\n    _initializeConfig(config) {\n        const toolStyles = {};\n        for (const name in config) {\n            toolStyles[name] = config[name];\n        }\n        this.config = {\n            default: {\n                global: toolStyles,\n            },\n        };\n    }\n}\nconst toolStyle = new ToolStyle();\nexport default toolStyle;\n","import toolStyle from './ToolStyle';\nfunction getHierarchalPropertyStyles(property, state, mode) {\n    const list = [`${property}`];\n    if (state) {\n        list.push(`${list[0]}${state}`);\n    }\n    if (mode) {\n        list.push(`${list[list.length - 1]}${mode}`);\n    }\n    return list;\n}\nfunction getStyleProperty(property, styleSpecifier, state, mode) {\n    const alternatives = getHierarchalPropertyStyles(property, state, mode);\n    for (let i = alternatives.length - 1; i >= 0; --i) {\n        const style = toolStyle.getStyleProperty(alternatives[i], styleSpecifier);\n        if (style !== undefined) {\n            return style;\n        }\n    }\n}\nexport { getStyleProperty };\n","import { isAnnotationLocked } from '../annotationLocking';\nimport { isAnnotationSelected } from '../annotationSelection';\nimport { AnnotationStyleStates } from '../../../enums';\nfunction getState(annotation) {\n    if (annotation) {\n        if (annotation.data && annotation.highlighted) {\n            return AnnotationStyleStates.Highlighted;\n        }\n        if (isAnnotationSelected(annotation.annotationUID)) {\n            return AnnotationStyleStates.Selected;\n        }\n        if (isAnnotationLocked(annotation.annotationUID)) {\n            return AnnotationStyleStates.Locked;\n        }\n        if (annotation.data && annotation.autoGenerated) {\n            return AnnotationStyleStates.AutoGenerated;\n        }\n    }\n    return AnnotationStyleStates.Default;\n}\nexport default getState;\n","import { getStyleProperty } from './helpers';\nfunction getFont(styleSpecifier, state, mode) {\n    const fontSize = getStyleProperty('textBoxFontSize', styleSpecifier, state, mode);\n    const fontFamily = getStyleProperty('textBoxFontFamily', styleSpecifier, state, mode);\n    return `${fontSize}px ${fontFamily}`;\n}\nexport default getFont;\n","import { getEnabledElement, triggerEvent, eventTarget, getEnabledElementByIds, } from '@cornerstonejs/core';\nimport { Events, ChangeTypes } from '../../../enums';\nimport { getToolGroupsWithToolName } from '../../../store/ToolGroupManager';\nfunction triggerAnnotationAddedForElement(annotation, element) {\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewportId } = enabledElement;\n    const eventType = Events.ANNOTATION_ADDED;\n    const eventDetail = {\n        annotation,\n        viewportId,\n        renderingEngineId: renderingEngine.id,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n}\nfunction triggerAnnotationAddedForFOR(annotation) {\n    const { toolName } = annotation.metadata;\n    const toolGroups = getToolGroupsWithToolName(toolName);\n    if (!toolGroups.length) {\n        return;\n    }\n    const viewportsToRender = [];\n    toolGroups.forEach((toolGroup) => {\n        toolGroup.viewportsInfo.forEach((viewportInfo) => {\n            const { renderingEngineId, viewportId } = viewportInfo;\n            const { FrameOfReferenceUID } = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (annotation.metadata.FrameOfReferenceUID === FrameOfReferenceUID) {\n                viewportsToRender.push(viewportInfo);\n            }\n        });\n    });\n    const eventType = Events.ANNOTATION_ADDED;\n    const eventDetail = { annotation };\n    if (!viewportsToRender.length) {\n        triggerEvent(eventTarget, eventType, eventDetail);\n        return;\n    }\n    viewportsToRender.forEach(({ renderingEngineId, viewportId }) => {\n        eventDetail.viewportId = viewportId;\n        eventDetail.renderingEngineId = renderingEngineId;\n        triggerEvent(eventTarget, eventType, eventDetail);\n    });\n}\nfunction triggerAnnotationRemoved(eventDetail) {\n    const eventType = Events.ANNOTATION_REMOVED;\n    triggerEvent(eventTarget, eventType, eventDetail);\n}\nfunction triggerAnnotationModified(annotation, element, changeType = ChangeTypes.HandlesUpdated) {\n    const enabledElement = element && getEnabledElement(element);\n    const { viewportId, renderingEngineId } = enabledElement || {};\n    const eventType = Events.ANNOTATION_MODIFIED;\n    const eventDetail = {\n        annotation,\n        viewportId,\n        renderingEngineId,\n        changeType,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n}\nfunction triggerAnnotationCompleted(annotation) {\n    const eventDetail = {\n        annotation,\n    };\n    _triggerAnnotationCompleted(eventDetail);\n}\nfunction triggerContourAnnotationCompleted(annotation, contourHoleProcessingEnabled = false) {\n    const eventDetail = {\n        annotation,\n        contourHoleProcessingEnabled,\n    };\n    _triggerAnnotationCompleted(eventDetail);\n}\nfunction _triggerAnnotationCompleted(eventDetail) {\n    const eventType = Events.ANNOTATION_COMPLETED;\n    triggerEvent(eventTarget, eventType, eventDetail);\n}\nexport { triggerAnnotationAddedForElement, triggerAnnotationAddedForFOR, triggerAnnotationRemoved, triggerAnnotationModified, triggerAnnotationCompleted, triggerContourAnnotationCompleted, };\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport Events from '../../enums/Events';\nimport { getAnnotation } from './annotationState';\nexport default class AnnotationGroup {\n    constructor() {\n        this.annotationUIDs = new Set();\n        this._isVisible = true;\n        this.visibleFilter = this.unboundVisibleFilter.bind(this);\n    }\n    unboundVisibleFilter(uid) {\n        return !this._isVisible || !this.annotationUIDs.has(uid);\n    }\n    has(uid) {\n        return this.annotationUIDs.has(uid);\n    }\n    setVisible(isVisible = true, baseEvent, filter) {\n        if (this._isVisible === isVisible) {\n            return;\n        }\n        this._isVisible = isVisible;\n        this.annotationUIDs.forEach((uid) => {\n            const annotation = getAnnotation(uid);\n            if (!annotation) {\n                this.annotationUIDs.delete(uid);\n                return;\n            }\n            if (annotation.isVisible === isVisible) {\n                return;\n            }\n            if (!isVisible && filter?.(uid) === false) {\n                return;\n            }\n            annotation.isVisible = isVisible;\n            const eventDetail = {\n                ...baseEvent,\n                annotation,\n            };\n            triggerEvent(eventTarget, Events.ANNOTATION_MODIFIED, eventDetail);\n        });\n    }\n    get isVisible() {\n        return this._isVisible;\n    }\n    findNearby(uid, direction) {\n        const uids = [...this.annotationUIDs];\n        if (uids.length === 0) {\n            return null;\n        }\n        if (!uid) {\n            return uids[direction === 1 ? 0 : uids.length - 1];\n        }\n        const index = uids.indexOf(uid);\n        if (index === -1 ||\n            index + direction < 0 ||\n            index + direction >= uids.length) {\n            return null;\n        }\n        return uids[index + direction];\n    }\n    add(...annotationUIDs) {\n        annotationUIDs.forEach((annotationUID) => this.annotationUIDs.add(annotationUID));\n    }\n    remove(...annotationUIDs) {\n        annotationUIDs.forEach((annotationUID) => this.annotationUIDs.delete(annotationUID));\n    }\n    clear() {\n        this.annotationUIDs.clear();\n    }\n}\n","import * as config from './config';\nimport * as locking from './annotationLocking';\nimport * as selection from './annotationSelection';\nimport * as annotationState from './annotationState';\nimport * as annotationStateHelpers from './helpers/state';\nimport * as visibility from './annotationVisibility';\nimport FrameOfReferenceSpecificAnnotationManager from './FrameOfReferenceSpecificAnnotationManager';\nimport AnnotationGroup from './AnnotationGroup';\nimport { resetAnnotationManager } from './resetAnnotationManager';\nconst state = {\n    ...annotationState,\n    ...annotationStateHelpers,\n    resetAnnotationManager,\n};\nexport { config, locking, selection, state, visibility, FrameOfReferenceSpecificAnnotationManager, AnnotationGroup, };\n","import { triggerEvent, eventTarget, Enums, getRenderingEngines, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { SegmentationRepresentations, Events as csToolsEvents, } from '../../enums';\nimport Representations from '../../enums/SegmentationRepresentations';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nimport surfaceDisplay from '../../tools/displayTools/Surface/surfaceDisplay';\nimport contourDisplay from '../../tools/displayTools/Contour/contourDisplay';\nimport labelmapDisplay from '../../tools/displayTools/Labelmap/labelmapDisplay';\nimport { addTool } from '../../store/addTool';\nimport { state } from '../../store/state';\nimport PlanarFreehandContourSegmentationTool from '../../tools/annotation/PlanarFreehandContourSegmentationTool';\nimport { getToolGroupForViewport } from '../../store/ToolGroupManager';\nconst renderers = {\n    [Representations.Labelmap]: labelmapDisplay,\n    [Representations.Contour]: contourDisplay,\n    [Representations.Surface]: surfaceDisplay,\n};\nconst planarContourToolName = PlanarFreehandContourSegmentationTool.toolName;\nclass SegmentationRenderingEngine {\n    constructor() {\n        this._needsRender = new Set();\n        this._pendingRenderQueue = [];\n        this._animationFrameSet = false;\n        this._animationFrameHandle = null;\n        this._getAllViewports = () => {\n            const renderingEngine = getRenderingEngines();\n            return renderingEngine.flatMap((renderingEngine) => renderingEngine.getViewports());\n        };\n        this._renderFlaggedSegmentations = () => {\n            this._throwIfDestroyed();\n            const viewportIds = Array.from(this._needsRender);\n            viewportIds.forEach((viewportId) => {\n                this._triggerRender(viewportId);\n            });\n            this._needsRender.clear();\n            this._animationFrameSet = false;\n            this._animationFrameHandle = null;\n            if (this._pendingRenderQueue.length > 0) {\n                const nextViewportIds = this._pendingRenderQueue.shift();\n                if (nextViewportIds && nextViewportIds.length > 0) {\n                    this._setViewportsToBeRenderedNextFrame(nextViewportIds);\n                }\n            }\n        };\n    }\n    renderSegmentationsForViewport(viewportId) {\n        const viewportIds = viewportId\n            ? [viewportId]\n            : this._getViewportIdsForSegmentation();\n        this._setViewportsToBeRenderedNextFrame(viewportIds);\n    }\n    renderSegmentation(segmentationId) {\n        const viewportIds = this._getViewportIdsForSegmentation(segmentationId);\n        this._setViewportsToBeRenderedNextFrame(viewportIds);\n    }\n    _getViewportIdsForSegmentation(segmentationId) {\n        const viewports = this._getAllViewports();\n        const viewportIds = [];\n        for (const viewport of viewports) {\n            const viewportId = viewport.id;\n            if (segmentationId) {\n                const segmentationRepresentations = getSegmentationRepresentations(viewportId, { segmentationId });\n                if (segmentationRepresentations?.length > 0) {\n                    viewportIds.push(viewportId);\n                }\n            }\n            else {\n                const segmentationRepresentations = getSegmentationRepresentations(viewportId);\n                if (segmentationRepresentations?.length > 0) {\n                    viewportIds.push(viewportId);\n                }\n            }\n        }\n        return viewportIds;\n    }\n    _throwIfDestroyed() {\n        if (this.hasBeenDestroyed) {\n            throw new Error('this.destroy() has been manually called to free up memory, can not longer use this instance. Instead make a new one.');\n        }\n    }\n    _setViewportsToBeRenderedNextFrame(viewportIds) {\n        if (this._animationFrameSet) {\n            this._pendingRenderQueue.push(viewportIds);\n            return;\n        }\n        viewportIds.forEach((viewportId) => {\n            this._needsRender.add(viewportId);\n        });\n        this._render();\n    }\n    _render() {\n        if (this._needsRender.size > 0 && this._animationFrameSet === false) {\n            this._animationFrameHandle = window.requestAnimationFrame(this._renderFlaggedSegmentations);\n            this._animationFrameSet = true;\n        }\n    }\n    _triggerRender(viewportId) {\n        const segmentationRepresentations = getSegmentationRepresentations(viewportId);\n        if (!segmentationRepresentations?.length) {\n            return;\n        }\n        const { viewport } = getEnabledElementByViewportId(viewportId) || {};\n        if (!viewport) {\n            return;\n        }\n        const viewportRenderList = [];\n        const segmentationRenderList = segmentationRepresentations.map((representation) => {\n            if (representation.type === SegmentationRepresentations.Contour) {\n                this._addPlanarFreeHandToolIfAbsent(viewport);\n            }\n            const display = renderers[representation.type];\n            try {\n                const viewportId = display.render(viewport, representation);\n                viewportRenderList.push(viewportId);\n            }\n            catch (error) {\n                console.error(error);\n            }\n            return Promise.resolve({\n                segmentationId: representation.segmentationId,\n                type: representation.type,\n            });\n        });\n        Promise.allSettled(segmentationRenderList).then((results) => {\n            const segmentationDetails = results\n                .filter((r) => r.status === 'fulfilled')\n                .map((r) => r.value);\n            function onSegmentationRender(evt) {\n                const { element, viewportId } = evt.detail;\n                element.removeEventListener(Enums.Events.IMAGE_RENDERED, onSegmentationRender);\n                segmentationDetails.forEach((detail) => {\n                    const eventDetail = {\n                        viewportId,\n                        segmentationId: detail.segmentationId,\n                        type: detail.type,\n                    };\n                    triggerEvent(eventTarget, csToolsEvents.SEGMENTATION_RENDERED, {\n                        ...eventDetail,\n                    });\n                });\n            }\n            const element = viewport.element;\n            element.addEventListener(Enums.Events.IMAGE_RENDERED, onSegmentationRender);\n            viewport.render();\n        });\n    }\n    _addPlanarFreeHandToolIfAbsent(viewport) {\n        if (!(planarContourToolName in state.tools)) {\n            addTool(PlanarFreehandContourSegmentationTool);\n        }\n        const toolGroup = getToolGroupForViewport(viewport.id);\n        if (!toolGroup.hasTool(planarContourToolName)) {\n            toolGroup.addTool(planarContourToolName);\n            toolGroup.setToolPassive(planarContourToolName);\n        }\n    }\n}\nfunction triggerSegmentationRender(viewportId) {\n    segmentationRenderingEngine.renderSegmentationsForViewport(viewportId);\n}\nfunction triggerSegmentationRenderBySegmentationId(segmentationId) {\n    segmentationRenderingEngine.renderSegmentation(segmentationId);\n}\nconst segmentationRenderingEngine = new SegmentationRenderingEngine();\nexport { triggerSegmentationRender, triggerSegmentationRenderBySegmentationId, segmentationRenderingEngine, };\n","import { BaseVolumeViewport, cache, utilities as csUtils, getEnabledElementByViewportId, volumeLoader, } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../enums';\nimport vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nimport { triggerSegmentationModified, triggerSegmentationRemoved, triggerSegmentationRepresentationModified, triggerSegmentationRepresentationRemoved, } from './triggerSegmentationEvents';\nimport { segmentationStyle } from './SegmentationStyle';\nimport { triggerSegmentationAdded } from './events/triggerSegmentationAdded';\nconst initialDefaultState = {\n    colorLUT: [],\n    segmentations: [],\n    viewportSegRepresentations: {},\n};\nexport default class SegmentationStateManager {\n    constructor(uid) {\n        this._stackLabelmapImageIdReferenceMap = new Map();\n        this._labelmapImageIdReferenceMap = new Map();\n        uid ||= csUtils.uuidv4();\n        this.state = Object.freeze(csUtils.deepClone(initialDefaultState));\n        this.uid = uid;\n    }\n    getState() {\n        return this.state;\n    }\n    updateState(updater) {\n        const newState = csUtils.deepClone(this.state);\n        updater(newState);\n        this.state = Object.freeze(newState);\n    }\n    getColorLUT(lutIndex) {\n        return this.state.colorLUT[lutIndex];\n    }\n    getNextColorLUTIndex() {\n        return this.state.colorLUT.length;\n    }\n    resetState() {\n        this._stackLabelmapImageIdReferenceMap.clear();\n        this._labelmapImageIdReferenceMap.clear();\n        this.state = Object.freeze(csUtils.deepClone(initialDefaultState));\n    }\n    getSegmentation(segmentationId) {\n        return this.state.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n    }\n    updateSegmentation(segmentationId, payload) {\n        this.updateState((draftState) => {\n            const segmentation = draftState.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n            if (!segmentation) {\n                console.warn(`Segmentation with id ${segmentationId} not found. Update aborted.`);\n                return;\n            }\n            Object.assign(segmentation, payload);\n        });\n        triggerSegmentationModified(segmentationId);\n    }\n    addSegmentation(segmentation) {\n        if (this.getSegmentation(segmentation.segmentationId)) {\n            throw new Error(`Segmentation with id ${segmentation.segmentationId} already exists`);\n        }\n        this.updateState((state) => {\n            const newSegmentation = csUtils.deepClone(segmentation);\n            if (newSegmentation.representationData.Labelmap &&\n                'volumeId' in newSegmentation.representationData.Labelmap &&\n                !('imageIds' in newSegmentation.representationData.Labelmap)) {\n                const imageIds = this.getLabelmapImageIds(newSegmentation.representationData);\n                newSegmentation.representationData\n                    .Labelmap.imageIds = imageIds;\n            }\n            state.segmentations.push(newSegmentation);\n        });\n        triggerSegmentationAdded(segmentation.segmentationId);\n    }\n    removeSegmentation(segmentationId) {\n        this.updateState((state) => {\n            const filteredSegmentations = state.segmentations.filter((segmentation) => segmentation.segmentationId !== segmentationId);\n            state.segmentations.splice(0, state.segmentations.length, ...filteredSegmentations);\n        });\n        triggerSegmentationRemoved(segmentationId);\n    }\n    addSegmentationRepresentation(viewportId, segmentationId, type, renderingConfig) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const existingRepresentations = this.getSegmentationRepresentations(viewportId, {\n            type: type,\n            segmentationId,\n        });\n        if (existingRepresentations.length > 0) {\n            console.debug('A segmentation representation of type', type, 'already exists in viewport', viewportId, 'for segmentation', segmentationId);\n            return;\n        }\n        this.updateState((state) => {\n            if (!state.viewportSegRepresentations[viewportId]) {\n                state.viewportSegRepresentations[viewportId] = [];\n                segmentationStyle.setRenderInactiveSegmentations(viewportId, true);\n            }\n            if (type !== SegmentationRepresentations.Labelmap) {\n                this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, type, renderingConfig);\n            }\n            else {\n                this.addLabelmapRepresentation(state, viewportId, segmentationId, renderingConfig);\n            }\n        });\n        triggerSegmentationRepresentationModified(viewportId, segmentationId, type);\n    }\n    addDefaultSegmentationRepresentation(state, viewportId, segmentationId, type, renderingConfig) {\n        const segmentation = state.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const segmentReps = {};\n        Object.keys(segmentation.segments).forEach((segmentIndex) => {\n            segmentReps[Number(segmentIndex)] = {\n                visible: true,\n            };\n        });\n        state.viewportSegRepresentations[viewportId].push({\n            segmentationId,\n            type,\n            active: true,\n            visible: true,\n            colorLUTIndex: renderingConfig?.colorLUTIndex || 0,\n            segments: segmentReps,\n            config: {\n                ...getDefaultRenderingConfig(type),\n                ...renderingConfig,\n            },\n        });\n        this._setActiveSegmentation(state, viewportId, segmentationId);\n    }\n    addLabelmapRepresentation(state, viewportId, segmentationId, renderingConfig = getDefaultRenderingConfig(SegmentationRepresentations.Labelmap)) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, SegmentationRepresentations.Labelmap, renderingConfig);\n        }\n        this.processLabelmapRepresentationAddition(viewportId, segmentationId);\n        this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, SegmentationRepresentations.Labelmap, renderingConfig);\n    }\n    async processLabelmapRepresentationAddition(viewportId, segmentationId) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const volumeViewport = enabledElement.viewport instanceof BaseVolumeViewport;\n        const { representationData } = segmentation;\n        const isBaseVolumeSegmentation = 'volumeId' in representationData.Labelmap;\n        const viewport = enabledElement.viewport;\n        if (!volumeViewport && !isBaseVolumeSegmentation) {\n            !this.updateLabelmapSegmentationImageReferences(viewportId, segmentation.segmentationId);\n        }\n    }\n    _updateLabelmapSegmentationReferences(segmentationId, viewport, labelmapImageIds, updateCallback) {\n        const referenceImageId = viewport.getCurrentImageId();\n        let viewableLabelmapImageIdFound = false;\n        for (const labelmapImageId of labelmapImageIds) {\n            const viewableImageId = viewport.isReferenceViewable({ referencedImageId: labelmapImageId }, { asOverlay: true });\n            if (viewableImageId) {\n                viewableLabelmapImageIdFound = true;\n                this._stackLabelmapImageIdReferenceMap\n                    .get(segmentationId)\n                    .set(referenceImageId, labelmapImageId);\n                this._updateLabelmapImageIdReferenceMap({\n                    segmentationId,\n                    referenceImageId,\n                    labelmapImageId,\n                });\n            }\n        }\n        if (updateCallback) {\n            updateCallback(viewport, segmentationId, labelmapImageIds);\n        }\n        return viewableLabelmapImageIdFound\n            ? this._stackLabelmapImageIdReferenceMap\n                .get(segmentationId)\n                .get(referenceImageId)\n            : undefined;\n    }\n    updateLabelmapSegmentationImageReferences(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            this._stackLabelmapImageIdReferenceMap.set(segmentationId, new Map());\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return;\n        }\n        const labelmapImageIds = this.getLabelmapImageIds(representationData);\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        const stackViewport = enabledElement.viewport;\n        return this._updateLabelmapSegmentationReferences(segmentationId, stackViewport, labelmapImageIds, null);\n    }\n    _updateAllLabelmapSegmentationImageReferences(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            this._stackLabelmapImageIdReferenceMap.set(segmentationId, new Map());\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return;\n        }\n        const labelmapImageIds = this.getLabelmapImageIds(representationData);\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        const stackViewport = enabledElement.viewport;\n        this._updateLabelmapSegmentationReferences(segmentationId, stackViewport, labelmapImageIds, (stackViewport, segmentationId, labelmapImageIds) => {\n            const imageIds = stackViewport.getImageIds();\n            imageIds.forEach((referenceImageId, index) => {\n                for (const labelmapImageId of labelmapImageIds) {\n                    const viewableImageId = stackViewport.isReferenceViewable({ referencedImageId: labelmapImageId, sliceIndex: index }, { asOverlay: true, withNavigation: true });\n                    if (viewableImageId) {\n                        this._stackLabelmapImageIdReferenceMap\n                            .get(segmentationId)\n                            .set(referenceImageId, labelmapImageId);\n                        this._updateLabelmapImageIdReferenceMap({\n                            segmentationId,\n                            referenceImageId,\n                            labelmapImageId,\n                        });\n                    }\n                }\n            });\n        });\n    }\n    getLabelmapImageIds(representationData) {\n        const labelmapData = representationData.Labelmap;\n        let labelmapImageIds;\n        if (labelmapData.imageIds) {\n            labelmapImageIds = labelmapData\n                .imageIds;\n        }\n        else if (!labelmapImageIds &&\n            labelmapData.volumeId) {\n            const volumeId = labelmapData\n                .volumeId;\n            const volume = cache.getVolume(volumeId);\n            labelmapImageIds = volume.imageIds;\n        }\n        return labelmapImageIds;\n    }\n    getLabelmapImageIdsForImageId(imageId, segmentationId) {\n        const key = this._generateMapKey({\n            segmentationId,\n            referenceImageId: imageId,\n        });\n        return this._labelmapImageIdReferenceMap.get(key);\n    }\n    getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const stackViewport = enabledElement.viewport;\n        const referenceImageId = stackViewport.getCurrentImageId();\n        return this.getLabelmapImageIdsForImageId(referenceImageId, segmentationId);\n    }\n    getCurrentLabelmapImageIdForViewport(viewportId, segmentationId) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            return;\n        }\n        const stackViewport = enabledElement.viewport;\n        const currentImageId = stackViewport.getCurrentImageId();\n        const imageIdReferenceMap = this._stackLabelmapImageIdReferenceMap.get(segmentationId);\n        return imageIdReferenceMap.get(currentImageId);\n    }\n    getStackSegmentationImageIdsForViewport(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return [];\n        }\n        this._updateAllLabelmapSegmentationImageReferences(viewportId, segmentationId);\n        const { viewport } = getEnabledElementByViewportId(viewportId);\n        const imageIds = viewport.getImageIds();\n        const associatedReferenceImageAndLabelmapImageIds = this._stackLabelmapImageIdReferenceMap.get(segmentationId);\n        return imageIds.map((imageId) => {\n            return associatedReferenceImageAndLabelmapImageIds.get(imageId);\n        });\n    }\n    removeSegmentationRepresentationsInternal(viewportId, specifier) {\n        const removedRepresentations = [];\n        this.updateState((state) => {\n            if (!state.viewportSegRepresentations[viewportId]) {\n                return;\n            }\n            const currentRepresentations = state.viewportSegRepresentations[viewportId];\n            let activeRepresentationRemoved = false;\n            if (!specifier ||\n                Object.values(specifier).every((value) => value === undefined)) {\n                removedRepresentations.push(...currentRepresentations);\n                delete state.viewportSegRepresentations[viewportId];\n            }\n            else {\n                const { segmentationId, type } = specifier;\n                state.viewportSegRepresentations[viewportId] =\n                    currentRepresentations.filter((representation) => {\n                        const shouldRemove = (segmentationId &&\n                            type &&\n                            representation.segmentationId === segmentationId &&\n                            representation.type === type) ||\n                            (segmentationId &&\n                                !type &&\n                                representation.segmentationId === segmentationId) ||\n                            (!segmentationId && type && representation.type === type);\n                        if (shouldRemove) {\n                            removedRepresentations.push(representation);\n                            if (representation.active) {\n                                activeRepresentationRemoved = true;\n                            }\n                        }\n                        return !shouldRemove;\n                    });\n                if (state.viewportSegRepresentations[viewportId].length === 0) {\n                    delete state.viewportSegRepresentations[viewportId];\n                }\n                else if (activeRepresentationRemoved) {\n                    state.viewportSegRepresentations[viewportId][0].active = true;\n                }\n            }\n        });\n        return removedRepresentations;\n    }\n    removeSegmentationRepresentations(viewportId, specifier) {\n        const removedRepresentations = this.removeSegmentationRepresentationsInternal(viewportId, specifier);\n        removedRepresentations.forEach((representation) => {\n            triggerSegmentationRepresentationRemoved(viewportId, representation.segmentationId, representation.type);\n        });\n        const remainingRepresentations = this.getSegmentationRepresentations(viewportId);\n        if (remainingRepresentations.length > 0 &&\n            remainingRepresentations[0].active) {\n            triggerSegmentationRepresentationModified(viewportId, remainingRepresentations[0].segmentationId, remainingRepresentations[0].type);\n        }\n        return removedRepresentations;\n    }\n    removeSegmentationRepresentation(viewportId, specifier, suppressEvent) {\n        const removedRepresentations = this.removeSegmentationRepresentationsInternal(viewportId, specifier);\n        if (!suppressEvent) {\n            removedRepresentations.forEach(({ segmentationId, type }) => {\n                triggerSegmentationRepresentationRemoved(viewportId, segmentationId, type);\n            });\n        }\n        return removedRepresentations;\n    }\n    _updateLabelmapImageIdReferenceMap({ segmentationId, referenceImageId, labelmapImageId, }) {\n        const key = this._generateMapKey({ segmentationId, referenceImageId });\n        if (!this._labelmapImageIdReferenceMap.has(key)) {\n            this._labelmapImageIdReferenceMap.set(key, [labelmapImageId]);\n            return;\n        }\n        const currentValues = this._labelmapImageIdReferenceMap.get(key);\n        const newValues = Array.from(new Set([...currentValues, labelmapImageId]));\n        this._labelmapImageIdReferenceMap.set(key, newValues);\n    }\n    _setActiveSegmentation(state, viewportId, segmentationId) {\n        const viewport = state.viewportSegRepresentations[viewportId];\n        if (!viewport) {\n            return;\n        }\n        viewport.forEach((value) => {\n            value.active = value.segmentationId === segmentationId;\n        });\n    }\n    setActiveSegmentation(viewportId, segmentationId) {\n        this.updateState((state) => {\n            const viewport = state.viewportSegRepresentations[viewportId];\n            if (!viewport) {\n                return;\n            }\n            viewport.forEach((value) => {\n                value.active = value.segmentationId === segmentationId;\n            });\n        });\n        triggerSegmentationRepresentationModified(viewportId, segmentationId);\n    }\n    getActiveSegmentation(viewportId) {\n        if (!this.state.viewportSegRepresentations[viewportId]) {\n            return;\n        }\n        const activeSegRep = this.state.viewportSegRepresentations[viewportId].find((segRep) => segRep.active);\n        if (!activeSegRep) {\n            return;\n        }\n        return this.getSegmentation(activeSegRep.segmentationId);\n    }\n    getSegmentationRepresentations(viewportId, specifier = {}) {\n        const viewportRepresentations = this.state.viewportSegRepresentations[viewportId];\n        if (!viewportRepresentations) {\n            return [];\n        }\n        if (!specifier.type && !specifier.segmentationId) {\n            return viewportRepresentations;\n        }\n        return viewportRepresentations.filter((representation) => {\n            const typeMatch = specifier.type\n                ? representation.type === specifier.type\n                : true;\n            const idMatch = specifier.segmentationId\n                ? representation.segmentationId === specifier.segmentationId\n                : true;\n            return typeMatch && idMatch;\n        });\n    }\n    getSegmentationRepresentation(viewportId, specifier) {\n        return this.getSegmentationRepresentations(viewportId, specifier)[0];\n    }\n    getSegmentationRepresentationVisibility(viewportId, specifier) {\n        const viewportRepresentation = this.getSegmentationRepresentation(viewportId, specifier);\n        return viewportRepresentation?.visible;\n    }\n    setSegmentationRepresentationVisibility(viewportId, specifier, visible) {\n        this.updateState((state) => {\n            const viewportRepresentations = this.getSegmentationRepresentations(viewportId, specifier);\n            if (!viewportRepresentations) {\n                return;\n            }\n            viewportRepresentations.forEach((representation) => {\n                representation.visible = visible;\n                Object.entries(representation.segments).forEach(([segmentIndex, segment]) => {\n                    segment.visible = visible;\n                });\n            });\n        });\n        triggerSegmentationRepresentationModified(viewportId, specifier.segmentationId, specifier.type);\n    }\n    addColorLUT(colorLUT, lutIndex) {\n        this.updateState((state) => {\n            if (state.colorLUT[lutIndex]) {\n                console.warn('Color LUT table already exists, overwriting');\n            }\n            state.colorLUT[lutIndex] = csUtils.deepClone(colorLUT);\n        });\n    }\n    removeColorLUT(colorLUTIndex) {\n        this.updateState((state) => {\n            delete state.colorLUT[colorLUTIndex];\n        });\n    }\n    _getStackIdForImageIds(imageIds) {\n        return imageIds\n            .map((imageId) => imageId.slice(-Math.round(imageId.length * 0.15)))\n            .join('_');\n    }\n    getAllViewportSegmentationRepresentations() {\n        return Object.entries(this.state.viewportSegRepresentations).map(([viewportId, representations]) => ({\n            viewportId,\n            representations,\n        }));\n    }\n    getSegmentationRepresentationsBySegmentationId(segmentationId) {\n        const result = [];\n        Object.entries(this.state.viewportSegRepresentations).forEach(([viewportId, viewportReps]) => {\n            const filteredReps = viewportReps.filter((representation) => representation.segmentationId === segmentationId);\n            if (filteredReps.length > 0) {\n                result.push({ viewportId, representations: filteredReps });\n            }\n        });\n        return result;\n    }\n    _generateMapKey({ segmentationId, referenceImageId }) {\n        return `${segmentationId}-${referenceImageId}`;\n    }\n}\nasync function internalComputeVolumeLabelmapFromStack({ imageIds, options, }) {\n    const segmentationImageIds = imageIds;\n    const volumeId = options?.volumeId || csUtils.uuidv4();\n    await volumeLoader.createAndCacheVolumeFromImages(volumeId, segmentationImageIds);\n    return { volumeId };\n}\nasync function internalConvertStackToVolumeLabelmap({ segmentationId, options, }) {\n    const segmentation = defaultSegmentationStateManager.getSegmentation(segmentationId);\n    const data = segmentation.representationData\n        .Labelmap;\n    const { volumeId } = await internalComputeVolumeLabelmapFromStack({\n        imageIds: data.imageIds,\n        options,\n    });\n    segmentation.representationData.Labelmap.volumeId = volumeId;\n}\nfunction getDefaultRenderingConfig(type) {\n    const cfun = vtkColorTransferFunction.newInstance();\n    const ofun = vtkPiecewiseFunction.newInstance();\n    ofun.addPoint(0, 0);\n    if (type === SegmentationRepresentations.Labelmap) {\n        return {\n            cfun,\n            ofun,\n        };\n    }\n    else {\n        return {};\n    }\n}\nconst defaultSegmentationStateManager = new SegmentationStateManager('DEFAULT');\nexport { internalConvertStackToVolumeLabelmap, internalComputeVolumeLabelmapFromStack, defaultSegmentationStateManager, };\n","import { getActiveSegmentation as _getActiveSegmentation } from './getActiveSegmentation';\nimport { setActiveSegmentation as _setActiveSegmentation } from './setActiveSegmentation';\nfunction getActiveSegmentation(viewportId) {\n    return _getActiveSegmentation(viewportId);\n}\nfunction setActiveSegmentation(viewportId, segmentationId) {\n    _setActiveSegmentation(viewportId, segmentationId);\n}\nexport { getActiveSegmentation, setActiveSegmentation, };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function setActiveSegmentation(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationStateManager.setActiveSegmentation(viewportId, segmentationId);\n}\n","import { utilities } from '@cornerstonejs/core';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { getNextColorLUTIndex } from './getNextColorLUTIndex';\nimport CORNERSTONE_COLOR_LUT from '../../constants/COLOR_LUT';\nexport function addColorLUT(colorLUT, index) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const indexToUse = index ?? getNextColorLUTIndex();\n    let colorLUTToUse = [...colorLUT];\n    if (!utilities.isEqual(colorLUTToUse[0], [0, 0, 0, 0])) {\n        console.warn('addColorLUT: [0, 0, 0, 0] color is not provided for the background color (segmentIndex =0), automatically adding it');\n        colorLUTToUse = [[0, 0, 0, 0], ...colorLUTToUse];\n    }\n    colorLUTToUse = colorLUTToUse.map((color) => {\n        if (color.length === 3) {\n            return [color[0], color[1], color[2], 255];\n        }\n        return color;\n    });\n    if (colorLUTToUse.length < 255) {\n        const missingColorLUTs = CORNERSTONE_COLOR_LUT.slice(colorLUTToUse.length);\n        colorLUTToUse = [...colorLUTToUse, ...missingColorLUTs];\n    }\n    segmentationStateManager.addColorLUT(colorLUTToUse, indexToUse);\n    return indexToUse;\n}\n","import { SegmentationRepresentations } from '../../enums';\nimport { internalAddSegmentationRepresentation } from './internalAddSegmentationRepresentation';\nexport function addSegmentationRepresentations(viewportId, segmentationInputArray) {\n    segmentationInputArray.map((segmentationInput) => {\n        return internalAddSegmentationRepresentation(viewportId, segmentationInput);\n    });\n}\nfunction addContourRepresentationToViewport(viewportId, contourInputArray) {\n    return addSegmentationRepresentations(viewportId, contourInputArray.map((input) => ({\n        ...input,\n        type: SegmentationRepresentations.Contour,\n    })));\n}\nfunction addContourRepresentationToViewportMap(viewportInputMap) {\n    const results = {};\n    for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {\n        results[viewportId] = addContourRepresentationToViewport(viewportId, inputArray);\n    }\n    return results;\n}\nfunction addLabelmapRepresentationToViewport(viewportId, labelmapInputArray) {\n    return addSegmentationRepresentations(viewportId, labelmapInputArray.map((input) => ({\n        ...input,\n        type: SegmentationRepresentations.Labelmap,\n    })));\n}\nfunction addLabelmapRepresentationToViewportMap(viewportInputMap) {\n    const results = {};\n    for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {\n        results[viewportId] = addLabelmapRepresentationToViewport(viewportId, inputArray.map((input) => ({\n            ...input,\n            type: SegmentationRepresentations.Labelmap,\n        })));\n    }\n}\nfunction addSurfaceRepresentationToViewport(viewportId, surfaceInputArray) {\n    return addSegmentationRepresentations(viewportId, surfaceInputArray.map((input) => ({\n        ...input,\n        type: SegmentationRepresentations.Surface,\n    })));\n}\nfunction addSurfaceRepresentationToViewportMap(viewportInputMap) {\n    const results = {};\n    for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {\n        results[viewportId] = addSurfaceRepresentationToViewport(viewportId, inputArray);\n    }\n    return results;\n}\nexport { addContourRepresentationToViewport, addLabelmapRepresentationToViewport, addSurfaceRepresentationToViewport, addContourRepresentationToViewportMap, addLabelmapRepresentationToViewportMap, addSurfaceRepresentationToViewportMap, };\n","import { SegmentationRepresentations } from '../../../enums';\nimport { cache } from '@cornerstonejs/core';\nfunction normalizeSegmentationInput(segmentationInput) {\n    const { segmentationId, representation, config } = segmentationInput;\n    const { type, data: inputData } = representation;\n    const data = inputData ? { ...inputData } : {};\n    if (!data) {\n        throw new Error('Segmentation representation data may not be undefined');\n    }\n    if (type === SegmentationRepresentations.Contour) {\n        normalizeContourData(data);\n    }\n    const normalizedSegments = normalizeSegments(config?.segments, type, data);\n    delete config?.segments;\n    return {\n        segmentationId,\n        label: config?.label ?? null,\n        cachedStats: config?.cachedStats ?? {},\n        segments: normalizedSegments,\n        representationData: {\n            [type]: {\n                ...data,\n            },\n        },\n    };\n}\nfunction normalizeContourData(contourData) {\n    contourData.geometryIds = contourData.geometryIds ?? [];\n    contourData.annotationUIDsMap = contourData.annotationUIDsMap ?? new Map();\n}\nfunction normalizeSegments(segmentsConfig, type, data) {\n    const normalizedSegments = {};\n    if (segmentsConfig) {\n        Object.entries(segmentsConfig).forEach(([segmentIndex, segment]) => {\n            const { label, locked, cachedStats, active, ...rest } = segment;\n            const normalizedSegment = {\n                segmentIndex: Number(segmentIndex),\n                label: label ?? `Segment ${segmentIndex}`,\n                locked: locked ?? false,\n                cachedStats: cachedStats ?? {},\n                active: active ?? false,\n                ...rest,\n            };\n            normalizedSegments[segmentIndex] = normalizedSegment;\n        });\n    }\n    else if (type === SegmentationRepresentations.Contour) {\n        normalizeContourSegments(normalizedSegments, data);\n    }\n    else if (type === SegmentationRepresentations.Surface) {\n        normalizeSurfaceSegments(normalizedSegments, data);\n    }\n    else {\n        normalizedSegments[1] = createDefaultSegment();\n    }\n    return normalizedSegments;\n}\nfunction normalizeContourSegments(normalizedSegments, contourData) {\n    const { geometryIds } = contourData;\n    geometryIds?.forEach((geometryId) => {\n        const geometry = cache.getGeometry(geometryId);\n        if (geometry?.data) {\n            const { segmentIndex } = geometry.data;\n            normalizedSegments[segmentIndex] = { segmentIndex };\n        }\n    });\n}\nfunction normalizeSurfaceSegments(normalizedSegments, surfaceData) {\n    const { geometryIds } = surfaceData;\n    geometryIds?.forEach((geometryId) => {\n        const geometry = cache.getGeometry(geometryId);\n        if (geometry?.data) {\n            const { segmentIndex } = geometry.data;\n            normalizedSegments[segmentIndex] = { segmentIndex };\n        }\n    });\n}\nfunction createDefaultSegment() {\n    return {\n        segmentIndex: 1,\n        label: 'Segment 1',\n        locked: false,\n        cachedStats: {},\n        active: true,\n    };\n}\nexport default normalizeSegmentationInput;\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nimport normalizeSegmentationInput from './helpers/normalizeSegmentationInput';\nexport function addSegmentations(segmentationInputArray, suppressEvents) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationInputArray.forEach((segmentationInput) => {\n        const segmentation = normalizeSegmentationInput(segmentationInput);\n        segmentationStateManager.addSegmentation(segmentation);\n        if (!suppressEvents) {\n            triggerSegmentationModified(segmentation.segmentationId);\n        }\n    });\n}\nexport default addSegmentations;\n","import { addColorLUT as _addColorLUT } from '../addColorLUT';\nimport { getColorLUT as _getColorLUT } from '../getColorLUT';\nimport { getSegmentationRepresentations } from '../getSegmentationRepresentation';\nimport { triggerSegmentationRepresentationModified } from '../triggerSegmentationEvents';\nfunction addColorLUT(colorLUT, colorLUTIndex) {\n    if (!colorLUT) {\n        throw new Error('addColorLUT: colorLUT is required');\n    }\n    return _addColorLUT(colorLUT, colorLUTIndex);\n}\nfunction setColorLUT(viewportId, segmentationId, colorLUTsIndex) {\n    if (!_getColorLUT(colorLUTsIndex)) {\n        throw new Error(`setColorLUT: could not find colorLUT with index ${colorLUTsIndex}`);\n    }\n    const segmentationRepresentations = getSegmentationRepresentations(viewportId, { segmentationId });\n    if (!segmentationRepresentations) {\n        throw new Error(`viewport specific state for viewport ${viewportId} does not exist`);\n    }\n    segmentationRepresentations.forEach((segmentationRepresentation) => {\n        segmentationRepresentation.colorLUTIndex = colorLUTsIndex;\n    });\n    triggerSegmentationRepresentationModified(viewportId, segmentationId);\n}\nfunction getSegmentIndexColor(viewportId, segmentationId, segmentIndex) {\n    const representations = getSegmentationRepresentations(viewportId, {\n        segmentationId,\n    });\n    if (!representations || representations.length === 0) {\n        return null;\n    }\n    const representation = representations[0];\n    const { colorLUTIndex } = representation;\n    const colorLUT = _getColorLUT(colorLUTIndex);\n    let colorValue = colorLUT[segmentIndex];\n    if (!colorValue) {\n        if (typeof segmentIndex !== 'number') {\n            console.warn(`Can't create colour for LUT index ${segmentIndex}`);\n            return null;\n        }\n        colorValue = colorLUT[segmentIndex] = [0, 0, 0, 0];\n    }\n    return colorValue;\n}\nfunction setSegmentIndexColor(viewportId, segmentationId, segmentIndex, color) {\n    const colorReference = getSegmentIndexColor(viewportId, segmentationId, segmentIndex);\n    for (let i = 0; i < color.length; i++) {\n        colorReference[i] = color[i];\n    }\n    triggerSegmentationRepresentationModified(viewportId, segmentationId);\n}\nexport { getSegmentIndexColor, addColorLUT, setColorLUT, setSegmentIndexColor };\n","import { getSegmentation } from './getSegmentation';\nexport function getActiveSegmentIndex(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    if (segmentation) {\n        const activeSegmentIndex = Object.keys(segmentation.segments).find((segmentIndex) => segmentation.segments[segmentIndex].active);\n        return activeSegmentIndex ? Number(activeSegmentIndex) : undefined;\n    }\n    return undefined;\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getColorLUT(index) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getColorLUT(index);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getCurrentLabelmapImageIdForViewport(viewportId, segmentationId) {\n    const imageIds = getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId);\n    return imageIds[0];\n}\nexport function getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId);\n}\nexport function getLabelmapImageIdsForImageId(imageId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getLabelmapImageIdsForImageId(imageId, segmentationId);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getNextColorLUTIndex() {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getNextColorLUTIndex();\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getSegmentation(segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getSegmentation(segmentationId);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getSegmentationRepresentations(viewportId, specifier = {}) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getSegmentationRepresentations(viewportId, specifier);\n}\nexport function getSegmentationRepresentation(viewportId, specifier) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    if (!specifier.segmentationId || !specifier.type) {\n        throw new Error('getSegmentationRepresentation: No segmentationId or type provided, you need to provide at least one of them');\n    }\n    const representations = segmentationStateManager.getSegmentationRepresentations(viewportId, specifier);\n    return representations?.[0];\n}\nexport function getSegmentationRepresentationsBySegmentationId(segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getSegmentationRepresentationsBySegmentationId(segmentationId);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getSegmentations() {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const state = segmentationStateManager.getState();\n    return state.segmentations;\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getViewportIdsWithSegmentation(segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const state = segmentationStateManager.getState();\n    const viewportSegRepresentations = state.viewportSegRepresentations;\n    const viewportIdsWithSegmentation = Object.entries(viewportSegRepresentations)\n        .filter(([, viewportSegmentations]) => viewportSegmentations.some((segRep) => segRep.segmentationId === segmentationId))\n        .map(([viewportId]) => viewportId);\n    return viewportIdsWithSegmentation;\n}\n","import { getSegmentation } from './getSegmentation';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getViewportSegmentations(viewportId, type) {\n    const viewportRepresentations = getViewportSegmentationRepresentations(viewportId);\n    const segmentations = viewportRepresentations.map((representation) => {\n        if (type && representation.type === type) {\n            return getSegmentation(representation.segmentationId);\n        }\n        return getSegmentation(representation.segmentationId);\n    });\n    const filteredSegmentations = segmentations.filter((segmentation) => segmentation !== undefined);\n    return filteredSegmentations;\n}\nexport function getViewportSegmentationRepresentations(viewportId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const state = segmentationStateManager.getState();\n    const viewportRepresentations = state.viewportSegRepresentations[viewportId];\n    return viewportRepresentations;\n}\n","import { cache } from '@cornerstonejs/core';\nimport { getSegmentation } from '../getSegmentation';\nimport { updateStackSegmentationState } from '../helpers/updateStackSegmentationState';\nexport async function computeStackLabelmapFromVolume({ volumeId, }) {\n    const segmentationVolume = cache.getVolume(volumeId);\n    return { imageIds: segmentationVolume.imageIds };\n}\nexport function convertVolumeToStackLabelmap({ segmentationId, options, }) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        return;\n    }\n    const { volumeId } = segmentation.representationData\n        .Labelmap;\n    const segmentationVolume = cache.getVolume(volumeId);\n    return updateStackSegmentationState({\n        segmentationId,\n        viewportId: options.viewportId,\n        imageIds: segmentationVolume.imageIds,\n        options,\n    });\n}\n","import { internalComputeVolumeLabelmapFromStack } from '../SegmentationStateManager';\nexport async function computeVolumeLabelmapFromStack(args) {\n    return internalComputeVolumeLabelmapFromStack(args);\n}\n","import { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../../enums';\nfunction getActorEntry(viewportId, segmentationId, filterFn) {\n    const enabledElement = getEnabledElementByViewportId(viewportId);\n    if (!enabledElement) {\n        return;\n    }\n    const { renderingEngine, viewport } = enabledElement;\n    if (!renderingEngine || !viewport) {\n        return;\n    }\n    const actors = viewport.getActors();\n    const filteredActors = actors.filter(filterFn);\n    return filteredActors.length > 0 ? filteredActors[0] : undefined;\n}\nfunction getActorEntries(viewportId, filterFn) {\n    const enabledElement = getEnabledElementByViewportId(viewportId);\n    if (!enabledElement) {\n        return;\n    }\n    const { renderingEngine, viewport } = enabledElement;\n    if (!renderingEngine || !viewport) {\n        return;\n    }\n    const actors = viewport.getActors();\n    const filteredActors = actors.filter(filterFn);\n    return filteredActors.length > 0 ? filteredActors : undefined;\n}\nexport function getLabelmapActorUID(viewportId, segmentationId) {\n    const actorEntry = getLabelmapActorEntry(viewportId, segmentationId);\n    return actorEntry?.uid;\n}\nexport function getLabelmapActorEntries(viewportId, segmentationId) {\n    return getActorEntries(viewportId, (actor) => actor.representationUID?.startsWith(`${segmentationId}-${SegmentationRepresentations.Labelmap}`));\n}\nexport function getLabelmapActorEntry(viewportId, segmentationId) {\n    return getActorEntry(viewportId, segmentationId, (actor) => actor.representationUID?.startsWith(`${segmentationId}-${SegmentationRepresentations.Labelmap}`));\n}\nexport function getSurfaceActorEntry(viewportId, segmentationId, segmentIndex) {\n    return getActorEntry(viewportId, segmentationId, (actor) => actor.representationUID ===\n        getSurfaceRepresentationUID(segmentationId, segmentIndex));\n}\nexport function getSurfaceRepresentationUID(segmentationId, segmentIndex) {\n    return `${segmentationId}-${SegmentationRepresentations.Surface}-${segmentIndex}`;\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nexport function updateSegmentations(segmentationUpdateArray, suppressEvents) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationUpdateArray.forEach((segmentationUpdate) => {\n        segmentationStateManager.updateSegmentation(segmentationUpdate.segmentationId, segmentationUpdate.payload);\n        if (!suppressEvents) {\n            triggerSegmentationModified(segmentationUpdate.segmentationId);\n        }\n    });\n}\n","import { getSegmentationRepresentation, getSegmentationRepresentations, } from '../getSegmentationRepresentation';\nimport { setSegmentationRepresentationVisibility as _setSegmentationRepresentationVisibility } from '../setSegmentationRepresentationVisibility';\nimport { getSegmentationRepresentationVisibility as _getSegmentationRepresentationVisibility } from '../getSegmentationRepresentationVisibility';\nimport { triggerSegmentationRenderBySegmentationId } from '../SegmentationRenderingEngine';\nimport { triggerSegmentationRepresentationModified } from '../triggerSegmentationEvents';\nfunction setSegmentationRepresentationVisibility(viewportId, specifier, visibility) {\n    const representations = getSegmentationRepresentations(viewportId, specifier);\n    if (!representations) {\n        return;\n    }\n    representations.forEach((representation) => {\n        _setSegmentationRepresentationVisibility(viewportId, {\n            segmentationId: representation.segmentationId,\n            type: representation.type,\n        }, visibility);\n    });\n}\nfunction getSegmentationRepresentationVisibility(viewportId, specifier) {\n    return _getSegmentationRepresentationVisibility(viewportId, specifier);\n}\nfunction setSegmentIndexVisibility(viewportId, specifier, segmentIndex, visibility) {\n    const representations = getSegmentationRepresentations(viewportId, specifier);\n    if (!representations) {\n        return;\n    }\n    representations.forEach((representation) => {\n        if (!representation.segments || !representation.segments[segmentIndex]) {\n            return;\n        }\n        representation.segments[segmentIndex].visible = visibility;\n    });\n    triggerSegmentationRenderBySegmentationId(specifier.segmentationId);\n    triggerSegmentationRepresentationModified(viewportId, specifier.segmentationId);\n}\nfunction getSegmentIndexVisibility(viewportId, specifier, segmentIndex) {\n    const hiddenSegments = getHiddenSegmentIndices(viewportId, specifier);\n    return !hiddenSegments.has(segmentIndex);\n}\nfunction getHiddenSegmentIndices(viewportId, specifier) {\n    const representation = getSegmentationRepresentation(viewportId, specifier);\n    if (!representation) {\n        return new Set();\n    }\n    const segmentsHidden = Object.entries(representation.segments).reduce((acc, [segmentIndex, segment]) => {\n        if (!segment.visible) {\n            acc.add(Number(segmentIndex));\n        }\n        return acc;\n    }, new Set());\n    return segmentsHidden;\n}\nexport { setSegmentationRepresentationVisibility, getSegmentationRepresentationVisibility, setSegmentIndexVisibility, getSegmentIndexVisibility, getHiddenSegmentIndices, };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function setSegmentationRepresentationVisibility(viewportId, specifier, visible) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationStateManager.setSegmentationRepresentationVisibility(viewportId, specifier, visible);\n}\n","import { getSegmentations } from '../getSegmentations';\nimport { getViewportSegmentations } from '../getViewportSegmentations';\nimport { triggerSegmentationRender } from '../SegmentationRenderingEngine';\nimport { segmentationStyle } from '../SegmentationStyle';\nimport { triggerSegmentationRepresentationModified } from '../triggerSegmentationEvents';\nfunction getStyle(specifier) {\n    return segmentationStyle.getStyle(specifier);\n}\nfunction setStyle(specifier, style) {\n    segmentationStyle.setStyle(specifier, style);\n    if (!specifier.viewportId && !specifier.segmentationId) {\n        const segmentations = getSegmentations();\n        segmentations.forEach((segmentation) => {\n            triggerSegmentationRender(segmentation.segmentationId);\n        });\n    }\n    triggerSegmentationRepresentationModified(specifier.viewportId, specifier.segmentationId, specifier.type);\n}\nfunction setRenderInactiveSegmentations(viewportId, renderInactiveSegmentations) {\n    segmentationStyle.setRenderInactiveSegmentations(viewportId, renderInactiveSegmentations);\n    triggerSegmentationRender(viewportId);\n    const segmentations = getViewportSegmentations(viewportId);\n    segmentations.forEach((segmentation) => {\n        triggerSegmentationRepresentationModified(viewportId, segmentation.segmentationId);\n    });\n}\nfunction getRenderInactiveSegmentations(viewportId) {\n    return segmentationStyle.getRenderInactiveSegmentations(viewportId);\n}\nfunction resetToGlobalStyle() {\n    segmentationStyle.resetToGlobalStyle();\n    triggerSegmentationRender();\n}\nfunction hasCustomStyle(specifier) {\n    return segmentationStyle.hasCustomStyle(specifier);\n}\nexport { getStyle, setStyle, setRenderInactiveSegmentations, getRenderInactiveSegmentations, resetToGlobalStyle, hasCustomStyle, };\n","import { cache } from '@cornerstonejs/core';\nimport { getSegmentation } from '../getSegmentation';\nimport { triggerSegmentationDataModified } from '../triggerSegmentationEvents';\nexport function clearSegmentValue(segmentationId, segmentIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (segmentation.representationData.Labelmap) {\n        const { representationData } = segmentation;\n        const labelmapData = representationData.Labelmap;\n        if ('imageIds' in labelmapData || 'volumeId' in labelmapData) {\n            const items = 'imageIds' in labelmapData\n                ? labelmapData.imageIds.map((imageId) => cache.getImage(imageId))\n                : [cache.getVolume(labelmapData.volumeId)];\n            items.forEach((item) => {\n                if (!item) {\n                    return;\n                }\n                const { voxelManager } = item;\n                voxelManager.forEach(({ value, index }) => {\n                    if (value === segmentIndex) {\n                        voxelManager.setAtIndex(index, 0);\n                    }\n                });\n            });\n        }\n        triggerSegmentationDataModified(segmentationId);\n    }\n    else {\n        throw new Error('Invalid segmentation type, only labelmap is supported right now');\n    }\n}\n","import { getActiveSegmentIndex } from './getActiveSegmentIndex';\nimport { getSegmentation } from './getSegmentation';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nimport { getViewportIdsWithSegmentation } from './getViewportIdsWithSegmentation';\nimport { removeContourSegmentAnnotations } from './helpers/removeSegmentAnnotations';\nimport { clearSegmentValue } from './helpers/clearSegmentValue';\nimport { setActiveSegmentIndex } from './segmentIndex';\nimport { updateSegmentations } from './updateSegmentations';\nexport function removeSegment(segmentationId, segmentIndex, options = {\n    setNextSegmentAsActive: true,\n}) {\n    const segmentation = getSegmentation(segmentationId);\n    if (segmentation?.representationData.Contour) {\n        removeContourSegmentAnnotations(segmentationId, segmentIndex);\n    }\n    else if (segmentation?.representationData.Labelmap) {\n        clearSegmentValue(segmentationId, segmentIndex);\n    }\n    else {\n        throw new Error('Invalid segmentation type');\n    }\n    const isThisSegmentActive = getActiveSegmentIndex(segmentationId) === segmentIndex;\n    const { segments } = segmentation;\n    delete segments[segmentIndex];\n    const updatedSegments = {\n        ...segments,\n    };\n    updateSegmentations([\n        {\n            segmentationId,\n            payload: {\n                segments: updatedSegments,\n            },\n        },\n    ]);\n    if (isThisSegmentActive && options.setNextSegmentAsActive) {\n        const segmentIndices = Object.keys(segments)\n            .map(Number)\n            .sort((a, b) => a - b);\n        const currentIndex = segmentIndices.indexOf(segmentIndex);\n        const nextSegmentIndex = segmentIndices[currentIndex + 1];\n        const previousSegmentIndex = segmentIndices[currentIndex - 1];\n        if (nextSegmentIndex !== undefined) {\n            setActiveSegmentIndex(segmentationId, nextSegmentIndex);\n        }\n        else if (previousSegmentIndex !== undefined) {\n            setActiveSegmentIndex(segmentationId, previousSegmentIndex);\n        }\n    }\n    const viewportIds = getViewportIdsWithSegmentation(segmentationId);\n    viewportIds.forEach((viewportId) => {\n        const representations = getSegmentationRepresentations(viewportId, {\n            segmentationId,\n        });\n        representations.forEach((representation) => {\n            delete representation.segments[segmentIndex];\n        });\n    });\n}\n","import { getAnnotation } from '../../annotation/annotationState';\nimport { getAnnotationsUIDMapFromSegmentation, removeCompleteContourAnnotation, } from '../utilities';\nimport { isContourSegmentationAnnotation } from '../../../utilities/contourSegmentation';\nexport function removeContourSegmentAnnotations(segmentationId, segmentIndex) {\n    const annotationUIDsMap = getAnnotationsUIDMapFromSegmentation(segmentationId);\n    if (!annotationUIDsMap) {\n        return;\n    }\n    const annotationUIDs = annotationUIDsMap.get(segmentIndex);\n    if (!annotationUIDs) {\n        return;\n    }\n    annotationUIDs.forEach((annotationUID) => {\n        const annotation = getAnnotation(annotationUID);\n        if (isContourSegmentationAnnotation(annotation)) {\n            removeCompleteContourAnnotation(annotation);\n        }\n    });\n}\n","import { getSegmentation } from './getSegmentation';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getLabelmapImageIds(segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const segmentation = getSegmentation(segmentationId);\n    return segmentationStateManager.getLabelmapImageIds(segmentation.representationData);\n}\n","import { removeContourRepresentation, removeLabelmapRepresentation, removeSegmentationRepresentation, removeSurfaceRepresentation, removeSegmentationRepresentations, removeAllSegmentationRepresentations, } from './removeSegmentationRepresentations';\nimport { addContourRepresentationToViewport, addContourRepresentationToViewportMap, addSurfaceRepresentationToViewport, addSurfaceRepresentationToViewportMap, addLabelmapRepresentationToViewport, addLabelmapRepresentationToViewportMap, addSegmentationRepresentations, } from './addSegmentationRepresentationsToViewport';\nimport { addSegmentations } from './addSegmentations';\nimport addRepresentationData from './internalAddRepresentationData';\nimport { updateSegmentations } from './updateSegmentations';\nimport * as activeSegmentation from './activeSegmentation';\nimport * as segmentLocking from './segmentLocking';\nimport * as state from './segmentationState';\nimport * as config from './config';\nimport * as segmentIndex from './segmentIndex';\nimport * as triggerSegmentationEvents from './triggerSegmentationEvents';\nimport * as utilities from './utilities';\nimport { convertStackToVolumeLabelmap } from './helpers/convertStackToVolumeLabelmap';\nimport { computeVolumeLabelmapFromStack } from './helpers/computeVolumeLabelmapFromStack';\nimport { clearSegmentValue } from './helpers/clearSegmentValue';\nimport { convertVolumeToStackLabelmap } from './helpers/computeStackLabelmapFromVolume';\nimport { removeSegment } from './removeSegment';\nimport { getLabelmapImageIds } from './getLabelmapImageIds';\nimport * as strategies from './../../tools/segmentation/strategies';\nimport { removeAllSegmentations, removeSegmentation, } from './removeSegmentation';\nimport { segmentationStyle } from './SegmentationStyle';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { getCurrentLabelmapImageIdsForViewport, getLabelmapImageIdsForImageId, } from './getCurrentLabelmapImageIdForViewport';\nimport { getActiveSegmentation } from './getActiveSegmentation';\nconst helpers = {\n    clearSegmentValue,\n    convertStackToVolumeLabelmap,\n    computeVolumeLabelmapFromStack,\n    convertVolumeToStackLabelmap,\n};\nexport { removeSegmentationRepresentation, removeContourRepresentation, removeLabelmapRepresentation, removeSurfaceRepresentation, removeAllSegmentations, removeSegmentation, removeSegmentationRepresentations, addLabelmapRepresentationToViewport, addLabelmapRepresentationToViewportMap, addSegmentationRepresentations, removeAllSegmentationRepresentations, addContourRepresentationToViewport, addContourRepresentationToViewportMap, addSurfaceRepresentationToViewport, addSurfaceRepresentationToViewportMap, addSegmentations, updateSegmentations, state, activeSegmentation, segmentLocking, config, segmentIndex, triggerSegmentationEvents, utilities, helpers, removeSegment, getLabelmapImageIds, addRepresentationData, strategies, segmentationStyle, defaultSegmentationStateManager, getCurrentLabelmapImageIdsForViewport, getLabelmapImageIdsForImageId, getActiveSegmentation, };\n","import CORNERSTONE_COLOR_LUT from '../../constants/COLOR_LUT';\nimport { triggerAnnotationRenderForViewportIds } from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { SegmentationRepresentations } from '../../enums';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nimport { addColorLUT } from './addColorLUT';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { getActiveSegmentIndex, setActiveSegmentIndex } from './segmentIndex';\nfunction internalAddSegmentationRepresentation(viewportId, representationInput) {\n    const { segmentationId, config } = representationInput;\n    const renderingConfig = {\n        colorLUTIndex: getColorLUTIndex(config),\n        ...config,\n    };\n    defaultSegmentationStateManager.addSegmentationRepresentation(viewportId, segmentationId, representationInput.type, renderingConfig);\n    if (!getActiveSegmentIndex(segmentationId)) {\n        let firstSegmentIndex = 1;\n        const segmentation = defaultSegmentationStateManager.getSegmentation(segmentationId);\n        if (segmentation) {\n            const segmentKeys = Object.keys(segmentation.segments);\n            if (segmentKeys.length > 0) {\n                firstSegmentIndex = segmentKeys.map((k) => Number(k)).sort()[0];\n            }\n        }\n        setActiveSegmentIndex(segmentationId, firstSegmentIndex);\n    }\n    if (representationInput.type === SegmentationRepresentations.Contour) {\n        triggerAnnotationRenderForViewportIds([viewportId]);\n    }\n    triggerSegmentationModified(segmentationId);\n}\nfunction getColorLUTIndex(config) {\n    const { colorLUTOrIndex } = config || {};\n    if (colorLUTOrIndex === undefined) {\n        const index = addColorLUT(JSON.parse(JSON.stringify(CORNERSTONE_COLOR_LUT)));\n        return index;\n    }\n    if (typeof colorLUTOrIndex === 'number') {\n        return colorLUTOrIndex;\n    }\n    if (Array.isArray(colorLUTOrIndex) &&\n        colorLUTOrIndex.every((item) => Array.isArray(item) && item.length === 4)) {\n        const index = addColorLUT(colorLUTOrIndex);\n        return index;\n    }\n    const index = addColorLUT(JSON.parse(JSON.stringify(CORNERSTONE_COLOR_LUT)));\n    return index;\n}\nexport { internalAddSegmentationRepresentation };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { triggerSegmentationRemoved } from './triggerSegmentationEvents';\nimport { removeSegmentationRepresentations } from './removeSegmentationRepresentations';\nexport function removeSegmentation(segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const viewportsWithSegmentation = segmentationStateManager\n        .getAllViewportSegmentationRepresentations()\n        .filter(({ representations }) => representations.some((rep) => rep.segmentationId === segmentationId))\n        .map(({ viewportId }) => viewportId);\n    viewportsWithSegmentation.forEach((viewportId) => {\n        removeSegmentationRepresentations(viewportId, { segmentationId });\n    });\n    segmentationStateManager.removeSegmentation(segmentationId);\n    triggerSegmentationRemoved(segmentationId);\n}\nexport function removeAllSegmentations() {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const segmentations = segmentationStateManager.getState().segmentations;\n    const segmentationIds = segmentations.map((segmentation) => segmentation.segmentationId);\n    segmentationIds.forEach((segmentationId) => {\n        removeSegmentation(segmentationId);\n    });\n    segmentationStateManager.resetState();\n}\n","import SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nimport labelmapDisplay from '../../tools/displayTools/Labelmap/labelmapDisplay';\nimport contourDisplay from '../../tools/displayTools/Contour/contourDisplay';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nimport { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { surfaceDisplay } from '../../tools/displayTools/Surface';\nfunction removeSegmentationRepresentation(viewportId, specifier, immediate) {\n    return _removeSegmentationRepresentations(viewportId, specifier, immediate);\n}\nfunction removeSegmentationRepresentations(viewportId, specifier, immediate) {\n    return _removeSegmentationRepresentations(viewportId, specifier, immediate);\n}\nfunction _removeSegmentationRepresentations(viewportId, specifier, immediate) {\n    const { segmentationId, type } = specifier;\n    _removeRepresentationObject(viewportId, segmentationId, type, immediate);\n    return defaultSegmentationStateManager.removeSegmentationRepresentations(viewportId, {\n        segmentationId,\n        type,\n    });\n}\nfunction removeAllSegmentationRepresentations() {\n    const state = defaultSegmentationStateManager.getAllViewportSegmentationRepresentations();\n    state.forEach(({ viewportId, representations }) => {\n        representations.forEach(({ segmentationId, type }) => {\n            removeSegmentationRepresentation(viewportId, {\n                segmentationId,\n                type,\n            });\n        });\n    });\n    defaultSegmentationStateManager.resetState();\n}\nfunction removeLabelmapRepresentation(viewportId, segmentationId, immediate) {\n    removeSegmentationRepresentation(viewportId, {\n        segmentationId,\n        type: SegmentationRepresentations.Labelmap,\n    }, immediate);\n}\nfunction removeContourRepresentation(viewportId, segmentationId, immediate) {\n    removeSegmentationRepresentation(viewportId, {\n        segmentationId,\n        type: SegmentationRepresentations.Contour,\n    }, immediate);\n}\nfunction removeSurfaceRepresentation(viewportId, segmentationId, immediate) {\n    removeSegmentationRepresentation(viewportId, {\n        segmentationId,\n        type: SegmentationRepresentations.Surface,\n    }, immediate);\n}\nfunction _removeRepresentationObject(viewportId, segmentationId, type, immediate) {\n    const representations = getSegmentationRepresentations(viewportId, {\n        segmentationId,\n        type,\n    });\n    representations.forEach((representation) => {\n        if (representation.type === SegmentationRepresentations.Labelmap) {\n            labelmapDisplay.removeRepresentation(viewportId, representation.segmentationId, immediate);\n        }\n        else if (representation.type === SegmentationRepresentations.Contour) {\n            contourDisplay.removeRepresentation(viewportId, representation.segmentationId, immediate);\n        }\n        else if (representation.type === SegmentationRepresentations.Surface) {\n            surfaceDisplay.removeRepresentation(viewportId, representation.segmentationId, immediate);\n        }\n    });\n    const { viewport } = getEnabledElementByViewportId(viewportId) || {};\n    if (viewport) {\n        viewport.render();\n    }\n}\nexport { removeSegmentationRepresentation, removeSegmentationRepresentations, removeAllSegmentationRepresentations, removeLabelmapRepresentation, removeContourRepresentation, removeSurfaceRepresentation, };\n","import { getToolGroupForViewport } from '../../store/ToolGroupManager';\nimport { invalidateBrushCursor } from '../../utilities/segmentation/invalidateBrushCursor';\nimport { getSegmentation } from './getSegmentation';\nimport { getViewportIdsWithSegmentation } from './getViewportIdsWithSegmentation';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nimport { getActiveSegmentIndex } from './getActiveSegmentIndex';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nfunction setActiveSegmentIndex(segmentationId, segmentIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (typeof segmentIndex === 'string') {\n        console.warn('segmentIndex is a string, converting to number');\n        segmentIndex = Number(segmentIndex);\n    }\n    Object.values(segmentation.segments).forEach((segment) => {\n        segment.active = false;\n    });\n    if (!segmentation.segments[segmentIndex]) {\n        segmentation.segments[segmentIndex] = {\n            segmentIndex,\n            label: '',\n            locked: false,\n            cachedStats: {},\n            active: false,\n        };\n    }\n    if (segmentation.segments[segmentIndex].active !== true) {\n        segmentation.segments[segmentIndex].active = true;\n        triggerSegmentationModified(segmentationId);\n    }\n    const viewportIds = getViewportIdsWithSegmentation(segmentationId);\n    viewportIds.forEach((viewportId) => {\n        const representations = getSegmentationRepresentations(viewportId, {\n            segmentationId,\n        });\n        representations.forEach((representation) => {\n            if (!representation.segments[segmentIndex]) {\n                representation.segments[segmentIndex] = {\n                    visible: true,\n                };\n            }\n        });\n    });\n    viewportIds.forEach((viewportId) => {\n        const toolGroup = getToolGroupForViewport(viewportId);\n        invalidateBrushCursor(toolGroup.id);\n    });\n}\nexport { setActiveSegmentIndex, getActiveSegmentIndex };\n","import { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nimport { setAnnotationLocked } from '../annotation/annotationLocking';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nimport { getAnnotationsUIDMapFromSegmentation } from './utilities';\nfunction _setContourSegmentationSegmentAnnotationsLocked(segmentation, segmentIndex, locked) {\n    const annotationUIDsMap = getAnnotationsUIDMapFromSegmentation(segmentation.segmentationId);\n    if (!annotationUIDsMap) {\n        return;\n    }\n    const annotationUIDs = annotationUIDsMap.get(segmentIndex);\n    if (!annotationUIDs) {\n        return;\n    }\n    annotationUIDs.forEach((annotationUID) => {\n        setAnnotationLocked(annotationUID, locked);\n    });\n}\nfunction isSegmentIndexLocked(segmentationId, segmentIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    return segments[segmentIndex].locked;\n}\nfunction setSegmentIndexLocked(segmentationId, segmentIndex, locked = true) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    segments[segmentIndex].locked = locked;\n    if (segmentation?.representationData?.Contour) {\n        _setContourSegmentationSegmentAnnotationsLocked(segmentation, segmentIndex, locked);\n    }\n    triggerSegmentationModified(segmentationId);\n}\nfunction getLockedSegmentIndices(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    const lockedSegmentIndices = Object.keys(segments).filter((segmentIndex) => segments[segmentIndex].locked);\n    return lockedSegmentIndices.map((segmentIndex) => parseInt(segmentIndex));\n}\nexport { isSegmentIndexLocked, setSegmentIndexLocked, getLockedSegmentIndices };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function removeColorLUT(colorLUTIndex) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationStateManager.removeColorLUT(colorLUTIndex);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getStackSegmentationImageIdsForViewport(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getStackSegmentationImageIdsForViewport(viewportId, segmentationId);\n}\n","import { getSegmentation } from './getSegmentation';\nimport { getSegmentations } from './getSegmentations';\nimport { addSegmentations } from './addSegmentations';\nimport { removeAllSegmentations, removeSegmentation, } from './removeSegmentation';\nimport { removeLabelmapRepresentation, removeContourRepresentation, removeSurfaceRepresentation, removeSegmentationRepresentation, removeAllSegmentationRepresentations, } from './removeSegmentationRepresentations';\nimport { addColorLUT } from './addColorLUT';\nimport { getColorLUT } from './getColorLUT';\nimport { getNextColorLUTIndex } from './getNextColorLUTIndex';\nimport { removeColorLUT } from './removeColorLUT';\nimport { getViewportSegmentations, getViewportSegmentationRepresentations, } from './getViewportSegmentations';\nimport { getViewportIdsWithSegmentation } from './getViewportIdsWithSegmentation';\nimport { getCurrentLabelmapImageIdForViewport, getCurrentLabelmapImageIdsForViewport, } from './getCurrentLabelmapImageIdForViewport';\nimport { updateLabelmapSegmentationImageReferences } from './updateLabelmapSegmentationImageReferences';\nimport { getStackSegmentationImageIdsForViewport } from './getStackSegmentationImageIdsForViewport';\nimport { getSegmentationRepresentation, getSegmentationRepresentations, getSegmentationRepresentationsBySegmentationId, } from './getSegmentationRepresentation';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nfunction destroy() {\n    defaultSegmentationStateManager.resetState();\n}\nexport { getColorLUT, getCurrentLabelmapImageIdForViewport, getCurrentLabelmapImageIdsForViewport, getNextColorLUTIndex, getSegmentation, getSegmentations, getStackSegmentationImageIdsForViewport, getViewportIdsWithSegmentation, getSegmentationRepresentation, getSegmentationRepresentations, getViewportSegmentationRepresentations, removeColorLUT, getViewportSegmentations, removeSegmentation, removeLabelmapRepresentation, removeContourRepresentation, removeSurfaceRepresentation, removeSegmentationRepresentation, removeAllSegmentationRepresentations, removeAllSegmentations, addColorLUT, addSegmentations, updateLabelmapSegmentationImageReferences, getSegmentationRepresentationsBySegmentationId, destroy, };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function updateLabelmapSegmentationImageReferences(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.updateLabelmapSegmentationImageReferences(viewportId, segmentationId);\n}\n","import { findContourHoles } from '../../../utilities/contours';\nimport { getAnnotation, clearParentAnnotation, } from '../../annotation/annotationState';\nimport { getSegmentation } from '../getSegmentation';\nimport { extractSegmentPolylines } from './extractSegmentPolylines';\nexport default function convertContourHoles(segmentationId, segmentIndex, targetSegmentationId, targetSegmentationIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        console.warn(`Invalid segmentation given ${segmentationId}`);\n        return;\n    }\n    if (!segmentation.representationData.Contour) {\n        console.warn(`No contour representation found for segmentation ${segmentationId}`);\n        return;\n    }\n    const { annotationUIDsMap } = segmentation?.representationData.Contour || {};\n    if (!annotationUIDsMap) {\n        console.warn(`No annotation map found for segmentation ${segmentationId}`);\n        return;\n    }\n    const annotationsUIDsSet = annotationUIDsMap?.get(segmentIndex);\n    if (!annotationsUIDsSet) {\n        console.warn(`Segmentation index ${segmentIndex} has no annotations in segmentation ${segmentationId}`);\n        return;\n    }\n    let targetUIDsSet;\n    if (targetSegmentationId && typeof targetSegmentationIndex === 'number') {\n        const targetSegmentation = getSegmentation(targetSegmentationId);\n        if (!targetSegmentation) {\n            console.warn(`Target segmentation ${targetSegmentationId} does not exist.`);\n            return;\n        }\n        if (!targetSegmentation.representationData.Contour) {\n            console.warn(`No contour representation found for target segmentation ${targetSegmentationId}`);\n            return;\n        }\n        targetUIDsSet =\n            targetSegmentation.representationData.Contour.annotationUIDsMap.get(targetSegmentationIndex);\n        if (!targetUIDsSet) {\n            targetUIDsSet = new Set();\n            targetSegmentation.representationData.Contour.annotationUIDsMap.set(targetSegmentationIndex, targetUIDsSet);\n        }\n    }\n    const polylinesCanvasMap = extractSegmentPolylines(segmentationId, segmentIndex);\n    if (!polylinesCanvasMap) {\n        console.warn(`Error extracting contour data from segment ${segmentIndex} in segmentation ${segmentationId}`);\n        return;\n    }\n    const keys = Array.from(polylinesCanvasMap?.keys());\n    const polylines = keys.map((key) => polylinesCanvasMap.get(key));\n    const holeDetectionResults = findContourHoles(polylines);\n    if (holeDetectionResults?.length > 0) {\n        holeDetectionResults.forEach((hole) => {\n            hole.holeIndexes.forEach((index) => {\n                const annotation = getAnnotation(keys[index]);\n                clearParentAnnotation(annotation);\n                if (targetSegmentationId &&\n                    typeof targetSegmentationIndex === 'number') {\n                    targetUIDsSet.add(annotation.annotationUID);\n                }\n                else {\n                    annotationsUIDsSet.add(annotation.annotationUID);\n                }\n            });\n        });\n    }\n}\n","import { getAnnotation, invalidateAnnotation, } from '../../annotation/annotationState';\nimport { getSegmentation } from '../getSegmentation';\nimport { extractSegmentPolylines } from './extractSegmentPolylines';\nimport decimate from '../../../utilities/math/polyline/decimate';\nimport { getViewportsAssociatedToSegmentation, getViewportWithMatchingViewPlaneNormal, } from './getViewportAssociatedToSegmentation';\nexport default function decimateContours(segmentationId, segmentIndex, options = { epsilon: 0.1 }) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        console.warn(`Invalid segmentation given ${segmentationId}`);\n        return;\n    }\n    if (!segmentation.representationData.Contour) {\n        console.warn(`No contour representation found for segmentation ${segmentationId}`);\n        return;\n    }\n    const viewports = getViewportsAssociatedToSegmentation(segmentationId);\n    if (!viewports) {\n        console.warn('No viewport associated to the segmentation found');\n        return;\n    }\n    const polylinesCanvasMap = extractSegmentPolylines(segmentationId, segmentIndex);\n    if (!polylinesCanvasMap) {\n        console.warn(`Error extracting contour data from segment ${segmentIndex} in segmentation ${segmentationId}`);\n        return;\n    }\n    const keys = Array.from(polylinesCanvasMap?.keys());\n    for (const annotationUID of keys) {\n        const annotation = getAnnotation(annotationUID);\n        if (!annotation) {\n            continue;\n        }\n        const polylineCanvas = polylinesCanvasMap.get(annotationUID);\n        const decimatedPolyline2D = decimate(polylineCanvas, options.epsilon);\n        const viewport = getViewportWithMatchingViewPlaneNormal(viewports, annotation);\n        if (viewport) {\n            annotation.data.contour.polyline = decimatedPolyline2D.map((point2D) => viewport.canvasToWorld(point2D));\n            invalidateAnnotation(annotation);\n        }\n    }\n}\n","import { getAnnotationMapFromSegmentation, } from './getAnnotationMapFromSegmentation';\nfunction closePolyline(polyline, closed) {\n    if (!polyline || polyline.length === 0) {\n        return [];\n    }\n    if (!closed) {\n        return [...polyline];\n    }\n    const firstPoint = polyline[0];\n    const lastPoint = polyline[polyline.length - 1];\n    const isAlreadyClosed = firstPoint[0] === lastPoint[0] &&\n        firstPoint[1] === lastPoint[1] &&\n        firstPoint[2] === lastPoint[2];\n    if (isAlreadyClosed) {\n        return [...polyline];\n    }\n    return [...polyline, firstPoint];\n}\nexport function getPolylinesMap(contourRepresentationData, segmentIndex) {\n    const { annotationUIDsInSegmentMap } = getAnnotationMapFromSegmentation(contourRepresentationData);\n    if (!annotationUIDsInSegmentMap.has(segmentIndex)) {\n        console.warn(`No contour information found for segmentIndex ${segmentIndex}`);\n        return;\n    }\n    const polylines = new Map();\n    const annotationsInfo = annotationUIDsInSegmentMap.get(segmentIndex);\n    for (const annotationInfo of annotationsInfo) {\n        polylines.set(annotationInfo.annotationUID, closePolyline(annotationInfo.polyline, annotationInfo.isClosed));\n        for (let i = 0; i < annotationInfo.holesUIDs?.length; i++) {\n            polylines.set(annotationInfo.holesUIDs[i], closePolyline(annotationInfo.holesPolyline[i], annotationInfo.holesClosed[i]));\n        }\n    }\n    return polylines;\n}\n","import { getSegmentation } from '../getSegmentation';\nimport { convertContourPolylineToCanvasSpace } from '../../../utilities/contourSegmentation';\nimport { getViewportsAssociatedToSegmentation, getViewportWithMatchingViewPlaneNormal, } from './getViewportAssociatedToSegmentation';\nimport { getPolylinesMap } from './getPolylineMap';\nimport { getAnnotation } from '../../annotation/annotationState';\nexport function extractSegmentPolylines(segmentationId, segmentIndex) {\n    const viewports = getViewportsAssociatedToSegmentation(segmentationId);\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        return;\n    }\n    if (!segmentation.representationData.Contour) {\n        return;\n    }\n    const contourRepresentationData = segmentation.representationData\n        .Contour;\n    const { annotationUIDsMap } = contourRepresentationData;\n    if (!annotationUIDsMap) {\n        return;\n    }\n    if (!annotationUIDsMap.get(segmentIndex)) {\n        return;\n    }\n    const polyLinesMap = getPolylinesMap(contourRepresentationData, segmentIndex);\n    if (!polyLinesMap) {\n        return;\n    }\n    const keys = Array.from(polyLinesMap?.keys());\n    const polylinesCanvasMap = new Map();\n    for (const key of keys) {\n        const annotation = getAnnotation(key);\n        const viewport = getViewportWithMatchingViewPlaneNormal(viewports, annotation);\n        polylinesCanvasMap.set(key, convertContourPolylineToCanvasSpace(polyLinesMap.get(key), viewport));\n    }\n    return polylinesCanvasMap;\n}\n","import { getAnnotation } from '../../annotation/annotationState';\nexport function getAnnotationMapFromSegmentation(contourRepresentationData, options = {}) {\n    const annotationMap = contourRepresentationData.annotationUIDsMap;\n    const segmentIndices = options.segmentIndices?.length\n        ? options.segmentIndices\n        : Array.from(annotationMap.keys());\n    const annotationUIDsInSegmentMap = new Map();\n    segmentIndices.forEach((index) => {\n        const annotationUIDsInSegment = annotationMap.get(index);\n        let uids = Array.from(annotationUIDsInSegment);\n        uids = uids.filter((uid) => !getAnnotation(uid).parentAnnotationUID);\n        const annotations = uids.map((uid) => {\n            const annotation = getAnnotation(uid);\n            const hasChildAnnotations = annotation.childAnnotationUIDs?.length;\n            const childPolylinesInformation = hasChildAnnotations &&\n                annotation.childAnnotationUIDs.map((childUID) => {\n                    const childAnnotation = getAnnotation(childUID);\n                    return {\n                        polyline: childAnnotation.data.contour.polyline,\n                        isClosed: childAnnotation.data.contour.closed,\n                    };\n                });\n            const holesClosed = hasChildAnnotations &&\n                childPolylinesInformation.map((childInfo) => childInfo.isClosed);\n            const childPolylines = hasChildAnnotations &&\n                childPolylinesInformation.map((childInfo) => childInfo.polyline);\n            return {\n                polyline: annotation.data.contour.polyline,\n                isClosed: annotation.data.contour.closed,\n                annotationUID: annotation.annotationUID,\n                referencedImageId: annotation.metadata.referencedImageId,\n                holesPolyline: childPolylines,\n                holesUIDs: annotation.childAnnotationUIDs,\n                holesClosed,\n            };\n        });\n        annotationUIDsInSegmentMap.set(index, annotations);\n    });\n    return { segmentIndices, annotationUIDsInSegmentMap };\n}\n","import { getSegmentation } from '../getSegmentation';\nexport function getAnnotationsUIDMapFromSegmentation(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        return;\n    }\n    const contourRepresentationData = segmentation.representationData\n        ?.Contour;\n    if (!contourRepresentationData) {\n        return;\n    }\n    const { annotationUIDsMap } = contourRepresentationData;\n    if (!annotationUIDsMap) {\n        return;\n    }\n    return annotationUIDsMap;\n}\n","import { vec3 } from 'gl-matrix';\nimport { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport { getViewportIdsWithSegmentation } from '../getViewportIdsWithSegmentation';\nexport function getViewportsAssociatedToSegmentation(segmentationId) {\n    const viewportIds = getViewportIdsWithSegmentation(segmentationId);\n    if (viewportIds?.length === 0) {\n        return [];\n    }\n    const viewports = [];\n    for (const viewportId of viewportIds) {\n        const { viewport } = getEnabledElementByViewportId(viewportId) || {};\n        if (viewport) {\n            viewports.push(viewport);\n        }\n    }\n    return viewports;\n}\nexport function getViewportAssociatedToSegmentation(segmentationId) {\n    const viewports = getViewportsAssociatedToSegmentation(segmentationId);\n    return viewports.length > 0 ? viewports[0] : undefined;\n}\nexport function getViewportWithMatchingViewPlaneNormal(viewports, annotation, dotThreshold = 0.99) {\n    const annotationViewPlaneNormal = annotation.metadata?.viewPlaneNormal;\n    if (!annotationViewPlaneNormal || !Array.isArray(annotationViewPlaneNormal)) {\n        return undefined;\n    }\n    const normalizedAnnotationNormal = vec3.create();\n    vec3.normalize(normalizedAnnotationNormal, annotationViewPlaneNormal);\n    for (const viewport of viewports) {\n        const camera = viewport.getCamera();\n        if (!camera?.viewPlaneNormal) {\n            continue;\n        }\n        const normalizedCameraNormal = vec3.create();\n        vec3.normalize(normalizedCameraNormal, camera.viewPlaneNormal);\n        const dotProduct = vec3.dot(normalizedAnnotationNormal, normalizedCameraNormal);\n        if (Math.abs(dotProduct) >= dotThreshold) {\n            return viewport;\n        }\n    }\n    return undefined;\n}\n","import { removeContourSegmentationAnnotation } from '../../../utilities/contourSegmentation';\nimport { clearParentAnnotation, removeAnnotation, } from '../../annotation/annotationState';\nexport function removeCompleteContourAnnotation(annotation) {\n    if (!annotation) {\n        return;\n    }\n    if (annotation.parentAnnotationUID) {\n        clearParentAnnotation(annotation);\n    }\n    removeAnnotation(annotation.annotationUID);\n    removeContourSegmentationAnnotation(annotation);\n}\n","import { findContourHoles } from '../../../utilities/contours';\nimport { getAnnotation } from '../../annotation/annotationState';\nimport { getSegmentation } from '../getSegmentation';\nimport { extractSegmentPolylines } from './extractSegmentPolylines';\nimport { removeCompleteContourAnnotation } from './removeCompleteContourAnnotation';\nexport default function removeContourHoles(segmentationId, segmentIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        console.warn(`Invalid segmentation given ${segmentationId}`);\n        return;\n    }\n    if (!segmentation.representationData.Contour) {\n        console.warn(`No contour representation found for segmentation ${segmentationId}`);\n        return;\n    }\n    const polylinesCanvasMap = extractSegmentPolylines(segmentationId, segmentIndex);\n    if (!polylinesCanvasMap) {\n        console.warn(`Error extracting contour data from segment ${segmentIndex} in segmentation ${segmentationId}`);\n        return;\n    }\n    const keys = Array.from(polylinesCanvasMap?.keys());\n    const polylines = keys.map((key) => polylinesCanvasMap.get(key));\n    const holeDetectionResults = findContourHoles(polylines);\n    if (holeDetectionResults?.length > 0) {\n        holeDetectionResults.forEach((hole) => {\n            hole.holeIndexes.forEach((index) => {\n                const annotation = getAnnotation(keys[index]);\n                removeCompleteContourAnnotation(annotation);\n            });\n        });\n    }\n}\n","import { getAnnotation } from '../../annotation/annotationState';\nimport { getSegmentation } from '../getSegmentation';\nimport { extractSegmentPolylines } from './extractSegmentPolylines';\nimport findIslands from '../../../utilities/contours/findIslands';\nimport { removeCompleteContourAnnotation } from './removeCompleteContourAnnotation';\nexport default function removeContourIslands(segmentationId, segmentIndex, options = { threshold: 3 }) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        console.warn(`Invalid segmentation given ${segmentationId}`);\n        return;\n    }\n    if (!segmentation.representationData.Contour) {\n        console.warn(`No contour representation found for segmentation ${segmentationId}`);\n        return;\n    }\n    const polylinesCanvasMap = extractSegmentPolylines(segmentationId, segmentIndex);\n    if (!polylinesCanvasMap) {\n        console.warn(`Error extracting contour data from segment ${segmentIndex} in segmentation ${segmentationId}`);\n        return;\n    }\n    const keys = Array.from(polylinesCanvasMap?.keys());\n    const polylines = keys.map((key) => polylinesCanvasMap.get(key));\n    const islands = findIslands(polylines, options.threshold);\n    if (islands?.length > 0) {\n        islands.forEach((index) => {\n            const annotation = getAnnotation(keys[index]);\n            removeCompleteContourAnnotation(annotation);\n        });\n    }\n}\n","import { getAnnotation } from '../../annotation/annotationState';\nimport { getSegmentation } from '../getSegmentation';\nimport interpolateSegmentPoints from '../../../utilities/planarFreehandROITool/interpolation/interpolateSegmentPoints';\nexport default function smoothContours(segmentationId, segmentIndex, options = { knotsRatioPercentage: 30 }) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        console.warn(`Invalid segmentation given ${segmentationId}`);\n        return;\n    }\n    if (!segmentation.representationData.Contour) {\n        console.warn(`No contour representation found for segmentation ${segmentationId}`);\n        return;\n    }\n    const contourRepresentationData = segmentation.representationData\n        .Contour;\n    const { annotationUIDsMap } = contourRepresentationData;\n    if (!annotationUIDsMap) {\n        console.warn(`No contours found for segmentation ${segmentationId}`);\n        return;\n    }\n    if (!annotationUIDsMap.has(segmentIndex)) {\n        console.warn(`Error extracting contour data from segment ${segmentIndex} in segmentation ${segmentationId}`);\n        return;\n    }\n    const annotationList = annotationUIDsMap.get(segmentIndex);\n    annotationList.forEach((annotationUID) => {\n        const annotation = getAnnotation(annotationUID);\n        if (!annotation) {\n            return;\n        }\n        const polyline = annotation.data.contour.polyline;\n        if (!polyline || polyline.length < 3) {\n            return;\n        }\n        const smoothedPolyline = interpolateSegmentPoints(polyline, 0, polyline.length - 1, options.knotsRatioPercentage);\n        annotation.data.contour.polyline = smoothedPolyline;\n    });\n}\n","import { getRenderingEngine, getEnabledElement, eventTarget, Enums, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nclass Synchronizer {\n    constructor(synchronizerId, eventName, eventHandler, options) {\n        this._viewportOptions = {};\n        this._onEvent = (evt) => {\n            if (this._ignoreFiredEvents === true) {\n                return;\n            }\n            if (!this._targetViewports.length) {\n                return;\n            }\n            const enabledElement = this._eventSource === 'element'\n                ? getEnabledElement(evt.currentTarget)\n                : getEnabledElementByViewportId(evt.detail?.viewportId);\n            if (!enabledElement) {\n                return;\n            }\n            const { renderingEngineId, viewportId } = enabledElement;\n            if (!this._sourceViewports.find((s) => s.viewportId === viewportId)) {\n                return;\n            }\n            this.fireEvent({\n                renderingEngineId,\n                viewportId,\n            }, evt);\n        };\n        this._enabled = true;\n        this._eventName = eventName;\n        this._eventHandler = eventHandler;\n        this._ignoreFiredEvents = false;\n        this._sourceViewports = [];\n        this._targetViewports = [];\n        this._options = options || {};\n        this._eventSource = this._options.eventSource || 'element';\n        this._auxiliaryEvents = this._options.auxiliaryEvents || [];\n        this.id = synchronizerId;\n    }\n    isDisabled() {\n        return !this._enabled || !this._hasSourceElements();\n    }\n    setOptions(viewportId, options = {}) {\n        this._viewportOptions[viewportId] = options;\n    }\n    setEnabled(enabled) {\n        this._enabled = enabled;\n    }\n    getOptions(viewportId) {\n        return this._viewportOptions[viewportId];\n    }\n    add(viewportInfo) {\n        this.addTarget(viewportInfo);\n        this.addSource(viewportInfo);\n    }\n    addSource(viewportInfo) {\n        if (_containsViewport(this._sourceViewports, viewportInfo)) {\n            return;\n        }\n        const { renderingEngineId, viewportId } = viewportInfo;\n        const viewport = getRenderingEngine(renderingEngineId).getViewport(viewportId);\n        if (!viewport) {\n            console.warn(`Synchronizer.addSource: No viewport for ${renderingEngineId} ${viewportId}`);\n            return;\n        }\n        const eventSource = this._eventSource === 'element' ? viewport.element : eventTarget;\n        eventSource.addEventListener(this._eventName, this._onEvent.bind(this));\n        this._auxiliaryEvents.forEach(({ name, source }) => {\n            const target = source === 'element' ? viewport.element : eventTarget;\n            target.addEventListener(name, this._onEvent.bind(this));\n        });\n        this._updateDisableHandlers();\n        this._sourceViewports.push(viewportInfo);\n    }\n    addTarget(viewportInfo) {\n        if (_containsViewport(this._targetViewports, viewportInfo)) {\n            return;\n        }\n        this._targetViewports.push(viewportInfo);\n        this._updateDisableHandlers();\n    }\n    getSourceViewports() {\n        return this._sourceViewports;\n    }\n    getTargetViewports() {\n        return this._targetViewports;\n    }\n    destroy() {\n        this._sourceViewports.forEach((s) => this.removeSource(s));\n        this._targetViewports.forEach((t) => this.removeTarget(t));\n    }\n    remove(viewportInfo) {\n        this.removeTarget(viewportInfo);\n        this.removeSource(viewportInfo);\n    }\n    removeSource(viewportInfo) {\n        const index = _getViewportIndex(this._sourceViewports, viewportInfo);\n        if (index === -1) {\n            return;\n        }\n        const eventSource = this._eventSource === 'element'\n            ? this.getViewportElement(viewportInfo)\n            : eventTarget;\n        this._sourceViewports.splice(index, 1);\n        eventSource.removeEventListener(this._eventName, this._eventHandler);\n        this._auxiliaryEvents.forEach(({ name, source }) => {\n            const target = source === 'element'\n                ? this.getViewportElement(viewportInfo)\n                : eventTarget;\n            target.removeEventListener(name, this._eventHandler);\n        });\n        this._updateDisableHandlers();\n    }\n    removeTarget(viewportInfo) {\n        const index = _getViewportIndex(this._targetViewports, viewportInfo);\n        if (index === -1) {\n            return;\n        }\n        this._targetViewports.splice(index, 1);\n        this._updateDisableHandlers();\n    }\n    hasSourceViewport(renderingEngineId, viewportId) {\n        return _containsViewport(this._sourceViewports, {\n            renderingEngineId,\n            viewportId,\n        });\n    }\n    hasTargetViewport(renderingEngineId, viewportId) {\n        return _containsViewport(this._targetViewports, {\n            renderingEngineId,\n            viewportId,\n        });\n    }\n    fireEvent(sourceViewport, sourceEvent) {\n        if (this.isDisabled() || this._ignoreFiredEvents) {\n            return;\n        }\n        this._ignoreFiredEvents = true;\n        const promises = [];\n        try {\n            for (let i = 0; i < this._targetViewports.length; i++) {\n                const targetViewport = this._targetViewports[i];\n                const targetIsSource = sourceViewport.viewportId === targetViewport.viewportId;\n                if (targetIsSource) {\n                    continue;\n                }\n                const result = this._eventHandler(this, sourceViewport, targetViewport, sourceEvent, this._options);\n                if (result instanceof Promise) {\n                    promises.push(result);\n                }\n            }\n        }\n        catch (ex) {\n            console.warn(`Synchronizer, for: ${this._eventName}`, ex);\n        }\n        finally {\n            if (promises.length) {\n                Promise.allSettled(promises).then(() => {\n                    this._ignoreFiredEvents = false;\n                });\n            }\n            else {\n                this._ignoreFiredEvents = false;\n            }\n        }\n    }\n    _hasSourceElements() {\n        return this._sourceViewports.length !== 0;\n    }\n    _updateDisableHandlers() {\n        const viewports = _getUniqueViewports(this._sourceViewports, this._targetViewports);\n        const _remove = this.remove.bind(this);\n        const disableHandler = (elementDisabledEvent) => {\n            _remove(elementDisabledEvent.detail.element);\n        };\n        viewports.forEach((vp) => {\n            const eventSource = this.getEventSource(vp);\n            if (!eventSource) {\n                return;\n            }\n            eventSource.removeEventListener(Enums.Events.ELEMENT_DISABLED, disableHandler);\n            eventSource.addEventListener(Enums.Events.ELEMENT_DISABLED, disableHandler);\n        });\n    }\n    getEventSource(viewportInfo) {\n        return this._eventSource === 'element'\n            ? this.getViewportElement(viewportInfo)\n            : eventTarget;\n    }\n    getViewportElement(viewportInfo) {\n        const { renderingEngineId, viewportId } = viewportInfo;\n        const renderingEngine = getRenderingEngine(renderingEngineId);\n        if (!renderingEngine) {\n            return null;\n        }\n        const viewport = renderingEngine.getViewport(viewportId);\n        if (!viewport) {\n            return null;\n        }\n        return viewport.element;\n    }\n}\nfunction _getUniqueViewports(vp1, vp2) {\n    const unique = [];\n    const vps = vp1.concat(vp2);\n    for (let i = 0; i < vps.length; i++) {\n        const vp = vps[i];\n        if (!unique.some((u) => vp.renderingEngineId === u.renderingEngineId &&\n            vp.viewportId === u.viewportId)) {\n            unique.push(vp);\n        }\n    }\n    return unique;\n}\nfunction _getViewportIndex(arr, vp) {\n    return arr.findIndex((ar) => vp.renderingEngineId === ar.renderingEngineId &&\n        vp.viewportId === ar.viewportId);\n}\nfunction _containsViewport(arr, vp) {\n    return arr.some((ar) => ar.renderingEngineId === vp.renderingEngineId &&\n        ar.viewportId === vp.viewportId);\n}\nexport default Synchronizer;\n","import { state } from '../state';\nimport Synchronizer, {} from './Synchronizer';\nfunction createSynchronizer(synchronizerId, eventName, eventHandler, options) {\n    const synchronizerWithSameIdExists = state.synchronizers.some((sync) => sync.id === synchronizerId);\n    if (synchronizerWithSameIdExists) {\n        throw new Error(`Synchronizer with id '${synchronizerId}' already exists.`);\n    }\n    const synchronizer = new Synchronizer(synchronizerId, eventName, eventHandler, options);\n    state.synchronizers.push(synchronizer);\n    return synchronizer;\n}\nexport default createSynchronizer;\n","import { state } from '../state';\nfunction destroy() {\n    while (state.synchronizers.length > 0) {\n        const synchronizer = state.synchronizers.pop();\n        synchronizer.destroy();\n    }\n}\nexport default destroy;\n","import { state } from '../state';\nfunction destroySynchronizer(synchronizerId) {\n    const synchronizerIndex = state.synchronizers.findIndex((sync) => sync.id === synchronizerId);\n    if (synchronizerIndex > -1) {\n        const synchronizer = state.synchronizers[synchronizerIndex];\n        synchronizer.destroy();\n        state.synchronizers.splice(synchronizerIndex, 1);\n    }\n}\nexport default destroySynchronizer;\n","import { state } from '../state';\nfunction getAllSynchronizers() {\n    return state.synchronizers;\n}\nexport default getAllSynchronizers;\n","import { state } from '../state';\nfunction getSynchronizer(synchronizerId) {\n    return state.synchronizers.find((s) => s.id === synchronizerId);\n}\nexport default getSynchronizer;\n","import { state } from '../state';\nfunction getSynchronizersForViewport(viewportId, renderingEngineId) {\n    const synchronizersFilteredByIds = [];\n    if (!renderingEngineId && !viewportId) {\n        throw new Error('At least one of renderingEngineId or viewportId should be given');\n    }\n    for (let i = 0; i < state.synchronizers.length; i++) {\n        const synchronizer = state.synchronizers[i];\n        const notDisabled = !synchronizer.isDisabled();\n        const hasSourceViewport = synchronizer.hasSourceViewport(renderingEngineId, viewportId);\n        const hasTargetViewport = synchronizer.hasTargetViewport(renderingEngineId, viewportId);\n        if (notDisabled && (hasSourceViewport || hasTargetViewport)) {\n            synchronizersFilteredByIds.push(synchronizer);\n        }\n    }\n    return synchronizersFilteredByIds;\n}\nexport default getSynchronizersForViewport;\n","import { state } from '../state';\nfunction getToolGroup(toolGroupId) {\n    return state.toolGroups.find((s) => s.id === toolGroupId);\n}\nexport default getToolGroup;\n","import { MouseBindings, ToolModes, Events } from '../../enums';\nimport get from 'lodash.get';\nimport { triggerEvent, eventTarget, getRenderingEngine, getRenderingEngines, getEnabledElementByIds, Settings, } from '@cornerstonejs/core';\nimport { utilities } from '@cornerstonejs/core';\nimport { state } from '../state';\nimport { MouseCursor, SVGMouseCursor } from '../../cursors';\nimport { initElementCursor } from '../../cursors/elementCursor';\nimport getToolGroup from './getToolGroup';\nconst { Active, Passive, Enabled, Disabled } = ToolModes;\nconst PRIMARY_BINDINGS = [{ mouseButton: MouseBindings.Primary }];\nexport default class ToolGroup {\n    constructor(id) {\n        this.viewportsInfo = [];\n        this.toolOptions = {};\n        this.currentActivePrimaryToolName = null;\n        this.prevActivePrimaryToolName = null;\n        this.restoreToolOptions = {};\n        this._toolInstances = {};\n        this.id = id;\n    }\n    getViewportIds() {\n        return this.viewportsInfo.map(({ viewportId }) => viewportId);\n    }\n    getViewportsInfo() {\n        return this.viewportsInfo.slice();\n    }\n    getToolInstance(toolInstanceName) {\n        const toolInstance = this._toolInstances[toolInstanceName];\n        if (!toolInstance) {\n            console.warn(`'${toolInstanceName}' is not registered with this toolGroup (${this.id}).`);\n            return;\n        }\n        return toolInstance;\n    }\n    getToolInstances() {\n        return this._toolInstances;\n    }\n    hasTool(toolName) {\n        return !!this._toolInstances[toolName];\n    }\n    addTool(toolName, configuration = {}) {\n        const toolDefinition = state.tools[toolName];\n        const hasToolName = typeof toolName !== 'undefined' && toolName !== '';\n        const localToolInstance = this.toolOptions[toolName];\n        if (!hasToolName) {\n            console.warn('Tool with configuration did not produce a toolName: ', configuration);\n            return;\n        }\n        if (!toolDefinition) {\n            console.warn(`'${toolName}' is not registered with the library. You need to use cornerstoneTools.addTool to register it.`);\n            return;\n        }\n        if (localToolInstance) {\n            console.warn(`'${toolName}' is already registered for ToolGroup ${this.id}.`);\n            return;\n        }\n        const { toolClass: ToolClass } = toolDefinition;\n        const toolProps = {\n            name: toolName,\n            toolGroupId: this.id,\n            configuration,\n        };\n        const instantiatedTool = new ToolClass(toolProps);\n        this._toolInstances[toolName] = instantiatedTool;\n    }\n    addToolInstance(toolName, parentClassName, configuration = {}) {\n        let ToolClassToUse = state.tools[toolName]\n            ?.toolClass;\n        if (!ToolClassToUse) {\n            const ParentClass = state.tools[parentClassName]\n                .toolClass;\n            class ToolInstance extends ParentClass {\n            }\n            ToolInstance.toolName = toolName;\n            ToolClassToUse = ToolInstance;\n            state.tools[toolName] = {\n                toolClass: ToolInstance,\n            };\n        }\n        this.addTool(ToolClassToUse.toolName, configuration);\n    }\n    addViewport(viewportId, renderingEngineId) {\n        if (typeof viewportId !== 'string') {\n            throw new Error('viewportId must be defined and be a string');\n        }\n        const renderingEngineUIDToUse = this._findRenderingEngine(viewportId, renderingEngineId);\n        if (!this.viewportsInfo.some(({ viewportId: vpId }) => vpId === viewportId)) {\n            this.viewportsInfo.push({\n                viewportId,\n                renderingEngineId: renderingEngineUIDToUse,\n            });\n        }\n        const toolName = this.getActivePrimaryMouseButtonTool();\n        this.setViewportsCursorByToolName(toolName);\n        const eventDetail = {\n            toolGroupId: this.id,\n            viewportId,\n            renderingEngineId: renderingEngineUIDToUse,\n        };\n        triggerEvent(eventTarget, Events.TOOLGROUP_VIEWPORT_ADDED, eventDetail);\n    }\n    removeViewports(renderingEngineId, viewportId) {\n        const indices = [];\n        this.viewportsInfo.forEach((vpInfo, index) => {\n            let match = false;\n            if (vpInfo.renderingEngineId === renderingEngineId) {\n                match = true;\n                if (viewportId && vpInfo.viewportId !== viewportId) {\n                    match = false;\n                }\n            }\n            if (match) {\n                indices.push(index);\n            }\n        });\n        if (indices.length) {\n            for (let i = indices.length - 1; i >= 0; i--) {\n                this.viewportsInfo.splice(indices[i], 1);\n            }\n        }\n        const eventDetail = {\n            toolGroupId: this.id,\n            viewportId,\n            renderingEngineId,\n        };\n        triggerEvent(eventTarget, Events.TOOLGROUP_VIEWPORT_REMOVED, eventDetail);\n    }\n    setActiveStrategy(toolName, strategyName) {\n        const toolInstance = this._toolInstances[toolName];\n        if (toolInstance === undefined) {\n            console.warn(`Tool ${toolName} not added to toolGroup, can't set tool configuration.`);\n            return;\n        }\n        toolInstance.setActiveStrategy(strategyName);\n    }\n    setToolMode(toolName, mode, options = {}) {\n        if (!toolName) {\n            console.warn('setToolMode: toolName must be defined');\n            return;\n        }\n        if (mode === ToolModes.Active) {\n            this.setToolActive(toolName, options || this.restoreToolOptions[toolName]);\n            return;\n        }\n        if (mode === ToolModes.Passive) {\n            this.setToolPassive(toolName);\n            return;\n        }\n        if (mode === ToolModes.Enabled) {\n            this.setToolEnabled(toolName);\n            return;\n        }\n        if (mode === ToolModes.Disabled) {\n            this.setToolDisabled(toolName);\n            return;\n        }\n        console.warn('setToolMode: mode must be defined');\n    }\n    setToolActive(toolName, toolBindingsOptions = {}) {\n        const toolInstance = this._toolInstances[toolName];\n        if (toolInstance === undefined) {\n            console.warn(`Tool ${toolName} not added to toolGroup, can't set tool mode.`);\n            return;\n        }\n        if (!toolInstance) {\n            console.warn(`'${toolName}' instance ${toolInstance} is not registered with this toolGroup, can't set tool mode.`);\n            return;\n        }\n        const prevBindings = this.toolOptions[toolName]\n            ? this.toolOptions[toolName].bindings\n            : [];\n        const newBindings = toolBindingsOptions.bindings\n            ? toolBindingsOptions.bindings\n            : [];\n        const bindingsToUse = [...prevBindings, ...newBindings].reduce((unique, binding) => {\n            const TouchBinding = binding.numTouchPoints !== undefined;\n            const MouseBinding = binding.mouseButton !== undefined;\n            if (!unique.some((obj) => hasSameBinding(obj, binding)) &&\n                (TouchBinding || MouseBinding)) {\n                unique.push(binding);\n            }\n            return unique;\n        }, []);\n        const toolOptions = {\n            bindings: bindingsToUse,\n            mode: Active,\n        };\n        this.toolOptions[toolName] = toolOptions;\n        this._toolInstances[toolName].mode = Active;\n        if (!this._hasMousePrimaryButtonBinding(toolBindingsOptions)) {\n            const activeToolIdentifier = this.getActivePrimaryMouseButtonTool();\n            if (!activeToolIdentifier) {\n                const cursor = MouseCursor.getDefinedCursor('default');\n                this._setCursorForViewports(cursor);\n            }\n        }\n        else {\n            this.setViewportsCursorByToolName(toolName);\n        }\n        if (this._hasMousePrimaryButtonBinding(toolBindingsOptions)) {\n            if (this.prevActivePrimaryToolName === null) {\n                this.prevActivePrimaryToolName = toolName;\n            }\n            else {\n                this.prevActivePrimaryToolName = this.currentActivePrimaryToolName;\n            }\n            this.currentActivePrimaryToolName = toolName;\n        }\n        if (typeof toolInstance.onSetToolActive === 'function') {\n            toolInstance.onSetToolActive();\n        }\n        this._renderViewports();\n        const eventDetail = {\n            toolGroupId: this.id,\n            toolName,\n            toolBindingsOptions,\n        };\n        triggerEvent(eventTarget, Events.TOOL_ACTIVATED, eventDetail);\n        this._triggerToolModeChangedEvent(toolName, Active, toolBindingsOptions);\n    }\n    setToolPassive(toolName, options) {\n        const toolInstance = this._toolInstances[toolName];\n        if (toolInstance === undefined) {\n            console.warn(`Tool ${toolName} not added to toolGroup, can't set tool mode.`);\n            return;\n        }\n        const prevToolOptions = this.getToolOptions(toolName);\n        const toolOptions = Object.assign({\n            bindings: prevToolOptions ? prevToolOptions.bindings : [],\n        }, prevToolOptions, {\n            mode: Passive,\n        });\n        const matchBindings = Array.isArray(options?.removeAllBindings)\n            ? options.removeAllBindings\n            : this.getDefaultPrimaryBindings();\n        toolOptions.bindings = toolOptions.bindings.filter((binding) => options?.removeAllBindings !== true &&\n            !matchBindings.some((matchBinding) => hasSameBinding(binding, matchBinding)));\n        let mode = Passive;\n        if (toolOptions.bindings.length !== 0) {\n            mode = Active;\n            toolOptions.mode = mode;\n        }\n        this.toolOptions[toolName] = toolOptions;\n        toolInstance.mode = mode;\n        if (typeof toolInstance.onSetToolPassive === 'function') {\n            toolInstance.onSetToolPassive();\n        }\n        this._renderViewports();\n        this._triggerToolModeChangedEvent(toolName, Passive);\n    }\n    setToolEnabled(toolName) {\n        const toolInstance = this._toolInstances[toolName];\n        if (toolInstance === undefined) {\n            console.warn(`Tool ${toolName} not added to toolGroup, can't set tool mode.`);\n            return;\n        }\n        const toolOptions = {\n            bindings: [],\n            mode: Enabled,\n        };\n        this.toolOptions[toolName] = toolOptions;\n        toolInstance.mode = Enabled;\n        if (typeof toolInstance.onSetToolEnabled === 'function') {\n            toolInstance.onSetToolEnabled();\n        }\n        this._renderViewports();\n        this._triggerToolModeChangedEvent(toolName, Enabled);\n    }\n    setToolDisabled(toolName) {\n        const toolInstance = this._toolInstances[toolName];\n        if (toolInstance === undefined) {\n            console.warn(`Tool ${toolName} not added to toolGroup, can't set tool mode.`);\n            return;\n        }\n        const toolOptions = {\n            bindings: [],\n            mode: Disabled,\n        };\n        this.restoreToolOptions[toolName] = this.toolOptions[toolName];\n        this.toolOptions[toolName] = toolOptions;\n        toolInstance.mode = Disabled;\n        if (typeof toolInstance.onSetToolDisabled === 'function') {\n            toolInstance.onSetToolDisabled();\n        }\n        this._renderViewports();\n        this._triggerToolModeChangedEvent(toolName, Disabled);\n    }\n    getToolOptions(toolName) {\n        const toolOptionsForTool = this.toolOptions[toolName];\n        if (toolOptionsForTool === undefined) {\n            return;\n        }\n        return toolOptionsForTool;\n    }\n    getActivePrimaryMouseButtonTool() {\n        return Object.keys(this.toolOptions).find((toolName) => {\n            const toolOptions = this.toolOptions[toolName];\n            return (toolOptions.mode === Active &&\n                this._hasMousePrimaryButtonBinding(toolOptions));\n        });\n    }\n    setViewportsCursorByToolName(toolName, strategyName) {\n        const cursor = this._getCursor(toolName, strategyName);\n        this._setCursorForViewports(cursor);\n    }\n    _getCursor(toolName, strategyName) {\n        let cursorName;\n        let cursor;\n        if (strategyName) {\n            cursorName = `${toolName}.${strategyName}`;\n            cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n            if (cursor) {\n                return cursor;\n            }\n        }\n        cursorName = `${toolName}`;\n        cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n        if (cursor) {\n            return cursor;\n        }\n        cursorName = toolName;\n        cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n        if (cursor) {\n            return cursor;\n        }\n        return MouseCursor.getDefinedCursor('default');\n    }\n    _setCursorForViewports(cursor) {\n        const runtimeSettings = Settings.getRuntimeSettings();\n        if (!runtimeSettings.get('useCursors')) {\n            return;\n        }\n        this.viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (!enabledElement) {\n                return;\n            }\n            const { viewport } = enabledElement;\n            initElementCursor(viewport.element, cursor);\n        });\n    }\n    setToolConfiguration(toolName, configuration, overwrite) {\n        const toolInstance = this._toolInstances[toolName];\n        if (toolInstance === undefined) {\n            console.warn(`Tool ${toolName} not present, can't set tool configuration.`);\n            return false;\n        }\n        let _configuration;\n        if (overwrite) {\n            _configuration = configuration;\n        }\n        else {\n            _configuration = Object.assign(toolInstance.configuration, configuration);\n        }\n        toolInstance.configuration = _configuration;\n        if (typeof toolInstance.onSetToolConfiguration === 'function') {\n            toolInstance.onSetToolConfiguration();\n        }\n        this._renderViewports();\n        return true;\n    }\n    getDefaultMousePrimary() {\n        return MouseBindings.Primary;\n    }\n    getDefaultPrimaryBindings() {\n        return PRIMARY_BINDINGS;\n    }\n    getToolConfiguration(toolName, configurationPath) {\n        if (this._toolInstances[toolName] === undefined) {\n            console.warn(`Tool ${toolName} not present, can't set tool configuration.`);\n            return;\n        }\n        const _configuration = get(this._toolInstances[toolName].configuration, configurationPath) ||\n            this._toolInstances[toolName].configuration;\n        return utilities.deepClone(_configuration);\n    }\n    getPrevActivePrimaryToolName() {\n        return this.prevActivePrimaryToolName;\n    }\n    setActivePrimaryTool(toolName) {\n        const activeToolName = this.getCurrentActivePrimaryToolName();\n        this.setToolDisabled(activeToolName);\n        this.setToolActive(toolName, {\n            bindings: [{ mouseButton: MouseBindings.Primary }],\n        });\n    }\n    getCurrentActivePrimaryToolName() {\n        return this.currentActivePrimaryToolName;\n    }\n    clone(newToolGroupId, fnToolFilter = null) {\n        let toolGroup = getToolGroup(newToolGroupId);\n        if (toolGroup) {\n            console.debug(`ToolGroup ${newToolGroupId} already exists`);\n            return toolGroup;\n        }\n        toolGroup = new ToolGroup(newToolGroupId);\n        state.toolGroups.push(toolGroup);\n        fnToolFilter = fnToolFilter ?? (() => true);\n        Object.keys(this._toolInstances)\n            .filter(fnToolFilter)\n            .forEach((toolName) => {\n            const sourceToolInstance = this._toolInstances[toolName];\n            const sourceToolOptions = this.toolOptions[toolName];\n            const sourceToolMode = sourceToolInstance.mode;\n            toolGroup.addTool(toolName);\n            toolGroup.setToolMode(toolName, sourceToolMode, {\n                bindings: sourceToolOptions.bindings ?? [],\n            });\n        });\n        return toolGroup;\n    }\n    _hasMousePrimaryButtonBinding(toolOptions) {\n        const primaryBindings = this.getDefaultPrimaryBindings();\n        return toolOptions?.bindings?.some((binding) => primaryBindings.some((primary) => hasSameBinding(binding, primary)));\n    }\n    _renderViewports() {\n        this.viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n            getRenderingEngine(renderingEngineId).renderViewport(viewportId);\n        });\n    }\n    _triggerToolModeChangedEvent(toolName, mode, toolBindingsOptions) {\n        const eventDetail = {\n            toolGroupId: this.id,\n            toolName,\n            mode,\n            toolBindingsOptions,\n        };\n        triggerEvent(eventTarget, Events.TOOL_MODE_CHANGED, eventDetail);\n    }\n    _findRenderingEngine(viewportId, renderingEngineId) {\n        const renderingEngines = getRenderingEngines();\n        if (renderingEngines?.length === 0) {\n            throw new Error('No rendering engines found.');\n        }\n        if (renderingEngineId) {\n            return renderingEngineId;\n        }\n        const matchingEngines = renderingEngines.filter((engine) => engine.getViewport(viewportId));\n        if (matchingEngines.length === 0) {\n            if (renderingEngines.length === 1) {\n                return renderingEngines[0].id;\n            }\n            throw new Error('No rendering engines found that contain the viewport with the same viewportId, you must specify a renderingEngineId.');\n        }\n        if (matchingEngines.length > 1) {\n            throw new Error('Multiple rendering engines found that contain the viewport with the same viewportId, you must specify a renderingEngineId.');\n        }\n        return matchingEngines[0].id;\n    }\n}\nfunction hasSameBinding(binding1, binding2) {\n    if (binding1.mouseButton !== binding2.mouseButton) {\n        return false;\n    }\n    if (binding1.numTouchPoints !== binding2.numTouchPoints) {\n        return false;\n    }\n    return binding1.modifierKey === binding2.modifierKey;\n}\n","import { state } from '../state';\nimport ToolGroup from './ToolGroup';\nfunction createToolGroup(toolGroupId) {\n    const toolGroupWithIdExists = state.toolGroups.some((tg) => tg.id === toolGroupId);\n    if (toolGroupWithIdExists) {\n        console.warn(`'${toolGroupId}' already exists.`);\n        return;\n    }\n    const toolGroup = new ToolGroup(toolGroupId);\n    state.toolGroups.push(toolGroup);\n    return toolGroup;\n}\nexport default createToolGroup;\n","import { state } from '../state';\nfunction destroyToolGroup(toolGroupId) {\n    const toolGroupIndex = state.toolGroups.findIndex((tg) => tg.id === toolGroupId);\n    if (toolGroupIndex > -1) {\n        state.toolGroups.splice(toolGroupIndex, 1);\n    }\n}\nexport default destroyToolGroup;\n","import { state } from '../state';\nimport destroyToolGroup from './destroyToolGroup';\nfunction destroy() {\n    const toolGroups = [...state.toolGroups];\n    for (const toolGroup of toolGroups) {\n        destroyToolGroup(toolGroup.id);\n    }\n    state.toolGroups = [];\n}\nexport default destroy;\n","import { state } from '../state';\nfunction getAllToolGroups() {\n    return state.toolGroups;\n}\nexport default getAllToolGroups;\n","import { mouseEventListeners, wheelEventListener, touchEventListeners, keyEventListener, imageChangeEventListener, } from '../eventListeners';\nimport { imageRenderedEventDispatcher, cameraModifiedEventDispatcher, mouseToolEventDispatcher, touchToolEventDispatcher, keyboardToolEventDispatcher, imageSpacingCalibratedEventDispatcher, cameraResetEventDispatcher, } from '../eventDispatchers';\nimport { state } from './state';\nimport { annotationRenderingEngine } from '../stateManagement/annotation/AnnotationRenderingEngine';\nexport default function addEnabledElement(evt) {\n    const { element, viewportId } = evt.detail;\n    const svgLayer = _createSvgAnnotationLayer(viewportId);\n    _setSvgNodeCache(element);\n    _appendChild(svgLayer, element);\n    annotationRenderingEngine.addViewportElement(viewportId, element);\n    mouseEventListeners.enable(element);\n    wheelEventListener.enable(element);\n    touchEventListeners.enable(element);\n    keyEventListener.enable(element);\n    imageChangeEventListener.enable(element);\n    imageRenderedEventDispatcher.enable(element);\n    cameraModifiedEventDispatcher.enable(element);\n    imageSpacingCalibratedEventDispatcher.enable(element);\n    cameraResetEventDispatcher.enable(element);\n    mouseToolEventDispatcher.enable(element);\n    keyboardToolEventDispatcher.enable(element);\n    touchToolEventDispatcher.enable(element);\n    state.enabledElements.push(element);\n}\nfunction _createSvgAnnotationLayer(viewportId) {\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgLayer = document.createElementNS(svgns, 'svg');\n    const svgLayerId = `svg-layer-${viewportId}`;\n    svgLayer.classList.add('svg-layer');\n    svgLayer.setAttribute('id', svgLayerId);\n    svgLayer.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    svgLayer.style.width = '100%';\n    svgLayer.style.height = '100%';\n    svgLayer.style.pointerEvents = 'none';\n    svgLayer.style.position = 'absolute';\n    const defs = document.createElementNS(svgns, 'defs');\n    const filter = document.createElementNS(svgns, 'filter');\n    const feOffset = document.createElementNS(svgns, 'feOffset');\n    const feColorMatrix = document.createElementNS(svgns, 'feColorMatrix');\n    const feBlend = document.createElementNS(svgns, 'feBlend');\n    filter.setAttribute('id', `shadow-${svgLayerId}`);\n    filter.setAttribute('filterUnits', 'userSpaceOnUse');\n    feOffset.setAttribute('result', 'offOut');\n    feOffset.setAttribute('in', 'SourceGraphic');\n    feOffset.setAttribute('dx', '0.5');\n    feOffset.setAttribute('dy', '0.5');\n    feColorMatrix.setAttribute('result', 'matrixOut');\n    feColorMatrix.setAttribute('in', 'offOut');\n    feColorMatrix.setAttribute('in2', 'matrix');\n    feColorMatrix.setAttribute('values', '0.2 0 0 0 0 0 0.2 0 0 0 0 0 0.2 0 0 0 0 0 1 0');\n    feBlend.setAttribute('in', 'SourceGraphic');\n    feBlend.setAttribute('in2', 'matrixOut');\n    feBlend.setAttribute('mode', 'normal');\n    filter.appendChild(feOffset);\n    filter.appendChild(feColorMatrix);\n    filter.appendChild(feBlend);\n    defs.appendChild(filter);\n    svgLayer.appendChild(defs);\n    return svgLayer;\n}\nfunction _setSvgNodeCache(element) {\n    const { viewportUid: viewportId, renderingEngineUid: renderingEngineId } = element.dataset;\n    const elementHash = `${viewportId}:${renderingEngineId}`;\n    state.svgNodeCache[elementHash] = {};\n}\nfunction _appendChild(newNode, referenceNode) {\n    referenceNode.querySelector('div.viewport-element').appendChild(newNode);\n}\n","import { state } from './state';\nexport function addTool(ToolClass) {\n    const toolName = ToolClass.toolName;\n    if (!toolName) {\n        throw new Error(`No Tool Found for the ToolClass ${ToolClass.name}`);\n    }\n    if (!state.tools[toolName]) {\n        state.tools[toolName] = {\n            toolClass: ToolClass,\n        };\n    }\n}\nexport function hasTool(ToolClass) {\n    const toolName = ToolClass.toolName;\n    return !!(toolName && state.tools[toolName]);\n}\nexport function hasToolByName(toolName) {\n    return !!(toolName && state.tools[toolName]);\n}\nexport function removeTool(ToolClass) {\n    const toolName = ToolClass.toolName;\n    if (!toolName) {\n        throw new Error(`No tool found for: ${ToolClass.name}`);\n    }\n    if (!state.tools[toolName] !== undefined) {\n        delete state.tools[toolName];\n    }\n    else {\n        throw new Error(`${toolName} cannot be removed because it has not been added`);\n    }\n}\nexport default addTool;\n","import { ToolModes } from '../enums';\nimport getToolsWithModesForElement from '../utilities/getToolsWithModesForElement';\nimport filterToolsWithAnnotationsForElement from './filterToolsWithAnnotationsForElement';\nexport default function cancelActiveManipulations(element) {\n    const tools = getToolsWithModesForElement(element, [\n        ToolModes.Active,\n        ToolModes.Passive,\n    ]);\n    const toolsWithData = filterToolsWithAnnotationsForElement(element, tools);\n    for (const { tool } of toolsWithData) {\n        const annotationUID = tool.cancel(element);\n        if (annotationUID) {\n            return annotationUID;\n        }\n    }\n}\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { mouseEventListeners, wheelEventListener, touchEventListeners, keyEventListener, imageChangeEventListener, } from '../eventListeners';\nimport { imageRenderedEventDispatcher, cameraModifiedEventDispatcher, mouseToolEventDispatcher, keyboardToolEventDispatcher, imageSpacingCalibratedEventDispatcher, touchToolEventDispatcher, cameraResetEventDispatcher, } from '../eventDispatchers';\nimport filterToolsWithAnnotationsForElement from './filterToolsWithAnnotationsForElement';\nimport { state } from './state';\nimport getToolsWithModesForElement from '../utilities/getToolsWithModesForElement';\nimport { ToolModes } from '../enums';\nimport { removeAnnotation } from '../stateManagement';\nimport getSynchronizersForViewport from './SynchronizerManager/getSynchronizersForViewport';\nimport getToolGroupForViewport from './ToolGroupManager/getToolGroupForViewport';\nimport { annotationRenderingEngine } from '../stateManagement/annotation/AnnotationRenderingEngine';\nconst VIEWPORT_ELEMENT = 'viewport-element';\nfunction removeEnabledElement(elementDisabledEvt) {\n    const { element, viewportId } = elementDisabledEvt.detail;\n    _resetSvgNodeCache(element);\n    _removeSvgNode(element);\n    annotationRenderingEngine.removeViewportElement(viewportId, element);\n    mouseEventListeners.disable(element);\n    wheelEventListener.disable(element);\n    touchEventListeners.disable(element);\n    keyEventListener.disable(element);\n    imageChangeEventListener.disable(element);\n    imageRenderedEventDispatcher.disable(element);\n    cameraModifiedEventDispatcher.disable(element);\n    imageSpacingCalibratedEventDispatcher.disable(element);\n    cameraResetEventDispatcher.disable(element);\n    mouseToolEventDispatcher.disable(element);\n    keyboardToolEventDispatcher.disable(element);\n    touchToolEventDispatcher.disable(element);\n    _removeViewportFromSynchronizers(element);\n    _removeViewportFromToolGroup(element);\n    _removeEnabledElement(element);\n}\nconst _removeViewportFromSynchronizers = (element) => {\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        return;\n    }\n    const synchronizers = getSynchronizersForViewport(enabledElement.viewportId, enabledElement.renderingEngineId);\n    synchronizers.forEach((sync) => {\n        sync.remove(enabledElement);\n    });\n};\nconst _removeViewportFromToolGroup = (element) => {\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        return;\n    }\n    const { renderingEngineId, viewportId } = enabledElement;\n    const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n    if (toolGroup) {\n        toolGroup.removeViewports(renderingEngineId, viewportId);\n    }\n};\nconst _removeAllToolsForElement = function (element) {\n    const tools = getToolsWithModesForElement(element, [\n        ToolModes.Active,\n        ToolModes.Passive,\n    ]);\n    const toolsWithData = filterToolsWithAnnotationsForElement(element, tools);\n    toolsWithData.forEach(({ annotations }) => {\n        annotations.forEach((annotation) => {\n            removeAnnotation(annotation.annotationUID);\n        });\n    });\n};\nfunction _resetSvgNodeCache(element) {\n    const { viewportUid: viewportId, renderingEngineUid: renderingEngineId } = element.dataset;\n    const elementHash = `${viewportId}:${renderingEngineId}`;\n    delete state.svgNodeCache[elementHash];\n}\nfunction _removeSvgNode(element) {\n    const internalViewportNode = element.querySelector(`div.${VIEWPORT_ELEMENT}`);\n    const svgLayer = internalViewportNode.querySelector('svg');\n    if (svgLayer) {\n        internalViewportNode.removeChild(svgLayer);\n    }\n}\nconst _removeEnabledElement = function (element) {\n    const foundElementIndex = state.enabledElements.findIndex((el) => el === element);\n    if (foundElementIndex > -1) {\n        state.enabledElements.splice(foundElementIndex, 1);\n    }\n};\nexport default removeEnabledElement;\n","import svgNodeCache, { resetSvgNodeCache } from './svgNodeCache';\nconst defaultState = {\n    isInteractingWithTool: false,\n    isMultiPartToolActive: false,\n    tools: {},\n    toolGroups: [],\n    synchronizers: [],\n    svgNodeCache: svgNodeCache,\n    enabledElements: [],\n    handleRadius: 6,\n};\nlet state = {\n    isInteractingWithTool: false,\n    isMultiPartToolActive: false,\n    tools: {},\n    toolGroups: [],\n    synchronizers: [],\n    svgNodeCache: svgNodeCache,\n    enabledElements: [],\n    handleRadius: 6,\n};\nfunction resetCornerstoneToolsState() {\n    resetSvgNodeCache();\n    state = {\n        ...structuredClone({\n            ...defaultState,\n            svgNodeCache: {},\n        }),\n        svgNodeCache: {\n            ...defaultState.svgNodeCache,\n        },\n    };\n}\nexport { resetCornerstoneToolsState, state, state as default };\n","let svgNodeCache = {};\nexport function resetSvgNodeCache() {\n    svgNodeCache = {};\n}\nexport default svgNodeCache;\n","import { vec3 } from 'gl-matrix';\nexport default function areViewportsCoplanar(viewport1, viewport2) {\n    const { viewPlaneNormal: viewPlaneNormal1 } = viewport1.getCamera();\n    const { viewPlaneNormal: viewPlaneNormal2 } = viewport2.getCamera();\n    const dotProducts = vec3.dot(viewPlaneNormal1, viewPlaneNormal2);\n    return Math.abs(dotProducts) > 0.9;\n}\n","import { getRenderingEngine } from '@cornerstonejs/core';\nexport default function cameraSyncCallback(synchronizerInstance, sourceViewport, targetViewport, cameraModifiedEvent) {\n    const { camera } = cameraModifiedEvent.detail;\n    const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n    if (!renderingEngine) {\n        throw new Error(`No RenderingEngine for Id: ${targetViewport.renderingEngineId}`);\n    }\n    const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n    tViewport.setCamera(camera);\n    tViewport.render();\n}\n","import { vec3, mat4 } from 'gl-matrix';\nimport { getRenderingEngine, metaData, utilities, VolumeViewport, } from '@cornerstonejs/core';\nimport areViewportsCoplanar from './areViewportsCoplanar';\nconst getSpatialRegistration = (targetId, sourceId) => utilities.spatialRegistrationMetadataProvider.get('spatialRegistrationModule', targetId, sourceId);\nexport default async function imageSliceSyncCallback(synchronizerInstance, sourceViewport, targetViewport) {\n    const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n    if (!renderingEngine) {\n        throw new Error(`No RenderingEngine for Id: ${targetViewport.renderingEngineId}`);\n    }\n    const sViewport = renderingEngine.getViewport(sourceViewport.viewportId);\n    const options = synchronizerInstance.getOptions(targetViewport.viewportId);\n    if (options?.disabled) {\n        return;\n    }\n    const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n    const imageId1 = sViewport.getCurrentImageId();\n    const imagePlaneModule1 = metaData.get('imagePlaneModule', imageId1);\n    const sourceImagePositionPatient = imagePlaneModule1.imagePositionPatient;\n    const targetImageIds = tViewport.getImageIds();\n    if (!areViewportsCoplanar(sViewport, tViewport)) {\n        return;\n    }\n    let registrationMatrixMat4 = getSpatialRegistration(targetViewport.viewportId, sourceViewport.viewportId);\n    if (!registrationMatrixMat4) {\n        const frameOfReferenceUID1 = sViewport.getFrameOfReferenceUID();\n        const frameOfReferenceUID2 = tViewport.getFrameOfReferenceUID();\n        if (frameOfReferenceUID1 === frameOfReferenceUID2 &&\n            options?.useInitialPosition !== false) {\n            registrationMatrixMat4 = mat4.identity(mat4.create());\n        }\n        else {\n            utilities.calculateViewportsSpatialRegistration(sViewport, tViewport);\n            registrationMatrixMat4 = getSpatialRegistration(targetViewport.viewportId, sourceViewport.viewportId);\n        }\n        if (!registrationMatrixMat4) {\n            return;\n        }\n    }\n    const targetImagePositionPatientWithRegistrationMatrix = vec3.transformMat4(vec3.create(), sourceImagePositionPatient, registrationMatrixMat4);\n    const closestImageIdIndex2 = _getClosestImageIdIndex(targetImagePositionPatientWithRegistrationMatrix, targetImageIds);\n    let imageIndexToSet = closestImageIdIndex2.index;\n    if (tViewport instanceof VolumeViewport) {\n        imageIndexToSet = targetImageIds.length - closestImageIdIndex2.index - 1;\n    }\n    if (closestImageIdIndex2.index !== -1 &&\n        tViewport.getCurrentImageIdIndex() !== closestImageIdIndex2.index) {\n        await utilities.jumpToSlice(tViewport.element, {\n            imageIndex: imageIndexToSet,\n        });\n    }\n}\nfunction _getClosestImageIdIndex(targetPoint, imageIds) {\n    return imageIds.reduce((closestImageIdIndex, imageId, index) => {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n        const distance = vec3.distance(imagePositionPatient, targetPoint);\n        if (distance < closestImageIdIndex.distance) {\n            return {\n                distance,\n                index,\n            };\n        }\n        return closestImageIdIndex;\n    }, {\n        distance: Infinity,\n        index: -1,\n    });\n}\n","import { getRenderingEngine } from '@cornerstonejs/core';\nexport default function presentationViewSyncCallback(_synchronizerInstance, sourceViewport, targetViewport, _sourceEvent, options) {\n    const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n    if (!renderingEngine) {\n        throw new Error(`No RenderingEngine for Id: ${targetViewport.renderingEngineId}`);\n    }\n    const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n    const sViewport = renderingEngine.getViewport(sourceViewport.viewportId);\n    const presentationView = sViewport.getViewPresentation(options);\n    tViewport.setViewPresentation(presentationView);\n    tViewport.render();\n}\n","import { getRenderingEngine } from '@cornerstonejs/core';\nexport default function slabThicknessSyncCallback(_synchronizerInstance, sourceViewport, targetViewport) {\n    const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n    if (!renderingEngine) {\n        throw new Error(`No RenderingEngine for Id: ${targetViewport.renderingEngineId}`);\n    }\n    const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n    const sViewport = renderingEngine.getViewport(sourceViewport.viewportId);\n    const slabThickness = sViewport.getSlabThickness?.();\n    if (!slabThickness) {\n        return;\n    }\n    tViewport.setSlabThickness?.(slabThickness);\n    tViewport.render();\n}\n","import { BaseVolumeViewport, getRenderingEngine, StackViewport, } from '@cornerstonejs/core';\nexport default function voiSyncCallback(synchronizerInstance, sourceViewport, targetViewport, modifiedEvent, options) {\n    const eventDetail = modifiedEvent.detail;\n    const { volumeId, range, invertStateChanged, invert, colormap } = eventDetail;\n    const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n    if (!renderingEngine) {\n        throw new Error(`Rendering Engine does not exist: ${targetViewport.renderingEngineId}`);\n    }\n    const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n    const tProperties = {\n        voiRange: range,\n    };\n    if (options?.syncInvertState && invertStateChanged) {\n        tProperties.invert = invert;\n    }\n    if (options?.syncColormap && colormap) {\n        tProperties.colormap = colormap;\n    }\n    if (tViewport instanceof BaseVolumeViewport) {\n        const isFusion = tViewport._actors && tViewport._actors.size > 1;\n        if (isFusion) {\n            tViewport.setProperties(tProperties, volumeId);\n        }\n        else {\n            tViewport.setProperties(tProperties);\n        }\n    }\n    else if (tViewport instanceof StackViewport) {\n        tViewport.setProperties(tProperties);\n    }\n    else {\n        throw new Error('Viewport type not supported.');\n    }\n    tViewport.render();\n}\n","import { getRenderingEngine } from '@cornerstonejs/core';\nexport default function zoomPanSyncCallback(synchronizerInstance, sourceViewport, targetViewport) {\n    const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n    if (!renderingEngine) {\n        throw new Error(`No RenderingEngine for Id: ${targetViewport.renderingEngineId}`);\n    }\n    const options = synchronizerInstance.getOptions(targetViewport.viewportId);\n    const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n    const sViewport = renderingEngine.getViewport(sourceViewport.viewportId);\n    if (options?.syncZoom !== false) {\n        const srcZoom = sViewport.getZoom();\n        tViewport.setZoom(srcZoom);\n    }\n    if (options?.syncPan !== false) {\n        const srcPan = sViewport.getPan();\n        tViewport.setPan(srcPan);\n    }\n    tViewport.render();\n}\n","import createCameraPositionSynchronizer from './synchronizers/createCameraPositionSynchronizer';\nimport createPresentationViewSynchronizer from './synchronizers/createPresentationViewSynchronizer';\nimport createVOISynchronizer from './synchronizers/createVOISynchronizer';\nimport createZoomPanSynchronizer from './synchronizers/createZoomPanSynchronizer';\nimport createImageSliceSynchronizer from './synchronizers/createImageSliceSynchronizer';\nimport createSlabThicknessSynchronizer from './synchronizers/createSlabThicknessSynchronizer';\nconst createStackImageSynchronizer = createImageSliceSynchronizer;\nexport { createCameraPositionSynchronizer, createPresentationViewSynchronizer, createVOISynchronizer, createZoomPanSynchronizer, createImageSliceSynchronizer, createStackImageSynchronizer, createSlabThicknessSynchronizer, };\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport cameraSyncCallback from '../callbacks/cameraSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createCameraPositionSynchronizer(synchronizerName) {\n    const cameraPositionSynchronizer = createSynchronizer(synchronizerName, CAMERA_MODIFIED, cameraSyncCallback);\n    return cameraPositionSynchronizer;\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport imageSliceSyncCallback from '../callbacks/imageSliceSyncCallback';\nconst { STACK_NEW_IMAGE, VOLUME_NEW_IMAGE } = Enums.Events;\nexport default function createImageSliceSynchronizer(synchronizerName) {\n    const stackImageSynchronizer = createSynchronizer(synchronizerName, STACK_NEW_IMAGE, imageSliceSyncCallback, {\n        auxiliaryEvents: [\n            {\n                name: 'VOLUME_NEW_IMAGE',\n            },\n        ],\n    });\n    return stackImageSynchronizer;\n}\n","import { Enums } from '@cornerstonejs/core';\nimport { createSynchronizer } from '../../store/SynchronizerManager';\nimport presentationViewSyncCallback from '../callbacks/presentationViewSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createPresentationViewSynchronizer(synchronizerName, options) {\n    const presentationView = createSynchronizer(synchronizerName, CAMERA_MODIFIED, presentationViewSyncCallback, { viewPresentation: options });\n    return presentationView;\n}\n","import { Enums } from '@cornerstonejs/core';\nimport { createSynchronizer } from '../../store/SynchronizerManager';\nimport slabThicknessSyncCallback from '../callbacks/slabThicknessSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createPresentationViewSynchronizer(synchronizerName) {\n    const presentationView = createSynchronizer(synchronizerName, CAMERA_MODIFIED, slabThicknessSyncCallback);\n    return presentationView;\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport voiSyncCallback from '../callbacks/voiSyncCallback';\nexport default function createVOISynchronizer(synchronizerName, options) {\n    options = Object.assign({ syncInvertState: true, syncColormap: true }, options);\n    const VOISynchronizer = createSynchronizer(synchronizerName, Enums.Events.VOI_MODIFIED, voiSyncCallback, {\n        auxiliaryEvents: [\n            {\n                name: Enums.Events.COLORMAP_MODIFIED,\n            },\n        ],\n        ...options,\n    });\n    return VOISynchronizer;\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport zoomPanSyncCallback from '../callbacks/zoomPanSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createZoomPanSynchronizer(synchronizerName) {\n    const zoomPanSynchronizer = createSynchronizer(synchronizerName, CAMERA_MODIFIED, zoomPanSyncCallback);\n    return zoomPanSynchronizer;\n}\n","import { AnnotationTool } from './base';\nimport { getEnabledElement, utilities as csUtils, eventTarget, Enums, getRenderingEngine, CONSTANTS, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { addAnnotation, getAllAnnotations, getAnnotations, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted } from '../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events, MouseBindings, KeyboardBindings, Events as cstEvents, SegmentationRepresentations, ToolModes, } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { getCanvasCircleRadius } from '../utilities/math/circle';\nimport { vec2, vec3 } from 'gl-matrix';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nimport debounce from '../utilities/debounce';\nimport { distanceToPoint } from '../utilities/math/point';\nimport { addSegmentationRepresentations } from '../stateManagement/segmentation';\nconst MAGNIFY_CLASSNAME = 'advancedMagnifyTool';\nconst MAGNIFY_VIEWPORT_INITIAL_RADIUS = 125;\nconst { Events: csEvents } = Enums;\nconst isSegmentation = (actor) => actor.uid !== actor.referencedId;\nvar AdvancedMagnifyToolActions;\n(function (AdvancedMagnifyToolActions) {\n    AdvancedMagnifyToolActions[\"ShowZoomFactorsList\"] = \"showZoomFactorsList\";\n})(AdvancedMagnifyToolActions || (AdvancedMagnifyToolActions = {}));\nconst ADVANCED_MAGNIFY_TOOL_NAME = 'AdvancedMagnify';\nconst PARALLEL_THRESHOLD = 1 - CONSTANTS.EPSILON;\nclass AdvancedMagnifyTool extends AnnotationTool {\n    static { this.Actions = AdvancedMagnifyToolActions; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            magnifyingGlass: {\n                radius: 125,\n                zoomFactor: 3,\n                zoomFactorList: [1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5],\n                autoPan: {\n                    enabled: true,\n                    padding: 10,\n                },\n            },\n            actions: {\n                showZoomFactorsList: {\n                    method: 'showZoomFactorsList',\n                    bindings: [\n                        {\n                            mouseButton: MouseBindings.Secondary,\n                            modifierKey: KeyboardBindings.Shift,\n                        },\n                    ],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const { magnifyingGlass: config } = this.configuration;\n            const { radius, zoomFactor, autoPan } = config;\n            const canvasHandlePoints = this._getCanvasHandlePoints(canvasPos, radius);\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotationUID = csUtils.uuidv4();\n            const magnifyViewportId = csUtils.uuidv4();\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                annotationUID,\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    sourceViewportId: viewport.id,\n                    magnifyViewportId,\n                    zoomFactor,\n                    isCanvasAnnotation: true,\n                    handles: {\n                        points: canvasHandlePoints,\n                        activeHandleIndex: null,\n                    },\n                },\n            };\n            this.magnifyViewportManager.createViewport(annotation, {\n                magnifyViewportId,\n                sourceEnabledElement: enabledElement,\n                position: canvasPos,\n                radius,\n                zoomFactor,\n                autoPan: {\n                    enabled: autoPan.enabled,\n                    padding: autoPan.padding,\n                    callback: (data) => {\n                        const annotationPoints = annotation.data.handles.points;\n                        const { canvas: canvasDelta } = data.delta;\n                        for (let i = 0, len = annotationPoints.length; i < len; i++) {\n                            const point = annotationPoints[i];\n                            point[0] += canvasDelta[0];\n                            point[1] += canvasDelta[1];\n                            annotation.invalidated = true;\n                        }\n                    },\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.onSetToolDisabled = () => {\n            this.magnifyViewportManager.dispose();\n            const annotations = getAllAnnotations();\n            annotations.forEach((annotation) => {\n                if (annotation.metadata.toolName === this.getToolName()) {\n                    removeAnnotation(annotation.annotationUID);\n                }\n            });\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points;\n            const canvasTop = canvasCoordinates[0];\n            const canvasBottom = canvasCoordinates[2];\n            const canvasLeft = canvasCoordinates[3];\n            const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n            const center = [\n                canvasLeft[0] + radius,\n                canvasTop[1] + radius,\n            ];\n            const radiusPoint = getCanvasCircleRadius([center, canvasCoords]);\n            if (Math.abs(radiusPoint - radius) < proximity * 2) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            const { points } = data.handles;\n            const handleIndex = points.findIndex((p) => p === handle);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { deltaPoints } = eventDetail;\n            const canvasDelta = deltaPoints?.canvas ?? [0, 0, 0];\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { points } = annotation.data.handles;\n            points.forEach((point) => {\n                point[0] += canvasDelta[0];\n                point[1] += canvasDelta[1];\n            });\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n            const { data } = annotation;\n            if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const canvasDelta = deltaPoints.canvas;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += canvasDelta[0];\n                    point[1] += canvasDelta[1];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragHandle(evt);\n                annotation.invalidated = true;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { annotation } = this.editData;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points;\n            const canvasTop = canvasCoordinates[0];\n            const canvasBottom = canvasCoordinates[2];\n            const canvasLeft = canvasCoordinates[3];\n            const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n            const canvasCenter = [\n                canvasLeft[0] + radius,\n                canvasTop[1] + radius,\n            ];\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const newRadius = getCanvasCircleRadius([\n                canvasCenter,\n                currentCanvasPoints,\n            ]);\n            const newCanvasHandlePoints = this._getCanvasHandlePoints(canvasCenter, newRadius);\n            points[0] = newCanvasHandlePoints[0];\n            points[1] = newCanvasHandlePoints[1];\n            points[2] = newCanvasHandlePoints[2];\n            points[3] = newCanvasHandlePoints[3];\n        };\n        this.cancel = (element) => {\n            if (!this.isDrawing) {\n                return;\n            }\n            this.isDrawing = false;\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            return annotation.annotationUID;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = annotations?.filter((annotation) => annotation.data.sourceViewportId ===\n                viewport.id);\n            const filteredAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!filteredAnnotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < filteredAnnotations.length; i++) {\n                const annotation = filteredAnnotations[i];\n                const { annotationUID, data } = annotation;\n                const { magnifyViewportId, zoomFactor, handles } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const canvasCoordinates = points;\n                const canvasTop = canvasCoordinates[0];\n                const canvasBottom = canvasCoordinates[2];\n                const canvasLeft = canvasCoordinates[3];\n                const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n                const center = [\n                    canvasLeft[0] + radius,\n                    canvasTop[1] + radius,\n                ];\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-advancedMagnify`;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                    color,\n                    lineWidth: 5,\n                }, dataId);\n                const magnifyViewport = this.magnifyViewportManager.getViewport(magnifyViewportId);\n                magnifyViewport.position = center;\n                magnifyViewport.radius = radius;\n                magnifyViewport.zoomFactor = zoomFactor;\n                magnifyViewport.update();\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n        this._getCanvasHandlePoints = (canvasCenterPos, canvasRadius) => {\n            return [\n                [canvasCenterPos[0], canvasCenterPos[1] - canvasRadius, 0],\n                [canvasCenterPos[0] + canvasRadius, canvasCenterPos[1], 0],\n                [canvasCenterPos[0], canvasCenterPos[1] + canvasRadius, 0],\n                [canvasCenterPos[0] - canvasRadius, canvasCenterPos[1], 0],\n            ];\n        };\n        this.magnifyViewportManager = AdvancedMagnifyViewportManager.getInstance();\n    }\n    showZoomFactorsList(evt, annotation) {\n        const { element, currentPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { canvas: canvasPoint } = currentPoints;\n        const viewportElement = element.querySelector(':scope .viewport-element');\n        const currentZoomFactor = annotation.data.zoomFactor;\n        const remove = () => dropdown.parentElement.removeChild(dropdown);\n        const dropdown = this._getZoomFactorsListDropdown(currentZoomFactor, (newZoomFactor) => {\n            if (newZoomFactor !== undefined) {\n                annotation.data.zoomFactor = Number.parseFloat(newZoomFactor);\n                annotation.invalidated = true;\n            }\n            remove();\n            viewport.render();\n        });\n        Object.assign(dropdown.style, {\n            left: `${canvasPoint[0]}px`,\n            top: `${canvasPoint[1]}px`,\n        });\n        viewportElement.appendChild(dropdown);\n        dropdown.focus();\n    }\n    _getZoomFactorsListDropdown(currentZoomFactor, onChangeCallback) {\n        const { zoomFactorList } = this.configuration.magnifyingGlass;\n        const dropdown = document.createElement('select');\n        dropdown.size = 5;\n        Object.assign(dropdown.style, {\n            width: '50px',\n            position: 'absolute',\n        });\n        ['mousedown', 'mouseup', 'mousemove', 'click'].forEach((eventName) => {\n            dropdown.addEventListener(eventName, (evt) => evt.stopPropagation());\n        });\n        dropdown.addEventListener('change', (evt) => {\n            evt.stopPropagation();\n            onChangeCallback(dropdown.value);\n        });\n        dropdown.addEventListener('keydown', (evt) => {\n            const shouldCancel = (evt.keyCode ?? evt.which === 27) ||\n                evt.key?.toLowerCase() === 'escape';\n            if (shouldCancel) {\n                evt.stopPropagation();\n                onChangeCallback();\n            }\n        });\n        zoomFactorList.forEach((zoomFactor) => {\n            const option = document.createElement('option');\n            option.label = zoomFactor;\n            option.title = `Zoom factor ${zoomFactor.toFixed(1)}`;\n            option.value = zoomFactor;\n            option.defaultSelected = zoomFactor === currentZoomFactor;\n            dropdown.add(option);\n        });\n        return dropdown;\n    }\n}\nclass AdvancedMagnifyViewportManager {\n    constructor() {\n        this.createViewport = (annotation, viewportInfo) => {\n            const { magnifyViewportId, sourceEnabledElement, position, radius, zoomFactor, autoPan, } = viewportInfo;\n            const { viewport: sourceViewport } = sourceEnabledElement;\n            const { element: sourceElement } = sourceViewport;\n            const magnifyViewport = new AdvancedMagnifyViewport({\n                magnifyViewportId,\n                sourceEnabledElement,\n                radius,\n                position,\n                zoomFactor,\n                autoPan,\n            });\n            this._addSourceElementEventListener(sourceElement);\n            this._magnifyViewportsMap.set(magnifyViewport.viewportId, {\n                annotation,\n                magnifyViewport,\n                magnifyViewportInfo: viewportInfo,\n            });\n            return magnifyViewport;\n        };\n        this._annotationRemovedCallback = (evt) => {\n            const { annotation } = evt.detail;\n            if (annotation.metadata.toolName !== ADVANCED_MAGNIFY_TOOL_NAME) {\n                return;\n            }\n            this.destroyViewport(annotation.data.magnifyViewportId);\n        };\n        this._newStackImageCallback = (evt) => {\n            const { viewportId: sourceViewportId, imageId } = evt.detail;\n            const magnifyViewportsMapEntries = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n            const { viewport } = getEnabledElementByViewportId(sourceViewportId);\n            if (viewport.stackActorReInitialized) {\n                this._reset(sourceViewportId);\n            }\n            magnifyViewportsMapEntries.forEach(({ annotation }) => {\n                annotation.metadata.referencedImageId = imageId;\n                annotation.invalidated = true;\n            });\n        };\n        this._newVolumeImageCallback = (evt) => {\n            const { renderingEngineId, viewportId: sourceViewportId } = evt.detail;\n            const renderingEngine = getRenderingEngine(renderingEngineId);\n            const sourceViewport = renderingEngine.getViewport(sourceViewportId);\n            const { viewPlaneNormal: currentViewPlaneNormal } = sourceViewport.getCamera();\n            const magnifyViewportsMapEntries = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n            magnifyViewportsMapEntries.forEach(({ annotation }) => {\n                const { viewPlaneNormal } = annotation.metadata;\n                const isParallel = Math.abs(vec3.dot(viewPlaneNormal, currentViewPlaneNormal)) >\n                    PARALLEL_THRESHOLD;\n                if (!isParallel) {\n                    return;\n                }\n                const { handles } = annotation.data;\n                const worldImagePlanePoint = sourceViewport.canvasToWorld([0, 0]);\n                const vecHandleToImagePlane = vec3.sub(vec3.create(), worldImagePlanePoint, handles.points[0]);\n                const worldDist = vec3.dot(vecHandleToImagePlane, currentViewPlaneNormal);\n                const worldDelta = vec3.scale(vec3.create(), currentViewPlaneNormal, worldDist);\n                for (let i = 0, len = handles.points.length; i < len; i++) {\n                    const point = handles.points[i];\n                    point[0] += worldDelta[0];\n                    point[1] += worldDelta[1];\n                    point[2] += worldDelta[2];\n                }\n                annotation.invalidated = true;\n            });\n        };\n        this._magnifyViewportsMap = new Map();\n        this._initialize();\n    }\n    static getInstance() {\n        AdvancedMagnifyViewportManager._singleton =\n            AdvancedMagnifyViewportManager._singleton ??\n                new AdvancedMagnifyViewportManager();\n        return AdvancedMagnifyViewportManager._singleton;\n    }\n    getViewport(magnifyViewportId) {\n        return this._magnifyViewportsMap.get(magnifyViewportId)?.magnifyViewport;\n    }\n    dispose() {\n        this._removeEventListeners();\n        this._destroyViewports();\n    }\n    destroyViewport(magnifyViewportId) {\n        const magnifyViewportMapEntry = this._magnifyViewportsMap.get(magnifyViewportId);\n        if (magnifyViewportMapEntry) {\n            const { magnifyViewport } = magnifyViewportMapEntry;\n            const { viewport: sourceViewport } = magnifyViewport.sourceEnabledElement;\n            const { element: sourceElement } = sourceViewport;\n            this._removeSourceElementEventListener(sourceElement);\n            magnifyViewport.dispose();\n            this._magnifyViewportsMap.delete(magnifyViewportId);\n        }\n    }\n    _destroyViewports() {\n        const magnifyViewportIds = Array.from(this._magnifyViewportsMap.keys());\n        magnifyViewportIds.forEach((magnifyViewportId) => this.destroyViewport(magnifyViewportId));\n    }\n    _getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId) {\n        const magnifyViewportsMapEntries = Array.from(this._magnifyViewportsMap.values());\n        return magnifyViewportsMapEntries.filter(({ magnifyViewport }) => {\n            const { viewport } = magnifyViewport.sourceEnabledElement;\n            return viewport.id === sourceViewportId;\n        });\n    }\n    _reset(sourceViewportId) {\n        const magnifyViewports = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n        magnifyViewports.forEach(({ magnifyViewport, annotation, magnifyViewportInfo }) => {\n            this.destroyViewport(magnifyViewport.viewportId);\n            const newEnabledElement = getEnabledElementByViewportId(sourceViewportId);\n            this.createViewport(annotation, {\n                ...magnifyViewportInfo,\n                sourceEnabledElement: {\n                    ...newEnabledElement,\n                },\n            });\n        });\n    }\n    _addEventListeners() {\n        eventTarget.addEventListener(cstEvents.ANNOTATION_REMOVED, this._annotationRemovedCallback);\n    }\n    _removeEventListeners() {\n        eventTarget.removeEventListener(cstEvents.ANNOTATION_REMOVED, this._annotationRemovedCallback);\n    }\n    _addSourceElementEventListener(element) {\n        element.addEventListener(csEvents.STACK_NEW_IMAGE, this._newStackImageCallback);\n        const newStackHandler = (evt) => {\n            const { viewportId: sourceViewportId } = evt.detail;\n            this._reset(sourceViewportId);\n        };\n        element.addEventListener(csEvents.VIEWPORT_NEW_IMAGE_SET, newStackHandler);\n        const newVolumeHandler = (evt) => {\n            const { viewportId: sourceViewportId } = evt.detail;\n            this._reset(sourceViewportId);\n        };\n        element.addEventListener(csEvents.VOLUME_VIEWPORT_NEW_VOLUME, newVolumeHandler);\n        element.addEventListener(csEvents.VOLUME_NEW_IMAGE, this._newVolumeImageCallback);\n        element.newStackHandler = newStackHandler;\n        element.newVolumeHandler = newVolumeHandler;\n    }\n    _removeSourceElementEventListener(element) {\n        element.removeEventListener(csEvents.STACK_NEW_IMAGE, this._newStackImageCallback);\n        element.removeEventListener(csEvents.VOLUME_NEW_IMAGE, this._newVolumeImageCallback);\n        element.removeEventListener(csEvents.VIEWPORT_NEW_IMAGE_SET, element.newStackHandler);\n        element.removeEventListener(csEvents.VOLUME_VIEWPORT_NEW_VOLUME, element.newVolumeHandler);\n        delete element.newStackHandler;\n        delete element.newVolumeHandler;\n    }\n    _initialize() {\n        this._addEventListeners();\n    }\n}\nclass AdvancedMagnifyViewport {\n    constructor({ magnifyViewportId, sourceEnabledElement, radius = MAGNIFY_VIEWPORT_INITIAL_RADIUS, position = [0, 0], zoomFactor, autoPan, }) {\n        this._enabledElement = null;\n        this._sourceToolGroup = null;\n        this._magnifyToolGroup = null;\n        this._isViewportReady = false;\n        this._radius = 0;\n        this._resized = false;\n        this._canAutoPan = false;\n        this._viewportId = magnifyViewportId ?? csUtils.uuidv4();\n        this._sourceEnabledElement = sourceEnabledElement;\n        this._autoPan = autoPan;\n        this.radius = radius;\n        this.position = position;\n        this.zoomFactor = zoomFactor;\n        this.visible = true;\n        this._browserMouseDownCallback = this._browserMouseDownCallback.bind(this);\n        this._browserMouseUpCallback = this._browserMouseUpCallback.bind(this);\n        this._handleToolModeChanged = this._handleToolModeChanged.bind(this);\n        this._mouseDragCallback = this._mouseDragCallback.bind(this);\n        this._resizeViewportAsync = (debounce(this._resizeViewport.bind(this), 1));\n        this._initialize();\n    }\n    get sourceEnabledElement() {\n        return this._sourceEnabledElement;\n    }\n    get viewportId() {\n        return this._viewportId;\n    }\n    get radius() {\n        return this._radius;\n    }\n    set radius(radius) {\n        if (Math.abs(this._radius - radius) > 0.00001) {\n            this._radius = radius;\n            this._resized = true;\n        }\n    }\n    update() {\n        const { radius, position, visible } = this;\n        const { viewport } = this._enabledElement;\n        const { element } = viewport;\n        const size = 2 * radius;\n        const [x, y] = position;\n        if (this._resized) {\n            this._resizeViewportAsync();\n            this._resized = false;\n        }\n        Object.assign(element.style, {\n            display: visible ? 'block' : 'hidden',\n            width: `${size}px`,\n            height: `${size}px`,\n            left: `${-radius}px`,\n            top: `${-radius}px`,\n            transform: `translate(${x}px, ${y}px)`,\n        });\n        if (this._isViewportReady) {\n            this._syncViewports();\n            viewport.render();\n        }\n    }\n    dispose() {\n        const { viewport } = this._enabledElement;\n        const { element } = viewport;\n        const renderingEngine = viewport.getRenderingEngine();\n        this._removeEventListeners(element);\n        renderingEngine.disableElement(viewport.id);\n        if (element.parentNode) {\n            element.parentNode.removeChild(element);\n        }\n    }\n    _handleToolModeChanged(evt) {\n        const { _magnifyToolGroup: magnifyToolGroup } = this;\n        const { toolGroupId, toolName, mode, toolBindingsOptions } = evt.detail;\n        if (this._sourceToolGroup?.id !== toolGroupId) {\n            return;\n        }\n        switch (mode) {\n            case ToolModes.Active:\n                magnifyToolGroup.setToolActive(toolName, toolBindingsOptions);\n                break;\n            case ToolModes.Passive:\n                magnifyToolGroup.setToolPassive(toolName);\n                break;\n            case ToolModes.Enabled:\n                magnifyToolGroup.setToolEnabled(toolName);\n                break;\n            case ToolModes.Disabled:\n                magnifyToolGroup.setToolDisabled(toolName);\n                break;\n            default:\n                throw new Error(`Unknow tool mode (${mode})`);\n        }\n    }\n    _inheritBorderRadius(magnifyElement) {\n        const viewport = magnifyElement.querySelector('.viewport-element');\n        const canvas = magnifyElement.querySelector('.cornerstone-canvas');\n        viewport.style.borderRadius = 'inherit';\n        canvas.style.borderRadius = 'inherit';\n    }\n    _createViewportNode() {\n        const magnifyElement = document.createElement('div');\n        const { radius } = this;\n        const size = radius * 2;\n        magnifyElement.classList.add(MAGNIFY_CLASSNAME);\n        Object.assign(magnifyElement.style, {\n            display: 'block',\n            width: `${size}px`,\n            height: `${size}px`,\n            position: 'absolute',\n            overflow: 'hidden',\n            borderRadius: '50%',\n            boxSizing: 'border-box',\n            left: `${-radius}px`,\n            top: `${-radius}px`,\n            transform: `translate(-1000px, -1000px)`,\n        });\n        return magnifyElement;\n    }\n    _convertZoomFactorToParallelScale(viewport, magnifyViewport, zoomFactor) {\n        const { parallelScale } = viewport.getCamera();\n        const canvasRatio = magnifyViewport.canvas.offsetWidth / viewport.canvas.offsetWidth;\n        return parallelScale * (1 / zoomFactor) * canvasRatio;\n    }\n    _isStackViewport(viewport) {\n        return 'setStack' in viewport;\n    }\n    _isVolumeViewport(viewport) {\n        return 'addVolumes' in viewport;\n    }\n    _cloneToolGroups(sourceViewport, magnifyViewport) {\n        const sourceActors = sourceViewport.getActors();\n        const magnifyToolGroupId = `${magnifyViewport.id}-toolGroup`;\n        const sourceToolGroup = getToolGroupForViewport(sourceViewport.id, sourceViewport.renderingEngineId);\n        const magnifyToolGroup = sourceToolGroup.clone(magnifyToolGroupId, (toolName) => {\n            const toolInstance = sourceToolGroup.getToolInstance(toolName);\n            const isAnnotationTool = toolInstance instanceof AnnotationTool &&\n                !(toolInstance instanceof AdvancedMagnifyTool);\n            return isAnnotationTool;\n        });\n        magnifyToolGroup.addViewport(magnifyViewport.id, magnifyViewport.renderingEngineId);\n        sourceActors.filter(isSegmentation).forEach((actor) => {\n            addSegmentationRepresentations(this.viewportId, [\n                {\n                    segmentationId: actor.referencedId,\n                    type: SegmentationRepresentations.Labelmap,\n                },\n            ]);\n        });\n        return { sourceToolGroup, magnifyToolGroup };\n    }\n    _cloneStack(sourceViewport, magnifyViewport) {\n        const imageIds = sourceViewport.getImageIds();\n        magnifyViewport.setStack(imageIds).then(() => {\n            this._isViewportReady = true;\n            this.update();\n        });\n    }\n    _cloneVolumes(sourceViewport, magnifyViewport) {\n        const actors = sourceViewport.getActors();\n        const volumeInputArray = actors\n            .filter((actor) => !isSegmentation(actor))\n            .map((actor) => ({ volumeId: actor.uid }));\n        magnifyViewport.setVolumes(volumeInputArray).then(() => {\n            this._isViewportReady = true;\n            this.update();\n        });\n        return magnifyViewport;\n    }\n    _cloneViewport(sourceViewport, magnifyElement) {\n        const { viewportId: magnifyViewportId } = this;\n        const renderingEngine = sourceViewport.getRenderingEngine();\n        const { options: sourceViewportOptions } = sourceViewport;\n        const viewportInput = {\n            element: magnifyElement,\n            viewportId: magnifyViewportId,\n            type: sourceViewport.type,\n            defaultOptions: { ...sourceViewportOptions },\n        };\n        renderingEngine.enableElement(viewportInput);\n        const magnifyViewport = (renderingEngine.getViewport(magnifyViewportId));\n        if (this._isStackViewport(sourceViewport)) {\n            this._cloneStack(sourceViewport, magnifyViewport);\n        }\n        else if (this._isVolumeViewport(sourceViewport)) {\n            this._cloneVolumes(sourceViewport, magnifyViewport);\n        }\n        this._inheritBorderRadius(magnifyElement);\n        const toolGroups = this._cloneToolGroups(sourceViewport, magnifyViewport);\n        this._sourceToolGroup = toolGroups.sourceToolGroup;\n        this._magnifyToolGroup = toolGroups.magnifyToolGroup;\n    }\n    _cancelMouseEventCallback(evt) {\n        evt.stopPropagation();\n        evt.preventDefault();\n    }\n    _browserMouseUpCallback(evt) {\n        const { element } = this._enabledElement.viewport;\n        document.removeEventListener('mouseup', this._browserMouseUpCallback);\n        element.addEventListener('mouseup', this._cancelMouseEventCallback);\n        element.addEventListener('mousemove', this._cancelMouseEventCallback);\n    }\n    _browserMouseDownCallback(evt) {\n        const { element } = this._enabledElement.viewport;\n        this._canAutoPan = !!evt.target?.closest('.advancedMagnifyTool');\n        document.addEventListener('mouseup', this._browserMouseUpCallback);\n        element.removeEventListener('mouseup', this._cancelMouseEventCallback);\n        element.removeEventListener('mousemove', this._cancelMouseEventCallback);\n    }\n    _mouseDragCallback(evt) {\n        if (!state.isInteractingWithTool) {\n            return;\n        }\n        const { _autoPan: autoPan } = this;\n        if (!autoPan.enabled || !this._canAutoPan) {\n            return;\n        }\n        const { currentPoints } = evt.detail;\n        const { viewport } = this._enabledElement;\n        const { canvasToWorld } = viewport;\n        const { canvas: canvasCurrent } = currentPoints;\n        const { radius: magnifyRadius } = this;\n        const canvasCenter = [magnifyRadius, magnifyRadius];\n        const dist = distanceToPoint(canvasCenter, canvasCurrent);\n        const maxDist = magnifyRadius - autoPan.padding;\n        if (dist <= maxDist) {\n            return;\n        }\n        const panDist = dist - maxDist;\n        const canvasDeltaPos = vec2.sub(vec2.create(), canvasCurrent, canvasCenter);\n        vec2.normalize(canvasDeltaPos, canvasDeltaPos);\n        vec2.scale(canvasDeltaPos, canvasDeltaPos, panDist);\n        const newCanvasPosition = vec2.add(vec2.create(), this.position, canvasDeltaPos);\n        const currentWorldPos = canvasToWorld(this.position);\n        const newWorldPos = canvasToWorld(newCanvasPosition);\n        const worldDeltaPos = vec3.sub(vec3.create(), newWorldPos, currentWorldPos);\n        const autoPanCallbackData = {\n            points: {\n                currentPosition: {\n                    canvas: this.position,\n                    world: currentWorldPos,\n                },\n                newPosition: {\n                    canvas: newCanvasPosition,\n                    world: newWorldPos,\n                },\n            },\n            delta: {\n                canvas: canvasDeltaPos,\n                world: worldDeltaPos,\n            },\n        };\n        autoPan.callback(autoPanCallbackData);\n    }\n    _addBrowserEventListeners(element) {\n        document.addEventListener('mousedown', this._browserMouseDownCallback, true);\n        element.addEventListener('mousedown', this._cancelMouseEventCallback);\n        element.addEventListener('mouseup', this._cancelMouseEventCallback);\n        element.addEventListener('mousemove', this._cancelMouseEventCallback);\n        element.addEventListener('dblclick', this._cancelMouseEventCallback);\n    }\n    _removeBrowserEventListeners(element) {\n        document.removeEventListener('mousedown', this._browserMouseDownCallback, true);\n        document.removeEventListener('mouseup', this._browserMouseUpCallback);\n        element.removeEventListener('mousedown', this._cancelMouseEventCallback);\n        element.removeEventListener('mouseup', this._cancelMouseEventCallback);\n        element.removeEventListener('mousemove', this._cancelMouseEventCallback);\n        element.removeEventListener('dblclick', this._cancelMouseEventCallback);\n    }\n    _addEventListeners(element) {\n        eventTarget.addEventListener(cstEvents.TOOL_MODE_CHANGED, this._handleToolModeChanged);\n        element.addEventListener(cstEvents.MOUSE_MOVE, this._mouseDragCallback);\n        element.addEventListener(cstEvents.MOUSE_DRAG, this._mouseDragCallback);\n        this._addBrowserEventListeners(element);\n    }\n    _removeEventListeners(element) {\n        eventTarget.removeEventListener(cstEvents.TOOL_MODE_CHANGED, this._handleToolModeChanged);\n        element.addEventListener(cstEvents.MOUSE_MOVE, this._mouseDragCallback);\n        element.addEventListener(cstEvents.MOUSE_DRAG, this._mouseDragCallback);\n        this._removeBrowserEventListeners(element);\n    }\n    _initialize() {\n        const { _sourceEnabledElement: sourceEnabledElement } = this;\n        const { viewport: sourceViewport } = sourceEnabledElement;\n        const { canvas: sourceCanvas } = sourceViewport;\n        const magnifyElement = this._createViewportNode();\n        sourceCanvas.parentNode.appendChild(magnifyElement);\n        this._addEventListeners(magnifyElement);\n        this._cloneViewport(sourceViewport, magnifyElement);\n        this._enabledElement = getEnabledElement(magnifyElement);\n    }\n    _syncViewportsCameras(sourceViewport, magnifyViewport) {\n        const worldPos = sourceViewport.canvasToWorld(this.position);\n        const parallelScale = this._convertZoomFactorToParallelScale(sourceViewport, magnifyViewport, this.zoomFactor);\n        const { focalPoint, position, viewPlaneNormal } = magnifyViewport.getCamera();\n        const distance = Math.sqrt(Math.pow(focalPoint[0] - position[0], 2) +\n            Math.pow(focalPoint[1] - position[1], 2) +\n            Math.pow(focalPoint[2] - position[2], 2));\n        const updatedFocalPoint = [\n            worldPos[0],\n            worldPos[1],\n            worldPos[2],\n        ];\n        const updatedPosition = [\n            updatedFocalPoint[0] + distance * viewPlaneNormal[0],\n            updatedFocalPoint[1] + distance * viewPlaneNormal[1],\n            updatedFocalPoint[2] + distance * viewPlaneNormal[2],\n        ];\n        magnifyViewport.setCamera({\n            parallelScale,\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n    }\n    _syncStackViewports(sourceViewport, magnifyViewport) {\n        magnifyViewport.setImageIdIndex(sourceViewport.getCurrentImageIdIndex());\n    }\n    _syncViewports() {\n        const { viewport: sourceViewport } = this._sourceEnabledElement;\n        const { viewport: magnifyViewport } = this._enabledElement;\n        const sourceProperties = sourceViewport.getProperties();\n        const imageData = magnifyViewport.getImageData();\n        if (!imageData) {\n            return;\n        }\n        magnifyViewport.setProperties(sourceProperties);\n        this._syncViewportsCameras(sourceViewport, magnifyViewport);\n        if (this._isStackViewport(sourceViewport)) {\n            this._syncStackViewports(sourceViewport, magnifyViewport);\n        }\n        this._syncViewportsCameras(sourceViewport, magnifyViewport);\n        magnifyViewport.render();\n    }\n    _resizeViewport() {\n        const { viewport } = this._enabledElement;\n        const renderingEngine = viewport.getRenderingEngine();\n        renderingEngine.resize();\n    }\n}\nAdvancedMagnifyTool.toolName = 'AdvancedMagnify';\nexport { AdvancedMagnifyTool as default };\n","import { BaseTool, AnnotationTool } from './base';\nimport { getAnnotations, getAnnotation, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { setAnnotationSelected } from '../stateManagement/annotation/annotationSelection';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nclass AnnotationEraserTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            return this._deleteNearbyAnnotations(evt, 'mouse');\n        };\n        this.preTouchStartCallback = (evt) => {\n            return this._deleteNearbyAnnotations(evt, 'touch');\n        };\n    }\n    _deleteNearbyAnnotations(evt, interactionType) {\n        const { renderingEngineId, viewportId, element, currentPoints } = evt.detail;\n        const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n        if (!toolGroup) {\n            return false;\n        }\n        const tools = toolGroup._toolInstances;\n        const annotationsToRemove = [];\n        for (const toolName in tools) {\n            const toolInstance = tools[toolName];\n            if (typeof toolInstance.isPointNearTool !== 'function' ||\n                typeof toolInstance.filterInteractableAnnotationsForElement !==\n                    'function') {\n                continue;\n            }\n            const annotations = getAnnotations(toolName, element);\n            const interactableAnnotations = toolInstance.filterInteractableAnnotationsForElement(element, annotations);\n            if (!interactableAnnotations) {\n                continue;\n            }\n            for (const annotation of interactableAnnotations) {\n                if (toolInstance.isPointNearTool(element, annotation, currentPoints.canvas, 10, interactionType)) {\n                    annotationsToRemove.push(annotation.annotationUID);\n                }\n            }\n        }\n        for (const annotationUID of annotationsToRemove) {\n            setAnnotationSelected(annotationUID);\n            const annotation = getAnnotation(annotationUID);\n            AnnotationTool.createAnnotationMemo(element, annotation, {\n                deleting: true,\n            });\n            removeAnnotation(annotationUID);\n        }\n        evt.preventDefault();\n        return true;\n    }\n}\nAnnotationEraserTool.toolName = 'Eraser';\nexport default AnnotationEraserTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport vtkMatrixBuilder from '@kitware/vtk.js/Common/Core/MatrixBuilder';\nimport { AnnotationTool } from './base';\nimport { getRenderingEngine } from '@cornerstonejs/core';\nimport { getEnabledElementByIds, getEnabledElement, utilities as csUtils, Enums, CONSTANTS, triggerEvent, eventTarget, } from '@cornerstonejs/core';\nimport { getToolGroup, getToolGroupForViewport, } from '../store/ToolGroupManager';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, drawLine as drawLineSvg, } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport liangBarksyClip from '../utilities/math/vec2/liangBarksyClip';\nimport * as lineSegment from '../utilities/math/line';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nconst { RENDERING_DEFAULTS } = CONSTANTS;\nfunction defaultReferenceLineColor() {\n    return 'rgb(0, 200, 0)';\n}\nfunction defaultReferenceLineControllable() {\n    return true;\n}\nfunction defaultReferenceLineDraggableRotatable() {\n    return true;\n}\nfunction defaultReferenceLineSlabThicknessControlsOn() {\n    return true;\n}\nconst OPERATION = {\n    DRAG: 1,\n    ROTATE: 2,\n    SLAB: 3,\n};\nclass CrosshairsTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse'],\n        configuration: {\n            shadow: true,\n            viewportIndicators: false,\n            viewportIndicatorsConfig: {\n                radius: 5,\n                x: null,\n                y: null,\n            },\n            autoPan: {\n                enabled: false,\n                panSize: 10,\n            },\n            handleRadius: 3,\n            enableHDPIHandles: false,\n            referenceLinesCenterGapRadius: 20,\n            referenceLinesCenterGapRatio: null,\n            filterActorUIDsToSetSlabThickness: [],\n            slabThicknessBlendMode: Enums.BlendModes.MAXIMUM_INTENSITY_BLEND,\n            mobile: {\n                enabled: false,\n                opacity: 0.8,\n                handleRadius: 9,\n                referenceLinesCenterGapRatio: 0.05,\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.toolCenter = [0, 0, 0];\n        this.initializeViewport = ({ renderingEngineId, viewportId, }) => {\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (!enabledElement) {\n                return;\n            }\n            const { FrameOfReferenceUID, viewport } = enabledElement;\n            const { element } = viewport;\n            const { position, focalPoint, viewPlaneNormal } = viewport.getCamera();\n            let annotations = this._getAnnotations(enabledElement);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (annotations?.length) {\n                removeAnnotation(annotations[0].annotationUID);\n            }\n            const annotation = {\n                highlighted: false,\n                metadata: {\n                    cameraPosition: [...position],\n                    cameraFocalPoint: [...focalPoint],\n                    FrameOfReferenceUID,\n                    toolName: this.getToolName(),\n                },\n                data: {\n                    handles: {\n                        rotationPoints: [],\n                        slabThicknessPoints: [],\n                        toolCenter: this.toolCenter,\n                    },\n                    activeOperation: null,\n                    activeViewportIds: [],\n                    viewportId,\n                },\n            };\n            addAnnotation(annotation, element);\n            return {\n                normal: viewPlaneNormal,\n                point: viewport.canvasToWorld([\n                    viewport.canvas.clientWidth / 2,\n                    viewport.canvas.clientHeight / 2,\n                ]),\n            };\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.resetCrosshairs = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            for (const viewportInfo of viewportsInfo) {\n                const { viewportId, renderingEngineId } = viewportInfo;\n                const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n                const viewport = enabledElement.viewport;\n                const resetPan = true;\n                const resetZoom = true;\n                const resetToCenter = true;\n                const resetRotation = true;\n                const suppressEvents = true;\n                viewport.resetCamera({\n                    resetPan,\n                    resetZoom,\n                    resetToCenter,\n                    resetRotation,\n                    suppressEvents,\n                });\n                viewport.resetSlabThickness();\n                const { element } = viewport;\n                let annotations = this._getAnnotations(enabledElement);\n                annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n                if (annotations.length) {\n                    removeAnnotation(annotations[0].annotationUID);\n                }\n                viewport.render();\n            }\n            this._computeToolCenter(viewportsInfo);\n        };\n        this.computeToolCenter = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            this._computeToolCenter(viewportsInfo);\n        };\n        this._computeToolCenter = (viewportsInfo) => {\n            if (!viewportsInfo.length || viewportsInfo.length === 1) {\n                console.warn('For crosshairs to operate, at least two viewports must be given.');\n                return;\n            }\n            const [firstViewport, secondViewport, thirdViewport] = viewportsInfo;\n            const { normal: normal1, point: point1 } = this.initializeViewport(firstViewport);\n            const { normal: normal2, point: point2 } = this.initializeViewport(secondViewport);\n            let normal3 = [0, 0, 0];\n            let point3 = vec3.create();\n            if (thirdViewport) {\n                ({ normal: normal3, point: point3 } =\n                    this.initializeViewport(thirdViewport));\n            }\n            else {\n                vec3.add(point3, point1, point2);\n                vec3.scale(point3, point3, 0.5);\n                vec3.cross(normal3, normal1, normal2);\n            }\n            const firstPlane = csUtils.planar.planeEquation(normal1, point1);\n            const secondPlane = csUtils.planar.planeEquation(normal2, point2);\n            const thirdPlane = csUtils.planar.planeEquation(normal3, point3);\n            const toolCenter = csUtils.planar.threePlaneIntersection(firstPlane, secondPlane, thirdPlane);\n            this.setToolCenter(toolCenter);\n        };\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const jumpWorld = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this._jump(enabledElement, jumpWorld);\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredAnnotations = this.filterInteractableAnnotationsForElement(viewport.element, annotations);\n            const { data } = filteredAnnotations[0];\n            const { rotationPoints } = data.handles;\n            const viewportIdArray = [];\n            for (let i = 0; i < rotationPoints.length - 1; ++i) {\n                const otherViewport = rotationPoints[i][1];\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                if (!viewportControllable || !viewportDraggableRotatable) {\n                    continue;\n                }\n                viewportIdArray.push(otherViewport.id);\n                i++;\n            }\n            data.activeViewportIds = [...viewportIdArray];\n            data.handles.activeOperation = OPERATION.DRAG;\n            evt.preventDefault();\n            hideElementCursor(element);\n            this._activateModify(element);\n            return filteredAnnotations[0];\n        };\n        this.cancel = () => {\n            console.log('Not implemented yet');\n        };\n        this.handleSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            if (this._pointNearTool(element, annotation, canvasCoords, 6)) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.onCameraModified = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            const viewport = enabledElement.viewport;\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!viewportAnnotation) {\n                return;\n            }\n            const currentCamera = viewport.getCamera();\n            const oldCameraPosition = viewportAnnotation.metadata.cameraPosition;\n            const deltaCameraPosition = [0, 0, 0];\n            vtkMath.subtract(currentCamera.position, oldCameraPosition, deltaCameraPosition);\n            const oldCameraFocalPoint = viewportAnnotation.metadata.cameraFocalPoint;\n            const deltaCameraFocalPoint = [0, 0, 0];\n            vtkMath.subtract(currentCamera.focalPoint, oldCameraFocalPoint, deltaCameraFocalPoint);\n            viewportAnnotation.metadata.cameraPosition = [...currentCamera.position];\n            viewportAnnotation.metadata.cameraFocalPoint = [\n                ...currentCamera.focalPoint,\n            ];\n            const viewportControllable = this._getReferenceLineControllable(viewport.id);\n            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(viewport.id);\n            if (!csUtils.isEqual(currentCamera.position, oldCameraPosition, 1e-3) &&\n                viewportControllable &&\n                viewportDraggableRotatable) {\n                let isRotation = false;\n                const cameraModifiedSameForPosAndFocalPoint = csUtils.isEqual(deltaCameraPosition, deltaCameraFocalPoint, 1e-3);\n                if (!cameraModifiedSameForPosAndFocalPoint) {\n                    isRotation = true;\n                }\n                const cameraModifiedInPlane = Math.abs(vtkMath.dot(deltaCameraPosition, currentCamera.viewPlaneNormal)) < 1e-2;\n                if (!isRotation && !cameraModifiedInPlane) {\n                    this.toolCenter[0] += deltaCameraPosition[0];\n                    this.toolCenter[1] += deltaCameraPosition[1];\n                    this.toolCenter[2] += deltaCameraPosition[2];\n                    triggerEvent(eventTarget, Events.CROSSHAIR_TOOL_CENTER_CHANGED, {\n                        toolGroupId: this.toolGroupId,\n                        toolCenter: this.toolCenter,\n                    });\n                }\n            }\n            if (this.configuration.autoPan?.enabled) {\n                const toolGroup = getToolGroupForViewport(viewport.id, renderingEngine.id);\n                const otherViewportIds = toolGroup\n                    .getViewportIds()\n                    .filter((id) => id !== viewport.id);\n                otherViewportIds.forEach((viewportId) => {\n                    this._autoPanViewportIfNecessary(viewportId, renderingEngine);\n                });\n            }\n            const requireSameOrientation = false;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), requireSameOrientation);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.onResetCamera = (evt) => {\n            this.resetCrosshairs();\n        };\n        this.mouseMoveCallback = (evt, filteredToolAnnotations) => {\n            const { element, currentPoints } = evt.detail;\n            const canvasCoords = currentPoints.canvas;\n            let imageNeedsUpdate = false;\n            for (let i = 0; i < filteredToolAnnotations.length; i++) {\n                const annotation = filteredToolAnnotations[i];\n                if (isAnnotationLocked(annotation.annotationUID)) {\n                    continue;\n                }\n                const { data, highlighted } = annotation;\n                if (!data.handles) {\n                    continue;\n                }\n                const previousActiveOperation = data.handles.activeOperation;\n                const previousActiveViewportIds = data.activeViewportIds && data.activeViewportIds.length > 0\n                    ? [...data.activeViewportIds]\n                    : [];\n                data.activeViewportIds = [];\n                data.handles.activeOperation = null;\n                const handleNearImagePoint = this.getHandleNearImagePoint(element, annotation, canvasCoords, 6);\n                let near = false;\n                if (handleNearImagePoint) {\n                    near = true;\n                }\n                else {\n                    near = this._pointNearTool(element, annotation, canvasCoords, 6);\n                }\n                const nearToolAndNotMarkedActive = near && !highlighted;\n                const notNearToolAndMarkedActive = !near && highlighted;\n                if (nearToolAndNotMarkedActive || notNearToolAndMarkedActive) {\n                    annotation.highlighted = !highlighted;\n                    imageNeedsUpdate = true;\n                }\n                else if (data.handles.activeOperation !== previousActiveOperation ||\n                    !this._areViewportIdArraysEqual(data.activeViewportIds, previousActiveViewportIds)) {\n                    imageNeedsUpdate = true;\n                }\n            }\n            return imageNeedsUpdate;\n        };\n        this.filterInteractableAnnotationsForElement = (element, annotations) => {\n            if (!annotations || !annotations.length) {\n                return [];\n            }\n            const enabledElement = getEnabledElement(element);\n            const { viewportId } = enabledElement;\n            const viewportUIDSpecificCrosshairs = annotations.filter((annotation) => annotation.data.viewportId === viewportId);\n            return viewportUIDSpecificCrosshairs;\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport, renderingEngine } = enabledElement;\n            const { element } = viewport;\n            const annotations = this._getAnnotations(enabledElement);\n            const camera = viewport.getCamera();\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!annotations?.length || !viewportAnnotation?.data) {\n                return renderStatus;\n            }\n            const annotationUID = viewportAnnotation.annotationUID;\n            const { clientWidth, clientHeight } = viewport.canvas;\n            const canvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n            const canvasMinDimensionLength = Math.min(clientWidth, clientHeight);\n            const data = viewportAnnotation.data;\n            const crosshairCenterCanvas = viewport.worldToCanvas(this.toolCenter);\n            const otherViewportAnnotations = this._filterAnnotationsByUniqueViewportOrientations(enabledElement, annotations);\n            const referenceLines = [];\n            const canvasBox = [0, 0, clientWidth, clientHeight];\n            otherViewportAnnotations.forEach((annotation) => {\n                const { data } = annotation;\n                data.handles.toolCenter = this.toolCenter;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                const otherViewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n                const { clientWidth, clientHeight } = otherViewport.canvas;\n                const otherCanvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n                const otherCanvasCenter = [\n                    clientWidth * 0.5,\n                    clientHeight * 0.5,\n                ];\n                const otherViewportCenterWorld = otherViewport.canvasToWorld(otherCanvasCenter);\n                const direction = [0, 0, 0];\n                vtkMath.cross(camera.viewPlaneNormal, otherCamera.viewPlaneNormal, direction);\n                vtkMath.normalize(direction);\n                vtkMath.multiplyScalar(direction, otherCanvasDiagonalLength);\n                const pointWorld0 = [0, 0, 0];\n                vtkMath.add(otherViewportCenterWorld, direction, pointWorld0);\n                const pointWorld1 = [0, 0, 0];\n                vtkMath.subtract(otherViewportCenterWorld, direction, pointWorld1);\n                const pointCanvas0 = viewport.worldToCanvas(pointWorld0);\n                const otherViewportCenterCanvas = viewport.worldToCanvas(otherViewportCenterWorld);\n                const canvasUnitVectorFromCenter = vec2.create();\n                vec2.subtract(canvasUnitVectorFromCenter, pointCanvas0, otherViewportCenterCanvas);\n                vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n                const canvasVectorFromCenterLong = vec2.create();\n                vec2.scale(canvasVectorFromCenterLong, canvasUnitVectorFromCenter, canvasDiagonalLength * 100);\n                const canvasVectorFromCenterMid = vec2.create();\n                vec2.scale(canvasVectorFromCenterMid, canvasUnitVectorFromCenter, canvasMinDimensionLength * 0.4);\n                const canvasVectorFromCenterShort = vec2.create();\n                vec2.scale(canvasVectorFromCenterShort, canvasUnitVectorFromCenter, canvasMinDimensionLength * 0.2);\n                const canvasVectorFromCenterStart = vec2.create();\n                const mobileConfig = this.configuration.mobile;\n                const { referenceLinesCenterGapRatio } = mobileConfig?.enabled\n                    ? mobileConfig\n                    : this.configuration;\n                const centerGap = referenceLinesCenterGapRatio > 0\n                    ? canvasMinDimensionLength * referenceLinesCenterGapRatio\n                    : this.configuration.referenceLinesCenterGapRadius;\n                vec2.scale(canvasVectorFromCenterStart, canvasUnitVectorFromCenter, otherViewportAnnotations.length === 2 ? centerGap : 0);\n                const refLinePointOne = vec2.create();\n                const refLinePointTwo = vec2.create();\n                const refLinePointThree = vec2.create();\n                const refLinePointFour = vec2.create();\n                let refLinesCenter = vec2.clone(crosshairCenterCanvas);\n                if (!otherViewportDraggableRotatable || !otherViewportControllable) {\n                    refLinesCenter = vec2.clone(otherViewportCenterCanvas);\n                }\n                vec2.add(refLinePointOne, refLinesCenter, canvasVectorFromCenterStart);\n                vec2.add(refLinePointTwo, refLinesCenter, canvasVectorFromCenterLong);\n                vec2.subtract(refLinePointThree, refLinesCenter, canvasVectorFromCenterStart);\n                vec2.subtract(refLinePointFour, refLinesCenter, canvasVectorFromCenterLong);\n                liangBarksyClip(refLinePointOne, refLinePointTwo, canvasBox);\n                liangBarksyClip(refLinePointThree, refLinePointFour, canvasBox);\n                const rotHandleOne = vec2.create();\n                vec2.subtract(rotHandleOne, crosshairCenterCanvas, canvasVectorFromCenterMid);\n                const rotHandleTwo = vec2.create();\n                vec2.add(rotHandleTwo, crosshairCenterCanvas, canvasVectorFromCenterMid);\n                let stHandlesCenterCanvas = vec2.clone(crosshairCenterCanvas);\n                if (!otherViewportDraggableRotatable &&\n                    otherViewportSlabThicknessControlsOn) {\n                    stHandlesCenterCanvas = vec2.clone(otherViewportCenterCanvas);\n                }\n                let stHandlesCenterWorld = [...this.toolCenter];\n                if (!otherViewportDraggableRotatable &&\n                    otherViewportSlabThicknessControlsOn) {\n                    stHandlesCenterWorld = [...otherViewportCenterWorld];\n                }\n                const worldUnitVectorFromCenter = [0, 0, 0];\n                vtkMath.subtract(pointWorld0, pointWorld1, worldUnitVectorFromCenter);\n                vtkMath.normalize(worldUnitVectorFromCenter);\n                const { viewPlaneNormal } = camera;\n                const { matrix } = vtkMatrixBuilder\n                    .buildFromDegree()\n                    .rotate(90, viewPlaneNormal);\n                const worldUnitOrthoVectorFromCenter = [0, 0, 0];\n                vec3.transformMat4(worldUnitOrthoVectorFromCenter, worldUnitVectorFromCenter, matrix);\n                const slabThicknessValue = otherViewport.getSlabThickness();\n                const worldOrthoVectorFromCenter = [\n                    ...worldUnitOrthoVectorFromCenter,\n                ];\n                vtkMath.multiplyScalar(worldOrthoVectorFromCenter, slabThicknessValue);\n                const worldVerticalRefPoint = [0, 0, 0];\n                vtkMath.add(stHandlesCenterWorld, worldOrthoVectorFromCenter, worldVerticalRefPoint);\n                const canvasVerticalRefPoint = viewport.worldToCanvas(worldVerticalRefPoint);\n                const canvasOrthoVectorFromCenter = vec2.create();\n                vec2.subtract(canvasOrthoVectorFromCenter, stHandlesCenterCanvas, canvasVerticalRefPoint);\n                const stLinePointOne = vec2.create();\n                vec2.subtract(stLinePointOne, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.add(stLinePointOne, stLinePointOne, canvasOrthoVectorFromCenter);\n                const stLinePointTwo = vec2.create();\n                vec2.add(stLinePointTwo, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.add(stLinePointTwo, stLinePointTwo, canvasOrthoVectorFromCenter);\n                liangBarksyClip(stLinePointOne, stLinePointTwo, canvasBox);\n                const stLinePointThree = vec2.create();\n                vec2.add(stLinePointThree, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.subtract(stLinePointThree, stLinePointThree, canvasOrthoVectorFromCenter);\n                const stLinePointFour = vec2.create();\n                vec2.subtract(stLinePointFour, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.subtract(stLinePointFour, stLinePointFour, canvasOrthoVectorFromCenter);\n                liangBarksyClip(stLinePointThree, stLinePointFour, canvasBox);\n                const stHandleOne = vec2.create();\n                const stHandleTwo = vec2.create();\n                const stHandleThree = vec2.create();\n                const stHandleFour = vec2.create();\n                vec2.subtract(stHandleOne, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.add(stHandleOne, stHandleOne, canvasOrthoVectorFromCenter);\n                vec2.add(stHandleTwo, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.add(stHandleTwo, stHandleTwo, canvasOrthoVectorFromCenter);\n                vec2.subtract(stHandleThree, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.subtract(stHandleThree, stHandleThree, canvasOrthoVectorFromCenter);\n                vec2.add(stHandleFour, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.subtract(stHandleFour, stHandleFour, canvasOrthoVectorFromCenter);\n                referenceLines.push([\n                    otherViewport,\n                    refLinePointOne,\n                    refLinePointTwo,\n                    refLinePointThree,\n                    refLinePointFour,\n                    stLinePointOne,\n                    stLinePointTwo,\n                    stLinePointThree,\n                    stLinePointFour,\n                    rotHandleOne,\n                    rotHandleTwo,\n                    stHandleOne,\n                    stHandleTwo,\n                    stHandleThree,\n                    stHandleFour,\n                ]);\n            });\n            const newRtpoints = [];\n            const newStpoints = [];\n            const viewportColor = this._getReferenceLineColor(viewport.id);\n            const color = viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n            referenceLines.forEach((line, lineIndex) => {\n                const otherViewport = line[0];\n                const viewportColor = this._getReferenceLineColor(otherViewport.id);\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id) ||\n                    this.configuration.mobile?.enabled;\n                const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id) ||\n                    this.configuration.mobile?.enabled;\n                const selectedViewportId = data.activeViewportIds.find((id) => id === otherViewport.id);\n                let color = viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n                let lineWidth = 1;\n                const lineActive = data.handles.activeOperation !== null &&\n                    data.handles.activeOperation === OPERATION.DRAG &&\n                    selectedViewportId;\n                if (lineActive) {\n                    lineWidth = 2.5;\n                }\n                let lineUID = `${lineIndex}`;\n                if (viewportControllable && viewportDraggableRotatable) {\n                    lineUID = `${lineIndex}One`;\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[1], line[2], {\n                        color,\n                        lineWidth,\n                    });\n                    lineUID = `${lineIndex}Two`;\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[3], line[4], {\n                        color,\n                        lineWidth,\n                    });\n                }\n                else {\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[2], line[4], {\n                        color,\n                        lineWidth,\n                    });\n                }\n                if (viewportControllable) {\n                    color =\n                        viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n                    const rotHandlesActive = data.handles.activeOperation === OPERATION.ROTATE;\n                    const rotationHandles = [line[9], line[10]];\n                    const rotHandleWorldOne = [\n                        viewport.canvasToWorld(line[9]),\n                        otherViewport,\n                        line[1],\n                        line[2],\n                    ];\n                    const rotHandleWorldTwo = [\n                        viewport.canvasToWorld(line[10]),\n                        otherViewport,\n                        line[3],\n                        line[4],\n                    ];\n                    newRtpoints.push(rotHandleWorldOne, rotHandleWorldTwo);\n                    const slabThicknessHandlesActive = data.handles.activeOperation === OPERATION.SLAB;\n                    const slabThicknessHandles = [line[11], line[12], line[13], line[14]];\n                    const slabThicknessHandleWorldOne = [\n                        viewport.canvasToWorld(line[11]),\n                        otherViewport,\n                        line[5],\n                        line[6],\n                    ];\n                    const slabThicknessHandleWorldTwo = [\n                        viewport.canvasToWorld(line[12]),\n                        otherViewport,\n                        line[5],\n                        line[6],\n                    ];\n                    const slabThicknessHandleWorldThree = [\n                        viewport.canvasToWorld(line[13]),\n                        otherViewport,\n                        line[7],\n                        line[8],\n                    ];\n                    const slabThicknessHandleWorldFour = [\n                        viewport.canvasToWorld(line[14]),\n                        otherViewport,\n                        line[7],\n                        line[8],\n                    ];\n                    newStpoints.push(slabThicknessHandleWorldOne, slabThicknessHandleWorldTwo, slabThicknessHandleWorldThree, slabThicknessHandleWorldFour);\n                    let handleRadius = this.configuration.handleRadius *\n                        (this.configuration.enableHDPIHandles ? window.devicePixelRatio : 1);\n                    let opacity = 1;\n                    if (this.configuration.mobile?.enabled) {\n                        handleRadius = this.configuration.mobile.handleRadius;\n                        opacity = this.configuration.mobile.opacity;\n                    }\n                    if ((lineActive || this.configuration.mobile?.enabled) &&\n                        !rotHandlesActive &&\n                        !slabThicknessHandlesActive &&\n                        viewportDraggableRotatable &&\n                        viewportSlabThicknessControlsOn) {\n                        let handleUID = `${lineIndex}One`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'circle',\n                        });\n                        handleUID = `${lineIndex}Two`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, slabThicknessHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'rect',\n                        });\n                    }\n                    else if (lineActive &&\n                        !rotHandlesActive &&\n                        !slabThicknessHandlesActive &&\n                        viewportDraggableRotatable) {\n                        const handleUID = `${lineIndex}`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'circle',\n                        });\n                    }\n                    else if (selectedViewportId &&\n                        !rotHandlesActive &&\n                        !slabThicknessHandlesActive &&\n                        viewportSlabThicknessControlsOn) {\n                        const handleUID = `${lineIndex}`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, slabThicknessHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'rect',\n                        });\n                    }\n                    else if (rotHandlesActive && viewportDraggableRotatable) {\n                        const handleUID = `${lineIndex}`;\n                        const handleRadius = this.configuration.handleRadius *\n                            (this.configuration.enableHDPIHandles\n                                ? window.devicePixelRatio\n                                : 1);\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {\n                            color,\n                            handleRadius,\n                            fill: color,\n                            type: 'circle',\n                        });\n                    }\n                    else if (slabThicknessHandlesActive &&\n                        selectedViewportId &&\n                        viewportSlabThicknessControlsOn) {\n                        const handleRadius = this.configuration.handleRadius *\n                            (this.configuration.enableHDPIHandles\n                                ? window.devicePixelRatio\n                                : 1);\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, lineUID, slabThicknessHandles, {\n                            color,\n                            handleRadius,\n                            fill: color,\n                            type: 'rect',\n                        });\n                    }\n                    const slabThicknessValue = otherViewport.getSlabThickness();\n                    if (slabThicknessValue > 0.5 && viewportSlabThicknessControlsOn) {\n                        lineUID = `${lineIndex}STOne`;\n                        drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[5], line[6], {\n                            color,\n                            width: 1,\n                            lineDash: [2, 3],\n                        });\n                        lineUID = `${lineIndex}STTwo`;\n                        drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[7], line[8], {\n                            color,\n                            width: line,\n                            lineDash: [2, 3],\n                        });\n                    }\n                }\n            });\n            renderStatus = true;\n            data.handles.rotationPoints = newRtpoints;\n            data.handles.slabThicknessPoints = newStpoints;\n            if (this.configuration.viewportIndicators) {\n                const { viewportIndicatorsConfig } = this.configuration;\n                const xOffset = viewportIndicatorsConfig?.xOffset || 0.95;\n                const yOffset = viewportIndicatorsConfig?.yOffset || 0.05;\n                const referenceColorCoordinates = [\n                    clientWidth * xOffset,\n                    clientHeight * yOffset,\n                ];\n                const circleRadius = viewportIndicatorsConfig?.circleRadius || canvasDiagonalLength * 0.01;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, referenceColorCoordinates, circleRadius, { color, fill: color });\n            }\n            return renderStatus;\n        };\n        this._getAnnotations = (enabledElement) => {\n            const { viewport } = enabledElement;\n            const annotations = getAnnotations(this.getToolName(), viewport.element) || [];\n            const viewportIds = this._getViewportsInfo().map(({ viewportId }) => viewportId);\n            const toolGroupAnnotations = annotations.filter((annotation) => {\n                const { data } = annotation;\n                return viewportIds.includes(data.viewportId);\n            });\n            return toolGroupAnnotations;\n        };\n        this._onNewVolume = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            this._computeToolCenter(viewportsInfo);\n        };\n        this._areViewportIdArraysEqual = (viewportIdArrayOne, viewportIdArrayTwo) => {\n            if (viewportIdArrayOne.length !== viewportIdArrayTwo.length) {\n                return false;\n            }\n            viewportIdArrayOne.forEach((id) => {\n                let itemFound = false;\n                for (let i = 0; i < viewportIdArrayTwo.length; ++i) {\n                    if (id === viewportIdArrayTwo[i]) {\n                        itemFound = true;\n                        break;\n                    }\n                }\n                if (itemFound === false) {\n                    return false;\n                }\n            });\n            return true;\n        };\n        this._getAnnotationsForViewportsWithDifferentCameras = (enabledElement, annotations) => {\n            const { viewportId, renderingEngine, viewport } = enabledElement;\n            const otherViewportAnnotations = annotations.filter((annotation) => annotation.data.viewportId !== viewportId);\n            if (!otherViewportAnnotations || !otherViewportAnnotations.length) {\n                return [];\n            }\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, position } = camera;\n            const viewportsWithDifferentCameras = otherViewportAnnotations.filter((annotation) => {\n                const { viewportId } = annotation.data;\n                const targetViewport = renderingEngine.getViewport(viewportId);\n                const cameraOfTarget = targetViewport.getCamera();\n                return !(csUtils.isEqual(cameraOfTarget.viewPlaneNormal, viewPlaneNormal, 1e-2) && csUtils.isEqual(cameraOfTarget.position, position, 1));\n            });\n            return viewportsWithDifferentCameras;\n        };\n        this._filterViewportWithSameOrientation = (enabledElement, referenceAnnotation, annotations) => {\n            const { renderingEngine } = enabledElement;\n            const { data } = referenceAnnotation;\n            const viewport = renderingEngine.getViewport(data.viewportId);\n            const linkedViewportAnnotations = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return otherViewportControllable === true;\n            });\n            if (!linkedViewportAnnotations || !linkedViewportAnnotations.length) {\n                return [];\n            }\n            const camera = viewport.getCamera();\n            const viewPlaneNormal = camera.viewPlaneNormal;\n            vtkMath.normalize(viewPlaneNormal);\n            const otherViewportsAnnotationsWithSameCameraDirection = linkedViewportAnnotations.filter((annotation) => {\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                return (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) &&\n                    csUtils.isEqual(camera.viewUp, otherCamera.viewUp, 1e-2));\n            });\n            return otherViewportsAnnotationsWithSameCameraDirection;\n        };\n        this._filterAnnotationsByUniqueViewportOrientations = (enabledElement, annotations) => {\n            const { renderingEngine, viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const viewPlaneNormal = camera.viewPlaneNormal;\n            vtkMath.normalize(viewPlaneNormal);\n            const otherLinkedViewportAnnotationsFromSameScene = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return (viewport !== otherViewport &&\n                    otherViewportControllable === true);\n            });\n            const otherViewportsAnnotationsWithUniqueCameras = [];\n            for (let i = 0; i < otherLinkedViewportAnnotationsFromSameScene.length; ++i) {\n                const annotation = otherLinkedViewportAnnotationsFromSameScene[i];\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                if (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n                    csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {\n                    continue;\n                }\n                let cameraFound = false;\n                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {\n                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n                    const { viewportId } = annotation.data;\n                    const stockedViewport = renderingEngine.getViewport(viewportId);\n                    const cameraOfStocked = stockedViewport.getCamera();\n                    if (csUtils.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&\n                        csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {\n                        cameraFound = true;\n                    }\n                }\n                if (!cameraFound) {\n                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n                }\n            }\n            const otherNonLinkedViewportAnnotationsFromSameScene = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return (viewport !== otherViewport &&\n                    otherViewportControllable !== true);\n            });\n            for (let i = 0; i < otherNonLinkedViewportAnnotationsFromSameScene.length; ++i) {\n                const annotation = otherNonLinkedViewportAnnotationsFromSameScene[i];\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                if (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n                    csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {\n                    continue;\n                }\n                let cameraFound = false;\n                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {\n                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n                    const { viewportId } = annotation.data;\n                    const stockedViewport = renderingEngine.getViewport(viewportId);\n                    const cameraOfStocked = stockedViewport.getCamera();\n                    if (csUtils.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&\n                        csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {\n                        cameraFound = true;\n                    }\n                }\n                if (!cameraFound) {\n                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n                }\n            }\n            const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n            for (let i = 0; i < otherViewportAnnotations.length; ++i) {\n                const annotation = otherViewportAnnotations[i];\n                if (otherViewportsAnnotationsWithUniqueCameras.some((element) => element === annotation)) {\n                    continue;\n                }\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                if (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n                    csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {\n                    continue;\n                }\n                let cameraFound = false;\n                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {\n                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n                    const { viewportId } = annotation.data;\n                    const stockedViewport = renderingEngine.getViewport(viewportId);\n                    const cameraOfStocked = stockedViewport.getCamera();\n                    if (csUtils.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&\n                        csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {\n                        cameraFound = true;\n                    }\n                }\n                if (!cameraFound) {\n                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n                }\n            }\n            return otherViewportsAnnotationsWithUniqueCameras;\n        };\n        this._checkIfViewportsRenderingSameScene = (viewport, otherViewport) => {\n            const volumeIds = viewport.getAllVolumeIds();\n            const otherVolumeIds = otherViewport.getAllVolumeIds();\n            return (volumeIds.length === otherVolumeIds.length &&\n                volumeIds.every((id) => otherVolumeIds.includes(id)));\n        };\n        this._jump = (enabledElement, jumpWorld) => {\n            state.isInteractingWithTool = true;\n            const { viewport, renderingEngine } = enabledElement;\n            const annotations = this._getAnnotations(enabledElement);\n            const delta = [0, 0, 0];\n            vtkMath.subtract(jumpWorld, this.toolCenter, delta);\n            const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n            const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const sameScene = this._checkIfViewportsRenderingSameScene(viewport, otherViewport);\n                return (this._getReferenceLineControllable(otherViewport.id) &&\n                    this._getReferenceLineDraggableRotatable(otherViewport.id) &&\n                    sameScene);\n            });\n            if (viewportsAnnotationsToUpdate.length === 0) {\n                state.isInteractingWithTool = false;\n                return false;\n            }\n            this._applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta);\n            state.isInteractingWithTool = false;\n            return true;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = !this.configuration.mobile?.enabled;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            this.editData.annotation.data.handles.activeOperation = null;\n            this.editData.annotation.data.activeViewportIds = [];\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            this.editData = null;\n            const requireSameOrientation = false;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), requireSameOrientation);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const delta = eventDetail.deltaPoints.world;\n            if (Math.abs(delta[0]) < 1e-3 &&\n                Math.abs(delta[1]) < 1e-3 &&\n                Math.abs(delta[2]) < 1e-3) {\n                return;\n            }\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!viewportAnnotation) {\n                return;\n            }\n            const { handles } = viewportAnnotation.data;\n            const { currentPoints } = evt.detail;\n            const canvasCoords = currentPoints.canvas;\n            if (handles.activeOperation === OPERATION.DRAG) {\n                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n                const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                    const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                    return (otherViewportControllable === true &&\n                        otherViewportDraggableRotatable === true &&\n                        viewportAnnotation.data.activeViewportIds.find((id) => id === otherViewport.id));\n                });\n                this._applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta);\n            }\n            else if (handles.activeOperation === OPERATION.ROTATE) {\n                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n                const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                    const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                    return (otherViewportControllable === true &&\n                        otherViewportDraggableRotatable === true);\n                });\n                const dir1 = vec2.create();\n                const dir2 = vec2.create();\n                const center = [\n                    this.toolCenter[0],\n                    this.toolCenter[1],\n                    this.toolCenter[2],\n                ];\n                const centerCanvas = viewport.worldToCanvas(center);\n                const finalPointCanvas = eventDetail.currentPoints.canvas;\n                const originalPointCanvas = vec2.create();\n                vec2.sub(originalPointCanvas, finalPointCanvas, eventDetail.deltaPoints.canvas);\n                vec2.sub(dir1, originalPointCanvas, centerCanvas);\n                vec2.sub(dir2, finalPointCanvas, centerCanvas);\n                let angle = vec2.angle(dir1, dir2);\n                if (this._isClockWise(centerCanvas, originalPointCanvas, finalPointCanvas)) {\n                    angle *= -1;\n                }\n                angle = Math.round(angle * 100) / 100;\n                const rotationAxis = viewport.getCamera().viewPlaneNormal;\n                const { matrix } = vtkMatrixBuilder\n                    .buildFromRadian()\n                    .translate(center[0], center[1], center[2])\n                    .rotate(angle, rotationAxis)\n                    .translate(-center[0], -center[1], -center[2]);\n                const otherViewportsIds = [];\n                viewportsAnnotationsToUpdate.forEach((annotation) => {\n                    const { data } = annotation;\n                    data.handles.toolCenter = center;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const camera = otherViewport.getCamera();\n                    const { viewUp, position, focalPoint } = camera;\n                    viewUp[0] += position[0];\n                    viewUp[1] += position[1];\n                    viewUp[2] += position[2];\n                    vec3.transformMat4(focalPoint, focalPoint, matrix);\n                    vec3.transformMat4(position, position, matrix);\n                    vec3.transformMat4(viewUp, viewUp, matrix);\n                    viewUp[0] -= position[0];\n                    viewUp[1] -= position[1];\n                    viewUp[2] -= position[2];\n                    otherViewport.setCamera({\n                        position,\n                        viewUp,\n                        focalPoint,\n                    });\n                    otherViewportsIds.push(otherViewport.id);\n                });\n                renderingEngine.renderViewports(otherViewportsIds);\n            }\n            else if (handles.activeOperation === OPERATION.SLAB) {\n                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n                const referenceAnnotations = otherViewportAnnotations.filter((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                    const otherViewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n                    return (otherViewportControllable === true &&\n                        otherViewportSlabThicknessControlsOn === true &&\n                        viewportAnnotation.data.activeViewportIds.find((id) => id === otherViewport.id));\n                });\n                if (referenceAnnotations.length === 0) {\n                    return;\n                }\n                const viewportsAnnotationsToUpdate = this._filterViewportWithSameOrientation(enabledElement, referenceAnnotations[0], annotations);\n                const viewportsIds = [];\n                viewportsIds.push(viewport.id);\n                viewportsAnnotationsToUpdate.forEach((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const camera = otherViewport.getCamera();\n                    const normal = camera.viewPlaneNormal;\n                    const dotProd = vtkMath.dot(delta, normal);\n                    const projectedDelta = [...normal];\n                    vtkMath.multiplyScalar(projectedDelta, dotProd);\n                    if (Math.abs(projectedDelta[0]) > 1e-3 ||\n                        Math.abs(projectedDelta[1]) > 1e-3 ||\n                        Math.abs(projectedDelta[2]) > 1e-3) {\n                        const mod = Math.sqrt(projectedDelta[0] * projectedDelta[0] +\n                            projectedDelta[1] * projectedDelta[1] +\n                            projectedDelta[2] * projectedDelta[2]);\n                        const currentPoint = eventDetail.lastPoints.world;\n                        const direction = [0, 0, 0];\n                        const currentCenter = [\n                            this.toolCenter[0],\n                            this.toolCenter[1],\n                            this.toolCenter[2],\n                        ];\n                        const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                        if (!viewportDraggableRotatable) {\n                            const { rotationPoints } = (this.editData.annotation.data).handles;\n                            const otherViewportRotationPoints = rotationPoints.filter((point) => point[1].uid === otherViewport.id);\n                            if (otherViewportRotationPoints.length === 2) {\n                                const point1 = viewport.canvasToWorld(otherViewportRotationPoints[0][3]);\n                                const point2 = viewport.canvasToWorld(otherViewportRotationPoints[1][3]);\n                                vtkMath.add(point1, point2, currentCenter);\n                                vtkMath.multiplyScalar(currentCenter, 0.5);\n                            }\n                        }\n                        vtkMath.subtract(currentPoint, currentCenter, direction);\n                        const dotProdDirection = vtkMath.dot(direction, normal);\n                        const projectedDirection = [...normal];\n                        vtkMath.multiplyScalar(projectedDirection, dotProdDirection);\n                        const normalizedProjectedDirection = [\n                            projectedDirection[0],\n                            projectedDirection[1],\n                            projectedDirection[2],\n                        ];\n                        vec3.normalize(normalizedProjectedDirection, normalizedProjectedDirection);\n                        const normalizedProjectedDelta = [\n                            projectedDelta[0],\n                            projectedDelta[1],\n                            projectedDelta[2],\n                        ];\n                        vec3.normalize(normalizedProjectedDelta, normalizedProjectedDelta);\n                        let slabThicknessValue = otherViewport.getSlabThickness();\n                        if (csUtils.isOpposite(normalizedProjectedDirection, normalizedProjectedDelta, 1e-3)) {\n                            slabThicknessValue -= mod;\n                        }\n                        else {\n                            slabThicknessValue += mod;\n                        }\n                        slabThicknessValue = Math.abs(slabThicknessValue);\n                        slabThicknessValue = Math.max(RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS, slabThicknessValue);\n                        const near = this._pointNearReferenceLine(viewportAnnotation, canvasCoords, 6, otherViewport);\n                        if (near) {\n                            slabThicknessValue = RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS;\n                        }\n                        const toolGroup = getToolGroupForViewport(otherViewport.id, renderingEngine.id);\n                        const crosshairsInstance = toolGroup.getToolInstance(this.getToolName());\n                        crosshairsInstance.setSlabThickness(otherViewport, slabThicknessValue);\n                        viewportsIds.push(otherViewport.id);\n                    }\n                });\n                renderingEngine.renderViewports(viewportsIds);\n            }\n        };\n        this._pointNearReferenceLine = (annotation, canvasCoords, proximity, lineViewport) => {\n            const { data } = annotation;\n            const { rotationPoints } = data.handles;\n            for (let i = 0; i < rotationPoints.length - 1; ++i) {\n                const otherViewport = rotationPoints[i][1];\n                if (otherViewport.id !== lineViewport.id) {\n                    continue;\n                }\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                if (!viewportControllable) {\n                    continue;\n                }\n                const lineSegment1 = {\n                    start: {\n                        x: rotationPoints[i][2][0],\n                        y: rotationPoints[i][2][1],\n                    },\n                    end: {\n                        x: rotationPoints[i][3][0],\n                        y: rotationPoints[i][3][1],\n                    },\n                };\n                const distanceToPoint1 = lineSegment.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);\n                const lineSegment2 = {\n                    start: {\n                        x: rotationPoints[i + 1][2][0],\n                        y: rotationPoints[i + 1][2][1],\n                    },\n                    end: {\n                        x: rotationPoints[i + 1][3][0],\n                        y: rotationPoints[i + 1][3][1],\n                    },\n                };\n                const distanceToPoint2 = lineSegment.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);\n                if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n                    return true;\n                }\n                i++;\n            }\n            return false;\n        };\n        this._getReferenceLineColor =\n            toolProps.configuration?.getReferenceLineColor ||\n                defaultReferenceLineColor;\n        this._getReferenceLineControllable =\n            toolProps.configuration?.getReferenceLineControllable ||\n                defaultReferenceLineControllable;\n        this._getReferenceLineDraggableRotatable =\n            toolProps.configuration?.getReferenceLineDraggableRotatable ||\n                defaultReferenceLineDraggableRotatable;\n        this._getReferenceLineSlabThicknessControlsOn =\n            toolProps.configuration?.getReferenceLineSlabThicknessControlsOn ||\n                defaultReferenceLineSlabThicknessControlsOn;\n    }\n    onSetToolActive() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n        this._subscribeToViewportNewVolumeSet(viewportsInfo);\n        this._computeToolCenter(viewportsInfo);\n    }\n    onSetToolPassive() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._computeToolCenter(viewportsInfo);\n    }\n    onSetToolEnabled() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._computeToolCenter(viewportsInfo);\n    }\n    onSetToolDisabled() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n        viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (!enabledElement) {\n                return;\n            }\n            const annotations = this._getAnnotations(enabledElement);\n            if (annotations?.length) {\n                annotations.forEach((annotation) => {\n                    removeAnnotation(annotation.annotationUID);\n                });\n            }\n        });\n    }\n    setToolCenter(toolCenter, suppressEvents = false) {\n        const viewportsInfo = this._getViewportsInfo();\n        viewportsInfo.map(({ renderingEngineId, viewportId }) => {\n            const renderingEngine = getRenderingEngine(renderingEngineId);\n            const viewport = renderingEngine.getViewport(viewportId);\n            const camera = viewport.getCamera();\n            const { focalPoint, position, viewPlaneNormal } = camera;\n            const delta = [\n                toolCenter[0] - focalPoint[0],\n                toolCenter[1] - focalPoint[1],\n                toolCenter[2] - focalPoint[2],\n            ];\n            const scroll = delta[0] * viewPlaneNormal[0] +\n                delta[1] * viewPlaneNormal[1] +\n                delta[2] * viewPlaneNormal[2];\n            const scrollDelta = [\n                scroll * viewPlaneNormal[0],\n                scroll * viewPlaneNormal[1],\n                scroll * viewPlaneNormal[2],\n            ];\n            const newFocalPoint = [\n                focalPoint[0] + scrollDelta[0],\n                focalPoint[1] + scrollDelta[1],\n                focalPoint[2] + scrollDelta[2],\n            ];\n            const newPosition = [\n                position[0] + scrollDelta[0],\n                position[1] + scrollDelta[1],\n                position[2] + scrollDelta[2],\n            ];\n            viewport.setCamera({\n                focalPoint: newFocalPoint,\n                position: newPosition,\n            });\n            viewport.render();\n        });\n        this.toolCenter = toolCenter;\n        if (!suppressEvents) {\n            triggerEvent(eventTarget, Events.CROSSHAIR_TOOL_CENTER_CHANGED, {\n                toolGroupId: this.toolGroupId,\n                toolCenter: this.toolCenter,\n            });\n        }\n    }\n    getHandleNearImagePoint(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        let point = this._getRotationHandleNearImagePoint(viewport, annotation, canvasCoords, proximity);\n        if (point !== null) {\n            return point;\n        }\n        point = this._getSlabThicknessHandleNearImagePoint(viewport, annotation, canvasCoords, proximity);\n        if (point !== null) {\n            return point;\n        }\n    }\n    _unsubscribeToViewportNewVolumeSet(viewportsInfo) {\n        viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.removeEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _subscribeToViewportNewVolumeSet(viewports) {\n        viewports.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.addEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _autoPanViewportIfNecessary(viewportId, renderingEngine) {\n        const viewport = renderingEngine.getViewport(viewportId);\n        const { clientWidth, clientHeight } = viewport.canvas;\n        const toolCenterCanvas = viewport.worldToCanvas(this.toolCenter);\n        const pan = this.configuration.autoPan.panSize;\n        const visiblePointCanvas = [\n            toolCenterCanvas[0],\n            toolCenterCanvas[1],\n        ];\n        if (toolCenterCanvas[0] < 0) {\n            visiblePointCanvas[0] = pan;\n        }\n        else if (toolCenterCanvas[0] > clientWidth) {\n            visiblePointCanvas[0] = clientWidth - pan;\n        }\n        if (toolCenterCanvas[1] < 0) {\n            visiblePointCanvas[1] = pan;\n        }\n        else if (toolCenterCanvas[1] > clientHeight) {\n            visiblePointCanvas[1] = clientHeight - pan;\n        }\n        if (visiblePointCanvas[0] === toolCenterCanvas[0] &&\n            visiblePointCanvas[1] === toolCenterCanvas[1]) {\n            return;\n        }\n        const visiblePointWorld = viewport.canvasToWorld(visiblePointCanvas);\n        const deltaPointsWorld = [\n            visiblePointWorld[0] - this.toolCenter[0],\n            visiblePointWorld[1] - this.toolCenter[1],\n            visiblePointWorld[2] - this.toolCenter[2],\n        ];\n        const camera = viewport.getCamera();\n        const { focalPoint, position } = camera;\n        const updatedPosition = [\n            position[0] - deltaPointsWorld[0],\n            position[1] - deltaPointsWorld[1],\n            position[2] - deltaPointsWorld[2],\n        ];\n        const updatedFocalPoint = [\n            focalPoint[0] - deltaPointsWorld[0],\n            focalPoint[1] - deltaPointsWorld[1],\n            focalPoint[2] - deltaPointsWorld[2],\n        ];\n        viewport.setCamera({\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n        viewport.render();\n    }\n    setSlabThickness(viewport, slabThickness) {\n        let actorUIDs;\n        const { filterActorUIDsToSetSlabThickness } = this.configuration;\n        if (filterActorUIDsToSetSlabThickness &&\n            filterActorUIDsToSetSlabThickness.length > 0) {\n            actorUIDs = filterActorUIDsToSetSlabThickness;\n        }\n        let blendModeToUse = this.configuration.slabThicknessBlendMode;\n        if (slabThickness === RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS) {\n            blendModeToUse = Enums.BlendModes.COMPOSITE;\n        }\n        const immediate = false;\n        viewport.setBlendMode(blendModeToUse, actorUIDs, immediate);\n        viewport.setSlabThickness(slabThickness, actorUIDs);\n    }\n    _isClockWise(a, b, c) {\n        return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]) > 0;\n    }\n    _applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta) {\n        viewportsAnnotationsToUpdate.forEach((annotation) => {\n            this._applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta);\n        });\n    }\n    _applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta) {\n        const { data } = annotation;\n        const viewport = renderingEngine.getViewport(data.viewportId);\n        const camera = viewport.getCamera();\n        const normal = camera.viewPlaneNormal;\n        const dotProd = vtkMath.dot(delta, normal);\n        const projectedDelta = [...normal];\n        vtkMath.multiplyScalar(projectedDelta, dotProd);\n        if (Math.abs(projectedDelta[0]) > 1e-3 ||\n            Math.abs(projectedDelta[1]) > 1e-3 ||\n            Math.abs(projectedDelta[2]) > 1e-3) {\n            const newFocalPoint = [0, 0, 0];\n            const newPosition = [0, 0, 0];\n            vtkMath.add(camera.focalPoint, projectedDelta, newFocalPoint);\n            vtkMath.add(camera.position, projectedDelta, newPosition);\n            viewport.setCamera({\n                focalPoint: newFocalPoint,\n                position: newPosition,\n            });\n            viewport.render();\n        }\n    }\n    _getRotationHandleNearImagePoint(viewport, annotation, canvasCoords, proximity) {\n        const { data } = annotation;\n        const { rotationPoints } = data.handles;\n        for (let i = 0; i < rotationPoints.length; i++) {\n            const point = rotationPoints[i][0];\n            const otherViewport = rotationPoints[i][1];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            if (!viewportControllable) {\n                continue;\n            }\n            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n            if (!viewportDraggableRotatable) {\n                continue;\n            }\n            const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n            if (vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {\n                data.handles.activeOperation = OPERATION.ROTATE;\n                this.editData = {\n                    annotation,\n                };\n                return point;\n            }\n        }\n        return null;\n    }\n    _getSlabThicknessHandleNearImagePoint(viewport, annotation, canvasCoords, proximity) {\n        const { data } = annotation;\n        const { slabThicknessPoints } = data.handles;\n        for (let i = 0; i < slabThicknessPoints.length; i++) {\n            const point = slabThicknessPoints[i][0];\n            const otherViewport = slabThicknessPoints[i][1];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            if (!viewportControllable) {\n                continue;\n            }\n            const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n            if (!viewportSlabThicknessControlsOn) {\n                continue;\n            }\n            const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n            if (vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {\n                data.handles.activeOperation = OPERATION.SLAB;\n                data.activeViewportIds = [otherViewport.id];\n                this.editData = {\n                    annotation,\n                };\n                return point;\n            }\n        }\n        return null;\n    }\n    _pointNearTool(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { clientWidth, clientHeight } = viewport.canvas;\n        const canvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n        const { data } = annotation;\n        const { rotationPoints } = data.handles;\n        const { slabThicknessPoints } = data.handles;\n        const viewportIdArray = [];\n        for (let i = 0; i < rotationPoints.length - 1; ++i) {\n            const otherViewport = rotationPoints[i][1];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n            if (!viewportControllable || !viewportDraggableRotatable) {\n                continue;\n            }\n            const lineSegment1 = {\n                start: {\n                    x: rotationPoints[i][2][0],\n                    y: rotationPoints[i][2][1],\n                },\n                end: {\n                    x: rotationPoints[i][3][0],\n                    y: rotationPoints[i][3][1],\n                },\n            };\n            const distanceToPoint1 = lineSegment.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            const lineSegment2 = {\n                start: {\n                    x: rotationPoints[i + 1][2][0],\n                    y: rotationPoints[i + 1][2][1],\n                },\n                end: {\n                    x: rotationPoints[i + 1][3][0],\n                    y: rotationPoints[i + 1][3][1],\n                },\n            };\n            const distanceToPoint2 = lineSegment.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n                viewportIdArray.push(otherViewport.id);\n                data.handles.activeOperation = OPERATION.DRAG;\n            }\n            i++;\n        }\n        for (let i = 0; i < slabThicknessPoints.length - 1; ++i) {\n            const otherViewport = slabThicknessPoints[i][1];\n            if (viewportIdArray.find((id) => id === otherViewport.id)) {\n                continue;\n            }\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n            if (!viewportControllable || !viewportSlabThicknessControlsOn) {\n                continue;\n            }\n            const stPointLineCanvas1 = slabThicknessPoints[i][2];\n            const stPointLineCanvas2 = slabThicknessPoints[i][3];\n            const centerCanvas = vec2.create();\n            vec2.add(centerCanvas, stPointLineCanvas1, stPointLineCanvas2);\n            vec2.scale(centerCanvas, centerCanvas, 0.5);\n            const canvasUnitVectorFromCenter = vec2.create();\n            vec2.subtract(canvasUnitVectorFromCenter, stPointLineCanvas1, centerCanvas);\n            vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n            const canvasVectorFromCenterStart = vec2.create();\n            vec2.scale(canvasVectorFromCenterStart, canvasUnitVectorFromCenter, canvasDiagonalLength * 0.05);\n            const stPointLineCanvas1Start = vec2.create();\n            const stPointLineCanvas2Start = vec2.create();\n            vec2.add(stPointLineCanvas1Start, centerCanvas, canvasVectorFromCenterStart);\n            vec2.subtract(stPointLineCanvas2Start, centerCanvas, canvasVectorFromCenterStart);\n            const lineSegment1 = {\n                start: {\n                    x: stPointLineCanvas1Start[0],\n                    y: stPointLineCanvas1Start[1],\n                },\n                end: {\n                    x: stPointLineCanvas1[0],\n                    y: stPointLineCanvas1[1],\n                },\n            };\n            const distanceToPoint1 = lineSegment.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            const lineSegment2 = {\n                start: {\n                    x: stPointLineCanvas2Start[0],\n                    y: stPointLineCanvas2Start[1],\n                },\n                end: {\n                    x: stPointLineCanvas2[0],\n                    y: stPointLineCanvas2[1],\n                },\n            };\n            const distanceToPoint2 = lineSegment.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n                viewportIdArray.push(otherViewport.id);\n                data.handles.activeOperation = null;\n            }\n            i++;\n        }\n        data.activeViewportIds = [...viewportIdArray];\n        this.editData = {\n            annotation,\n        };\n        return data.handles.activeOperation === OPERATION.DRAG ? true : false;\n    }\n}\nCrosshairsTool.toolName = 'Crosshairs';\nexport default CrosshairsTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement, VolumeViewport } from '@cornerstonejs/core';\nimport { utilities } from '@cornerstonejs/core';\nimport { getPointInLineOfSightWithCriteria } from '../utilities/planar';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nclass MIPJumpToClickTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            targetViewportIds: [],\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n    }\n    mouseClickCallback(evt) {\n        const { element, currentPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        const volumeId = viewport.getVolumeId();\n        if (!volumeId) {\n            throw new Error(`MIPJumpToClickTool: targetId is not a volumeId, you should only use MIPJumpToClickTool with a volumeId as the targetId`);\n        }\n        let maxIntensity = -Infinity;\n        const maxFn = (intensity, point) => {\n            if (intensity > maxIntensity) {\n                maxIntensity = intensity;\n                return point;\n            }\n        };\n        const brightestPoint = getPointInLineOfSightWithCriteria(viewport, currentPoints.world, volumeId, maxFn);\n        if (!brightestPoint || !brightestPoint.length) {\n            return;\n        }\n        const { targetViewportIds, toolGroupId } = this.configuration;\n        const viewports = renderingEngine.getViewports().filter((vp) => {\n            if (targetViewportIds?.indexOf(vp.id) >= 0) {\n                return true;\n            }\n            const foundToolGroup = getToolGroupForViewport(vp.id, renderingEngine.id);\n            if (toolGroupId && toolGroupId === foundToolGroup?.id) {\n                return true;\n            }\n            return false;\n        });\n        viewports.forEach((viewport) => {\n            if (viewport instanceof VolumeViewport) {\n                viewport.jumpToWorld(brightestPoint);\n            }\n            else {\n                console.warn('Cannot jump to specified world coordinates for a viewport that is not a VolumeViewport');\n            }\n        });\n    }\n}\nMIPJumpToClickTool.toolName = 'MIPJumpToClickTool';\nexport default MIPJumpToClickTool;\n","import { BaseTool } from './base';\nimport { Events } from '../enums';\nimport { getEnabledElement, StackViewport, Enums } from '@cornerstonejs/core';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { state } from '../store/state';\nimport { hideElementCursor, resetElementCursor, } from '../cursors/elementCursor';\nconst MAGNIFY_VIEWPORT_ID = 'magnify-viewport';\nclass MagnifyTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            magnifySize: 10,\n            magnifyWidth: 250,\n            magnifyHeight: 250,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._hasBeenRemoved = false;\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            if (!(viewport instanceof StackViewport)) {\n                throw new Error('MagnifyTool only works on StackViewports');\n            }\n            const referencedImageId = this._getReferencedImageId(viewport);\n            if (!referencedImageId) {\n                throw new Error('MagnifyTool: No referenced image id found, reconstructed planes not supported yet');\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                referencedImageId,\n                viewportIdsToRender,\n                enabledElement,\n                renderingEngine,\n                currentPoints,\n            };\n            this._createMagnificationViewport();\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this.preTouchStartCallback = (evt) => {\n            this.preMouseDownCallback(evt);\n        };\n        this._createMagnificationViewport = () => {\n            const { enabledElement, referencedImageId, viewportIdsToRender, renderingEngine, currentPoints, } = this.editData;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            const viewportProperties = viewport.getProperties();\n            const { rotation: originalViewportRotation } = viewport.getViewPresentation();\n            const { canvas: canvasPos, world: worldPos } = currentPoints;\n            let magnifyToolElement;\n            magnifyToolElement = element.querySelector('.magnifyTool');\n            if (magnifyToolElement === null) {\n                const magnifyElement = document.createElement('div');\n                magnifyElement.classList.add('magnifyTool');\n                magnifyElement.style.display = 'block';\n                magnifyElement.style.width = `${this.configuration.magnifyWidth}px`;\n                magnifyElement.style.height = `${this.configuration.magnifyHeight}px`;\n                magnifyElement.style.position = 'absolute';\n                magnifyToolElement = magnifyElement;\n                const viewportElement = element.querySelector('.viewport-element');\n                viewportElement.appendChild(magnifyElement);\n                const viewportInput = {\n                    viewportId: MAGNIFY_VIEWPORT_ID,\n                    type: Enums.ViewportType.STACK,\n                    element: magnifyToolElement,\n                };\n                renderingEngine.enableElement(viewportInput);\n            }\n            magnifyToolElement.style.top = `${canvasPos[1] - this.configuration.magnifyHeight / 2}px`;\n            magnifyToolElement.style.left = `${canvasPos[0] - this.configuration.magnifyWidth / 2}px`;\n            const magnifyViewport = renderingEngine.getViewport(MAGNIFY_VIEWPORT_ID);\n            magnifyViewport.setStack([referencedImageId]).then(() => {\n                if (this._hasBeenRemoved) {\n                    return;\n                }\n                magnifyViewport.setProperties(viewportProperties);\n                magnifyViewport.setViewPresentation({\n                    rotation: originalViewportRotation,\n                });\n                const { parallelScale } = viewport.getCamera();\n                const { focalPoint, position, viewPlaneNormal } = magnifyViewport.getCamera();\n                const distance = Math.sqrt(Math.pow(focalPoint[0] - position[0], 2) +\n                    Math.pow(focalPoint[1] - position[1], 2) +\n                    Math.pow(focalPoint[2] - position[2], 2));\n                const updatedFocalPoint = [\n                    worldPos[0],\n                    worldPos[1],\n                    worldPos[2],\n                ];\n                const updatedPosition = [\n                    updatedFocalPoint[0] + distance * viewPlaneNormal[0],\n                    updatedFocalPoint[1] + distance * viewPlaneNormal[1],\n                    updatedFocalPoint[2] + distance * viewPlaneNormal[2],\n                ];\n                magnifyViewport.setCamera({\n                    parallelScale: parallelScale * (1 / this.configuration.magnifySize),\n                    focalPoint: updatedFocalPoint,\n                    position: updatedPosition,\n                });\n                magnifyViewport.render();\n            });\n            magnifyToolElement.style.display = 'block';\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._cancelCallback = (evt) => {\n            evt.preventDefault();\n            evt.stopPropagation();\n            this._dragEndCallback(evt);\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { deltaPoints, element, currentPoints } = eventDetail;\n            const deltaPointsWorld = deltaPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            const magnifyViewport = renderingEngine.getViewport(MAGNIFY_VIEWPORT_ID);\n            const magnifyElement = element.querySelector('.magnifyTool');\n            if (!magnifyElement) {\n                return;\n            }\n            magnifyElement.style.top = `${canvasPos[1] - this.configuration.magnifyHeight / 2}px`;\n            magnifyElement.style.left = `${canvasPos[0] - this.configuration.magnifyWidth / 2}px`;\n            const { focalPoint, position } = magnifyViewport.getCamera();\n            const updatedPosition = [\n                position[0] + deltaPointsWorld[0],\n                position[1] + deltaPointsWorld[1],\n                position[2] + deltaPointsWorld[2],\n            ];\n            const updatedFocalPoint = [\n                focalPoint[0] + deltaPointsWorld[0],\n                focalPoint[1] + deltaPointsWorld[1],\n                focalPoint[2] + deltaPointsWorld[2],\n            ];\n            magnifyViewport.setCamera({\n                focalPoint: updatedFocalPoint,\n                position: updatedPosition,\n            });\n            magnifyViewport.render();\n        };\n        this._dragEndCallback = (evt) => {\n            let { element } = evt.detail;\n            if (element === undefined) {\n                const { enabledElement } = this.editData;\n                const { viewport } = enabledElement;\n                element = viewport.element;\n            }\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            renderingEngine.disableElement(MAGNIFY_VIEWPORT_ID);\n            const viewportElement = element.querySelector('.viewport-element');\n            const magnifyToolElement = viewportElement.querySelector('.magnifyTool');\n            viewportElement.removeChild(magnifyToolElement);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this._hasBeenRemoved = true;\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            this._hasBeenRemoved = false;\n            element.addEventListener(Events.MOUSE_UP, this._dragEndCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._dragEndCallback);\n            element.addEventListener('contextmenu', this._cancelCallback);\n            element.addEventListener(Events.TOUCH_END, this._dragEndCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._dragEndCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._dragEndCallback);\n            element.removeEventListener('contextmenu', this._cancelCallback);\n            element.removeEventListener(Events.TOUCH_END, this._dragEndCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n    }\n    _getReferencedImageId(viewport) {\n        const targetId = this.getTargetId(viewport);\n        let referencedImageId;\n        if (viewport instanceof StackViewport) {\n            referencedImageId = targetId.split('imageId:')[1];\n        }\n        return referencedImageId;\n    }\n}\nMagnifyTool.toolName = 'Magnify';\nexport default MagnifyTool;\n","import vtkOrientationMarkerWidget from '@kitware/vtk.js/Interaction/Widgets/OrientationMarkerWidget';\nimport vtkAnnotatedCubeActor from '@kitware/vtk.js/Rendering/Core/AnnotatedCubeActor';\nimport vtkAxesActor from '@kitware/vtk.js/Rendering/Core/AxesActor';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport vtkXMLPolyDataReader from '@kitware/vtk.js/IO/XML/XMLPolyDataReader';\nimport vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport { BaseTool } from './base';\nimport { Enums, eventTarget, getEnabledElementByIds, getRenderingEngines, } from '@cornerstonejs/core';\nimport { filterViewportsWithToolEnabled } from '../utilities/viewportFilters';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport { Events } from '../enums';\nvar OverlayMarkerType;\n(function (OverlayMarkerType) {\n    OverlayMarkerType[OverlayMarkerType[\"ANNOTATED_CUBE\"] = 1] = \"ANNOTATED_CUBE\";\n    OverlayMarkerType[OverlayMarkerType[\"AXES\"] = 2] = \"AXES\";\n    OverlayMarkerType[OverlayMarkerType[\"CUSTOM\"] = 3] = \"CUSTOM\";\n})(OverlayMarkerType || (OverlayMarkerType = {}));\nclass OrientationMarkerTool extends BaseTool {\n    static { this.CUBE = 1; }\n    static { this.AXIS = 2; }\n    static { this.VTPFILE = 3; }\n    static { this.OVERLAY_MARKER_TYPES = OverlayMarkerType; }\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            orientationWidget: {\n                enabled: true,\n                viewportCorner: vtkOrientationMarkerWidget.Corners.BOTTOM_RIGHT,\n                viewportSize: 0.15,\n                minPixelSize: 100,\n                maxPixelSize: 300,\n            },\n            overlayMarkerType: OrientationMarkerTool.OVERLAY_MARKER_TYPES.ANNOTATED_CUBE,\n            overlayConfiguration: {\n                [OrientationMarkerTool.OVERLAY_MARKER_TYPES.ANNOTATED_CUBE]: {\n                    faceProperties: {\n                        xPlus: { text: 'L', faceColor: '#ffff00', faceRotation: 90 },\n                        xMinus: { text: 'R', faceColor: '#ffff00', faceRotation: 270 },\n                        yPlus: {\n                            text: 'P',\n                            faceColor: '#00ffff',\n                            fontColor: 'white',\n                            faceRotation: 180,\n                        },\n                        yMinus: { text: 'A', faceColor: '#00ffff', fontColor: 'white' },\n                        zPlus: { text: 'S' },\n                        zMinus: { text: 'I' },\n                    },\n                    defaultStyle: {\n                        fontStyle: 'bold',\n                        fontFamily: 'Arial',\n                        fontColor: 'black',\n                        fontSizeScale: (res) => res / 2,\n                        faceColor: '#0000ff',\n                        edgeThickness: 0.1,\n                        edgeColor: 'black',\n                        resolution: 400,\n                    },\n                },\n                [OrientationMarkerTool.OVERLAY_MARKER_TYPES.AXES]: {},\n                [OrientationMarkerTool.OVERLAY_MARKER_TYPES.CUSTOM]: {\n                    polyDataURL: 'https://raw.githubusercontent.com/Slicer/Slicer/80ad0a04dacf134754459557bf2638c63f3d1d1b/Base/Logic/Resources/OrientationMarkers/Human.vtp',\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._resizeObservers = new Map();\n        this.onSetToolEnabled = () => {\n            this.initViewports();\n            this._subscribeToViewportEvents();\n        };\n        this.onSetToolActive = () => {\n            this.initViewports();\n            this._subscribeToViewportEvents();\n        };\n        this.onSetToolDisabled = () => {\n            this.cleanUpData();\n            this._unsubscribeToViewportNewVolumeSet();\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.resize = (viewportId) => {\n            const orientationMarker = this.orientationMarkers[viewportId];\n            if (!orientationMarker) {\n                return;\n            }\n            const { orientationWidget } = orientationMarker;\n            orientationWidget.updateViewport();\n        };\n        this.orientationMarkers = {};\n        this.updatingOrientationMarker = {};\n    }\n    _unsubscribeToViewportNewVolumeSet() {\n        const unsubscribe = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n                const { element } = viewport;\n                element.removeEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this.initViewports.bind(this));\n                const resizeObserver = this._resizeObservers.get(viewportId);\n                resizeObserver.unobserve(element);\n            });\n        };\n        eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, (evt) => {\n            if (evt.detail.toolGroupId !== this.toolGroupId) {\n                return;\n            }\n            unsubscribe();\n            this.initViewports();\n        });\n    }\n    _subscribeToViewportEvents() {\n        const subscribeToElementResize = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n                const { element } = viewport;\n                this.initViewports();\n                element.addEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this.initViewports.bind(this));\n                const resizeObserver = new ResizeObserver(() => {\n                    setTimeout(() => {\n                        const element = getEnabledElementByIds(viewportId, renderingEngineId);\n                        if (!element) {\n                            return;\n                        }\n                        const { viewport } = element;\n                        this.resize(viewportId);\n                        viewport.render();\n                    }, 100);\n                });\n                resizeObserver.observe(element);\n                this._resizeObservers.set(viewportId, resizeObserver);\n            });\n        };\n        subscribeToElementResize();\n        eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, (evt) => {\n            if (evt.detail.toolGroupId !== this.toolGroupId) {\n                return;\n            }\n            subscribeToElementResize();\n            this.initViewports();\n        });\n    }\n    cleanUpData() {\n        const renderingEngines = getRenderingEngines();\n        const renderingEngine = renderingEngines[0];\n        const viewports = renderingEngine.getViewports();\n        viewports.forEach((viewport) => {\n            const orientationMarker = this.orientationMarkers[viewport.id];\n            if (!orientationMarker) {\n                return;\n            }\n            const { actor, orientationWidget } = orientationMarker;\n            orientationWidget?.setEnabled(false);\n            orientationWidget?.delete();\n            actor?.delete();\n            const renderWindow = viewport\n                .getRenderingEngine()\n                .getOffscreenMultiRenderWindow(viewport.id)\n                .getRenderWindow();\n            renderWindow.render();\n            viewport.getRenderingEngine().render();\n            delete this.orientationMarkers[viewport.id];\n        });\n    }\n    initViewports() {\n        const renderingEngines = getRenderingEngines();\n        const renderingEngine = renderingEngines[0];\n        if (!renderingEngine) {\n            return;\n        }\n        let viewports = renderingEngine.getViewports();\n        viewports = filterViewportsWithToolEnabled(viewports, this.getToolName());\n        viewports.forEach((viewport) => {\n            const widget = viewport.getWidget(this.getToolName());\n            if (!widget || widget.isDeleted()) {\n                this.addAxisActorInViewport(viewport);\n            }\n        });\n    }\n    async addAxisActorInViewport(viewport) {\n        const viewportId = viewport.id;\n        if (!this.updatingOrientationMarker[viewportId]) {\n            this.updatingOrientationMarker[viewportId] = true;\n            const type = this.configuration.overlayMarkerType;\n            const overlayConfiguration = this.configuration.overlayConfiguration[type];\n            if (this.orientationMarkers[viewportId]) {\n                const { actor, orientationWidget } = this.orientationMarkers[viewportId];\n                viewport.getRenderer().removeActor(actor);\n                orientationWidget.setEnabled(false);\n            }\n            let actor;\n            if (type === 1) {\n                actor = this.createAnnotationCube(overlayConfiguration);\n            }\n            else if (type === 2) {\n                actor = vtkAxesActor.newInstance();\n            }\n            else if (type === 3) {\n                actor = await this.createCustomActor();\n            }\n            const renderer = viewport.getRenderer();\n            const renderWindow = viewport\n                .getRenderingEngine()\n                .getOffscreenMultiRenderWindow(viewportId)\n                .getRenderWindow();\n            const { enabled, viewportCorner, viewportSize, minPixelSize, maxPixelSize, } = this.configuration.orientationWidget;\n            const orientationWidget = vtkOrientationMarkerWidget.newInstance({\n                actor,\n                interactor: renderWindow.getInteractor(),\n                parentRenderer: renderer,\n            });\n            orientationWidget.setEnabled(enabled);\n            orientationWidget.setViewportCorner(viewportCorner);\n            orientationWidget.setViewportSize(viewportSize);\n            orientationWidget.setMinPixelSize(minPixelSize);\n            orientationWidget.setMaxPixelSize(maxPixelSize);\n            orientationWidget.updateMarkerOrientation();\n            this.orientationMarkers[viewportId] = {\n                orientationWidget,\n                actor,\n            };\n            viewport.addWidget(this.getToolName(), orientationWidget);\n            renderWindow.render();\n            viewport.getRenderingEngine().render();\n            this.updatingOrientationMarker[viewportId] = false;\n        }\n    }\n    async createCustomActor() {\n        const url = this.configuration.overlayConfiguration[OverlayMarkerType.CUSTOM]\n            .polyDataURL;\n        const response = await fetch(url);\n        const arrayBuffer = await response.arrayBuffer();\n        const vtpReader = vtkXMLPolyDataReader.newInstance();\n        vtpReader.parseAsArrayBuffer(arrayBuffer);\n        vtpReader.update();\n        const polyData = vtkPolyData.newInstance();\n        polyData.shallowCopy(vtpReader.getOutputData());\n        polyData.getPointData().setActiveScalars('Color');\n        const mapper = vtkMapper.newInstance();\n        mapper.setInputData(polyData);\n        mapper.setColorModeToDirectScalars();\n        const actor = vtkActor.newInstance();\n        actor.setMapper(mapper);\n        actor.rotateZ(180);\n        return actor;\n    }\n    createAnnotationCube(overlayConfiguration) {\n        const actor = vtkAnnotatedCubeActor.newInstance();\n        actor.setDefaultStyle({ ...overlayConfiguration.defaultStyle });\n        actor.setXPlusFaceProperty({\n            ...overlayConfiguration.faceProperties.xPlus,\n        });\n        actor.setXMinusFaceProperty({\n            ...overlayConfiguration.faceProperties.xMinus,\n        });\n        actor.setYPlusFaceProperty({\n            ...overlayConfiguration.faceProperties.yPlus,\n        });\n        actor.setYMinusFaceProperty({\n            ...overlayConfiguration.faceProperties.yMinus,\n        });\n        actor.setZPlusFaceProperty({\n            ...overlayConfiguration.faceProperties.zPlus,\n        });\n        actor.setZMinusFaceProperty({\n            ...overlayConfiguration.faceProperties.zMinus,\n        });\n        return actor;\n    }\n    async createAnnotatedCubeActor() {\n        const axes = vtkAnnotatedCubeActor.newInstance();\n        const { faceProperties, defaultStyle } = this.configuration.annotatedCube;\n        axes.setDefaultStyle(defaultStyle);\n        Object.keys(faceProperties).forEach((key) => {\n            const methodName = `set${key.charAt(0).toUpperCase() + key.slice(1)}FaceProperty`;\n            axes[methodName](faceProperties[key]);\n        });\n        return axes;\n    }\n}\nOrientationMarkerTool.toolName = 'OrientationMarker';\nexport default OrientationMarkerTool;\n","import { vec3 } from 'gl-matrix';\nimport { metaData, CONSTANTS, getRenderingEngine, utilities as csUtils, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport { drawLine as drawLineSvg } from '../drawingSvg';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nconst { EPSILON } = CONSTANTS;\nclass OverlayGridTool extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            sourceImageIds: [],\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onSetToolActive = () => {\n            this._init();\n        };\n        this._init = () => {\n            const sourceImageIds = this.configuration.sourceImageIds;\n            if (!sourceImageIds?.length) {\n                console.warn('OverlayGridTool: No sourceImageIds provided in configuration');\n                return;\n            }\n            const imagePlaneModule = metaData.get('imagePlaneModule', sourceImageIds[0]);\n            if (!imagePlaneModule) {\n                console.warn('OverlayGridTool: No imagePlaneModule found for sourceImageIds');\n                return;\n            }\n            const { frameOfReferenceUID } = imagePlaneModule;\n            const viewportsInfo = getToolGroup(this.toolGroupId).viewportsInfo;\n            if (!viewportsInfo?.length) {\n                console.warn('OverlayGridTool: No viewports found');\n                return;\n            }\n            const annotations = getAnnotations(this.getToolName(), frameOfReferenceUID);\n            if (!annotations?.length) {\n                const pointSets = sourceImageIds.map((id) => {\n                    return this.calculateImageIdPointSets(id);\n                });\n                const newAnnotation = {\n                    highlighted: true,\n                    invalidated: true,\n                    metadata: {\n                        toolName: this.getToolName(),\n                        FrameOfReferenceUID: frameOfReferenceUID,\n                        referencedImageId: null,\n                    },\n                    data: {\n                        viewportData: new Map(),\n                        pointSets,\n                    },\n                };\n                addAnnotation(newAnnotation, frameOfReferenceUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n        };\n        this.calculateImageIdPointSets = (imageId) => {\n            const { imagePositionPatient, rows, columns, rowCosines, columnCosines, rowPixelSpacing, columnPixelSpacing, } = metaData.get('imagePlaneModule', imageId);\n            const topLeft = [...imagePositionPatient];\n            const topRight = [...imagePositionPatient];\n            const bottomLeft = [...imagePositionPatient];\n            const bottomRight = [...imagePositionPatient];\n            vec3.scaleAndAdd(topRight, imagePositionPatient, columnCosines, columns * columnPixelSpacing);\n            vec3.scaleAndAdd(bottomLeft, imagePositionPatient, rowCosines, rows * rowPixelSpacing);\n            vec3.scaleAndAdd(bottomRight, bottomLeft, columnCosines, columns * columnPixelSpacing);\n            const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n            const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];\n            return { pointSet1, pointSet2 };\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const sourceImageIds = this.configuration.sourceImageIds;\n            let renderStatus = false;\n            if (!sourceImageIds?.length) {\n                return renderStatus;\n            }\n            const { viewport: targetViewport, FrameOfReferenceUID } = enabledElement;\n            const targetImageIds = targetViewport.getImageIds();\n            if (targetImageIds.length < 2) {\n                return renderStatus;\n            }\n            const annotations = getAnnotations(this.getToolName(), FrameOfReferenceUID);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const annotation = annotations[0];\n            const { annotationUID } = annotation;\n            const { focalPoint, viewPlaneNormal } = targetViewport.getCamera();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const imageIdNormal = (this.getImageIdNormal(sourceImageIds[0]));\n            if (this.isParallel(viewPlaneNormal, imageIdNormal)) {\n                return renderStatus;\n            }\n            const targetViewportPlane = csUtils.planar.planeEquation(viewPlaneNormal, focalPoint);\n            const pointSets = annotation.data.pointSets;\n            const viewportData = annotation.data.viewportData;\n            for (let i = 0; i < sourceImageIds.length; i++) {\n                const { pointSet1, pointSet2 } = pointSets[i];\n                const targetData = viewportData.get(targetViewport.id) ||\n                    this.initializeViewportData(viewportData, targetViewport.id);\n                if (!targetData.pointSetsToUse[i]) {\n                    let pointSetToUse = pointSet1;\n                    let topBottomVec = vec3.subtract(vec3.create(), pointSet1[0], pointSet1[1]);\n                    topBottomVec = vec3.normalize(vec3.create(), topBottomVec);\n                    if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {\n                        pointSetToUse = pointSet2;\n                    }\n                    targetData.pointSetsToUse[i] = pointSetToUse;\n                    targetData.lineStartsWorld[i] = csUtils.planar.linePlaneIntersection(pointSetToUse[0], pointSetToUse[1], targetViewportPlane);\n                    targetData.lineEndsWorld[i] = csUtils.planar.linePlaneIntersection(pointSetToUse[2], pointSetToUse[3], targetViewportPlane);\n                }\n                const lineStartWorld = targetData.lineStartsWorld[i];\n                const lineEndWorld = targetData.lineEndsWorld[i];\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n                const canvasCoordinates = [lineStartWorld, lineEndWorld].map((world) => targetViewport.worldToCanvas(world));\n                const dataId = `${annotationUID}-line`;\n                const lineUID = `${i}`;\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId);\n            }\n            renderStatus = true;\n            return renderStatus;\n        };\n        this.initializeViewportData = (viewportData, id) => {\n            viewportData.set(id, {\n                pointSetsToUse: [],\n                lineStartsWorld: [],\n                lineEndsWorld: [],\n            });\n            return viewportData.get(id);\n        };\n        this.isPerpendicular = (vec1, vec2) => {\n            const dot = vec3.dot(vec1, vec2);\n            return Math.abs(dot) < EPSILON;\n        };\n    }\n    isParallel(vec1, vec2) {\n        return Math.abs(vec3.dot(vec1, vec2)) > 1 - EPSILON;\n    }\n    getImageIdNormal(imageId) {\n        const { imageOrientationPatient } = metaData.get('imagePlaneModule', imageId);\n        const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n        const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n        return vec3.cross(vec3.create(), rowCosineVec, colCosineVec);\n    }\n}\nOverlayGridTool.toolName = 'OverlayGrid';\nexport default OverlayGridTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nclass PanTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            limitToViewport: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n    }\n    touchDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    mouseDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    _checkImageInViewport(viewport, deltaPointsCanvas) {\n        const { canvas } = viewport;\n        const ratio = window.devicePixelRatio;\n        const viewportLeft = 0;\n        const viewportRight = canvas.width / ratio;\n        const viewportTop = 0;\n        const viewportBottom = canvas.height / ratio;\n        const defaultActor = viewport.getDefaultActor();\n        const renderer = viewport.getRenderer();\n        let bounds;\n        if (defaultActor && csUtils.isImageActor(defaultActor)) {\n            const imageData = defaultActor.actor.getMapper().getInputData();\n            bounds = imageData.getBounds();\n        }\n        else {\n            bounds = renderer.computeVisiblePropBounds();\n        }\n        const [imageLeft, imageTop] = viewport.worldToCanvas([\n            bounds[0],\n            bounds[2],\n            bounds[4],\n        ]);\n        const [imageRight, imageBottom] = viewport.worldToCanvas([\n            bounds[1],\n            bounds[3],\n            bounds[5],\n        ]);\n        const zoom = viewport.getZoom();\n        if (zoom <= 1) {\n            if ((imageLeft + deltaPointsCanvas[0] < viewportLeft &&\n                deltaPointsCanvas[0] < 0) ||\n                (imageRight + deltaPointsCanvas[0] > viewportRight &&\n                    deltaPointsCanvas[0] > 0) ||\n                (imageTop + deltaPointsCanvas[1] < viewportTop &&\n                    deltaPointsCanvas[1] < 0) ||\n                (imageBottom + deltaPointsCanvas[1] > viewportBottom &&\n                    deltaPointsCanvas[1] > 0)) {\n                return false;\n            }\n        }\n        else {\n            if ((imageLeft + deltaPointsCanvas[0] > viewportLeft &&\n                deltaPointsCanvas[0] > 0) ||\n                (imageRight + deltaPointsCanvas[0] < viewportRight &&\n                    deltaPointsCanvas[0] < 0) ||\n                (imageTop + deltaPointsCanvas[1] > viewportTop &&\n                    deltaPointsCanvas[1] > 0) ||\n                (imageBottom + deltaPointsCanvas[1] < viewportBottom &&\n                    deltaPointsCanvas[1] < 0)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    _dragCallback(evt) {\n        const { element, deltaPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const deltaPointsWorld = deltaPoints.world;\n        const deltaPointsCanvas = deltaPoints.canvas;\n        if (deltaPointsWorld[0] === 0 &&\n            deltaPointsWorld[1] === 0 &&\n            deltaPointsWorld[2] === 0) {\n            return;\n        }\n        const viewport = enabledElement.viewport;\n        const camera = viewport.getCamera();\n        const { focalPoint, position } = camera;\n        if (this.configuration.limitToViewport &&\n            !this._checkImageInViewport(viewport, deltaPointsCanvas)) {\n            return;\n        }\n        const updatedPosition = [\n            position[0] - deltaPointsWorld[0],\n            position[1] - deltaPointsWorld[1],\n            position[2] - deltaPointsWorld[2],\n        ];\n        const updatedFocalPoint = [\n            focalPoint[0] - deltaPointsWorld[0],\n            focalPoint[1] - deltaPointsWorld[1],\n            focalPoint[2] - deltaPointsWorld[2],\n        ];\n        viewport.setCamera({\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n        viewport.render();\n    }\n}\nPanTool.toolName = 'Pan';\nexport default PanTool;\n","import { BaseVolumeViewport, getEnabledElement } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { BaseTool } from './base';\nimport angleBetweenLines from '../utilities/math/angle/angleBetweenLines';\nclass PlanarRotateTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseWheelCallback = (evt) => {\n            const { element, wheel } = evt.detail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { invert } = this.configuration;\n            const angle = wheel.direction * 10 * (invert ? -1 : 1);\n            this.setAngle(viewport, angle);\n        };\n        this.touchDragCallback = this._dragCallback.bind(this);\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    _dragCallback(evt) {\n        const { element, currentPoints, startPoints } = evt.detail;\n        const currentPointWorld = currentPoints.world;\n        const startPointWorld = startPoints.world;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const width = element.clientWidth;\n        const height = element.clientHeight;\n        const centerCanvas = [width * 0.5, height * 0.5];\n        const centerWorld = viewport.canvasToWorld(centerCanvas);\n        let angle = angleBetweenLines([startPointWorld, centerWorld], [centerWorld, currentPointWorld]);\n        const { viewPlaneNormal } = camera;\n        const v1 = vec3.sub(vec3.create(), centerWorld, startPointWorld);\n        const v2 = vec3.sub(vec3.create(), centerWorld, currentPointWorld);\n        const cross = vec3.cross(vec3.create(), v1, v2);\n        if (vec3.dot(viewPlaneNormal, cross) > 0) {\n            angle = -angle;\n        }\n        if (Number.isNaN(angle)) {\n            return;\n        }\n        this.setAngle(viewport, angle);\n    }\n    setAngle(viewport, angle) {\n        const { viewPlaneNormal, viewUp } = viewport.getCamera();\n        if (viewport instanceof BaseVolumeViewport) {\n            const rotAngle = (((angle + 360) % 360) * Math.PI) / 180;\n            const rotMat = mat4.identity(new Float32Array(16));\n            mat4.rotate(rotMat, rotMat, rotAngle, viewPlaneNormal);\n            const rotatedViewUp = vec3.transformMat4(vec3.create(), viewUp, rotMat);\n            viewport.setCamera({ viewUp: rotatedViewUp });\n        }\n        else {\n            const { rotation } = viewport.getViewPresentation();\n            viewport.setViewPresentation({\n                rotation: (rotation + angle + 360) % 360,\n            });\n        }\n        viewport.render();\n    }\n}\nPlanarRotateTool.toolName = 'PlanarRotate';\nexport default PlanarRotateTool;\n","import { getEnabledElement, StackViewport, VolumeViewport, utilities, getEnabledElementByIds, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { isAnnotationVisible } from '../stateManagement/annotation/annotationVisibility';\nimport { drawLine } from '../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { vec3 } from 'gl-matrix';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { hideElementCursor, resetElementCursor, } from '../cursors/elementCursor';\nimport { getToolGroup } from '../store/ToolGroupManager';\nclass ReferenceCursors extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            displayThreshold: 5,\n            positionSync: true,\n            disableCursor: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isDrawing = false;\n        this.isHandleOutsideImage = false;\n        this._elementWithCursor = null;\n        this._currentCursorWorldPosition = null;\n        this._currentCanvasPosition = null;\n        this._disableCursorEnabled = false;\n        this.mouseMoveCallback = (evt) => {\n            const { detail } = evt;\n            const { element, currentPoints } = detail;\n            this._currentCursorWorldPosition = currentPoints.world;\n            this._currentCanvasPosition = currentPoints.canvas;\n            this._elementWithCursor = element;\n            const annotation = this.getActiveAnnotation(element);\n            if (annotation === null) {\n                this.createInitialAnnotation(currentPoints.world, element);\n                return false;\n            }\n            this.updateAnnotationPosition(element, annotation);\n            return false;\n        };\n        this.createInitialAnnotation = (worldPos, element) => {\n            const enabledElement = getEnabledElement(element);\n            if (!enabledElement) {\n                throw new Error('No enabled element found');\n            }\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            if (!viewPlaneNormal || !viewUp) {\n                throw new Error('Camera not found');\n            }\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        points: [[...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                },\n            };\n            const annotations = getAnnotations(this.getToolName(), element);\n            if (annotations.length > 0) {\n                return null;\n            }\n            const annotationId = addAnnotation(annotation, element);\n            if (annotationId === null) {\n                return;\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.onCameraModified = (evt) => {\n            const eventDetail = evt.detail;\n            const { element, previousCamera, camera } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const viewport = enabledElement.viewport;\n            if (element !== this._elementWithCursor) {\n                return;\n            }\n            const oldFocalPoint = previousCamera.focalPoint;\n            const cameraNormal = camera.viewPlaneNormal;\n            const newFocalPoint = camera.focalPoint;\n            const deltaCameraFocalPoint = [0, 0, 0];\n            vtkMath.subtract(newFocalPoint, oldFocalPoint, deltaCameraFocalPoint);\n            if (deltaCameraFocalPoint.reduce((a, b) => a + b, 0) === 0) {\n                return;\n            }\n            const dotProduct = vtkMath.dot(deltaCameraFocalPoint, cameraNormal);\n            if (Math.abs(dotProduct) < 1e-2) {\n                return;\n            }\n            if (!this._currentCanvasPosition) {\n                return;\n            }\n            const newWorldPos = viewport.canvasToWorld(this._currentCanvasPosition);\n            this._currentCursorWorldPosition = newWorldPos;\n            this.updateAnnotationPosition(element, this.getActiveAnnotation(element));\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport, FrameOfReferenceUID } = enabledElement;\n            const isElementWithCursor = this._elementWithCursor === viewport.element;\n            if (this.configuration.positionSync && !isElementWithCursor) {\n                this.updateViewportImage(viewport);\n            }\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points } = handles;\n                if (!annotationUID) {\n                    return renderStatus;\n                }\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidthBase = parseFloat(this.getStyle('lineWidth', styleSpecifier, annotation));\n                const lineWidth = typeof lineWidthBase === 'number' && isElementWithCursor\n                    ? lineWidthBase\n                    : lineWidthBase;\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                if (points[0].some((e) => isNaN(e))) {\n                    return renderStatus;\n                }\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                const crosshairUIDs = {\n                    upper: 'upper',\n                    right: 'right',\n                    lower: 'lower',\n                    left: 'left',\n                };\n                const [x, y] = canvasCoordinates[0];\n                const centerSpace = isElementWithCursor ? 20 : 7;\n                const lineLength = isElementWithCursor ? 5 : 7;\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.upper, [x, y - (centerSpace / 2 + lineLength)], [x, y - centerSpace / 2], { color, lineDash, lineWidth });\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.lower, [x, y + (centerSpace / 2 + lineLength)], [x, y + centerSpace / 2], { color, lineDash, lineWidth });\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.right, [x + (centerSpace / 2 + lineLength), y], [x + centerSpace / 2, y], { color, lineDash, lineWidth });\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.left, [x - (centerSpace / 2 + lineLength), y], [x - centerSpace / 2, y], { color, lineDash, lineWidth });\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n        this._disableCursorEnabled = this.configuration.disableCursor;\n    }\n    onSetToolActive() {\n        this._disableCursorEnabled = this.configuration.disableCursor;\n        if (!this._disableCursorEnabled) {\n            return;\n        }\n        const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n        if (!viewportIds) {\n            return;\n        }\n        const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));\n        enabledElements.forEach((element) => {\n            if (element) {\n                hideElementCursor(element.viewport.element);\n            }\n        });\n    }\n    onSetToolDisabled() {\n        if (!this._disableCursorEnabled) {\n            return;\n        }\n        const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n        if (!viewportIds) {\n            return;\n        }\n        const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));\n        enabledElements.forEach((element) => {\n            if (element) {\n                resetElementCursor(element.viewport.element);\n            }\n        });\n    }\n    getActiveAnnotation(element) {\n        const annotations = getAnnotations(this.getToolName(), element);\n        if (!annotations.length) {\n            return null;\n        }\n        const targetAnnotation = annotations[0];\n        return targetAnnotation;\n    }\n    updateAnnotationPosition(element, annotation) {\n        const worldPos = this._currentCursorWorldPosition;\n        if (!worldPos) {\n            return;\n        }\n        if (!annotation.data?.handles?.points) {\n            return;\n        }\n        annotation.data.handles.points = [[...worldPos]];\n        annotation.invalidated = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n    }\n    filterInteractableAnnotationsForElement(element, annotations) {\n        if (!(annotations instanceof Array) || annotations.length === 0) {\n            return [];\n        }\n        const annotation = annotations[0];\n        const viewport = getEnabledElement(element)?.viewport;\n        if (!viewport) {\n            return [];\n        }\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, focalPoint } = camera;\n        if (!viewPlaneNormal || !focalPoint) {\n            return [];\n        }\n        const points = annotation.data?.handles?.points;\n        if (!(points instanceof Array) || points.length !== 1) {\n            return [];\n        }\n        const worldPos = points[0];\n        const plane = utilities.planar.planeEquation(viewPlaneNormal, focalPoint);\n        const distance = utilities.planar.planeDistanceToPoint(plane, worldPos);\n        return distance < this.configuration.displayThreshold ? [annotation] : [];\n    }\n    updateViewportImage(viewport) {\n        const currentMousePosition = this._currentCursorWorldPosition;\n        if (!currentMousePosition || currentMousePosition.some((e) => isNaN(e))) {\n            return;\n        }\n        if (viewport instanceof StackViewport) {\n            const closestIndex = utilities.getClosestStackImageIndexForPoint(currentMousePosition, viewport);\n            if (closestIndex === null) {\n                return;\n            }\n            if (closestIndex !== viewport.getCurrentImageIdIndex()) {\n                viewport.setImageIdIndex(closestIndex);\n            }\n        }\n        else if (viewport instanceof VolumeViewport) {\n            const { focalPoint, viewPlaneNormal } = viewport.getCamera();\n            if (!focalPoint || !viewPlaneNormal) {\n                return;\n            }\n            const plane = utilities.planar.planeEquation(viewPlaneNormal, focalPoint);\n            const currentDistance = utilities.planar.planeDistanceToPoint(plane, currentMousePosition, true);\n            if (Math.abs(currentDistance) < 0.5) {\n                return;\n            }\n            const normalizedViewPlane = vec3.normalize(vec3.create(), vec3.fromValues(...viewPlaneNormal));\n            const scaledPlaneNormal = vec3.scale(vec3.create(), normalizedViewPlane, currentDistance);\n            const newFocalPoint = vec3.add(vec3.create(), vec3.fromValues(...focalPoint), scaledPlaneNormal);\n            const isInBounds = true;\n            if (isInBounds) {\n                viewport.setCamera({ focalPoint: newFocalPoint });\n                const renderingEngine = viewport.getRenderingEngine();\n                if (renderingEngine) {\n                    renderingEngine.renderViewport(viewport.id);\n                }\n            }\n        }\n    }\n}\nReferenceCursors.toolName = 'ReferenceCursors';\nexport default ReferenceCursors;\n","import { vec3 } from 'gl-matrix';\nimport { getRenderingEngines, CONSTANTS, utilities as csUtils, } from '@cornerstonejs/core';\nimport { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport { addAnnotation } from '../stateManagement/annotation/annotationState';\nimport { drawLine as drawLineSvg } from '../drawingSvg';\nimport { filterViewportsWithToolEnabled } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nconst { EPSILON } = CONSTANTS;\nclass ReferenceLines extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            sourceViewportId: '',\n            enforceSameFrameOfReference: true,\n            showFullDimension: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.editData = null;\n        this._init = () => {\n            const renderingEngines = getRenderingEngines();\n            const renderingEngine = renderingEngines[0];\n            if (!renderingEngine) {\n                return;\n            }\n            let viewports = renderingEngine.getViewports();\n            viewports = filterViewportsWithToolEnabled(viewports, this.getToolName());\n            const sourceViewport = renderingEngine.getViewport(this.configuration.sourceViewportId);\n            if (!sourceViewport?.getImageData()) {\n                return;\n            }\n            const { element } = sourceViewport;\n            const { viewUp, viewPlaneNormal } = sourceViewport.getCamera();\n            const sourceViewportCanvasCornersInWorld = csUtils.getViewportImageCornersInWorld(sourceViewport);\n            let annotation = this.editData?.annotation;\n            const FrameOfReferenceUID = sourceViewport.getFrameOfReferenceUID();\n            if (!annotation) {\n                const newAnnotation = {\n                    highlighted: true,\n                    invalidated: true,\n                    metadata: {\n                        toolName: this.getToolName(),\n                        viewPlaneNormal: [...viewPlaneNormal],\n                        viewUp: [...viewUp],\n                        FrameOfReferenceUID,\n                        referencedImageId: null,\n                    },\n                    data: {\n                        handles: {\n                            points: sourceViewportCanvasCornersInWorld,\n                        },\n                    },\n                };\n                addAnnotation(newAnnotation, element);\n                annotation = newAnnotation;\n            }\n            else {\n                this.editData.annotation.data.handles.points =\n                    sourceViewportCanvasCornersInWorld;\n            }\n            this.editData = {\n                sourceViewportId: sourceViewport.id,\n                renderingEngine,\n                annotation,\n            };\n            triggerAnnotationRenderForViewportIds(viewports\n                .filter((viewport) => viewport.id !== sourceViewport.id)\n                .map((viewport) => viewport.id));\n        };\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onSetToolConfiguration = () => {\n            this._init();\n        };\n        this.onCameraModified = (evt) => {\n            this._init();\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const { viewport: targetViewport } = enabledElement;\n            if (!this.editData) {\n                return false;\n            }\n            const { annotation, sourceViewportId } = this.editData;\n            let renderStatus = false;\n            const { viewport: sourceViewport } = getEnabledElementByViewportId(sourceViewportId) || {};\n            if (!sourceViewport) {\n                return renderStatus;\n            }\n            if (sourceViewport.id === targetViewport.id) {\n                return renderStatus;\n            }\n            if (!annotation || !annotation?.data?.handles?.points) {\n                return renderStatus;\n            }\n            if (this.configuration.enforceSameFrameOfReference &&\n                sourceViewport.getFrameOfReferenceUID() !==\n                    targetViewport.getFrameOfReferenceUID()) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const topLeft = annotation.data.handles.points[0];\n            const topRight = annotation.data.handles.points[1];\n            const bottomLeft = annotation.data.handles.points[2];\n            const bottomRight = annotation.data.handles.points[3];\n            const { focalPoint, viewPlaneNormal, viewUp } = targetViewport.getCamera();\n            const { viewPlaneNormal: sourceViewPlaneNormal } = sourceViewport.getCamera();\n            if (this.isParallel(viewPlaneNormal, sourceViewPlaneNormal)) {\n                return renderStatus;\n            }\n            const targetViewportPlane = csUtils.planar.planeEquation(viewPlaneNormal, focalPoint);\n            const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n            const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];\n            let pointSetToUse = pointSet1;\n            let topBottomVec = vec3.subtract(vec3.create(), pointSet1[0], pointSet1[1]);\n            topBottomVec = vec3.normalize(vec3.create(), topBottomVec);\n            let topRightVec = vec3.subtract(vec3.create(), pointSet1[2], pointSet1[0]);\n            topRightVec = vec3.normalize(vec3.create(), topRightVec);\n            const newNormal = vec3.cross(vec3.create(), topBottomVec, topRightVec);\n            if (this.isParallel(newNormal, viewPlaneNormal)) {\n                return renderStatus;\n            }\n            if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {\n                pointSetToUse = pointSet2;\n            }\n            const lineStartWorld = csUtils.planar.linePlaneIntersection(pointSetToUse[0], pointSetToUse[1], targetViewportPlane);\n            const lineEndWorld = csUtils.planar.linePlaneIntersection(pointSetToUse[2], pointSetToUse[3], targetViewportPlane);\n            const { annotationUID } = annotation;\n            styleSpecifier.annotationUID = annotationUID;\n            const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n            const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n            const color = this.getStyle('color', styleSpecifier, annotation);\n            const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n            let canvasCoordinates = [lineStartWorld, lineEndWorld].map((world) => targetViewport.worldToCanvas(world));\n            if (this.configuration.showFullDimension) {\n                canvasCoordinates = this.handleFullDimension(targetViewport, lineStartWorld, viewPlaneNormal, viewUp, lineEndWorld, canvasCoordinates);\n            }\n            if (canvasCoordinates.length < 2) {\n                return renderStatus;\n            }\n            const dataId = `${annotationUID}-line`;\n            const lineUID = '1';\n            drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                color,\n                width: lineWidth,\n                lineDash,\n                shadow,\n            }, dataId);\n            renderStatus = true;\n            return renderStatus;\n        };\n        this.isPerpendicular = (vec1, vec2) => {\n            const dot = vec3.dot(vec1, vec2);\n            return Math.abs(dot) < EPSILON;\n        };\n    }\n    handleFullDimension(targetViewport, lineStartWorld, viewPlaneNormal, viewUp, lineEndWorld, canvasCoordinates) {\n        const renderingEngine = targetViewport.getRenderingEngine();\n        const targetId = this.getTargetId(targetViewport);\n        const targetImage = this.getTargetImageData(targetId);\n        const referencedImageId = this.getReferencedImageId(targetViewport, lineStartWorld, viewPlaneNormal, viewUp);\n        if (referencedImageId && targetImage) {\n            try {\n                const { imageData, dimensions } = targetImage;\n                const [topLeftImageCoord, topRightImageCoord, bottomRightImageCoord, bottomLeftImageCoord,] = [\n                    imageData.indexToWorld([0, 0, 0]),\n                    imageData.indexToWorld([dimensions[0] - 1, 0, 0]),\n                    imageData.indexToWorld([\n                        dimensions[0] - 1,\n                        dimensions[1] - 1,\n                        0,\n                    ]),\n                    imageData.indexToWorld([0, dimensions[1] - 1, 0]),\n                ].map((world) => csUtils.worldToImageCoords(referencedImageId, world));\n                const [lineStartImageCoord, lineEndImageCoord] = [\n                    lineStartWorld,\n                    lineEndWorld,\n                ].map((world) => csUtils.worldToImageCoords(referencedImageId, world));\n                canvasCoordinates = [\n                    [topLeftImageCoord, topRightImageCoord],\n                    [topRightImageCoord, bottomRightImageCoord],\n                    [bottomLeftImageCoord, bottomRightImageCoord],\n                    [topLeftImageCoord, bottomLeftImageCoord],\n                ]\n                    .map(([start, end]) => this.intersectInfiniteLines(start, end, lineStartImageCoord, lineEndImageCoord))\n                    .filter((point) => point && this.isInBound(point, dimensions))\n                    .map((point) => {\n                    const world = csUtils.imageToWorldCoords(referencedImageId, point);\n                    return targetViewport.worldToCanvas(world);\n                });\n            }\n            catch (err) {\n                console.log(err);\n            }\n        }\n        return canvasCoordinates;\n    }\n    intersectInfiniteLines(line1Start, line1End, line2Start, line2End) {\n        const [x1, y1] = line1Start;\n        const [x2, y2] = line1End;\n        const [x3, y3] = line2Start;\n        const [x4, y4] = line2End;\n        const a1 = y2 - y1;\n        const b1 = x1 - x2;\n        const c1 = x2 * y1 - x1 * y2;\n        const a2 = y4 - y3;\n        const b2 = x3 - x4;\n        const c2 = x4 * y3 - x3 * y4;\n        if (Math.abs(a1 * b2 - a2 * b1) < EPSILON) {\n            return;\n        }\n        const x = (b1 * c2 - b2 * c1) / (a1 * b2 - a2 * b1);\n        const y = (a2 * c1 - a1 * c2) / (a1 * b2 - a2 * b1);\n        return [x, y];\n    }\n    isParallel(vec1, vec2) {\n        return Math.abs(vec3.dot(vec1, vec2)) > 1 - EPSILON;\n    }\n    isInBound(point, dimensions) {\n        return (point[0] >= 0 &&\n            point[0] <= dimensions[0] &&\n            point[1] >= 0 &&\n            point[1] <= dimensions[1]);\n    }\n}\nReferenceLines.toolName = 'ReferenceLines';\nexport default ReferenceLines;\n","import AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport { vec3 } from 'gl-matrix';\nimport { getEnabledElementByIds, getRenderingEngines, utilities as csUtils, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { drawLine as drawLineSvg, drawTextBox as drawTextBoxSvg, } from '../drawingSvg';\nimport { getToolGroup } from '../store/ToolGroupManager';\nconst viewportsWithAnnotations = [];\nclass ScaleOverlayTool extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            viewportId: '',\n            scaleLocation: 'bottom',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.editData = null;\n        this._init = () => {\n            const renderingEngines = getRenderingEngines();\n            const renderingEngine = renderingEngines[0];\n            if (!renderingEngine) {\n                return;\n            }\n            const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n            if (!viewportIds) {\n                return;\n            }\n            const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));\n            let { viewport } = enabledElements[0];\n            const { FrameOfReferenceUID } = enabledElements[0];\n            if (this.configuration.viewportId) {\n                enabledElements.forEach((element) => {\n                    if (element.viewport.id == this.configuration.viewportId) {\n                        viewport = element.viewport;\n                    }\n                });\n            }\n            if (!viewport) {\n                return;\n            }\n            const { viewUp, viewPlaneNormal } = viewport.getCamera();\n            const viewportCanvasCornersInWorld = csUtils.getViewportImageCornersInWorld(viewport);\n            let annotation = this.editData?.annotation;\n            const annotations = getAnnotations(this.getToolName(), viewport.element);\n            if (annotations.length) {\n                annotation = annotations.filter((thisAnnotation) => thisAnnotation.data.viewportId == viewport.id)[0];\n            }\n            enabledElements.forEach((element) => {\n                const { viewport } = element;\n                if (!viewportsWithAnnotations.includes(viewport.id)) {\n                    const newAnnotation = {\n                        metadata: {\n                            toolName: this.getToolName(),\n                            viewPlaneNormal: [...viewPlaneNormal],\n                            viewUp: [...viewUp],\n                            FrameOfReferenceUID,\n                            referencedImageId: null,\n                        },\n                        data: {\n                            handles: {\n                                points: csUtils.getViewportImageCornersInWorld(viewport),\n                            },\n                            viewportId: viewport.id,\n                        },\n                    };\n                    viewportsWithAnnotations.push(viewport.id);\n                    addAnnotation(newAnnotation, viewport.element);\n                    annotation = newAnnotation;\n                }\n            });\n            if (this.editData?.annotation &&\n                this.editData.annotation.data.viewportId == viewport.id) {\n                this.editData.annotation.data.handles.points =\n                    viewportCanvasCornersInWorld;\n                this.editData.annotation.data.viewportId = viewport.id;\n            }\n            this.editData = {\n                viewport,\n                renderingEngine,\n                annotation,\n            };\n        };\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onCameraModified = (evt) => {\n            this.configuration.viewportId = evt.detail.viewportId;\n            this._init();\n        };\n        this.computeScaleSize = (worldWidthViewport, worldHeightViewport, location) => {\n            const scaleSizes = [\n                16000, 8000, 4000, 2000, 1000, 500, 250, 100, 50, 25, 10, 5, 2,\n            ];\n            let currentScaleSize;\n            if (location == 'top' || location == 'bottom') {\n                currentScaleSize = scaleSizes.filter((scaleSize) => scaleSize < worldWidthViewport * 0.6 &&\n                    scaleSize > worldWidthViewport * 0.2);\n            }\n            else {\n                currentScaleSize = scaleSizes.filter((scaleSize) => scaleSize < worldHeightViewport * 0.6 &&\n                    scaleSize > worldHeightViewport * 0.2);\n            }\n            return currentScaleSize[0];\n        };\n        this.computeEndScaleTicks = (canvasCoordinates, location) => {\n            const locationTickOffset = {\n                bottom: [\n                    [0, -10],\n                    [0, -10],\n                ],\n                top: [\n                    [0, 10],\n                    [0, 10],\n                ],\n                left: [\n                    [0, 0],\n                    [10, 0],\n                ],\n                right: [\n                    [0, 0],\n                    [-10, 0],\n                ],\n            };\n            const endTick1 = [\n                [\n                    canvasCoordinates[1][0] + locationTickOffset[location][0][0],\n                    canvasCoordinates[1][1] + locationTickOffset[location][0][0],\n                ],\n                [\n                    canvasCoordinates[1][0] + locationTickOffset[location][1][0],\n                    canvasCoordinates[1][1] + locationTickOffset[location][1][1],\n                ],\n            ];\n            const endTick2 = [\n                [\n                    canvasCoordinates[0][0] + locationTickOffset[location][0][0],\n                    canvasCoordinates[0][1] + locationTickOffset[location][0][0],\n                ],\n                [\n                    canvasCoordinates[0][0] + locationTickOffset[location][1][0],\n                    canvasCoordinates[0][1] + locationTickOffset[location][1][1],\n                ],\n            ];\n            return {\n                endTick1: endTick1,\n                endTick2: endTick2,\n            };\n        };\n        this.computeInnerScaleTicks = (scaleSize, location, annotationUID, leftTick, rightTick) => {\n            let canvasScaleSize;\n            if (location == 'bottom' || location == 'top') {\n                canvasScaleSize = rightTick[0][0] - leftTick[0][0];\n            }\n            else if (location == 'left' || location == 'right') {\n                canvasScaleSize = rightTick[0][1] - leftTick[0][1];\n            }\n            const tickIds = [];\n            const tickUIDs = [];\n            const tickCoordinates = [];\n            let numberSmallTicks = scaleSize;\n            if (scaleSize >= 50) {\n                numberSmallTicks = scaleSize / 10;\n            }\n            const tickSpacing = canvasScaleSize / numberSmallTicks;\n            for (let i = 0; i < numberSmallTicks - 1; i++) {\n                const locationOffset = {\n                    bottom: [\n                        [tickSpacing * (i + 1), 0],\n                        [tickSpacing * (i + 1), 5],\n                    ],\n                    top: [\n                        [tickSpacing * (i + 1), 0],\n                        [tickSpacing * (i + 1), -5],\n                    ],\n                    left: [\n                        [0, tickSpacing * (i + 1)],\n                        [-5, tickSpacing * (i + 1)],\n                    ],\n                    right: [\n                        [0, tickSpacing * (i + 1)],\n                        [5, tickSpacing * (i + 1)],\n                    ],\n                };\n                tickIds.push(`${annotationUID}-tick${i}`);\n                tickUIDs.push(`tick${i}`);\n                if ((i + 1) % 5 == 0) {\n                    tickCoordinates.push([\n                        [\n                            leftTick[0][0] + locationOffset[location][0][0],\n                            leftTick[0][1] + locationOffset[location][0][1],\n                        ],\n                        [\n                            leftTick[1][0] + locationOffset[location][0][0],\n                            leftTick[1][1] + locationOffset[location][0][1],\n                        ],\n                    ]);\n                }\n                else {\n                    tickCoordinates.push([\n                        [\n                            leftTick[0][0] + locationOffset[location][0][0],\n                            leftTick[0][1] + locationOffset[location][0][1],\n                        ],\n                        [\n                            leftTick[1][0] + locationOffset[location][1][0],\n                            leftTick[1][1] + locationOffset[location][1][1],\n                        ],\n                    ]);\n                }\n            }\n            return { tickIds, tickUIDs, tickCoordinates };\n        };\n        this.computeWorldScaleCoordinates = (scaleSize, location, pointSet) => {\n            let worldCoordinates;\n            let topBottomVec = vec3.subtract(vec3.create(), pointSet[0], pointSet[1]);\n            topBottomVec = vec3.normalize(vec3.create(), topBottomVec);\n            let topRightVec = vec3.subtract(vec3.create(), pointSet[2], pointSet[0]);\n            topRightVec = vec3.normalize(vec3.create(), topRightVec);\n            const midpointLocation = {\n                bottom: [pointSet[1], pointSet[2]],\n                top: [pointSet[0], pointSet[3]],\n                right: [pointSet[2], pointSet[3]],\n                left: [pointSet[0], pointSet[1]],\n            };\n            const midpoint = vec3\n                .add(vec3.create(), midpointLocation[location][0], midpointLocation[location][0])\n                .map((i) => i / 2);\n            const offset = scaleSize /\n                2 /\n                Math.sqrt(Math.pow(topBottomVec[0], 2) +\n                    Math.pow(topBottomVec[1], 2) +\n                    Math.pow(topBottomVec[2], 2));\n            if (location == 'top' || location == 'bottom') {\n                worldCoordinates = [\n                    vec3.subtract(vec3.create(), midpoint, topRightVec.map((i) => i * offset)),\n                    vec3.add(vec3.create(), midpoint, topRightVec.map((i) => i * offset)),\n                ];\n            }\n            else if (location == 'left' || location == 'right') {\n                worldCoordinates = [\n                    vec3.add(vec3.create(), midpoint, topBottomVec.map((i) => i * offset)),\n                    vec3.subtract(vec3.create(), midpoint, topBottomVec.map((i) => i * offset)),\n                ];\n            }\n            return worldCoordinates;\n        };\n        this.computeCanvasScaleCoordinates = (canvasSize, canvasCoordinates, vscaleBounds, hscaleBounds, location) => {\n            let scaleCanvasCoordinates;\n            if (location == 'top' || location == 'bottom') {\n                const worldDistanceOnCanvas = canvasCoordinates[0][0] - canvasCoordinates[1][0];\n                scaleCanvasCoordinates = [\n                    [canvasSize.width / 2 - worldDistanceOnCanvas / 2, vscaleBounds.height],\n                    [canvasSize.width / 2 + worldDistanceOnCanvas / 2, vscaleBounds.height],\n                ];\n            }\n            else if (location == 'left' || location == 'right') {\n                const worldDistanceOnCanvas = canvasCoordinates[0][1] - canvasCoordinates[1][1];\n                scaleCanvasCoordinates = [\n                    [hscaleBounds.width, canvasSize.height / 2 - worldDistanceOnCanvas / 2],\n                    [hscaleBounds.width, canvasSize.height / 2 + worldDistanceOnCanvas / 2],\n                ];\n            }\n            return scaleCanvasCoordinates;\n        };\n        this.computeScaleBounds = (canvasSize, horizontalReduction, verticalReduction, location) => {\n            const hReduction = horizontalReduction * Math.min(1000, canvasSize.width);\n            const vReduction = verticalReduction * Math.min(1000, canvasSize.height);\n            const locationBounds = {\n                bottom: [-vReduction, -hReduction],\n                top: [vReduction, hReduction],\n                left: [vReduction, hReduction],\n                right: [-vReduction, -hReduction],\n            };\n            const canvasBounds = {\n                bottom: [canvasSize.height, canvasSize.width],\n                top: [0, canvasSize.width],\n                left: [canvasSize.height, 0],\n                right: [canvasSize.height, canvasSize.width],\n            };\n            return {\n                height: canvasBounds[location][0] + locationBounds[location][0],\n                width: canvasBounds[location][1] + locationBounds[location][1],\n            };\n        };\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this.editData || !this.editData.viewport) {\n            return;\n        }\n        const location = this.configuration.scaleLocation;\n        const { viewport } = enabledElement;\n        const annotations = getAnnotations(this.getToolName(), viewport.element);\n        const annotation = annotations.filter((thisAnnotation) => thisAnnotation.data.viewportId == viewport.id)[0];\n        const canvas = enabledElement.viewport.canvas;\n        const renderStatus = false;\n        if (!viewport) {\n            return renderStatus;\n        }\n        const styleSpecifier = {\n            toolGroupId: this.toolGroupId,\n            toolName: this.getToolName(),\n            viewportId: enabledElement.viewport.id,\n        };\n        const canvasSize = {\n            width: canvas.width / window.devicePixelRatio || 1,\n            height: canvas.height / window.devicePixelRatio || 1,\n        };\n        const topLeft = annotation.data.handles.points[0];\n        const topRight = annotation.data.handles.points[1];\n        const bottomLeft = annotation.data.handles.points[2];\n        const bottomRight = annotation.data.handles.points[3];\n        const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n        const worldWidthViewport = vec3.distance(bottomLeft, bottomRight);\n        const worldHeightViewport = vec3.distance(topLeft, bottomLeft);\n        const hscaleBounds = this.computeScaleBounds(canvasSize, 0.05, 0.05, location);\n        const vscaleBounds = this.computeScaleBounds(canvasSize, 0.05, 0.05, location);\n        const scaleSize = this.computeScaleSize(worldWidthViewport, worldHeightViewport, location);\n        const canvasCoordinates = this.computeWorldScaleCoordinates(scaleSize, location, pointSet1).map((world) => viewport.worldToCanvas(world));\n        const scaleCanvasCoordinates = this.computeCanvasScaleCoordinates(canvasSize, canvasCoordinates, vscaleBounds, hscaleBounds, location);\n        const scaleTicks = this.computeEndScaleTicks(scaleCanvasCoordinates, location);\n        const { annotationUID } = annotation;\n        styleSpecifier.annotationUID = annotationUID;\n        const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n        const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n        const color = this.getStyle('color', styleSpecifier, annotation);\n        const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n        const scaleId = `${annotationUID}-scaleline`;\n        const scaleLineUID = '1';\n        drawLineSvg(svgDrawingHelper, annotationUID, scaleLineUID, scaleCanvasCoordinates[0], scaleCanvasCoordinates[1], {\n            color,\n            width: lineWidth,\n            lineDash,\n            shadow,\n        }, scaleId);\n        const leftTickId = `${annotationUID}-left`;\n        const leftTickUID = '2';\n        drawLineSvg(svgDrawingHelper, annotationUID, leftTickUID, scaleTicks.endTick1[0], scaleTicks.endTick1[1], {\n            color,\n            width: lineWidth,\n            lineDash,\n            shadow,\n        }, leftTickId);\n        const rightTickId = `${annotationUID}-right`;\n        const rightTickUID = '3';\n        drawLineSvg(svgDrawingHelper, annotationUID, rightTickUID, scaleTicks.endTick2[0], scaleTicks.endTick2[1], {\n            color,\n            width: lineWidth,\n            lineDash,\n            shadow,\n        }, rightTickId);\n        const locationTextOffest = {\n            bottom: [-10, -42],\n            top: [-12, -35],\n            left: [-40, -20],\n            right: [-50, -20],\n        };\n        const textCanvasCoordinates = [\n            scaleCanvasCoordinates[0][0] + locationTextOffest[location][0],\n            scaleCanvasCoordinates[0][1] + locationTextOffest[location][1],\n        ];\n        const textBoxLines = this._getTextLines(scaleSize);\n        const { tickIds, tickUIDs, tickCoordinates } = this.computeInnerScaleTicks(scaleSize, location, annotationUID, scaleTicks.endTick1, scaleTicks.endTick2);\n        for (let i = 0; i < tickUIDs.length; i++) {\n            drawLineSvg(svgDrawingHelper, annotationUID, tickUIDs[i], tickCoordinates[i][0], tickCoordinates[i][1], {\n                color,\n                width: lineWidth,\n                lineDash,\n                shadow,\n            }, tickIds[i]);\n        }\n        const textUID = 'text0';\n        drawTextBoxSvg(svgDrawingHelper, annotationUID, textUID, textBoxLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], {\n            fontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif',\n            fontSize: '14px',\n            lineDash: '2,3',\n            lineWidth: '1',\n            shadow: true,\n            color: color,\n        });\n        return renderStatus;\n    }\n    _getTextLines(scaleSize) {\n        let scaleSizeDisplayValue;\n        let scaleSizeUnits;\n        if (scaleSize >= 50) {\n            scaleSizeDisplayValue = scaleSize / 10;\n            scaleSizeUnits = ' cm';\n        }\n        else {\n            scaleSizeDisplayValue = scaleSize;\n            scaleSizeUnits = ' mm';\n        }\n        const textLines = [scaleSizeDisplayValue.toString().concat(scaleSizeUnits)];\n        return textLines;\n    }\n}\nScaleOverlayTool.toolName = 'ScaleOverlay';\nexport default ScaleOverlayTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { getAnnotations } from '../stateManagement';\nimport { point } from '../utilities/math';\nimport { Events, ToolModes, AnnotationStyleStates, ChangeTypes, } from '../enums';\nimport { triggerAnnotationRenderForViewportIds } from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { hideElementCursor, resetElementCursor, } from '../cursors/elementCursor';\nimport { getStyleProperty } from '../stateManagement/annotation/config/helpers';\nimport { triggerAnnotationModified } from '../stateManagement/annotation/helpers/state';\nimport CircleSculptCursor from './SculptorTool/CircleSculptCursor';\nimport { distancePointToContour } from './distancePointToContour';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nclass SculptorTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            minSpacing: 1,\n            referencedToolNames: [\n                'PlanarFreehandROI',\n                'PlanarFreehandContourSegmentationTool',\n            ],\n            toolShape: 'circle',\n            referencedToolName: 'PlanarFreehandROI',\n            updateCursorSize: 'dynamic',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.registeredShapes = new Map();\n        this.isActive = false;\n        this.commonData = {\n            activeAnnotationUID: null,\n            viewportIdsToRender: [],\n            isEditingOpenContour: false,\n            canvasLocation: undefined,\n        };\n        this.preMouseDownCallback = (evt) => {\n            const eventData = evt.detail;\n            const element = eventData.element;\n            this.configureToolSize(evt);\n            this.selectFreehandTool(eventData);\n            if (this.commonData.activeAnnotationUID === null) {\n                return;\n            }\n            this.isActive = true;\n            hideElementCursor(element);\n            this.activateModify(element);\n            return true;\n        };\n        this.mouseMoveCallback = (evt) => {\n            if (this.mode === ToolModes.Active) {\n                this.configureToolSize(evt);\n                this.updateCursor(evt);\n            }\n            else {\n                this.commonData.canvasLocation = undefined;\n            }\n        };\n        this.endCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const config = this.configuration;\n            const enabledElement = getEnabledElement(element);\n            this.isActive = false;\n            this.deactivateModify(element);\n            resetElementCursor(element);\n            const { renderingEngineId, viewportId } = enabledElement;\n            const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n            const toolInstance = toolGroup.getToolInstance(config.referencedToolName);\n            const annotations = this.filterSculptableAnnotationsForElement(element);\n            const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);\n            if (toolInstance.configuration.calculateStats) {\n                activeAnnotation.invalidated = true;\n            }\n            triggerAnnotationModified(activeAnnotation, element, ChangeTypes.HandlesUpdated);\n        };\n        this.dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const element = eventData.element;\n            this.updateCursor(evt);\n            const annotations = this.filterSculptableAnnotationsForElement(element);\n            const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);\n            if (!annotations?.length || !this.isActive) {\n                return;\n            }\n            const points = activeAnnotation.data.contour.polyline;\n            this.sculpt(eventData, points);\n        };\n        this.registerShapes(CircleSculptCursor.shapeName, CircleSculptCursor);\n        this.setToolShape(this.configuration.toolShape);\n    }\n    registerShapes(shapeName, shapeClass) {\n        const shape = new shapeClass();\n        this.registeredShapes.set(shapeName, shape);\n    }\n    sculpt(eventData, points) {\n        const config = this.configuration;\n        const element = eventData.element;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        this.sculptData = {\n            mousePoint: eventData.currentPoints.world,\n            mouseCanvasPoint: eventData.currentPoints.canvas,\n            deltaWorld: eventData.deltaPoints.world,\n            points,\n            maxSpacing: cursorShape.getMaxSpacing(config.minSpacing),\n            element: element,\n        };\n        const pushedHandles = cursorShape.pushHandles(viewport, this.sculptData);\n        if (pushedHandles.first !== undefined) {\n            this.insertNewHandles(pushedHandles);\n        }\n    }\n    interpolatePointsWithinMaxSpacing(i, points, indicesToInsertAfter, maxSpacing) {\n        const { element } = this.sculptData;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const nextHandleIndex = contourIndex(i + 1, points.length);\n        const currentCanvasPoint = viewport.worldToCanvas(points[i]);\n        const nextCanvasPoint = viewport.worldToCanvas(points[nextHandleIndex]);\n        const distanceToNextHandle = point.distanceToPoint(currentCanvasPoint, nextCanvasPoint);\n        if (distanceToNextHandle > maxSpacing) {\n            indicesToInsertAfter.push(i);\n        }\n    }\n    updateCursor(evt) {\n        const eventData = evt.detail;\n        const element = eventData.element;\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine, viewport } = enabledElement;\n        this.commonData.viewportIdsToRender = [viewport.id];\n        const annotations = this.filterSculptableAnnotationsForElement(element);\n        if (!annotations?.length) {\n            return;\n        }\n        const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);\n        this.commonData.canvasLocation = eventData.currentPoints.canvas;\n        if (this.isActive) {\n            activeAnnotation.highlighted = true;\n        }\n        else {\n            const cursorShape = this.registeredShapes.get(this.selectedShape);\n            const canvasCoords = eventData.currentPoints.canvas;\n            if (this.configuration.updateCursorSize === 'dynamic') {\n                cursorShape.updateToolSize(canvasCoords, viewport, activeAnnotation);\n            }\n        }\n        triggerAnnotationRenderForViewportIds(this.commonData.viewportIdsToRender);\n    }\n    filterSculptableAnnotationsForElement(element) {\n        const config = this.configuration;\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngineId, viewportId } = enabledElement;\n        const sculptableAnnotations = [];\n        const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n        const toolInstance = toolGroup.getToolInstance(config.referencedToolName);\n        config.referencedToolNames.forEach((referencedToolName) => {\n            const annotations = getAnnotations(referencedToolName, element);\n            if (annotations) {\n                sculptableAnnotations.push(...annotations);\n            }\n        });\n        return toolInstance.filterInteractableAnnotationsForElement(element, sculptableAnnotations);\n    }\n    configureToolSize(evt) {\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        cursorShape.configureToolSize(evt);\n    }\n    insertNewHandles(pushedHandles) {\n        const indicesToInsertAfter = this.findNewHandleIndices(pushedHandles);\n        let newIndexModifier = 0;\n        for (let i = 0; i < indicesToInsertAfter?.length; i++) {\n            const insertIndex = indicesToInsertAfter[i] + 1 + newIndexModifier;\n            this.insertHandleRadially(insertIndex);\n            newIndexModifier++;\n        }\n    }\n    findNewHandleIndices(pushedHandles) {\n        const { points, maxSpacing } = this.sculptData;\n        const indicesToInsertAfter = [];\n        for (let i = pushedHandles.first; i <= pushedHandles.last; i++) {\n            this.interpolatePointsWithinMaxSpacing(i, points, indicesToInsertAfter, maxSpacing);\n        }\n        return indicesToInsertAfter;\n    }\n    insertHandleRadially(insertIndex) {\n        const { points } = this.sculptData;\n        if (insertIndex > points.length - 1 &&\n            this.commonData.isEditingOpenContour) {\n            return;\n        }\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        const previousIndex = insertIndex - 1;\n        const nextIndex = contourIndex(insertIndex, points.length);\n        const insertPosition = cursorShape.getInsertPosition(previousIndex, nextIndex, this.sculptData);\n        const handleData = insertPosition;\n        points.splice(insertIndex, 0, handleData);\n    }\n    selectFreehandTool(eventData) {\n        const closestAnnotationUID = this.getClosestFreehandToolOnElement(eventData);\n        if (closestAnnotationUID === undefined) {\n            return;\n        }\n        this.commonData.activeAnnotationUID = closestAnnotationUID;\n    }\n    getClosestFreehandToolOnElement(eventData) {\n        const { element } = eventData;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const config = this.configuration;\n        const annotations = this.filterSculptableAnnotationsForElement(element);\n        if (!annotations?.length) {\n            return;\n        }\n        const canvasPoints = eventData.currentPoints.canvas;\n        const closest = {\n            distance: Infinity,\n            toolIndex: undefined,\n            annotationUID: undefined,\n        };\n        for (let i = 0; i < annotations?.length; i++) {\n            if (annotations[i].isLocked || !annotations[i].isVisible) {\n                continue;\n            }\n            const distanceFromTool = distancePointToContour(viewport, annotations[i], canvasPoints);\n            if (distanceFromTool === -1) {\n                continue;\n            }\n            if (distanceFromTool < closest.distance) {\n                closest.distance = distanceFromTool;\n                closest.toolIndex = i;\n                closest.annotationUID = annotations[i].annotationUID;\n            }\n        }\n        this.commonData.isEditingOpenContour =\n            !annotations[closest.toolIndex].data.contour.closed;\n        config.referencedToolName =\n            annotations[closest.toolIndex].metadata.toolName;\n        return closest.annotationUID;\n    }\n    activateModify(element) {\n        element.addEventListener(Events.MOUSE_UP, this.endCallback);\n        element.addEventListener(Events.MOUSE_CLICK, this.endCallback);\n        element.addEventListener(Events.MOUSE_DRAG, this.dragCallback);\n        element.addEventListener(Events.TOUCH_TAP, this.endCallback);\n        element.addEventListener(Events.TOUCH_END, this.endCallback);\n        element.addEventListener(Events.TOUCH_DRAG, this.dragCallback);\n    }\n    deactivateModify(element) {\n        element.removeEventListener(Events.MOUSE_UP, this.endCallback);\n        element.removeEventListener(Events.MOUSE_CLICK, this.endCallback);\n        element.removeEventListener(Events.MOUSE_DRAG, this.dragCallback);\n        element.removeEventListener(Events.TOUCH_TAP, this.endCallback);\n        element.removeEventListener(Events.TOUCH_END, this.endCallback);\n        element.removeEventListener(Events.TOUCH_DRAG, this.dragCallback);\n    }\n    setToolShape(toolShape) {\n        this.selectedShape =\n            this.registeredShapes.get(toolShape) ?? CircleSculptCursor.shapeName;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        const { viewport } = enabledElement;\n        const { element } = viewport;\n        const viewportIdsToRender = this.commonData.viewportIdsToRender;\n        if (!this.commonData.canvasLocation ||\n            this.mode !== ToolModes.Active ||\n            !viewportIdsToRender.includes(viewport.id)) {\n            return;\n        }\n        const annotations = this.filterSculptableAnnotationsForElement(element);\n        if (!annotations?.length) {\n            return;\n        }\n        const styleSpecifier = {\n            toolGroupId: this.toolGroupId,\n            toolName: this.getToolName(),\n            viewportId: enabledElement.viewport.id,\n        };\n        let color = getStyleProperty('color', styleSpecifier, AnnotationStyleStates.Default, this.mode);\n        if (this.isActive) {\n            color = getStyleProperty('color', styleSpecifier, AnnotationStyleStates.Highlighted, this.mode);\n        }\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        cursorShape.renderShape(svgDrawingHelper, this.commonData.canvasLocation, {\n            color,\n        });\n    }\n}\nexport const contourIndex = (i, length) => {\n    return (i + length) % length;\n};\nSculptorTool.toolName = 'SculptorTool';\nexport default SculptorTool;\n","import { getRenderingEngine } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { drawPath } from '../drawingSvg';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport { distanceToPoint } from '../utilities/math/point';\nimport { pointToString } from '../utilities/pointToString';\nimport { polyDataUtils } from '../utilities';\nclass SegmentationIntersectionTool extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            opacity: 0.5,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._init = () => {\n            const viewportsInfo = getToolGroup(this.toolGroupId).viewportsInfo;\n            if (!viewportsInfo?.length) {\n                console.warn(this.getToolName() + 'Tool: No viewports found');\n                return;\n            }\n            const firstViewport = getRenderingEngine(viewportsInfo[0].renderingEngineId)?.getViewport(viewportsInfo[0].viewportId);\n            if (!firstViewport) {\n                return;\n            }\n            const frameOfReferenceUID = firstViewport.getFrameOfReferenceUID();\n            const annotations = getAnnotations(this.getToolName(), frameOfReferenceUID);\n            if (!annotations?.length) {\n                const actorsWorldPointsMap = new Map();\n                calculateSurfaceSegmentationIntersections(actorsWorldPointsMap, viewportsInfo);\n                const newAnnotation = {\n                    highlighted: true,\n                    invalidated: true,\n                    metadata: {\n                        toolName: this.getToolName(),\n                        FrameOfReferenceUID: frameOfReferenceUID,\n                        referencedImageId: null,\n                    },\n                    data: {\n                        actorsWorldPointsMap,\n                    },\n                };\n                addAnnotation(newAnnotation, frameOfReferenceUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n        };\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onCameraModified = (evt) => {\n            this._init();\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const { viewport, FrameOfReferenceUID } = enabledElement;\n            let renderStatus = false;\n            const annotations = getAnnotations(this.getToolName(), FrameOfReferenceUID);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const annotation = annotations[0];\n            const { annotationUID } = annotation;\n            const actorsWorldPointsMap = (annotation).data.actorsWorldPointsMap;\n            calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport);\n            const actorEntries = viewport.getActors();\n            const cacheId = getCacheId(viewport);\n            actorEntries.forEach((actorEntry) => {\n                if (!actorEntry?.clippingFilter) {\n                    return;\n                }\n                const actorWorldPointMap = actorsWorldPointsMap.get(actorEntry.uid);\n                if (!actorWorldPointMap) {\n                    return;\n                }\n                if (!actorWorldPointMap.get(cacheId)) {\n                    return;\n                }\n                let polyLineIdx = 1;\n                const { worldPointsSet, color } = actorWorldPointMap.get(cacheId);\n                for (let i = 0; i < worldPointsSet.length; i++) {\n                    const worldPoints = worldPointsSet[i];\n                    const canvasPoints = worldPoints.map((point) => viewport.worldToCanvas(point));\n                    const options = {\n                        color: color,\n                        fillColor: color,\n                        fillOpacity: this.configuration.opacity,\n                        closePath: true,\n                        lineWidth: 2,\n                    };\n                    const polyLineUID = actorEntry.uid + '#' + polyLineIdx;\n                    drawPath(svgDrawingHelper, annotationUID, polyLineUID, canvasPoints, options);\n                    polyLineIdx++;\n                }\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nfunction calculateSurfaceSegmentationIntersections(actorsWorldPointsMap, viewportsInfo) {\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n        const viewport = getRenderingEngine(renderingEngineId)?.getViewport(viewportId);\n        calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport);\n    });\n}\nfunction calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport) {\n    const actorEntries = viewport.getActors();\n    const cacheId = getCacheId(viewport);\n    actorEntries.forEach((actorEntry) => {\n        if (!actorEntry?.clippingFilter) {\n            return;\n        }\n        let actorWorldPointsMap = actorsWorldPointsMap.get(actorEntry.uid);\n        if (!actorWorldPointsMap) {\n            actorWorldPointsMap = new Map();\n            actorsWorldPointsMap.set(actorEntry.uid, actorWorldPointsMap);\n        }\n        if (!actorWorldPointsMap.get(cacheId)) {\n            const polyData = actorEntry.clippingFilter.getOutputData();\n            const worldPointsSet = polyDataUtils.getPolyDataPoints(polyData);\n            if (!worldPointsSet) {\n                return;\n            }\n            const colorArray = actorEntry.actor.getProperty().getColor();\n            const color = colorToString(colorArray);\n            actorWorldPointsMap.set(cacheId, { worldPointsSet, color });\n        }\n    });\n}\nfunction getCacheId(viewport) {\n    const { viewPlaneNormal } = viewport.getCamera();\n    const imageIndex = viewport.getCurrentImageIdIndex();\n    return `${viewport.id}-${pointToString(viewPlaneNormal)}-${imageIndex}`;\n}\nfunction colorToString(colorArray) {\n    function colorComponentToString(component) {\n        let componentString = Math.floor(component * 255).toString(16);\n        if (componentString.length === 1) {\n            componentString = '0' + componentString;\n        }\n        return componentString;\n    }\n    return ('#' +\n        colorComponentToString(colorArray[0]) +\n        colorComponentToString(colorArray[1]) +\n        colorComponentToString(colorArray[2]));\n}\nfunction removeExtraPoints(viewport, worldPointsSet) {\n    return worldPointsSet.map((worldPoints) => {\n        const canvasPoints = worldPoints.map((point) => {\n            const canvasPoint = viewport.worldToCanvas(point);\n            return [Math.floor(canvasPoint[0]), Math.floor(canvasPoint[1])];\n        });\n        let lastPoint;\n        const newWorldPoints = [];\n        let newCanvasPoints = [];\n        for (let i = 0; i < worldPoints.length; i++) {\n            if (lastPoint) {\n                if (distanceToPoint(lastPoint, canvasPoints[i]) > 0) {\n                    newWorldPoints.push(worldPoints[i]);\n                    newCanvasPoints.push(canvasPoints[i]);\n                }\n            }\n            lastPoint = canvasPoints[i];\n        }\n        const firstPoint = newCanvasPoints[0];\n        for (let j = Math.min(30, newCanvasPoints.length); j < newCanvasPoints.length; j++) {\n            if (distanceToPoint(firstPoint, newCanvasPoints[j]) < 0.5) {\n                newCanvasPoints = newCanvasPoints.slice(0, j);\n                return newWorldPoints.slice(0, j);\n            }\n        }\n        return newWorldPoints;\n    });\n}\nSegmentationIntersectionTool.toolName = 'SegmentationIntersection';\nexport default SegmentationIntersectionTool;\n","import { getEnabledElementByIds, getEnabledElement, VolumeViewport, BaseVolumeViewport, utilities, } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nclass StackScrollTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            invert: false,\n            debounceIfNotLoaded: true,\n            loop: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.deltaY = 1;\n    }\n    mouseWheelCallback(evt) {\n        this._scroll(evt);\n    }\n    mouseDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    touchDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    _dragCallback(evt) {\n        this._scrollDrag(evt);\n    }\n    _scrollDrag(evt) {\n        const { deltaPoints, viewportId, renderingEngineId } = evt.detail;\n        const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n        const { debounceIfNotLoaded, invert, loop } = this.configuration;\n        const deltaPointY = deltaPoints.canvas[1];\n        let volumeId;\n        if (viewport instanceof VolumeViewport) {\n            volumeId = viewport.getVolumeId();\n        }\n        const pixelsPerImage = this._getPixelPerImage(viewport);\n        const deltaY = deltaPointY + this.deltaY;\n        if (!pixelsPerImage) {\n            return;\n        }\n        if (Math.abs(deltaY) >= pixelsPerImage) {\n            const imageIdIndexOffset = Math.round(deltaY / pixelsPerImage);\n            utilities.scroll(viewport, {\n                delta: invert ? -imageIdIndexOffset : imageIdIndexOffset,\n                volumeId,\n                debounceLoading: debounceIfNotLoaded,\n                loop: loop,\n            });\n            this.deltaY = deltaY % pixelsPerImage;\n        }\n        else {\n            this.deltaY = deltaY;\n        }\n    }\n    _scroll(evt) {\n        const { wheel, element } = evt.detail;\n        const { direction } = wheel;\n        const { invert } = this.configuration;\n        const { viewport } = getEnabledElement(element);\n        const delta = direction * (invert ? -1 : 1);\n        utilities.scroll(viewport, {\n            delta,\n            debounceLoading: this.configuration.debounceIfNotLoaded,\n            loop: this.configuration.loop,\n            volumeId: viewport instanceof BaseVolumeViewport\n                ? viewport.getVolumeId()\n                : undefined,\n            scrollSlabs: this.configuration.scrollSlabs,\n        });\n    }\n    _getPixelPerImage(viewport) {\n        const { element } = viewport;\n        const numberOfSlices = viewport.getNumberOfSlices();\n        return Math.max(2, element.offsetHeight / Math.max(numberOfSlices, 8));\n    }\n}\nStackScrollTool.toolName = 'StackScroll';\nexport default StackScrollTool;\n","import vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { Events } from '../enums';\nimport { eventTarget, getEnabledElement, getEnabledElementByIds, } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { BaseTool } from './base';\nimport { getToolGroup } from '../store/ToolGroupManager';\nclass TrackballRotateTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            rotateIncrementDegrees: 2,\n            rotateSampleDistanceFactor: 2,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._resizeObservers = new Map();\n        this._hasResolutionChanged = false;\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const actorEntry = viewport.getDefaultActor();\n            const actor = actorEntry.actor;\n            const mapper = actor.getMapper();\n            const hasSampleDistance = 'getSampleDistance' in mapper || 'getCurrentSampleDistance' in mapper;\n            if (!hasSampleDistance) {\n                return true;\n            }\n            const originalSampleDistance = mapper.getSampleDistance();\n            if (!this._hasResolutionChanged) {\n                const { rotateSampleDistanceFactor } = this.configuration;\n                mapper.setSampleDistance(originalSampleDistance * rotateSampleDistanceFactor);\n                this._hasResolutionChanged = true;\n                if (this.cleanUp !== null) {\n                    document.removeEventListener('mouseup', this.cleanUp);\n                }\n                this.cleanUp = () => {\n                    mapper.setSampleDistance(originalSampleDistance);\n                    viewport.render();\n                    this._hasResolutionChanged = false;\n                };\n                document.addEventListener('mouseup', this.cleanUp, { once: true });\n            }\n            return true;\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.onSetToolActive = () => {\n            const subscribeToElementResize = () => {\n                const viewportsInfo = this._getViewportsInfo();\n                viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                    if (!this._resizeObservers.has(viewportId)) {\n                        const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId) || { viewport: null };\n                        if (!viewport) {\n                            return;\n                        }\n                        const { element } = viewport;\n                        const resizeObserver = new ResizeObserver(() => {\n                            const element = getEnabledElementByIds(viewportId, renderingEngineId);\n                            if (!element) {\n                                return;\n                            }\n                            const { viewport } = element;\n                            const viewPresentation = viewport.getViewPresentation();\n                            viewport.resetCamera();\n                            viewport.setViewPresentation(viewPresentation);\n                            viewport.render();\n                        });\n                        resizeObserver.observe(element);\n                        this._resizeObservers.set(viewportId, resizeObserver);\n                    }\n                });\n            };\n            subscribeToElementResize();\n            this._viewportAddedListener = (evt) => {\n                if (evt.detail.toolGroupId === this.toolGroupId) {\n                    subscribeToElementResize();\n                }\n            };\n            eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);\n        };\n        this.onSetToolDisabled = () => {\n            this._resizeObservers.forEach((resizeObserver, viewportId) => {\n                resizeObserver.disconnect();\n                this._resizeObservers.delete(viewportId);\n            });\n            if (this._viewportAddedListener) {\n                eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);\n                this._viewportAddedListener = null;\n            }\n        };\n        this.rotateCamera = (viewport, centerWorld, axis, angle) => {\n            const vtkCamera = viewport.getVtkActiveCamera();\n            const viewUp = vtkCamera.getViewUp();\n            const focalPoint = vtkCamera.getFocalPoint();\n            const position = vtkCamera.getPosition();\n            const newPosition = [0, 0, 0];\n            const newFocalPoint = [0, 0, 0];\n            const newViewUp = [0, 0, 0];\n            const transform = mat4.identity(new Float32Array(16));\n            mat4.translate(transform, transform, centerWorld);\n            mat4.rotate(transform, transform, angle, axis);\n            mat4.translate(transform, transform, [\n                -centerWorld[0],\n                -centerWorld[1],\n                -centerWorld[2],\n            ]);\n            vec3.transformMat4(newPosition, position, transform);\n            vec3.transformMat4(newFocalPoint, focalPoint, transform);\n            mat4.identity(transform);\n            mat4.rotate(transform, transform, angle, axis);\n            vec3.transformMat4(newViewUp, viewUp, transform);\n            viewport.setCamera({\n                position: newPosition,\n                viewUp: newViewUp,\n                focalPoint: newFocalPoint,\n            });\n        };\n        this.touchDragCallback = this._dragCallback.bind(this);\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    _dragCallback(evt) {\n        const { element, currentPoints, lastPoints } = evt.detail;\n        const currentPointsCanvas = currentPoints.canvas;\n        const lastPointsCanvas = lastPoints.canvas;\n        const { rotateIncrementDegrees } = this.configuration;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const width = element.clientWidth;\n        const height = element.clientHeight;\n        const normalizedPosition = [\n            currentPointsCanvas[0] / width,\n            currentPointsCanvas[1] / height,\n        ];\n        const normalizedPreviousPosition = [\n            lastPointsCanvas[0] / width,\n            lastPointsCanvas[1] / height,\n        ];\n        const center = [width * 0.5, height * 0.5];\n        const centerWorld = viewport.canvasToWorld(center);\n        const normalizedCenter = [0.5, 0.5];\n        const radsq = (1.0 + Math.abs(normalizedCenter[0])) ** 2.0;\n        const op = [normalizedPreviousPosition[0], 0, 0];\n        const oe = [normalizedPosition[0], 0, 0];\n        const opsq = op[0] ** 2;\n        const oesq = oe[0] ** 2;\n        const lop = opsq > radsq ? 0 : Math.sqrt(radsq - opsq);\n        const loe = oesq > radsq ? 0 : Math.sqrt(radsq - oesq);\n        const nop = [op[0], 0, lop];\n        vtkMath.normalize(nop);\n        const noe = [oe[0], 0, loe];\n        vtkMath.normalize(noe);\n        const dot = vtkMath.dot(nop, noe);\n        if (Math.abs(dot) > 0.0001) {\n            const angleX = -2 *\n                Math.acos(vtkMath.clampValue(dot, -1.0, 1.0)) *\n                Math.sign(normalizedPosition[0] - normalizedPreviousPosition[0]) *\n                rotateIncrementDegrees;\n            const upVec = camera.viewUp;\n            const atV = camera.viewPlaneNormal;\n            const rightV = [0, 0, 0];\n            const forwardV = [0, 0, 0];\n            vtkMath.cross(upVec, atV, rightV);\n            vtkMath.normalize(rightV);\n            vtkMath.cross(atV, rightV, forwardV);\n            vtkMath.normalize(forwardV);\n            vtkMath.normalize(upVec);\n            this.rotateCamera(viewport, centerWorld, forwardV, angleX);\n            const angleY = (normalizedPreviousPosition[1] - normalizedPosition[1]) *\n                rotateIncrementDegrees;\n            this.rotateCamera(viewport, centerWorld, rightV, angleY);\n            viewport.render();\n        }\n    }\n}\nTrackballRotateTool.toolName = 'TrackballRotate';\nexport default TrackballRotateTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { AnnotationTool } from './base';\nimport { getRenderingEngine, getEnabledElementByIds, getEnabledElement, utilities as csUtils, Enums, CONSTANTS, triggerEvent, eventTarget, } from '@cornerstonejs/core';\nimport { getToolGroup, getToolGroupForViewport, } from '../store/ToolGroupManager';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { drawCircle as drawCircleSvg, drawLine as drawLineSvg, } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport liangBarksyClip from '../utilities/math/vec2/liangBarksyClip';\nimport * as lineSegment from '../utilities/math/line';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nconst { RENDERING_DEFAULTS } = CONSTANTS;\nfunction defaultReferenceLineColor() {\n    return 'rgb(0, 200, 0)';\n}\nfunction defaultReferenceLineControllable() {\n    return true;\n}\nconst OPERATION = {\n    DRAG: 1,\n    ROTATE: 2,\n    SLAB: 3,\n};\nclass VolumeCroppingControlTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse'],\n        configuration: {\n            viewportIndicators: false,\n            viewportIndicatorsConfig: {\n                radius: 5,\n                x: null,\n                y: null,\n            },\n            extendReferenceLines: true,\n            initialCropFactor: 0.2,\n            mobile: {\n                enabled: false,\n                opacity: 0.8,\n            },\n            lineColors: {\n                AXIAL: [1.0, 0.0, 0.0],\n                CORONAL: [0.0, 1.0, 0.0],\n                SAGITTAL: [1.0, 1.0, 0.0],\n                UNKNOWN: [0.0, 0.0, 1.0],\n            },\n            lineWidth: 1.5,\n            lineWidthActive: 2.5,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._virtualAnnotations = [];\n        this.sphereStates = [];\n        this.draggingSphereIndex = null;\n        this.toolCenter = [0, 0, 0];\n        this.toolCenterMin = [0, 0, 0];\n        this.toolCenterMax = [0, 0, 0];\n        this.initializeViewport = ({ renderingEngineId, viewportId, }) => {\n            if (!renderingEngineId || !viewportId) {\n                console.warn('VolumeCroppingControlTool: Missing renderingEngineId or viewportId');\n                return;\n            }\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (!enabledElement) {\n                return;\n            }\n            const { viewport } = enabledElement;\n            this._updateToolCentersFromViewport(viewport);\n            const { element } = viewport;\n            const { position, focalPoint, viewPlaneNormal } = viewport.getCamera();\n            let annotations = this._getAnnotations(enabledElement);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (annotations?.length) {\n                removeAnnotation(annotations[0].annotationUID);\n            }\n            const orientation = this._getOrientationFromNormal(viewport.getCamera().viewPlaneNormal);\n            const annotation = {\n                highlighted: false,\n                metadata: {\n                    cameraPosition: [...position],\n                    cameraFocalPoint: [...focalPoint],\n                    toolName: this.getToolName(),\n                },\n                data: {\n                    handles: {\n                        toolCenter: this.toolCenter,\n                        toolCenterMin: this.toolCenterMin,\n                        toolCenterMax: this.toolCenterMax,\n                    },\n                    activeOperation: null,\n                    activeViewportIds: [],\n                    viewportId,\n                    referenceLines: [],\n                    orientation,\n                },\n            };\n            addAnnotation(annotation, element);\n            return {\n                normal: viewPlaneNormal,\n                point: viewport.canvasToWorld([100, 100]),\n            };\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.resetCroppingSpheres = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            for (const viewportInfo of viewportsInfo) {\n                const { viewportId, renderingEngineId } = viewportInfo;\n                const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n                const viewport = enabledElement.viewport;\n                const resetPan = true;\n                const resetZoom = true;\n                const resetToCenter = true;\n                const resetRotation = true;\n                const suppressEvents = true;\n                viewport.resetCamera({\n                    resetPan,\n                    resetZoom,\n                    resetToCenter,\n                    resetRotation,\n                    suppressEvents,\n                });\n                viewport.resetSlabThickness();\n                const { element } = viewport;\n                let annotations = this._getAnnotations(enabledElement);\n                annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n                if (annotations.length) {\n                    removeAnnotation(annotations[0].annotationUID);\n                }\n                viewport.render();\n            }\n            this._computeToolCenter(viewportsInfo);\n        };\n        this.computeToolCenter = () => {\n            const viewportsInfo = this._getViewportsInfo();\n        };\n        this._computeToolCenter = (viewportsInfo) => {\n            if (!viewportsInfo || !viewportsInfo[0]) {\n                console.warn('  _computeToolCenter : No valid viewportsInfo for computeToolCenter.');\n                return;\n            }\n            const orientationIds = ['AXIAL', 'CORONAL', 'SAGITTAL'];\n            const presentOrientations = viewportsInfo\n                .map((vp) => {\n                if (vp.renderingEngineId) {\n                    const renderingEngine = getRenderingEngine(vp.renderingEngineId);\n                    const viewport = renderingEngine.getViewport(vp.viewportId);\n                    if (viewport && viewport.getCamera) {\n                        const orientation = this._getOrientationFromNormal(viewport.getCamera().viewPlaneNormal);\n                        if (orientation) {\n                            return orientation;\n                        }\n                    }\n                }\n                return null;\n            })\n                .filter(Boolean);\n            const missingOrientation = orientationIds.find((id) => !presentOrientations.includes(id));\n            const presentNormals = [];\n            const presentCenters = [];\n            const presentViewportInfos = viewportsInfo.filter((vp) => {\n                let orientation = null;\n                if (vp.renderingEngineId) {\n                    const renderingEngine = getRenderingEngine(vp.renderingEngineId);\n                    const viewport = renderingEngine.getViewport(vp.viewportId);\n                    if (viewport && viewport.getCamera) {\n                        orientation = this._getOrientationFromNormal(viewport.getCamera().viewPlaneNormal);\n                    }\n                }\n                return orientation && orientationIds.includes(orientation);\n            });\n            presentViewportInfos.forEach((vpInfo) => {\n                const { normal, point } = this.initializeViewport(vpInfo);\n                presentNormals.push(normal);\n                presentCenters.push(point);\n            });\n            if (presentViewportInfos.length === 2 && missingOrientation) {\n                const virtualNormal = [0, 0, 0];\n                vec3.cross(virtualNormal, presentNormals[0], presentNormals[1]);\n                vec3.normalize(virtualNormal, virtualNormal);\n                const virtualCenter = [\n                    (presentCenters[0][0] + presentCenters[1][0]) / 2,\n                    (presentCenters[0][1] + presentCenters[1][1]) / 2,\n                    (presentCenters[0][2] + presentCenters[1][2]) / 2,\n                ];\n                const orientation = null;\n                const virtualAnnotation = {\n                    highlighted: false,\n                    metadata: {\n                        cameraPosition: [...virtualCenter],\n                        cameraFocalPoint: [...virtualCenter],\n                        toolName: this.getToolName(),\n                    },\n                    data: {\n                        handles: {\n                            activeOperation: null,\n                            toolCenter: this.toolCenter,\n                            toolCenterMin: this.toolCenterMin,\n                            toolCenterMax: this.toolCenterMax,\n                        },\n                        activeViewportIds: [],\n                        viewportId: missingOrientation,\n                        referenceLines: [],\n                        orientation,\n                    },\n                    isVirtual: true,\n                    virtualNormal,\n                };\n                this._virtualAnnotations = [virtualAnnotation];\n            }\n            else if (presentViewportInfos.length === 1) {\n                let presentOrientation = null;\n                const vpInfo = presentViewportInfos[0];\n                if (vpInfo.renderingEngineId) {\n                    const renderingEngine = getRenderingEngine(vpInfo.renderingEngineId);\n                    const viewport = renderingEngine.getViewport(vpInfo.viewportId);\n                    if (viewport && viewport.getCamera) {\n                        presentOrientation = this._getOrientationFromNormal(viewport.getCamera().viewPlaneNormal);\n                    }\n                }\n                const presentCenter = presentCenters[0];\n                const canonicalNormals = {\n                    AXIAL: [0, 0, 1],\n                    CORONAL: [0, 1, 0],\n                    SAGITTAL: [1, 0, 0],\n                };\n                const missingIds = orientationIds.filter((id) => id !== presentOrientation);\n                const virtualAnnotations = missingIds.map((orientation) => {\n                    const normal = canonicalNormals[orientation];\n                    const virtualAnnotation = {\n                        highlighted: false,\n                        metadata: {\n                            cameraPosition: [...presentCenter],\n                            cameraFocalPoint: [...presentCenter],\n                            toolName: this.getToolName(),\n                        },\n                        data: {\n                            handles: {\n                                activeOperation: null,\n                                toolCenter: this.toolCenter,\n                                toolCenterMin: this.toolCenterMin,\n                                toolCenterMax: this.toolCenterMax,\n                            },\n                            activeViewportIds: [],\n                            viewportId: orientation,\n                            referenceLines: [],\n                            orientation,\n                        },\n                        isVirtual: true,\n                        virtualNormal: normal,\n                    };\n                    return virtualAnnotation;\n                });\n                this._virtualAnnotations = virtualAnnotations;\n            }\n            if (viewportsInfo && viewportsInfo.length) {\n                triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n            }\n        };\n        this.cancel = () => {\n            console.log('Not implemented yet');\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            if (this._pointNearTool(element, annotation, canvasCoords, 6)) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.onResetCamera = (evt) => {\n            this.resetCroppingSpheres();\n        };\n        this.mouseMoveCallback = (evt, filteredToolAnnotations) => {\n            if (!filteredToolAnnotations) {\n                return;\n            }\n            const { element, currentPoints } = evt.detail;\n            const canvasCoords = currentPoints.canvas;\n            let imageNeedsUpdate = false;\n            for (let i = 0; i < filteredToolAnnotations.length; i++) {\n                const annotation = filteredToolAnnotations[i];\n                if (isAnnotationLocked(annotation.annotationUID)) {\n                    continue;\n                }\n                const { data, highlighted } = annotation;\n                if (!data.handles) {\n                    continue;\n                }\n                const previousActiveOperation = data.handles.activeOperation;\n                const previousActiveViewportIds = data.activeViewportIds && data.activeViewportIds.length > 0\n                    ? [...data.activeViewportIds]\n                    : [];\n                data.activeViewportIds = [];\n                let near = false;\n                near = this._pointNearTool(element, annotation, canvasCoords, 6);\n                const nearToolAndNotMarkedActive = near && !highlighted;\n                const notNearToolAndMarkedActive = !near && highlighted;\n                if (nearToolAndNotMarkedActive || notNearToolAndMarkedActive) {\n                    annotation.highlighted = !highlighted;\n                    imageNeedsUpdate = true;\n                }\n            }\n            return imageNeedsUpdate;\n        };\n        this.filterInteractableAnnotationsForElement = (element, annotations) => {\n            if (!annotations || !annotations.length) {\n                return [];\n            }\n            const enabledElement = getEnabledElement(element);\n            let orientation = null;\n            if (enabledElement.viewport && enabledElement.viewport.getCamera) {\n                orientation = this._getOrientationFromNormal(enabledElement.viewport.getCamera().viewPlaneNormal);\n            }\n            const filtered = annotations.filter((annotation) => {\n                if (annotation.isVirtual) {\n                    return true;\n                }\n                if (annotation.data.orientation &&\n                    orientation &&\n                    annotation.data.orientation === orientation) {\n                    return true;\n                }\n                return false;\n            });\n            return filtered;\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            function lineIntersection2D(p1, p2, q1, q2) {\n                const s1_x = p2[0] - p1[0];\n                const s1_y = p2[1] - p1[1];\n                const s2_x = q2[0] - q1[0];\n                const s2_y = q2[1] - q1[1];\n                const denom = -s2_x * s1_y + s1_x * s2_y;\n                if (Math.abs(denom) < 1e-8) {\n                    return null;\n                }\n                const s = (-s1_y * (p1[0] - q1[0]) + s1_x * (p1[1] - q1[1])) / denom;\n                const t = (s2_x * (p1[1] - q1[1]) - s2_y * (p1[0] - q1[0])) / denom;\n                if (s >= 0 && s <= 1 && t >= 0 && t <= 1) {\n                    return [p1[0] + t * s1_x, p1[1] + t * s1_y];\n                }\n                return null;\n            }\n            const viewportsInfo = this._getViewportsInfo();\n            if (!viewportsInfo || viewportsInfo.length === 0) {\n                return false;\n            }\n            let renderStatus = false;\n            const { viewport, renderingEngine } = enabledElement;\n            const { element } = viewport;\n            let annotations = this._getAnnotations(enabledElement);\n            if (this._virtualAnnotations && this._virtualAnnotations.length) {\n                annotations = annotations.concat(this._virtualAnnotations);\n            }\n            const camera = viewport.getCamera();\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!viewportAnnotation || !viewportAnnotation.data) {\n                return renderStatus;\n            }\n            const annotationUID = viewportAnnotation.annotationUID;\n            const { clientWidth, clientHeight } = viewport.canvas;\n            const canvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n            const data = viewportAnnotation.data;\n            const otherViewportAnnotations = annotations;\n            const volumeCroppingCenterCanvasMin = viewport.worldToCanvas(this.toolCenterMin);\n            const volumeCroppingCenterCanvasMax = viewport.worldToCanvas(this.toolCenterMax);\n            const referenceLines = [];\n            const canvasBox = [0, 0, clientWidth, clientHeight];\n            otherViewportAnnotations.forEach((annotation) => {\n                const data = annotation.data;\n                const isVirtual = 'isVirtual' in annotation &&\n                    annotation.isVirtual === true;\n                data.handles.toolCenter = this.toolCenter;\n                let otherViewport, otherCamera, clientWidth, clientHeight, otherCanvasDiagonalLength, otherCanvasCenter, otherViewportCenterWorld;\n                if (isVirtual) {\n                    const realViewports = viewportsInfo.filter((vp) => vp.viewportId !== data.viewportId);\n                    if (realViewports.length === 2) {\n                        const vp1 = renderingEngine.getViewport(realViewports[0].viewportId);\n                        const vp2 = renderingEngine.getViewport(realViewports[1].viewportId);\n                        const normal1 = vp1.getCamera().viewPlaneNormal;\n                        const normal2 = vp2.getCamera().viewPlaneNormal;\n                        const virtualNormal = vec3.create();\n                        vec3.cross(virtualNormal, normal1, normal2);\n                        vec3.normalize(virtualNormal, virtualNormal);\n                        otherCamera = {\n                            viewPlaneNormal: virtualNormal,\n                            position: data.handles.toolCenter,\n                            focalPoint: data.handles.toolCenter,\n                            viewUp: [0, 1, 0],\n                        };\n                        clientWidth = viewport.canvas.clientWidth;\n                        clientHeight = viewport.canvas.clientHeight;\n                        otherCanvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n                        otherCanvasCenter = [clientWidth * 0.5, clientHeight * 0.5];\n                        otherViewportCenterWorld = data.handles.toolCenter;\n                        otherViewport = {\n                            id: data.viewportId,\n                            canvas: viewport.canvas,\n                            canvasToWorld: () => data.handles.toolCenter,\n                        };\n                    }\n                    else {\n                        const virtualNormal = annotation\n                            .virtualNormal ?? [0, 0, 1];\n                        otherCamera = {\n                            viewPlaneNormal: virtualNormal,\n                            position: data.handles.toolCenter,\n                            focalPoint: data.handles.toolCenter,\n                            viewUp: [0, 1, 0],\n                        };\n                        clientWidth = viewport.canvas.clientWidth;\n                        clientHeight = viewport.canvas.clientHeight;\n                        otherCanvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n                        otherCanvasCenter = [clientWidth * 0.5, clientHeight * 0.5];\n                        otherViewportCenterWorld = data.handles.toolCenter;\n                        otherViewport = {\n                            id: data.viewportId,\n                            canvas: viewport.canvas,\n                            canvasToWorld: () => data.handles.toolCenter,\n                        };\n                    }\n                }\n                else {\n                    otherViewport = renderingEngine.getViewport(data.viewportId);\n                    otherCamera = otherViewport.getCamera();\n                    clientWidth = otherViewport.canvas.clientWidth;\n                    clientHeight = otherViewport.canvas.clientHeight;\n                    otherCanvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n                    otherCanvasCenter = [clientWidth * 0.5, clientHeight * 0.5];\n                    otherViewportCenterWorld =\n                        otherViewport.canvasToWorld(otherCanvasCenter);\n                }\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const direction = [0, 0, 0];\n                vtkMath.cross(camera.viewPlaneNormal, otherCamera.viewPlaneNormal, direction);\n                vtkMath.normalize(direction);\n                vtkMath.multiplyScalar(direction, otherCanvasDiagonalLength);\n                const pointWorld0 = [0, 0, 0];\n                vtkMath.add(otherViewportCenterWorld, direction, pointWorld0);\n                const pointWorld1 = [0, 0, 0];\n                vtkMath.subtract(otherViewportCenterWorld, direction, pointWorld1);\n                const pointCanvas0 = viewport.worldToCanvas(pointWorld0);\n                const otherViewportCenterCanvas = viewport.worldToCanvas([\n                    otherViewportCenterWorld[0] ?? 0,\n                    otherViewportCenterWorld[1] ?? 0,\n                    otherViewportCenterWorld[2] ?? 0,\n                ]);\n                const canvasUnitVectorFromCenter = vec2.create();\n                vec2.subtract(canvasUnitVectorFromCenter, pointCanvas0, otherViewportCenterCanvas);\n                vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n                const canvasVectorFromCenterLong = vec2.create();\n                vec2.scale(canvasVectorFromCenterLong, canvasUnitVectorFromCenter, canvasDiagonalLength * 100);\n                const refLinesCenterMin = otherViewportControllable\n                    ? vec2.clone(volumeCroppingCenterCanvasMin)\n                    : vec2.clone(otherViewportCenterCanvas);\n                const refLinePointMinOne = vec2.create();\n                const refLinePointMinTwo = vec2.create();\n                vec2.add(refLinePointMinOne, refLinesCenterMin, canvasVectorFromCenterLong);\n                vec2.subtract(refLinePointMinTwo, refLinesCenterMin, canvasVectorFromCenterLong);\n                liangBarksyClip(refLinePointMinOne, refLinePointMinTwo, canvasBox);\n                referenceLines.push([\n                    otherViewport,\n                    refLinePointMinOne,\n                    refLinePointMinTwo,\n                    'min',\n                ]);\n                const refLinesCenterMax = otherViewportControllable\n                    ? vec2.clone(volumeCroppingCenterCanvasMax)\n                    : vec2.clone(otherViewportCenterCanvas);\n                const refLinePointMaxOne = vec2.create();\n                const refLinePointMaxTwo = vec2.create();\n                vec2.add(refLinePointMaxOne, refLinesCenterMax, canvasVectorFromCenterLong);\n                vec2.subtract(refLinePointMaxTwo, refLinesCenterMax, canvasVectorFromCenterLong);\n                liangBarksyClip(refLinePointMaxOne, refLinePointMaxTwo, canvasBox);\n                referenceLines.push([\n                    otherViewport,\n                    refLinePointMaxOne,\n                    refLinePointMaxTwo,\n                    'max',\n                ]);\n            });\n            data.referenceLines = referenceLines;\n            const viewportColor = this._getReferenceLineColor(viewport.id);\n            const color = viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n            referenceLines.forEach((line, lineIndex) => {\n                const intersections = [];\n                for (let j = 0; j < referenceLines.length; ++j) {\n                    if (j === lineIndex) {\n                        continue;\n                    }\n                    const otherLine = referenceLines[j];\n                    const intersection = lineIntersection2D(line[1], line[2], otherLine[1], otherLine[2]);\n                    if (intersection) {\n                        intersections.push({\n                            with: otherLine[3],\n                            point: intersection,\n                        });\n                    }\n                }\n                const otherViewport = line[0];\n                let orientation = null;\n                if (otherViewport && otherViewport.id) {\n                    const annotationForViewport = annotations.find((a) => a.data.viewportId === otherViewport.id);\n                    if (annotationForViewport && annotationForViewport.data.orientation) {\n                        orientation = String(annotationForViewport.data.orientation).toUpperCase();\n                    }\n                    else {\n                        const idUpper = otherViewport.id.toUpperCase();\n                        if (idUpper.includes('AXIAL')) {\n                            orientation = 'AXIAL';\n                        }\n                        else if (idUpper.includes('CORONAL')) {\n                            orientation = 'CORONAL';\n                        }\n                        else if (idUpper.includes('SAGITTAL')) {\n                            orientation = 'SAGITTAL';\n                        }\n                    }\n                }\n                const lineColors = this.configuration.lineColors || {};\n                const colorArr = lineColors[orientation] ||\n                    lineColors.unknown || [1.0, 0.0, 0.0];\n                const color = Array.isArray(colorArr)\n                    ? `rgb(${colorArr.map((v) => Math.round(v * 255)).join(',')})`\n                    : colorArr;\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const selectedViewportId = data.activeViewportIds.find((id) => id === otherViewport.id);\n                let lineWidth = this.configuration.lineWidth ?? 1.5;\n                const lineActive = data.handles.activeOperation !== null &&\n                    data.handles.activeOperation === OPERATION.DRAG &&\n                    selectedViewportId;\n                if (lineActive) {\n                    lineWidth = this.configuration.activeLineWidth ?? 2.5;\n                }\n                const lineUID = `${lineIndex}`;\n                if (viewportControllable) {\n                    if (intersections.length === 2) {\n                        drawLineSvg(svgDrawingHelper, annotationUID, lineUID, intersections[0].point, intersections[1].point, {\n                            color,\n                            lineWidth,\n                        });\n                    }\n                    if (this.configuration.extendReferenceLines &&\n                        intersections.length === 2) {\n                        if (this.configuration.extendReferenceLines &&\n                            intersections.length === 2) {\n                            const sortedIntersections = intersections\n                                .map((intersection) => ({\n                                ...intersection,\n                                distance: vec2.distance(line[1], intersection.point),\n                            }))\n                                .sort((a, b) => a.distance - b.distance);\n                            drawLineSvg(svgDrawingHelper, annotationUID, lineUID + '_dashed_before', line[1], sortedIntersections[0].point, { color, lineWidth, lineDash: [4, 4] });\n                            drawLineSvg(svgDrawingHelper, annotationUID, lineUID + '_dashed_after', sortedIntersections[1].point, line[2], { color, lineWidth, lineDash: [4, 4] });\n                        }\n                    }\n                }\n            });\n            renderStatus = true;\n            if (this.configuration.viewportIndicators) {\n                const { viewportIndicatorsConfig } = this.configuration;\n                const xOffset = viewportIndicatorsConfig?.xOffset || 0.95;\n                const yOffset = viewportIndicatorsConfig?.yOffset || 0.05;\n                const referenceColorCoordinates = [\n                    clientWidth * xOffset,\n                    clientHeight * yOffset,\n                ];\n                const circleRadius = viewportIndicatorsConfig?.circleRadius || canvasDiagonalLength * 0.01;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, referenceColorCoordinates, circleRadius, { color, fill: color });\n            }\n            return renderStatus;\n        };\n        this._getAnnotations = (enabledElement) => {\n            const { viewport } = enabledElement;\n            const annotations = getAnnotations(this.getToolName(), viewport.element) || [];\n            const viewportIds = this._getViewportsInfo().map(({ viewportId }) => viewportId);\n            const toolGroupAnnotations = annotations.filter((annotation) => {\n                const { data } = annotation;\n                return viewportIds.includes(data.viewportId);\n            });\n            return toolGroupAnnotations;\n        };\n        this._onSphereMoved = (evt) => {\n            if (evt.detail.originalClippingPlanes) {\n                this._syncWithVolumeCroppingTool(evt.detail.originalClippingPlanes);\n            }\n            else {\n                if (evt.detail.seriesInstanceUID !== this.seriesInstanceUID) {\n                    return;\n                }\n                const { draggingSphereIndex, toolCenter } = evt.detail;\n                const newMin = [...this.toolCenterMin];\n                const newMax = [...this.toolCenterMax];\n                if (draggingSphereIndex >= 0 && draggingSphereIndex <= 5) {\n                    const axis = Math.floor(draggingSphereIndex / 2);\n                    const isMin = draggingSphereIndex % 2 === 0;\n                    (isMin ? newMin : newMax)[axis] = toolCenter[axis];\n                    this.setToolCenter(newMin, 'min');\n                    this.setToolCenter(newMax, 'max');\n                    return;\n                }\n                if (draggingSphereIndex >= 6 && draggingSphereIndex <= 13) {\n                    const idx = draggingSphereIndex;\n                    if (idx < 10) {\n                        newMin[0] = toolCenter[0];\n                    }\n                    else {\n                        newMax[0] = toolCenter[0];\n                    }\n                    if ([6, 7, 10, 11].includes(idx)) {\n                        newMin[1] = toolCenter[1];\n                    }\n                    else {\n                        newMax[1] = toolCenter[1];\n                    }\n                    if (idx % 2 === 0) {\n                        newMin[2] = toolCenter[2];\n                    }\n                    else {\n                        newMax[2] = toolCenter[2];\n                    }\n                    this.setToolCenter(newMin, 'min');\n                    this.setToolCenter(newMax, 'max');\n                }\n            }\n        };\n        this._onNewVolume = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            if (viewportsInfo && viewportsInfo.length > 0) {\n                const { viewportId, renderingEngineId } = viewportsInfo[0];\n                const renderingEngine = getRenderingEngine(renderingEngineId);\n                const viewport = renderingEngine.getViewport(viewportId);\n                const volumeActors = viewport.getActors();\n                if (volumeActors.length > 0) {\n                    const imageData = volumeActors[0].actor.getMapper().getInputData();\n                    if (imageData) {\n                        this.seriesInstanceUID = imageData.seriesInstanceUID;\n                        this._updateToolCentersFromViewport(viewport);\n                        const annotations = getAnnotations(this.getToolName(), viewportId) || [];\n                        annotations.forEach((annotation) => {\n                            if (annotation.data && annotation.data.handles) {\n                                annotation.data.handles.toolCenter = [...this.toolCenter];\n                            }\n                        });\n                    }\n                }\n            }\n            this._computeToolCenter(viewportsInfo);\n            triggerEvent(eventTarget, Events.VOLUMECROPPINGCONTROL_TOOL_CHANGED, {\n                toolGroupId: this.toolGroupId,\n                viewportsInfo: viewportsInfo,\n                seriesInstanceUID: this.seriesInstanceUID,\n            });\n        };\n        this._getAnnotationsForViewportsWithDifferentCameras = (enabledElement, annotations) => {\n            const { viewportId, renderingEngine, viewport } = enabledElement;\n            const otherViewportAnnotations = annotations.filter((annotation) => annotation.data.viewportId !== viewportId);\n            if (!otherViewportAnnotations || !otherViewportAnnotations.length) {\n                return [];\n            }\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, position } = camera;\n            const viewportsWithDifferentCameras = otherViewportAnnotations.filter((annotation) => {\n                const { viewportId } = annotation.data;\n                const targetViewport = renderingEngine.getViewport(viewportId);\n                const cameraOfTarget = targetViewport.getCamera();\n                return !(csUtils.isEqual(cameraOfTarget.viewPlaneNormal, viewPlaneNormal, 1e-2) && csUtils.isEqual(cameraOfTarget.position, position, 1));\n            });\n            return viewportsWithDifferentCameras;\n        };\n        this._filterViewportWithSameOrientation = (enabledElement, referenceAnnotation, annotations) => {\n            const { renderingEngine } = enabledElement;\n            const { data } = referenceAnnotation;\n            const viewport = renderingEngine.getViewport(data.viewportId);\n            const linkedViewportAnnotations = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return otherViewportControllable === true;\n            });\n            if (!linkedViewportAnnotations || !linkedViewportAnnotations.length) {\n                return [];\n            }\n            const camera = viewport.getCamera();\n            const viewPlaneNormal = camera.viewPlaneNormal;\n            vtkMath.normalize(viewPlaneNormal);\n            const otherViewportsAnnotationsWithSameCameraDirection = linkedViewportAnnotations.filter((annotation) => {\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                return (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) &&\n                    csUtils.isEqual(camera.viewUp, otherCamera.viewUp, 1e-2));\n            });\n            return otherViewportsAnnotationsWithSameCameraDirection;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = !this.configuration.mobile?.enabled;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            this.editData.annotation.data.handles.activeOperation = null;\n            this.editData.annotation.data.activeViewportIds = [];\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            this.editData = null;\n            const requireSameOrientation = false;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), requireSameOrientation);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const delta = eventDetail.deltaPoints.world;\n            if (Math.abs(delta[0]) < 1e-3 &&\n                Math.abs(delta[1]) < 1e-3 &&\n                Math.abs(delta[2]) < 1e-3) {\n                return;\n            }\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            if (viewport.type === Enums.ViewportType.VOLUME_3D) {\n                return;\n            }\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!viewportAnnotation) {\n                return;\n            }\n            const { handles } = viewportAnnotation.data;\n            if (handles.activeOperation === OPERATION.DRAG) {\n                if (handles.activeType === 'min') {\n                    this.toolCenterMin[0] += delta[0];\n                    this.toolCenterMin[1] += delta[1];\n                    this.toolCenterMin[2] += delta[2];\n                }\n                else if (handles.activeType === 'max') {\n                    this.toolCenterMax[0] += delta[0];\n                    this.toolCenterMax[1] += delta[1];\n                    this.toolCenterMax[2] += delta[2];\n                }\n                else {\n                    this.toolCenter[0] += delta[0];\n                    this.toolCenter[1] += delta[1];\n                    this.toolCenter[2] += delta[2];\n                }\n                const viewportsInfo = this._getViewportsInfo();\n                triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n                triggerEvent(eventTarget, Events.VOLUMECROPPINGCONTROL_TOOL_CHANGED, {\n                    toolGroupId: this.toolGroupId,\n                    toolCenter: this.toolCenter,\n                    toolCenterMin: this.toolCenterMin,\n                    toolCenterMax: this.toolCenterMax,\n                    handleType: handles.activeType,\n                    viewportOrientation: [],\n                    seriesInstanceUID: this.seriesInstanceUID,\n                });\n            }\n        };\n        this._getReferenceLineColor =\n            toolProps.configuration?.getReferenceLineColor ||\n                defaultReferenceLineColor;\n        this._getReferenceLineControllable =\n            toolProps.configuration?.getReferenceLineControllable ||\n                defaultReferenceLineControllable;\n        const viewportsInfo = getToolGroup(this.toolGroupId)?.viewportsInfo;\n        eventTarget.addEventListener(Events.VOLUMECROPPING_TOOL_CHANGED, this._onSphereMoved);\n        if (viewportsInfo && viewportsInfo.length > 0) {\n            const { viewportId, renderingEngineId } = viewportsInfo[0];\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            const renderingEngine = getRenderingEngine(renderingEngineId);\n            const viewport = renderingEngine.getViewport(viewportId);\n            const volumeActors = viewport.getActors();\n            if (!volumeActors || !volumeActors.length) {\n                console.warn(`VolumeCroppingControlTool: No volume actors found in viewport ${viewportId}.`);\n                return;\n            }\n            const imageData = volumeActors[0].actor.getMapper().getInputData();\n            if (imageData) {\n                const dimensions = imageData.getDimensions();\n                const spacing = imageData.getSpacing();\n                const origin = imageData.getOrigin();\n                this.seriesInstanceUID = imageData.seriesInstanceUID || 'unknown';\n                const cropFactor = this.configuration.initialCropFactor ?? 0.2;\n                this.toolCenter = [\n                    origin[0] + cropFactor * (dimensions[0] - 1) * spacing[0],\n                    origin[1] + cropFactor * (dimensions[1] - 1) * spacing[1],\n                    origin[2] + cropFactor * (dimensions[2] - 1) * spacing[2],\n                ];\n                const maxCropFactor = 1 - cropFactor;\n                this.toolCenterMin = [\n                    origin[0] + cropFactor * (dimensions[0] - 1) * spacing[0],\n                    origin[1] + cropFactor * (dimensions[1] - 1) * spacing[1],\n                    origin[2] + cropFactor * (dimensions[2] - 1) * spacing[2],\n                ];\n                this.toolCenterMax = [\n                    origin[0] + maxCropFactor * (dimensions[0] - 1) * spacing[0],\n                    origin[1] + maxCropFactor * (dimensions[1] - 1) * spacing[1],\n                    origin[2] + maxCropFactor * (dimensions[2] - 1) * spacing[2],\n                ];\n            }\n        }\n    }\n    _updateToolCentersFromViewport(viewport) {\n        const volumeActors = viewport.getActors();\n        if (!volumeActors || !volumeActors.length) {\n            return;\n        }\n        const imageData = volumeActors[0].actor.getMapper().getInputData();\n        if (!imageData) {\n            return;\n        }\n        this.seriesInstanceUID = imageData.seriesInstanceUID || 'unknown';\n        const dimensions = imageData.getDimensions();\n        const spacing = imageData.getSpacing();\n        const origin = imageData.getOrigin();\n        const cropFactor = this.configuration.initialCropFactor ?? 0.2;\n        const cropStart = cropFactor / 2;\n        const cropEnd = 1 - cropFactor / 2;\n        this.toolCenter = [\n            origin[0] +\n                ((cropStart + cropEnd) / 2) * (dimensions[0] - 1) * spacing[0],\n            origin[1] +\n                ((cropStart + cropEnd) / 2) * (dimensions[1] - 1) * spacing[1],\n            origin[2] +\n                ((cropStart + cropEnd) / 2) * (dimensions[2] - 1) * spacing[2],\n        ];\n        this.toolCenterMin = [\n            origin[0] + cropStart * (dimensions[0] - 1) * spacing[0],\n            origin[1] + cropStart * (dimensions[1] - 1) * spacing[1],\n            origin[2] + cropStart * (dimensions[2] - 1) * spacing[2],\n        ];\n        this.toolCenterMax = [\n            origin[0] + cropEnd * (dimensions[0] - 1) * spacing[0],\n            origin[1] + cropEnd * (dimensions[1] - 1) * spacing[1],\n            origin[2] + cropEnd * (dimensions[2] - 1) * spacing[2],\n        ];\n    }\n    onSetToolInactive() {\n        console.debug(`VolumeCroppingControlTool: onSetToolInactive called for tool ${this.getToolName()}`);\n    }\n    onSetToolActive() {\n        const viewportsInfo = this._getViewportsInfo();\n        let anyAnnotationExists = false;\n        for (const vpInfo of viewportsInfo) {\n            const enabledElement = getEnabledElementByIds(vpInfo.viewportId, vpInfo.renderingEngineId);\n            const annotations = this._getAnnotations(enabledElement);\n            if (annotations && annotations.length > 0) {\n                anyAnnotationExists = true;\n                break;\n            }\n        }\n        if (!anyAnnotationExists) {\n            this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n            this._subscribeToViewportNewVolumeSet(viewportsInfo);\n            this._computeToolCenter(viewportsInfo);\n            triggerEvent(eventTarget, Events.VOLUMECROPPINGCONTROL_TOOL_CHANGED, {\n                toolGroupId: this.toolGroupId,\n                viewportsInfo: viewportsInfo,\n                seriesInstanceUID: this.seriesInstanceUID,\n            });\n        }\n        else {\n            for (const vpInfo of viewportsInfo) {\n                const enabledElement = getEnabledElementByIds(vpInfo.viewportId, vpInfo.renderingEngineId);\n                if (!enabledElement) {\n                    continue;\n                }\n                const annotations = this._getAnnotations(enabledElement);\n                if (annotations && annotations.length > 0) {\n                    annotations.forEach((annotation) => {\n                        removeAnnotation(annotation.annotationUID);\n                    });\n                }\n                enabledElement.viewport.render();\n            }\n        }\n    }\n    onSetToolEnabled() {\n        console.debug(`VolumeCroppingControlTool: onSetToolEnabled called for tool ${this.getToolName()}`);\n        const viewportsInfo = this._getViewportsInfo();\n    }\n    onSetToolDisabled() {\n        console.debug(`VolumeCroppingControlTool: onSetToolDisabled called for tool ${this.getToolName()}`);\n        const viewportsInfo = this._getViewportsInfo();\n        this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n        viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (!enabledElement) {\n                return;\n            }\n            const annotations = this._getAnnotations(enabledElement);\n            if (annotations?.length) {\n                annotations.forEach((annotation) => {\n                    removeAnnotation(annotation.annotationUID);\n                });\n            }\n        });\n    }\n    _getOrientationFromNormal(normal) {\n        if (!normal) {\n            return null;\n        }\n        const canonical = {\n            AXIAL: [0, 0, 1],\n            CORONAL: [0, 1, 0],\n            SAGITTAL: [1, 0, 0],\n        };\n        const tol = 1e-2;\n        for (const [key, value] of Object.entries(canonical)) {\n            if (Math.abs(normal[0] - value[0]) < tol &&\n                Math.abs(normal[1] - value[1]) < tol &&\n                Math.abs(normal[2] - value[2]) < tol) {\n                return key;\n            }\n            if (Math.abs(normal[0] + value[0]) < tol &&\n                Math.abs(normal[1] + value[1]) < tol &&\n                Math.abs(normal[2] + value[2]) < tol) {\n                return key;\n            }\n        }\n        return null;\n    }\n    _syncWithVolumeCroppingTool(originalClippingPlanes) {\n        const planes = originalClippingPlanes;\n        if (planes.length >= 6) {\n            this.toolCenterMin = [\n                planes[0].origin[0],\n                planes[2].origin[1],\n                planes[4].origin[2],\n            ];\n            this.toolCenterMax = [\n                planes[1].origin[0],\n                planes[3].origin[1],\n                planes[5].origin[2],\n            ];\n            this.toolCenter = [\n                (this.toolCenterMin[0] + this.toolCenterMax[0]) / 2,\n                (this.toolCenterMin[1] + this.toolCenterMax[1]) / 2,\n                (this.toolCenterMin[2] + this.toolCenterMax[2]) / 2,\n            ];\n            const viewportsInfo = this._getViewportsInfo();\n            viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n                if (enabledElement) {\n                    const annotations = this._getAnnotations(enabledElement);\n                    annotations.forEach((annotation) => {\n                        if (annotation.data &&\n                            annotation.data.handles &&\n                            annotation.data.orientation) {\n                            const orientation = annotation.data.orientation;\n                            if (orientation === 'AXIAL') {\n                                annotation.data.handles.toolCenterMin = [\n                                    planes[0].origin[0],\n                                    planes[2].origin[1],\n                                    annotation.data.handles.toolCenterMin[2],\n                                ];\n                                annotation.data.handles.toolCenterMax = [\n                                    planes[1].origin[0],\n                                    planes[3].origin[1],\n                                    annotation.data.handles.toolCenterMax[2],\n                                ];\n                            }\n                            else if (orientation === 'CORONAL') {\n                                annotation.data.handles.toolCenterMin = [\n                                    planes[0].origin[0],\n                                    annotation.data.handles.toolCenterMin[1],\n                                    planes[4].origin[2],\n                                ];\n                                annotation.data.handles.toolCenterMax = [\n                                    planes[1].origin[0],\n                                    annotation.data.handles.toolCenterMax[1],\n                                    planes[5].origin[2],\n                                ];\n                            }\n                            else if (orientation === 'SAGITTAL') {\n                                annotation.data.handles.toolCenterMin = [\n                                    annotation.data.handles.toolCenterMin[0],\n                                    planes[2].origin[1],\n                                    planes[4].origin[2],\n                                ];\n                                annotation.data.handles.toolCenterMax = [\n                                    annotation.data.handles.toolCenterMax[0],\n                                    planes[3].origin[1],\n                                    planes[5].origin[2],\n                                ];\n                            }\n                            annotation.data.handles.toolCenter = [\n                                (annotation.data.handles.toolCenterMin[0] +\n                                    annotation.data.handles.toolCenterMax[0]) /\n                                    2,\n                                (annotation.data.handles.toolCenterMin[1] +\n                                    annotation.data.handles.toolCenterMax[1]) /\n                                    2,\n                                (annotation.data.handles.toolCenterMin[2] +\n                                    annotation.data.handles.toolCenterMax[2]) /\n                                    2,\n                            ];\n                        }\n                    });\n                }\n            });\n            if (this._virtualAnnotations && this._virtualAnnotations.length > 0) {\n                this._virtualAnnotations.forEach((annotation) => {\n                    if (annotation.data &&\n                        annotation.data.handles &&\n                        annotation.data.orientation) {\n                        const orientation = annotation.data.orientation.toUpperCase();\n                        if (orientation === 'AXIAL') {\n                            annotation.data.handles.toolCenterMin = [\n                                planes[0].origin[0],\n                                planes[2].origin[1],\n                                annotation.data.handles.toolCenterMin[2],\n                            ];\n                            annotation.data.handles.toolCenterMax = [\n                                planes[1].origin[0],\n                                planes[3].origin[1],\n                                annotation.data.handles.toolCenterMax[2],\n                            ];\n                        }\n                        else if (orientation === 'CORONAL') {\n                            annotation.data.handles.toolCenterMin = [\n                                planes[0].origin[0],\n                                annotation.data.handles.toolCenterMin[1],\n                                planes[4].origin[2],\n                            ];\n                            annotation.data.handles.toolCenterMax = [\n                                planes[1].origin[0],\n                                annotation.data.handles.toolCenterMax[1],\n                                planes[5].origin[2],\n                            ];\n                        }\n                        else if (orientation === 'SAGITTAL') {\n                            annotation.data.handles.toolCenterMin = [\n                                annotation.data.handles.toolCenterMin[0],\n                                planes[2].origin[1],\n                                planes[4].origin[2],\n                            ];\n                            annotation.data.handles.toolCenterMax = [\n                                annotation.data.handles.toolCenterMax[0],\n                                planes[3].origin[1],\n                                planes[5].origin[2],\n                            ];\n                        }\n                        annotation.data.handles.toolCenter = [\n                            (annotation.data.handles.toolCenterMin[0] +\n                                annotation.data.handles.toolCenterMax[0]) /\n                                2,\n                            (annotation.data.handles.toolCenterMin[1] +\n                                annotation.data.handles.toolCenterMax[1]) /\n                                2,\n                            (annotation.data.handles.toolCenterMin[2] +\n                                annotation.data.handles.toolCenterMax[2]) /\n                                2,\n                        ];\n                    }\n                });\n            }\n            triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n        }\n    }\n    setToolCenter(toolCenter, handleType) {\n        if (handleType === 'min') {\n            this.toolCenterMin = [...toolCenter];\n        }\n        else if (handleType === 'max') {\n            this.toolCenterMax = [...toolCenter];\n        }\n        const viewportsInfo = this._getViewportsInfo();\n        triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const annotations = this._getAnnotations(enabledElement);\n        const filteredAnnotations = this.filterInteractableAnnotationsForElement(viewport.element, annotations);\n        if (!filteredAnnotations ||\n            filteredAnnotations.length === 0 ||\n            !filteredAnnotations[0]) {\n            return null;\n        }\n        const { data } = filteredAnnotations[0];\n        const viewportIdArray = [];\n        const referenceLines = data.referenceLines || [];\n        for (let i = 0; i < referenceLines.length; ++i) {\n            const otherViewport = referenceLines[i][0];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            if (!viewportControllable) {\n                continue;\n            }\n            viewportIdArray.push(otherViewport.id);\n            i++;\n        }\n        data.activeViewportIds = [...viewportIdArray];\n        data.handles.activeOperation = OPERATION.DRAG;\n        evt.preventDefault();\n        hideElementCursor(element);\n        this._activateModify(element);\n        return filteredAnnotations[0];\n    }\n    handleSelectedCallback(evt, annotation, handle, interactionType) {\n        this.toolSelectedCallback(evt, annotation, interactionType);\n    }\n    _unsubscribeToViewportNewVolumeSet(viewportsInfo) {\n        viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.removeEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _subscribeToViewportNewVolumeSet(viewports) {\n        viewports.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.addEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta) {\n        viewportsAnnotationsToUpdate.forEach((annotation) => {\n            this._applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta);\n        });\n    }\n    _applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta) {\n        const { data } = annotation;\n        const viewport = renderingEngine.getViewport(data.viewportId);\n        const camera = viewport.getCamera();\n        const normal = camera.viewPlaneNormal;\n        const dotProd = vtkMath.dot(delta, normal);\n        const projectedDelta = [...normal];\n        vtkMath.multiplyScalar(projectedDelta, dotProd);\n        if (Math.abs(projectedDelta[0]) > 1e-3 ||\n            Math.abs(projectedDelta[1]) > 1e-3 ||\n            Math.abs(projectedDelta[2]) > 1e-3) {\n            const newFocalPoint = [0, 0, 0];\n            const newPosition = [0, 0, 0];\n            vtkMath.add(camera.focalPoint, projectedDelta, newFocalPoint);\n            vtkMath.add(camera.position, projectedDelta, newPosition);\n            viewport.setCamera({\n                focalPoint: newFocalPoint,\n                position: newPosition,\n            });\n            viewport.render();\n        }\n    }\n    _pointNearTool(element, annotation, canvasCoords, proximity) {\n        const { data } = annotation;\n        const referenceLines = data.referenceLines;\n        const viewportIdArray = [];\n        if (referenceLines) {\n            for (let i = 0; i < referenceLines.length; ++i) {\n                const otherViewport = referenceLines[i][0];\n                const start1 = referenceLines[i][1];\n                const end1 = referenceLines[i][2];\n                const type = referenceLines[i][3];\n                const distance1 = lineSegment.distanceToPoint(start1, end1, [\n                    canvasCoords[0],\n                    canvasCoords[1],\n                ]);\n                if (distance1 <= proximity) {\n                    viewportIdArray.push(otherViewport.id);\n                    data.handles.activeOperation = 1;\n                    data.handles.activeType = type;\n                }\n            }\n        }\n        data.activeViewportIds = [...viewportIdArray];\n        this.editData = {\n            annotation,\n        };\n        return data.handles.activeOperation === 1 ? true : false;\n    }\n}\nVolumeCroppingControlTool.toolName = 'VolumeCroppingControl';\nexport default VolumeCroppingControlTool;\n","import vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport vtkPoints from '@kitware/vtk.js/Common/Core/Points';\nimport vtkCellArray from '@kitware/vtk.js/Common/Core/CellArray';\nimport { mat3, mat4, vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkSphereSource from '@kitware/vtk.js/Filters/Sources/SphereSource';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport vtkPlane from '@kitware/vtk.js/Common/DataModel/Plane';\nimport { BaseTool } from './base';\nimport { getRenderingEngine, getEnabledElementByIds, getEnabledElement, Enums, triggerEvent, eventTarget, } from '@cornerstonejs/core';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport { Events } from '../enums';\nconst PLANEINDEX = {\n    XMIN: 0,\n    XMAX: 1,\n    YMIN: 2,\n    YMAX: 3,\n    ZMIN: 4,\n    ZMAX: 5,\n};\nconst SPHEREINDEX = {\n    XMIN: 0,\n    XMAX: 1,\n    YMIN: 2,\n    YMAX: 3,\n    ZMIN: 4,\n    ZMAX: 5,\n    XMIN_YMIN_ZMIN: 6,\n    XMIN_YMIN_ZMAX: 7,\n    XMIN_YMAX_ZMIN: 8,\n    XMIN_YMAX_ZMAX: 9,\n    XMAX_YMIN_ZMIN: 10,\n    XMAX_YMIN_ZMAX: 11,\n    XMAX_YMAX_ZMIN: 12,\n    XMAX_YMAX_ZMAX: 13,\n};\nclass VolumeCroppingTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            showCornerSpheres: true,\n            showHandles: true,\n            showClippingPlanes: true,\n            mobile: {\n                enabled: false,\n                opacity: 0.8,\n            },\n            initialCropFactor: 0.08,\n            sphereColors: {\n                SAGITTAL: [1.0, 1.0, 0.0],\n                CORONAL: [0.0, 1.0, 0.0],\n                AXIAL: [1.0, 0.0, 0.0],\n                CORNERS: [0.0, 0.0, 1.0],\n            },\n            sphereRadius: 8,\n            grabSpherePixelDistance: 20,\n            rotateIncrementDegrees: 2,\n            rotateSampleDistanceFactor: 2,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._resizeObservers = new Map();\n        this._hasResolutionChanged = false;\n        this.originalClippingPlanes = [];\n        this.draggingSphereIndex = null;\n        this.toolCenter = [0, 0, 0];\n        this.cornerDragOffset = null;\n        this.faceDragOffset = null;\n        this.sphereStates = [];\n        this.edgeLines = {};\n        this.onSetToolConfiguration = () => {\n            console.debug('Setting tool settoolconfiguration : volumeCropping');\n        };\n        this.onSetToolEnabled = () => {\n            console.debug('Setting tool enabled: volumeCropping');\n        };\n        this.onCameraModified = (evt) => {\n            const { element } = evt.currentTarget\n                ? { element: evt.currentTarget }\n                : evt.detail;\n            const enabledElement = getEnabledElement(element);\n            this._updateClippingPlanes(enabledElement.viewport);\n            enabledElement.viewport.render();\n        };\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const actorEntry = viewport.getDefaultActor();\n            const actor = actorEntry.actor;\n            const mapper = actor.getMapper();\n            const mouseCanvas = [\n                evt.detail.currentPoints.canvas[0],\n                evt.detail.currentPoints.canvas[1],\n            ];\n            this.draggingSphereIndex = null;\n            this.cornerDragOffset = null;\n            this.faceDragOffset = null;\n            for (let i = 0; i < this.sphereStates.length; ++i) {\n                const sphereCanvas = viewport.worldToCanvas(this.sphereStates[i].point);\n                const dist = Math.sqrt(Math.pow(mouseCanvas[0] - sphereCanvas[0], 2) +\n                    Math.pow(mouseCanvas[1] - sphereCanvas[1], 2));\n                if (dist < this.configuration.grabSpherePixelDistance) {\n                    this.draggingSphereIndex = i;\n                    element.style.cursor = 'grabbing';\n                    const sphereState = this.sphereStates[i];\n                    const mouseWorld = viewport.canvasToWorld(mouseCanvas);\n                    if (sphereState.isCorner) {\n                        this.cornerDragOffset = [\n                            sphereState.point[0] - mouseWorld[0],\n                            sphereState.point[1] - mouseWorld[1],\n                            sphereState.point[2] - mouseWorld[2],\n                        ];\n                        this.faceDragOffset = null;\n                    }\n                    else {\n                        const axisIdx = { x: 0, y: 1, z: 2 }[sphereState.axis];\n                        this.faceDragOffset =\n                            sphereState.point[axisIdx] - mouseWorld[axisIdx];\n                        this.cornerDragOffset = null;\n                    }\n                    return true;\n                }\n            }\n            const hasSampleDistance = 'getSampleDistance' in mapper || 'getCurrentSampleDistance' in mapper;\n            if (!hasSampleDistance) {\n                return true;\n            }\n            const originalSampleDistance = mapper.getSampleDistance();\n            if (!this._hasResolutionChanged) {\n                const { rotateSampleDistanceFactor } = this.configuration;\n                mapper.setSampleDistance(originalSampleDistance * rotateSampleDistanceFactor);\n                this._hasResolutionChanged = true;\n                if (this.cleanUp !== null) {\n                    document.removeEventListener('mouseup', this.cleanUp);\n                }\n                this.cleanUp = () => {\n                    mapper.setSampleDistance(originalSampleDistance);\n                    evt.target.style.cursor = '';\n                    if (this.draggingSphereIndex !== null) {\n                        const sphereState = this.sphereStates[this.draggingSphereIndex];\n                        const [viewport3D] = this._getViewportsInfo();\n                        const renderingEngine = getRenderingEngine(viewport3D.renderingEngineId);\n                        const viewport = renderingEngine.getViewport(viewport3D.viewportId);\n                        if (sphereState.isCorner) {\n                            this._updateCornerSpheres();\n                            this._updateFaceSpheresFromCorners();\n                            this._updateClippingPlanesFromFaceSpheres(viewport);\n                        }\n                    }\n                    this.draggingSphereIndex = null;\n                    this.cornerDragOffset = null;\n                    this.faceDragOffset = null;\n                    viewport.render();\n                    this._hasResolutionChanged = false;\n                };\n                document.addEventListener('mouseup', this.cleanUp, { once: true });\n            }\n            return true;\n        };\n        this._onMouseMoveSphere = (evt) => {\n            if (this.draggingSphereIndex === null) {\n                return false;\n            }\n            const sphereState = this.sphereStates[this.draggingSphereIndex];\n            if (!sphereState) {\n                return false;\n            }\n            const { viewport, world } = this._getViewportAndWorldCoords(evt);\n            if (!viewport || !world) {\n                return false;\n            }\n            if (sphereState.isCorner) {\n                const newCorner = this._calculateNewCornerPosition(world);\n                this._updateSpherePosition(sphereState, newCorner);\n                const axisFlags = this._parseCornerKey(sphereState.uid);\n                this._updateRelatedCorners(sphereState, newCorner, axisFlags);\n                this._updateFaceSpheresFromCorners();\n                this._updateCornerSpheres();\n            }\n            else {\n                const axisIdx = { x: 0, y: 1, z: 2 }[sphereState.axis];\n                let newValue = world[axisIdx];\n                if (this.faceDragOffset !== null) {\n                    newValue += this.faceDragOffset;\n                }\n                sphereState.point[axisIdx] = newValue;\n                sphereState.sphereSource.setCenter(...sphereState.point);\n                sphereState.sphereSource.modified();\n                this._updateCornerSpheresFromFaces();\n                this._updateFaceSpheresFromCorners();\n                this._updateCornerSpheres();\n            }\n            this._updateClippingPlanesFromFaceSpheres(viewport);\n            viewport.render();\n            this._triggerToolChangedEvent(sphereState);\n            return true;\n        };\n        this._onControlToolChange = (evt) => {\n            const viewport = this._getViewport();\n            if (!evt.detail.toolCenter) {\n                triggerEvent(eventTarget, Events.VOLUMECROPPING_TOOL_CHANGED, {\n                    originalClippingPlanes: this.originalClippingPlanes,\n                    viewportId: viewport.id,\n                    renderingEngineId: viewport.renderingEngineId,\n                    seriesInstanceUID: this.seriesInstanceUID,\n                });\n            }\n            else {\n                if (evt.detail.seriesInstanceUID !== this.seriesInstanceUID) {\n                    return;\n                }\n                const isMin = evt.detail.handleType === 'min';\n                const toolCenter = isMin\n                    ? evt.detail.toolCenterMin\n                    : evt.detail.toolCenterMax;\n                const normals = isMin\n                    ? [\n                        [1, 0, 0],\n                        [0, 1, 0],\n                        [0, 0, 1],\n                    ]\n                    : [\n                        [-1, 0, 0],\n                        [0, -1, 0],\n                        [0, 0, -1],\n                    ];\n                const planeIndices = isMin\n                    ? [PLANEINDEX.XMIN, PLANEINDEX.YMIN, PLANEINDEX.ZMIN]\n                    : [PLANEINDEX.XMAX, PLANEINDEX.YMAX, PLANEINDEX.ZMAX];\n                const sphereIndices = isMin\n                    ? [SPHEREINDEX.XMIN, SPHEREINDEX.YMIN, SPHEREINDEX.ZMIN]\n                    : [SPHEREINDEX.XMAX, SPHEREINDEX.YMAX, SPHEREINDEX.ZMAX];\n                const axes = ['x', 'y', 'z'];\n                const orientationAxes = [\n                    Enums.OrientationAxis.SAGITTAL,\n                    Enums.OrientationAxis.CORONAL,\n                    Enums.OrientationAxis.AXIAL,\n                ];\n                for (let i = 0; i < 3; ++i) {\n                    const origin = [0, 0, 0];\n                    origin[i] = toolCenter[i];\n                    const plane = vtkPlane.newInstance({\n                        origin,\n                        normal: normals[i],\n                    });\n                    this.originalClippingPlanes[planeIndices[i]].origin = plane.getOrigin();\n                    this.sphereStates[sphereIndices[i]].point[i] = plane.getOrigin()[i];\n                    this.sphereStates[sphereIndices[i]].sphereSource.setCenter(...this.sphereStates[sphereIndices[i]].point);\n                    this.sphereStates[sphereIndices[i]].sphereSource.modified();\n                    const otherSphere = this.sphereStates.find((s, idx) => s.axis === axes[i] && idx !== sphereIndices[i]);\n                    const newCenter = (otherSphere.point[i] + plane.getOrigin()[i]) / 2;\n                    this.sphereStates.forEach((state) => {\n                        if (!state.isCorner &&\n                            state.axis !== axes[i] &&\n                            !evt.detail.viewportOrientation.includes(orientationAxes[i])) {\n                            state.point[i] = newCenter;\n                            state.sphereSource.setCenter(state.point);\n                            state.sphereActor.getProperty().setColor(state.color);\n                            state.sphereSource.modified();\n                        }\n                    });\n                    const volumeActor = viewport.getDefaultActor()?.actor;\n                    if (volumeActor) {\n                        const mapper = volumeActor.getMapper();\n                        const clippingPlanes = mapper.getClippingPlanes();\n                        if (clippingPlanes) {\n                            clippingPlanes[planeIndices[i]].setOrigin(plane.getOrigin());\n                        }\n                    }\n                }\n                this._updateCornerSpheres();\n                viewport.render();\n            }\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this._initialize3DViewports = (viewportsInfo) => {\n            if (!viewportsInfo || !viewportsInfo.length || !viewportsInfo[0]) {\n                console.warn('VolumeCroppingTool: No viewportsInfo available for initialization of volumecroppingtool.');\n                return;\n            }\n            const viewport = this._getViewport();\n            const volumeActors = viewport.getActors();\n            if (!volumeActors || volumeActors.length === 0) {\n                console.warn('VolumeCroppingTool: No volume actors found in the viewport.');\n                return;\n            }\n            const imageData = volumeActors[0].actor.getMapper().getInputData();\n            if (!imageData) {\n                console.warn('VolumeCroppingTool: No image data found for volume actor.');\n                return;\n            }\n            this.seriesInstanceUID = imageData.seriesInstanceUID || 'unknown';\n            const worldBounds = imageData.getBounds();\n            const cropFactor = this.configuration.initialCropFactor || 0.1;\n            const xRange = worldBounds[1] - worldBounds[0];\n            const yRange = worldBounds[3] - worldBounds[2];\n            const zRange = worldBounds[5] - worldBounds[4];\n            const xMin = worldBounds[0] + cropFactor * xRange;\n            const xMax = worldBounds[1] - cropFactor * xRange;\n            const yMin = worldBounds[2] + cropFactor * yRange;\n            const yMax = worldBounds[3] - cropFactor * yRange;\n            const zMin = worldBounds[4] + cropFactor * zRange;\n            const zMax = worldBounds[5] - cropFactor * zRange;\n            const planes = [];\n            const planeXmin = vtkPlane.newInstance({\n                origin: [xMin, 0, 0],\n                normal: [1, 0, 0],\n            });\n            const planeXmax = vtkPlane.newInstance({\n                origin: [xMax, 0, 0],\n                normal: [-1, 0, 0],\n            });\n            const planeYmin = vtkPlane.newInstance({\n                origin: [0, yMin, 0],\n                normal: [0, 1, 0],\n            });\n            const planeYmax = vtkPlane.newInstance({\n                origin: [0, yMax, 0],\n                normal: [0, -1, 0],\n            });\n            const planeZmin = vtkPlane.newInstance({\n                origin: [0, 0, zMin],\n                normal: [0, 0, 1],\n            });\n            const planeZmax = vtkPlane.newInstance({\n                origin: [0, 0, zMax],\n                normal: [0, 0, -1],\n            });\n            const mapper = viewport\n                .getDefaultActor()\n                .actor.getMapper();\n            planes.push(planeXmin);\n            planes.push(planeXmax);\n            planes.push(planeYmin);\n            planes.push(planeYmax);\n            planes.push(planeZmin);\n            planes.push(planeZmax);\n            const originalPlanes = planes.map((plane) => ({\n                origin: [...plane.getOrigin()],\n                normal: [...plane.getNormal()],\n            }));\n            this.originalClippingPlanes = originalPlanes;\n            const sphereXminPoint = [xMin, (yMax + yMin) / 2, (zMax + zMin) / 2];\n            const sphereXmaxPoint = [xMax, (yMax + yMin) / 2, (zMax + zMin) / 2];\n            const sphereYminPoint = [(xMax + xMin) / 2, yMin, (zMax + zMin) / 2];\n            const sphereYmaxPoint = [(xMax + xMin) / 2, yMax, (zMax + zMin) / 2];\n            const sphereZminPoint = [(xMax + xMin) / 2, (yMax + yMin) / 2, zMin];\n            const sphereZmaxPoint = [(xMax + xMin) / 2, (yMax + yMin) / 2, zMax];\n            const adaptiveRadius = this._calculateAdaptiveSphereRadius(Math.sqrt(xRange * xRange + yRange * yRange + zRange * zRange));\n            this._addSphere(viewport, sphereXminPoint, 'x', 'min', null, adaptiveRadius);\n            this._addSphere(viewport, sphereXmaxPoint, 'x', 'max', null, adaptiveRadius);\n            this._addSphere(viewport, sphereYminPoint, 'y', 'min', null, adaptiveRadius);\n            this._addSphere(viewport, sphereYmaxPoint, 'y', 'max', null, adaptiveRadius);\n            this._addSphere(viewport, sphereZminPoint, 'z', 'min', null, adaptiveRadius);\n            this._addSphere(viewport, sphereZmaxPoint, 'z', 'max', null, adaptiveRadius);\n            const corners = [\n                [xMin, yMin, zMin],\n                [xMin, yMin, zMax],\n                [xMin, yMax, zMin],\n                [xMin, yMax, zMax],\n                [xMax, yMin, zMin],\n                [xMax, yMin, zMax],\n                [xMax, yMax, zMin],\n                [xMax, yMax, zMax],\n            ];\n            const cornerKeys = [\n                'XMIN_YMIN_ZMIN',\n                'XMIN_YMIN_ZMAX',\n                'XMIN_YMAX_ZMIN',\n                'XMIN_YMAX_ZMAX',\n                'XMAX_YMIN_ZMIN',\n                'XMAX_YMIN_ZMAX',\n                'XMAX_YMAX_ZMIN',\n                'XMAX_YMAX_ZMAX',\n            ];\n            for (let i = 0; i < corners.length; i++) {\n                this._addSphere(viewport, corners[i], 'corner', null, cornerKeys[i], adaptiveRadius);\n            }\n            const edgeCornerPairs = [\n                ['XMIN_YMIN_ZMIN', 'XMAX_YMIN_ZMIN'],\n                ['XMIN_YMIN_ZMAX', 'XMAX_YMIN_ZMAX'],\n                ['XMIN_YMAX_ZMIN', 'XMAX_YMAX_ZMIN'],\n                ['XMIN_YMAX_ZMAX', 'XMAX_YMAX_ZMAX'],\n                ['XMIN_YMIN_ZMIN', 'XMIN_YMAX_ZMIN'],\n                ['XMIN_YMIN_ZMAX', 'XMIN_YMAX_ZMAX'],\n                ['XMAX_YMIN_ZMIN', 'XMAX_YMAX_ZMIN'],\n                ['XMAX_YMIN_ZMAX', 'XMAX_YMAX_ZMAX'],\n                ['XMIN_YMIN_ZMIN', 'XMIN_YMIN_ZMAX'],\n                ['XMIN_YMAX_ZMIN', 'XMIN_YMAX_ZMAX'],\n                ['XMAX_YMIN_ZMIN', 'XMAX_YMIN_ZMAX'],\n                ['XMAX_YMAX_ZMIN', 'XMAX_YMAX_ZMAX'],\n            ];\n            edgeCornerPairs.forEach(([key1, key2], i) => {\n                const state1 = this.sphereStates.find((s) => s.uid === `corner_${key1}`);\n                const state2 = this.sphereStates.find((s) => s.uid === `corner_${key2}`);\n                if (state1 && state2) {\n                    const uid = `edge_${key1}_${key2}`;\n                    const { actor, source } = this._addLine3DBetweenPoints(viewport, state1.point, state2.point, [0.7, 0.7, 0.7], uid);\n                    this.edgeLines[uid] = { actor, source, key1, key2 };\n                }\n            });\n            mapper.addClippingPlane(planeXmin);\n            mapper.addClippingPlane(planeXmax);\n            mapper.addClippingPlane(planeYmin);\n            mapper.addClippingPlane(planeYmax);\n            mapper.addClippingPlane(planeZmin);\n            mapper.addClippingPlane(planeZmax);\n            eventTarget.addEventListener(Events.VOLUMECROPPINGCONTROL_TOOL_CHANGED, (evt) => {\n                this._onControlToolChange(evt);\n            });\n            viewport.render();\n        };\n        this._getViewportAndWorldCoords = (evt) => {\n            const viewport = this._getViewport();\n            const x = evt.detail.currentPoints.canvas[0];\n            const y = evt.detail.currentPoints.canvas[1];\n            const world = viewport.canvasToWorld([x, y]);\n            return { viewport, world };\n        };\n        this._getViewport = () => {\n            const [viewport3D] = this._getViewportsInfo();\n            const renderingEngine = getRenderingEngine(viewport3D.renderingEngineId);\n            return renderingEngine.getViewport(viewport3D.viewportId);\n        };\n        this._handleCornerSphereMovement = (sphereState, world, viewport) => {\n            const newCorner = this._calculateNewCornerPosition(world);\n            this._updateSpherePosition(sphereState, newCorner);\n            const axisFlags = this._parseCornerKey(sphereState.uid);\n            this._updateRelatedCorners(sphereState, newCorner, axisFlags);\n            this._updateAfterCornerMovement(viewport);\n        };\n        this._handleFaceSphereMovement = (sphereState, world, viewport) => {\n            const axisIdx = { x: 0, y: 1, z: 2 }[sphereState.axis];\n            let newValue = world[axisIdx];\n            if (this.faceDragOffset !== null) {\n                newValue += this.faceDragOffset;\n            }\n            sphereState.point[axisIdx] = newValue;\n            sphereState.sphereSource.setCenter(...sphereState.point);\n            sphereState.sphereSource.modified();\n            this._updateAfterFaceMovement(viewport);\n        };\n        this._calculateNewCornerPosition = (world) => {\n            let newCorner = [world[0], world[1], world[2]];\n            if (this.cornerDragOffset) {\n                newCorner = [\n                    world[0] + this.cornerDragOffset[0],\n                    world[1] + this.cornerDragOffset[1],\n                    world[2] + this.cornerDragOffset[2],\n                ];\n            }\n            return newCorner;\n        };\n        this._parseCornerKey = (uid) => {\n            const cornerKey = uid.replace('corner_', '');\n            return {\n                isXMin: cornerKey.includes('XMIN'),\n                isXMax: cornerKey.includes('XMAX'),\n                isYMin: cornerKey.includes('YMIN'),\n                isYMax: cornerKey.includes('YMAX'),\n                isZMin: cornerKey.includes('ZMIN'),\n                isZMax: cornerKey.includes('ZMAX'),\n            };\n        };\n        this._updateSpherePosition = (sphereState, newPosition) => {\n            sphereState.point = newPosition;\n            sphereState.sphereSource.setCenter(...newPosition);\n            sphereState.sphereSource.modified();\n        };\n        this._updateRelatedCorners = (draggedSphere, newCorner, axisFlags) => {\n            this.sphereStates.forEach((state) => {\n                if (!state.isCorner || state === draggedSphere) {\n                    return;\n                }\n                const key = state.uid.replace('corner_', '');\n                const shouldUpdate = this._shouldUpdateCorner(key, axisFlags);\n                if (shouldUpdate) {\n                    this._updateCornerCoordinates(state, newCorner, key, axisFlags);\n                }\n            });\n        };\n        this._shouldUpdateCorner = (cornerKey, axisFlags) => {\n            return ((axisFlags.isXMin && cornerKey.includes('XMIN')) ||\n                (axisFlags.isXMax && cornerKey.includes('XMAX')) ||\n                (axisFlags.isYMin && cornerKey.includes('YMIN')) ||\n                (axisFlags.isYMax && cornerKey.includes('YMAX')) ||\n                (axisFlags.isZMin && cornerKey.includes('ZMIN')) ||\n                (axisFlags.isZMax && cornerKey.includes('ZMAX')));\n        };\n        this._updateCornerCoordinates = (state, newCorner, cornerKey, axisFlags) => {\n            if ((axisFlags.isXMin && cornerKey.includes('XMIN')) ||\n                (axisFlags.isXMax && cornerKey.includes('XMAX'))) {\n                state.point[0] = newCorner[0];\n            }\n            if ((axisFlags.isYMin && cornerKey.includes('YMIN')) ||\n                (axisFlags.isYMax && cornerKey.includes('YMAX'))) {\n                state.point[1] = newCorner[1];\n            }\n            if ((axisFlags.isZMin && cornerKey.includes('ZMIN')) ||\n                (axisFlags.isZMax && cornerKey.includes('ZMAX'))) {\n                state.point[2] = newCorner[2];\n            }\n            state.sphereSource.setCenter(...state.point);\n            state.sphereSource.modified();\n        };\n        this._updateAfterCornerMovement = (viewport) => {\n            this._updateFaceSpheresFromCorners();\n            this._updateCornerSpheres();\n            this._updateClippingPlanesFromFaceSpheres(viewport);\n        };\n        this._updateAfterFaceMovement = (viewport) => {\n            this._updateCornerSpheresFromFaces();\n            this._updateClippingPlanesFromFaceSpheres(viewport);\n        };\n        this._triggerToolChangedEvent = (sphereState) => {\n            triggerEvent(eventTarget, Events.VOLUMECROPPING_TOOL_CHANGED, {\n                toolCenter: sphereState.point,\n                axis: sphereState.isCorner ? 'corner' : sphereState.axis,\n                draggingSphereIndex: this.draggingSphereIndex,\n                seriesInstanceUID: this.seriesInstanceUID,\n            });\n        };\n        this._onNewVolume = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            this.originalClippingPlanes = [];\n            this.sphereStates = [];\n            this.edgeLines = {};\n            this._initialize3DViewports(viewportsInfo);\n        };\n        this._rotateCamera = (viewport, centerWorld, axis, angle) => {\n            const vtkCamera = viewport.getVtkActiveCamera();\n            const viewUp = vtkCamera.getViewUp();\n            const focalPoint = vtkCamera.getFocalPoint();\n            const position = vtkCamera.getPosition();\n            const newPosition = [0, 0, 0];\n            const newFocalPoint = [0, 0, 0];\n            const newViewUp = [0, 0, 0];\n            const transform = mat4.identity(new Float32Array(16));\n            mat4.translate(transform, transform, centerWorld);\n            mat4.rotate(transform, transform, angle, axis);\n            mat4.translate(transform, transform, [\n                -centerWorld[0],\n                -centerWorld[1],\n                -centerWorld[2],\n            ]);\n            vec3.transformMat4(newPosition, position, transform);\n            vec3.transformMat4(newFocalPoint, focalPoint, transform);\n            mat4.identity(transform);\n            mat4.rotate(transform, transform, angle, axis);\n            vec3.transformMat4(newViewUp, viewUp, transform);\n            viewport.setCamera({\n                position: newPosition,\n                viewUp: newViewUp,\n                focalPoint: newFocalPoint,\n            });\n        };\n        this.touchDragCallback = this._dragCallback.bind(this);\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    onSetToolActive() {\n        if (this.sphereStates && this.sphereStates.length > 0) {\n            if (this.configuration.showHandles) {\n                this.setHandlesVisible(false);\n                this.setClippingPlanesVisible(false);\n            }\n            else {\n                this.setHandlesVisible(true);\n                this.setClippingPlanesVisible(true);\n            }\n        }\n        else {\n            const viewportsInfo = this._getViewportsInfo();\n            const subscribeToElementResize = () => {\n                viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                    if (!this._resizeObservers.has(viewportId)) {\n                        const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId) || { viewport: null };\n                        if (!viewport) {\n                            return;\n                        }\n                        const { element } = viewport;\n                        const resizeObserver = new ResizeObserver(() => {\n                            const element = getEnabledElementByIds(viewportId, renderingEngineId);\n                            if (!element) {\n                                return;\n                            }\n                            const { viewport } = element;\n                            const viewPresentation = viewport.getViewPresentation();\n                            viewport.resetCamera();\n                            viewport.setViewPresentation(viewPresentation);\n                            viewport.render();\n                        });\n                        resizeObserver.observe(element);\n                        this._resizeObservers.set(viewportId, resizeObserver);\n                    }\n                });\n            };\n            subscribeToElementResize();\n            this._viewportAddedListener = (evt) => {\n                if (evt.detail.toolGroupId === this.toolGroupId) {\n                    subscribeToElementResize();\n                }\n            };\n            eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);\n            this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n            this._subscribeToViewportNewVolumeSet(viewportsInfo);\n            this._initialize3DViewports(viewportsInfo);\n            if (this.sphereStates && this.sphereStates.length > 0) {\n                this.setHandlesVisible(true);\n            }\n            else {\n                this.originalClippingPlanes = [];\n                this._initialize3DViewports(viewportsInfo);\n            }\n        }\n    }\n    onSetToolDisabled() {\n        this._resizeObservers.forEach((resizeObserver, viewportId) => {\n            resizeObserver.disconnect();\n            this._resizeObservers.delete(viewportId);\n        });\n        if (this._viewportAddedListener) {\n            eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);\n            this._viewportAddedListener = null;\n        }\n        const viewportsInfo = this._getViewportsInfo();\n        this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n    }\n    setHandlesVisible(visible) {\n        this.configuration.showHandles = visible;\n        if (visible) {\n            this.sphereStates[SPHEREINDEX.XMIN].point[0] =\n                this.originalClippingPlanes[PLANEINDEX.XMIN].origin[0];\n            this.sphereStates[SPHEREINDEX.XMAX].point[0] =\n                this.originalClippingPlanes[PLANEINDEX.XMAX].origin[0];\n            this.sphereStates[SPHEREINDEX.YMIN].point[1] =\n                this.originalClippingPlanes[PLANEINDEX.YMIN].origin[1];\n            this.sphereStates[SPHEREINDEX.YMAX].point[1] =\n                this.originalClippingPlanes[PLANEINDEX.YMAX].origin[1];\n            this.sphereStates[SPHEREINDEX.ZMIN].point[2] =\n                this.originalClippingPlanes[PLANEINDEX.ZMIN].origin[2];\n            this.sphereStates[SPHEREINDEX.ZMAX].point[2] =\n                this.originalClippingPlanes[PLANEINDEX.ZMAX].origin[2];\n            [\n                SPHEREINDEX.XMIN,\n                SPHEREINDEX.XMAX,\n                SPHEREINDEX.YMIN,\n                SPHEREINDEX.YMAX,\n                SPHEREINDEX.ZMIN,\n                SPHEREINDEX.ZMAX,\n            ].forEach((idx) => {\n                const s = this.sphereStates[idx];\n                s.sphereSource.setCenter(...s.point);\n                s.sphereSource.modified();\n            });\n            this._updateCornerSpheres();\n        }\n        this._updateHandlesVisibility();\n        const viewportsInfo = this._getViewportsInfo();\n        const [viewport3D] = viewportsInfo;\n        const renderingEngine = getRenderingEngine(viewport3D.renderingEngineId);\n        const viewport = renderingEngine.getViewport(viewport3D.viewportId);\n        viewport.render();\n    }\n    getHandlesVisible() {\n        return this.configuration.showHandles;\n    }\n    getClippingPlanesVisible() {\n        return this.configuration.showClippingPlanes;\n    }\n    setClippingPlanesVisible(visible) {\n        this.configuration.showClippingPlanes = visible;\n        const viewport = this._getViewport();\n        this._updateClippingPlanes(viewport);\n        viewport.render();\n    }\n    _dragCallback(evt) {\n        const { element, currentPoints, lastPoints } = evt.detail;\n        if (this.draggingSphereIndex !== null) {\n            this._onMouseMoveSphere(evt);\n        }\n        else {\n            const currentPointsCanvas = currentPoints.canvas;\n            const lastPointsCanvas = lastPoints.canvas;\n            const { rotateIncrementDegrees } = this.configuration;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const width = element.clientWidth;\n            const height = element.clientHeight;\n            const normalizedPosition = [\n                currentPointsCanvas[0] / width,\n                currentPointsCanvas[1] / height,\n            ];\n            const normalizedPreviousPosition = [\n                lastPointsCanvas[0] / width,\n                lastPointsCanvas[1] / height,\n            ];\n            const center = [width * 0.5, height * 0.5];\n            const centerWorld = viewport.canvasToWorld(center);\n            const normalizedCenter = [0.5, 0.5];\n            const radsq = (1.0 + Math.abs(normalizedCenter[0])) ** 2.0;\n            const op = [normalizedPreviousPosition[0], 0, 0];\n            const oe = [normalizedPosition[0], 0, 0];\n            const opsq = op[0] ** 2;\n            const oesq = oe[0] ** 2;\n            const lop = opsq > radsq ? 0 : Math.sqrt(radsq - opsq);\n            const loe = oesq > radsq ? 0 : Math.sqrt(radsq - oesq);\n            const nop = [op[0], 0, lop];\n            vtkMath.normalize(nop);\n            const noe = [oe[0], 0, loe];\n            vtkMath.normalize(noe);\n            const dot = vtkMath.dot(nop, noe);\n            if (Math.abs(dot) > 0.0001) {\n                const angleX = -2 *\n                    Math.acos(vtkMath.clampValue(dot, -1.0, 1.0)) *\n                    Math.sign(normalizedPosition[0] - normalizedPreviousPosition[0]) *\n                    rotateIncrementDegrees;\n                const upVec = camera.viewUp;\n                const atV = camera.viewPlaneNormal;\n                const rightV = [0, 0, 0];\n                const forwardV = [0, 0, 0];\n                vtkMath.cross(upVec, atV, rightV);\n                vtkMath.normalize(rightV);\n                vtkMath.cross(atV, rightV, forwardV);\n                vtkMath.normalize(forwardV);\n                vtkMath.normalize(upVec);\n                this._rotateCamera(viewport, centerWorld, forwardV, angleX);\n                const angleY = (normalizedPreviousPosition[1] - normalizedPosition[1]) *\n                    rotateIncrementDegrees;\n                this._rotateCamera(viewport, centerWorld, rightV, angleY);\n            }\n            viewport.render();\n        }\n    }\n    _updateClippingPlanes(viewport) {\n        const actorEntry = viewport.getDefaultActor();\n        if (!actorEntry || !actorEntry.actor) {\n            if (!viewport._missingActorWarned) {\n                console.warn('VolumeCroppingTool._updateClippingPlanes: No default actor found in viewport.');\n                viewport._missingActorWarned = true;\n            }\n            return;\n        }\n        const actor = actorEntry.actor;\n        const mapper = actor.getMapper();\n        const matrix = actor.getMatrix();\n        if (!this.configuration.showClippingPlanes) {\n            mapper.removeAllClippingPlanes();\n            return;\n        }\n        const rot = mat3.create();\n        mat3.fromMat4(rot, matrix);\n        const normalMatrix = mat3.create();\n        mat3.invert(normalMatrix, rot);\n        mat3.transpose(normalMatrix, normalMatrix);\n        const originalPlanes = this.originalClippingPlanes;\n        if (!originalPlanes || !originalPlanes.length) {\n            return;\n        }\n        mapper.removeAllClippingPlanes();\n        const transformedOrigins = [];\n        const transformedNormals = [];\n        for (let i = 0; i < originalPlanes.length; ++i) {\n            const plane = originalPlanes[i];\n            const oVec = vec3.create();\n            vec3.transformMat4(oVec, new Float32Array(plane.origin), matrix);\n            const o = [oVec[0], oVec[1], oVec[2]];\n            const nVec = vec3.create();\n            vec3.transformMat3(nVec, new Float32Array(plane.normal), normalMatrix);\n            vec3.normalize(nVec, nVec);\n            const n = [nVec[0], nVec[1], nVec[2]];\n            transformedOrigins.push(o);\n            transformedNormals.push(n);\n        }\n        for (let i = 0; i < transformedOrigins.length; ++i) {\n            const planeInstance = vtkPlane.newInstance({\n                origin: transformedOrigins[i],\n                normal: transformedNormals[i],\n            });\n            mapper.addClippingPlane(planeInstance);\n        }\n    }\n    _updateHandlesVisibility() {\n        this.sphereStates.forEach((state) => {\n            if (state.sphereActor) {\n                state.sphereActor.setVisibility(this.configuration.showHandles);\n            }\n        });\n        Object.values(this.edgeLines).forEach(({ actor }) => {\n            if (actor) {\n                actor.setVisibility(this.configuration.showHandles);\n            }\n        });\n    }\n    _addLine3DBetweenPoints(viewport, point1, point2, color = [0.7, 0.7, 0.7], uid = '') {\n        if (point1[0] === point2[0] &&\n            point1[1] === point2[1] &&\n            point1[2] === point2[2]) {\n            return { actor: null, source: null };\n        }\n        const points = vtkPoints.newInstance();\n        points.setNumberOfPoints(2);\n        points.setPoint(0, point1[0], point1[1], point1[2]);\n        points.setPoint(1, point2[0], point2[1], point2[2]);\n        const lines = vtkCellArray.newInstance({ values: [2, 0, 1] });\n        const polyData = vtkPolyData.newInstance();\n        polyData.setPoints(points);\n        polyData.setLines(lines);\n        const mapper = vtkMapper.newInstance();\n        mapper.setInputData(polyData);\n        const actor = vtkActor.newInstance();\n        actor.setMapper(mapper);\n        actor.getProperty().setColor(...color);\n        actor.getProperty().setLineWidth(0.5);\n        actor.getProperty().setOpacity(1.0);\n        actor.getProperty().setInterpolationToFlat();\n        actor.getProperty().setAmbient(1.0);\n        actor.getProperty().setDiffuse(0.0);\n        actor.getProperty().setSpecular(0.0);\n        actor.setVisibility(this.configuration.showHandles);\n        viewport.addActor({ actor, uid });\n        return { actor, source: polyData };\n    }\n    _addSphere(viewport, point, axis, position, cornerKey = null, adaptiveRadius) {\n        const uid = cornerKey ? `corner_${cornerKey}` : `${axis}_${position}`;\n        const sphereState = this.sphereStates.find((s) => s.uid === uid);\n        if (sphereState) {\n            return;\n        }\n        const sphereSource = vtkSphereSource.newInstance();\n        sphereSource.setCenter(point);\n        sphereSource.setRadius(adaptiveRadius);\n        const sphereMapper = vtkMapper.newInstance();\n        sphereMapper.setInputConnection(sphereSource.getOutputPort());\n        const sphereActor = vtkActor.newInstance();\n        sphereActor.setMapper(sphereMapper);\n        let color = [0.0, 1.0, 0.0];\n        const sphereColors = this.configuration.sphereColors || {};\n        if (cornerKey) {\n            color = sphereColors.CORNERS || [0.0, 0.0, 1.0];\n        }\n        else if (axis === 'z') {\n            color = sphereColors.AXIAL || [1.0, 0.0, 0.0];\n        }\n        else if (axis === 'x') {\n            color = sphereColors.SAGITTAL || [1.0, 1.0, 0.0];\n        }\n        else if (axis === 'y') {\n            color = sphereColors.CORONAL || [0.0, 1.0, 0.0];\n        }\n        const idx = this.sphereStates.findIndex((s) => s.uid === uid);\n        if (idx === -1) {\n            this.sphereStates.push({\n                point: point.slice(),\n                axis,\n                uid,\n                sphereSource,\n                sphereActor,\n                isCorner: !!cornerKey,\n                color,\n            });\n        }\n        else {\n            this.sphereStates[idx].point = point.slice();\n            this.sphereStates[idx].sphereSource = sphereSource;\n        }\n        const existingActors = viewport.getActors();\n        const existing = existingActors.find((a) => a.uid === uid);\n        if (existing) {\n            return;\n        }\n        sphereActor.getProperty().setColor(color);\n        sphereActor.setVisibility(this.configuration.showHandles);\n        viewport.addActor({ actor: sphereActor, uid: uid });\n    }\n    _calculateAdaptiveSphereRadius(diagonal) {\n        const baseRadius = this.configuration.sphereRadius !== undefined\n            ? this.configuration.sphereRadius\n            : 8;\n        const scaleFactor = this.configuration.sphereRadiusScale || 0.01;\n        const adaptiveRadius = diagonal * scaleFactor;\n        const minRadius = this.configuration.minSphereRadius || 2;\n        const maxRadius = this.configuration.maxSphereRadius || 50;\n        return Math.max(minRadius, Math.min(maxRadius, adaptiveRadius));\n    }\n    _updateClippingPlanesFromFaceSpheres(viewport) {\n        const mapper = viewport.getDefaultActor().actor.getMapper();\n        this.originalClippingPlanes[0].origin = [\n            ...this.sphereStates[SPHEREINDEX.XMIN].point,\n        ];\n        this.originalClippingPlanes[1].origin = [\n            ...this.sphereStates[SPHEREINDEX.XMAX].point,\n        ];\n        this.originalClippingPlanes[2].origin = [\n            ...this.sphereStates[SPHEREINDEX.YMIN].point,\n        ];\n        this.originalClippingPlanes[3].origin = [\n            ...this.sphereStates[SPHEREINDEX.YMAX].point,\n        ];\n        this.originalClippingPlanes[4].origin = [\n            ...this.sphereStates[SPHEREINDEX.ZMIN].point,\n        ];\n        this.originalClippingPlanes[5].origin = [\n            ...this.sphereStates[SPHEREINDEX.ZMAX].point,\n        ];\n        mapper.removeAllClippingPlanes();\n        for (let i = 0; i < 6; ++i) {\n            const origin = this.originalClippingPlanes[i].origin;\n            const normal = this.originalClippingPlanes[i].normal;\n            const plane = vtkPlane.newInstance({\n                origin,\n                normal,\n            });\n            mapper.addClippingPlane(plane);\n        }\n    }\n    _updateCornerSpheresFromFaces() {\n        const xMin = this.sphereStates[SPHEREINDEX.XMIN].point[0];\n        const xMax = this.sphereStates[SPHEREINDEX.XMAX].point[0];\n        const yMin = this.sphereStates[SPHEREINDEX.YMIN].point[1];\n        const yMax = this.sphereStates[SPHEREINDEX.YMAX].point[1];\n        const zMin = this.sphereStates[SPHEREINDEX.ZMIN].point[2];\n        const zMax = this.sphereStates[SPHEREINDEX.ZMAX].point[2];\n        const corners = [\n            { key: 'XMIN_YMIN_ZMIN', pos: [xMin, yMin, zMin] },\n            { key: 'XMIN_YMIN_ZMAX', pos: [xMin, yMin, zMax] },\n            { key: 'XMIN_YMAX_ZMIN', pos: [xMin, yMax, zMin] },\n            { key: 'XMIN_YMAX_ZMAX', pos: [xMin, yMax, zMax] },\n            { key: 'XMAX_YMIN_ZMIN', pos: [xMax, yMin, zMin] },\n            { key: 'XMAX_YMIN_ZMAX', pos: [xMax, yMin, zMax] },\n            { key: 'XMAX_YMAX_ZMIN', pos: [xMax, yMax, zMin] },\n            { key: 'XMAX_YMAX_ZMAX', pos: [xMax, yMax, zMax] },\n        ];\n        for (const corner of corners) {\n            const state = this.sphereStates.find((s) => s.uid === `corner_${corner.key}`);\n            if (state) {\n                state.point[0] = corner.pos[0];\n                state.point[1] = corner.pos[1];\n                state.point[2] = corner.pos[2];\n                state.sphereSource.setCenter(...state.point);\n                state.sphereSource.modified();\n            }\n        }\n    }\n    _updateFaceSpheresFromCorners() {\n        const corners = [\n            this.sphereStates[SPHEREINDEX.XMIN_YMIN_ZMIN].point,\n            this.sphereStates[SPHEREINDEX.XMIN_YMIN_ZMAX].point,\n            this.sphereStates[SPHEREINDEX.XMIN_YMAX_ZMIN].point,\n            this.sphereStates[SPHEREINDEX.XMIN_YMAX_ZMAX].point,\n            this.sphereStates[SPHEREINDEX.XMAX_YMIN_ZMIN].point,\n            this.sphereStates[SPHEREINDEX.XMAX_YMIN_ZMAX].point,\n            this.sphereStates[SPHEREINDEX.XMAX_YMAX_ZMIN].point,\n            this.sphereStates[SPHEREINDEX.XMAX_YMAX_ZMAX].point,\n        ];\n        const xs = corners.map((p) => p[0]);\n        const ys = corners.map((p) => p[1]);\n        const zs = corners.map((p) => p[2]);\n        const xMin = Math.min(...xs), xMax = Math.max(...xs);\n        const yMin = Math.min(...ys), yMax = Math.max(...ys);\n        const zMin = Math.min(...zs), zMax = Math.max(...zs);\n        this.sphereStates[SPHEREINDEX.XMIN].point = [\n            xMin,\n            (yMin + yMax) / 2,\n            (zMin + zMax) / 2,\n        ];\n        this.sphereStates[SPHEREINDEX.XMAX].point = [\n            xMax,\n            (yMin + yMax) / 2,\n            (zMin + zMax) / 2,\n        ];\n        this.sphereStates[SPHEREINDEX.YMIN].point = [\n            (xMin + xMax) / 2,\n            yMin,\n            (zMin + zMax) / 2,\n        ];\n        this.sphereStates[SPHEREINDEX.YMAX].point = [\n            (xMin + xMax) / 2,\n            yMax,\n            (zMin + zMax) / 2,\n        ];\n        this.sphereStates[SPHEREINDEX.ZMIN].point = [\n            (xMin + xMax) / 2,\n            (yMin + yMax) / 2,\n            zMin,\n        ];\n        this.sphereStates[SPHEREINDEX.ZMAX].point = [\n            (xMin + xMax) / 2,\n            (yMin + yMax) / 2,\n            zMax,\n        ];\n        [\n            SPHEREINDEX.XMIN,\n            SPHEREINDEX.XMAX,\n            SPHEREINDEX.YMIN,\n            SPHEREINDEX.YMAX,\n            SPHEREINDEX.ZMIN,\n            SPHEREINDEX.ZMAX,\n        ].forEach((idx) => {\n            const s = this.sphereStates[idx];\n            s.sphereSource.setCenter(...s.point);\n            s.sphereSource.modified();\n        });\n    }\n    _updateCornerSpheres() {\n        const xMin = this.sphereStates[SPHEREINDEX.XMIN].point[0];\n        const xMax = this.sphereStates[SPHEREINDEX.XMAX].point[0];\n        const yMin = this.sphereStates[SPHEREINDEX.YMIN].point[1];\n        const yMax = this.sphereStates[SPHEREINDEX.YMAX].point[1];\n        const zMin = this.sphereStates[SPHEREINDEX.ZMIN].point[2];\n        const zMax = this.sphereStates[SPHEREINDEX.ZMAX].point[2];\n        const corners = [\n            { key: 'XMIN_YMIN_ZMIN', pos: [xMin, yMin, zMin] },\n            { key: 'XMIN_YMIN_ZMAX', pos: [xMin, yMin, zMax] },\n            { key: 'XMIN_YMAX_ZMIN', pos: [xMin, yMax, zMin] },\n            { key: 'XMIN_YMAX_ZMAX', pos: [xMin, yMax, zMax] },\n            { key: 'XMAX_YMIN_ZMIN', pos: [xMax, yMin, zMin] },\n            { key: 'XMAX_YMIN_ZMAX', pos: [xMax, yMin, zMax] },\n            { key: 'XMAX_YMAX_ZMIN', pos: [xMax, yMax, zMin] },\n            { key: 'XMAX_YMAX_ZMAX', pos: [xMax, yMax, zMax] },\n        ];\n        for (const corner of corners) {\n            const state = this.sphereStates.find((s) => s.uid === `corner_${corner.key}`);\n            if (state) {\n                state.point[0] = corner.pos[0];\n                state.point[1] = corner.pos[1];\n                state.point[2] = corner.pos[2];\n                state.sphereSource.setCenter(...state.point);\n                state.sphereSource.modified();\n            }\n        }\n        Object.values(this.edgeLines).forEach(({ source, key1, key2 }) => {\n            const state1 = this.sphereStates.find((s) => s.uid === `corner_${key1}`);\n            const state2 = this.sphereStates.find((s) => s.uid === `corner_${key2}`);\n            if (state1 && state2) {\n                const points = source.getPoints();\n                points.setPoint(0, state1.point[0], state1.point[1], state1.point[2]);\n                points.setPoint(1, state2.point[0], state2.point[1], state2.point[2]);\n                points.modified();\n                source.modified();\n            }\n        });\n    }\n    _unsubscribeToViewportNewVolumeSet(viewportsInfo) {\n        viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.removeEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _subscribeToViewportNewVolumeSet(viewports) {\n        viewports.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.addEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n}\nVolumeCroppingTool.toolName = 'VolumeCropping';\nexport default VolumeCroppingTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nconst DIRECTIONS = {\n    X: [1, 0, 0],\n    Y: [0, 1, 0],\n    Z: [0, 0, 1],\n    CUSTOM: [],\n};\nclass VolumeRotateTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            direction: DIRECTIONS.Z,\n            rotateIncrementDegrees: 30,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n    }\n    mouseWheelCallback(evt) {\n        const { element, wheel } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { direction, rotateIncrementDegrees } = this.configuration;\n        const camera = viewport.getCamera();\n        const { viewUp, position, focalPoint } = camera;\n        const { direction: deltaY } = wheel;\n        const [cx, cy, cz] = focalPoint;\n        const [ax, ay, az] = direction;\n        const angle = (deltaY * (rotateIncrementDegrees * Math.PI)) / 180;\n        const newPosition = [0, 0, 0];\n        const newFocalPoint = [0, 0, 0];\n        const newViewUp = [0, 0, 0];\n        const transform = mat4.identity(new Float32Array(16));\n        mat4.translate(transform, transform, [cx, cy, cz]);\n        mat4.rotate(transform, transform, angle, [ax, ay, az]);\n        mat4.translate(transform, transform, [-cx, -cy, -cz]);\n        vec3.transformMat4(newPosition, position, transform);\n        vec3.transformMat4(newFocalPoint, focalPoint, transform);\n        mat4.identity(transform);\n        mat4.rotate(transform, transform, angle, [ax, ay, az]);\n        vec3.transformMat4(newViewUp, viewUp, transform);\n        viewport.setCamera({\n            position: newPosition,\n            viewUp: newViewUp,\n            focalPoint: newFocalPoint,\n        });\n        viewport.render();\n    }\n}\nVolumeRotateTool.toolName = 'VolumeRotateMouseWheel';\nexport default VolumeRotateTool;\n","import { AnnotationTool } from './base';\nimport { getEnabledElement, utilities } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../stateManagement';\nimport { triggerAnnotationCompleted } from '../stateManagement/annotation/helpers/state';\nimport { drawRect as drawRectSvg } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { windowLevel } from '../utilities/voi';\nclass WindowLevelRegionTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            minWindowWidth: 10,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                    },\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender } = this.editData;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            removeAnnotation(annotation.annotationUID);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationCompleted(annotation);\n            this.applyWindowLevelRegion(annotation, element);\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            const { currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n            const worldPos = currentPoints.world;\n            const { points } = data.handles;\n            const DEFAULT_HANDLE_INDEX = 3;\n            points[DEFAULT_HANDLE_INDEX] = [...worldPos];\n            const bottomLeftCanvas = worldToCanvas(points[0]);\n            const topRightCanvas = worldToCanvas(points[3]);\n            const bottomRightCanvas = [\n                topRightCanvas[0],\n                bottomLeftCanvas[1],\n            ];\n            const topLeftCanvas = [\n                bottomLeftCanvas[0],\n                topRightCanvas[1],\n            ];\n            const bottomRightWorld = canvasToWorld(bottomRightCanvas);\n            const topLeftWorld = canvasToWorld(topLeftCanvas);\n            points[1] = bottomRightWorld;\n            points[2] = topLeftWorld;\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const dataId = `${annotationUID}-rect`;\n                const rectangleUID = '0';\n                drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n        this.applyWindowLevelRegion = (annotation, element) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const imageData = windowLevel.extractWindowLevelRegionToolData(viewport);\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const startCanvas = canvasCoordinates[0];\n            const endCanvas = canvasCoordinates[3];\n            let left = Math.min(startCanvas[0], endCanvas[0]);\n            let top = Math.min(startCanvas[1], endCanvas[1]);\n            let width = Math.abs(startCanvas[0] - endCanvas[0]);\n            let height = Math.abs(startCanvas[1] - endCanvas[1]);\n            left = utilities.clip(left, 0, imageData.width);\n            top = utilities.clip(top, 0, imageData.height);\n            width = Math.floor(Math.min(width, Math.abs(imageData.width - left)));\n            height = Math.floor(Math.min(height, Math.abs(imageData.height - top)));\n            const pixelLuminanceData = windowLevel.getLuminanceFromRegion(imageData, Math.round(left), Math.round(top), width, height);\n            const minMaxMean = windowLevel.calculateMinMaxMean(pixelLuminanceData, imageData.minPixelValue, imageData.maxPixelValue);\n            if (this.configuration.minWindowWidth === undefined) {\n                this.configuration.minWindowWidth = 10;\n            }\n            const windowWidth = Math.max(Math.abs(minMaxMean.max - minMaxMean.min), this.configuration.minWindowWidth);\n            const windowCenter = minMaxMean.mean;\n            const voiLutFunction = viewport.getProperties().VOILUTFunction;\n            const voiRange = utilities.windowLevel.toLowHighRange(windowWidth, windowCenter, voiLutFunction);\n            viewport.setProperties({ voiRange });\n            viewport.render();\n        };\n        this.cancel = () => {\n            return null;\n        };\n        this.isPointNearTool = () => {\n            return null;\n        };\n        this.toolSelectedCallback = () => {\n            return null;\n        };\n        this.handleSelectedCallback = () => {\n            return null;\n        };\n        this._activateModify = () => {\n            return null;\n        };\n        this._deactivateModify = () => {\n            return null;\n        };\n    }\n}\nWindowLevelRegionTool.toolName = 'WindowLevelRegion';\nexport default WindowLevelRegionTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement, VolumeViewport, cache, utilities, } from '@cornerstonejs/core';\nconst DEFAULT_MULTIPLIER = 4;\nconst DEFAULT_IMAGE_DYNAMIC_RANGE = 1024;\nconst PT = 'PT';\nclass WindowLevelTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this._getImageDynamicRangeFromMiddleSlice = (scalarData, dimensions) => {\n            const middleSliceIndex = Math.floor(dimensions[2] / 2);\n            const frameLength = dimensions[0] * dimensions[1];\n            let bytesPerVoxel;\n            let TypedArrayConstructor;\n            if (scalarData instanceof Float32Array) {\n                bytesPerVoxel = 4;\n                TypedArrayConstructor = Float32Array;\n            }\n            else if (scalarData instanceof Uint8Array) {\n                bytesPerVoxel = 1;\n                TypedArrayConstructor = Uint8Array;\n            }\n            else if (scalarData instanceof Uint16Array) {\n                bytesPerVoxel = 2;\n                TypedArrayConstructor = Uint16Array;\n            }\n            else if (scalarData instanceof Int16Array) {\n                bytesPerVoxel = 2;\n                TypedArrayConstructor = Int16Array;\n            }\n            const buffer = scalarData.buffer;\n            const byteOffset = middleSliceIndex * frameLength * bytesPerVoxel;\n            const frame = new TypedArrayConstructor(buffer, byteOffset, frameLength);\n            const { max, min } = this._getMinMax(frame, frameLength);\n            return max - min;\n        };\n    }\n    touchDragCallback(evt) {\n        this.mouseDragCallback(evt);\n    }\n    mouseDragCallback(evt) {\n        const { element, deltaPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        let volumeId, lower, upper, modality, newRange, viewportsContainingVolumeUID;\n        let isPreScaled = false;\n        const properties = viewport.getProperties();\n        if (viewport instanceof VolumeViewport) {\n            volumeId = viewport.getVolumeId();\n            viewportsContainingVolumeUID =\n                utilities.getViewportsWithVolumeId(volumeId);\n            ({ lower, upper } = properties.voiRange);\n            const volume = cache.getVolume(volumeId);\n            if (!volume) {\n                throw new Error('Volume not found ' + volumeId);\n            }\n            modality = volume.metadata.Modality;\n            isPreScaled = volume.scaling && Object.keys(volume.scaling).length > 0;\n        }\n        else if (properties.voiRange) {\n            modality = viewport.modality;\n            ({ lower, upper } = properties.voiRange);\n            const { preScale = { scaled: false } } = viewport.getImageData?.() || {};\n            isPreScaled =\n                preScale.scaled && preScale.scalingParameters?.suvbw !== undefined;\n        }\n        else {\n            throw new Error('Viewport is not a valid type');\n        }\n        if (modality === PT && isPreScaled) {\n            newRange = this.getPTScaledNewRange({\n                deltaPointsCanvas: deltaPoints.canvas,\n                lower,\n                upper,\n                clientHeight: element.clientHeight,\n                isPreScaled,\n                viewport,\n                volumeId,\n            });\n        }\n        else {\n            newRange = this.getNewRange({\n                viewport,\n                deltaPointsCanvas: deltaPoints.canvas,\n                volumeId,\n                lower,\n                upper,\n            });\n        }\n        if (newRange.lower >= newRange.upper) {\n            return;\n        }\n        viewport.setProperties({\n            voiRange: newRange,\n        });\n        viewport.render();\n        if (viewport instanceof VolumeViewport) {\n            viewportsContainingVolumeUID.forEach((vp) => {\n                if (viewport !== vp) {\n                    vp.render();\n                }\n            });\n            return;\n        }\n    }\n    getPTScaledNewRange({ deltaPointsCanvas, lower, upper, clientHeight, viewport, volumeId, isPreScaled, }) {\n        let multiplier = DEFAULT_MULTIPLIER;\n        if (isPreScaled) {\n            multiplier = 5 / clientHeight;\n        }\n        else {\n            multiplier =\n                this._getMultiplierFromDynamicRange(viewport, volumeId) ||\n                    DEFAULT_MULTIPLIER;\n        }\n        const deltaY = deltaPointsCanvas[1];\n        const wcDelta = deltaY * multiplier;\n        upper -= wcDelta;\n        upper = isPreScaled ? Math.max(upper, 0.1) : upper;\n        return { lower, upper };\n    }\n    getNewRange({ viewport, deltaPointsCanvas, volumeId, lower, upper }) {\n        const multiplier = this._getMultiplierFromDynamicRange(viewport, volumeId) ||\n            DEFAULT_MULTIPLIER;\n        const wwDelta = deltaPointsCanvas[0] * multiplier;\n        const wcDelta = deltaPointsCanvas[1] * multiplier;\n        let { windowWidth, windowCenter } = utilities.windowLevel.toWindowLevel(lower, upper);\n        windowWidth += wwDelta;\n        windowCenter += wcDelta;\n        windowWidth = Math.max(windowWidth, 1);\n        const voiLutFunction = viewport.getProperties().VOILUTFunction;\n        return utilities.windowLevel.toLowHighRange(windowWidth, windowCenter, voiLutFunction);\n    }\n    _getMultiplierFromDynamicRange(viewport, volumeId) {\n        let imageDynamicRange;\n        if (volumeId) {\n            const imageVolume = cache.getVolume(volumeId);\n            const { voxelManager } = viewport.getImageData();\n            const middleSlicePixelData = voxelManager.getMiddleSliceData();\n            const calculatedDynamicRange = middleSlicePixelData.reduce((acc, pixel) => {\n                return [Math.min(acc[0], pixel), Math.max(acc[1], pixel)];\n            }, [Infinity, -Infinity]);\n            const BitsStored = imageVolume?.metadata?.BitsStored;\n            const metadataDynamicRange = BitsStored ? 2 ** BitsStored : Infinity;\n            const calculatedRange = calculatedDynamicRange[1] - calculatedDynamicRange[0];\n            imageDynamicRange = !Number.isFinite(calculatedRange)\n                ? metadataDynamicRange\n                : Math.min(calculatedRange, metadataDynamicRange);\n        }\n        else {\n            imageDynamicRange = this._getImageDynamicRangeFromViewport(viewport);\n        }\n        const ratio = imageDynamicRange / DEFAULT_IMAGE_DYNAMIC_RANGE;\n        return !Number.isFinite(ratio)\n            ? DEFAULT_IMAGE_DYNAMIC_RANGE\n            : ratio > 1\n                ? Math.round(ratio)\n                : ratio;\n    }\n    _getImageDynamicRangeFromViewport(viewport) {\n        const { imageData, voxelManager } = viewport.getImageData();\n        if (voxelManager?.getRange) {\n            const range = voxelManager.getRange();\n            return range[1] - range[0];\n        }\n        const dimensions = imageData.getDimensions();\n        if (imageData.getRange) {\n            const imageDataRange = imageData.getRange();\n            return imageDataRange[1] - imageDataRange[0];\n        }\n        let scalarData;\n        if (imageData.getScalarData) {\n            scalarData = imageData.getScalarData();\n        }\n        else {\n            scalarData = imageData.getPointData().getScalars().getData();\n        }\n        if (dimensions[2] !== 1) {\n            return this._getImageDynamicRangeFromMiddleSlice(scalarData, dimensions);\n        }\n        let range;\n        if (scalarData.getRange) {\n            range = scalarData.getRange();\n        }\n        else {\n            const { min, max } = this._getMinMax(scalarData, scalarData.length);\n            range = [min, max];\n        }\n        return range[1] - range[0];\n    }\n    _getMinMax(frame, frameLength) {\n        let min = Infinity;\n        let max = -Infinity;\n        for (let i = 0; i < frameLength; i++) {\n            const voxel = frame[i];\n            if (voxel < min) {\n                min = voxel;\n            }\n            if (voxel > max) {\n                max = voxel;\n            }\n        }\n        return { max, min };\n    }\n}\nWindowLevelTool.toolName = 'WindowLevel';\nexport default WindowLevelTool;\n","import { vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { getConfiguration } from '@cornerstonejs/core';\nimport { Enums, getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { Events } from '../enums';\nclass ZoomTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            zoomToCenter: false,\n            minZoomScale: 0.001,\n            maxZoomScale: 3000,\n            pinchToZoom: true,\n            pan: true,\n            invert: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const camera = enabledElement.viewport.getCamera();\n            const { focalPoint } = camera;\n            this.initialMousePosWorld = worldPos;\n            let dirVec = vec3.fromValues(focalPoint[0] - worldPos[0], focalPoint[1] - worldPos[1], focalPoint[2] - worldPos[2]);\n            dirVec = vec3.normalize(vec3.create(), dirVec);\n            this.dirVec = dirVec;\n            return false;\n        };\n        this.preTouchStartCallback = (evt) => {\n            if (!this.configuration.pinchToZoom) {\n                return this.preMouseDownCallback(evt);\n            }\n        };\n        this._dragParallelProjection = (evt, viewport, camera, pinch = false) => {\n            const { element, deltaPoints } = evt.detail;\n            const deltaY = pinch\n                ? evt.detail.deltaDistance.canvas\n                : deltaPoints.canvas[1];\n            const size = [element.clientWidth, element.clientHeight];\n            const { parallelScale, focalPoint, position } = camera;\n            const zoomScale = 5 / size[1];\n            const k = deltaY * zoomScale * (this.configuration.invert ? -1 : 1);\n            const parallelScaleToSet = (1.0 - k) * parallelScale;\n            let focalPointToSet = focalPoint;\n            let positionToSet = position;\n            if (!this.configuration.zoomToCenter) {\n                const distanceToCanvasCenter = vec3.distance(focalPoint, this.initialMousePosWorld);\n                positionToSet = vec3.scaleAndAdd(vec3.create(), position, this.dirVec, -distanceToCanvasCenter * k);\n                focalPointToSet = vec3.scaleAndAdd(vec3.create(), focalPoint, this.dirVec, -distanceToCanvasCenter * k);\n            }\n            const imageData = viewport.getImageData();\n            let spacing = [1, 1, 1];\n            let cappedParallelScale = parallelScaleToSet;\n            let thresholdExceeded = false;\n            if (imageData) {\n                spacing = imageData.spacing;\n                const { dimensions } = imageData;\n                const imageWidth = dimensions[0] * spacing[0];\n                const imageHeight = dimensions[1] * spacing[1];\n                const canvasAspect = size[0] / size[1];\n                const insetImageMultiplier = getConfiguration().rendering\n                    ?.useLegacyCameraFOV\n                    ? 1.1\n                    : 1;\n                const displayArea = viewport.options?.displayArea;\n                const imageAreaScaleX = displayArea?.imageArea?.[0] ?? insetImageMultiplier;\n                const imageAreaScaleY = displayArea?.imageArea?.[1] ?? insetImageMultiplier;\n                const scaledImageWidth = imageWidth * imageAreaScaleX;\n                const scaledImageHeight = imageHeight * imageAreaScaleY;\n                const scaledImageAspect = scaledImageWidth / scaledImageHeight;\n                let minParallelScaleRequired;\n                if (scaledImageAspect > canvasAspect) {\n                    minParallelScaleRequired = (scaledImageWidth / canvasAspect) * 0.5;\n                }\n                else {\n                    minParallelScaleRequired = scaledImageHeight * 0.5;\n                }\n                const { minZoomScale, maxZoomScale } = this.configuration;\n                const minScaleInWorld = minParallelScaleRequired / maxZoomScale;\n                const maxScaleInWorld = minParallelScaleRequired / minZoomScale;\n                if (parallelScaleToSet < minScaleInWorld) {\n                    cappedParallelScale = minScaleInWorld;\n                    thresholdExceeded = true;\n                }\n                else if (parallelScaleToSet > maxScaleInWorld) {\n                    cappedParallelScale = maxScaleInWorld;\n                    thresholdExceeded = true;\n                }\n            }\n            viewport.setCamera({\n                parallelScale: cappedParallelScale,\n                focalPoint: thresholdExceeded ? focalPoint : focalPointToSet,\n                position: thresholdExceeded ? position : positionToSet,\n            });\n        };\n        this._dragPerspectiveProjection = (evt, viewport, camera, pinch = false) => {\n            const { element, deltaPoints } = evt.detail;\n            const deltaY = pinch\n                ? evt.detail.deltaDistance.canvas\n                : deltaPoints.canvas[1];\n            const size = [element.clientWidth, element.clientHeight];\n            const { position, focalPoint, viewPlaneNormal } = camera;\n            const distance = vtkMath.distance2BetweenPoints(position, focalPoint);\n            const zoomScale = Math.sqrt(distance) / size[1];\n            const directionOfProjection = [\n                -viewPlaneNormal[0],\n                -viewPlaneNormal[1],\n                -viewPlaneNormal[2],\n            ];\n            const k = this.configuration.invert\n                ? deltaY / zoomScale\n                : deltaY * zoomScale;\n            let tmp = k * directionOfProjection[0];\n            position[0] += tmp;\n            focalPoint[0] += tmp;\n            tmp = k * directionOfProjection[1];\n            position[1] += tmp;\n            focalPoint[1] += tmp;\n            tmp = k * directionOfProjection[2];\n            position[2] += tmp;\n            focalPoint[2] += tmp;\n            viewport.setCamera({ position, focalPoint });\n        };\n        this.initialMousePosWorld = [0, 0, 0];\n        this.dirVec = [0, 0, 0];\n        if (this.configuration.pinchToZoom) {\n            this.touchDragCallback = this._pinchCallback.bind(this);\n        }\n        else {\n            this.touchDragCallback = this._dragCallback.bind(this);\n        }\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    mouseWheelCallback(evt) {\n        this._zoom(evt);\n    }\n    _pinchCallback(evt) {\n        const pointsList = evt.detail\n            .currentPointsList;\n        if (pointsList.length > 1) {\n            const { element, currentPoints } = evt.detail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const worldPos = currentPoints.world;\n            const { focalPoint } = camera;\n            this.initialMousePosWorld = worldPos;\n            let dirVec = vec3.fromValues(focalPoint[0] - worldPos[0], focalPoint[1] - worldPos[1], focalPoint[2] - worldPos[2]);\n            dirVec = vec3.normalize(vec3.create(), dirVec);\n            this.dirVec = dirVec;\n            if (camera.parallelProjection) {\n                this._dragParallelProjection(evt, viewport, camera, true);\n            }\n            else {\n                this._dragPerspectiveProjection(evt, viewport, camera, true);\n            }\n            viewport.render();\n        }\n        if (this.configuration.pan) {\n            this._panCallback(evt);\n        }\n    }\n    _dragCallback(evt) {\n        const { element } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        if (camera.parallelProjection) {\n            this._dragParallelProjection(evt, viewport, camera);\n        }\n        else {\n            this._dragPerspectiveProjection(evt, viewport, camera);\n        }\n        viewport.render();\n    }\n    _zoom(evt) {\n        const { element, points } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const wheelData = evt.detail.wheel;\n        const direction = wheelData.direction;\n        const eventDetails = {\n            detail: {\n                element,\n                eventName: Events.MOUSE_WHEEL,\n                renderingEngineId: enabledElement.renderingEngineId,\n                viewportId: viewport.id,\n                camera: {},\n                deltaPoints: {\n                    page: points.page,\n                    client: points.client,\n                    world: points.world,\n                    canvas: [0, -direction * 5],\n                },\n                startPoints: points,\n                lastPoints: points,\n                currentPoints: points,\n            },\n        };\n        if (viewport.type === Enums.ViewportType.STACK) {\n            this.preMouseDownCallback(eventDetails);\n        }\n        this._dragCallback(eventDetails);\n    }\n    _panCallback(evt) {\n        const { element, deltaPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const deltaPointsWorld = deltaPoints.world;\n        const camera = enabledElement.viewport.getCamera();\n        const { focalPoint, position } = camera;\n        const updatedPosition = [\n            position[0] - deltaPointsWorld[0],\n            position[1] - deltaPointsWorld[1],\n            position[2] - deltaPointsWorld[2],\n        ];\n        const updatedFocalPoint = [\n            focalPoint[0] - deltaPointsWorld[0],\n            focalPoint[1] - deltaPointsWorld[1],\n            focalPoint[2] - deltaPointsWorld[2],\n        ];\n        enabledElement.viewport.setCamera({\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n        enabledElement.viewport.render();\n    }\n}\nZoomTool.toolName = 'Zoom';\nexport default ZoomTool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\nimport angleBetweenLines from '../../utilities/math/angle/angleBetweenLines';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, drawPath as drawPathSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { getStyleProperty } from '../../stateManagement/annotation/config/helpers';\nclass AngleTool extends AnnotationTool {\n    static { this.toolName = 'Angle'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            showAngleArc: false,\n            arcOffset: 5,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            if (this.angleStartedNotYetCompleted) {\n                return;\n            }\n            this.angleStartedNotYetCompleted = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const annotation = (this.createAnnotation(evt, [\n                [...worldPos],\n                [...worldPos],\n            ]));\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2, point3] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line1 = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line1.start.x, line1.start.y], [line1.end.x, line1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            if (!point3) {\n                return false;\n            }\n            const canvasPoint3 = viewport.worldToCanvas(point3);\n            const line2 = {\n                start: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n                end: {\n                    x: canvasPoint3[0],\n                    y: canvasPoint3[1],\n                },\n            };\n            const distanceToPoint2 = lineSegment.distanceToPoint([line2.start.x, line2.start.y], [line2.end.x, line2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint2 <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            if (this.angleStartedNotYetCompleted && data.handles.points.length === 2) {\n                this.editData.handleIndex = 2;\n                return;\n            }\n            this.angleStartedNotYetCompleted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                this.angleStartedNotYetCompleted = false;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, angleArcLineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].angle == null) {\n                    data.cachedStats[targetId] = {\n                        angle: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationLocked(annotation.annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                const showHandlesAlways = Boolean(getStyleProperty('showHandlesAlways', {}));\n                if (activeHandleCanvasCoords || showHandlesAlways) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                let lineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                renderStatus = true;\n                if (canvasCoordinates.length !== 3) {\n                    return renderStatus;\n                }\n                lineUID = '2';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[1], canvasCoordinates[2], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                if (this.configuration.showAngleArc) {\n                    const center = canvasCoordinates[1];\n                    const offset = this.configuration.arcOffset;\n                    const radius = Math.min(lineSegment.distanceToPoint([center[0], center[1]], [canvasCoordinates[0][0], canvasCoordinates[0][1]], [canvasCoordinates[2][0], canvasCoordinates[2][1]]), lineSegment.distanceToPoint([center[0], center[1]], [canvasCoordinates[2][0], canvasCoordinates[2][1]], [canvasCoordinates[0][0], canvasCoordinates[0][1]])) / offset;\n                    const anglePoints = [];\n                    let startAngle = Math.atan2(canvasCoordinates[0][1] - center[1], canvasCoordinates[0][0] - center[0]);\n                    let endAngle = Math.atan2(canvasCoordinates[2][1] - center[1], canvasCoordinates[2][0] - center[0]);\n                    if (endAngle < startAngle) {\n                        endAngle += 2 * Math.PI;\n                    }\n                    const angleDifference = endAngle - startAngle;\n                    if (angleDifference > Math.PI) {\n                        const temp = startAngle;\n                        startAngle = endAngle;\n                        endAngle = temp + 2 * Math.PI;\n                    }\n                    const segments = 32;\n                    for (let i = 0; i <= segments; i++) {\n                        const angle = startAngle + (i / segments) * (endAngle - startAngle);\n                        anglePoints.push([\n                            center[0] + radius * Math.cos(angle),\n                            center[1] + radius * Math.sin(angle),\n                        ]);\n                    }\n                    drawPathSvg(svgDrawingHelper, annotationUID, '3', anglePoints, {\n                        color: color,\n                        width: lineWidth,\n                        lineDash: angleArcLineDash,\n                    });\n                }\n                if (!data.cachedStats[targetId]?.angle) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = canvasCoordinates[1];\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(AngleTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        if (data.handles.points.length !== 3) {\n            return;\n        }\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[1];\n        const worldPos3 = data.handles.points[2];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const angle = angleBetweenLines([worldPos1, worldPos2], [worldPos2, worldPos3]);\n            const { dimensions, imageData } = this.getTargetImageData(targetId);\n            this.isHandleOutsideImage = [worldPos1, worldPos2, worldPos3]\n                .map((worldPos) => csUtils.transformWorldToIndex(imageData, worldPos))\n                .some((index) => !csUtils.indexWithinDimensions(index, dimensions));\n            cachedStats[targetId] = {\n                angle: isNaN(angle) ? 'Incomplete Angle' : angle,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { angle } = cachedVolumeStats;\n    if (angle === undefined) {\n        return;\n    }\n    if (isNaN(angle)) {\n        return [`${angle}`];\n    }\n    const textLines = [\n        `${csUtils.roundNumber(angle)} ${String.fromCharCode(176)}`,\n    ];\n    return textLines;\n}\nexport default AngleTool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawArrow as drawArrowSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { setAnnotationLabel } from '../../utilities';\nimport { getStyleProperty } from '../../stateManagement/annotation/config/helpers';\nclass ArrowAnnotateTool extends AnnotationTool {\n    static { this.toolName = 'ArrowAnnotate'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            getTextCallback,\n            changeTextCallback,\n            preventHandleOutsideImage: false,\n            arrowFirst: true,\n            arrowHeadStyle: 'legacy',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            this.startGroupRecording();\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const { arrowFirst } = this.configuration;\n            const annotation = this.createAnnotation(evt, [[...worldPos], [...worldPos]], {\n                data: {\n                    handles: {\n                        arrowFirst,\n                    },\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved, movingTextBox, } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            if (newAnnotation) {\n                this.configuration.getTextCallback((label) => {\n                    if (!label) {\n                        removeAnnotation(annotation.annotationUID);\n                        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                        this.editData = null;\n                        this.isDrawing = false;\n                        return;\n                    }\n                    annotation.data.label = label;\n                    triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n                    triggerAnnotationCompleted(annotation);\n                    this.createMemo(element, annotation, { newAnnotation: !!this.memo });\n                    setAnnotationLabel(annotation, element, label);\n                    this.endGroupRecording();\n                    this.doneEditMemo();\n                    triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                });\n            }\n            else if (!movingTextBox) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n            this.doneEditMemo();\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.touchTapCallback = (evt) => {\n            if (evt.detail.taps == 2) {\n                this.doubleClickCallback(evt);\n            }\n        };\n        this.doubleClickCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            let annotations = getAnnotations(this.getToolName(), element);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return;\n            }\n            const clickedAnnotation = annotations.find((annotation) => this.isPointNearTool(element, annotation, eventDetail.currentPoints.canvas, 6));\n            if (!clickedAnnotation) {\n                return;\n            }\n            const annotation = clickedAnnotation;\n            this.configuration.changeTextCallback(clickedAnnotation, evt.detail, this._doneChangingTextCallback.bind(this, element, annotation));\n            this.editData = null;\n            this.isDrawing = false;\n            evt.stopImmediatePropagation();\n            evt.preventDefault();\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles, label } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, markerSize } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                let activeHandleCanvasCoords;\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                const showHandlesAlways = Boolean(getStyleProperty('showHandlesAlways', {}));\n                if (activeHandleCanvasCoords || showHandlesAlways) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineWidth,\n                    });\n                }\n                const arrowUID = '1';\n                if (this.configuration.arrowFirst) {\n                    drawArrowSvg(svgDrawingHelper, annotationUID, arrowUID, canvasCoordinates[1], canvasCoordinates[0], {\n                        color,\n                        width: lineWidth,\n                        lineDash: lineDash,\n                        viaMarker: this.configuration.arrowHeadStyle !== 'legacy',\n                        markerSize,\n                    });\n                }\n                else {\n                    drawArrowSvg(svgDrawingHelper, annotationUID, arrowUID, canvasCoordinates[0], canvasCoordinates[1], {\n                        color,\n                        width: lineWidth,\n                        lineDash: lineDash,\n                        viaMarker: this.configuration.arrowHeadStyle !== 'legacy',\n                        markerSize,\n                    });\n                }\n                renderStatus = true;\n                if (!label) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = canvasCoordinates[1];\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, [label], textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n    }\n    static { this.hydrate = (viewportId, points, label, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(ArrowAnnotateTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = this.createAnnotation({\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                label: label || '',\n                handles: {\n                    points,\n                },\n            },\n            autoGenerated: false,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        });\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _doneChangingTextCallback(element, annotation, updatedLabel) {\n        annotation.data.label = updatedLabel;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        triggerAnnotationModified(annotation, element);\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction getTextCallback(doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nexport default ArrowAnnotateTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, utilities, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawLine as drawLineSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as lineSegment from '../../utilities/math/line';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getStyleProperty } from '../../stateManagement/annotation/config/helpers';\nconst { transformWorldToIndex } = csUtils;\nclass BidirectionalTool extends AnnotationTool {\n    static { this.toolName = 'Bidirectional'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            let canvasPoint1 = viewport.worldToCanvas(points[0]);\n            let canvasPoint2 = viewport.worldToCanvas(points[1]);\n            let line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            let distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            canvasPoint1 = viewport.worldToCanvas(points[2]);\n            canvasPoint2 = viewport.worldToCanvas(points[3]);\n            line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const data = annotation.data;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                handleIndex = data.handles.points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            hideElementCursor(element);\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const { renderingEngine } = getEnabledElement(element);\n            if (this.editData.handleIndex !== undefined) {\n                const { points } = data.handles;\n                const firstLineSegmentLength = vec3.distance(points[0], points[1]);\n                const secondLineSegmentLength = vec3.distance(points[2], points[3]);\n                if (secondLineSegmentLength > firstLineSegmentLength) {\n                    const longAxis = [[...points[2]], [...points[3]]];\n                    const shortAxisPoint0 = [...points[0]];\n                    const shortAxisPoint1 = [...points[1]];\n                    const longAxisVector = vec2.create();\n                    vec2.set(longAxisVector, longAxis[1][0] - longAxis[0][0], longAxis[1][1] - longAxis[1][0]);\n                    const counterClockWisePerpendicularToLongAxis = vec2.create();\n                    vec2.set(counterClockWisePerpendicularToLongAxis, -longAxisVector[1], longAxisVector[0]);\n                    const currentShortAxisVector = vec2.create();\n                    vec2.set(currentShortAxisVector, shortAxisPoint1[0] - shortAxisPoint0[0], shortAxisPoint1[1] - shortAxisPoint0[0]);\n                    let shortAxis;\n                    if (vec2.dot(currentShortAxisVector, counterClockWisePerpendicularToLongAxis) > 0) {\n                        shortAxis = [shortAxisPoint0, shortAxisPoint1];\n                    }\n                    else {\n                        shortAxis = [shortAxisPoint1, shortAxisPoint0];\n                    }\n                    data.handles.points = [\n                        longAxis[0],\n                        longAxis[1],\n                        shortAxis[0],\n                        shortAxis[1],\n                    ];\n                }\n            }\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { worldToCanvas } = viewport;\n            const { annotation, viewportIdsToRender, handleIndex, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            const worldPos = currentPoints.world;\n            data.handles.points[handleIndex] = [...worldPos];\n            const canvasCoordPoints = data.handles.points.map(worldToCanvas);\n            const canvasCoords = {\n                longLineSegment: {\n                    start: {\n                        x: canvasCoordPoints[0][0],\n                        y: canvasCoordPoints[0][1],\n                    },\n                    end: {\n                        x: canvasCoordPoints[1][0],\n                        y: canvasCoordPoints[1][1],\n                    },\n                },\n                shortLineSegment: {\n                    start: {\n                        x: canvasCoordPoints[2][0],\n                        y: canvasCoordPoints[2][1],\n                    },\n                    end: {\n                        x: canvasCoordPoints[3][0],\n                        y: canvasCoordPoints[3][1],\n                    },\n                },\n            };\n            const dist = vec2.distance(canvasCoordPoints[0], canvasCoordPoints[1]);\n            const shortAxisDistFromCenter = dist / 3;\n            const dx = canvasCoords.longLineSegment.start.x - canvasCoords.longLineSegment.end.x;\n            const dy = canvasCoords.longLineSegment.start.y - canvasCoords.longLineSegment.end.y;\n            const length = Math.sqrt(dx * dx + dy * dy);\n            const vectorX = dx / length;\n            const vectorY = dy / length;\n            const xMid = (canvasCoords.longLineSegment.start.x +\n                canvasCoords.longLineSegment.end.x) /\n                2;\n            const yMid = (canvasCoords.longLineSegment.start.y +\n                canvasCoords.longLineSegment.end.y) /\n                2;\n            const startX = xMid + shortAxisDistFromCenter * vectorY;\n            const startY = yMid - shortAxisDistFromCenter * vectorX;\n            const endX = xMid - shortAxisDistFromCenter * vectorY;\n            const endY = yMid + shortAxisDistFromCenter * vectorX;\n            data.handles.points[2] = viewport.canvasToWorld([startX, startY]);\n            data.handles.points[3] = viewport.canvasToWorld([endX, endY]);\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            this.editData.hasMoved = true;\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragModifyHandle(evt);\n                annotation.invalidated = true;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this._dragModifyHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { annotation, handleIndex: movingHandleIndex } = this.editData;\n            const { data } = annotation;\n            const worldPos = currentPoints.world;\n            const canvasCoordHandlesCurrent = [\n                viewport.worldToCanvas(data.handles.points[0]),\n                viewport.worldToCanvas(data.handles.points[1]),\n                viewport.worldToCanvas(data.handles.points[2]),\n                viewport.worldToCanvas(data.handles.points[3]),\n            ];\n            const firstLineSegment = {\n                start: {\n                    x: canvasCoordHandlesCurrent[0][0],\n                    y: canvasCoordHandlesCurrent[0][1],\n                },\n                end: {\n                    x: canvasCoordHandlesCurrent[1][0],\n                    y: canvasCoordHandlesCurrent[1][1],\n                },\n            };\n            const secondLineSegment = {\n                start: {\n                    x: canvasCoordHandlesCurrent[2][0],\n                    y: canvasCoordHandlesCurrent[2][1],\n                },\n                end: {\n                    x: canvasCoordHandlesCurrent[3][0],\n                    y: canvasCoordHandlesCurrent[3][1],\n                },\n            };\n            const proposedPoint = [...worldPos];\n            const proposedCanvasCoord = viewport.worldToCanvas(proposedPoint);\n            if (movingHandleIndex === 0 || movingHandleIndex === 1) {\n                const fixedHandleIndex = movingHandleIndex === 0 ? 1 : 0;\n                const fixedHandleCanvasCoord = canvasCoordHandlesCurrent[fixedHandleIndex];\n                const fixedHandleToProposedCoordVec = vec2.set(vec2.create(), proposedCanvasCoord[0] - fixedHandleCanvasCoord[0], proposedCanvasCoord[1] - fixedHandleCanvasCoord[1]);\n                const fixedHandleToOldCoordVec = vec2.set(vec2.create(), canvasCoordHandlesCurrent[movingHandleIndex][0] -\n                    fixedHandleCanvasCoord[0], canvasCoordHandlesCurrent[movingHandleIndex][1] -\n                    fixedHandleCanvasCoord[1]);\n                vec2.normalize(fixedHandleToProposedCoordVec, fixedHandleToProposedCoordVec);\n                vec2.normalize(fixedHandleToOldCoordVec, fixedHandleToOldCoordVec);\n                const proposedFirstLineSegment = {\n                    start: {\n                        x: fixedHandleCanvasCoord[0],\n                        y: fixedHandleCanvasCoord[1],\n                    },\n                    end: {\n                        x: proposedCanvasCoord[0],\n                        y: proposedCanvasCoord[1],\n                    },\n                };\n                if (this._movingLongAxisWouldPutItThroughShortAxis(proposedFirstLineSegment, secondLineSegment)) {\n                    return;\n                }\n                const centerOfRotation = fixedHandleCanvasCoord;\n                const angle = this._getSignedAngle(fixedHandleToOldCoordVec, fixedHandleToProposedCoordVec);\n                let firstPointX = canvasCoordHandlesCurrent[2][0];\n                let firstPointY = canvasCoordHandlesCurrent[2][1];\n                let secondPointX = canvasCoordHandlesCurrent[3][0];\n                let secondPointY = canvasCoordHandlesCurrent[3][1];\n                firstPointX -= centerOfRotation[0];\n                firstPointY -= centerOfRotation[1];\n                secondPointX -= centerOfRotation[0];\n                secondPointY -= centerOfRotation[1];\n                const rotatedFirstPoint = firstPointX * Math.cos(angle) - firstPointY * Math.sin(angle);\n                const rotatedFirstPointY = firstPointX * Math.sin(angle) + firstPointY * Math.cos(angle);\n                const rotatedSecondPoint = secondPointX * Math.cos(angle) - secondPointY * Math.sin(angle);\n                const rotatedSecondPointY = secondPointX * Math.sin(angle) + secondPointY * Math.cos(angle);\n                firstPointX = rotatedFirstPoint + centerOfRotation[0];\n                firstPointY = rotatedFirstPointY + centerOfRotation[1];\n                secondPointX = rotatedSecondPoint + centerOfRotation[0];\n                secondPointY = rotatedSecondPointY + centerOfRotation[1];\n                const newFirstPoint = viewport.canvasToWorld([firstPointX, firstPointY]);\n                const newSecondPoint = viewport.canvasToWorld([\n                    secondPointX,\n                    secondPointY,\n                ]);\n                data.handles.points[movingHandleIndex] = proposedPoint;\n                data.handles.points[2] = newFirstPoint;\n                data.handles.points[3] = newSecondPoint;\n            }\n            else {\n                const translateHandleIndex = movingHandleIndex === 2 ? 3 : 2;\n                const canvasCoordsCurrent = {\n                    longLineSegment: {\n                        start: firstLineSegment.start,\n                        end: firstLineSegment.end,\n                    },\n                    shortLineSegment: {\n                        start: secondLineSegment.start,\n                        end: secondLineSegment.end,\n                    },\n                };\n                const longLineSegmentVec = vec2.subtract(vec2.create(), [\n                    canvasCoordsCurrent.longLineSegment.end.x,\n                    canvasCoordsCurrent.longLineSegment.end.y,\n                ], [\n                    canvasCoordsCurrent.longLineSegment.start.x,\n                    canvasCoordsCurrent.longLineSegment.start.y,\n                ]);\n                const longLineSegmentVecNormalized = vec2.normalize(vec2.create(), longLineSegmentVec);\n                const proposedToCurrentVec = vec2.subtract(vec2.create(), [proposedCanvasCoord[0], proposedCanvasCoord[1]], [\n                    canvasCoordHandlesCurrent[movingHandleIndex][0],\n                    canvasCoordHandlesCurrent[movingHandleIndex][1],\n                ]);\n                const movementLength = vec2.length(proposedToCurrentVec);\n                const angle = this._getSignedAngle(longLineSegmentVecNormalized, proposedToCurrentVec);\n                const movementAlongLineSegmentLength = Math.cos(angle) * movementLength;\n                const newTranslatedPoint = vec2.scaleAndAdd(vec2.create(), [\n                    canvasCoordHandlesCurrent[translateHandleIndex][0],\n                    canvasCoordHandlesCurrent[translateHandleIndex][1],\n                ], longLineSegmentVecNormalized, movementAlongLineSegmentLength);\n                if (this._movingLongAxisWouldPutItThroughShortAxis({\n                    start: {\n                        x: proposedCanvasCoord[0],\n                        y: proposedCanvasCoord[1],\n                    },\n                    end: {\n                        x: newTranslatedPoint[0],\n                        y: newTranslatedPoint[1],\n                    },\n                }, {\n                    start: {\n                        x: canvasCoordsCurrent.longLineSegment.start.x,\n                        y: canvasCoordsCurrent.longLineSegment.start.y,\n                    },\n                    end: {\n                        x: canvasCoordsCurrent.longLineSegment.end.x,\n                        y: canvasCoordsCurrent.longLineSegment.end.y,\n                    },\n                })) {\n                    return;\n                }\n                const intersectionPoint = lineSegment.intersectLine([proposedCanvasCoord[0], proposedCanvasCoord[1]], [newTranslatedPoint[0], newTranslatedPoint[1]], [firstLineSegment.start.x, firstLineSegment.start.y], [firstLineSegment.end.x, firstLineSegment.end.y]);\n                if (!intersectionPoint) {\n                    return;\n                }\n                data.handles.points[translateHandleIndex] = viewport.canvasToWorld(newTranslatedPoint);\n                data.handles.points[movingHandleIndex] = proposedPoint;\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = true;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        width: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                const showHandlesAlways = Boolean(getStyleProperty('showHandlesAlways', {}));\n                if (activeHandleCanvasCoords || showHandlesAlways) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, showHandlesAlways ? canvasCoordinates : activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId1 = `${annotationUID}-line-1`;\n                const dataId2 = `${annotationUID}-line-2`;\n                const lineUID = '0';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                    shadow,\n                }, dataId1);\n                const secondLineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, secondLineUID, canvasCoordinates[2], canvasCoordinates[3], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                    shadow,\n                }, dataId2);\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._movingLongAxisWouldPutItThroughShortAxis = (firstLineSegment, secondLineSegment) => {\n            const vectorInSecondLineDirection = vec2.create();\n            vec2.set(vectorInSecondLineDirection, secondLineSegment.end.x - secondLineSegment.start.x, secondLineSegment.end.y - secondLineSegment.start.y);\n            vec2.normalize(vectorInSecondLineDirection, vectorInSecondLineDirection);\n            const extendedSecondLineSegment = {\n                start: {\n                    x: secondLineSegment.start.x - vectorInSecondLineDirection[0] * 10,\n                    y: secondLineSegment.start.y - vectorInSecondLineDirection[1] * 10,\n                },\n                end: {\n                    x: secondLineSegment.end.x + vectorInSecondLineDirection[0] * 10,\n                    y: secondLineSegment.end.y + vectorInSecondLineDirection[1] * 10,\n                },\n            };\n            const proposedIntersectionPoint = lineSegment.intersectLine([extendedSecondLineSegment.start.x, extendedSecondLineSegment.start.y], [extendedSecondLineSegment.end.x, extendedSecondLineSegment.end.y], [firstLineSegment.start.x, firstLineSegment.start.y], [firstLineSegment.end.x, firstLineSegment.end.y]);\n            const wouldPutThroughShortAxis = !proposedIntersectionPoint;\n            return wouldPutThroughShortAxis;\n        };\n        this._calculateCachedStats = (annotation, renderingEngine, enabledElement) => {\n            const { data } = annotation;\n            const { element } = enabledElement.viewport;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[1];\n            const worldPos3 = data.handles.points[2];\n            const worldPos4 = data.handles.points[3];\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { imageData, dimensions } = image;\n                const index1 = transformWorldToIndex(imageData, worldPos1);\n                const index2 = transformWorldToIndex(imageData, worldPos2);\n                const index3 = transformWorldToIndex(imageData, worldPos3);\n                const index4 = transformWorldToIndex(imageData, worldPos4);\n                const handles1 = [index1, index2];\n                const handles2 = [index3, index4];\n                const { scale: scale1, unit: units1 } = getCalibratedLengthUnitsAndScale(image, handles1);\n                const { scale: scale2, unit: units2 } = getCalibratedLengthUnitsAndScale(image, handles2);\n                const dist1 = this._calculateLength(worldPos1, worldPos2) / scale1;\n                const dist2 = this._calculateLength(worldPos3, worldPos4) / scale2;\n                const length = dist1 > dist2 ? dist1 : dist2;\n                const width = dist1 > dist2 ? dist2 : dist1;\n                const unit = dist1 > dist2 ? units1 : units2;\n                const widthUnit = dist1 > dist2 ? units2 : units1;\n                this._isInsideVolume(index1, index2, index3, index4, dimensions)\n                    ? (this.isHandleOutsideImage = false)\n                    : (this.isHandleOutsideImage = true);\n                cachedStats[targetId] = {\n                    length,\n                    width,\n                    unit,\n                    widthUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, index3, index4, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions) &&\n                csUtils.indexWithinDimensions(index3, dimensions) &&\n                csUtils.indexWithinDimensions(index4, dimensions));\n        };\n        this._getSignedAngle = (vector1, vector2) => {\n            return Math.atan2(vector1[0] * vector2[1] - vector1[1] * vector2[0], vector1[0] * vector2[0] + vector1[1] * vector2[1]);\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const worldPos = currentPoints.world;\n        this.isDrawing = true;\n        const annotation = this.createAnnotation(evt, [\n            [...worldPos],\n            [...worldPos],\n            [...worldPos],\n            [...worldPos],\n        ]);\n        addAnnotation(annotation, element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex: 1,\n            movingTextBox: false,\n            newAnnotation: true,\n            hasMoved: false,\n        };\n        this._activateDraw(element);\n        hideElementCursor(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        return annotation;\n    }\n    static { this.hydrate = (viewportId, axis, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(BidirectionalTool, enabledElement, axis[0], options);\n        const [majorAxis, minorAxis] = axis;\n        const [major0, major1] = majorAxis;\n        const [minor0, minor1] = minorAxis;\n        const points = [major0, major1, minor0, minor1];\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                },\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n        return annotation;\n    }; }\n    _calculateLength(pos1, pos2) {\n        const dx = pos1[0] - pos2[0];\n        const dy = pos1[1] - pos2[1];\n        const dz = pos1[2] - pos2[2];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const { cachedStats, label } = data;\n    const { length, width, unit } = cachedStats[targetId];\n    const textLines = [];\n    if (label) {\n        textLines.push(label);\n    }\n    if (length === undefined) {\n        return textLines;\n    }\n    textLines.push(`L: ${csUtils.roundNumber(length)} ${unit || unit}`, `W: ${csUtils.roundNumber(width)} ${unit}`);\n    return textLines;\n}\nexport default BidirectionalTool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, getEnabledElementByViewportId, EPSILON, } from '@cornerstonejs/core';\nimport { getCalibratedAspect, getCalibratedLengthUnitsAndScale, } from '../../utilities/getCalibratedUnits';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { getCanvasCircleCorners, getCanvasCircleRadius, } from '../../utilities/math/circle';\nimport { pointInEllipse } from '../../utilities/math/ellipse';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport { vec2, vec3 } from 'gl-matrix';\nimport { getStyleProperty } from '../../stateManagement/annotation/config/helpers';\nconst { transformWorldToIndex } = csUtils;\nclass CircleROITool extends AnnotationTool {\n    static { this.toolName = 'CircleROI'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            storePointData: false,\n            centerPointRadius: 0,\n            calculateStats: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n            simplified: true,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            this.isDrawing = true;\n            let points;\n            if (this.configuration.simplified) {\n                points = [[...worldPos], [...worldPos]];\n            }\n            else {\n                points = [\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                ];\n            }\n            const annotation = this.createAnnotation(evt, points);\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { points } = annotation.data.handles;\n            const canvasHandles = points.map((p) => viewport.worldToCanvas(p));\n            const canvasCenter = canvasHandles[0];\n            const radius = getCanvasCircleRadius([canvasCenter, canvasHandles[1]]);\n            const radiusPoint = getCanvasCircleRadius([canvasCenter, canvasCoords]);\n            return Math.abs(radiusPoint - radius) < proximity / 2;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                handleIndex = points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const { world: worldPos, canvas: currentCanvasPoints } = currentPoints;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            const centerWorld = data.handles.points[0];\n            const centerCanvas = viewport.worldToCanvas(centerWorld);\n            if (this.configuration.simplified) {\n                data.handles.points[1] = worldPos;\n            }\n            else {\n                const radiusCanvas = vec2.distance(centerCanvas, currentCanvasPoints);\n                data.handles.points[0] = [...centerWorld];\n                data.handles.points[1] = canvasToWorld([\n                    centerCanvas[0],\n                    centerCanvas[1] - radiusCanvas,\n                ]);\n                data.handles.points[2] = canvasToWorld([\n                    centerCanvas[0],\n                    centerCanvas[1] + radiusCanvas,\n                ]);\n                data.handles.points[3] = canvasToWorld([\n                    centerCanvas[0] - radiusCanvas,\n                    centerCanvas[1],\n                ]);\n                data.handles.points[4] = canvasToWorld([\n                    centerCanvas[0] + radiusCanvas,\n                    centerCanvas[1],\n                ]);\n            }\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragHandle(evt);\n                annotation.invalidated = true;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { canvasToWorld, worldToCanvas } = enabledElement.viewport;\n            const { annotation, handleIndex } = this.editData;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const { currentPoints, deltaPoints } = eventDetail;\n            if (handleIndex === 0) {\n                const worldPosDelta = deltaPoints.world;\n                points.forEach((point) => {\n                    vec3.add(point, point, worldPosDelta);\n                });\n            }\n            else {\n                const centerWorld = points[0];\n                const centerCanvas = worldToCanvas(centerWorld);\n                const currentCanvasPoint = currentPoints.canvas;\n                const newRadiusCanvas = vec2.distance(centerCanvas, currentCanvasPoint);\n                points[1] = canvasToWorld([\n                    centerCanvas[0],\n                    centerCanvas[1] - newRadiusCanvas,\n                ]);\n                points[2] = canvasToWorld([\n                    centerCanvas[0],\n                    centerCanvas[1] + newRadiusCanvas,\n                ]);\n                points[3] = canvasToWorld([\n                    centerCanvas[0] - newRadiusCanvas,\n                    centerCanvas[1],\n                ]);\n                points[4] = canvasToWorld([\n                    centerCanvas[0] + newRadiusCanvas,\n                    centerCanvas[1],\n                ]);\n            }\n            annotation.invalidated = true;\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                annotation.highlighted = false;\n                annotation.data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const center = canvasCoordinates[0];\n                const radius = getCanvasCircleRadius([center, canvasCoordinates[1]]);\n                const canvasCorners = getCanvasCircleCorners([\n                    center,\n                    canvasCoordinates[1],\n                ]);\n                const { centerPointRadius } = this.configuration;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].areaUnit == null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        area: null,\n                        max: null,\n                        mean: null,\n                        stdDev: null,\n                        areaUnit: null,\n                        radius: null,\n                        radiusUnit: null,\n                        perimeter: null,\n                    };\n                    this._calculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    if (this.configuration.simplified) {\n                        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                    }\n                    else {\n                        activeHandleCanvasCoords = canvasCoordinates;\n                    }\n                }\n                const showHandlesAlways = Boolean(getStyleProperty('showHandlesAlways', {}));\n                if (activeHandleCanvasCoords || showHandlesAlways) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, showHandlesAlways ? canvasCoordinates : activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-circle`;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                if (centerPointRadius > 0) {\n                    if (radius > 3 * centerPointRadius) {\n                        drawCircleSvg(svgDrawingHelper, annotationUID, `${circleUID}-center`, center, centerPointRadius, {\n                            color,\n                            lineDash,\n                            lineWidth,\n                        });\n                    }\n                }\n                renderStatus = true;\n                if (this.configuration.calculateStats) {\n                    const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                    if (!options.visibility) {\n                        data.handles.textBox = {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        };\n                        continue;\n                    }\n                    const textLines = this.configuration.getTextLines(data, targetId);\n                    if (!textLines || textLines.length === 0) {\n                        continue;\n                    }\n                    let canvasTextBoxCoords;\n                    if (!data.handles.textBox.hasMoved) {\n                        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n                        data.handles.textBox.worldPosition =\n                            viewport.canvasToWorld(canvasTextBoxCoords);\n                    }\n                    const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                    const textBoxUID = '1';\n                    const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, [center, canvasCoordinates[1]], {}, options);\n                    const { x: left, y: top, width, height } = boundingBox;\n                    data.handles.textBox.worldBoundingBox = {\n                        topLeft: viewport.canvasToWorld([left, top]),\n                        topRight: viewport.canvasToWorld([left + width, top]),\n                        bottomLeft: viewport.canvasToWorld([left, top + height]),\n                        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                    };\n                }\n            }\n            return renderStatus;\n        };\n        this._calculateCachedStats = (annotation, viewport, renderingEngine, enabledElement) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            const { element } = viewport;\n            const wasInvalidated = annotation.invalidated;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const canvasCenter = canvasCoordinates[0];\n            const canvasTop = canvasCoordinates[1];\n            const { viewPlaneNormal, viewUp } = viewport.getCamera();\n            const [topLeftCanvas, bottomRightCanvas] = (getCanvasCircleCorners([canvasCenter, canvasTop]));\n            const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n            const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            const worldPos1 = topLeftWorld;\n            const worldPos2 = bottomRightWorld;\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { dimensions, imageData, metadata, voxelManager } = image;\n                const pos1Index = transformWorldToIndex(imageData, worldPos1);\n                pos1Index[0] = Math.floor(pos1Index[0]);\n                pos1Index[1] = Math.floor(pos1Index[1]);\n                pos1Index[2] = Math.floor(pos1Index[2]);\n                const pos2Index = transformWorldToIndex(imageData, worldPos2);\n                pos2Index[0] = Math.floor(pos2Index[0]);\n                pos2Index[1] = Math.floor(pos2Index[1]);\n                pos2Index[2] = Math.floor(pos2Index[2]);\n                if (this._isInsideVolume(pos1Index, pos2Index, dimensions)) {\n                    const iMin = Math.min(pos1Index[0], pos2Index[0]);\n                    const iMax = Math.max(pos1Index[0], pos2Index[0]);\n                    const jMin = Math.min(pos1Index[1], pos2Index[1]);\n                    const jMax = Math.max(pos1Index[1], pos2Index[1]);\n                    const kMin = Math.min(pos1Index[2], pos2Index[2]);\n                    const kMax = Math.max(pos1Index[2], pos2Index[2]);\n                    const boundsIJK = [\n                        [iMin, iMax],\n                        [jMin, jMax],\n                        [kMin, kMax],\n                    ];\n                    const center = points[0];\n                    const xRadius = Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2;\n                    const yRadius = Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2;\n                    const zRadius = Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2;\n                    const ellipseObj = {\n                        center,\n                        xRadius: xRadius < EPSILON / 2 ? 0 : xRadius,\n                        yRadius: yRadius < EPSILON / 2 ? 0 : yRadius,\n                        zRadius: zRadius < EPSILON / 2 ? 0 : zRadius,\n                    };\n                    const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                    const isEmptyArea = worldWidth === 0 && worldHeight === 0;\n                    const handles = [pos1Index, pos2Index];\n                    const { scale, unit, areaUnit } = getCalibratedLengthUnitsAndScale(image, handles);\n                    const aspect = getCalibratedAspect(image);\n                    const area = Math.abs(Math.PI *\n                        (worldWidth / scale / 2) *\n                        (worldHeight / aspect / scale / 2));\n                    const pixelUnitsOptions = {\n                        isPreScaled: isViewportPreScaled(viewport, targetId),\n                        isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                    };\n                    const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                    let pointsInShape;\n                    if (voxelManager) {\n                        pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                            isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS, { fast: true }),\n                            boundsIJK,\n                            imageData,\n                            returnPoints: this.configuration.storePointData,\n                        });\n                    }\n                    const stats = this.configuration.statsCalculator.getStatistics();\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                        area,\n                        mean: stats.mean?.value,\n                        max: stats.max?.value,\n                        min: stats.min?.value,\n                        pointsInShape,\n                        stdDev: stats.stdDev?.value,\n                        statsArray: stats.array,\n                        isEmptyArea,\n                        areaUnit,\n                        radius: worldWidth / 2 / scale,\n                        radiusUnit: unit,\n                        perimeter: (2 * Math.PI * (worldWidth / 2)) / scale,\n                        modalityUnit,\n                    };\n                }\n                else {\n                    this.isHandleOutsideImage = true;\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                    };\n                }\n            }\n            annotation.invalidated = false;\n            if (wasInvalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(CircleROITool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { radius, radiusUnit, area, mean, stdDev, max, min, isEmptyArea, areaUnit, modalityUnit, } = cachedVolumeStats;\n    const textLines = [];\n    if (csUtils.isNumber(radius)) {\n        const radiusLine = isEmptyArea\n            ? `Radius: Oblique not supported`\n            : `Radius: ${csUtils.roundNumber(radius)} ${radiusUnit}`;\n        textLines.push(radiusLine);\n    }\n    if (csUtils.isNumber(area)) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    if (csUtils.isNumber(mean)) {\n        textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(max)) {\n        textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(min)) {\n        textLines.push(`Min: ${csUtils.roundNumber(min)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(stdDev)) {\n        textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nexport default CircleROITool;\n","import { vec3 } from 'gl-matrix';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../utilities/math/line';\nimport angleBetweenLines from '../../utilities/math/angle/angleBetweenLines';\nimport { midPoint2 } from '../../utilities/math/midPoint';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, drawTextBox as drawTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { getStyleProperty } from '../../stateManagement/annotation/config/helpers';\nclass CobbAngleTool extends AnnotationTool {\n    static { this.toolName = 'CobbAngle'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            showArcLines: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            if (this.angleStartedNotYetCompleted) {\n                return;\n            }\n            this.angleStartedNotYetCompleted = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const annotation = (this.createAnnotation(evt, [\n                [...worldPos],\n                [...worldPos],\n            ]));\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { distanceToPoint, distanceToPoint2 } = this.distanceToLines({\n                viewport,\n                points: data.handles.points,\n                canvasCoords,\n                proximity,\n            });\n            if (distanceToPoint <= proximity || distanceToPoint2 <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType, canvasCoords, proximity = 6) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { isNearFirstLine, isNearSecondLine } = this.distanceToLines({\n                viewport,\n                points: annotation.data.handles.points,\n                canvasCoords,\n                proximity,\n            });\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n                isNearFirstLine,\n                isNearSecondLine,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            if (this.angleStartedNotYetCompleted && data.handles.points.length < 4) {\n                resetElementCursor(element);\n                this.editData.handleIndex = data.handles.points.length;\n                return;\n            }\n            this.angleStartedNotYetCompleted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._mouseDownCallback = (evt) => {\n            const { annotation, handleIndex } = this.editData;\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { data } = annotation;\n            if (handleIndex === 1) {\n                data.handles.points[1] = worldPos;\n                this.editData.hasMoved =\n                    data.handles.points[1][0] !== data.handles.points[0][0] ||\n                        data.handles.points[1][1] !== data.handles.points[0][0];\n                return;\n            }\n            if (handleIndex === 3) {\n                data.handles.points[3] = worldPos;\n                this.editData.hasMoved =\n                    data.handles.points[3][0] !== data.handles.points[2][0] ||\n                        data.handles.points[3][1] !== data.handles.points[2][0];\n                this.angleStartedNotYetCompleted = false;\n                return;\n            }\n            this.editData.hasMoved = false;\n            hideElementCursor(element);\n            data.handles.points[2] = data.handles.points[3] = worldPos;\n            this.editData.handleIndex = data.handles.points.length - 1;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, isNearFirstLine, isNearSecondLine, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined &&\n                (isNearFirstLine || isNearSecondLine)) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                if (isNearFirstLine) {\n                    const firstLinePoints = [points[0], points[1]];\n                    firstLinePoints.forEach((point) => {\n                        point[0] += worldPosDelta[0];\n                        point[1] += worldPosDelta[1];\n                        point[2] += worldPosDelta[2];\n                    });\n                }\n                else if (isNearSecondLine) {\n                    const secondLinePoints = [points[2], points[3]];\n                    secondLinePoints.forEach((point) => {\n                        point[0] += worldPosDelta[0];\n                        point[1] += worldPosDelta[1];\n                        point[2] += worldPosDelta[2];\n                    });\n                }\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (!this.isDrawing) {\n                return;\n            }\n            this.isDrawing = false;\n            this._deactivateDraw(element);\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            if (data.handles.points.length < 4) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.angleStartedNotYetCompleted = false;\n            return annotation.annotationUID;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].angle == null) {\n                    data.cachedStats[targetId] = {\n                        angle: null,\n                        arc1Angle: null,\n                        arc2Angle: null,\n                        points: {\n                            world: {\n                                arc1Start: null,\n                                arc1End: null,\n                                arc2Start: null,\n                                arc2End: null,\n                                arc1Angle: null,\n                                arc2Angle: null,\n                            },\n                            canvas: {\n                                arc1Start: null,\n                                arc1End: null,\n                                arc2Start: null,\n                                arc2End: null,\n                                arc1Angle: null,\n                                arc2Angle: null,\n                            },\n                        },\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                const showHandlesAlways = Boolean(getStyleProperty('showHandlesAlways', {}));\n                if (activeHandleCanvasCoords || showHandlesAlways) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const firstLine = [canvasCoordinates[0], canvasCoordinates[1]];\n                const secondLine = [canvasCoordinates[2], canvasCoordinates[3]];\n                let lineUID = 'line1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, firstLine[0], firstLine[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                renderStatus = true;\n                if (canvasCoordinates.length < 4) {\n                    return renderStatus;\n                }\n                lineUID = 'line2';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, secondLine[0], secondLine[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                lineUID = 'linkLine';\n                const mid1 = midPoint2(firstLine[0], firstLine[1]);\n                const mid2 = midPoint2(secondLine[0], secondLine[1]);\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, mid1, mid2, {\n                    color,\n                    lineWidth: '1',\n                    lineDash: '1,4',\n                });\n                const { arc1Start, arc1End, arc2End, arc2Start } = data.cachedStats[targetId].points.canvas;\n                const { arc1Angle, arc2Angle } = data.cachedStats[targetId];\n                if (this.configuration.showArcLines) {\n                    lineUID = 'arc1';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, arc1Start, arc1End, {\n                        color,\n                        lineWidth: '1',\n                    });\n                    lineUID = 'arc2';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, arc2Start, arc2End, {\n                        color,\n                        lineWidth: '1',\n                    });\n                }\n                if (!data.cachedStats[targetId]?.angle) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = 'cobbAngleText';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n                if (this.configuration.showArcLines) {\n                    const arc1TextBoxUID = 'arcAngle1';\n                    const arc1TextLine = [\n                        `${arc1Angle.toFixed(2)} ${String.fromCharCode(176)}`,\n                    ];\n                    const arch1TextPosCanvas = midPoint2(arc1Start, arc1End);\n                    drawTextBoxSvg(svgDrawingHelper, annotationUID, arc1TextBoxUID, arc1TextLine, arch1TextPosCanvas, {\n                        ...options,\n                        padding: 3,\n                    });\n                    const arc2TextBoxUID = 'arcAngle2';\n                    const arc2TextLine = [\n                        `${arc2Angle.toFixed(2)} ${String.fromCharCode(176)}`,\n                    ];\n                    const arch2TextPosCanvas = midPoint2(arc2Start, arc2End);\n                    drawTextBoxSvg(svgDrawingHelper, annotationUID, arc2TextBoxUID, arc2TextLine, arch2TextPosCanvas, {\n                        ...options,\n                        padding: 3,\n                    });\n                }\n            }\n            return renderStatus;\n        };\n        this.distanceToLines = ({ viewport, points, canvasCoords, proximity }) => {\n            const [point1, point2, point3, point4] = points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const canvasPoint3 = viewport.worldToCanvas(point3);\n            const canvasPoint4 = viewport.worldToCanvas(point4);\n            const line1 = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const line2 = {\n                start: {\n                    x: canvasPoint3[0],\n                    y: canvasPoint3[1],\n                },\n                end: {\n                    x: canvasPoint4[0],\n                    y: canvasPoint4[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line1.start.x, line1.start.y], [line1.end.x, line1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            const distanceToPoint2 = lineSegment.distanceToPoint([line2.start.x, line2.start.y], [line2.end.x, line2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            let isNearFirstLine = false;\n            let isNearSecondLine = false;\n            if (distanceToPoint <= proximity) {\n                isNearFirstLine = true;\n            }\n            else if (distanceToPoint2 <= proximity) {\n                isNearSecondLine = true;\n            }\n            return {\n                distanceToPoint,\n                distanceToPoint2,\n                isNearFirstLine,\n                isNearSecondLine,\n            };\n        };\n        this.getArcsStartEndPoints = ({ firstLine, secondLine, mid1, mid2, }) => {\n            const linkLine = [mid1, mid2];\n            const arc1Angle = angleBetweenLines(firstLine, linkLine);\n            const arc2Angle = angleBetweenLines(secondLine, linkLine);\n            const arc1Side = arc1Angle > 90 ? 1 : 0;\n            const arc2Side = arc2Angle > 90 ? 0 : 1;\n            const midLinkLine = midPoint2(linkLine[0], linkLine[1]);\n            const linkLineLength = Math.sqrt((linkLine[1][0] - linkLine[0][0]) ** 2 +\n                (linkLine[1][1] - linkLine[0][1]) ** 2);\n            const ratio = 0.1;\n            const midFirstLine = midPoint2(firstLine[0], firstLine[1]);\n            const midSecondLine = midPoint2(secondLine[0], secondLine[1]);\n            const directionVectorStartArc1 = [\n                firstLine[arc1Side][0] - midFirstLine[0],\n                firstLine[arc1Side][1] - midFirstLine[1],\n            ];\n            const magnitudeStartArc1 = Math.sqrt(directionVectorStartArc1[0] ** 2 + directionVectorStartArc1[1] ** 2);\n            const normalizedDirectionStartArc1 = [\n                directionVectorStartArc1[0] / magnitudeStartArc1,\n                directionVectorStartArc1[1] / magnitudeStartArc1,\n            ];\n            const arc1Start = [\n                midFirstLine[0] +\n                    normalizedDirectionStartArc1[0] * linkLineLength * ratio,\n                midFirstLine[1] +\n                    normalizedDirectionStartArc1[1] * linkLineLength * ratio,\n            ];\n            const directionVectorEndArc1 = [\n                midLinkLine[0] - mid1[0],\n                midLinkLine[1] - mid1[1],\n            ];\n            const magnitudeEndArc1 = Math.sqrt(directionVectorEndArc1[0] ** 2 + directionVectorEndArc1[1] ** 2);\n            const normalizedDirectionEndArc1 = [\n                directionVectorEndArc1[0] / magnitudeEndArc1,\n                directionVectorEndArc1[1] / magnitudeEndArc1,\n            ];\n            const arc1End = [\n                mid1[0] + normalizedDirectionEndArc1[0] * linkLineLength * ratio,\n                mid1[1] + normalizedDirectionEndArc1[1] * linkLineLength * ratio,\n            ];\n            const directionVectorStartArc2 = [\n                secondLine[arc2Side][0] - midSecondLine[0],\n                secondLine[arc2Side][1] - midSecondLine[1],\n            ];\n            const magnitudeStartArc2 = Math.sqrt(directionVectorStartArc2[0] ** 2 + directionVectorStartArc2[1] ** 2);\n            const normalizedDirectionStartArc2 = [\n                directionVectorStartArc2[0] / magnitudeStartArc2,\n                directionVectorStartArc2[1] / magnitudeStartArc2,\n            ];\n            const arc2Start = [\n                midSecondLine[0] +\n                    normalizedDirectionStartArc2[0] * linkLineLength * ratio,\n                midSecondLine[1] +\n                    normalizedDirectionStartArc2[1] * linkLineLength * ratio,\n            ];\n            const directionVectorEndArc2 = [\n                midLinkLine[0] - mid2[0],\n                midLinkLine[1] - mid2[1],\n            ];\n            const magnitudeEndArc2 = Math.sqrt(directionVectorEndArc2[0] ** 2 + directionVectorEndArc2[1] ** 2);\n            const normalizedDirectionEndArc2 = [\n                directionVectorEndArc2[0] / magnitudeEndArc2,\n                directionVectorEndArc2[1] / magnitudeEndArc2,\n            ];\n            const arc2End = [\n                mid2[0] + normalizedDirectionEndArc2[0] * linkLineLength * ratio,\n                mid2[1] + normalizedDirectionEndArc2[1] * linkLineLength * ratio,\n            ];\n            return {\n                arc1Start,\n                arc1End,\n                arc2Start,\n                arc2End,\n                arc1Angle: arc1Angle > 90 ? 180 - arc1Angle : arc1Angle,\n                arc2Angle: arc2Angle > 90 ? 180 - arc2Angle : arc2Angle,\n            };\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 25, { trailing: true });\n    }\n    handleSelectedCallback(evt, annotation, handle, interactionType = 'mouse') {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        if (data.handles.points.length !== 4) {\n            return;\n        }\n        const seg1 = [null, null];\n        const seg2 = [null, null];\n        let minDist = Number.MAX_VALUE;\n        for (let i = 0; i < 2; i += 1) {\n            for (let j = 2; j < 4; j += 1) {\n                const dist = vec3.distance(data.handles.points[i], data.handles.points[j]);\n                if (dist < minDist) {\n                    minDist = dist;\n                    seg1[1] = data.handles.points[i];\n                    seg1[0] = data.handles.points[(i + 1) % 2];\n                    seg2[0] = data.handles.points[j];\n                    seg2[1] = data.handles.points[2 + ((j - 1) % 2)];\n                }\n            }\n        }\n        const { viewport } = enabledElement;\n        const { element } = viewport;\n        const canvasPoints = data.handles.points.map((p) => viewport.worldToCanvas(p));\n        const firstLine = [canvasPoints[0], canvasPoints[1]];\n        const secondLine = [canvasPoints[2], canvasPoints[3]];\n        const mid1 = midPoint2(firstLine[0], firstLine[1]);\n        const mid2 = midPoint2(secondLine[0], secondLine[1]);\n        const { arc1Start, arc1End, arc2End, arc2Start, arc1Angle, arc2Angle } = this.getArcsStartEndPoints({\n            firstLine,\n            secondLine,\n            mid1,\n            mid2,\n        });\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            cachedStats[targetId] = {\n                angle: angleBetweenLines(seg1, seg2),\n                arc1Angle,\n                arc2Angle,\n                points: {\n                    canvas: {\n                        arc1Start,\n                        arc1End,\n                        arc2End,\n                        arc2Start,\n                    },\n                    world: {\n                        arc1Start: viewport.canvasToWorld(arc1Start),\n                        arc1End: viewport.canvasToWorld(arc1End),\n                        arc2End: viewport.canvasToWorld(arc2End),\n                        arc2Start: viewport.canvasToWorld(arc2Start),\n                    },\n                },\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { angle } = cachedVolumeStats;\n    if (angle === undefined) {\n        return;\n    }\n    const textLines = [`${angle.toFixed(2)} ${String.fromCharCode(176)}`];\n    return textLines;\n}\nexport default CobbAngleTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { drawHandles as drawHandlesSvg, drawTextBox as drawTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport ProbeTool from './ProbeTool';\nclass DragProbeTool extends ProbeTool {\n    static { this.toolName = 'DragProbe'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.postMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                isVisible: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId,\n                },\n                data: {\n                    label: '',\n                    handles: { points: [[...worldPos]] },\n                    cachedStats: {},\n                },\n            };\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                newAnnotation: true,\n                viewportIdsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.postTouchStartCallback = (evt) => {\n            return this.postMouseDownCallback(evt);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const annotations = this.filterInteractableAnnotationsForElement(viewport.element, [this.editData.annotation]);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const annotation = this.editData.annotation;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const point = data.handles.points[0];\n            const canvasCoordinates = viewport.worldToCanvas(point);\n            styleSpecifier.annotationUID = annotationUID;\n            const { color } = this.getAnnotationStyle({\n                annotation,\n                styleSpecifier,\n            });\n            if (!data.cachedStats[targetId] ||\n                data.cachedStats[targetId].value === null) {\n                data.cachedStats[targetId] = {\n                    Modality: null,\n                    index: null,\n                    value: null,\n                };\n                this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n            }\n            else if (annotation.invalidated) {\n                this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n            }\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const handleGroupUID = '0';\n            drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, [canvasCoordinates], { color });\n            renderStatus = true;\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (textLines) {\n                const textCanvasCoordinates = [\n                    canvasCoordinates[0] + 6,\n                    canvasCoordinates[1] - 6,\n                ];\n                const textUID = '0';\n                drawTextBoxSvg(svgDrawingHelper, annotationUID, textUID, textLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], this.getLinkedTextBoxStyle(styleSpecifier, annotation));\n            }\n            return renderStatus;\n        };\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { index, value, modalityUnit } = cachedVolumeStats;\n    if (value === undefined) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`(${index[0]}, ${index[1]}, ${index[2]})`);\n    textLines.push(`${value.toFixed(2)} ${modalityUnit}`);\n    return textLines;\n}\nexport default DragProbeTool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted } from '../../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawLine } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getCanvasCircleRadius } from '../../utilities/math/circle';\nimport { vec3 } from 'gl-matrix';\nconst CROSSHAIR_SIZE = 5;\nclass ETDRSGridTool extends AnnotationTool {\n    static { this.toolName = 'ETDRSGrid'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            degrees: [45, 135, 225, 315],\n            diameters: [10, 30, 60],\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        points: [[...worldPos]],\n                    },\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                newAnnotation: true,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const center = viewport.worldToCanvas(points[0]);\n            const radius = getCanvasCircleRadius([center, canvasCoords]);\n            if (Math.abs(radius) < proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const { renderingEngine } = getEnabledElement(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            data.handles.points = [\n                canvasToWorld(currentCanvasPoints),\n                canvasToWorld(currentCanvasPoints),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            const { deltaPoints } = eventDetail;\n            const worldPosDelta = deltaPoints.world;\n            const points = data.handles.points;\n            points.forEach((point) => {\n                point[0] += worldPosDelta[0];\n                point[1] += worldPosDelta[1];\n                point[2] += worldPosDelta[2];\n            });\n            annotation.invalidated = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { canvasToWorld, worldToCanvas } = enabledElement.viewport;\n            const { annotation } = this.editData;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => worldToCanvas(p));\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const dXCanvas = currentCanvasPoints[0] - canvasCoordinates[0][0];\n            const dYCanvas = currentCanvasPoints[1] - canvasCoordinates[0][1];\n            const canvasCenter = currentCanvasPoints;\n            const canvasEnd = [\n                canvasCoordinates[1][0] + dXCanvas,\n                canvasCoordinates[1][1] + dYCanvas,\n            ];\n            points[0] = canvasToWorld(canvasCenter);\n            points[1] = canvasToWorld(canvasEnd);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                const { renderingEngine } = getEnabledElement(element);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const center = canvasCoordinates[0];\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                let lineUID = `${annotationUID}-crosshair-vertical`;\n                let start = [center[0], center[1] + CROSSHAIR_SIZE];\n                let end = [center[0], center[1] - CROSSHAIR_SIZE];\n                drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                });\n                lineUID = `${annotationUID}-crosshair-horizontal`;\n                start = [center[0] + CROSSHAIR_SIZE, center[1]];\n                end = [center[0] - CROSSHAIR_SIZE, center[1]];\n                drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                });\n                const diametersCanvas = this.configuration.diameters.map((diameter) => this.worldMeasureToCanvas(diameter, viewport));\n                for (let i = 0; i < diametersCanvas.length; i++) {\n                    const dataId = `${annotationUID}-circle-${i}`;\n                    const circleUID = `${annotationUID}-circle-${i}`;\n                    drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, diametersCanvas[i] / 2, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    }, dataId);\n                }\n                const degreesRad = (x) => (x * Math.PI) / 180;\n                const angleRadians = this.configuration.degrees.map((degree) => degreesRad(degree));\n                for (let i = 0; i < angleRadians.length; i++) {\n                    const lineUID = `${annotationUID}-line-${i}`;\n                    const start = [\n                        (Math.cos(angleRadians[i]) * diametersCanvas[0]) / 2 + center[0],\n                        (Math.sin(angleRadians[i]) * diametersCanvas[0]) / 2 + center[1],\n                    ];\n                    const end = [\n                        (Math.cos(angleRadians[i]) * diametersCanvas[2]) / 2 + center[0],\n                        (Math.sin(angleRadians[i]) * diametersCanvas[2]) / 2 + center[1],\n                    ];\n                    drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n    }\n    worldMeasureToCanvas(measurement, viewport) {\n        const p1 = viewport.canvasToWorld([\n            viewport.canvas.width / 2,\n            viewport.canvas.height / 2,\n        ]);\n        const { viewUp } = viewport.getCamera();\n        const p2 = vec3.scaleAndAdd(vec3.create(), p1, viewUp, measurement);\n        const p1Canvas = viewport.worldToCanvas(p1);\n        const p2Canvas = viewport.worldToCanvas(p2);\n        const distance = Math.sqrt(Math.pow(p2Canvas[0] - p1Canvas[0], 2) +\n            Math.pow(p2Canvas[1] - p1Canvas[1], 2));\n        return distance;\n    }\n}\nexport default ETDRSGridTool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, getEnabledElementByViewportId, EPSILON, } from '@cornerstonejs/core';\nimport { getCalibratedAspect, getCalibratedLengthUnitsAndScale, } from '../../utilities/getCalibratedUnits';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawEllipseByCoordinates as drawEllipseSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { pointInEllipse, getCanvasEllipseCorners, } from '../../utilities/math/ellipse';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport { vec2 } from 'gl-matrix';\nimport { getStyleProperty } from '../../stateManagement/annotation/config/helpers';\nconst { transformWorldToIndex } = csUtils;\nclass EllipticalROITool extends AnnotationTool {\n    static { this.toolName = 'EllipticalROI'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            storePointData: false,\n            centerPointRadius: 0,\n            calculateStats: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            this.isDrawing = true;\n            const annotation = (this.createAnnotation(evt, [\n                [...worldPos],\n                [...worldPos],\n                [...worldPos],\n                [...worldPos],\n            ]));\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                centerWorld: worldPos,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const [bottom, top, left, right] = canvasCoordinates;\n            const w = Math.hypot(left[0] - right[0], left[1] - right[1]);\n            const h = Math.hypot(top[0] - bottom[0], top[1] - bottom[1]);\n            const angle = Math.atan2(left[1] - right[1], left[0] - right[0]);\n            const center = [(left[0] + right[0]) / 2, (top[1] + bottom[1]) / 2];\n            const minorEllipse = {\n                center,\n                xRadius: (w - proximity) / 2,\n                yRadius: (h - proximity) / 2,\n                angle,\n            };\n            const majorEllipse = {\n                center,\n                xRadius: (w + proximity) / 2,\n                yRadius: (h + proximity) / 2,\n                angle,\n            };\n            const pointInMinorEllipse = this._pointInEllipseCanvas(minorEllipse, canvasCoords);\n            const pointInMajorEllipse = this._pointInEllipseCanvas(majorEllipse, canvasCoords);\n            if (pointInMajorEllipse && !pointInMinorEllipse) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            let centerCanvas;\n            let centerWorld;\n            let canvasWidth;\n            let canvasHeight;\n            let originalHandleCanvas;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                const { viewport } = getEnabledElement(element);\n                const { worldToCanvas, canvasToWorld } = viewport;\n                handleIndex = points.findIndex((p) => p === handle);\n                const pointsCanvas = points.map(worldToCanvas);\n                originalHandleCanvas = pointsCanvas[handleIndex];\n                canvasWidth = Math.abs(pointsCanvas[2][0] - pointsCanvas[3][0]);\n                canvasHeight = Math.abs(pointsCanvas[0][1] - pointsCanvas[1][1]);\n                centerCanvas = [\n                    (pointsCanvas[2][0] + pointsCanvas[3][0]) / 2,\n                    (pointsCanvas[0][1] + pointsCanvas[1][1]) / 2,\n                ];\n                centerWorld = canvasToWorld(centerCanvas);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                canvasWidth,\n                canvasHeight,\n                centerWorld,\n                originalHandleCanvas,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, centerWorld, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const centerCanvas = viewport.worldToCanvas(centerWorld);\n            const { data } = annotation;\n            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n            const bottomCanvas = [centerCanvas[0], centerCanvas[1] - dY];\n            const topCanvas = [centerCanvas[0], centerCanvas[1] + dY];\n            const leftCanvas = [centerCanvas[0] - dX, centerCanvas[1]];\n            const rightCanvas = [centerCanvas[0] + dX, centerCanvas[1]];\n            data.handles.points = [\n                canvasToWorld(bottomCanvas),\n                canvasToWorld(topCanvas),\n                canvasToWorld(leftCanvas),\n                canvasToWorld(rightCanvas),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragHandle(evt);\n                annotation.invalidated = true;\n            }\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { viewport } = getEnabledElement(element);\n            const { canvasToWorld, worldToCanvas } = viewport;\n            const { annotation, canvasWidth, canvasHeight, handleIndex, centerWorld, originalHandleCanvas, } = this.editData;\n            const centerCanvas = viewport.worldToCanvas(centerWorld);\n            const { data } = annotation;\n            const { points } = data.handles;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            if (handleIndex === 0 || handleIndex === 1) {\n                const dYCanvas = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n                const canvasBottom = [\n                    centerCanvas[0],\n                    centerCanvas[1] - dYCanvas,\n                ];\n                const canvasTop = [\n                    centerCanvas[0],\n                    centerCanvas[1] + dYCanvas,\n                ];\n                points[0] = canvasToWorld(canvasBottom);\n                points[1] = canvasToWorld(canvasTop);\n                const dXCanvas = currentCanvasPoints[0] - originalHandleCanvas[0];\n                const newHalfCanvasWidth = canvasWidth / 2 + dXCanvas;\n                const canvasLeft = [\n                    centerCanvas[0] - newHalfCanvasWidth,\n                    centerCanvas[1],\n                ];\n                const canvasRight = [\n                    centerCanvas[0] + newHalfCanvasWidth,\n                    centerCanvas[1],\n                ];\n                points[2] = canvasToWorld(canvasLeft);\n                points[3] = canvasToWorld(canvasRight);\n            }\n            else {\n                const dXCanvas = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n                const canvasLeft = [\n                    centerCanvas[0] - dXCanvas,\n                    centerCanvas[1],\n                ];\n                const canvasRight = [\n                    centerCanvas[0] + dXCanvas,\n                    centerCanvas[1],\n                ];\n                points[2] = canvasToWorld(canvasLeft);\n                points[3] = canvasToWorld(canvasRight);\n                const dYCanvas = currentCanvasPoints[1] - originalHandleCanvas[1];\n                const newHalfCanvasHeight = canvasHeight / 2 + dYCanvas;\n                const canvasBottom = [\n                    centerCanvas[0],\n                    centerCanvas[1] - newHalfCanvasHeight,\n                ];\n                const canvasTop = [\n                    centerCanvas[0],\n                    centerCanvas[1] + newHalfCanvasHeight,\n                ];\n                points[0] = canvasToWorld(canvasBottom);\n                points[1] = canvasToWorld(canvasTop);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const canvasCorners = (getCanvasEllipseCorners(canvasCoordinates));\n                const { centerPointRadius } = this.configuration;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].areaUnit == null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        area: null,\n                        max: null,\n                        mean: null,\n                        stdDev: null,\n                        areaUnit: null,\n                    };\n                    this._calculateCachedStats(annotation, viewport, renderingEngine);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                const showHandlesAlways = Boolean(getStyleProperty('showHandlesAlways', {}));\n                if (activeHandleCanvasCoords || showHandlesAlways) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, showHandlesAlways ? canvasCoordinates : activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-ellipse`;\n                const ellipseUID = '0';\n                drawEllipseSvg(svgDrawingHelper, annotationUID, ellipseUID, canvasCoordinates, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                if (centerPointRadius > 0) {\n                    const minRadius = Math.min(Math.abs(canvasCorners[0][0] - canvasCorners[1][0]) / 2, Math.abs(canvasCorners[0][1] - canvasCorners[1][1]) / 2);\n                    if (minRadius > 3 * centerPointRadius) {\n                        const centerPoint = this._getCanvasEllipseCenter(canvasCoordinates);\n                        drawCircleSvg(svgDrawingHelper, annotationUID, `${ellipseUID}-center`, centerPoint, centerPointRadius, {\n                            color,\n                            lineDash,\n                            lineWidth,\n                        });\n                    }\n                }\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._calculateCachedStats = (annotation, viewport, renderingEngine) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            const { element } = viewport;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const { viewPlaneNormal, viewUp } = viewport.getCamera();\n            const [topLeftCanvas, bottomRightCanvas] = (getCanvasEllipseCorners(canvasCoordinates));\n            const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n            const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            const worldPos1 = topLeftWorld;\n            const worldPos2 = bottomRightWorld;\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { dimensions, imageData, metadata, voxelManager } = image;\n                const pos1Index = transformWorldToIndex(imageData, worldPos1);\n                pos1Index[0] = Math.floor(pos1Index[0]);\n                pos1Index[1] = Math.floor(pos1Index[1]);\n                pos1Index[2] = Math.floor(pos1Index[2]);\n                const pos2Index = transformWorldToIndex(imageData, worldPos2);\n                pos2Index[0] = Math.floor(pos2Index[0]);\n                pos2Index[1] = Math.floor(pos2Index[1]);\n                pos2Index[2] = Math.floor(pos2Index[2]);\n                if (this._isInsideVolume(pos1Index, pos2Index, dimensions)) {\n                    const iMin = Math.min(pos1Index[0], pos2Index[0]);\n                    const iMax = Math.max(pos1Index[0], pos2Index[0]);\n                    const jMin = Math.min(pos1Index[1], pos2Index[1]);\n                    const jMax = Math.max(pos1Index[1], pos2Index[1]);\n                    const kMin = Math.min(pos1Index[2], pos2Index[2]);\n                    const kMax = Math.max(pos1Index[2], pos2Index[2]);\n                    const boundsIJK = [\n                        [iMin, iMax],\n                        [jMin, jMax],\n                        [kMin, kMax],\n                    ];\n                    const center = [\n                        (topLeftWorld[0] + bottomRightWorld[0]) / 2,\n                        (topLeftWorld[1] + bottomRightWorld[1]) / 2,\n                        (topLeftWorld[2] + bottomRightWorld[2]) / 2,\n                    ];\n                    const xRadius = Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2;\n                    const yRadius = Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2;\n                    const zRadius = Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2;\n                    const ellipseObj = {\n                        center,\n                        xRadius: xRadius < EPSILON / 2 ? 0 : xRadius,\n                        yRadius: yRadius < EPSILON / 2 ? 0 : yRadius,\n                        zRadius: zRadius < EPSILON / 2 ? 0 : zRadius,\n                    };\n                    const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                    const isEmptyArea = worldWidth === 0 && worldHeight === 0;\n                    const handles = [pos1Index, pos2Index];\n                    const { scale, unit, areaUnit } = getCalibratedLengthUnitsAndScale(image, handles);\n                    const aspect = getCalibratedAspect(image);\n                    const area = Math.abs(Math.PI *\n                        (worldWidth / scale / 2) *\n                        (worldHeight / aspect / scale / 2));\n                    const pixelUnitsOptions = {\n                        isPreScaled: isViewportPreScaled(viewport, targetId),\n                        isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                    };\n                    const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                    let pointsInShape;\n                    if (voxelManager) {\n                        pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                            isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS, { fast: true }),\n                            boundsIJK,\n                            imageData,\n                            returnPoints: this.configuration.storePointData,\n                        });\n                    }\n                    const stats = this.configuration.statsCalculator.getStatistics();\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                        area,\n                        mean: stats.mean?.value,\n                        max: stats.max?.value,\n                        min: stats.min?.value,\n                        stdDev: stats.stdDev?.value,\n                        statsArray: stats.array,\n                        pointsInShape,\n                        isEmptyArea,\n                        areaUnit,\n                        modalityUnit,\n                    };\n                }\n                else {\n                    this.isHandleOutsideImage = true;\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                    };\n                }\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(EllipticalROITool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    _pointInEllipseCanvas(ellipse, location) {\n        const { xRadius, yRadius, center, angle } = ellipse;\n        const rotLocation = vec2.rotate(vec2.create(), location, center, -angle);\n        if (xRadius <= 0.0 || yRadius <= 0.0) {\n            return false;\n        }\n        const normalized = [rotLocation[0] - center[0], rotLocation[1] - center[1]];\n        const inEllipse = (normalized[0] * normalized[0]) / (xRadius * xRadius) +\n            (normalized[1] * normalized[1]) / (yRadius * yRadius) <=\n            1.0;\n        return inEllipse;\n    }\n    _getCanvasEllipseCenter(ellipseCanvasPoints) {\n        const [bottom, top, left, right] = ellipseCanvasPoints;\n        const topLeft = [left[0], top[1]];\n        const bottomRight = [right[0], bottom[1]];\n        return [\n            (topLeft[0] + bottomRight[0]) / 2,\n            (topLeft[1] + bottomRight[1]) / 2,\n        ];\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, mean, stdDev, max, isEmptyArea, areaUnit, modalityUnit, min } = cachedVolumeStats;\n    const textLines = [];\n    if (csUtils.isNumber(area)) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    if (csUtils.isNumber(mean)) {\n        textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(max)) {\n        textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(min)) {\n        textLines.push(`Min: ${csUtils.roundNumber(min)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(stdDev)) {\n        textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nexport default EllipticalROITool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawHeight as drawHeightSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { getStyleProperty } from '../../stateManagement/annotation/config/helpers';\nconst { transformWorldToIndex } = csUtils;\nclass HeightTool extends AnnotationTool {\n    static { this.toolName = 'Height'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const annotation = (this.createAnnotation(evt, [\n                [...worldPos],\n                [...worldPos],\n            ]));\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                const enabledElement = getEnabledElement(element);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                let activeHandleCanvasCoords;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                const showHandlesAlways = Boolean(getStyleProperty('showHandlesAlways', {}));\n                if (activeHandleCanvasCoords || showHandlesAlways) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const heightUID = '0';\n                drawHeightSvg(svgDrawingHelper, annotationUID, heightUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash: lineDash,\n                });\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateHeight(pos1, pos2) {\n        const dx = pos2[0] - pos1[0];\n        const dy = pos2[1] - pos1[1];\n        const dz = pos2[2] - pos1[2];\n        if (dx == 0) {\n            if (dy != 0) {\n                return Math.abs(dz);\n            }\n            else {\n                return 0;\n            }\n        }\n        else if (dy == 0) {\n            return Math.abs(dz);\n        }\n        else if (dz == 0) {\n            return Math.abs(dy);\n        }\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[1];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { imageData, dimensions } = image;\n            const index1 = transformWorldToIndex(imageData, worldPos1);\n            const index2 = transformWorldToIndex(imageData, worldPos2);\n            const handles = [index1, index2];\n            const { scale, unit } = getCalibratedLengthUnitsAndScale(image, handles);\n            const height = this._calculateHeight(worldPos1, worldPos2) / scale;\n            const outside = this._isInsideVolume(index1, index2, dimensions);\n            this.isHandleOutsideImage = outside;\n            cachedStats[targetId] = {\n                height,\n                unit,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { height, unit } = cachedVolumeStats;\n    if (height === undefined || height === null || isNaN(height)) {\n        return;\n    }\n    const textLines = [`${csUtils.roundNumber(height)} ${unit}`];\n    return textLines;\n}\nexport default HeightTool;\n","import { Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawArrow as drawArrowSvg, drawHandles as drawHandlesSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nclass KeyImageTool extends AnnotationTool {\n    static { this.toolName = 'KeyImage'; }\n    static { this.dataSeries = {\n        data: {\n            seriesLevel: true,\n        },\n    }; }\n    static { this.dataPoint = {\n        data: {\n            isPoint: true,\n        },\n    }; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            getTextCallback,\n            changeTextCallback,\n            canvasPosition: [10, 10],\n            canvasSize: 10,\n            handleRadius: '6',\n            seriesLevel: false,\n            isPoint: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const worldPos = currentPoints.world;\n            const annotation = (this.constructor).createAnnotationForViewport(viewport, {\n                data: {\n                    handles: { points: [[...worldPos]] },\n                    seriesLevel: this.configuration.seriesLevel,\n                    isPoint: this.configuration.isPoint,\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.configuration.getTextCallback((label) => {\n                if (!label) {\n                    removeAnnotation(annotation.annotationUID);\n                    triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                    this.isDrawing = false;\n                    return;\n                }\n                annotation.data.label = label;\n                triggerAnnotationCompleted(annotation);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            });\n            this.createMemo(element, annotation, { newAnnotation: true });\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            if (!data?.isPoint) {\n                return false;\n            }\n            const { canvasPosition, canvasSize } = this.configuration;\n            if (!canvasPosition?.length) {\n                return false;\n            }\n            if (Math.abs(canvasCoords[0] - canvasPosition[0] + canvasSize / 2) <=\n                canvasSize / 2 &&\n                Math.abs(canvasCoords[1] - canvasPosition[1] + canvasSize / 2) <=\n                    canvasSize / 2) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            annotation.highlighted = true;\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { viewportId, renderingEngine } = getEnabledElement(element);\n            this.eventDispatchDetail = {\n                viewportId,\n                renderingEngineId: renderingEngine.id,\n            };\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            if (newAnnotation) {\n                this.createMemo(element, annotation, { newAnnotation });\n            }\n            this.editData = null;\n            this.isDrawing = false;\n            this.doneEditMemo();\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this.doubleClickCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            let annotations = getAnnotations(this.getToolName(), element);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return;\n            }\n            const clickedAnnotation = annotations.find((annotation) => this.isPointNearTool(element, annotation, eventDetail.currentPoints.canvas, 6));\n            if (!clickedAnnotation) {\n                return;\n            }\n            const annotation = clickedAnnotation;\n            this.createMemo(element, annotation);\n            this.configuration.changeTextCallback(clickedAnnotation, evt.detail, this._doneChangingTextCallback.bind(this, element, annotation));\n            this.isDrawing = false;\n            this.doneEditMemo();\n            evt.stopImmediatePropagation();\n            evt.preventDefault();\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            data.handles.points[0] = [...worldPos];\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const { canvasPosition, canvasSize } = this.configuration;\n                const arrowUID = '1';\n                if (data?.isPoint) {\n                    const point = data.handles.points[0];\n                    const canvasCoordinates = viewport.worldToCanvas(point);\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, arrowUID, [canvasCoordinates], {\n                        color,\n                        lineWidth,\n                        handleRadius: this.configuration.handleRadius,\n                    });\n                }\n                else if (canvasPosition?.length) {\n                    drawArrowSvg(svgDrawingHelper, annotationUID, arrowUID, canvasPosition.map((it) => it + canvasSize), canvasPosition, {\n                        color,\n                        width: 1,\n                    });\n                }\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n            }\n            return renderStatus;\n        };\n    }\n    handleSelectedCallback(evt, annotation) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        annotation.highlighted = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    static setPoint(annotation, isPoint = !annotation.data.isPoint, element) {\n        annotation.data.isPoint = isPoint;\n        triggerAnnotationModified(annotation, element);\n    }\n    _doneChangingTextCallback(element, annotation, updatedText) {\n        annotation.data.label = updatedText;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        triggerAnnotationModified(annotation, element);\n    }\n    cancel(element) {\n        if (this.isDrawing) {\n            this.isDrawing = false;\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            return annotation.annotationUID;\n        }\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction getTextCallback(doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nexport default KeyImageTool;\n","import { vec2 } from 'gl-matrix';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { drawTextBox as drawTextBoxSvg } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nclass LabelTool extends AnnotationTool {\n    static { this.toolName = 'Label'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            getTextCallback,\n            changeTextCallback,\n            preventHandleOutsideImage: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { annotationUID } = annotation;\n            const point = annotation.data.handles.points[0];\n            const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n            const dist = vec2.distance(canvasCoords, annotationCanvasCoordinate);\n            if (dist < proximity) {\n                return true;\n            }\n            const svgLayer = element.querySelector('svg');\n            if (!svgLayer) {\n                return false;\n            }\n            const textGroup = svgLayer.querySelector(`g[data-annotation-uid=\"${annotationUID}\"]`);\n            if (!textGroup) {\n                return false;\n            }\n            const textGroupElement = textGroup;\n            const bbox = textGroupElement.getBBox();\n            const transform = textGroupElement.getAttribute('transform');\n            let translateX = 0;\n            let translateY = 0;\n            if (transform) {\n                const matches = transform.match(/translate\\(([-\\d.]+)\\s+([-\\d.]+)\\)/);\n                if (matches) {\n                    translateX = parseFloat(matches[1]);\n                    translateY = parseFloat(matches[2]);\n                }\n            }\n            const x = bbox.x + translateX;\n            const y = bbox.y + translateY;\n            const isNear = canvasCoords[0] >= x &&\n                canvasCoords[0] <= x + bbox.width &&\n                canvasCoords[1] >= y &&\n                canvasCoords[1] <= y + bbox.height;\n            return isNear;\n        };\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const annotation = (this.createAnnotation(evt, [\n                [...worldPos],\n                [...worldPos],\n            ]));\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                newAnnotation: true,\n                viewportIdsToRender,\n                offset: [0, 0, 0],\n            };\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.configuration.getTextCallback((label) => {\n                if (!label) {\n                    removeAnnotation(annotation.annotationUID);\n                    triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                    this.isDrawing = false;\n                    return;\n                }\n                resetElementCursor(element);\n                annotation.data.label = label;\n                triggerAnnotationCompleted(annotation);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            });\n            this.createMemo(element, annotation, { newAnnotation: true });\n            return annotation;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            let offset = [0, 0, 0];\n            if (currentPoints && currentPoints.world) {\n                const initialWorldPos = currentPoints.world;\n                const anchorWorldPos = annotation.data.handles.points[0];\n                offset = [\n                    anchorWorldPos[0] - initialWorldPos[0],\n                    anchorWorldPos[1] - initialWorldPos[1],\n                    anchorWorldPos[2] - initialWorldPos[2],\n                ];\n            }\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                offset,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            this._deactivateDraw(element);\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            if (newAnnotation) {\n                this.createMemo(element, annotation, { newAnnotation });\n            }\n            this.editData = null;\n            this.isDrawing = false;\n            this.doneEditMemo();\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { annotation, viewportIdsToRender, offset } = this.editData;\n            if (offset) {\n                annotation.data.handles.points[0] = [\n                    worldPos[0] + offset[0],\n                    worldPos[1] + offset[1],\n                    worldPos[2] + offset[2],\n                ];\n            }\n            else {\n                annotation.data.handles.points[0] = [...worldPos];\n            }\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.LabelChange);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const point = data.handles.points[0];\n                styleSpecifier.annotationUID = annotationUID;\n                const canvasCoordinates = viewport.worldToCanvas(point);\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!data.label) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                const textBoxUID = '1';\n                drawTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, [data.label], canvasCoordinates, {\n                    ...options,\n                    padding: 0,\n                });\n            }\n            return renderStatus;\n        };\n    }\n    static { this.hydrate = (viewportId, position, label, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n        const { viewPlaneNormal, viewUp } = viewport.getCamera();\n        const instance = new this();\n        const referencedImageId = instance.getReferencedImageId(viewport, position, viewPlaneNormal, viewUp);\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                label,\n                handles: {\n                    points: [position],\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...options,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(_evt, _annotation, _handle, _interactionType) { }\n    _doneChangingTextCallback(element, annotation, updatedLabel) {\n        annotation.data.label = updatedLabel;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        triggerAnnotationModified(annotation, element);\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction getTextCallback(doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nLabelTool.toolName = 'Label';\nexport default LabelTool;\n","import { Events, ChangeTypes } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, utilities, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { getStyleProperty } from '../../stateManagement/annotation/config/helpers';\nconst { transformWorldToIndex } = csUtils;\nclass LengthTool extends AnnotationTool {\n    static { this.toolName = 'Length'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            actions: {\n                undo: {\n                    method: 'undo',\n                    bindings: [{ key: 'z' }],\n                },\n                redo: {\n                    method: 'redo',\n                    bindings: [{ key: 'y' }],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const annotation = (this.createAnnotation(evt, [\n                [...worldPos],\n                [...worldPos],\n            ]));\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                const showHandlesAlways = Boolean(getStyleProperty('showHandlesAlways', {}));\n                if (activeHandleCanvasCoords || showHandlesAlways) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const dataId = `${annotationUID}-line`;\n                const lineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId);\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(LengthTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateLength(pos1, pos2) {\n        const dx = pos1[0] - pos2[0];\n        const dy = pos1[1] - pos2[1];\n        const dz = pos1[2] - pos2[2];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[1];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { imageData, dimensions } = image;\n            const index1 = transformWorldToIndex(imageData, worldPos1);\n            const index2 = transformWorldToIndex(imageData, worldPos2);\n            const handles = [index1, index2];\n            const { scale, unit } = getCalibratedLengthUnitsAndScale(image, handles);\n            const length = this._calculateLength(worldPos1, worldPos2) / scale;\n            if (this._isInsideVolume(index1, index2, dimensions)) {\n                this.isHandleOutsideImage = false;\n            }\n            else {\n                this.isHandleOutsideImage = true;\n            }\n            cachedStats[targetId] = {\n                length,\n                unit,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { length, unit } = cachedVolumeStats;\n    if (length === undefined || length === null || isNaN(length)) {\n        return;\n    }\n    const textLines = [`${csUtils.roundNumber(length)} ${unit}`];\n    return textLines;\n}\nexport default LengthTool;\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport LivewireContourTool from './LivewireContourTool';\nimport { LivewirePath } from '../../utilities/livewire/LiveWirePath';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nimport { ChangeTypes } from '../../enums';\nimport { drawPolyline as drawPolylineSvg } from '../../drawingSvg';\nclass LivewireContourSegmentationTool extends LivewireContourTool {\n    static { this.toolName = 'LivewireContourSegmentationTool'; }\n    updateInterpolatedAnnotation(annotation, enabledElement) {\n        if (this.editData ||\n            !annotation.invalidated ||\n            !annotation.data.handles.interpolationSources) {\n            return;\n        }\n        annotation.data.contour.originalPolyline = annotation.data.contour.polyline;\n        queueMicrotask(() => {\n            if (!annotation.data.handles.interpolationSources) {\n                return;\n            }\n            const { points } = annotation.data.handles;\n            const { element } = enabledElement.viewport;\n            this.setupBaseEditData(points[0], element, annotation);\n            const { length: count } = points;\n            const { scissors } = this;\n            const { nearestEdge, repeatInterpolation } = this.configuration.interpolation;\n            annotation.data.handles.originalPoints = points;\n            const { worldToSlice, sliceToWorld } = this.editData;\n            const handleSmoothing = [];\n            if (nearestEdge) {\n                let lastPoint = worldToSlice(points[points.length - 1]);\n                points.forEach((point, hIndex) => {\n                    const testPoint = worldToSlice(point);\n                    lastPoint = testPoint;\n                    handleSmoothing.push(testPoint);\n                    scissors.startSearch(lastPoint);\n                    scissors.findPathToPoint(testPoint);\n                    scissors.findPathToPoint(worldToSlice(points[(hIndex + 3) % points.length]));\n                    const minPoint = scissors.findMinNearby(testPoint, nearestEdge);\n                    if (!csUtils.isEqual(testPoint, minPoint)) {\n                        handleSmoothing[hIndex] = minPoint;\n                        lastPoint = minPoint;\n                        points[hIndex] = sliceToWorld(minPoint);\n                    }\n                });\n            }\n            const acceptedPath = new LivewirePath();\n            for (let i = 0; i < count; i++) {\n                scissors.startSearch(worldToSlice(points[i]));\n                const path = scissors.findPathToPoint(worldToSlice(points[(i + 1) % count]));\n                acceptedPath.addPoints(path);\n            }\n            this.updateAnnotation(acceptedPath);\n            this.scissors = null;\n            this.scissorsNext = null;\n            this.editData = null;\n            annotation.data.handles.interpolationSources = null;\n            if (repeatInterpolation) {\n                triggerAnnotationModified(annotation, enabledElement.viewport.element, ChangeTypes.InterpolationUpdated);\n            }\n        });\n    }\n    renderAnnotationInstance(renderContext) {\n        const { enabledElement, svgDrawingHelper } = renderContext;\n        const annotation = renderContext.annotation;\n        const { annotationUID } = annotation;\n        const { viewport } = enabledElement;\n        const { worldToCanvas } = viewport;\n        const { showInterpolationPolyline } = this.configuration.interpolation || {};\n        this.updateInterpolatedAnnotation?.(annotation, enabledElement);\n        const { originalPolyline } = annotation.data.contour;\n        const rendered = super.renderAnnotationInstance(renderContext);\n        if (showInterpolationPolyline &&\n            originalPolyline &&\n            annotation.autoGenerated) {\n            const polylineCanvasPoints = originalPolyline.map(worldToCanvas);\n            polylineCanvasPoints.push(polylineCanvasPoints[0]);\n            drawPolylineSvg(svgDrawingHelper, annotationUID, 'interpolationContour-0', polylineCanvasPoints, {\n                color: '#70ffff',\n                lineWidth: 1,\n                fillOpacity: 0,\n            });\n        }\n        return rendered;\n    }\n    isContourSegmentationTool() {\n        return true;\n    }\n}\nexport default LivewireContourSegmentationTool;\n","import { vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, VolumeViewport, utilities, triggerEvent, eventTarget, } from '@cornerstonejs/core';\nimport { removeAnnotation } from '../../stateManagement/annotation/annotationState';\nimport { drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events, KeyboardBindings, ChangeTypes } from '../../enums';\nimport { resetElementCursor } from '../../cursors/elementCursor';\nimport getMouseModifierKey from '../../eventDispatchers/shared/getMouseModifier';\nimport * as math from '../../utilities/math';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport findHandlePolylineIndex from '../../utilities/contours/findHandlePolylineIndex';\nimport { ContourWindingDirection } from '../../types/ContourAnnotation';\nimport { triggerAnnotationModified, triggerContourAnnotationCompleted, } from '../../stateManagement/annotation/helpers/state';\nimport { LivewireScissors } from '../../utilities/livewire/LivewireScissors';\nimport { LivewirePath } from '../../utilities/livewire/LiveWirePath';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport ContourSegmentationBaseTool from '../base/ContourSegmentationBaseTool';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { getCalibratedLengthUnitsAndScale, throttle } from '../../utilities';\nconst CLICK_CLOSE_CURVE_SQR_DIST = 10 ** 2;\nclass LivewireContourTool extends ContourSegmentationBaseTool {\n    static { this.toolName = 'LivewireContour'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            getTextLines: defaultGetTextLines,\n            calculateStats: true,\n            preventHandleOutsideImage: false,\n            contourHoleAdditionModifierKey: KeyboardBindings.Shift,\n            snapHandleNearby: 2,\n            interpolation: {\n                enabled: false,\n                nearestEdge: 2,\n                showInterpolationPolyline: false,\n            },\n            decimate: {\n                enabled: false,\n                epsilon: 0.1,\n            },\n            actions: {\n                cancelInProgress: {\n                    method: 'cancelInProgress',\n                    bindings: [\n                        {\n                            key: 'Escape',\n                        },\n                    ],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const proximitySquared = proximity * proximity;\n            const canvasPoints = annotation.data.contour.polyline.map((p) => viewport.worldToCanvas(p));\n            let startPoint = canvasPoints[canvasPoints.length - 1];\n            for (let i = 0; i < canvasPoints.length; i++) {\n                const endPoint = canvasPoints[i];\n                const distanceToPointSquared = math.lineSegment.distanceToPointSquared(startPoint, endPoint, canvasCoords);\n                if (distanceToPointSquared <= proximitySquared) {\n                    return true;\n                }\n                startPoint = endPoint;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                handleIndex = points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt, clearAnnotation = false) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, contourHoleProcessingEnabled, } = this.editData;\n            const { data } = annotation;\n            this.doneEditMemo();\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            if ((this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) ||\n                clearAnnotation) {\n                removeAnnotation(annotation.annotationUID);\n                this.clearEditData();\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                return;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            const changeType = newAnnotation\n                ? ChangeTypes.Completed\n                : ChangeTypes.HandlesUpdated;\n            this.triggerChangeEvent(annotation, enabledElement, changeType, contourHoleProcessingEnabled);\n            this.clearEditData();\n        };\n        this.triggerChangeEvent = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated, contourHoleProcessingEnabled = false) => {\n            if (changeType === ChangeTypes.Completed) {\n                triggerContourAnnotationCompleted(annotation, contourHoleProcessingEnabled);\n            }\n            else {\n                triggerAnnotationModified(annotation, enabledElement.viewport.element, changeType);\n            }\n        };\n        this._mouseDownCallback = (evt) => {\n            const doubleClick = evt.type === Events.MOUSE_DOUBLE_CLICK;\n            const { annotation, viewportIdsToRender, worldToSlice, sliceToWorld, newAnnotation, } = this.editData;\n            if (this.editData.closed) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const { canvas: canvasPos, world: worldPosOriginal } = currentPoints;\n            let worldPos = worldPosOriginal;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            const controlPoints = this.editData.currentPath.getControlPoints();\n            let closePath = controlPoints.length >= 2 && doubleClick;\n            this.doneEditMemo();\n            this.createMemo(element, annotation, {\n                newAnnotation: newAnnotation && controlPoints.length === 1,\n            });\n            if (controlPoints.length >= 2) {\n                const closestHandlePoint = {\n                    index: -1,\n                    distSquared: Infinity,\n                };\n                for (let i = 0, len = controlPoints.length; i < len; i++) {\n                    const controlPoint = controlPoints[i];\n                    const worldControlPoint = sliceToWorld(controlPoint);\n                    const canvasControlPoint = viewport.worldToCanvas(worldControlPoint);\n                    const distSquared = math.point.distanceToPointSquared(canvasPos, canvasControlPoint);\n                    if (distSquared <= CLICK_CLOSE_CURVE_SQR_DIST &&\n                        distSquared < closestHandlePoint.distSquared) {\n                        closestHandlePoint.distSquared = distSquared;\n                        closestHandlePoint.index = i;\n                    }\n                }\n                if (closestHandlePoint.index === 0) {\n                    closePath = true;\n                }\n            }\n            const { snapHandleNearby } = this.configuration;\n            if (snapHandleNearby && !this.editData.closed) {\n                const currentPath = new LivewirePath();\n                const snapPoint = this.scissors.findMinNearby(worldToSlice(worldPosOriginal), 1);\n                const pathPoints = this.scissors.findPathToPoint(snapPoint);\n                currentPath.addPoints(pathPoints);\n                currentPath.prependPath(this.editData.confirmedPath);\n                worldPos = sliceToWorld(snapPoint);\n                this.editData.currentPath = currentPath;\n            }\n            this.editData.closed = this.editData.closed || closePath;\n            this.editData.confirmedPath = this.editData.currentPath;\n            const lastPoint = this.editData.currentPath.getLastPoint();\n            this.editData.confirmedPath.addControlPoint(lastPoint);\n            annotation.data.handles.points.push(sliceToWorld(lastPoint));\n            this.scissors.startSearch(worldToSlice(worldPos));\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (this.editData.closed) {\n                this.updateAnnotation(this.editData.confirmedPath);\n                this._endCallback(evt);\n            }\n            evt.preventDefault();\n        };\n        this._mouseMoveCallback = (evt) => {\n            const { element, currentPoints } = evt.detail;\n            const { world: worldPos, canvas: canvasPos } = currentPoints;\n            const { renderingEngine } = getEnabledElement(element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData.lastCanvasPoint = canvasPos;\n            const { width: imgWidth, height: imgHeight } = this.scissors;\n            const { worldToSlice } = this.editData;\n            const slicePoint = worldToSlice(worldPos);\n            if (slicePoint[0] < 0 ||\n                slicePoint[1] < 0 ||\n                slicePoint[0] >= imgWidth ||\n                slicePoint[1] >= imgHeight) {\n                return;\n            }\n            const pathPoints = this.scissors.findPathToPoint(slicePoint);\n            const currentPath = new LivewirePath();\n            currentPath.addPoints(pathPoints);\n            currentPath.prependPath(this.editData.confirmedPath);\n            this.editData.currentPath = currentPath;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, movingTextBox, handleIndex, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                console.warn('Drag annotation not implemented');\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                this.editHandle(worldPos, element, annotation, handleIndex);\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (!this.isDrawing) {\n                return;\n            }\n            this.isDrawing = false;\n            this._deactivateDraw(element);\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            if (newAnnotation) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            this.scissors = null;\n            return annotation.annotationUID;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.addEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.removeEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._calculateCachedStats = (annotation, element) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            if (!data.contour.closed) {\n                return;\n            }\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            const { cachedStats } = data;\n            const { polyline: points } = data.contour;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { metadata } = image;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const canvasPoint = canvasCoordinates[0];\n                const originalWorldPoint = viewport.canvasToWorld(canvasPoint);\n                const deltaXPoint = viewport.canvasToWorld([\n                    canvasPoint[0] + 1,\n                    canvasPoint[1],\n                ]);\n                const deltaYPoint = viewport.canvasToWorld([\n                    canvasPoint[0],\n                    canvasPoint[1] + 1,\n                ]);\n                const deltaInX = vec3.distance(originalWorldPoint, deltaXPoint);\n                const deltaInY = vec3.distance(originalWorldPoint, deltaYPoint);\n                const { imageData } = image;\n                const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, () => {\n                    const { maxX: canvasMaxX, maxY: canvasMaxY, minX: canvasMinX, minY: canvasMinY, } = math.polyline.getAABB(canvasCoordinates);\n                    const topLeftBBWorld = viewport.canvasToWorld([\n                        canvasMinX,\n                        canvasMinY,\n                    ]);\n                    const topLeftBBIndex = utilities.transformWorldToIndex(imageData, topLeftBBWorld);\n                    const bottomRightBBWorld = viewport.canvasToWorld([\n                        canvasMaxX,\n                        canvasMaxY,\n                    ]);\n                    const bottomRightBBIndex = utilities.transformWorldToIndex(imageData, bottomRightBBWorld);\n                    return [topLeftBBIndex, bottomRightBBIndex];\n                });\n                let area = math.polyline.getArea(canvasCoordinates) / scale / scale;\n                area *= deltaInX * deltaInY;\n                cachedStats[targetId] = {\n                    Modality: metadata.Modality,\n                    area,\n                    areaUnit: areaUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                this.triggerAnnotationModified(annotation, enabledElement, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._renderStats = (annotation, viewport, svgDrawingHelper, textboxStyle) => {\n            const data = annotation.data;\n            const targetId = this.getTargetId(viewport);\n            if (!data.contour.closed || !textboxStyle.visibility) {\n                return;\n            }\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (!textLines || textLines.length === 0) {\n                return;\n            }\n            const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));\n            if (!data.handles.textBox.hasMoved) {\n                const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                data.handles.textBox.worldPosition =\n                    viewport.canvasToWorld(canvasTextBoxCoords);\n            }\n            const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n            const textBoxUID = 'textBox';\n            const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotation.annotationUID ?? '', textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, textboxStyle);\n            const { x: left, y: top, width, height } = boundingBox;\n            data.handles.textBox.worldBoundingBox = {\n                topLeft: viewport.canvasToWorld([left, top]),\n                topRight: viewport.canvasToWorld([left + width, top]),\n                bottomLeft: viewport.canvasToWorld([left, top + height]),\n                bottomRight: viewport.canvasToWorld([left + width, top + height]),\n            };\n        };\n        this.triggerAnnotationModified = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated) => {\n            const { viewportId, renderingEngineId } = enabledElement;\n            const eventType = Events.ANNOTATION_MODIFIED;\n            const eventDetail = {\n                annotation,\n                viewportId,\n                renderingEngineId,\n                changeType,\n            };\n            triggerEvent(eventTarget, eventType, eventDetail);\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    setupBaseEditData(worldPos, element, annotation, nextPos, contourHoleProcessingEnabled) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        this.isDrawing = true;\n        const viewportImageData = viewport.getImageData();\n        const { imageData: vtkImageData } = viewportImageData;\n        let worldToSlice;\n        let sliceToWorld;\n        let width;\n        let height;\n        let scalarData;\n        if (!(viewport instanceof VolumeViewport)) {\n            width = viewportImageData.dimensions[0];\n            height = viewportImageData.dimensions[1];\n            worldToSlice = (point) => {\n                const ijkPoint = csUtils.transformWorldToIndex(vtkImageData, point);\n                return [ijkPoint[0], ijkPoint[1]];\n            };\n            sliceToWorld = (point) => csUtils.transformIndexToWorld(vtkImageData, [point[0], point[1], 0]);\n            scalarData = viewportImageData.scalarData;\n        }\n        else if (viewport instanceof VolumeViewport) {\n            const sliceImageData = csUtils.getCurrentVolumeViewportSlice(viewport);\n            const { sliceToIndexMatrix, indexToSliceMatrix } = sliceImageData;\n            worldToSlice = (point) => {\n                const ijkPoint = csUtils.transformWorldToIndex(vtkImageData, point);\n                const slicePoint = vec3.transformMat4([0, 0, 0], ijkPoint, indexToSliceMatrix);\n                return [slicePoint[0], slicePoint[1]];\n            };\n            sliceToWorld = (point) => {\n                const ijkPoint = vec3.transformMat4([0, 0, 0], [point[0], point[1], 0], sliceToIndexMatrix);\n                return csUtils.transformIndexToWorld(vtkImageData, ijkPoint);\n            };\n            scalarData = sliceImageData.scalarData;\n            width = sliceImageData.width;\n            height = sliceImageData.height;\n        }\n        else {\n            throw new Error('Viewport not supported');\n        }\n        scalarData = csUtils.convertToGrayscale(scalarData, width, height);\n        const { voiRange } = viewport.getProperties();\n        const startPos = worldToSlice(worldPos);\n        this.scissors = LivewireScissors.createInstanceFromRawPixelData(scalarData, width, height, voiRange);\n        if (nextPos) {\n            this.scissorsNext = LivewireScissors.createInstanceFromRawPixelData(scalarData, width, height, voiRange);\n            this.scissorsNext.startSearch(worldToSlice(nextPos));\n        }\n        this.scissors.startSearch(startPos);\n        const newAnnotation = !nextPos;\n        const confirmedPath = new LivewirePath();\n        const currentPath = new LivewirePath();\n        const currentPathNext = newAnnotation ? undefined : new LivewirePath();\n        confirmedPath.addPoint(startPos);\n        confirmedPath.addControlPoint(startPos);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        const lastCanvasPoint = viewport.worldToCanvas(worldPos);\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            newAnnotation,\n            hasMoved: false,\n            lastCanvasPoint,\n            confirmedPath,\n            currentPath,\n            confirmedPathNext: currentPathNext,\n            closed: false,\n            handleIndex: this.editData?.handleIndex ?? annotation.handles?.activeHandleIndex,\n            worldToSlice,\n            sliceToWorld,\n            contourHoleProcessingEnabled,\n        };\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const { world: worldPos } = currentPoints;\n        const annotation = this.createAnnotation(evt);\n        const contourHoleProcessingEnabled = getMouseModifierKey(evt.detail.event) ===\n            this.configuration.contourHoleAdditionModifierKey;\n        this.setupBaseEditData(worldPos, element, annotation, undefined, contourHoleProcessingEnabled);\n        this.addAnnotation(annotation, element);\n        this._activateDraw(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(this.editData.viewportIdsToRender);\n        return annotation;\n    }\n    clearEditData() {\n        this.editData = null;\n        this.scissors = null;\n        this.scissorsNext = null;\n        this.isDrawing = false;\n    }\n    editHandle(worldPos, element, annotation, handleIndex) {\n        const { data } = annotation;\n        const { points: handlePoints } = data.handles;\n        const { length: numHandles } = handlePoints;\n        const previousHandle = handlePoints[(handleIndex - 1 + numHandles) % numHandles];\n        const nextHandle = handlePoints[(handleIndex + 1) % numHandles];\n        if (!this.editData?.confirmedPathNext) {\n            this.setupBaseEditData(previousHandle, element, annotation, nextHandle);\n            const { polyline } = data.contour;\n            const confirmedPath = new LivewirePath();\n            const confirmedPathNext = new LivewirePath();\n            const { worldToSlice } = this.editData;\n            const previousIndex = findHandlePolylineIndex(annotation, handleIndex - 1);\n            const nextIndex = findHandlePolylineIndex(annotation, handleIndex + 1);\n            if (nextIndex === -1 || previousIndex === -1) {\n                throw new Error(`Can't find handle index ${nextIndex === -1 && nextHandle} ${previousIndex === -1 && previousHandle}`);\n            }\n            if (handleIndex === 0) {\n                confirmedPathNext.addPoints(polyline.slice(nextIndex + 1, previousIndex).map(worldToSlice));\n            }\n            else {\n                confirmedPath.addPoints(polyline.slice(0, previousIndex + 1).map(worldToSlice));\n                confirmedPathNext.addPoints(polyline.slice(nextIndex, polyline.length).map(worldToSlice));\n            }\n            this.editData.confirmedPath = confirmedPath;\n            this.editData.confirmedPathNext = confirmedPathNext;\n        }\n        const { editData, scissors } = this;\n        const { worldToSlice, sliceToWorld } = editData;\n        const { activeHandleIndex } = data.handles;\n        if (activeHandleIndex === null || activeHandleIndex === undefined) {\n            data.handles.activeHandleIndex = handleIndex;\n        }\n        else if (activeHandleIndex !== handleIndex) {\n            throw new Error(`Trying to edit a different handle than the one currently being edited ${handleIndex}!==${data.handles.activeHandleIndex}`);\n        }\n        const slicePos = worldToSlice(worldPos);\n        if (slicePos[0] < 0 ||\n            slicePos[0] >= scissors.width ||\n            slicePos[1] < 0 ||\n            slicePos[1] >= scissors.height) {\n            return;\n        }\n        handlePoints[handleIndex] = sliceToWorld(slicePos);\n        const pathPointsLeft = scissors.findPathToPoint(slicePos);\n        const pathPointsRight = this.scissorsNext.findPathToPoint(slicePos);\n        const currentPath = new LivewirePath();\n        currentPath.prependPath(editData.confirmedPath);\n        if (handleIndex !== 0) {\n            currentPath.addPoints(pathPointsLeft);\n        }\n        currentPath.addPoints(pathPointsRight.reverse());\n        currentPath.appendPath(editData.confirmedPathNext);\n        if (handleIndex === 0) {\n            currentPath.addPoints(pathPointsLeft);\n        }\n        editData.currentPath = currentPath;\n        annotation.invalidated = true;\n        editData.hasMoved = true;\n        editData.closed = true;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        this.updateAnnotation(this.editData?.currentPath);\n        return super.renderAnnotation(enabledElement, svgDrawingHelper);\n    }\n    isContourSegmentationTool() {\n        return false;\n    }\n    createAnnotation(evt) {\n        const contourSegmentationAnnotation = super.createAnnotation(evt);\n        const { world: worldPos } = evt.detail.currentPoints;\n        const annotation = csUtils.deepMerge(contourSegmentationAnnotation, {\n            data: {\n                handles: {\n                    points: [[...worldPos]],\n                },\n            },\n        });\n        return annotation;\n    }\n    cancelInProgress(element, config, evt) {\n        if (!this.editData) {\n            this.undo();\n            return;\n        }\n        this._endCallback(evt, true);\n    }\n    renderAnnotationInstance(renderContext) {\n        const { annotation, enabledElement, svgDrawingHelper, annotationStyle, targetId, } = renderContext;\n        const { viewport } = enabledElement;\n        const { element } = viewport;\n        const { worldToCanvas } = viewport;\n        const { annotationUID, data, highlighted } = annotation;\n        const { handles } = data;\n        const newAnnotation = this.editData?.newAnnotation;\n        const { lineWidth, lineDash, color } = annotationStyle;\n        if (highlighted ||\n            (newAnnotation &&\n                annotation.annotationUID === this.editData?.annotation?.annotationUID)) {\n            const handleGroupUID = '0';\n            const canvasHandles = handles.points.map(worldToCanvas);\n            drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasHandles, {\n                color,\n                lineDash,\n                lineWidth,\n            });\n        }\n        super.renderAnnotationInstance(renderContext);\n        if (!data.cachedStats[targetId] ||\n            data.cachedStats[targetId]?.areaUnit === null) {\n            data.cachedStats[targetId] = {\n                Modality: null,\n                area: null,\n                areaUnit: null,\n            };\n            this._calculateCachedStats(annotation, element);\n        }\n        else if (annotation.invalidated) {\n            this._throttledCalculateCachedStats(annotation, element);\n        }\n        this._renderStats(annotation, viewport, svgDrawingHelper, annotationStyle.textbox);\n        return true;\n    }\n    updateAnnotation(livewirePath) {\n        if (!this.editData || !livewirePath) {\n            return;\n        }\n        const { annotation, sliceToWorld, worldToSlice, closed, newAnnotation } = this.editData;\n        let { pointArray: imagePoints } = livewirePath;\n        if (imagePoints.length > 1) {\n            imagePoints = [...imagePoints, imagePoints[0]];\n        }\n        const targetWindingDirection = newAnnotation && closed ? ContourWindingDirection.Clockwise : undefined;\n        this.updateContourPolyline(annotation, {\n            points: imagePoints,\n            closed,\n            targetWindingDirection,\n        }, {\n            canvasToWorld: sliceToWorld,\n            worldToCanvas: worldToSlice,\n        });\n    }\n}\nexport default LivewireContourTool;\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, areaUnit } = cachedVolumeStats;\n    const textLines = [];\n    if (area) {\n        const areaLine = `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    return textLines;\n}\n","import { vec2, vec3 } from 'gl-matrix';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { getCalibratedProbeUnitsAndValue } from '../../utilities/getCalibratedUnits';\nimport { drawHandles as drawHandlesSvg, drawTextBox as drawTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nconst { transformWorldToIndex } = csUtils;\nclass ProbeTool extends AnnotationTool {\n    static { this.toolName = 'Probe'; }\n    static { this.probeDefaults = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            handleRadius: '6',\n            textCanvasOffset: {\n                x: 6,\n                y: -6,\n            },\n        },\n    }; }\n    constructor(toolProps = {}, defaultToolProps) {\n        super(toolProps, AnnotationTool.mergeDefaultProps(ProbeTool.probeDefaults, defaultToolProps));\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const annotation = (this.constructor).createAnnotationForViewport(viewport, {\n                data: {\n                    handles: { points: [[...worldPos]] },\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                newAnnotation: true,\n                viewportIdsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { viewportId, renderingEngine } = getEnabledElement(element);\n            this.eventDispatchDetail = {\n                viewportId,\n                renderingEngineId: renderingEngine.id,\n            };\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            if (newAnnotation) {\n                this.createMemo(element, annotation, { newAnnotation });\n            }\n            this.editData = null;\n            this.isDrawing = false;\n            this.doneEditMemo();\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            data.handles.points[0] = [...worldPos];\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const annotationUID = annotation.annotationUID;\n                const data = annotation.data;\n                const point = data.handles.points[0];\n                const canvasCoordinates = viewport.worldToCanvas(point);\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                if (!data.cachedStats) {\n                    data.cachedStats = {};\n                }\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].value === null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        index: null,\n                        value: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement, ChangeTypes.StatsUpdated);\n                }\n                else if (annotation.invalidated) {\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                const handleGroupUID = '0';\n                drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, [canvasCoordinates], { color, lineWidth, handleRadius: this.configuration.handleRadius });\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (textLines) {\n                    const textCanvasCoordinates = [\n                        canvasCoordinates[0] + this.configuration.textCanvasOffset.x,\n                        canvasCoordinates[1] + this.configuration.textCanvasOffset.y,\n                    ];\n                    const textUID = '0';\n                    drawTextBoxSvg(svgDrawingHelper, annotationUID, textUID, textLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], options);\n                }\n            }\n            return renderStatus;\n        };\n    }\n    isPointNearTool(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { data } = annotation;\n        const point = data.handles.points[0];\n        const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n        return vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity;\n    }\n    toolSelectedCallback() { }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, viewUp, instance, viewport, } = this.hydrateBase(ProbeTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    getHandleNearImagePoint(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { data } = annotation;\n        const point = data.handles.points[0];\n        const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n        const near = vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity;\n        if (near === true) {\n            return point;\n        }\n    }\n    handleSelectedCallback(evt, annotation) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        annotation.highlighted = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement, changeType = ChangeTypes.StatsUpdated) {\n        const data = annotation.data;\n        const { renderingEngineId, viewport } = enabledElement;\n        const { element } = viewport;\n        const worldPos = data.handles.points[0];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const pixelUnitsOptions = {\n                isPreScaled: isViewportPreScaled(viewport, targetId),\n                isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n            };\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { dimensions, imageData, metadata, voxelManager } = image;\n            const modality = metadata.Modality;\n            let ijk = transformWorldToIndex(imageData, worldPos);\n            ijk = vec3.round(ijk, ijk);\n            if (csUtils.indexWithinDimensions(ijk, dimensions)) {\n                this.isHandleOutsideImage = false;\n                let value = voxelManager.getAtIJKPoint(ijk);\n                if (targetId.startsWith('imageId:')) {\n                    const imageId = targetId.split('imageId:')[1];\n                    const imageURI = csUtils.imageIdToURI(imageId);\n                    const viewports = csUtils.getViewportsWithImageURI(imageURI);\n                    const viewport = viewports[0];\n                    ijk[2] = viewport.getCurrentImageIdIndex();\n                }\n                let modalityUnit;\n                if (modality === 'US') {\n                    const calibratedResults = getCalibratedProbeUnitsAndValue(image, [\n                        ijk,\n                    ]);\n                    const hasEnhancedRegionValues = calibratedResults.values.every((value) => value !== null);\n                    value = (hasEnhancedRegionValues ? calibratedResults.values : value);\n                    modalityUnit = hasEnhancedRegionValues\n                        ? calibratedResults.units\n                        : 'raw';\n                }\n                else {\n                    modalityUnit = getPixelValueUnits(modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                }\n                cachedStats[targetId] = {\n                    index: ijk,\n                    value,\n                    Modality: modality,\n                    modalityUnit,\n                };\n                annotation.invalidated = true;\n            }\n            else {\n                this.isHandleOutsideImage = true;\n                cachedStats[targetId] = {\n                    index: ijk,\n                    Modality: modality,\n                };\n            }\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, changeType);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { index, value, modalityUnit } = cachedVolumeStats;\n    if (value === undefined || !index) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`(${index[0]}, ${index[1]}, ${index[2]})`);\n    if (value instanceof Array && modalityUnit instanceof Array) {\n        for (let i = 0; i < value.length; i++) {\n            textLines.push(`${csUtils.roundNumber(value[i])} ${modalityUnit[i]}`);\n        }\n    }\n    else {\n        textLines.push(`${csUtils.roundNumber(value)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nexport default ProbeTool;\n","import { cache, utilities as csUtils, getEnabledElement, } from '@cornerstonejs/core';\nimport { growCut } from '../../utilities/segmentation';\nimport GrowCutBaseTool from '../base/GrowCutBaseTool';\nimport { calculateGrowCutSeeds } from '../../utilities/segmentation/growCut/runOneClickGrowCut';\nimport { ToolModes } from '../../enums';\nclass RegionSegmentPlusTool extends GrowCutBaseTool {\n    static { this.toolName = 'RegionSegmentPlus'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            isPartialVolume: false,\n            positiveSeedVariance: 0.4,\n            negativeSeedVariance: 0.9,\n            subVolumePaddingPercentage: 0.1,\n            islandRemoval: {\n                enabled: false,\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseTimer = null;\n        this.allowedToProceed = false;\n    }\n    mouseMoveCallback(evt) {\n        if (this.mode !== ToolModes.Active) {\n            return;\n        }\n        const eventData = evt.detail;\n        const { currentPoints, element } = eventData;\n        const { world: worldPoint } = currentPoints;\n        element.style.cursor = 'default';\n        if (this.mouseTimer !== null) {\n            window.clearTimeout(this.mouseTimer);\n            this.mouseTimer = null;\n        }\n        this.mouseTimer = window.setTimeout(() => {\n            this.onMouseStable(evt, worldPoint, element);\n        }, this.configuration.mouseStabilityDelay || 500);\n    }\n    async onMouseStable(evt, worldPoint, element) {\n        await super.preMouseDownCallback(evt);\n        const refVolume = cache.getVolume(this.growCutData.segmentation.referencedVolumeId);\n        const seeds = calculateGrowCutSeeds(refVolume, worldPoint, {}) || {\n            positiveSeedIndices: new Set(),\n            negativeSeedIndices: new Set(),\n        };\n        const { positiveSeedIndices, negativeSeedIndices } = seeds;\n        let cursor;\n        if (positiveSeedIndices.size / negativeSeedIndices.size > 20 ||\n            negativeSeedIndices.size < 30) {\n            cursor = 'not-allowed';\n            this.allowedToProceed = false;\n        }\n        else {\n            cursor = 'copy';\n            this.allowedToProceed = true;\n        }\n        const enabledElement = getEnabledElement(element);\n        if (element) {\n            element.style.cursor = cursor;\n            requestAnimationFrame(() => {\n                if (element.style.cursor !== cursor) {\n                    element.style.cursor = cursor;\n                }\n            });\n        }\n        if (this.allowedToProceed) {\n            this.seeds = seeds;\n        }\n        if (enabledElement && enabledElement.viewport) {\n            enabledElement.viewport.render();\n        }\n    }\n    async preMouseDownCallback(evt) {\n        if (!this.allowedToProceed) {\n            return false;\n        }\n        const eventData = evt.detail;\n        const { currentPoints, element } = eventData;\n        const enabledElement = getEnabledElement(element);\n        if (enabledElement) {\n            element.style.cursor = 'wait';\n            requestAnimationFrame(() => {\n                if (element.style.cursor !== 'wait') {\n                    element.style.cursor = 'wait';\n                }\n            });\n        }\n        const { world: worldPoint } = currentPoints;\n        await super.preMouseDownCallback(evt);\n        this.growCutData = csUtils.deepMerge(this.growCutData, {\n            worldPoint,\n            islandRemoval: {\n                worldIslandPoints: [worldPoint],\n            },\n        });\n        this.growCutData.worldPoint = worldPoint;\n        this.growCutData.islandRemoval = {\n            worldIslandPoints: [worldPoint],\n        };\n        await this.runGrowCut();\n        if (element) {\n            element.style.cursor = 'default';\n        }\n        return true;\n    }\n    getRemoveIslandData(growCutData) {\n        const { worldPoint } = growCutData;\n        return {\n            worldIslandPoints: [worldPoint],\n        };\n    }\n    async getGrowCutLabelmap(growCutData) {\n        const { segmentation: { referencedVolumeId }, worldPoint, options, } = growCutData;\n        const { subVolumePaddingPercentage } = this.configuration;\n        const mergedOptions = {\n            ...options,\n            subVolumePaddingPercentage,\n            seeds: this.seeds,\n        };\n        return growCut.runOneClickGrowCut({\n            referencedVolumeId,\n            worldPosition: worldPoint,\n            options: mergedOptions,\n        });\n    }\n}\nexport default RegionSegmentPlusTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, getRenderingEngine, } from '@cornerstonejs/core';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { Events } from '../../enums';\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { growCut } from '../../utilities/segmentation';\nimport GrowCutBaseTool from '../base/GrowCutBaseTool';\nclass RegionSegmentTool extends GrowCutBaseTool {\n    static { this.toolName = 'RegionSegment'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            isPartialVolume: true,\n            positiveSeedVariance: 0.5,\n            negativeSeedVariance: 0.9,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const { world: currentWorldPoint } = currentPoints;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.growCutData.circleBorderPoint = currentWorldPoint;\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._endCallback = async (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.runGrowCut();\n            this._deactivateDraw(element);\n            this.growCutData = null;\n            resetElementCursor(element);\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n    }\n    async preMouseDownCallback(evt) {\n        const eventData = evt.detail;\n        const { element, currentPoints } = eventData;\n        const { world: worldPoint } = currentPoints;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        await super.preMouseDownCallback(evt);\n        Object.assign(this.growCutData, {\n            circleCenterPoint: worldPoint,\n            circleBorderPoint: worldPoint,\n        });\n        this._activateDraw(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        return true;\n    }\n    async getGrowCutLabelmap(growCutData) {\n        const { segmentation: { referencedVolumeId }, renderingEngineId, viewportId, circleCenterPoint, circleBorderPoint, options, } = growCutData;\n        const renderingEngine = getRenderingEngine(renderingEngineId);\n        const viewport = renderingEngine.getViewport(viewportId);\n        const worldCircleRadius = vec3.len(vec3.sub(vec3.create(), circleCenterPoint, circleBorderPoint));\n        const sphereInfo = {\n            center: circleCenterPoint,\n            radius: worldCircleRadius,\n        };\n        return growCut.runGrowCutForSphere(referencedVolumeId, sphereInfo, viewport, options);\n    }\n    _activateDraw(element) {\n        element.addEventListener(Events.MOUSE_UP, this._endCallback);\n        element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n        element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this.growCutData) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const { segmentation: segmentationData, circleCenterPoint, circleBorderPoint, } = this.growCutData;\n        const canvasCenterPoint = viewport.worldToCanvas(circleCenterPoint);\n        const canvasBorderPoint = viewport.worldToCanvas(circleBorderPoint);\n        const vecCenterToBorder = vec2.sub(vec2.create(), canvasBorderPoint, canvasCenterPoint);\n        const circleRadius = vec2.len(vecCenterToBorder);\n        if (csUtils.isEqual(circleRadius, 0)) {\n            return;\n        }\n        const annotationUID = 'growcut';\n        const circleUID = '0';\n        const { color } = this.getSegmentStyle({\n            segmentationId: segmentationData.segmentationId,\n            segmentIndex: segmentationData.segmentIndex,\n            viewportId: viewport.id,\n        });\n        drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, canvasCenterPoint, circleRadius, {\n            color,\n        });\n    }\n}\nexport default RegionSegmentTool;\n","import { eventTarget, utilities } from '@cornerstonejs/core';\nimport SplineROITool from './SplineROITool';\nimport { Events } from '../../enums';\nimport { convertContourSegmentationAnnotation } from '../../utilities/contourSegmentation';\nclass SplineContourSegmentationTool extends SplineROITool {\n    static { this.toolName = 'SplineContourSegmentationTool'; }\n    constructor(toolProps) {\n        const initialProps = utilities.deepMerge({\n            configuration: {\n                calculateStats: false,\n            },\n        }, toolProps);\n        super(initialProps);\n        this.annotationCutMergeCompletedBinded =\n            this.annotationCutMergeCompleted.bind(this);\n    }\n    isContourSegmentationTool() {\n        return true;\n    }\n    initializeListeners() {\n        eventTarget.addEventListener(Events.ANNOTATION_CUT_MERGE_PROCESS_COMPLETED, this.annotationCutMergeCompletedBinded);\n    }\n    removeListeners() {\n        eventTarget.removeEventListener(Events.ANNOTATION_CUT_MERGE_PROCESS_COMPLETED, this.annotationCutMergeCompletedBinded);\n    }\n    annotationCutMergeCompleted(evt) {\n        const { sourceAnnotation: annotation } = evt.detail;\n        if (this.toolName !== annotation?.metadata?.toolName ||\n            !this.splineToolNames.includes(annotation?.metadata?.toolName) ||\n            !this.configuration.simplifiedSpline) {\n            return;\n        }\n        convertContourSegmentationAnnotation(annotation);\n    }\n}\nexport default SplineContourSegmentationTool;\n","import { getEnabledElement, eventTarget, triggerEvent, utilities, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { addAnnotation, getChildAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { drawHandles as drawHandlesSvg, drawPolyline as drawPolylineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events, MouseBindings, KeyboardBindings, ChangeTypes, } from '../../enums';\nimport { resetElementCursor } from '../../cursors/elementCursor';\nimport * as math from '../../utilities/math';\nimport throttle from '../../utilities/throttle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport getMouseModifierKey from '../../eventDispatchers/shared/getMouseModifier';\nimport { ContourWindingDirection } from '../../types/ContourAnnotation';\nimport { CardinalSpline } from './splines/CardinalSpline';\nimport { LinearSpline } from './splines/LinearSpline';\nimport { CatmullRomSpline } from './splines/CatmullRomSpline';\nimport { BSpline } from './splines/BSpline';\nimport ContourSegmentationBaseTool from '../base/ContourSegmentationBaseTool';\nimport { triggerAnnotationRenderForViewportIds } from '../../utilities';\nimport { convertContourSegmentationAnnotation } from '../../utilities/contourSegmentation';\nconst SPLINE_MIN_POINTS = 3;\nconst SPLINE_CLICK_CLOSE_CURVE_DIST = 10;\nconst DEFAULT_SPLINE_CONFIG = {\n    resolution: 20,\n    controlPointAdditionDistance: 6,\n    controlPointDeletionDistance: 6,\n    showControlPointsConnectors: false,\n    controlPointAdditionEnabled: true,\n    controlPointDeletionEnabled: true,\n};\nvar SplineTypesEnum;\n(function (SplineTypesEnum) {\n    SplineTypesEnum[\"Cardinal\"] = \"CARDINAL\";\n    SplineTypesEnum[\"Linear\"] = \"LINEAR\";\n    SplineTypesEnum[\"CatmullRom\"] = \"CATMULLROM\";\n    SplineTypesEnum[\"BSpline\"] = \"BSPLINE\";\n})(SplineTypesEnum || (SplineTypesEnum = {}));\nvar SplineToolActions;\n(function (SplineToolActions) {\n    SplineToolActions[\"AddControlPoint\"] = \"addControlPoint\";\n    SplineToolActions[\"DeleteControlPoint\"] = \"deleteControlPoint\";\n})(SplineToolActions || (SplineToolActions = {}));\nconst splineToolNames = [\n    'CatmullRomSplineROI',\n    'LinearSplineROI',\n    'BSplineROI',\n    'CardinalSplineROI',\n];\nclass SplineROITool extends ContourSegmentationBaseTool {\n    static { this.toolName = 'SplineROI'; }\n    static { this.SplineTypes = SplineTypesEnum; }\n    static { this.Actions = SplineToolActions; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            calculateStats: true,\n            simplifiedSpline: false,\n            getTextLines: defaultGetTextLines,\n            contourHoleAdditionModifierKey: KeyboardBindings.Shift,\n            decimate: {\n                enabled: false,\n                epsilon: 0.1,\n            },\n            spline: {\n                configuration: {\n                    [SplineTypesEnum.Cardinal]: {\n                        Class: CardinalSpline,\n                        scale: 0.5,\n                    },\n                    [SplineTypesEnum.CatmullRom]: {\n                        Class: CatmullRomSpline,\n                    },\n                    [SplineTypesEnum.Linear]: {\n                        Class: LinearSpline,\n                    },\n                    [SplineTypesEnum.BSpline]: {\n                        Class: BSpline,\n                        controlPointAdditionEnabled: false,\n                        controlPointDeletionEnabled: false,\n                        showControlPointsConnectors: true,\n                    },\n                },\n                type: SplineTypesEnum.CatmullRom,\n                drawPreviewEnabled: true,\n                enableTwoPointPreview: false,\n                lastControlPointDeletionKeys: ['Backspace', 'Delete'],\n            },\n            actions: {\n                [SplineToolActions.AddControlPoint]: {\n                    method: 'addControlPointCallback',\n                    bindings: [\n                        {\n                            mouseButton: MouseBindings.Primary,\n                            modifierKey: KeyboardBindings.Shift,\n                        },\n                    ],\n                },\n                [SplineToolActions.DeleteControlPoint]: {\n                    method: 'deleteControlPointCallback',\n                    bindings: [\n                        {\n                            mouseButton: MouseBindings.Primary,\n                            modifierKey: KeyboardBindings.Ctrl,\n                        },\n                    ],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.splineToolNames = [\n            'CatmullRomSplineROI',\n            'LinearSplineROI',\n            'BSplineROI',\n            'CardinalSplineROI',\n        ];\n        this.isHandleOutsideImage = false;\n        this.fireChangeOnUpdate = null;\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const { instance: spline } = annotation.data.spline;\n            return spline.isPointNearCurve(canvasCoords, proximity);\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                handleIndex = points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, contourHoleProcessingEnabled, } = this.editData;\n            const { data } = annotation;\n            annotation.autoGenerated = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const image = this.getTargetImageData(this.getTargetId(enabledElement.viewport));\n            const { imageData, dimensions } = image;\n            this.isHandleOutsideImage = data.handles.points\n                .map((p) => utilities.transformWorldToIndex(imageData, p))\n                .some((index) => !utilities.indexWithinDimensions(index, dimensions));\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            const changeType = newAnnotation\n                ? ChangeTypes.Completed\n                : ChangeTypes.HandlesUpdated;\n            if (!this.fireChangeOnUpdate) {\n                this.fireChangeOnUpdate = {\n                    annotationUID: annotation.annotationUID,\n                    changeType,\n                    contourHoleProcessingEnabled,\n                };\n            }\n            else {\n                this.fireChangeOnUpdate.annotationUID = annotation.annotationUID;\n                this.fireChangeOnUpdate.changeType = changeType;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._keyDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const key = eventDetail.key ?? '';\n            const { lastControlPointDeletionKeys } = this.configuration.spline;\n            const deleteLastPoint = lastControlPointDeletionKeys.includes(key);\n            if (!deleteLastPoint) {\n                return;\n            }\n            const { annotation } = this.editData;\n            const { data } = annotation;\n            if (data.handles.points.length === SPLINE_MIN_POINTS) {\n                this.cancel(element);\n                return;\n            }\n            else {\n                const controlPointIndex = data.handles.points.length - 1;\n                this._deleteControlPointByIndex(element, annotation, controlPointIndex);\n            }\n            evt.preventDefault();\n        };\n        this._mouseMoveCallback = (evt) => {\n            const { drawPreviewEnabled } = this.configuration.spline;\n            if (!drawPreviewEnabled) {\n                return;\n            }\n            const { element } = evt.detail;\n            const { renderingEngine } = getEnabledElement(element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData.lastCanvasPoint = evt.detail.currentPoints.canvas;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._mouseDownCallback = (evt) => {\n            const doubleClick = evt.type === Events.MOUSE_DOUBLE_CLICK;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            if (data.contour.closed) {\n                return;\n            }\n            this.doneEditMemo();\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const { canvas: canvasPoint, world: worldPoint } = currentPoints;\n            let closeContour = data.handles.points.length >= 2 && doubleClick;\n            let addNewPoint = true;\n            if (data.handles.points.length) {\n                this.createMemo(element, annotation, {\n                    newAnnotation: data.handles.points.length === 1,\n                });\n            }\n            if (data.handles.points.length >= 3) {\n                this.createMemo(element, annotation);\n                const { instance: spline } = data.spline;\n                const closestControlPoint = spline.getClosestControlPointWithinDistance(canvasPoint, SPLINE_CLICK_CLOSE_CURVE_DIST);\n                if (closestControlPoint?.index === 0) {\n                    addNewPoint = false;\n                    closeContour = true;\n                }\n            }\n            if (addNewPoint) {\n                data.handles.points.push(worldPoint);\n            }\n            data.contour.closed = data.contour.closed || closeContour;\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (data.contour.closed) {\n                this._endCallback(evt);\n            }\n            evt.preventDefault();\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                this.moveAnnotation(annotation, worldPosDelta);\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.triggerAnnotationCompleted = (annotation, contourHoleProcessingEnabled) => {\n            const eventType = Events.ANNOTATION_COMPLETED;\n            const eventDetail = {\n                annotation,\n                changeType: ChangeTypes.Completed,\n                contourHoleProcessingEnabled,\n            };\n            triggerEvent(eventTarget, eventType, eventDetail);\n        };\n        this.triggerAnnotationModified = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated) => {\n            const { viewportId, renderingEngineId } = enabledElement;\n            const eventType = Events.ANNOTATION_MODIFIED;\n            const eventDetail = {\n                annotation,\n                viewportId,\n                renderingEngineId,\n                changeType,\n            };\n            triggerEvent(eventTarget, eventType, eventDetail);\n        };\n        this.triggerChangeEvent = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated, contourHoleProcessingEnabled) => {\n            if (changeType === ChangeTypes.Completed) {\n                this.triggerAnnotationCompleted(annotation, contourHoleProcessingEnabled);\n            }\n            else {\n                this.triggerAnnotationModified(annotation, enabledElement, changeType);\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.KEY_DOWN, this._keyDownCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.addEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.KEY_DOWN, this._keyDownCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.removeEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._renderStats = (annotation, viewport, svgDrawingHelper, textboxStyle) => {\n            const data = annotation.data;\n            const targetId = this.getTargetId(viewport);\n            if (!data.spline.instance.closed || !textboxStyle.visibility) {\n                return;\n            }\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (!textLines || textLines.length === 0) {\n                return;\n            }\n            const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));\n            if (!data.handles.textBox.hasMoved) {\n                const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                data.handles.textBox.worldPosition =\n                    viewport.canvasToWorld(canvasTextBoxCoords);\n            }\n            const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n            const textBoxUID = 'textBox';\n            const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotation.annotationUID ?? '', textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, textboxStyle);\n            const { x: left, y: top, width, height } = boundingBox;\n            data.handles.textBox.worldBoundingBox = {\n                topLeft: viewport.canvasToWorld([left, top]),\n                topRight: viewport.canvasToWorld([left + width, top]),\n                bottomLeft: viewport.canvasToWorld([left, top + height]),\n                bottomRight: viewport.canvasToWorld([left + width, top + height]),\n            };\n        };\n        this.addControlPointCallback = (evt, annotation) => {\n            const { data } = annotation;\n            const splineType = data.spline.type;\n            const splineConfig = this._getSplineConfig(splineType);\n            const maxDist = splineConfig.controlPointAdditionDistance;\n            if (splineConfig.controlPointAdditionEnabled === false) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { instance: spline } = data.spline;\n            const canvasPos = evt.detail.currentPoints.canvas;\n            const closestPointInfo = spline.getClosestPoint(canvasPos);\n            if (closestPointInfo.distance > maxDist) {\n                return;\n            }\n            const { index, point: canvasPoint } = spline.addControlPointAtU(closestPointInfo.uValue);\n            data.handles.points.splice(index, 0, canvasToWorld(canvasPoint));\n            annotation.invalidated = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.deleteControlPointCallback = (evt, annotation) => {\n            const splineType = annotation.data.spline.type;\n            const splineConfig = this._getSplineConfig(splineType);\n            const maxDist = splineConfig.controlPointDeletionDistance;\n            if (splineConfig.controlPointDeletionEnabled === false) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const { canvas: canvasPos } = currentPoints;\n            const { instance: spline } = annotation.data.spline;\n            const closestControlPoint = spline.getClosestControlPointWithinDistance(canvasPos, maxDist);\n            if (!closestControlPoint) {\n                return;\n            }\n            this._deleteControlPointByIndex(element, annotation, closestControlPoint.index);\n        };\n        this._calculateCachedStats = (annotation, element) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            if (!data.contour.closed) {\n                return;\n            }\n            const enabledElement = getEnabledElement(element);\n            if (!enabledElement) {\n                return;\n            }\n            const { viewport } = enabledElement;\n            const { cachedStats } = data;\n            const { polyline: points } = data.contour;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { metadata } = image;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const canvasPoint = canvasCoordinates[0];\n                const originalWorldPoint = viewport.canvasToWorld(canvasPoint);\n                const deltaXPoint = viewport.canvasToWorld([\n                    canvasPoint[0] + 1,\n                    canvasPoint[1],\n                ]);\n                const deltaYPoint = viewport.canvasToWorld([\n                    canvasPoint[0],\n                    canvasPoint[1] + 1,\n                ]);\n                const deltaInX = vec3.distance(originalWorldPoint, deltaXPoint);\n                const deltaInY = vec3.distance(originalWorldPoint, deltaYPoint);\n                const { imageData } = image;\n                const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, () => {\n                    const { maxX: canvasMaxX, maxY: canvasMaxY, minX: canvasMinX, minY: canvasMinY, } = math.polyline.getAABB(canvasCoordinates);\n                    const topLeftBBWorld = viewport.canvasToWorld([\n                        canvasMinX,\n                        canvasMinY,\n                    ]);\n                    const topLeftBBIndex = utilities.transformWorldToIndex(imageData, topLeftBBWorld);\n                    const bottomRightBBWorld = viewport.canvasToWorld([\n                        canvasMaxX,\n                        canvasMaxY,\n                    ]);\n                    const bottomRightBBIndex = utilities.transformWorldToIndex(imageData, bottomRightBBWorld);\n                    return [topLeftBBIndex, bottomRightBBIndex];\n                });\n                let area = math.polyline.getArea(canvasCoordinates) / scale / scale;\n                area *= deltaInX * deltaInY;\n                cachedStats[targetId] = {\n                    Modality: metadata.Modality,\n                    area,\n                    areaUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                this.triggerAnnotationModified(annotation, enabledElement, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n        this.annotationCompletedBinded = this.annotationCompleted.bind(this);\n    }\n    annotationCompleted(evt) {\n        const { sourceAnnotation: annotation } = evt.detail;\n        if (!this.splineToolNames.includes(annotation?.metadata?.toolName) ||\n            !this.configuration.simplifiedSpline ||\n            !this.isContourSegmentationTool()) {\n            return;\n        }\n        convertContourSegmentationAnnotation(annotation);\n    }\n    initializeListeners() {\n        eventTarget.addEventListener(Events.ANNOTATION_COMPLETED, this.annotationCompletedBinded);\n    }\n    removeListeners() {\n        eventTarget.removeEventListener(Events.ANNOTATION_COMPLETED, this.annotationCompletedBinded);\n    }\n    onSetToolEnabled() {\n        this.initializeListeners();\n    }\n    onSetToolActive() {\n        this.initializeListeners();\n    }\n    onSetToolDisabled() {\n        this.removeListeners();\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const { canvas: canvasPos } = currentPoints;\n        const contourHoleProcessingEnabled = getMouseModifierKey(evt.detail.event) ===\n            this.configuration.contourHoleAdditionModifierKey;\n        const annotation = this.createAnnotation(evt);\n        this.isDrawing = true;\n        this.addAnnotation(annotation, element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            movingTextBox: false,\n            newAnnotation: true,\n            hasMoved: false,\n            lastCanvasPoint: canvasPos,\n            contourHoleProcessingEnabled,\n        };\n        this._activateDraw(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        return annotation;\n    }\n    cancel(element) {\n        if (!this.isDrawing) {\n            return;\n        }\n        this.isDrawing = false;\n        this._deactivateDraw(element);\n        this._deactivateModify(element);\n        resetElementCursor(element);\n        const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n        if (newAnnotation) {\n            removeAnnotation(annotation.annotationUID);\n        }\n        super.cancelAnnotation(annotation);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        this.editData = null;\n        return annotation.annotationUID;\n    }\n    isContourSegmentationTool() {\n        return false;\n    }\n    renderAnnotationInstance(renderContext) {\n        const { enabledElement, targetId, svgDrawingHelper, annotationStyle } = renderContext;\n        const { viewport } = enabledElement;\n        const { worldToCanvas } = viewport;\n        const { element } = viewport;\n        const annotation = renderContext.annotation;\n        const { annotationUID, data, highlighted } = annotation;\n        const { handles } = data;\n        const { points: controlPoints, activeHandleIndex } = handles;\n        const newAnnotation = this.editData?.newAnnotation;\n        const { lineWidth, lineDash, color, locked: annotationLocked, } = annotationStyle;\n        const canvasCoordinates = controlPoints.map((p) => worldToCanvas(p));\n        const { drawPreviewEnabled } = this.configuration.spline;\n        const splineType = annotation.data.spline.type;\n        const splineConfig = this._getSplineConfig(splineType);\n        const spline = annotation.data.spline.instance;\n        const childAnnotations = getChildAnnotations(annotation);\n        const missingAnnotation = childAnnotations.findIndex((it) => !it);\n        if (missingAnnotation !== -1) {\n            throw new Error(`Can't find annotation for child ${annotation.childAnnotationUIDs.join()}`);\n        }\n        const splineAnnotationsGroup = [annotation, ...childAnnotations].filter((annotation) => this._isSplineROIAnnotation(annotation));\n        splineAnnotationsGroup.forEach((annotation) => {\n            const spline = this._updateSplineInstance(element, annotation);\n            const splinePolylineCanvas = spline.getPolylinePoints();\n            this.updateContourPolyline(annotation, {\n                points: splinePolylineCanvas,\n                closed: data.contour.closed,\n                targetWindingDirection: ContourWindingDirection.Clockwise,\n            }, viewport, { updateWindingDirection: data.contour.closed });\n        });\n        super.renderAnnotationInstance(renderContext);\n        if (!data.cachedStats[targetId] ||\n            data.cachedStats[targetId].areaUnit == null) {\n            data.cachedStats[targetId] = {\n                Modality: null,\n                area: null,\n                areaUnit: null,\n            };\n            this._calculateCachedStats(annotation, element);\n        }\n        else if (annotation.invalidated) {\n            this._throttledCalculateCachedStats(annotation, element);\n        }\n        let activeHandleCanvasCoords;\n        if (!annotationLocked && !this.editData && activeHandleIndex !== null) {\n            activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n        }\n        if (activeHandleCanvasCoords || newAnnotation || highlighted) {\n            const handleGroupUID = '0';\n            drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                color,\n                lineWidth,\n                handleRadius: '3',\n            });\n        }\n        if (drawPreviewEnabled &&\n            spline.numControlPoints >= 1 &&\n            this.editData?.lastCanvasPoint &&\n            !spline.closed) {\n            const { lastCanvasPoint } = this.editData;\n            const { enableTwoPointPreview } = this.configuration.spline;\n            if (spline.numControlPoints === 1 && enableTwoPointPreview) {\n                const firstPoint = canvasCoordinates[0];\n                const previewPolylinePoints = [firstPoint, lastCanvasPoint];\n                drawPolylineSvg(svgDrawingHelper, annotationUID, 'previewSplineChange', previewPolylinePoints, {\n                    color: '#9EA0CA',\n                    lineDash: lineDash,\n                    lineWidth: 1,\n                });\n            }\n            else if (spline.numControlPoints > 1) {\n                const previewPolylinePoints = spline.getPreviewPolylinePoints(lastCanvasPoint, SPLINE_CLICK_CLOSE_CURVE_DIST);\n                drawPolylineSvg(svgDrawingHelper, annotationUID, 'previewSplineChange', previewPolylinePoints, {\n                    color: '#9EA0CA',\n                    lineDash: lineDash,\n                    lineWidth: 1,\n                });\n            }\n        }\n        if (splineConfig.showControlPointsConnectors) {\n            const controlPointsConnectors = [...canvasCoordinates];\n            if (spline.closed) {\n                controlPointsConnectors.push(canvasCoordinates[0]);\n            }\n            drawPolylineSvg(svgDrawingHelper, annotationUID, 'controlPointsConnectors', controlPointsConnectors, {\n                color: 'rgba(255, 255, 255, 0.5)',\n                lineWidth: 1,\n            });\n        }\n        this._renderStats(annotation, viewport, svgDrawingHelper, annotationStyle.textbox);\n        if (this.fireChangeOnUpdate?.annotationUID === annotationUID) {\n            this.triggerChangeEvent(annotation, enabledElement, this.fireChangeOnUpdate.changeType, this.fireChangeOnUpdate.contourHoleProcessingEnabled);\n            this.fireChangeOnUpdate = null;\n        }\n        annotation.invalidated = false;\n        return true;\n    }\n    createInterpolatedSplineControl(annotation) {\n        if (annotation.data.handles.points?.length) {\n            return;\n        }\n        const { polyline } = annotation.data.contour;\n        if (!polyline || !polyline.length) {\n            return;\n        }\n        annotation.data.handles.points = [];\n        const { points } = annotation.data.handles;\n        const increment = Math.max(10, Math.floor(polyline.length / 20));\n        for (let i = 0; i < polyline.length - increment; i += increment) {\n            points.push(polyline[i]);\n        }\n        points.push(polyline[polyline.length - 1]);\n    }\n    isSplineAnnotation(annotation) {\n        return splineToolNames.includes(annotation?.metadata?.toolName);\n    }\n    createSplineObjectFromType(annotation, splineType) {\n        const splineConfig = this._getSplineConfig(splineType);\n        const spline = new splineConfig.Class();\n        annotation.data.spline = {\n            type: splineConfig.type,\n            instance: spline,\n            resolution: splineConfig.resolution,\n        };\n    }\n    createAnnotation(evt) {\n        const contourAnnotation = super.createAnnotation(evt);\n        const { world: worldPos } = evt.detail.currentPoints;\n        const { type: splineType } = this.configuration.spline;\n        const splineConfig = this._getSplineConfig(splineType);\n        const spline = new splineConfig.Class();\n        const createSpline = () => ({\n            type: splineConfig.type,\n            instance: spline,\n            resolution: splineConfig.resolution,\n        });\n        let onInterpolationComplete;\n        if (this.configuration.interpolation?.enabled) {\n            onInterpolationComplete = (annotation) => {\n                annotation.data.spline ||= createSpline();\n                this.createInterpolatedSplineControl(annotation);\n            };\n        }\n        return utilities.deepMerge(contourAnnotation, {\n            data: {\n                handles: {\n                    points: [[...worldPos]],\n                },\n                spline: createSpline(),\n                cachedStats: {},\n            },\n            onInterpolationComplete,\n        });\n    }\n    _deleteControlPointByIndex(element, annotation, controlPointIndex) {\n        const enabledElement = getEnabledElement(element);\n        const { points: controlPoints } = annotation.data.handles;\n        if (controlPoints.length === 3) {\n            removeAnnotation(annotation.annotationUID);\n        }\n        else {\n            controlPoints.splice(controlPointIndex, 1);\n        }\n        const { renderingEngine } = enabledElement;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        annotation.invalidated = true;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n    }\n    _isSplineROIAnnotation(annotation) {\n        return !!annotation.data?.spline;\n    }\n    _getSplineConfig(type) {\n        const { configuration: config } = this;\n        const splineConfigs = config.spline.configuration;\n        return Object.assign({ type }, DEFAULT_SPLINE_CONFIG, splineConfigs[type]);\n    }\n    _updateSplineInstance(element, annotation) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { worldToCanvas } = viewport;\n        const { data } = annotation;\n        const { type: splineType, instance: spline } = annotation.data.spline;\n        const splineConfig = this._getSplineConfig(splineType);\n        const worldPoints = data.handles.points;\n        const canvasPoints = worldPoints.map(worldToCanvas);\n        const resolution = splineConfig.resolution !== undefined\n            ? parseInt(splineConfig.resolution)\n            : undefined;\n        const scale = splineConfig.scale !== undefined\n            ? parseFloat(splineConfig.scale)\n            : undefined;\n        spline.setControlPoints(canvasPoints);\n        spline.closed = !!data.contour.closed;\n        if (!spline.fixedResolution &&\n            resolution !== undefined &&\n            spline.resolution !== resolution) {\n            spline.resolution = resolution;\n            annotation.invalidated = true;\n        }\n        if (spline instanceof CardinalSpline &&\n            !spline.fixedScale &&\n            scale !== undefined &&\n            spline.scale !== scale) {\n            spline.scale = scale;\n            annotation.invalidated = true;\n        }\n        return spline;\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        if (points.length < SPLINE_MIN_POINTS) {\n            console.warn('Spline requires at least 3 control points');\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, viewUp, instance, viewport, } = this.hydrateBase(SplineROITool, enabledElement, points, options);\n        const splineType = options?.splineType || SplineTypesEnum.CatmullRom;\n        const splineConfig = instance._getSplineConfig(splineType);\n        const SplineClass = splineConfig.Class;\n        const splineInstance = new SplineClass();\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n                label: '',\n                cachedStats: {},\n                spline: {\n                    type: splineType,\n                    instance: splineInstance,\n                },\n                contour: {\n                    closed: true,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: true,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, isEmptyArea, areaUnit } = cachedVolumeStats;\n    const textLines = [];\n    if (area) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${utilities.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    return textLines;\n}\nexport default SplineROITool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, StackViewport, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawHandle as drawHandleSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { distanceToPoint } from '../../utilities/math/point';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { getCalibratedProbeUnitsAndValue } from '../../utilities/getCalibratedUnits';\nimport { lineSegment } from '../../utilities/math';\nconst { transformWorldToIndex } = csUtils;\nclass UltrasoundDirectionalTool extends AnnotationTool {\n    static { this.toolName = 'UltrasoundDirectionalTool'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            displayBothAxesDistances: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            if (this.startedDrawing) {\n                return;\n            }\n            this.startedDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            if (!(viewport instanceof StackViewport)) {\n                throw new Error('UltrasoundDirectionalTool can only be used on a StackViewport');\n            }\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const annotation = (this.createAnnotation(evt, [\n                [...worldPos],\n                [...worldPos],\n            ]));\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            if (this.startedDrawing && data.handles.points.length === 1) {\n                this.editData.handleIndex = 1;\n                return;\n            }\n            this.startedDrawing = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                this.startedDrawing = false;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].xValues == null) {\n                    data.cachedStats[targetId] = {\n                        xValues: [0, 0],\n                        yValues: [0, 0],\n                        isHorizontal: false,\n                        units: [''],\n                        isUnitless: false,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let handleGroupUID = '0';\n                drawHandleSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates[0], {\n                    color,\n                }, 0);\n                renderStatus = true;\n                if (canvasCoordinates.length !== 2) {\n                    return renderStatus;\n                }\n                handleGroupUID = '1';\n                drawHandleSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates[1], {\n                    color,\n                }, 1);\n                const isUnitless = data.cachedStats[targetId].isUnitless;\n                if (!isUnitless) {\n                    const canvasPoint1 = canvasCoordinates[0];\n                    const canvasPoint2 = canvasCoordinates[1];\n                    const canvasDeltaY = canvasPoint2[1] - canvasPoint1[1];\n                    const canvasDeltaX = canvasPoint2[0] - canvasPoint1[0];\n                    const isHorizontal = data.cachedStats[targetId].isHorizontal;\n                    let projectedPointCanvas = [0, 0];\n                    if (isHorizontal) {\n                        projectedPointCanvas = [\n                            canvasPoint1[0] + canvasDeltaX,\n                            canvasPoint1[1],\n                        ];\n                    }\n                    else {\n                        projectedPointCanvas = [\n                            canvasPoint1[0],\n                            canvasPoint1[1] + canvasDeltaY,\n                        ];\n                    }\n                    let dataId = `${annotationUID}-line-1`;\n                    let lineUID = '1';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], projectedPointCanvas, {\n                        color,\n                        width: 1,\n                        shadow: this.configuration.shadow,\n                    }, dataId);\n                    dataId = `${annotationUID}-line-2`;\n                    lineUID = '2';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[1], projectedPointCanvas, {\n                        color,\n                        width: 1,\n                        lineDash: [1, 1],\n                        shadow: this.configuration.shadow,\n                    }, dataId);\n                }\n                else {\n                    const dataId = `${annotationUID}-line-1`;\n                    const lineUID = '1';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                        color,\n                        width: 1,\n                        shadow: this.configuration.shadow,\n                    }, dataId);\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId, this.configuration);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = canvasCoordinates[1];\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    toolSelectedCallback(evt, annotation, interactionType, canvasCoords) {\n        return;\n    }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        this.editData = {\n            handleIndex,\n            annotation,\n            viewportIdsToRender,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        if (data.handles.points.length !== 2) {\n            return;\n        }\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { imageData } = image;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[1];\n            const imageIndex1 = transformWorldToIndex(imageData, worldPos1);\n            const imageIndex2 = transformWorldToIndex(imageData, worldPos2);\n            const { values: values1, units: units1 } = getCalibratedProbeUnitsAndValue(image, [imageIndex1]);\n            const { values: values2, units: units2 } = getCalibratedProbeUnitsAndValue(image, [imageIndex2]);\n            let xValues, yValues, units, isHorizontal;\n            let isUnitless = false;\n            if (units1[0] !== units2[0] ||\n                units1[1] !== units2[1] ||\n                (units1[0] === 'raw' && units2[0] === 'raw')) {\n                const value = distanceToPoint(worldPos1, worldPos2);\n                xValues = [value, 0];\n                yValues = [value, 0];\n                units = ['px'];\n                isUnitless = true;\n            }\n            else {\n                const canvasPoint1 = enabledElement.viewport.worldToCanvas(worldPos1);\n                const canvasPoint2 = enabledElement.viewport.worldToCanvas(worldPos2);\n                const canvasDeltaY = canvasPoint2[1] - canvasPoint1[1];\n                const canvasDeltaX = canvasPoint2[0] - canvasPoint1[0];\n                isHorizontal = Math.abs(canvasDeltaX) > Math.abs(canvasDeltaY);\n                xValues = [values1[0], values2[0]];\n                yValues = [values1[1], values2[1]];\n                units = [units1[0], units1[1]];\n            }\n            cachedStats[targetId] = {\n                xValues,\n                yValues,\n                isHorizontal,\n                units,\n                isUnitless,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId, configuration) {\n    const cachedStats = data.cachedStats[targetId];\n    const { xValues, yValues, units, isUnitless, isHorizontal } = cachedStats;\n    if (isUnitless) {\n        return [`${csUtils.roundNumber(xValues[0])} px`];\n    }\n    if (configuration.displayBothAxesDistances) {\n        const dist1 = Math.abs(xValues[1] - xValues[0]);\n        const dist2 = Math.abs(yValues[1] - yValues[0]);\n        return [\n            `${csUtils.roundNumber(dist1)} ${units[0]}`,\n            `${csUtils.roundNumber(dist2)} ${units[1]}`,\n        ];\n    }\n    if (isHorizontal) {\n        const dist = Math.abs(xValues[1] - xValues[0]);\n        return [`${csUtils.roundNumber(dist)} ${units[0]}`];\n    }\n    else {\n        const dist = Math.abs(yValues[1] - yValues[0]);\n        return [`${csUtils.roundNumber(dist)} ${units[1]}`];\n    }\n}\nexport default UltrasoundDirectionalTool;\n","import { Events, ChangeTypes } from '../../../enums';\nimport { getEnabledElement, utilities, metaData, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawFan as drawFanSvg, } from '../../../drawingSvg';\nimport { state } from '../../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../../cursors/elementCursor';\nimport { angleFromCenter, calculateInnerFanPercentage, clipInterval, intervalFromPoints, mergeIntervals, subtractIntervals, } from '../../../utilities/math/fan/fanUtils';\nimport { calculateFanGeometry } from './utils/fanExtraction';\nconst { transformIndexToWorld } = utilities;\nclass UltrasoundPleuraBLineTool extends AnnotationTool {\n    static { this.toolName = 'UltrasoundPleuraBLineTool'; }\n    static { this.USPleuraBLineAnnotationType = {\n        BLINE: 'bLine',\n        PLEURA: 'pleura',\n    }; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            center: null,\n            innerRadius: null,\n            outerRadius: null,\n            startAngle: null,\n            endAngle: null,\n            bLineColor: 'rgb(60, 255, 60)',\n            pleuraColor: 'rgb(0, 4, 255)',\n            drawDepthGuide: true,\n            depth_ratio: 0.5,\n            depthGuideColor: 'rgb(0, 255, 255)',\n            depthGuideThickness: 4,\n            depthGuideDashLength: 20,\n            depthGuideDashGap: 16,\n            depthGuideOpacity: 0.2,\n            fanOpacity: 0.1,\n            showFanAnnotations: true,\n            updatePercentageCallback: null,\n            actions: {\n                undo: {\n                    method: 'undo',\n                    bindings: [{ key: 'z' }],\n                },\n                redo: {\n                    method: 'redo',\n                    bindings: [{ key: 'y' }],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.pleuraAnnotations = [];\n        this.bLineAnnotations = [];\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const { viewPlaneNormal, viewUp, position: cameraPosition, } = viewport.getCamera();\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                    toolName: this.getToolName(),\n                    referencedImageId,\n                    viewUp,\n                    cameraPosition,\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                    },\n                    annotationType: this.getActiveAnnotationType(),\n                    label: '',\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { viewport } = getEnabledElement(element) || {};\n            if (!viewport) {\n                return;\n            }\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                const allPointsInsideShape = points.every((point) => {\n                    const newPoint = [\n                        point[0] + worldPosDelta[0],\n                        point[1] + worldPosDelta[1],\n                        point[2] + worldPosDelta[2],\n                    ];\n                    return this.isInsideFanShape(viewport, newPoint);\n                });\n                if (allPointsInsideShape) {\n                    points.forEach((point) => {\n                        point[0] += worldPosDelta[0];\n                        point[1] += worldPosDelta[1];\n                        point[2] += worldPosDelta[2];\n                    });\n                    annotation.invalidated = true;\n                }\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                if (this.isInsideFanShape(viewport, worldPos)) {\n                    data.handles.points[handleIndex] = [...worldPos];\n                    annotation.invalidated = true;\n                }\n            }\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            if (!this.getFanShapeGeometryParameters(viewport)) {\n                return;\n            }\n            const { imageData } = viewport.getImageData() || {};\n            if (!imageData) {\n                return renderStatus;\n            }\n            if (this.configuration.drawDepthGuide) {\n                this.drawDepthGuide(svgDrawingHelper, viewport);\n            }\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const fanCenter = viewport.worldToCanvas(transformIndexToWorld(imageData, this.configuration.center));\n            const indexToCanvasRatio = this.getIndexToCanvasRatio(viewport);\n            const innerRadius = this.configuration.innerRadius * indexToCanvasRatio;\n            const outerRadius = this.configuration.outerRadius * indexToCanvasRatio;\n            const currentImageId = viewport.getCurrentImageId();\n            const unMergedPleuraIntervals = annotations\n                .filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA &&\n                annotation.metadata.referencedImageId === currentImageId)\n                .map((annotation) => {\n                const canvasCoordinates = annotation.data.handles.points.map((p) => viewport.worldToCanvas(p));\n                const interval = intervalFromPoints(fanCenter, canvasCoordinates);\n                return interval;\n            });\n            const mergedPleuraIntervals = mergeIntervals(unMergedPleuraIntervals);\n            const pleuraIntervalsDisplayed = [];\n            const bLineIntervalsDisplayed = [];\n            const drawAnnotation = (annotation) => {\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    return;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color: this.getColorForLineType(annotation),\n                        fill: this.getColorForLineType(annotation),\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const dataId = `${annotationUID}-line`;\n                const lineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color: this.getColorForLineType(annotation),\n                    width: lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId);\n                if (this.configuration.showFanAnnotations) {\n                    const lineInterval = intervalFromPoints(fanCenter, canvasCoordinates);\n                    let fanNumber = 0;\n                    if (annotation.data.annotationType ===\n                        UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {\n                        const uncoveredIntervals = subtractIntervals(bLineIntervalsDisplayed, lineInterval);\n                        uncoveredIntervals.forEach((interval) => {\n                            const clippedIntervals = clipInterval(interval, mergedPleuraIntervals);\n                            clippedIntervals.forEach((clippedInterval) => {\n                                fanNumber++;\n                                const fanIndex = fanNumber;\n                                const fanDataId = `${annotationUID}-fan-${fanIndex}`;\n                                const fanUID = `2-${fanIndex}`;\n                                drawFanSvg(svgDrawingHelper, annotationUID, fanUID, fanCenter, innerRadius, outerRadius, clippedInterval[0], clippedInterval[1], {\n                                    color: 'transparent',\n                                    fill: this.getColorForLineType(annotation),\n                                    fillOpacity: this.configuration.fanOpacity,\n                                    width: lineWidth,\n                                    lineDash,\n                                    shadow,\n                                }, fanDataId, 10);\n                                bLineIntervalsDisplayed.push(clippedInterval);\n                            });\n                        });\n                    }\n                    else if (annotation.data.annotationType ===\n                        UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\n                        const uncoveredIntervals = subtractIntervals(pleuraIntervalsDisplayed, lineInterval);\n                        uncoveredIntervals.forEach((interval, index) => {\n                            fanNumber++;\n                            const fanIndex = fanNumber;\n                            const fanDataId = `${annotationUID}-fan-${fanIndex}`;\n                            const fanUID = `2-${fanIndex}`;\n                            drawFanSvg(svgDrawingHelper, annotationUID, fanUID, fanCenter, innerRadius, outerRadius, interval[0], interval[1], {\n                                color: 'transparent',\n                                fill: this.getColorForLineType(annotation),\n                                fillOpacity: this.configuration.fanOpacity,\n                                width: lineWidth,\n                                lineDash,\n                                shadow,\n                            }, fanDataId, 5);\n                            pleuraIntervalsDisplayed.push(interval);\n                        });\n                    }\n                }\n            };\n            const pleuraAnnotationsToDraw = annotations.filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA &&\n                annotation.metadata.referencedImageId === currentImageId);\n            pleuraAnnotationsToDraw.forEach((annotation) => {\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                drawAnnotation(annotation);\n            });\n            const bLineAnnotationsToDraw = annotations.filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE &&\n                annotation.metadata.referencedImageId === currentImageId);\n            bLineAnnotationsToDraw.forEach((annotation) => {\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                drawAnnotation(annotation);\n            });\n            renderStatus = true;\n            if (this.configuration.updatePercentageCallback && viewport) {\n                this.configuration.updatePercentageCallback(this.calculateBLinePleuraPercentage(viewport));\n            }\n            return renderStatus;\n        };\n        this.activeAnnotationType =\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE;\n    }\n    static filterAnnotations(element, filterFunction = () => true) {\n        const annotations = getAnnotations(UltrasoundPleuraBLineTool.toolName, element);\n        if (!annotations?.length) {\n            return [];\n        }\n        const filteredAnnotations = annotations.filter((annotation) => {\n            const currentImageId = annotation.metadata.referencedImageId;\n            return filterFunction(currentImageId);\n        });\n        return filteredAnnotations;\n    }\n    static countAnnotations(element, filterFunction = () => true) {\n        const annotations = getAnnotations(UltrasoundPleuraBLineTool.toolName, element);\n        const { viewport } = getEnabledElement(element);\n        const imageIds = viewport.getImageIds();\n        const getImageIdIndex = (imageId) => {\n            const index = imageIds.findIndex((id) => id === imageId);\n            if (index === -1) {\n                return 0;\n            }\n            return index;\n        };\n        if (!annotations?.length) {\n            return;\n        }\n        const annotationMapping = new Map();\n        annotations.forEach((annotation) => {\n            const currentImageId = annotation.metadata.referencedImageId;\n            if (!filterFunction(currentImageId)) {\n                return;\n            }\n            const { annotationType } = annotation.data;\n            let counts;\n            if (annotationMapping.has(currentImageId)) {\n                counts = annotationMapping.get(currentImageId);\n            }\n            else {\n                counts = {\n                    frame: getImageIdIndex(currentImageId),\n                    bLine: 0,\n                    pleura: 0,\n                };\n            }\n            if (annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\n                counts.pleura++;\n            }\n            else if (annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {\n                counts.bLine++;\n            }\n            annotationMapping.set(currentImageId, counts);\n        });\n        return annotationMapping;\n    }\n    static deleteAnnotations(element, filterFunction = () => false) {\n        const annotations = getAnnotations(UltrasoundPleuraBLineTool.toolName, element);\n        if (!annotations?.length) {\n            return;\n        }\n        annotations.forEach((annotation) => {\n            if (!filterFunction(annotation.metadata.referencedImageId)) {\n                return;\n            }\n            removeAnnotation(annotation.annotationUID);\n        });\n    }\n    setActiveAnnotationType(type) {\n        this.activeAnnotationType = type;\n    }\n    getActiveAnnotationType() {\n        return this.activeAnnotationType;\n    }\n    deleteLastAnnotationType(element, type) {\n        let annotationList;\n        const annotations = getAnnotations(UltrasoundPleuraBLineTool.toolName, element);\n        if (type === UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\n            annotationList = annotations.filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA);\n        }\n        else if (type === UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {\n            annotationList = annotations.filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE);\n        }\n        if (annotationList?.length > 0) {\n            const annotation = annotationList.pop();\n            removeAnnotation(annotation.annotationUID);\n        }\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(UltrasoundPleuraBLineTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    isInsideFanShape(viewport, point) {\n        if (!this.getFanShapeGeometryParameters(viewport)) {\n            return false;\n        }\n        const { imageData } = viewport.getImageData() || {};\n        if (imageData) {\n            const fanCenter = viewport.worldToCanvas(imageData.indexToWorld(this.configuration.center));\n            const canvasCoordinates = viewport.worldToCanvas(point);\n            const angle = angleFromCenter(fanCenter, canvasCoordinates);\n            return (angle >= this.configuration.startAngle &&\n                angle <= this.configuration.endAngle);\n        }\n    }\n    updateFanGeometryConfiguration(fanGeometry) {\n        if (!fanGeometry) {\n            return;\n        }\n        if (this.isFanShapeGeometryParametersValid(fanGeometry)) {\n            this.configuration.center = [\n                fanGeometry.center[0],\n                fanGeometry.center[1],\n                0,\n            ];\n        }\n        this.configuration.innerRadius = fanGeometry.innerRadius;\n        this.configuration.outerRadius = fanGeometry.outerRadius;\n        this.configuration.startAngle = fanGeometry.startAngle;\n        this.configuration.endAngle = fanGeometry.endAngle;\n    }\n    deriveFanGeometryFromViewport(viewport) {\n        const imageId = viewport.getCurrentImageId();\n        const { fanGeometry } = calculateFanGeometry(imageId) || {};\n        if (fanGeometry) {\n            this.updateFanGeometryConfiguration(fanGeometry);\n        }\n    }\n    isFanShapeGeometryParametersValid(fanGeometry) {\n        if (!fanGeometry) {\n            fanGeometry = this.configuration;\n        }\n        return (fanGeometry?.center &&\n            fanGeometry?.innerRadius > 0 &&\n            fanGeometry?.outerRadius &&\n            fanGeometry?.startAngle > 0 &&\n            fanGeometry?.startAngle < 360 &&\n            fanGeometry?.endAngle > 0 &&\n            fanGeometry?.endAngle < 360);\n    }\n    getFanShapeGeometryParameters(viewport) {\n        if (this.isFanShapeGeometryParametersValid()) {\n            return true;\n        }\n        if (!this.isFanShapeGeometryParametersValid()) {\n            const imageId = viewport.getCurrentImageId();\n            const fanGeometry = metaData.get('ultrasoundFanShapeGeometry', imageId);\n            this.updateFanGeometryConfiguration(fanGeometry);\n        }\n        if (!this.isFanShapeGeometryParametersValid()) {\n            this.deriveFanGeometryFromViewport(viewport);\n        }\n        return this.isFanShapeGeometryParametersValid();\n    }\n    calculateBLinePleuraPercentage(viewport) {\n        if (!this.getFanShapeGeometryParameters(viewport)) {\n            return;\n        }\n        const { imageData } = viewport.getImageData() || {};\n        if (!imageData) {\n            return;\n        }\n        const { element } = viewport;\n        const fanCenter = viewport.worldToCanvas(imageData.indexToWorld(this.configuration.center));\n        const currentImageId = viewport.getCurrentImageId();\n        const annotations = getAnnotations(this.getToolName(), element) || [];\n        const pleuraIntervals = annotations\n            .filter((annotation) => annotation.data.annotationType ===\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA &&\n            annotation.metadata.referencedImageId === currentImageId)\n            .map((annotation) => {\n            const canvasCoordinates = annotation.data.handles.points.map((p) => viewport.worldToCanvas(p));\n            return canvasCoordinates;\n        });\n        const bLineIntervals = annotations\n            .filter((annotation) => annotation.data.annotationType ===\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE &&\n            annotation.metadata.referencedImageId === currentImageId)\n            .map((annotation) => {\n            const canvasCoordinates = annotation.data.handles.points.map((p) => viewport.worldToCanvas(p));\n            return canvasCoordinates;\n        });\n        return calculateInnerFanPercentage(fanCenter, pleuraIntervals, bLineIntervals);\n    }\n    getColorForLineType(annotation) {\n        const { annotationType } = annotation.data;\n        const { bLineColor, pleuraColor } = this.configuration;\n        if (annotationType ===\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {\n            return bLineColor;\n        }\n        if (annotationType ===\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\n            return pleuraColor;\n        }\n        return bLineColor;\n    }\n    getIndexToCanvasRatio(viewport) {\n        const { imageData } = viewport.getImageData() || {};\n        const v1 = viewport.worldToCanvas(imageData.indexToWorld([1, 0, 0]));\n        const v2 = viewport.worldToCanvas(imageData.indexToWorld([2, 0, 0]));\n        const diffVector = [v2[0] - v1[0], v2[1] - v1[1]];\n        const vectorSize = Math.sqrt(diffVector[0] * diffVector[0] + diffVector[1] * diffVector[1]);\n        return vectorSize;\n    }\n    drawDepthGuide(svgDrawingHelper, viewport) {\n        if (!this.getFanShapeGeometryParameters(viewport)) {\n            return;\n        }\n        const { imageData } = viewport.getImageData() || {};\n        if (!imageData) {\n            return;\n        }\n        const radToDegree = (rad) => (rad * 180) / Math.PI;\n        const degreeToRad = (degree) => (degree * Math.PI) / 180;\n        const indexToCanvas = (point) => {\n            return viewport.worldToCanvas(transformIndexToWorld(imageData, point));\n        };\n        const depth_radius = this.configuration.innerRadius +\n            this.configuration.depth_ratio *\n                (this.configuration.outerRadius - this.configuration.innerRadius);\n        const theta_start = this.configuration.startAngle;\n        const theta_end = this.configuration.endAngle;\n        const theta_range = theta_end - theta_start;\n        const arc_length = degreeToRad(theta_range) * depth_radius;\n        let num_dashes = Math.round(arc_length /\n            (this.configuration.depthGuideDashLength +\n                this.configuration.depthGuideDashGap));\n        if (num_dashes <= 0) {\n            num_dashes = Math.max(15, Math.round(theta_range / 5));\n        }\n        const theta_step = theta_range / num_dashes;\n        for (let i = 0; i < num_dashes; i++) {\n            const theta1 = degreeToRad(theta_start + i * theta_step);\n            const theta2 = degreeToRad(theta_start +\n                i * theta_step +\n                radToDegree(this.configuration.depthGuideDashLength) / depth_radius);\n            const start_point = [\n                this.configuration.center[0] + depth_radius * Math.cos(theta1),\n                this.configuration.center[1] + depth_radius * Math.sin(theta1),\n                0,\n            ];\n            const end_point = [\n                this.configuration.center[0] + depth_radius * Math.cos(theta2),\n                this.configuration.center[1] + depth_radius * Math.sin(theta2),\n                0,\n            ];\n            drawLineSvg(svgDrawingHelper, viewport.id, `depthGuide-${i}`, indexToCanvas(start_point), indexToCanvas(end_point), {\n                color: this.configuration.depthGuideColor,\n                lineWidth: this.configuration.depthGuideThickness,\n                strokeOpacity: this.configuration.depthGuideOpacity,\n            });\n        }\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (utilities.indexWithinDimensions(index1, dimensions) &&\n            utilities.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    return [''];\n}\nexport default UltrasoundPleuraBLineTool;\n","export function pickPoints(hull, slack = 7) {\n    if (!hull.length) {\n        throw new Error('Convex hull is empty');\n    }\n    const n = hull.length;\n    const next = (i) => (i + 1) % n;\n    const walk = (from, to) => {\n        const idx = [];\n        for (let i = from;; i = next(i)) {\n            idx.push(i);\n            if (i === to) {\n                break;\n            }\n        }\n        return idx;\n    };\n    let i2 = 0, i3 = 0;\n    for (let i = 1; i < n; i++) {\n        if (hull[i][0] < hull[i2][0]) {\n            i2 = i;\n        }\n        if (hull[i][0] > hull[i3][0]) {\n            i3 = i;\n        }\n    }\n    const P2 = hull[i2];\n    const P3 = hull[i3];\n    const pathA = walk(i2, i3);\n    const pathB = walk(i3, i2);\n    const globalYmin = Math.min(...hull.map((p) => p[1]));\n    const upperPath = pathA.some((i) => hull[i][1] === globalYmin)\n        ? pathA\n        : pathB;\n    const topY = Math.min(...upperPath.map((i) => hull[i][1]));\n    let arcPts = upperPath\n        .map((i) => hull[i])\n        .filter((p) => Math.abs(p[1] - topY) <= slack);\n    if (arcPts.length < 2) {\n        arcPts = upperPath\n            .map((i) => hull[i])\n            .sort((a, b) => a[1] - b[1])\n            .slice(0, 2);\n    }\n    const P1 = arcPts.reduce((best, p) => (p[0] < best[0] ? p : best), arcPts[0]);\n    const P4 = arcPts.reduce((best, p) => (p[0] > best[0] ? p : best), arcPts[0]);\n    return { P1, P2, P3, P4 };\n}\nexport function computeEdgeBuffer(buffer, width, height) {\n    const total = width * height;\n    const channels = buffer.length / total;\n    if (![1, 3, 4].includes(channels)) {\n        throw new Error('Buffer must be 1,3 or 4 channels per pixel');\n    }\n    const gray = new Float32Array(total);\n    for (let i = 0; i < total; i++) {\n        if (channels === 1) {\n            gray[i] = buffer[i];\n        }\n        else {\n            const base = i * channels;\n            const r = buffer[base];\n            const g = buffer[base + 1];\n            const b = buffer[base + 2];\n            gray[i] = 0.299 * r + 0.587 * g + 0.114 * b;\n        }\n    }\n    const edgeBuf = new Float32Array(total);\n    for (let y = 1; y < height - 1; y++) {\n        for (let x = 1; x < width - 1; x++) {\n            const idx = y * width + x;\n            const i00 = idx - width - 1;\n            const i01 = idx - width;\n            const i02 = idx - width + 1;\n            const i10 = idx - 1;\n            const i11 = idx;\n            const i12 = idx + 1;\n            const i20 = idx + width - 1;\n            const i21 = idx + width;\n            const i22 = idx + width + 1;\n            const gx = -gray[i00] +\n                gray[i02] +\n                -2 * gray[i10] +\n                2 * gray[i12] +\n                -gray[i20] +\n                gray[i22];\n            const gy = gray[i00] +\n                2 * gray[i01] +\n                gray[i02] -\n                gray[i20] -\n                2 * gray[i21] -\n                gray[i22];\n            edgeBuf[idx] = Math.hypot(gx, gy);\n        }\n    }\n    return edgeBuf;\n}\nexport function refineCornersDirectional(edgeBuf, width, height, rough, contour, opts = {}) {\n    const { maxDist = 15, slack = 2 } = opts;\n    const directions = {\n        P1: { dx: -1, dy: -1 },\n        P2: { dx: -1, dy: +1 },\n        P3: { dx: +1, dy: +1 },\n        P4: { dx: +1, dy: -1 },\n    };\n    function snapQuadrant(pt, { dx, dy }, threshold = 5) {\n        const xmin = dx < 0 ? pt[0] - maxDist : pt[0] - slack;\n        const xmax = dx < 0 ? pt[0] + slack : pt[0] + maxDist;\n        const ymin = dy < 0 ? pt[1] - maxDist : pt[1] - slack;\n        const ymax = dy < 0 ? pt[1] + slack : pt[1] + maxDist;\n        let best = pt;\n        for (const [cx, cy] of contour) {\n            if (cx < xmin || cx > xmax || cy < ymin || cy > ymax) {\n                continue;\n            }\n            const xi = Math.round(cx);\n            const yi = Math.round(cy);\n            if (xi < 0 || xi >= width || yi < 0 || yi >= height) {\n                continue;\n            }\n            const xAlign = (xi - best[0]) * dx;\n            const yAlign = (yi - best[0]) * dy;\n            const v = edgeBuf[yi * width + xi];\n            if (v > threshold && (xAlign > 0 || yAlign > 0)) {\n                best = [cx, cy];\n            }\n        }\n        return best;\n    }\n    return {\n        P1: snapQuadrant(rough.P1, directions.P1),\n        P2: snapQuadrant(rough.P2, directions.P2),\n        P3: snapQuadrant(rough.P3, directions.P3),\n        P4: snapQuadrant(rough.P4, directions.P4),\n    };\n}\nexport function calculateFanShapeCorners(imageBuffer, width, height, hull, roughContour) {\n    const rough = pickPoints(hull);\n    const refined = refineCornersDirectional(imageBuffer, width, height, rough, roughContour, {\n        maxDist: 20,\n        step: 0.5,\n    });\n    return refined;\n}\n","import { intersectLine } from '../../../../utilities/math/line';\nfunction angleRad(center, p) {\n    return Math.atan2(p[1] - center[1], p[0] - center[0]);\n}\nexport function deriveFanGeometry(params) {\n    const { P1, P2, P3, P4 } = params;\n    const centerResult = intersectLine(P1, P2, P4, P3, true);\n    if (!centerResult) {\n        throw new Error('Fan edges appear parallel — no apex found');\n    }\n    const center = centerResult;\n    let startAngle = angleRad(center, P1) * (180 / Math.PI);\n    let endAngle = angleRad(center, P4) * (180 / Math.PI);\n    if (endAngle <= startAngle) {\n        const tempAngle = startAngle;\n        startAngle = endAngle;\n        endAngle = tempAngle;\n    }\n    const d1 = Math.hypot(P1[0] - center[0], P1[1] - center[1]);\n    const d4 = Math.hypot(P4[0] - center[0], P4[1] - center[1]);\n    const d2 = Math.hypot(P2[0] - center[0], P2[1] - center[1]);\n    const d3 = Math.hypot(P3[0] - center[0], P3[1] - center[1]);\n    const innerRadius = Math.min(d1, d4);\n    const outerRadius = Math.max(d2, d3);\n    return {\n        center,\n        startAngle,\n        endAngle,\n        innerRadius,\n        outerRadius,\n    };\n}\n","import { cache } from '@cornerstonejs/core';\nimport { segmentLargestUSOutlineFromBuffer } from './segmentLargestUSOutlineFromBuffer';\nimport { generateConvexHullFromContour } from './generateConvexHullFromContour';\nimport { calculateFanShapeCorners } from './calculateFanShapeCorners';\nimport { deriveFanGeometry } from './deriveFanGeometry';\nexport function exportContourJpeg(pixelData, width, height, contour, opts = {}) {\n    const { strokeStyle = '#f00', lineWidth = 2, quality = 0.92 } = opts;\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    const totalPixels = width * height;\n    const channels = pixelData.length / totalPixels;\n    const imgData = ctx.createImageData(width, height);\n    const out = imgData.data;\n    for (let i = 0; i < totalPixels; i++) {\n        const baseIn = i * channels;\n        const baseOut = i * 4;\n        if (channels === 1) {\n            const v = pixelData[baseIn];\n            out[baseOut] = v;\n            out[baseOut + 1] = v;\n            out[baseOut + 2] = v;\n            out[baseOut + 3] = 255;\n        }\n        else {\n            out[baseOut] = pixelData[baseIn];\n            out[baseOut + 1] = pixelData[baseIn + 1];\n            out[baseOut + 2] = pixelData[baseIn + 2];\n            out[baseOut + 3] = channels === 4 ? pixelData[baseIn + 3] : 255;\n        }\n    }\n    ctx.putImageData(imgData, 0, 0);\n    if (contour.length > 0) {\n        ctx.strokeStyle = strokeStyle;\n        ctx.lineWidth = lineWidth;\n        ctx.beginPath();\n        ctx.moveTo(contour[0][0] + 0.5, contour[0][1] + 0.5);\n        for (let i = 1; i < contour.length; i++) {\n            ctx.lineTo(contour[i][0] + 0.5, contour[i][1] + 0.5);\n        }\n        ctx.closePath();\n        ctx.stroke();\n    }\n    return canvas.toDataURL('image/jpeg', quality);\n}\nexport function getPixelData(imageId) {\n    const image = cache.getImage(imageId);\n    if (!image) {\n        return;\n    }\n    const width = image.width;\n    const height = image.height;\n    const pixelData = image.getPixelData();\n    return {\n        pixelData,\n        width,\n        height,\n    };\n}\nexport default function saveBinaryData(url, filename) {\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.style.display = 'none';\n    a.click();\n    a.remove();\n}\nfunction exportFanJpeg(pixelData, width, height, fan, opts = {}) {\n    const { center, startAngle: startAngleInDegrees, endAngle: endAngleInDegrees, innerRadius, outerRadius, } = fan;\n    const { strokeStyle = '#0ff', lineWidth = 2, quality = 0.92 } = opts;\n    const startAngle = (startAngleInDegrees * Math.PI) / 180;\n    const endAngle = (endAngleInDegrees * Math.PI) / 180;\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    const total = width * height;\n    const channels = pixelData.length / total;\n    const imgData = ctx.createImageData(width, height);\n    const out = imgData.data;\n    for (let i = 0; i < total; i++) {\n        const baseOut = i * 4;\n        if (channels === 1) {\n            const v = pixelData[i];\n            out[baseOut] = v;\n            out[baseOut + 1] = v;\n            out[baseOut + 2] = v;\n            out[baseOut + 3] = 255;\n        }\n        else {\n            const baseIn = i * channels;\n            out[baseOut] = pixelData[baseIn];\n            out[baseOut + 1] = pixelData[baseIn + 1];\n            out[baseOut + 2] = pixelData[baseIn + 2];\n            out[baseOut + 3] = channels === 4 ? pixelData[baseIn + 3] : 255;\n        }\n    }\n    ctx.putImageData(imgData, 0, 0);\n    ctx.beginPath();\n    for (let a = startAngle; a <= endAngle; a += 0.01) {\n        const x = center[0] + innerRadius * Math.cos(a);\n        const y = center[1] + innerRadius * Math.sin(a);\n        if (a === startAngle) {\n            ctx.moveTo(x, y);\n        }\n        else {\n            ctx.lineTo(x, y);\n        }\n    }\n    for (let a = endAngle; a >= startAngle; a -= 0.01) {\n        const x = center[0] + outerRadius * Math.cos(a);\n        const y = center[1] + outerRadius * Math.sin(a);\n        ctx.lineTo(x, y);\n    }\n    ctx.closePath();\n    ctx.strokeStyle = strokeStyle;\n    ctx.lineWidth = lineWidth;\n    ctx.stroke();\n    return canvas.toDataURL('image/jpeg', quality);\n}\nexport function downloadFanJpeg(imageId, contourType = 5) {\n    const { contour, simplified, hull, refined, fanGeometry } = calculateFanGeometry(imageId);\n    const { pixelData, width, height } = getPixelData(imageId) || {};\n    if (!pixelData) {\n        return;\n    }\n    let jpegDataUrl;\n    if (contourType === 1) {\n        jpegDataUrl = exportContourJpeg(pixelData, width, height, contour);\n    }\n    else if (contourType === 2) {\n        jpegDataUrl = exportContourJpeg(pixelData, width, height, simplified);\n    }\n    else if (contourType === 3) {\n        jpegDataUrl = exportContourJpeg(pixelData, width, height, hull);\n    }\n    else if (contourType === 4) {\n        jpegDataUrl = exportContourJpeg(pixelData, width, height, [\n            refined.P1,\n            refined.P2,\n            refined.P3,\n            refined.P4,\n        ]);\n    }\n    else {\n        jpegDataUrl = exportFanJpeg(pixelData, width, height, fanGeometry, {\n            strokeStyle: '#f00',\n            lineWidth: 3,\n            quality: 0.95,\n        });\n    }\n    saveBinaryData(jpegDataUrl, 'contour.jpg');\n}\nexport function calculateFanGeometry(imageId) {\n    const { pixelData, width, height } = getPixelData(imageId) || {};\n    if (!pixelData) {\n        return;\n    }\n    const contour = segmentLargestUSOutlineFromBuffer(pixelData, width, height);\n    const { simplified, hull } = generateConvexHullFromContour(contour);\n    const refined = calculateFanShapeCorners(pixelData, width, height, hull, simplified);\n    const fanGeometry = deriveFanGeometry({\n        P1: refined.P1,\n        P2: refined.P2,\n        P3: refined.P3,\n        P4: refined.P4,\n    });\n    return { contour, simplified, hull, refined, fanGeometry };\n}\n","import * as math from '../../../../utilities/math';\nexport function generateConvexHullFromContour(contour) {\n    const simplified = math.polyline.decimate(contour, 2);\n    const hull = math.polyline.convexHull(simplified);\n    return { simplified, hull };\n}\n","import { floodFill } from '../../../../utilities/segmentation';\nexport function segmentLargestUSOutlineFromBuffer(buffer, width, height) {\n    const totalPixels = width * height;\n    const channelCount = buffer.length / totalPixels;\n    if (![1, 3, 4].includes(channelCount)) {\n        throw new Error('Buffer must be 1, 3, or 4 channels per pixel');\n    }\n    const mask = Array.from({ length: height }, () => new Array(width).fill(false));\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n            const pixelIndex = y * width + x;\n            const base = pixelIndex * channelCount;\n            let isForeground = false;\n            for (let c = 0; c < Math.min(3, channelCount); c++) {\n                if (buffer[base + c] > 0) {\n                    isForeground = true;\n                    break;\n                }\n            }\n            mask[y][x] = isForeground;\n        }\n    }\n    const labels = Array.from({ length: height }, () => new Array(width).fill(0));\n    let currentLabel = 0;\n    const regionSizes = {};\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n            if (mask[y][x] && labels[y][x] === 0) {\n                currentLabel++;\n                const getter = (px, py) => {\n                    if (px < 0 || px >= width || py < 0 || py >= height) {\n                        return false;\n                    }\n                    return mask[py][px] && labels[py][px] === 0;\n                };\n                let pixelCount = 0;\n                const options = {\n                    onFlood: (px, py) => {\n                        labels[py][px] = currentLabel;\n                        pixelCount++;\n                    },\n                    diagonals: false,\n                };\n                floodFill(getter, [x, y], options);\n                regionSizes[currentLabel] = pixelCount;\n            }\n        }\n    }\n    if (currentLabel === 0) {\n        return [];\n    }\n    const largestLabel = Object.keys(regionSizes).reduce((a, b) => regionSizes[a] > regionSizes[b] ? a : b);\n    function isBorder(x, y) {\n        if (labels[y][x] !== +largestLabel) {\n            return false;\n        }\n        for (const [dx, dy] of [\n            [1, 0],\n            [-1, 0],\n            [0, 1],\n            [0, -1],\n        ]) {\n            const nx = x + dx, ny = y + dy;\n            if (nx < 0 ||\n                nx >= width ||\n                ny < 0 ||\n                ny >= height ||\n                labels[ny][nx] !== +largestLabel) {\n                return true;\n            }\n        }\n        return false;\n    }\n    let start = null;\n    outer: for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n            if (isBorder(x, y)) {\n                start = [x, y];\n                break outer;\n            }\n        }\n    }\n    if (!start) {\n        return [];\n    }\n    const dirs = [\n        [1, 0],\n        [1, 1],\n        [0, 1],\n        [-1, 1],\n        [-1, 0],\n        [-1, -1],\n        [0, -1],\n        [1, -1],\n    ];\n    const contour = [];\n    let current = start;\n    let prev = [start[0] - 1, start[1]];\n    do {\n        contour.push([current[0], current[1]]);\n        const dx0 = prev[0] - current[0], dy0 = prev[1] - current[1];\n        let startDir = dirs.findIndex((d) => d[0] === dx0 && d[1] === dy0);\n        if (startDir < 0) {\n            startDir = 0;\n        }\n        let nextPt = null;\n        for (let k = 1; k <= 8; k++) {\n            const [dx, dy] = dirs[(startDir + k) % 8];\n            const nx = current[0] + dx, ny = current[1] + dy;\n            if (nx >= 0 && nx < width && ny >= 0 && ny < height && isBorder(nx, ny)) {\n                nextPt = [nx, ny];\n                const [bdx, bdy] = dirs[(startDir + k - 1 + 8) % 8];\n                prev = [current[0] + bdx, current[1] + bdy];\n                break;\n            }\n        }\n        if (!nextPt) {\n            break;\n        }\n        current = nextPt;\n    } while (current[0] !== start[0] || current[1] !== start[1]);\n    return contour;\n}\n","import { vec3, vec2 } from 'gl-matrix';\nimport { getEnabledElement, triggerEvent, eventTarget, utilities as csUtils, cache, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement';\nimport { drawHandles as drawHandlesSvg, drawRedactionRect as drawRedactionRectSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as rectangle from '../../utilities/math/rectangle';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nclass VideoRedactionTool extends AnnotationTool {\n    static { this.toolName = 'VideoRedaction'; }\n    constructor(toolConfiguration = {}) {\n        super(toolConfiguration, {\n            supportedInteractionTypes: ['Mouse', 'Touch'],\n            configuration: { shadow: true, preventHandleOutsideImage: false },\n        });\n        this.addNewAnnotation = (evt) => {\n            const eventData = evt.detail;\n            const { currentPoints, element } = eventData;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const annotation = (this.constructor).createAnnotationForViewport(viewport, {\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                    },\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            this.editData = {\n                annotation,\n                viewportUIDsToRender,\n                handleIndex: 3,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n            return annotation;\n        };\n        this.getHandleNearImagePoint = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            for (let i = 0; i < points.length; i++) {\n                const point = points[i];\n                const toolDataCanvasCoordinate = viewport.worldToCanvas(point);\n                const near = vec2.distance(canvasCoords, toolDataCanvasCoordinate) < proximity;\n                if (near === true) {\n                    data.handles.activeHandleIndex = i;\n                    return point;\n                }\n            }\n            data.handles.activeHandleIndex = null;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasPoint1 = viewport.worldToCanvas(points[0]);\n            const canvasPoint2 = viewport.worldToCanvas(points[3]);\n            const rect = this._getRectangleImageCoordinates([\n                canvasPoint1,\n                canvasPoint2,\n            ]);\n            const point = [canvasCoords[0], canvasCoords[1]];\n            const { left, top, width, height } = rect;\n            const distanceToPoint = rectangle.distanceToPoint([left, top, width, height], point);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType = 'mouse') => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { data } = annotation;\n            data.active = true;\n            const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            this.editData = {\n                annotation,\n                viewportUIDsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle, interactionType = 'mouse') => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { data } = annotation;\n            data.active = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                handleIndex = data.handles.points.findIndex((p) => p === handle);\n            }\n            const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            this.editData = {\n                annotation,\n                viewportUIDsToRender,\n                handleIndex,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { annotation, viewportUIDsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            data.active = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { annotation, viewportUIDsToRender, handleIndex, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (handleIndex === undefined) {\n                const { deltaPoints } = eventData;\n                const worldPosDelta = deltaPoints.world;\n                const { points } = data.handles;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                data.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventData;\n                const enabledElement = getEnabledElement(element);\n                const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n                const worldPos = currentPoints.world;\n                const { points } = data.handles;\n                points[handleIndex] = [...worldPos];\n                let bottomLeftCanvas;\n                let bottomRightCanvas;\n                let topLeftCanvas;\n                let topRightCanvas;\n                let bottomLeftWorld;\n                let bottomRightWorld;\n                let topLeftWorld;\n                let topRightWorld;\n                switch (handleIndex) {\n                    case 0:\n                    case 3:\n                        bottomLeftCanvas = worldToCanvas(points[0]);\n                        topRightCanvas = worldToCanvas(points[3]);\n                        bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n                        topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n                        bottomRightWorld = canvasToWorld(bottomRightCanvas);\n                        topLeftWorld = canvasToWorld(topLeftCanvas);\n                        points[1] = bottomRightWorld;\n                        points[2] = topLeftWorld;\n                        break;\n                    case 1:\n                    case 2:\n                        bottomRightCanvas = worldToCanvas(points[1]);\n                        topLeftCanvas = worldToCanvas(points[2]);\n                        bottomLeftCanvas = [\n                            topLeftCanvas[0],\n                            bottomRightCanvas[1],\n                        ];\n                        topRightCanvas = [\n                            bottomRightCanvas[0],\n                            topLeftCanvas[1],\n                        ];\n                        bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n                        topRightWorld = canvasToWorld(topRightCanvas);\n                        points[0] = bottomLeftWorld;\n                        points[3] = topRightWorld;\n                        break;\n                }\n                data.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID } = annotation;\n                const data = annotation.data;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return;\n                }\n                let activeHandleCanvasCoords;\n                if (!this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const rectangleUID = '0';\n                drawRedactionRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                    color: 'black',\n                    lineDash,\n                    lineWidth,\n                });\n            }\n        };\n        this._getRectangleImageCoordinates = (points) => {\n            const [point0, point1] = points;\n            return {\n                left: Math.min(point0[0], point1[0]),\n                top: Math.min(point0[1], point1[1]),\n                width: Math.abs(point0[0] - point1[0]),\n                height: Math.abs(point0[1] - point1[1]),\n            };\n        };\n        this._calculateCachedStats = (annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement) => {\n            const { data } = annotation;\n            const { viewportUID, renderingEngineUID, sceneUID } = enabledElement;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[3];\n            const { cachedStats } = data;\n            const targetUIDs = Object.keys(cachedStats);\n            for (let i = 0; i < targetUIDs.length; i++) {\n                const targetUID = targetUIDs[i];\n                const { imageVolume } = this._getImageVolumeFromTargetUID(targetUID, renderingEngine);\n                const { dimensions, scalarData, vtkImageData: imageData, metadata, } = imageVolume;\n                const worldPos1Index = vec3.fromValues(0, 0, 0);\n                const worldPos2Index = vec3.fromValues(0, 0, 0);\n                imageData.worldToIndexVec3(worldPos1, worldPos1Index);\n                worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n                worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n                worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n                imageData.worldToIndexVec3(worldPos2, worldPos2Index);\n                worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n                worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n                worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n                if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n                    this.isHandleOutsideImage = false;\n                    const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n                    const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n                    const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n                    const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n                    const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n                    const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n                    const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                    const area = worldWidth * worldHeight;\n                    let count = 0;\n                    let mean = 0;\n                    let stdDev = 0;\n                    const yMultiple = dimensions[0];\n                    const zMultiple = dimensions[0] * dimensions[1];\n                    for (let k = kMin; k <= kMax; k++) {\n                        for (let j = jMin; j <= jMax; j++) {\n                            for (let i = iMin; i <= iMax; i++) {\n                                const value = scalarData[k * zMultiple + j * yMultiple + i];\n                                count++;\n                                mean += value;\n                            }\n                        }\n                    }\n                    mean /= count;\n                    for (let k = kMin; k <= kMax; k++) {\n                        for (let j = jMin; j <= jMax; j++) {\n                            for (let i = iMin; i <= iMax; i++) {\n                                const value = scalarData[k * zMultiple + j * yMultiple + i];\n                                const valueMinusMean = value - mean;\n                                stdDev += valueMinusMean * valueMinusMean;\n                            }\n                        }\n                    }\n                    stdDev /= count;\n                    stdDev = Math.sqrt(stdDev);\n                    cachedStats[targetUID] = {\n                        Modality: metadata.Modality,\n                        area,\n                        mean,\n                        stdDev,\n                    };\n                }\n                else {\n                    this.isHandleOutsideImage = true;\n                    cachedStats[targetUID] = {\n                        Modality: metadata.Modality,\n                    };\n                }\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                const eventType = Events.ANNOTATION_MODIFIED;\n                const eventDetail = {\n                    annotation,\n                    viewportUID,\n                    renderingEngineUID,\n                    sceneUID: sceneUID,\n                    changeType: ChangeTypes.StatsUpdated,\n                };\n                triggerEvent(eventTarget, eventType, eventDetail);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._getTargetVolumeUID = (scene) => {\n            if (this.configuration.volumeUID) {\n                return this.configuration.volumeUID;\n            }\n            const volumeActors = scene.getVolumeActors();\n            if (!volumeActors && !volumeActors.length) {\n                return;\n            }\n            return volumeActors[0].uid;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    cancel(element) {\n        if (!this.isDrawing) {\n            return;\n        }\n        this.isDrawing = false;\n        this._deactivateDraw(element);\n        this._deactivateModify(element);\n        resetElementCursor(element);\n        const { annotation, viewportUIDsToRender } = this.editData;\n        const { data } = annotation;\n        data.active = false;\n        data.handles.activeHandleIndex = null;\n        triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n        this.editData = null;\n        return annotation.annotationUID;\n    }\n    _getImageVolumeFromTargetUID(targetUID, renderingEngine) {\n        let imageVolume, viewport;\n        if (targetUID.startsWith('stackTarget')) {\n            const coloneIndex = targetUID.indexOf(':');\n            const viewportUID = targetUID.substring(coloneIndex + 1);\n            const viewport = renderingEngine.getViewport(viewportUID);\n            imageVolume = viewport.getImageData();\n        }\n        else {\n            imageVolume = cache.getVolume(targetUID);\n        }\n        return { imageVolume, viewport };\n    }\n    _getTargetStackUID(viewport) {\n        return `stackTarget:${viewport.uid}`;\n    }\n}\nexport default VideoRedactionTool;\n","import { vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, cache, getRenderingEngine, BaseVolumeViewport, } from '@cornerstonejs/core';\nimport { drawPolyline as drawPolylineSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { Events } from '../../enums';\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { growCut } from '../../utilities/segmentation';\nimport GrowCutBaseTool from '../base/GrowCutBaseTool';\nconst NEGATIVE_PIXEL_RANGE = [-Infinity, -995];\nconst POSITIVE_PIXEL_RANGE = [0, 1900];\nconst ISLAND_PIXEL_RANGE = [1000, 1900];\nconst { transformWorldToIndex, transformIndexToWorld } = csUtils;\nclass WholeBodySegmentTool extends GrowCutBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            isPartialVolume: true,\n            positivePixelRange: POSITIVE_PIXEL_RANGE,\n            negativePixelRange: NEGATIVE_PIXEL_RANGE,\n            islandRemoval: {\n                enabled: true,\n                islandPixelRange: ISLAND_PIXEL_RANGE,\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const { world: currentWorldPoint } = currentPoints;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const linePoints = this._getHorizontalLineWorldPoints(enabledElement, currentWorldPoint);\n            this.growCutData.horizontalLines[1] = linePoints;\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._endCallback = async (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            await this.runGrowCut();\n            this._deactivateDraw(element);\n            this.growCutData = null;\n            resetElementCursor(element);\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n    }\n    async preMouseDownCallback(evt) {\n        const eventData = evt.detail;\n        const { element, currentPoints } = eventData;\n        const { world: worldPoint } = currentPoints;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        const linePoints = this._getHorizontalLineWorldPoints(enabledElement, worldPoint);\n        await super.preMouseDownCallback(evt);\n        this.growCutData.horizontalLines = [linePoints, linePoints];\n        this._activateDraw(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        return true;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this.growCutData) {\n            return;\n        }\n        const { segmentation: segmentationData, horizontalLines } = this.growCutData;\n        if (horizontalLines.length !== 2) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const { segmentationId, segmentIndex } = segmentationData;\n        const [line1, line2] = horizontalLines;\n        const [worldLine1P1, worldLine1P2] = line1;\n        const [worldLine2P1, worldLine2P2] = line2;\n        const canvasPoints = [\n            worldLine1P1,\n            worldLine1P2,\n            worldLine2P2,\n            worldLine2P1,\n        ].map((worldPoint) => viewport.worldToCanvas(worldPoint));\n        const annotationUID = 'growCutRect';\n        const squareGroupUID = '0';\n        const { color, fillColor, lineWidth, fillOpacity, lineDash } = this.getSegmentStyle({\n            segmentationId,\n            segmentIndex,\n            viewportId: viewport.id,\n        });\n        drawPolylineSvg(svgDrawingHelper, annotationUID, squareGroupUID, canvasPoints, {\n            color,\n            fillColor,\n            fillOpacity,\n            lineWidth,\n            lineDash,\n            closePath: true,\n        });\n    }\n    async getGrowCutLabelmap(growCutData) {\n        const { segmentation: { segmentIndex, referencedVolumeId }, renderingEngineId, viewportId, horizontalLines, } = growCutData;\n        const renderingEngine = getRenderingEngine(renderingEngineId);\n        const viewport = renderingEngine.getViewport(viewportId);\n        const [line1, line2] = horizontalLines;\n        const worldSquarePoints = [line1[0], line1[1], line2[1], line2[0]];\n        const referencedVolume = cache.getVolume(referencedVolumeId);\n        const { topLeft: worldTopLeft, bottomRight: worldBottomRight } = this._getWorldBoundingBoxFromProjectedSquare(viewport, worldSquarePoints);\n        const ijkTopLeft = transformWorldToIndex(referencedVolume.imageData, worldTopLeft);\n        const ijkBottomRight = transformWorldToIndex(referencedVolume.imageData, worldBottomRight);\n        const boundingBoxInfo = {\n            boundingBox: {\n                ijkTopLeft,\n                ijkBottomRight,\n            },\n        };\n        const config = this.configuration;\n        const options = {\n            positiveSeedValue: segmentIndex,\n            negativeSeedValue: 255,\n            negativePixelRange: config.negativePixelRange,\n            positivePixelRange: config.positivePixelRange,\n        };\n        return growCut.runGrowCutForBoundingBox(referencedVolumeId, boundingBoxInfo, options);\n    }\n    getRemoveIslandData() {\n        const { segmentation: { segmentIndex, referencedVolumeId, labelmapVolumeId }, } = this.growCutData;\n        const referencedVolume = cache.getVolume(referencedVolumeId);\n        const labelmapVolume = cache.getVolume(labelmapVolumeId);\n        const referencedVolumeData = referencedVolume.voxelManager.getCompleteScalarDataArray();\n        const labelmapData = labelmapVolume.voxelManager.getCompleteScalarDataArray();\n        const { islandPixelRange } = this.configuration.islandRemoval;\n        const islandPointIndexes = [];\n        for (let i = 0, len = labelmapData.length; i < len; i++) {\n            if (labelmapData[i] !== segmentIndex) {\n                continue;\n            }\n            const pixelValue = referencedVolumeData[i];\n            if (pixelValue >= islandPixelRange[0] &&\n                pixelValue <= islandPixelRange[1]) {\n                islandPointIndexes.push(i);\n            }\n        }\n        return {\n            islandPointIndexes,\n        };\n    }\n    _activateDraw(element) {\n        element.addEventListener(Events.MOUSE_UP, this._endCallback);\n        element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n        element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n    }\n    _projectWorldPointAcrossSlices(viewport, worldEdgePoint, vecDirection) {\n        const volume = this._getViewportVolume(viewport);\n        const { dimensions } = volume;\n        const ijkPoint = transformWorldToIndex(volume.imageData, worldEdgePoint);\n        const axis = vecDirection.findIndex((n) => csUtils.isEqual(Math.abs(n), 1));\n        if (axis === -1) {\n            throw new Error('Non-orthogonal direction vector');\n        }\n        const ijkLineP1 = [...ijkPoint];\n        const ijkLineP2 = [...ijkPoint];\n        ijkLineP1[axis] = 0;\n        ijkLineP2[axis] = dimensions[axis] - 1;\n        return [ijkLineP1, ijkLineP2];\n    }\n    _getCuboidIJKEdgePointsFromProjectedWorldPoint(viewport, worldEdgePoint) {\n        const { viewPlaneNormal } = viewport.getCamera();\n        return this._projectWorldPointAcrossSlices(viewport, worldEdgePoint, viewPlaneNormal);\n    }\n    _getWorldCuboidCornerPoints(viewport, worldSquarePoints) {\n        const cuboidPoints = [];\n        const volume = this._getViewportVolume(viewport);\n        worldSquarePoints.forEach((worldSquarePoint) => {\n            const ijkEdgePoints = this._getCuboidIJKEdgePointsFromProjectedWorldPoint(viewport, worldSquarePoint);\n            const worldEdgePoints = ijkEdgePoints.map((ijkPoint) => transformIndexToWorld(volume.imageData, ijkPoint));\n            cuboidPoints.push(...worldEdgePoints);\n        });\n        return cuboidPoints;\n    }\n    _getWorldBoundingBoxFromProjectedSquare(viewport, worldSquarePoints) {\n        const worldCuboidPoints = this._getWorldCuboidCornerPoints(viewport, worldSquarePoints);\n        const topLeft = [...worldCuboidPoints[0]];\n        const bottomRight = [...worldCuboidPoints[0]];\n        worldCuboidPoints.forEach((worldPoint) => {\n            vec3.min(topLeft, topLeft, worldPoint);\n            vec3.max(bottomRight, bottomRight, worldPoint);\n        });\n        return { topLeft, bottomRight };\n    }\n    _getViewportVolume(viewport) {\n        if (!(viewport instanceof BaseVolumeViewport)) {\n            throw new Error('Viewport is not a BaseVolumeViewport');\n        }\n        const volumeId = viewport.getAllVolumeIds()[0];\n        return cache.getVolume(volumeId);\n    }\n    _getHorizontalLineIJKPoints(enabledElement, worldPoint) {\n        const { viewport } = enabledElement;\n        const volume = this._getViewportVolume(viewport);\n        const { dimensions } = volume;\n        const ijkPoint = transformWorldToIndex(volume.imageData, worldPoint);\n        const { viewUp, viewPlaneNormal } = viewport.getCamera();\n        const vecRow = vec3.cross(vec3.create(), viewUp, viewPlaneNormal);\n        const axis = vecRow.findIndex((n) => csUtils.isEqual(Math.abs(n), 1));\n        const ijkLineP1 = [...ijkPoint];\n        const ijkLineP2 = [...ijkPoint];\n        ijkLineP1[axis] = 0;\n        ijkLineP2[axis] = dimensions[axis] - 1;\n        return [ijkLineP1, ijkLineP2];\n    }\n    _getHorizontalLineWorldPoints(enabledElement, worldPoint) {\n        const { viewport } = enabledElement;\n        const volume = this._getViewportVolume(viewport);\n        const [ijkPoint1, ijkPoint2] = this._getHorizontalLineIJKPoints(enabledElement, worldPoint);\n        const worldPoint1 = transformIndexToWorld(volume.imageData, ijkPoint1);\n        const worldPoint2 = transformIndexToWorld(volume.imageData, ijkPoint2);\n        return [worldPoint1, worldPoint2];\n    }\n}\nWholeBodySegmentTool.toolName = 'WholeBodySegment';\nexport default WholeBodySegmentTool;\n","import { mat4 } from 'gl-matrix';\nimport { CubicSpline } from './CubicSpline';\nconst TRANSFORM_MATRIX = mat4.multiplyScalar(mat4.create(), mat4.fromValues(1, 4, 1, 0, -3, 0, 3, 0, 3, -6, 3, 0, -1, 3, -3, 1), 1 / 6);\nclass BSpline extends CubicSpline {\n    getTransformMatrix() {\n        return TRANSFORM_MATRIX;\n    }\n}\nexport { BSpline as default, BSpline };\n","import { CubicSpline } from './CubicSpline';\nclass CardinalSpline extends CubicSpline {\n    constructor(props) {\n        super(props);\n        this._scale = props?.scale ?? 0.5;\n        this._fixedScale = props?.fixedScale ?? false;\n    }\n    get scale() {\n        return this._scale;\n    }\n    set scale(scale) {\n        if (this._fixedScale || this._scale === scale) {\n            return;\n        }\n        this._scale = scale;\n        this.invalidated = true;\n    }\n    get fixedScale() {\n        return this._fixedScale;\n    }\n    getTransformMatrix() {\n        const { scale: s } = this;\n        const s2 = 2 * s;\n        return [\n            0, 1, 0, 0,\n            -s, 0, s, 0,\n            s2, s - 3, 3 - s2, -s,\n            -s, 2 - s, s - 2, s\n        ];\n    }\n}\nexport { CardinalSpline as default, CardinalSpline };\n","import { CardinalSpline } from './CardinalSpline';\nclass CatmullRomSpline extends CardinalSpline {\n    constructor() {\n        super({ scale: 0.5, fixedScale: true });\n    }\n}\nexport { CatmullRomSpline as default, CatmullRomSpline };\n","import { vec4 } from 'gl-matrix';\nimport { Spline } from './Spline';\nimport * as math from '../../../utilities/math';\nconst MAX_U_ERROR = 1e-8;\nclass CubicSpline extends Spline {\n    getPreviewCurveSegments(controlPointPreview, closeSpline) {\n        const previewNumCurveSegments = this._getNumCurveSegments() + 1;\n        const startCurveSegIndex = Math.max(0, previewNumCurveSegments - 2);\n        const endCurveSegIndex = closeSpline\n            ? previewNumCurveSegments\n            : previewNumCurveSegments - 1;\n        const transformMatrix = this.getTransformMatrix();\n        const controlPoints = [...this.controlPoints];\n        const curveSegments = [];\n        if (!closeSpline) {\n            controlPoints.push(controlPointPreview);\n        }\n        for (let i = startCurveSegIndex; i <= endCurveSegIndex; i++) {\n            const curveSegment = this._getCurveSegment(i, transformMatrix, controlPoints, closeSpline);\n            curveSegments.push(curveSegment);\n        }\n        return curveSegments;\n    }\n    getSplineCurves() {\n        const numCurveSegments = this._getNumCurveSegments();\n        const curveSegments = new Array(numCurveSegments);\n        if (numCurveSegments <= 0) {\n            return [];\n        }\n        const transformMatrix = this.getTransformMatrix();\n        let previousCurveSegmentsLength = 0;\n        for (let i = 0; i < numCurveSegments; i++) {\n            const curveSegment = this._getCurveSegment(i, transformMatrix);\n            curveSegment.previousCurveSegmentsLength = previousCurveSegmentsLength;\n            curveSegments[i] = curveSegment;\n            previousCurveSegmentsLength += curveSegment.length;\n        }\n        return curveSegments;\n    }\n    _getNumCurveSegments(controlPoints = this.controlPoints, closed = this.closed) {\n        return closed\n            ? controlPoints.length\n            : Math.max(0, controlPoints.length - 1);\n    }\n    _getPoint(u, transformMatrix, controlPoints = this.controlPoints, closed = this.closed) {\n        const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n        const uInt = Math.floor(u);\n        let curveSegmentIndex = uInt % numCurveSegments;\n        const t = u - uInt;\n        const curveSegmentIndexOutOfBounds = curveSegmentIndex < 0 || curveSegmentIndex >= numCurveSegments;\n        if (curveSegmentIndexOutOfBounds) {\n            if (this.closed) {\n                curveSegmentIndex =\n                    (numCurveSegments + curveSegmentIndex) % numCurveSegments;\n            }\n            else {\n                return;\n            }\n        }\n        const { p0, p1, p2, p3 } = this._getCurveSegmentPoints(curveSegmentIndex, controlPoints, closed);\n        const tt = t * t;\n        const ttt = tt * t;\n        const tValues = vec4.fromValues(1, t, tt, ttt);\n        const qValues = vec4.transformMat4(vec4.create(), tValues, transformMatrix);\n        return [\n            vec4.dot(qValues, vec4.fromValues(p0[0], p1[0], p2[0], p3[0])),\n            vec4.dot(qValues, vec4.fromValues(p0[1], p1[1], p2[1], p3[1])),\n        ];\n    }\n    _getCurveSegmentPoints(curveSegmentIndex, controlPoints = this.controlPoints, closed = this.closed) {\n        const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n        const p1Index = curveSegmentIndex;\n        const p0Index = p1Index - 1;\n        const p2Index = closed ? (p1Index + 1) % numCurveSegments : p1Index + 1;\n        const p3Index = p2Index + 1;\n        const p1 = controlPoints[p1Index];\n        const p2 = controlPoints[p2Index];\n        let p0;\n        let p3;\n        if (p0Index >= 0) {\n            p0 = controlPoints[p0Index];\n        }\n        else {\n            p0 = closed\n                ? controlPoints[controlPoints.length - 1]\n                : math.point.mirror(p2, p1);\n        }\n        if (p3Index < controlPoints.length) {\n            p3 = controlPoints[p3Index];\n        }\n        else {\n            p3 = closed ? controlPoints[0] : math.point.mirror(p1, p2);\n        }\n        return { p0, p1, p2, p3 };\n    }\n    _getLineSegments(curveSegmentIndex, transformMatrix, controlPoints = this.controlPoints, closed = this.closed) {\n        const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n        const numLineSegments = this.resolution + 1;\n        const inc = 1 / numLineSegments;\n        const minU = curveSegmentIndex;\n        let maxU = minU + 1;\n        if (!closed && curveSegmentIndex === numCurveSegments - 1) {\n            maxU -= MAX_U_ERROR;\n        }\n        const lineSegments = [];\n        let startPoint;\n        let endPoint;\n        let previousLineSegmentsLength = 0;\n        for (let i = 0, u = minU; i <= numLineSegments; i++, u += inc) {\n            u = u > maxU ? maxU : u;\n            const point = this._getPoint(u, transformMatrix, controlPoints, closed);\n            if (!i) {\n                startPoint = point;\n                continue;\n            }\n            endPoint = point;\n            const dx = endPoint[0] - startPoint[0];\n            const dy = endPoint[1] - startPoint[1];\n            const length = Math.sqrt(dx ** 2 + dy ** 2);\n            const aabb = {\n                minX: startPoint[0] <= endPoint[0] ? startPoint[0] : endPoint[0],\n                maxX: startPoint[0] >= endPoint[0] ? startPoint[0] : endPoint[0],\n                minY: startPoint[1] <= endPoint[1] ? startPoint[1] : endPoint[1],\n                maxY: startPoint[1] >= endPoint[1] ? startPoint[1] : endPoint[1],\n            };\n            lineSegments.push({\n                points: {\n                    start: startPoint,\n                    end: endPoint,\n                },\n                aabb,\n                length,\n                previousLineSegmentsLength,\n            });\n            startPoint = endPoint;\n            previousLineSegmentsLength += length;\n        }\n        return lineSegments;\n    }\n    _getCurveSegment(curveSegmentIndex, transformMatrix = this.getTransformMatrix(), controlPoints = this.controlPoints, closed = this.closed) {\n        const { p0, p1, p2, p3 } = this._getCurveSegmentPoints(curveSegmentIndex, controlPoints, closed);\n        const lineSegments = this._getLineSegments(curveSegmentIndex, transformMatrix, controlPoints, closed);\n        let curveSegmentLength = 0;\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n        lineSegments.forEach(({ aabb: lineSegAABB, length: lineSegLength }) => {\n            minX = Math.min(minX, lineSegAABB.minX);\n            minY = Math.min(minY, lineSegAABB.minY);\n            maxX = Math.max(maxX, lineSegAABB.maxX);\n            maxY = Math.max(maxY, lineSegAABB.maxY);\n            curveSegmentLength += lineSegLength;\n        });\n        return {\n            controlPoints: { p0, p1, p2, p3 },\n            aabb: { minX, minY, maxX, maxY },\n            length: curveSegmentLength,\n            previousCurveSegmentsLength: 0,\n            lineSegments,\n        };\n    }\n}\nexport { CubicSpline as default, CubicSpline };\n","import { CardinalSpline } from './CardinalSpline';\nclass LinearSpline extends CardinalSpline {\n    constructor() {\n        super({ resolution: 0, fixedResolution: true, scale: 0, fixedScale: true });\n    }\n}\nexport { LinearSpline as default, LinearSpline };\n","import { QuadraticSpline } from './QuadraticSpline';\nconst TRANSFORM_MATRIX = [\n    1, 0, 0,\n    -2, 2, 0,\n    1, -2, 1,\n];\nclass QuadraticBezier extends QuadraticSpline {\n    hasTangentPoints() {\n        return true;\n    }\n    getTransformMatrix() {\n        return TRANSFORM_MATRIX;\n    }\n}\nexport { QuadraticBezier as default, QuadraticBezier };\n","import { Spline } from './Spline';\nclass QuadraticSpline extends Spline {\n    getSplineCurves() {\n        return [];\n    }\n    getLineSegments() {\n        return [];\n    }\n    getPreviewCurveSegments(controlPointPreview, closeSpline) {\n        return [];\n    }\n}\nexport { QuadraticSpline as default, QuadraticSpline };\n","import * as math from '../../../utilities/math';\nclass Spline {\n    constructor(props) {\n        this._controlPoints = [];\n        this._invalidated = false;\n        this._length = 0;\n        this._controlPoints = [];\n        this._resolution = props?.resolution ?? 20;\n        this._fixedResolution = props?.fixedResolution ?? false;\n        this._closed = props?.closed ?? false;\n        this._invalidated = true;\n    }\n    get controlPoints() {\n        return this._controlPoints;\n    }\n    get numControlPoints() {\n        return this._controlPoints.length;\n    }\n    get resolution() {\n        return this._resolution;\n    }\n    set resolution(resolution) {\n        if (this._fixedResolution || this._resolution === resolution) {\n            return;\n        }\n        this._resolution = resolution;\n        this.invalidated = true;\n    }\n    get fixedResolution() {\n        return this._fixedResolution;\n    }\n    get closed() {\n        return this._closed;\n    }\n    set closed(closed) {\n        if (this._closed === closed) {\n            return;\n        }\n        this._closed = closed;\n        this.invalidated = true;\n    }\n    get aabb() {\n        this._update();\n        return this._aabb;\n    }\n    get length() {\n        this._update();\n        return this._length;\n    }\n    get invalidated() {\n        return this._invalidated;\n    }\n    set invalidated(invalidated) {\n        this._invalidated = invalidated;\n    }\n    hasTangentPoints() {\n        return false;\n    }\n    addControlPoint(point) {\n        this._controlPoints.push([point[0], point[1]]);\n        this.invalidated = true;\n    }\n    addControlPoints(points) {\n        points.forEach((point) => this.addControlPoint(point));\n    }\n    addControlPointAtU(u) {\n        const lineSegment = this._getLineSegmentAt(u);\n        const { start: startPoint, end: endPoint } = lineSegment.points;\n        const curveSegmentIndex = Math.floor(u);\n        const curveSegment = this._curveSegments[curveSegmentIndex];\n        const t = u - Math.floor(curveSegmentIndex);\n        const controlPointPos = [\n            startPoint[0] + t * (endPoint[0] - startPoint[0]),\n            startPoint[1] + t * (endPoint[1] - startPoint[1]),\n        ];\n        const insertIndex = this._controlPoints.indexOf(curveSegment.controlPoints.p1) + 1;\n        this._controlPoints.splice(insertIndex, 0, controlPointPos);\n        this.invalidated = true;\n        return {\n            index: insertIndex,\n            point: controlPointPos,\n        };\n    }\n    deleteControlPointByIndex(index) {\n        const minControlPoints = this._closed ? 3 : 1;\n        const canDelete = index >= 0 &&\n            index < this._controlPoints.length &&\n            this._controlPoints.length > minControlPoints;\n        if (!canDelete) {\n            return false;\n        }\n        this._controlPoints.splice(index, 1);\n        this.invalidated = true;\n        return true;\n    }\n    clearControlPoints() {\n        this._controlPoints = [];\n        this.invalidated = true;\n    }\n    setControlPoints(points) {\n        this.clearControlPoints();\n        this.addControlPoints(points);\n    }\n    updateControlPoint(index, newControlPoint) {\n        if (index < 0 || index >= this._controlPoints.length) {\n            throw new Error('Index out of bounds');\n        }\n        this._controlPoints[index] = [...newControlPoint];\n        this.invalidated = true;\n    }\n    getControlPoints() {\n        return this._controlPoints.map((controlPoint) => [\n            controlPoint[0],\n            controlPoint[1],\n        ]);\n    }\n    getClosestControlPoint(point) {\n        const controlPoints = this._controlPoints;\n        let minSquaredDist = Infinity;\n        let closestPointIndex = -1;\n        for (let i = 0, len = controlPoints.length; i < len; i++) {\n            const controlPoint = controlPoints[i];\n            const dx = point[0] - controlPoint[0];\n            const dy = point[1] - controlPoint[1];\n            const squaredDist = dx * dx + dy * dy;\n            if (squaredDist < minSquaredDist) {\n                minSquaredDist = squaredDist;\n                closestPointIndex = i;\n            }\n        }\n        return {\n            index: closestPointIndex,\n            point: closestPointIndex === -1\n                ? undefined\n                : [...controlPoints[closestPointIndex]],\n            distance: Math.sqrt(minSquaredDist),\n        };\n    }\n    getClosestControlPointWithinDistance(point, maxDist) {\n        const closestControlPoint = this.getClosestControlPoint(point);\n        return closestControlPoint.distance <= maxDist\n            ? closestControlPoint\n            : undefined;\n    }\n    getClosestPoint(point) {\n        this._update();\n        const curveSegmentsDistInfo = this._getCurveSegmmentsDistanceSquaredInfo(point);\n        if (!curveSegmentsDistInfo.length) {\n            return;\n        }\n        curveSegmentsDistInfo.sort((csA, csB) => csA.distanceSquared - csB.distanceSquared);\n        let closestPoint;\n        let closestPointCurveSegmentIndex = -1;\n        let minDistSquared = Infinity;\n        let minDistCurveSegment;\n        let minDistLineSegment;\n        for (let i = 0; i < curveSegmentsDistInfo.length; i++) {\n            const curveSegmentDistInfo = curveSegmentsDistInfo[i];\n            if (curveSegmentDistInfo.distanceSquared > minDistSquared) {\n                continue;\n            }\n            const { curveSegmentIndex, curveSegment } = curveSegmentDistInfo;\n            const { lineSegments } = curveSegment;\n            for (let j = 0; j < lineSegments.length; j++) {\n                const lineSegment = lineSegments[j];\n                const { point: lineSegPoint, distanceSquared: lineSegDistSquared } = math.lineSegment.distanceToPointSquaredInfo(lineSegment.points.start, lineSegment.points.end, point);\n                if (lineSegDistSquared < minDistSquared) {\n                    minDistLineSegment = lineSegment;\n                    closestPointCurveSegmentIndex = curveSegmentIndex;\n                    minDistCurveSegment = curveSegmentDistInfo.curveSegment;\n                    closestPoint = lineSegPoint;\n                    minDistSquared = lineSegDistSquared;\n                }\n            }\n        }\n        const curveSegmentLengthToPoint = minDistLineSegment.previousLineSegmentsLength +\n            math.point.distanceToPoint(minDistLineSegment.points.start, closestPoint);\n        const t = curveSegmentLengthToPoint / minDistCurveSegment.length;\n        const u = closestPointCurveSegmentIndex + t;\n        return {\n            point: closestPoint,\n            uValue: u,\n            distance: Math.sqrt(minDistSquared),\n        };\n    }\n    getClosestPointOnControlPointLines(point) {\n        const linePoints = [...this._controlPoints];\n        if (this._closed) {\n            linePoints.push(this._controlPoints[0]);\n        }\n        if (!linePoints.length) {\n            return;\n        }\n        let closestPoint;\n        let minDistSquared = Infinity;\n        let startPoint = linePoints[0];\n        for (let i = 1, len = linePoints.length; i < len; i++) {\n            const endPoint = linePoints[i];\n            const { point: lineSegPoint, distanceSquared: lineSegDistSquared } = math.lineSegment.distanceToPointSquaredInfo(startPoint, endPoint, point);\n            if (lineSegDistSquared < minDistSquared) {\n                closestPoint = lineSegPoint;\n                minDistSquared = lineSegDistSquared;\n            }\n            startPoint = endPoint;\n        }\n        return {\n            point: closestPoint,\n            distance: Math.sqrt(minDistSquared),\n        };\n    }\n    getPolylinePoints() {\n        this._update();\n        return this._convertCurveSegmentsToPolyline(this._curveSegments);\n    }\n    getPreviewPolylinePoints(controlPointPreview, closeDistance) {\n        if (this._closed) {\n            return [];\n        }\n        this._update();\n        const closestControlPoint = this.getClosestControlPointWithinDistance(controlPointPreview, closeDistance);\n        const closeSpline = closestControlPoint?.index === 0;\n        const previewCurveSegments = this.getPreviewCurveSegments(controlPointPreview, closeSpline);\n        return previewCurveSegments?.length\n            ? this._convertCurveSegmentsToPolyline(previewCurveSegments)\n            : [];\n    }\n    isPointNearCurve(point, maxDist) {\n        this._update();\n        const curveSegments = this._getCurveSegmmentsWithinDistance(point, maxDist);\n        const maxDistSquared = maxDist * maxDist;\n        for (let i = 0; i < curveSegments.length; i++) {\n            const { lineSegments } = curveSegments[i];\n            for (let j = 0; j < lineSegments.length; j++) {\n                const lineSegment = lineSegments[j];\n                const lineDistSquared = math.lineSegment.distanceToPointSquared(lineSegment.points.start, lineSegment.points.end, point);\n                if (lineDistSquared <= maxDistSquared) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    containsPoint(point) {\n        this._update();\n        const controlPoints = this._controlPoints;\n        if (controlPoints.length < 3) {\n            return false;\n        }\n        const curveSegments = [...this._curveSegments];\n        const closingCurveSegment = this._getClosingCurveSegmentWithStraightLineSegment();\n        if (closingCurveSegment) {\n            curveSegments.push(closingCurveSegment);\n        }\n        let numIntersections = 0;\n        for (let i = 0; i < curveSegments.length; i++) {\n            const curveSegment = curveSegments[i];\n            const { aabb: curveSegAABB } = curveSegment;\n            const mayIntersectCurveSegment = point[0] <= curveSegAABB.maxX &&\n                point[1] >= curveSegAABB.minY &&\n                point[1] < curveSegAABB.maxY;\n            if (!mayIntersectCurveSegment) {\n                continue;\n            }\n            const { lineSegments } = curveSegment;\n            for (let i = 0; i < lineSegments.length; i++) {\n                const lineSegment = lineSegments[i];\n                const { aabb: lineSegmentAABB } = lineSegment;\n                const mayIntersectLineSegment = point[0] <= lineSegmentAABB.maxX &&\n                    point[1] >= lineSegmentAABB.minY &&\n                    point[1] < lineSegmentAABB.maxY;\n                if (mayIntersectLineSegment) {\n                    const { start: p1, end: p2 } = lineSegment.points;\n                    const isVerticalLine = p1[0] === p2[0];\n                    const xIntersection = ((point[1] - p1[1]) * (p2[0] - p1[0])) / (p2[1] - p1[1]) + p1[0];\n                    numIntersections +=\n                        isVerticalLine || point[0] <= xIntersection ? 1 : 0;\n                }\n            }\n        }\n        return numIntersections % 2 === 1;\n    }\n    _update() {\n        if (!this._invalidated) {\n            return;\n        }\n        const curveSegments = this.getSplineCurves();\n        let length = 0;\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n        for (let i = 0, len = curveSegments.length; i < len; i++) {\n            const { aabb: curveSegAABB, length: curveSegLength } = curveSegments[i];\n            minX = minX <= curveSegAABB.minX ? minX : curveSegAABB.minX;\n            minY = minY <= curveSegAABB.minY ? minY : curveSegAABB.minY;\n            maxX = maxX >= curveSegAABB.maxX ? maxX : curveSegAABB.maxX;\n            maxY = maxY >= curveSegAABB.maxY ? maxY : curveSegAABB.maxY;\n            length += curveSegLength;\n        }\n        this._curveSegments = curveSegments;\n        this._aabb = { minX, minY, maxX, maxY };\n        this._length = length;\n        this._invalidated = false;\n    }\n    _convertCurveSegmentsToPolyline(curveSegments) {\n        this._update();\n        const polylinePoints = [];\n        curveSegments.forEach(({ lineSegments }, curveSegIndex) => {\n            lineSegments.forEach((lineSegment, lineSegIndex) => {\n                if (curveSegIndex === 0 && lineSegIndex === 0) {\n                    polylinePoints.push([...lineSegment.points.start]);\n                }\n                polylinePoints.push([...lineSegment.points.end]);\n            });\n        });\n        return polylinePoints;\n    }\n    _getCurveSegmmentsDistanceSquaredInfo(point) {\n        this._update();\n        const curveSegmentsDistanceSquared = [];\n        const { _curveSegments: curveSegments } = this;\n        for (let i = 0; i < curveSegments.length; i++) {\n            const curveSegment = curveSegments[i];\n            const distanceSquared = math.aabb.distanceToPointSquared(curveSegment.aabb, point);\n            curveSegmentsDistanceSquared.push({\n                curveSegmentIndex: i,\n                curveSegment,\n                distanceSquared,\n            });\n        }\n        return curveSegmentsDistanceSquared;\n    }\n    _getCurveSegmmentsWithinDistance(point, maxDist) {\n        this._update();\n        const maxDistSquared = maxDist * maxDist;\n        if (math.aabb.distanceToPointSquared(this.aabb, point) > maxDistSquared) {\n            return [];\n        }\n        const curveSegmentsDistance = this._getCurveSegmmentsDistanceSquaredInfo(point);\n        const curveSegmentsWithinRange = [];\n        for (let i = 0, len = curveSegmentsDistance.length; i < len; i++) {\n            const { curveSegment, distanceSquared: curveSegmentDistSquared } = curveSegmentsDistance[i];\n            if (curveSegmentDistSquared <= maxDistSquared) {\n                curveSegmentsWithinRange.push(curveSegment);\n            }\n        }\n        return curveSegmentsWithinRange;\n    }\n    _getLineSegmentAt(u) {\n        this._update();\n        const curveSegmentIndex = Math.floor(u);\n        const t = u - curveSegmentIndex;\n        const curveSegment = this._curveSegments[curveSegmentIndex];\n        const { lineSegments } = curveSegment;\n        const pointLength = curveSegment.length * t;\n        for (let i = 0; i < lineSegments.length; i++) {\n            const lineSegment = lineSegments[i];\n            const lengthEnd = lineSegment.previousLineSegmentsLength + lineSegment.length;\n            if (pointLength >= lineSegment.previousLineSegmentsLength &&\n                pointLength <= lengthEnd) {\n                return lineSegment;\n            }\n        }\n    }\n    _getClosingCurveSegmentWithStraightLineSegment() {\n        if (this.closed) {\n            return;\n        }\n        const controlPoints = this._controlPoints;\n        const startControlPoint = controlPoints[0];\n        const endControlPoint = controlPoints[controlPoints.length - 1];\n        const closingLineSegment = {\n            points: {\n                start: [...startControlPoint],\n                end: [...endControlPoint],\n            },\n            aabb: {\n                minX: Math.min(startControlPoint[0], endControlPoint[0]),\n                minY: Math.min(startControlPoint[1], endControlPoint[1]),\n                maxX: Math.max(startControlPoint[0], endControlPoint[0]),\n                maxY: Math.max(startControlPoint[1], endControlPoint[1]),\n            },\n        };\n        return {\n            aabb: {\n                minX: closingLineSegment.aabb.minX,\n                minY: closingLineSegment.aabb.minY,\n                maxX: closingLineSegment.aabb.maxX,\n                maxY: closingLineSegment.aabb.maxY,\n            },\n            lineSegments: [closingLineSegment],\n        };\n    }\n}\nexport { Spline as default, Spline };\n","import { utilities, getEnabledElement, cache, BaseVolumeViewport, } from '@cornerstonejs/core';\nimport BaseTool from './BaseTool';\nimport { getAnnotationManager } from '../../stateManagement/annotation/annotationState';\nimport triggerAnnotationRender from '../../utilities/triggerAnnotationRender';\nimport filterAnnotationsForDisplay from '../../utilities/planar/filterAnnotationsForDisplay';\nimport { getStyleProperty } from '../../stateManagement/annotation/config/helpers';\nimport { getState } from '../../stateManagement/annotation/config';\nclass AnnotationDisplayTool extends BaseTool {\n    constructor() {\n        super(...arguments);\n        this.onImageSpacingCalibrated = (evt) => {\n            const { element, imageId } = evt.detail;\n            const imageURI = utilities.imageIdToURI(imageId);\n            const annotationManager = getAnnotationManager();\n            const framesOfReference = annotationManager.getFramesOfReference();\n            framesOfReference.forEach((frameOfReference) => {\n                const frameOfReferenceSpecificAnnotations = annotationManager.getAnnotations(frameOfReference);\n                const toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[this.getToolName()];\n                if (!toolSpecificAnnotations || !toolSpecificAnnotations.length) {\n                    return;\n                }\n                toolSpecificAnnotations.forEach((annotation) => {\n                    if (!annotation.metadata?.referencedImageId) {\n                        return;\n                    }\n                    const referencedImageURI = utilities.imageIdToURI(annotation.metadata.referencedImageId);\n                    if (referencedImageURI === imageURI) {\n                        annotation.invalidated = true;\n                        annotation.data.cachedStats = {};\n                    }\n                });\n                triggerAnnotationRender(element);\n            });\n        };\n    }\n    filterInteractableAnnotationsForElement(element, annotations) {\n        if (!annotations?.length) {\n            return [];\n        }\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        return filterAnnotationsForDisplay(viewport, annotations);\n    }\n    static createAnnotation(...annotationBaseData) {\n        let annotation = {\n            annotationUID: null,\n            highlighted: true,\n            invalidated: true,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: this.toolName,\n            },\n            data: {\n                handles: {\n                    points: new Array(),\n                    activeHandleIndex: null,\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                },\n                cachedStats: {},\n                label: '',\n            },\n        };\n        for (const baseData of annotationBaseData) {\n            annotation = utilities.deepMerge(annotation, baseData);\n        }\n        return annotation;\n    }\n    createAnnotation(evt, points, ...annotationBaseData) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const { world: worldPos } = currentPoints;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, viewUp, position: cameraPosition } = camera;\n        const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n        const viewReference = viewport.getViewReference({ points: [worldPos] });\n        const annotation = AnnotationDisplayTool.createAnnotation({\n            metadata: {\n                toolName: this.getToolName(),\n                ...viewReference,\n                referencedImageId,\n                viewUp,\n                cameraPosition,\n            },\n            data: {\n                handles: {\n                    points: points || [],\n                },\n            },\n        }, ...annotationBaseData);\n        return annotation;\n    }\n    getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp) {\n        const targetId = this.getTargetId(viewport);\n        let referencedImageId = targetId.split(/^[a-zA-Z]+:/)[1];\n        if (viewport instanceof BaseVolumeViewport) {\n            const volumeId = utilities.getVolumeId(targetId);\n            const imageVolume = cache.getVolume(volumeId);\n            referencedImageId = utilities.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n        }\n        return referencedImageId;\n    }\n    getStyle(property, specifications, annotation) {\n        return getStyleProperty(property, specifications, getState(annotation), this.mode);\n    }\n}\nAnnotationDisplayTool.toolName = 'AnnotationDisplayTool';\nexport default AnnotationDisplayTool;\n","import { utilities } from '@cornerstonejs/core';\nimport ToolModes from '../../enums/ToolModes';\nconst { DefaultHistoryMemo } = utilities.HistoryMemo;\nclass BaseTool {\n    static { this.defaults = {\n        configuration: {\n            strategies: {},\n            defaultStrategy: undefined,\n            activeStrategy: undefined,\n            strategyOptions: {},\n        },\n    }; }\n    constructor(toolProps, defaultToolProps) {\n        const mergedDefaults = BaseTool.mergeDefaultProps(BaseTool.defaults, defaultToolProps);\n        const initialProps = utilities.deepMerge(mergedDefaults, toolProps);\n        const { configuration = {}, supportedInteractionTypes, toolGroupId, } = initialProps;\n        this.toolGroupId = toolGroupId;\n        this.supportedInteractionTypes = supportedInteractionTypes || [];\n        this.configuration = Object.assign({}, configuration);\n        this.mode = ToolModes.Disabled;\n    }\n    static mergeDefaultProps(defaultProps = {}, additionalProps) {\n        if (!additionalProps) {\n            return defaultProps;\n        }\n        return utilities.deepMerge(defaultProps, additionalProps);\n    }\n    get toolName() {\n        return this.getToolName();\n    }\n    getToolName() {\n        return this.constructor.toolName;\n    }\n    applyActiveStrategy(enabledElement, operationData) {\n        const { strategies, activeStrategy } = this.configuration;\n        return strategies[activeStrategy]?.call(this, enabledElement, operationData);\n    }\n    applyActiveStrategyCallback(enabledElement, operationData, callbackType, ...extraArgs) {\n        const { strategies, activeStrategy } = this.configuration;\n        if (!strategies[activeStrategy]) {\n            throw new Error(`applyActiveStrategyCallback: active strategy ${activeStrategy} not found, check tool configuration or spellings`);\n        }\n        return strategies[activeStrategy][callbackType]?.call(this, enabledElement, operationData, ...extraArgs);\n    }\n    setConfiguration(newConfiguration) {\n        this.configuration = utilities.deepMerge(this.configuration, newConfiguration);\n    }\n    setActiveStrategy(strategyName) {\n        this.setConfiguration({ activeStrategy: strategyName });\n    }\n    getTargetImageData(targetId) {\n        if (targetId.startsWith('imageId:')) {\n            const imageId = targetId.split('imageId:')[1];\n            const imageURI = utilities.imageIdToURI(imageId);\n            let viewports = utilities.getViewportsWithImageURI(imageURI);\n            if (!viewports || !viewports.length) {\n                return;\n            }\n            viewports = viewports.filter((viewport) => {\n                return viewport.getCurrentImageId() === imageId;\n            });\n            if (!viewports || !viewports.length) {\n                return;\n            }\n            return viewports[0].getImageData();\n        }\n        else if (targetId.startsWith('volumeId:')) {\n            const volumeId = utilities.getVolumeId(targetId);\n            const viewports = utilities.getViewportsWithVolumeId(volumeId);\n            if (!viewports || !viewports.length) {\n                return;\n            }\n            return viewports[0].getImageData();\n        }\n        else if (targetId.startsWith('videoId:')) {\n            const imageURI = utilities.imageIdToURI(targetId);\n            const viewports = utilities.getViewportsWithImageURI(imageURI);\n            if (!viewports || !viewports.length) {\n                return;\n            }\n            return viewports[0].getImageData();\n        }\n        else {\n            throw new Error('getTargetIdImage: targetId must start with \"imageId:\" or \"volumeId:\"');\n        }\n    }\n    getTargetId(viewport) {\n        const targetId = viewport.getViewReferenceId?.();\n        if (targetId) {\n            return targetId;\n        }\n        throw new Error('getTargetId: viewport must have a getViewReferenceId method');\n    }\n    undo() {\n        this.doneEditMemo();\n        DefaultHistoryMemo.undo();\n    }\n    redo() {\n        DefaultHistoryMemo.redo();\n    }\n    static createZoomPanMemo(viewport) {\n        const state = {\n            pan: viewport.getPan(),\n            zoom: viewport.getZoom(),\n        };\n        const zoomPanMemo = {\n            restoreMemo: () => {\n                const currentPan = viewport.getPan();\n                const currentZoom = viewport.getZoom();\n                viewport.setZoom(state.zoom);\n                viewport.setPan(state.pan);\n                viewport.render();\n                state.pan = currentPan;\n                state.zoom = currentZoom;\n            },\n        };\n        DefaultHistoryMemo.push(zoomPanMemo);\n        return zoomPanMemo;\n    }\n    doneEditMemo() {\n        if (this.memo?.commitMemo?.()) {\n            DefaultHistoryMemo.push(this.memo);\n        }\n        this.memo = null;\n    }\n    static startGroupRecording() {\n        DefaultHistoryMemo.startGroupRecording();\n    }\n    static endGroupRecording() {\n        DefaultHistoryMemo.endGroupRecording();\n    }\n}\nBaseTool.toolName = 'BaseTool';\nexport default BaseTool;\n","import { cache, getEnabledElementByViewportId, Enums, utilities, } from '@cornerstonejs/core';\nimport Representations from '../../../enums/SegmentationRepresentations';\nimport { handleContourSegmentation } from './contourHandler/handleContourSegmentation';\nimport { getSegmentation } from '../../../stateManagement/segmentation/getSegmentation';\nimport removeContourFromElement from './removeContourFromElement';\nimport { getPolySeg } from '../../../config';\nimport { computeAndAddRepresentation } from '../../../utilities/segmentation/computeAndAddRepresentation';\nimport { getUniqueSegmentIndices } from '../../../utilities/segmentation/getUniqueSegmentIndices';\nimport { getAnnotation } from '../../../stateManagement/annotation/annotationState';\nimport { vec3 } from 'gl-matrix';\nconst polySegConversionInProgressForViewportId = new Map();\nconst processedViewportSegmentations = new Map();\nfunction removeRepresentation(viewportId, segmentationId, renderImmediate = false) {\n    const enabledElement = getEnabledElementByViewportId(viewportId);\n    if (!enabledElement) {\n        return;\n    }\n    const { viewport } = enabledElement;\n    removeContourFromElement(viewportId, segmentationId);\n    if (!renderImmediate) {\n        return;\n    }\n    viewport.render();\n}\nasync function render(viewport, contourRepresentation) {\n    const { segmentationId } = contourRepresentation;\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        return;\n    }\n    let contourData = segmentation.representationData[Representations.Contour];\n    const polySeg = getPolySeg();\n    if (!contourData &&\n        getPolySeg()?.canComputeRequestedRepresentation(segmentationId, Representations.Contour) &&\n        !polySegConversionInProgressForViewportId.get(viewport.id)) {\n        polySegConversionInProgressForViewportId.set(viewport.id, true);\n        contourData = await computeAndAddRepresentation(segmentationId, Representations.Contour, () => polySeg.computeContourData(segmentationId, { viewport }), () => undefined);\n        polySegConversionInProgressForViewportId.set(viewport.id, false);\n    }\n    else if (!contourData && !getPolySeg()) {\n        console.debug(`No contour data found for segmentationId ${segmentationId} and PolySeg add-on is not configured. Unable to convert from other representations to contour. Please register PolySeg using cornerstoneTools.init({ addons: { polySeg } }) to enable automatic conversion.`);\n    }\n    if (!contourData) {\n        return;\n    }\n    if (!contourData.geometryIds?.length) {\n        return;\n    }\n    let hasContourDataButNotMatchingViewport = false;\n    const viewportNormal = viewport.getCamera().viewPlaneNormal;\n    if (contourData.annotationUIDsMap) {\n        hasContourDataButNotMatchingViewport = !_checkContourNormalsMatchViewport(contourData.annotationUIDsMap, viewportNormal);\n    }\n    if (contourData.geometryIds.length > 0) {\n        hasContourDataButNotMatchingViewport = !_checkContourGeometryMatchViewport(contourData.geometryIds, viewportNormal);\n    }\n    const viewportProcessed = processedViewportSegmentations.get(viewport.id) || new Set();\n    if (hasContourDataButNotMatchingViewport &&\n        !polySegConversionInProgressForViewportId.get(viewport.id) &&\n        !viewportProcessed.has(segmentationId) &&\n        viewport.viewportStatus === Enums.ViewportStatus.RENDERED) {\n        polySegConversionInProgressForViewportId.set(viewport.id, true);\n        const segmentIndices = getUniqueSegmentIndices(segmentationId);\n        const surfacesInfo = await polySeg.computeSurfaceData(segmentationId, {\n            segmentIndices,\n            viewport,\n        });\n        const geometryIds = surfacesInfo.geometryIds;\n        const pointsAndPolys = [];\n        for (const geometryId of geometryIds.values()) {\n            const geometry = cache.getGeometry(geometryId);\n            const data = geometry.data;\n            pointsAndPolys.push({\n                points: data.points,\n                polys: data.polys,\n                segmentIndex: data.segmentIndex,\n                id: data.segmentIndex,\n            });\n        }\n        const polyDataCache = await polySeg.clipAndCacheSurfacesForViewport(pointsAndPolys, viewport);\n        const rawResults = polySeg.extractContourData(polyDataCache);\n        const annotationUIDsMap = polySeg.createAndAddContourSegmentationsFromClippedSurfaces(rawResults, viewport, segmentationId);\n        contourData.annotationUIDsMap = new Map([\n            ...contourData.annotationUIDsMap,\n            ...annotationUIDsMap,\n        ]);\n        viewportProcessed.add(segmentationId);\n        processedViewportSegmentations.set(viewport.id, viewportProcessed);\n        polySegConversionInProgressForViewportId.set(viewport.id, false);\n    }\n    handleContourSegmentation(viewport, contourData.geometryIds, contourData.annotationUIDsMap, contourRepresentation);\n}\nfunction _checkContourGeometryMatchViewport(geometryIds, viewportNormal) {\n    let validGeometry = null;\n    let geometryData = null;\n    for (const geometryId of geometryIds) {\n        const geometry = cache.getGeometry(geometryId);\n        if (!geometry) {\n            continue;\n        }\n        const data = geometry.data;\n        if (data.contours?.[0]?.points?.length >= 3) {\n            validGeometry = geometry;\n            geometryData = data;\n            break;\n        }\n    }\n    if (!validGeometry || !geometryData) {\n        return false;\n    }\n    const contours = geometryData.contours;\n    const points = contours[0].points;\n    const point1 = points[0];\n    const point2 = points[1];\n    const point3 = points[2];\n    let normal = vec3.cross(vec3.create(), vec3.sub(vec3.create(), point2, point1), vec3.sub(vec3.create(), point3, point1));\n    normal = vec3.normalize(vec3.create(), normal);\n    const dotProduct = vec3.dot(normal, viewportNormal);\n    return Math.abs(dotProduct) > 0.9;\n}\nfunction _checkContourNormalsMatchViewport(annotationUIDsMap, viewportNormal) {\n    const annotationUIDs = Array.from(annotationUIDsMap.values())\n        .flat()\n        .map((uidSet) => Array.from(uidSet))\n        .flat();\n    const randomAnnotationUIDs = utilities.getRandomSampleFromArray(annotationUIDs, 3);\n    for (const annotationUID of randomAnnotationUIDs) {\n        const annotation = getAnnotation(annotationUID);\n        if (annotation?.metadata) {\n            if (!annotation.metadata.viewPlaneNormal) {\n                continue;\n            }\n            const annotationNormal = annotation.metadata.viewPlaneNormal;\n            const dotProduct = Math.abs(viewportNormal[0] * annotationNormal[0] +\n                viewportNormal[1] * annotationNormal[1] +\n                viewportNormal[2] * annotationNormal[2]);\n            if (Math.abs(dotProduct - 1) > 0.01) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nexport default {\n    render,\n    removeRepresentation,\n};\n","import { getEnabledElementByViewportId, VolumeViewport, } from '@cornerstonejs/core';\nimport addLabelmapToElement from './addLabelmapToElement';\nimport removeLabelmapFromElement from './removeLabelmapFromElement';\nimport { getActiveSegmentation } from '../../../stateManagement/segmentation/activeSegmentation';\nimport { getColorLUT } from '../../../stateManagement/segmentation/getColorLUT';\nimport { getCurrentLabelmapImageIdsForViewport } from '../../../stateManagement/segmentation/getCurrentLabelmapImageIdForViewport';\nimport { getSegmentation } from '../../../stateManagement/segmentation/getSegmentation';\nimport { segmentationStyle } from '../../../stateManagement/segmentation/SegmentationStyle';\nimport SegmentationRepresentations from '../../../enums/SegmentationRepresentations';\nimport { internalGetHiddenSegmentIndices } from '../../../stateManagement/segmentation/helpers/internalGetHiddenSegmentIndices';\nimport { getActiveSegmentIndex } from '../../../stateManagement/segmentation/getActiveSegmentIndex';\nimport { getLabelmapActorEntries } from '../../../stateManagement/segmentation/helpers/getSegmentationActor';\nimport { getPolySeg } from '../../../config';\nimport { computeAndAddRepresentation } from '../../../utilities/segmentation/computeAndAddRepresentation';\nimport { triggerSegmentationDataModified } from '../../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { defaultSegmentationStateManager } from '../../../stateManagement/segmentation/SegmentationStateManager';\nexport const MAX_NUMBER_COLORS = 255;\nconst labelMapConfigCache = new Map();\nlet polySegConversionInProgress = false;\nfunction removeRepresentation(viewportId, segmentationId, renderImmediate = false) {\n    const enabledElement = getEnabledElementByViewportId(viewportId);\n    labelMapConfigCache.forEach((value, key) => {\n        if (key.includes(segmentationId)) {\n            labelMapConfigCache.delete(key);\n        }\n    });\n    if (!enabledElement) {\n        return;\n    }\n    const { viewport } = enabledElement;\n    removeLabelmapFromElement(viewport.element, segmentationId);\n    if (!renderImmediate) {\n        return;\n    }\n    viewport.render();\n}\nasync function render(viewport, representation) {\n    const { segmentationId, config } = representation;\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        console.warn('No segmentation found for segmentationId: ', segmentationId);\n        return;\n    }\n    let labelmapData = segmentation.representationData[SegmentationRepresentations.Labelmap];\n    let labelmapActorEntries = getLabelmapActorEntries(viewport.id, segmentationId);\n    if (!labelmapData &&\n        getPolySeg()?.canComputeRequestedRepresentation(segmentationId, SegmentationRepresentations.Labelmap) &&\n        !polySegConversionInProgress) {\n        polySegConversionInProgress = true;\n        const polySeg = getPolySeg();\n        labelmapData = await computeAndAddRepresentation(segmentationId, SegmentationRepresentations.Labelmap, () => polySeg.computeLabelmapData(segmentationId, { viewport }), () => null, () => {\n            defaultSegmentationStateManager.processLabelmapRepresentationAddition(viewport.id, segmentationId);\n            setTimeout(() => {\n                triggerSegmentationDataModified(segmentationId);\n            }, 0);\n        });\n        if (!labelmapData) {\n            throw new Error(`No labelmap data found for segmentationId ${segmentationId}.`);\n        }\n        polySegConversionInProgress = false;\n    }\n    else if (!labelmapData && !getPolySeg()) {\n        console.debug(`No labelmap data found for segmentationId ${segmentationId} and PolySeg add-on is not configured. Unable to convert from other representations to labelmap. Please register PolySeg using cornerstoneTools.init({ addons: { polySeg } }) to enable automatic conversion.`);\n    }\n    if (!labelmapData) {\n        return;\n    }\n    if (viewport instanceof VolumeViewport) {\n        if (!labelmapActorEntries?.length) {\n            await _addLabelmapToViewport(viewport, labelmapData, segmentationId, config);\n        }\n        labelmapActorEntries = getLabelmapActorEntries(viewport.id, segmentationId);\n    }\n    else {\n        const labelmapImageIds = getCurrentLabelmapImageIdsForViewport(viewport.id, segmentationId);\n        if (!labelmapImageIds?.length) {\n            return;\n        }\n        if (!labelmapActorEntries) {\n            await _addLabelmapToViewport(viewport, labelmapData, segmentationId, config);\n        }\n        labelmapActorEntries = getLabelmapActorEntries(viewport.id, segmentationId);\n    }\n    if (!labelmapActorEntries?.length) {\n        return;\n    }\n    for (const labelmapActorEntry of labelmapActorEntries) {\n        _setLabelmapColorAndOpacity(viewport.id, labelmapActorEntry, representation);\n    }\n}\nfunction _setLabelmapColorAndOpacity(viewportId, labelmapActorEntry, segmentationRepresentation) {\n    const { segmentationId } = segmentationRepresentation;\n    const { cfun, ofun } = segmentationRepresentation.config;\n    const { colorLUTIndex } = segmentationRepresentation;\n    const activeSegmentation = getActiveSegmentation(viewportId);\n    const isActiveLabelmap = activeSegmentation?.segmentationId === segmentationId;\n    const labelmapStyle = segmentationStyle.getStyle({\n        viewportId,\n        type: SegmentationRepresentations.Labelmap,\n        segmentationId,\n    });\n    const renderInactiveSegmentations = segmentationStyle.getRenderInactiveSegmentations(viewportId);\n    const colorLUT = getColorLUT(colorLUTIndex);\n    const numColors = Math.min(256, colorLUT.length);\n    const { outlineWidth, renderOutline, outlineOpacity, activeSegmentOutlineWidthDelta, } = _getLabelmapConfig(labelmapStyle, isActiveLabelmap);\n    const segmentsHidden = internalGetHiddenSegmentIndices(viewportId, {\n        segmentationId,\n        type: SegmentationRepresentations.Labelmap,\n    });\n    for (let i = 0; i < numColors; i++) {\n        const segmentIndex = i;\n        const segmentColor = colorLUT[segmentIndex];\n        const perSegmentStyle = segmentationStyle.getStyle({\n            viewportId,\n            type: SegmentationRepresentations.Labelmap,\n            segmentationId,\n            segmentIndex,\n        });\n        const segmentSpecificLabelmapConfig = perSegmentStyle;\n        const { fillAlpha, outlineWidth, renderFill, renderOutline } = _getLabelmapConfig(labelmapStyle, isActiveLabelmap, segmentSpecificLabelmapConfig);\n        const { forceOpacityUpdate, forceColorUpdate } = _needsTransferFunctionUpdate(viewportId, segmentationId, segmentIndex, {\n            fillAlpha,\n            renderFill,\n            renderOutline,\n            segmentColor,\n            outlineWidth,\n            segmentsHidden: segmentsHidden,\n            cfun,\n            ofun,\n        });\n        if (forceColorUpdate) {\n            cfun.addRGBPoint(segmentIndex, segmentColor[0] / MAX_NUMBER_COLORS, segmentColor[1] / MAX_NUMBER_COLORS, segmentColor[2] / MAX_NUMBER_COLORS);\n        }\n        if (forceOpacityUpdate) {\n            if (renderFill) {\n                const segmentOpacity = segmentsHidden.has(segmentIndex)\n                    ? 0\n                    : (segmentColor[3] / 255) * fillAlpha;\n                ofun.removePoint(segmentIndex);\n                ofun.addPointLong(segmentIndex, segmentOpacity, 0.5, 1.0);\n            }\n            else {\n                ofun.addPointLong(segmentIndex, 0.01, 0.5, 1.0);\n            }\n        }\n    }\n    ofun.setClamping(false);\n    const labelmapActor = labelmapActorEntry.actor;\n    const { preLoad } = labelmapActor.get?.('preLoad') || { preLoad: null };\n    if (preLoad) {\n        preLoad({ cfun, ofun, actor: labelmapActor });\n    }\n    else {\n        labelmapActor.getProperty().setRGBTransferFunction(0, cfun);\n        labelmapActor.getProperty().setScalarOpacity(0, ofun);\n        labelmapActor.getProperty().setInterpolationTypeToNearest();\n    }\n    if (renderOutline) {\n        labelmapActor.getProperty().setUseLabelOutline(renderOutline);\n        labelmapActor.getProperty().setLabelOutlineOpacity(outlineOpacity);\n        const activeSegmentIndex = getActiveSegmentIndex(segmentationRepresentation.segmentationId);\n        const outlineWidths = new Array(numColors - 1);\n        for (let i = 1; i < numColors; i++) {\n            const isHidden = segmentsHidden.has(i);\n            if (isHidden) {\n                outlineWidths[i - 1] = 0;\n                continue;\n            }\n            outlineWidths[i - 1] =\n                i === activeSegmentIndex\n                    ? outlineWidth + activeSegmentOutlineWidthDelta\n                    : outlineWidth;\n        }\n        labelmapActor.getProperty().setLabelOutlineThickness(outlineWidths);\n        labelmapActor.modified();\n        labelmapActor.getProperty().modified();\n        labelmapActor.getMapper().modified();\n    }\n    else {\n        labelmapActor\n            .getProperty()\n            .setLabelOutlineThickness(new Array(numColors - 1).fill(0));\n    }\n    const visible = isActiveLabelmap || renderInactiveSegmentations;\n    labelmapActor.setVisibility(visible);\n}\nfunction _getLabelmapConfig(labelmapConfig, isActiveLabelmap, segmentsLabelmapConfig) {\n    const segmentLabelmapConfig = segmentsLabelmapConfig || {};\n    const configToUse = {\n        ...labelmapConfig,\n        ...segmentLabelmapConfig,\n    };\n    const fillAlpha = isActiveLabelmap\n        ? configToUse.fillAlpha\n        : configToUse.fillAlphaInactive;\n    const outlineWidth = isActiveLabelmap\n        ? configToUse.outlineWidth\n        : configToUse.outlineWidthInactive;\n    const renderFill = isActiveLabelmap\n        ? configToUse.renderFill\n        : configToUse.renderFillInactive;\n    const renderOutline = isActiveLabelmap\n        ? configToUse.renderOutline\n        : configToUse.renderOutlineInactive;\n    const outlineOpacity = isActiveLabelmap\n        ? configToUse.outlineOpacity\n        : configToUse.outlineOpacityInactive;\n    const activeSegmentOutlineWidthDelta = configToUse.activeSegmentOutlineWidthDelta;\n    return {\n        fillAlpha,\n        outlineWidth,\n        renderFill,\n        renderOutline,\n        outlineOpacity,\n        activeSegmentOutlineWidthDelta,\n    };\n}\nfunction _needsTransferFunctionUpdate(viewportId, segmentationId, segmentIndex, { fillAlpha, renderFill, renderOutline, segmentColor, outlineWidth, segmentsHidden, cfun, ofun, }) {\n    const cacheUID = `${viewportId}-${segmentationId}-${segmentIndex}`;\n    const oldConfig = labelMapConfigCache.get(cacheUID);\n    if (!oldConfig) {\n        labelMapConfigCache.set(cacheUID, {\n            fillAlpha,\n            renderFill,\n            renderOutline,\n            outlineWidth,\n            segmentColor: segmentColor.slice(),\n            segmentsHidden: new Set(segmentsHidden),\n            cfunMTime: cfun.getMTime(),\n            ofunMTime: ofun.getMTime(),\n        });\n        return {\n            forceOpacityUpdate: true,\n            forceColorUpdate: true,\n        };\n    }\n    const { fillAlpha: oldFillAlpha, renderFill: oldRenderFill, renderOutline: oldRenderOutline, outlineWidth: oldOutlineWidth, segmentColor: oldSegmentColor, segmentsHidden: oldSegmentsHidden, cfunMTime: oldCfunMTime, ofunMTime: oldOfunMTime, } = oldConfig;\n    const forceColorUpdate = oldSegmentColor[0] !== segmentColor[0] ||\n        oldSegmentColor[1] !== segmentColor[1] ||\n        oldSegmentColor[2] !== segmentColor[2];\n    const forceOpacityUpdate = oldSegmentColor[3] !== segmentColor[3] ||\n        oldFillAlpha !== fillAlpha ||\n        oldRenderFill !== renderFill ||\n        oldRenderOutline !== renderOutline ||\n        oldOutlineWidth !== outlineWidth ||\n        oldSegmentsHidden !== segmentsHidden;\n    if (forceOpacityUpdate || forceColorUpdate) {\n        labelMapConfigCache.set(cacheUID, {\n            fillAlpha,\n            renderFill,\n            renderOutline,\n            outlineWidth,\n            segmentColor: segmentColor.slice(),\n            segmentsHidden: new Set(segmentsHidden),\n            cfunMTime: cfun.getMTime(),\n            ofunMTime: ofun.getMTime(),\n        });\n    }\n    return {\n        forceOpacityUpdate,\n        forceColorUpdate,\n    };\n}\nasync function _addLabelmapToViewport(viewport, labelmapData, segmentationId, config) {\n    const result = await addLabelmapToElement(viewport.element, labelmapData, segmentationId, config);\n    return result || undefined;\n}\nexport default {\n    render,\n    removeRepresentation,\n};\nexport { render, removeRepresentation };\n","import { cache, getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport Representations from '../../../enums/SegmentationRepresentations';\nimport removeSurfaceFromElement from './removeSurfaceFromElement';\nimport addOrUpdateSurfaceToElement from './addOrUpdateSurfaceToElement';\nimport { getSegmentation } from '../../../stateManagement/segmentation/getSegmentation';\nimport { getColorLUT } from '../../../stateManagement/segmentation/getColorLUT';\nimport { getPolySeg } from '../../../config';\nimport { computeAndAddRepresentation } from '../../../utilities/segmentation/computeAndAddRepresentation';\nimport { internalGetHiddenSegmentIndices } from '../../../stateManagement/segmentation/helpers/internalGetHiddenSegmentIndices';\nfunction removeRepresentation(viewportId, segmentationId, renderImmediate = false) {\n    const enabledElement = getEnabledElementByViewportId(viewportId);\n    if (!enabledElement) {\n        return;\n    }\n    const { viewport } = enabledElement;\n    removeSurfaceFromElement(viewport.element, segmentationId);\n    if (!renderImmediate) {\n        return;\n    }\n    viewport.render();\n}\nasync function render(viewport, representation) {\n    const { segmentationId, type } = representation;\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        return;\n    }\n    let SurfaceData = segmentation.representationData[Representations.Surface];\n    if (!SurfaceData &&\n        getPolySeg()?.canComputeRequestedRepresentation(segmentationId, Representations.Surface)) {\n        const polySeg = getPolySeg();\n        SurfaceData = await computeAndAddRepresentation(segmentationId, Representations.Surface, () => polySeg.computeSurfaceData(segmentationId, { viewport }), () => polySeg.updateSurfaceData(segmentationId, { viewport }));\n        if (!SurfaceData) {\n            throw new Error(`No Surface data found for segmentationId ${segmentationId} even we tried to compute it`);\n        }\n    }\n    else if (!SurfaceData && !getPolySeg()) {\n        console.debug(`No surface data found for segmentationId ${segmentationId} and PolySeg add-on is not configured. Unable to convert from other representations to surface. Please register PolySeg using cornerstoneTools.init({ addons: { polySeg } }) to enable automatic conversion.`);\n    }\n    if (!SurfaceData) {\n        console.warn(`No Surface data found for segmentationId ${segmentationId}. Skipping render.`);\n        return;\n    }\n    const { geometryIds } = SurfaceData;\n    if (!geometryIds?.size) {\n        console.warn(`No Surfaces found for segmentationId ${segmentationId}. Skipping render.`);\n    }\n    const { colorLUTIndex } = representation;\n    const colorLUT = getColorLUT(colorLUTIndex);\n    const surfaces = [];\n    geometryIds.forEach((geometryId) => {\n        const geometry = cache.getGeometry(geometryId);\n        if (!geometry?.data) {\n            console.warn(`No Surfaces found for geometryId ${geometryId}. Skipping render.`);\n            return;\n        }\n        const { segmentIndex } = geometry.data;\n        const hiddenSegments = internalGetHiddenSegmentIndices(viewport.id, {\n            segmentationId,\n            type,\n        });\n        const isHidden = hiddenSegments.has(segmentIndex);\n        const surface = geometry.data;\n        const color = colorLUT[segmentIndex];\n        surface.color = color.slice(0, 3);\n        surface.visible = !isHidden;\n        surfaces.push(surface);\n        addOrUpdateSurfaceToElement(viewport, surface, segmentationId);\n    });\n    viewport.render();\n}\nexport default {\n    render,\n    removeRepresentation,\n};\nexport { render, removeRepresentation };\n","import { getEnabledElement, eventTarget } from '@cornerstonejs/core';\nimport { vec3, vec2 } from 'gl-matrix';\nimport { Events, ToolModes, StrategyCallbacks } from '../../enums';\nimport { fillInsideSphere, thresholdInsideSphere, thresholdInsideSphereIsland, } from './strategies/fillSphere';\nimport { eraseInsideSphere } from './strategies/eraseSphere';\nimport { thresholdInsideCircle, fillInsideCircle, } from './strategies/fillCircle';\nimport { eraseInsideCircle } from './strategies/eraseCircle';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nimport { getStrategyData } from './strategies/utils/getStrategyData';\nclass BrushTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE_CIRCLE: fillInsideCircle,\n                ERASE_INSIDE_CIRCLE: eraseInsideCircle,\n                FILL_INSIDE_SPHERE: fillInsideSphere,\n                ERASE_INSIDE_SPHERE: eraseInsideSphere,\n                THRESHOLD_INSIDE_CIRCLE: thresholdInsideCircle,\n                THRESHOLD_INSIDE_SPHERE: thresholdInsideSphere,\n                THRESHOLD_INSIDE_SPHERE_WITH_ISLAND_REMOVAL: thresholdInsideSphereIsland,\n            },\n            defaultStrategy: 'FILL_INSIDE_CIRCLE',\n            activeStrategy: 'FILL_INSIDE_CIRCLE',\n            brushSize: 25,\n            useCenterSegmentIndex: false,\n            preview: {\n                enabled: false,\n                previewColors: {\n                    0: [255, 255, 255, 128],\n                },\n                previewTimeMs: 250,\n                previewMoveDistance: 8,\n                dragMoveDistance: 4,\n                dragTimeMs: 500,\n            },\n            actions: {\n                [StrategyCallbacks.AcceptPreview]: {\n                    method: StrategyCallbacks.AcceptPreview,\n                    bindings: [\n                        {\n                            key: 'Enter',\n                        },\n                    ],\n                },\n                [StrategyCallbacks.RejectPreview]: {\n                    method: StrategyCallbacks.RejectPreview,\n                    bindings: [\n                        {\n                            key: 'Escape',\n                        },\n                    ],\n                },\n                [StrategyCallbacks.Interpolate]: {\n                    method: StrategyCallbacks.Interpolate,\n                    bindings: [\n                        {\n                            key: 'i',\n                        },\n                    ],\n                    configuration: {\n                        useBallStructuringElement: true,\n                        noUseDistanceTransform: true,\n                        noUseExtrapolation: true,\n                    },\n                },\n                interpolateExtrapolation: {\n                    method: StrategyCallbacks.Interpolate,\n                    bindings: [\n                        {\n                            key: 'e',\n                        },\n                    ],\n                    configuration: {},\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._lastDragInfo = null;\n        this.onSetToolPassive = (evt) => {\n            this.disableCursor();\n        };\n        this.onSetToolEnabled = () => {\n            this.disableCursor();\n        };\n        this.onSetToolDisabled = (evt) => {\n            this.disableCursor();\n        };\n        this.preMouseDownCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this._editData = this.createEditData(element);\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            this._previewData.isDrag = false;\n            this._previewData.timerStart = Date.now();\n            const canvasPoint = vec2.clone(currentPoints.canvas);\n            const worldPoint = viewport.canvasToWorld([\n                canvasPoint[0],\n                canvasPoint[1],\n            ]);\n            this._lastDragInfo = {\n                canvas: canvasPoint,\n                world: vec3.clone(worldPoint),\n            };\n            const hoverData = this._hoverData || this.createHoverData(element);\n            triggerAnnotationRenderForViewportUIDs(hoverData.viewportIdsToRender);\n            const operationData = this.getOperationData(element);\n            this.applyActiveStrategyCallback(enabledElement, operationData, StrategyCallbacks.OnInteractionStart);\n            return true;\n        };\n        this.mouseMoveCallback = (evt) => {\n            if (this.mode === ToolModes.Active) {\n                this.updateCursor(evt);\n                if (!this.configuration.preview.enabled) {\n                    return;\n                }\n                const { previewTimeMs, previewMoveDistance, dragMoveDistance } = this.configuration.preview;\n                const { currentPoints, element } = evt.detail;\n                const { canvas } = currentPoints;\n                const { startPoint, timer, timerStart, isDrag } = this._previewData;\n                if (isDrag) {\n                    return;\n                }\n                const delta = vec2.distance(canvas, startPoint);\n                const time = Date.now() - timerStart;\n                if (delta > previewMoveDistance ||\n                    (time > previewTimeMs && delta > dragMoveDistance)) {\n                    if (timer) {\n                        window.clearTimeout(timer);\n                        this._previewData.timer = null;\n                    }\n                    if (!isDrag) {\n                        this.rejectPreview(element);\n                    }\n                }\n                if (!this._previewData.timer) {\n                    const timer = window.setTimeout(this.previewCallback, 250);\n                    Object.assign(this._previewData, {\n                        timerStart: Date.now(),\n                        timer,\n                        startPoint: canvas,\n                        element,\n                    });\n                }\n            }\n        };\n        this.previewCallback = () => {\n            if (this._previewData.isDrag) {\n                this._previewData.timer = null;\n                return;\n            }\n            this._previewData.timer = null;\n            const operationData = this.getOperationData(this._previewData.element);\n            const enabledElement = getEnabledElement(this._previewData.element);\n            if (!enabledElement) {\n                return;\n            }\n            const { viewport } = enabledElement;\n            const activeStrategy = this.configuration.activeStrategy;\n            const strategyData = getStrategyData({\n                operationData,\n                viewport,\n                strategy: activeStrategy,\n            });\n            if (!operationData) {\n                return;\n            }\n            const memo = this.createMemo(operationData.segmentationId, strategyData.segmentationVoxelManager);\n            this._previewData.preview = this.applyActiveStrategyCallback(getEnabledElement(this._previewData.element), {\n                ...operationData,\n                ...strategyData,\n                memo,\n            }, StrategyCallbacks.Preview);\n        };\n        this._dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.updateCursor(evt);\n            const { viewportIdsToRender } = this._hoverData;\n            triggerAnnotationRenderForViewportUIDs(viewportIdsToRender);\n            const delta = vec2.distance(currentPoints.canvas, this._previewData.startPoint);\n            const { dragTimeMs, dragMoveDistance } = this.configuration.preview;\n            if (!this._previewData.isDrag &&\n                Date.now() - this._previewData.timerStart < dragTimeMs &&\n                delta < dragMoveDistance) {\n                return;\n            }\n            if (this._previewData.timer) {\n                window.clearTimeout(this._previewData.timer);\n                this._previewData.timer = null;\n            }\n            if (!this._lastDragInfo) {\n                const startCanvas = this._previewData.startPoint;\n                const startWorld = viewport.canvasToWorld([\n                    startCanvas[0],\n                    startCanvas[1],\n                ]);\n                this._lastDragInfo = {\n                    canvas: vec2.clone(startCanvas),\n                    world: vec3.clone(startWorld),\n                };\n            }\n            const currentCanvas = currentPoints.canvas;\n            const currentWorld = viewport.canvasToWorld([\n                currentCanvas[0],\n                currentCanvas[1],\n            ]);\n            this._hoverData = this.createHoverData(element, currentCanvas);\n            this._calculateCursor(element, currentCanvas);\n            const operationData = this.getOperationData(element);\n            operationData.strokePointsWorld = [\n                vec3.clone(this._lastDragInfo.world),\n                vec3.clone(currentWorld),\n            ];\n            this._previewData.preview = this.applyActiveStrategy(enabledElement, operationData);\n            const currentCanvasClone = vec2.clone(currentCanvas);\n            this._lastDragInfo = {\n                canvas: currentCanvasClone,\n                world: vec3.clone(currentWorld),\n            };\n            this._previewData.element = element;\n            this._previewData.timerStart = Date.now() + dragTimeMs;\n            this._previewData.isDrag = true;\n            this._previewData.startPoint = currentCanvasClone;\n        };\n        this._endCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const operationData = this.getOperationData(element);\n            if (!this._previewData.preview && !this._previewData.isDrag) {\n                this.applyActiveStrategy(enabledElement, operationData);\n            }\n            this.doneEditMemo();\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.updateCursor(evt);\n            this._editData = null;\n            this._lastDragInfo = null;\n            this.applyActiveStrategyCallback(enabledElement, operationData, StrategyCallbacks.OnInteractionEnd);\n            if (!this._previewData.isDrag) {\n                this.acceptPreview(element);\n            }\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n    }\n    disableCursor() {\n        this._hoverData = undefined;\n        this.rejectPreview();\n    }\n    updateCursor(evt) {\n        const eventData = evt.detail;\n        const { element } = eventData;\n        const { currentPoints } = eventData;\n        const centerCanvas = currentPoints.canvas;\n        this._hoverData = this.createHoverData(element, centerCanvas);\n        this._calculateCursor(element, centerCanvas);\n        if (!this._hoverData) {\n            return;\n        }\n        triggerAnnotationRenderForViewportUIDs(this._hoverData.viewportIdsToRender);\n    }\n    _calculateCursor(element, centerCanvas) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { canvasToWorld } = viewport;\n        const camera = viewport.getCamera();\n        const { brushSize } = this.configuration;\n        const viewUp = vec3.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);\n        const viewPlaneNormal = vec3.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);\n        const viewRight = vec3.create();\n        vec3.cross(viewRight, viewUp, viewPlaneNormal);\n        const centerCursorInWorld = canvasToWorld([\n            centerCanvas[0],\n            centerCanvas[1],\n        ]);\n        const bottomCursorInWorld = vec3.create();\n        const topCursorInWorld = vec3.create();\n        const leftCursorInWorld = vec3.create();\n        const rightCursorInWorld = vec3.create();\n        for (let i = 0; i <= 2; i++) {\n            bottomCursorInWorld[i] = centerCursorInWorld[i] - viewUp[i] * brushSize;\n            topCursorInWorld[i] = centerCursorInWorld[i] + viewUp[i] * brushSize;\n            leftCursorInWorld[i] = centerCursorInWorld[i] - viewRight[i] * brushSize;\n            rightCursorInWorld[i] = centerCursorInWorld[i] + viewRight[i] * brushSize;\n        }\n        if (!this._hoverData) {\n            return;\n        }\n        const { brushCursor } = this._hoverData;\n        const { data } = brushCursor;\n        if (data.handles === undefined) {\n            data.handles = {};\n        }\n        data.handles.points = [\n            bottomCursorInWorld,\n            topCursorInWorld,\n            leftCursorInWorld,\n            rightCursorInWorld,\n        ];\n        const activeStrategy = this.configuration.activeStrategy;\n        const strategy = this.configuration.strategies[activeStrategy];\n        if (typeof strategy?.computeInnerCircleRadius === 'function') {\n            strategy.computeInnerCircleRadius({\n                configuration: this.configuration,\n                viewport,\n            });\n        }\n        data.invalidated = false;\n    }\n    getStatistics(element, segmentIndices) {\n        if (!element) {\n            return;\n        }\n        const enabledElement = getEnabledElement(element);\n        const stats = this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.GetStatistics, segmentIndices);\n        return stats;\n    }\n    rejectPreview(element = this._previewData.element) {\n        if (!element) {\n            return;\n        }\n        this.doneEditMemo();\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.RejectPreview);\n        this._previewData.preview = null;\n        this._previewData.isDrag = false;\n    }\n    acceptPreview(element = this._previewData.element) {\n        if (!element) {\n            return;\n        }\n        super.acceptPreview(element);\n    }\n    interpolate(element, config) {\n        if (!element) {\n            return;\n        }\n        const enabledElement = getEnabledElement(element);\n        this._previewData.preview = this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.Interpolate, config.configuration);\n        this._previewData.isDrag = true;\n    }\n    invalidateBrushCursor() {\n        if (this._hoverData === undefined) {\n            return;\n        }\n        const { data } = this._hoverData.brushCursor;\n        const { viewport } = this._hoverData;\n        data.invalidated = true;\n        const { segmentColor } = this.getActiveSegmentationData(viewport) || {};\n        this._hoverData.brushCursor.metadata.segmentColor = segmentColor;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this._hoverData) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const viewportIdsToRender = this._hoverData.viewportIdsToRender;\n        if (!viewportIdsToRender.includes(viewport.id)) {\n            return;\n        }\n        const brushCursor = this._hoverData.brushCursor;\n        if (brushCursor.data.invalidated === true) {\n            const { centerCanvas } = this._hoverData;\n            const { element } = viewport;\n            this._calculateCursor(element, centerCanvas);\n        }\n        const toolMetadata = brushCursor.metadata;\n        if (!toolMetadata) {\n            return;\n        }\n        const annotationUID = toolMetadata.brushCursorUID;\n        const data = brushCursor.data;\n        const { points } = data.handles;\n        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n        const bottom = canvasCoordinates[0];\n        const top = canvasCoordinates[1];\n        const center = [\n            Math.floor((bottom[0] + top[0]) / 2),\n            Math.floor((bottom[1] + top[1]) / 2),\n        ];\n        const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n        const color = `rgb(${toolMetadata.segmentColor?.slice(0, 3) || [0, 0, 0]})`;\n        if (!viewport.getRenderingEngine()) {\n            console.warn('Rendering Engine has been destroyed');\n            return;\n        }\n        const circleUID = '0';\n        drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n            color,\n            lineDash: this.centerSegmentIndexInfo.segmentIndex === 0 ? [1, 2] : null,\n        });\n        const { dynamicRadiusInCanvas } = this.configuration?.threshold || {\n            dynamicRadiusInCanvas: 0,\n        };\n        if (dynamicRadiusInCanvas) {\n            const circleUID1 = '1';\n            drawCircleSvg(svgDrawingHelper, annotationUID, circleUID1, center, dynamicRadiusInCanvas, {\n                color,\n            });\n        }\n    }\n}\nBrushTool.toolName = 'Brush';\nexport default BrushTool;\n","import { StackViewport, cache, getEnabledElement, utilities as csUtils, utilities as coreUtils, } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { addAnnotation, removeAnnotation, getAnnotations, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport throttle from '../../utilities/throttle';\nimport debounce from '../../utilities/debounce';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { hideElementCursor, resetElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport CircleROITool from '../annotation/CircleROITool';\nimport { getCanvasCircleCorners, getCanvasCircleRadius, } from '../../utilities/math/circle';\nimport { getCalibratedLengthUnitsAndScale, getCalibratedAspect, } from '../../utilities/getCalibratedUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { pointInEllipse } from '../../utilities/math/ellipse';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport { filterAnnotationsWithinSamePlane } from '../../utilities/planar';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nconst { transformWorldToIndex } = csUtils;\nclass CircleROIStartEndThresholdTool extends CircleROITool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            simplified: true,\n            storePointData: false,\n            numSlicesToPropagate: 10,\n            calculatePointsInsideVolume: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n            showTextBox: false,\n            throttleTimeout: 100,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            let referencedImageId, imageVolume, volumeId;\n            if (viewport instanceof StackViewport) {\n                throw new Error('Stack Viewport Not implemented');\n            }\n            else {\n                const targetId = this.getTargetId(viewport);\n                volumeId = csUtils.getVolumeId(targetId);\n                imageVolume = cache.getVolume(volumeId);\n                referencedImageId = csUtils.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n            }\n            const spacingInNormal = csUtils.getSpacingInNormalDirection(imageVolume, viewPlaneNormal);\n            const startCoord = this._getStartCoordinate(worldPos, spacingInNormal, viewPlaneNormal);\n            const endCoord = this._getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            let points;\n            if (this.configuration.simplified) {\n                points = [[...worldPos], [...worldPos]];\n            }\n            else {\n                points = [\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                    [...worldPos],\n                ];\n            }\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    volumeId,\n                    spacingInNormal,\n                    enabledElement,\n                },\n                data: {\n                    label: '',\n                    startCoordinate: startCoord,\n                    endCoordinate: endCoord,\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                        points,\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {\n                        pointsInVolume: [],\n                        projectionPoints: [],\n                        statistics: [],\n                    },\n                    labelmapUID: null,\n                },\n            };\n            this._computeProjectionPoints(annotation, imageVolume);\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const { metadata } = annotation;\n            const { enabledElement } = metadata;\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            const targetId = this.getTargetId(enabledElement.viewport);\n            const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n            this._computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            else {\n                triggerAnnotationModified(annotation, element);\n            }\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            let annotations = getAnnotations(this.getToolName(), viewport.element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = filterAnnotationsWithinSamePlane(annotations, viewport.getCamera());\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data, metadata } = annotation;\n                const { startCoordinate, endCoordinate } = data;\n                const { points, activeHandleIndex } = data.handles;\n                const { enabledElement: annotationEnabledElement } = metadata;\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const center = canvasCoordinates[0];\n                const radius = getCanvasCircleRadius([\n                    canvasCoordinates[0],\n                    canvasCoordinates[1],\n                ]);\n                const { centerPointRadius } = this.configuration;\n                const canvasCorners = getCanvasCircleCorners([\n                    canvasCoordinates[0],\n                    canvasCoordinates[1],\n                ]);\n                const focalPoint = viewport.getCamera().focalPoint;\n                const viewplaneNormal = viewport.getCamera().viewPlaneNormal;\n                let tempStartCoordinate = startCoordinate;\n                let tempEndCoordinate = endCoordinate;\n                if (Array.isArray(startCoordinate)) {\n                    tempStartCoordinate = this._getCoordinateForViewplaneNormal(tempStartCoordinate, viewplaneNormal);\n                    data.startCoordinate = tempStartCoordinate;\n                }\n                if (Array.isArray(endCoordinate)) {\n                    tempEndCoordinate = this._getCoordinateForViewplaneNormal(tempEndCoordinate, viewplaneNormal);\n                    data.endCoordinate = tempEndCoordinate;\n                }\n                const roundedStartCoordinate = coreUtils.roundToPrecision(data.startCoordinate);\n                const roundedEndCoordinate = coreUtils.roundToPrecision(data.endCoordinate);\n                const cameraCoordinate = this._getCoordinateForViewplaneNormal(focalPoint, viewplaneNormal);\n                const roundedCameraCoordinate = coreUtils.roundToPrecision(cameraCoordinate);\n                if (roundedCameraCoordinate <\n                    Math.min(roundedStartCoordinate, roundedEndCoordinate) ||\n                    roundedCameraCoordinate >\n                        Math.max(roundedStartCoordinate, roundedEndCoordinate)) {\n                    continue;\n                }\n                const middleCoordinate = coreUtils.roundToPrecision((data.startCoordinate + data.endCoordinate) / 2);\n                let isMiddleSlice = false;\n                if (roundedCameraCoordinate === middleCoordinate) {\n                    isMiddleSlice = true;\n                }\n                data.handles.points[0][this._getIndexOfCoordinatesForViewplaneNormal(viewplaneNormal)] = middleCoordinate;\n                const iteratorVolumeIDs = annotationEnabledElement.viewport?.volumeIds.values();\n                for (const volumeId of iteratorVolumeIDs) {\n                    if (annotation.invalidated &&\n                        annotation.metadata.volumeId === volumeId) {\n                        this._throttledCalculateCachedStats(annotation, annotationEnabledElement);\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null &&\n                    isMiddleSlice) {\n                    if (this.configuration.simplified) {\n                        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                    }\n                    else {\n                        activeHandleCanvasCoords = canvasCoordinates;\n                    }\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                let lineWidthToUse = lineWidth;\n                let lineDashToUse = lineDash;\n                if (isMiddleSlice) {\n                    lineWidthToUse = lineWidth;\n                    lineDashToUse = [];\n                }\n                else {\n                    lineDashToUse = [5, 5];\n                }\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                    color,\n                    lineDash: lineDashToUse,\n                    lineWidth: lineWidthToUse,\n                });\n                if (centerPointRadius > 0) {\n                    if (radius > 3 * centerPointRadius) {\n                        drawCircleSvg(svgDrawingHelper, annotationUID, `${circleUID}-center`, center, centerPointRadius, {\n                            color,\n                            lineDash,\n                            lineWidth,\n                        });\n                    }\n                }\n                renderStatus = true;\n                if (this.configuration.showTextBox) {\n                    const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                    if (!options.visibility) {\n                        data.handles.textBox = {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        };\n                        continue;\n                    }\n                    const textLines = this.configuration.getTextLines(data, { metadata });\n                    if (!textLines || textLines.length === 0) {\n                        continue;\n                    }\n                    let canvasTextBoxCoords;\n                    if (!data.handles.textBox.hasMoved) {\n                        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n                        data.handles.textBox.worldPosition =\n                            viewport.canvasToWorld(canvasTextBoxCoords);\n                    }\n                    const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                    const textBoxUID = '1';\n                    const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, [canvasCoordinates[0], canvasCoordinates[1]], {}, options);\n                    const { x: left, y: top, width, height } = boundingBox;\n                    data.handles.textBox.worldBoundingBox = {\n                        topLeft: viewport.canvasToWorld([left, top]),\n                        topRight: viewport.canvasToWorld([left + width, top]),\n                        bottomLeft: viewport.canvasToWorld([left, top + height]),\n                        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                    };\n                }\n            }\n            return renderStatus;\n        };\n        if (this.configuration.calculatePointsInsideVolume) {\n            this._throttledCalculateCachedStats = throttle(this._calculateCachedStatsTool, this.configuration.throttleTimeout, { trailing: true });\n        }\n        else {\n            this._throttledCalculateCachedStats = debounce(this._calculateCachedStatsTool, this.configuration.throttleTimeout);\n        }\n    }\n    _computeProjectionPoints(annotation, imageVolume) {\n        const { data, metadata } = annotation;\n        const { viewPlaneNormal, spacingInNormal } = metadata;\n        const { startCoordinate, endCoordinate } = data;\n        const { points } = data.handles;\n        const projectionAxisIndex = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n        const startWorld = vec3.clone(points[0]);\n        startWorld[projectionAxisIndex] = startCoordinate;\n        const endWorld = vec3.clone(points[0]);\n        endWorld[projectionAxisIndex] = endCoordinate;\n        const direction = vec3.create();\n        vec3.subtract(direction, endWorld, startWorld);\n        const distance = vec3.length(direction);\n        if (distance === 0) {\n            const handlesOnStartPlane = points.map((p) => {\n                const newPoint = vec3.clone(p);\n                newPoint[projectionAxisIndex] = startCoordinate;\n                return Array.from(newPoint);\n            });\n            data.cachedStats.projectionPoints = [handlesOnStartPlane];\n            return;\n        }\n        vec3.normalize(direction, direction);\n        const handlesToStart = csUtils.deepClone(points);\n        handlesToStart[0][projectionAxisIndex] = startCoordinate;\n        handlesToStart[1][projectionAxisIndex] = startCoordinate;\n        const newProjectionPoints = [];\n        for (let dist = 0; dist <= distance + 1e-6; dist += spacingInNormal) {\n            newProjectionPoints.push(handlesToStart.map((point) => {\n                const newPoint = vec3.create();\n                vec3.scaleAndAdd(newPoint, point, direction, dist);\n                return Array.from(newPoint);\n            }));\n        }\n        data.cachedStats.projectionPoints = newProjectionPoints;\n    }\n    _computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement) {\n        const { data, metadata } = annotation;\n        const { viewPlaneNormal, viewUp } = metadata;\n        const { viewport } = enabledElement;\n        const projectionPoints = data.cachedStats.projectionPoints;\n        const pointsInsideVolume = [[]];\n        const image = this.getTargetImageData(targetId);\n        const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));\n        const baseTopLeftCanvas = getCanvasCircleCorners([\n            canvasCoordinates[0],\n            canvasCoordinates[1],\n        ])[0];\n        const baseBottomRightCanvas = getCanvasCircleCorners([\n            canvasCoordinates[0],\n            canvasCoordinates[1],\n        ])[1];\n        const basePos1 = viewport.canvasToWorld(baseTopLeftCanvas);\n        const basePos2 = viewport.canvasToWorld(baseBottomRightCanvas);\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, basePos1, basePos2);\n        const measureInfo = getCalibratedLengthUnitsAndScale(image, data.handles.points);\n        const aspect = getCalibratedAspect(image);\n        const area = Math.abs(Math.PI *\n            (worldWidth / measureInfo.scale / 2) *\n            (worldHeight / aspect / measureInfo.scale / 2));\n        const modalityUnitOptions = {\n            isPreScaled: isViewportPreScaled(viewport, targetId),\n            isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n        };\n        const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, modalityUnitOptions);\n        for (let i = 0; i < projectionPoints.length; i++) {\n            if (!imageVolume) {\n                continue;\n            }\n            const centerWorld = projectionPoints[i][0];\n            const currentCanvasCoordinates = projectionPoints[i].map((p) => viewport.worldToCanvas(p));\n            const [topLeftCanvas, bottomRightCanvas] = (getCanvasCircleCorners([\n                currentCanvasCoordinates[0],\n                currentCanvasCoordinates[1],\n            ]));\n            const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n            const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n            const worldPos1 = topLeftWorld;\n            const worldPos2 = bottomRightWorld;\n            const { dimensions, imageData, voxelManager } = imageVolume;\n            const worldPos1Index = transformWorldToIndex(imageData, worldPos1);\n            const worldProjectionPointIndex = transformWorldToIndex(imageData, centerWorld);\n            const indexOfProjection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n            worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n            worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n            worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n            worldPos1Index[indexOfProjection] =\n                worldProjectionPointIndex[indexOfProjection];\n            const worldPos2Index = transformWorldToIndex(imageData, worldPos2);\n            worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n            worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n            worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n            worldPos2Index[indexOfProjection] =\n                worldProjectionPointIndex[indexOfProjection];\n            if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n                const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n                const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n                const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n                const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n                const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n                const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n                const boundsIJK = [\n                    [iMin, iMax],\n                    [jMin, jMax],\n                    [kMin, kMax],\n                ];\n                const center = centerWorld;\n                const ellipseObj = {\n                    center,\n                    xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n                    yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n                    zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n                };\n                const pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                    isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS),\n                    boundsIJK,\n                    imageData,\n                    returnPoints: this.configuration.storePointData,\n                });\n                pointsInsideVolume.push(pointsInShape);\n            }\n        }\n        const stats = this.configuration.statsCalculator.getStatistics();\n        data.cachedStats.pointsInVolume = pointsInsideVolume;\n        data.cachedStats.statistics = {\n            Modality: metadata.Modality,\n            area,\n            mean: stats.mean?.value,\n            stdDev: stats.stdDev?.value,\n            max: stats.max?.value,\n            statsArray: stats.array,\n            areaUnit: measureInfo.areaUnit,\n            modalityUnit,\n        };\n    }\n    _calculateCachedStatsTool(annotation, enabledElement) {\n        const data = annotation.data;\n        const { viewport } = enabledElement;\n        const { cachedStats } = data;\n        const targetId = this.getTargetId(viewport);\n        const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n        this._computeProjectionPoints(annotation, imageVolume);\n        this._computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement);\n        annotation.invalidated = false;\n        triggerAnnotationModified(annotation, viewport.element);\n        return cachedStats;\n    }\n    _getStartCoordinate(worldPos, spacingInNormal, viewPlaneNormal) {\n        const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n        const numSlicesToPropagateFromStart = Math.round(numSlicesToPropagate / 2);\n        const startPos = vec3.create();\n        vec3.scaleAndAdd(startPos, worldPos, viewPlaneNormal, numSlicesToPropagateFromStart * -spacingInNormal);\n        const startCoord = this._getCoordinateForViewplaneNormal(startPos, viewPlaneNormal);\n        return startCoord;\n    }\n    _getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal) {\n        const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n        const numSlicesToPropagateToEnd = numSlicesToPropagate - Math.round(numSlicesToPropagate / 2);\n        const endPos = vec3.create();\n        vec3.scaleAndAdd(endPos, worldPos, viewPlaneNormal, numSlicesToPropagateToEnd * spacingInNormal);\n        const endCoord = this._getCoordinateForViewplaneNormal(endPos, viewPlaneNormal);\n        return endCoord;\n    }\n    _getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal) {\n        const viewplaneNormalAbs = [\n            Math.abs(viewPlaneNormal[0]),\n            Math.abs(viewPlaneNormal[1]),\n            Math.abs(viewPlaneNormal[2]),\n        ];\n        const indexOfDirection = viewplaneNormalAbs.indexOf(Math.max(...viewplaneNormalAbs));\n        return indexOfDirection;\n    }\n    _getCoordinateForViewplaneNormal(pos, viewPlaneNormal) {\n        const indexOfDirection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n        return pos[indexOfDirection];\n    }\n}\nfunction defaultGetTextLines(data, _context = {}) {\n    const cachedVolumeStats = data.cachedStats.statistics;\n    const { area, mean, max, stdDev, areaUnit, modalityUnit } = cachedVolumeStats;\n    if (mean === undefined) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`Area: ${csUtils.roundNumber(area)} ${areaUnit}`);\n    textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    return textLines;\n}\nCircleROIStartEndThresholdTool.toolName = 'CircleROIStartEndThreshold';\nexport default CircleROIStartEndThresholdTool;\n","import { BaseVolumeViewport, cache, getEnabledElement, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { fillInsideCircle } from './strategies/fillCircle';\nimport { eraseInsideCircle } from './strategies/eraseCircle';\nimport { Events } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { segmentLocking, activeSegmentation, segmentIndex as segmentIndexController, config as segmentationConfig, } from '../../stateManagement/segmentation';\nimport { getCurrentLabelmapImageIdForViewport, getSegmentation, } from '../../stateManagement/segmentation/segmentationState';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nclass CircleScissorsTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE: fillInsideCircle,\n                ERASE_INSIDE: eraseInsideCircle,\n            },\n            defaultStrategy: 'FILL_INSIDE',\n            activeStrategy: 'FILL_INSIDE',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            if (this.isDrawing === true) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const activeLabelmapSegmentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeLabelmapSegmentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeLabelmapSegmentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const segmentColor = segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n            const { representationData } = getSegmentation(segmentationId);\n            const labelmapData = representationData.Labelmap;\n            if (!labelmapData) {\n                throw new Error('No labelmap data found for the active segmentation, create one before using scissors tool');\n            }\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId: '',\n                    toolName: this.getToolName(),\n                    segmentColor,\n                },\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    isDrawing: true,\n                    cachedStats: {},\n                },\n            };\n            const viewportIdsToRender = [viewport.id];\n            this.editData = {\n                annotation,\n                centerCanvas: canvasPos,\n                segmentIndex,\n                segmentationId,\n                segmentsLocked,\n                segmentColor,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n                volumeId: null,\n                referencedVolumeId: null,\n                imageId: null,\n            };\n            if (viewport instanceof BaseVolumeViewport) {\n                const { volumeId } = labelmapData;\n                const segmentation = cache.getVolume(volumeId);\n                this.editData = {\n                    ...this.editData,\n                    volumeId,\n                    referencedVolumeId: segmentation.referencedVolumeId,\n                };\n            }\n            else {\n                const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n                this.editData = {\n                    ...this.editData,\n                    imageId: segmentationImageId,\n                };\n            }\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n            const { data } = annotation;\n            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n            const radius = Math.sqrt(dX * dX + dY * dY);\n            const bottomCanvas = [\n                centerCanvas[0],\n                centerCanvas[1] + radius,\n            ];\n            const topCanvas = [centerCanvas[0], centerCanvas[1] - radius];\n            const leftCanvas = [\n                centerCanvas[0] - radius,\n                centerCanvas[1],\n            ];\n            const rightCanvas = [\n                centerCanvas[0] + radius,\n                centerCanvas[1],\n            ];\n            data.handles.points = [\n                canvasToWorld(bottomCanvas),\n                canvasToWorld(topCanvas),\n                canvasToWorld(leftCanvas),\n                canvasToWorld(rightCanvas),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            const { viewPlaneNormal, viewUp } = annotation.metadata;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const operationData = {\n                ...this.editData,\n                points: data.handles.points,\n                viewPlaneNormal,\n                viewUp,\n                createMemo: this.createMemo.bind(this),\n            };\n            this.editData = null;\n            this.isDrawing = false;\n            this.applyActiveStrategy(enabledElement, operationData);\n            this.doneEditMemo();\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const { viewport } = enabledElement;\n            const { viewportIdsToRender } = this.editData;\n            if (!viewportIdsToRender.includes(viewport.id)) {\n                return renderStatus;\n            }\n            const { annotation } = this.editData;\n            const toolMetadata = annotation.metadata;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const bottom = canvasCoordinates[0];\n            const top = canvasCoordinates[1];\n            const center = [\n                Math.floor((bottom[0] + top[0]) / 2),\n                Math.floor((bottom[1] + top[1]) / 2),\n            ];\n            const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const circleUID = '0';\n            drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                color,\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nCircleScissorsTool.toolName = 'CircleScissor';\nexport default CircleScissorsTool;\n","import { Events, SegmentationRepresentations } from '../../enums';\nimport { eventTarget, utilities, getRenderingEngine, } from '@cornerstonejs/core';\nimport PlanarFreehandContourSegmentationTool from '../annotation/PlanarFreehandContourSegmentationTool';\nimport BrushTool from './BrushTool';\nimport * as segmentation from '../../stateManagement/segmentation';\nimport { getSegmentationRepresentationsBySegmentationId } from '../../stateManagement/segmentation/getSegmentationRepresentation';\nclass LabelMapEditWithContourTool extends PlanarFreehandContourSegmentationTool {\n    static { this.toolName = 'LabelMapEditWithContour'; }\n    static { this.annotationsToViewportMap = new Map(); }\n    static { this.viewportIdsChecked = []; }\n    constructor(toolProps = {}) {\n        const initialProps = utilities.deepMerge({\n            configuration: {\n                calculateStats: false,\n                allowOpenContours: false,\n            },\n        }, toolProps);\n        super(initialProps);\n        this.onViewportAddedToToolGroupBinded =\n            this.onViewportAddedToToolGroup.bind(this);\n        this.onSegmentationModifiedBinded = this.onSegmentationModified.bind(this);\n    }\n    initializeListeners() {\n        LabelMapEditWithContourTool.annotationsToViewportMap.clear();\n        LabelMapEditWithContourTool.viewportIdsChecked = [];\n        eventTarget.addEventListener(Events.ANNOTATION_MODIFIED, this.annotationModified);\n        eventTarget.addEventListener(Events.ANNOTATION_COMPLETED, this.annotationCompleted);\n        eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this.onViewportAddedToToolGroupBinded);\n        eventTarget.addEventListener(Events.SEGMENTATION_MODIFIED, this.onSegmentationModifiedBinded);\n        eventTarget.addEventListener(Events.SEGMENTATION_REPRESENTATION_MODIFIED, this.onSegmentationModifiedBinded);\n    }\n    cleanUpListeners() {\n        LabelMapEditWithContourTool.annotationsToViewportMap.clear();\n        LabelMapEditWithContourTool.viewportIdsChecked = [];\n        eventTarget.removeEventListener(Events.ANNOTATION_MODIFIED, this.annotationModified);\n        eventTarget.removeEventListener(Events.ANNOTATION_COMPLETED, this.annotationCompleted);\n        eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this.onViewportAddedToToolGroup.bind(this));\n        eventTarget.removeEventListener(Events.SEGMENTATION_MODIFIED, this.onSegmentationModified.bind(this));\n        eventTarget.removeEventListener(Events.SEGMENTATION_REPRESENTATION_MODIFIED, this.onSegmentationModified.bind(this));\n    }\n    async checkContourSegmentation(viewportId) {\n        if (LabelMapEditWithContourTool.viewportIdsChecked.includes(viewportId)) {\n            return;\n        }\n        const activeSeg = segmentation.getActiveSegmentation(viewportId);\n        if (!activeSeg) {\n            console.log('No active segmentation detected');\n            return false;\n        }\n        const segmentationId = activeSeg.segmentationId;\n        if (!activeSeg.representationData.Contour) {\n            LabelMapEditWithContourTool.viewportIdsChecked.push(viewportId);\n            await segmentation.addContourRepresentationToViewport(viewportId, [\n                {\n                    segmentationId,\n                    type: SegmentationRepresentations.Contour,\n                },\n            ]);\n            segmentation.addRepresentationData({\n                segmentationId,\n                type: SegmentationRepresentations.Contour,\n                data: {},\n            });\n        }\n        else {\n            LabelMapEditWithContourTool.viewportIdsChecked.push(viewportId);\n        }\n        return true;\n    }\n    onViewportAddedToToolGroup(evt) {\n        const { toolGroupId, viewportId } = evt.detail;\n        if (toolGroupId !== this.toolGroupId) {\n            return;\n        }\n        this.checkContourSegmentation(viewportId);\n    }\n    onSegmentationModified(evt) {\n        const { segmentationId } = evt.detail || {};\n        if (!segmentationId) {\n            return;\n        }\n        const representations = getSegmentationRepresentationsBySegmentationId(segmentationId);\n        if (!representations) {\n            return;\n        }\n        representations.forEach(async ({ viewportId }) => await this.checkContourSegmentation(viewportId));\n    }\n    onSetToolEnabled() {\n        this.initializeListeners();\n    }\n    onSetToolActive() {\n        this.initializeListeners();\n    }\n    onSetToolDisabled() {\n        this.cleanUpListeners();\n    }\n    annotationModified(evt) {\n        const { annotation, renderingEngineId, viewportId } = evt.detail;\n        const viewport = getRenderingEngine(renderingEngineId)?.getViewport(viewportId);\n        if (!viewport) {\n            return;\n        }\n        LabelMapEditWithContourTool.annotationsToViewportMap.set(annotation.annotationUID, viewport);\n    }\n    annotationCompleted(evt) {\n        const { annotation } = evt.detail;\n        const { polyline } = annotation.data?.contour || {};\n        if (annotation?.metadata?.toolName !== LabelMapEditWithContourTool.toolName) {\n            return;\n        }\n        if (!polyline) {\n            return;\n        }\n        if (LabelMapEditWithContourTool.annotationsToViewportMap.has(annotation.annotationUID)) {\n            const viewport = LabelMapEditWithContourTool.annotationsToViewportMap.get(annotation.annotationUID);\n            if (polyline.length > 3) {\n                BrushTool.viewportContoursToLabelmap(viewport);\n            }\n        }\n    }\n}\nexport default LabelMapEditWithContourTool;\n","import { cache, getEnabledElement, utilities as csUtils, BaseVolumeViewport, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { SegmentationRepresentations } from '../../enums';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { segmentLocking, activeSegmentation, segmentIndex as segmentIndexController, } from '../../stateManagement/segmentation';\nimport floodFill from '../../utilities/segmentation/floodFill';\nimport { getCurrentLabelmapImageIdForViewport, getSegmentation, } from '../../stateManagement/segmentation/segmentationState';\nconst { transformWorldToIndex, isEqual } = csUtils;\nclass PaintFillTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal } = camera;\n            const activeSegmentationRepresentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeSegmentationRepresentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeSegmentationRepresentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const { representationData } = getSegmentation(segmentationId);\n            let dimensions;\n            let direction;\n            let index;\n            let voxelManager;\n            this.doneEditMemo();\n            if (viewport instanceof BaseVolumeViewport) {\n                const { volumeId } = representationData[SegmentationRepresentations.Labelmap];\n                const segmentation = cache.getVolume(volumeId);\n                ({ dimensions, direction } = segmentation);\n                voxelManager = segmentation.voxelManager;\n                index = transformWorldToIndex(segmentation.imageData, worldPos);\n            }\n            else {\n                const currentSegmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n                if (!currentSegmentationImageId) {\n                    throw new Error('No active segmentation imageId detected, create one before using scissors tool');\n                }\n                const { imageData } = viewport.getImageData();\n                dimensions = imageData.getDimensions();\n                direction = imageData.getDirection();\n                const image = cache.getImage(currentSegmentationImageId);\n                voxelManager = image.voxelManager;\n                index = transformWorldToIndex(imageData, worldPos);\n            }\n            const fixedDimension = this.getFixedDimension(viewPlaneNormal, direction);\n            if (fixedDimension === undefined) {\n                console.warn('Oblique paint fill not yet supported');\n                return;\n            }\n            const { floodFillGetter, getLabelValue, getScalarDataPositionFromPlane, inPlaneSeedPoint, fixedDimensionValue, } = this.generateHelpers(voxelManager, dimensions, index, fixedDimension);\n            if (index[0] < 0 ||\n                index[0] >= dimensions[0] ||\n                index[1] < 0 ||\n                index[1] >= dimensions[1] ||\n                index[2] < 0 ||\n                index[2] >= dimensions[2]) {\n                return;\n            }\n            const clickedLabelValue = getLabelValue(index[0], index[1], index[2]);\n            if (segmentsLocked.includes(clickedLabelValue)) {\n                return;\n            }\n            const floodFillResult = floodFill(floodFillGetter, inPlaneSeedPoint);\n            const { flooded } = floodFillResult;\n            flooded.forEach((index) => {\n                const scalarDataIndex = getScalarDataPositionFromPlane(index[0], index[1]);\n                voxelManager.setAtIndex(scalarDataIndex, segmentIndex);\n            });\n            const framesModified = this.getFramesModified(fixedDimension, fixedDimensionValue, floodFillResult);\n            triggerSegmentationDataModified(segmentationId, framesModified);\n            return true;\n        };\n        this.getFramesModified = (fixedDimension, fixedDimensionValue, floodFillResult) => {\n            const { flooded: boundaries } = floodFillResult;\n            if (fixedDimension === 2) {\n                return [fixedDimensionValue];\n            }\n            let minJ = Infinity;\n            let maxJ = -Infinity;\n            for (let b = 0; b < boundaries.length; b++) {\n                const j = boundaries[b][1];\n                if (j < minJ) {\n                    minJ = j;\n                }\n                if (j > maxJ) {\n                    maxJ = j;\n                }\n            }\n            const framesModified = [];\n            for (let frame = minJ; frame <= maxJ; frame++) {\n                framesModified.push(frame);\n            }\n            return framesModified;\n        };\n        this.generateHelpers = (voxelManager, dimensions, seedIndex3D, fixedDimension = 2) => {\n            let fixedDimensionValue;\n            let inPlaneSeedPoint;\n            switch (fixedDimension) {\n                case 0:\n                    fixedDimensionValue = seedIndex3D[0];\n                    inPlaneSeedPoint = [seedIndex3D[1], seedIndex3D[2]];\n                    break;\n                case 1:\n                    fixedDimensionValue = seedIndex3D[1];\n                    inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[2]];\n                    break;\n                case 2:\n                    fixedDimensionValue = seedIndex3D[2];\n                    inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[1]];\n                    break;\n                default:\n                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n            }\n            const getScalarDataPosition = (x, y, z) => {\n                return voxelManager.toIndex([x, y, z]);\n            };\n            const getLabelValue = (x, y, z) => {\n                return voxelManager.getAtIJK(x, y, z);\n            };\n            const floodFillGetter = this.generateFloodFillGetter(dimensions, fixedDimension, fixedDimensionValue, getLabelValue);\n            const getScalarDataPositionFromPlane = this.generateGetScalarDataPositionFromPlane(getScalarDataPosition, fixedDimension, fixedDimensionValue);\n            return {\n                getScalarDataPositionFromPlane,\n                getLabelValue,\n                floodFillGetter,\n                inPlaneSeedPoint,\n                fixedDimensionValue,\n            };\n        };\n        this.generateFloodFillGetter = (dimensions, fixedDimension, fixedDimensionValue, getLabelValue) => {\n            let floodFillGetter;\n            switch (fixedDimension) {\n                case 0:\n                    floodFillGetter = (y, z) => {\n                        if (y >= dimensions[1] || y < 0 || z >= dimensions[2] || z < 0) {\n                            return;\n                        }\n                        return getLabelValue(fixedDimensionValue, y, z);\n                    };\n                    break;\n                case 1:\n                    floodFillGetter = (x, z) => {\n                        if (x >= dimensions[0] || x < 0 || z >= dimensions[2] || z < 0) {\n                            return;\n                        }\n                        return getLabelValue(x, fixedDimensionValue, z);\n                    };\n                    break;\n                case 2:\n                    floodFillGetter = (x, y) => {\n                        if (x >= dimensions[0] || x < 0 || y >= dimensions[1] || y < 0) {\n                            return;\n                        }\n                        return getLabelValue(x, y, fixedDimensionValue);\n                    };\n                    break;\n                default:\n                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n            }\n            return floodFillGetter;\n        };\n        this.generateGetScalarDataPositionFromPlane = (getScalarDataPosition, fixedDimension, fixedDimensionValue) => {\n            let getScalarDataPositionFromPlane;\n            switch (fixedDimension) {\n                case 0:\n                    getScalarDataPositionFromPlane = (y, z) => {\n                        return getScalarDataPosition(fixedDimensionValue, y, z);\n                    };\n                    break;\n                case 1:\n                    getScalarDataPositionFromPlane = (x, z) => {\n                        return getScalarDataPosition(x, fixedDimensionValue, z);\n                    };\n                    break;\n                case 2:\n                    getScalarDataPositionFromPlane = (x, y) => {\n                        return getScalarDataPosition(x, y, fixedDimensionValue);\n                    };\n                    break;\n                default:\n                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n            }\n            return getScalarDataPositionFromPlane;\n        };\n    }\n    getFixedDimension(viewPlaneNormal, direction) {\n        const xDirection = direction.slice(0, 3);\n        const yDirection = direction.slice(3, 6);\n        const zDirection = direction.slice(6, 9);\n        const absoluteOfViewPlaneNormal = [\n            Math.abs(viewPlaneNormal[0]),\n            Math.abs(viewPlaneNormal[1]),\n            Math.abs(viewPlaneNormal[2]),\n        ];\n        const absoluteOfXDirection = [\n            Math.abs(xDirection[0]),\n            Math.abs(xDirection[1]),\n            Math.abs(xDirection[2]),\n        ];\n        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfXDirection)) {\n            return 0;\n        }\n        const absoluteOfYDirection = [\n            Math.abs(yDirection[0]),\n            Math.abs(yDirection[1]),\n            Math.abs(yDirection[2]),\n        ];\n        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfYDirection)) {\n            return 1;\n        }\n        const absoluteOfZDirection = [\n            Math.abs(zDirection[0]),\n            Math.abs(zDirection[1]),\n            Math.abs(zDirection[2]),\n        ];\n        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfZDirection)) {\n            return 2;\n        }\n    }\n}\nPaintFillTool.toolName = 'PaintFill';\nexport default PaintFillTool;\n","import { getEnabledElement, cache, StackViewport, utilities as csUtils, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { vec3 } from 'gl-matrix';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { drawHandles as drawHandlesSvg, drawRect as drawRectSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport throttle from '../../utilities/throttle';\nimport debounce from '../../utilities/debounce';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromCorners from '../../utilities/planar/getWorldWidthAndHeightFromCorners';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { hideElementCursor, resetElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport RectangleROITool from '../annotation/RectangleROITool';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport { filterAnnotationsWithinSamePlane } from '../../utilities/planar';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nconst { transformWorldToIndex } = csUtils;\nclass RectangleROIStartEndThresholdTool extends RectangleROITool {\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            storePointData: false,\n            numSlicesToPropagate: 10,\n            calculatePointsInsideVolume: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n            showTextBox: false,\n            throttleTimeout: 100,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            let referencedImageId, imageVolume, volumeId;\n            if (viewport instanceof StackViewport) {\n                throw new Error('Stack Viewport Not implemented');\n            }\n            else {\n                const targetId = this.getTargetId(viewport);\n                volumeId = csUtils.getVolumeId(targetId);\n                imageVolume = cache.getVolume(volumeId);\n                referencedImageId = csUtils.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n            }\n            const spacingInNormal = csUtils.getSpacingInNormalDirection(imageVolume, viewPlaneNormal);\n            const startCoord = this._getStartCoordinate(worldPos, viewPlaneNormal);\n            const endCoord = this._getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    enabledElement,\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    toolName: this.getToolName(),\n                    volumeId,\n                    spacingInNormal,\n                },\n                data: {\n                    label: '',\n                    startCoordinate: startCoord,\n                    endCoordinate: endCoord,\n                    cachedStats: {\n                        pointsInVolume: [],\n                        projectionPoints: [],\n                        projectionPointsImageIds: [referencedImageId],\n                        statistics: [],\n                    },\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    labelmapUID: null,\n                },\n            };\n            this._computeProjectionPoints(annotation, imageVolume);\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 3,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const { metadata } = annotation;\n            const { enabledElement } = metadata;\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            const targetId = this.getTargetId(enabledElement.viewport);\n            const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n            this._computePointsInsideVolume(annotation, targetId, imageVolume, enabledElement);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            else {\n                triggerAnnotationModified(annotation, element);\n            }\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            let annotations = getAnnotations(this.getToolName(), viewport.element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = filterAnnotationsWithinSamePlane(annotations, viewport.getCamera());\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data, metadata } = annotation;\n                const { startCoordinate, endCoordinate } = data;\n                const { points, activeHandleIndex } = data.handles;\n                const { enabledElement: annotationEnabledElement } = metadata;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const focalPoint = viewport.getCamera().focalPoint;\n                const viewplaneNormal = viewport.getCamera().viewPlaneNormal;\n                let startCoord = startCoordinate;\n                let endCoord = endCoordinate;\n                if (Array.isArray(startCoordinate)) {\n                    startCoord = this._getCoordinateForViewplaneNormal(startCoord, viewplaneNormal);\n                    const indexOfDirection = this._getIndexOfCoordinatesForViewplaneNormal(viewplaneNormal);\n                    data.handles.points.forEach((point) => {\n                        point[indexOfDirection] = startCoord;\n                    });\n                    data.startCoordinate = startCoord;\n                }\n                if (Array.isArray(endCoordinate)) {\n                    endCoord = this._getCoordinateForViewplaneNormal(endCoord, viewplaneNormal);\n                    data.endCoordinate = endCoord;\n                    data.endCoordinate = endCoord;\n                }\n                const roundedStartCoord = csUtils.roundToPrecision(startCoord);\n                const roundedEndCoord = csUtils.roundToPrecision(endCoord);\n                const coord = this._getCoordinateForViewplaneNormal(focalPoint, viewplaneNormal);\n                const roundedCoord = csUtils.roundToPrecision(coord);\n                if (roundedCoord < Math.min(roundedStartCoord, roundedEndCoord) ||\n                    roundedCoord > Math.max(roundedStartCoord, roundedEndCoord)) {\n                    continue;\n                }\n                const iteratorVolumeIDs = annotationEnabledElement.viewport?.volumeIds.values();\n                for (const volumeId of iteratorVolumeIDs) {\n                    if (annotation.invalidated &&\n                        annotation.metadata.volumeId === volumeId) {\n                        this._throttledCalculateCachedStats(annotation, annotationEnabledElement);\n                    }\n                }\n                let firstOrLastSlice = false;\n                if (roundedCoord === roundedStartCoord ||\n                    roundedCoord === roundedEndCoord) {\n                    firstOrLastSlice = true;\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null &&\n                    firstOrLastSlice) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                let lineDashToUse = lineDash;\n                if (!firstOrLastSlice) {\n                    lineDashToUse = 2;\n                }\n                const rectangleUID = '0';\n                drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                    color,\n                    lineDash: lineDashToUse,\n                    lineWidth,\n                });\n                renderStatus = true;\n                if (this.configuration.showTextBox) {\n                    const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                    if (!options.visibility) {\n                        data.handles.textBox = {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        };\n                        continue;\n                    }\n                    const textLines = this.configuration.getTextLines(data, { metadata });\n                    if (!textLines || textLines.length === 0) {\n                        continue;\n                    }\n                    if (!data.handles.textBox.hasMoved) {\n                        const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                        data.handles.textBox.worldPosition =\n                            viewport.canvasToWorld(canvasTextBoxCoords);\n                    }\n                    const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                    const textBoxUID = '1';\n                    const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                    const { x: left, y: top, width, height } = boundingBox;\n                    data.handles.textBox.worldBoundingBox = {\n                        topLeft: viewport.canvasToWorld([left, top]),\n                        topRight: viewport.canvasToWorld([left + width, top]),\n                        bottomLeft: viewport.canvasToWorld([left, top + height]),\n                        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                    };\n                }\n            }\n            return renderStatus;\n        };\n        if (this.configuration.calculatePointsInsideVolume) {\n            this._throttledCalculateCachedStats = throttle(this._calculateCachedStatsTool, this.configuration.throttleTimeout, { trailing: true });\n        }\n        else {\n            this._throttledCalculateCachedStats = debounce(this._calculateCachedStatsTool, this.configuration.throttleTimeout);\n        }\n    }\n    _computeProjectionPoints(annotation, imageVolume) {\n        const { data, metadata } = annotation;\n        const { viewPlaneNormal, spacingInNormal } = metadata;\n        const { imageData } = imageVolume;\n        const { startCoordinate, endCoordinate } = data;\n        const { points } = data.handles;\n        const startIJK = transformWorldToIndex(imageData, points[0]);\n        const endIJK = transformWorldToIndex(imageData, points[0]);\n        const startWorld = vec3.create();\n        imageData.indexToWorldVec3(startIJK, startWorld);\n        const endWorld = vec3.create();\n        imageData.indexToWorldVec3(endIJK, endWorld);\n        const projectionAxisIndex = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n        if (projectionAxisIndex == 2) {\n            startWorld[2] = startCoordinate;\n            endWorld[2] = endCoordinate;\n        }\n        else if (projectionAxisIndex == 0) {\n            startWorld[0] = startCoordinate;\n            endWorld[0] = endCoordinate;\n        }\n        else if (projectionAxisIndex == 1) {\n            startWorld[1] = startCoordinate;\n            endWorld[1] = endCoordinate;\n        }\n        const direction = vec3.create();\n        vec3.subtract(direction, endWorld, startWorld);\n        const distance = vec3.length(direction);\n        vec3.normalize(direction, direction);\n        const newProjectionPoints = [];\n        for (let dist = 0; dist < distance; dist += spacingInNormal) {\n            newProjectionPoints.push(points.map((point) => {\n                const newPoint = vec3.create();\n                vec3.scaleAndAdd(newPoint, point, direction, dist);\n                return Array.from(newPoint);\n            }));\n        }\n        data.cachedStats.projectionPoints = newProjectionPoints;\n    }\n    _computePointsInsideVolume(annotation, targetId, imageVolume, enabledElement) {\n        const { data, metadata } = annotation;\n        const { viewPlaneNormal, viewUp } = metadata;\n        const { viewport } = enabledElement;\n        const projectionPoints = data.cachedStats.projectionPoints;\n        const pointsInsideVolume = [[]];\n        const image = this.getTargetImageData(targetId);\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[3];\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromCorners(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n        const measureInfo = getCalibratedLengthUnitsAndScale(image, data.habdles);\n        const area = Math.abs(worldWidth * worldHeight) /\n            (measureInfo.scale * measureInfo.scale);\n        const modalityUnitOptions = {\n            isPreScaled: isViewportPreScaled(viewport, targetId),\n            isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n        };\n        const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, modalityUnitOptions);\n        for (let i = 0; i < projectionPoints.length; i++) {\n            if (!imageVolume) {\n                continue;\n            }\n            const projectionPoint = projectionPoints[i][0];\n            const { dimensions, imageData, voxelManager } = imageVolume;\n            const worldPos1Index = transformWorldToIndex(imageData, worldPos1);\n            const worldProjectionPointIndex = transformWorldToIndex(imageData, projectionPoint);\n            const indexOfProjection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n            worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n            worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n            worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n            worldPos1Index[indexOfProjection] =\n                worldProjectionPointIndex[indexOfProjection];\n            const worldPos2Index = transformWorldToIndex(imageData, worldPos2);\n            worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n            worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n            worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n            worldPos2Index[indexOfProjection] =\n                worldProjectionPointIndex[indexOfProjection];\n            if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n                this.isHandleOutsideImage = false;\n                const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n                const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n                const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n                const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n                const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n                const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n                const boundsIJK = [\n                    [iMin, iMax],\n                    [jMin, jMax],\n                    [kMin, kMax],\n                ];\n                const pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                    boundsIJK,\n                    imageData,\n                    returnPoints: this.configuration.storePointData,\n                });\n                pointsInsideVolume.push(pointsInShape);\n            }\n        }\n        const stats = this.configuration.statsCalculator.getStatistics();\n        data.cachedStats.pointsInVolume = pointsInsideVolume;\n        data.cachedStats.statistics = {\n            Modality: metadata.Modality,\n            area,\n            mean: stats.mean?.value,\n            stdDev: stats.stdDev?.value,\n            max: stats.max?.value,\n            statsArray: stats.array,\n            areaUnit: measureInfo.areaUnit,\n            modalityUnit,\n        };\n    }\n    _calculateCachedStatsTool(annotation, enabledElement) {\n        const data = annotation.data;\n        const { viewport } = enabledElement;\n        const { cachedStats } = data;\n        const targetId = this.getTargetId(viewport);\n        const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n        this._computeProjectionPoints(annotation, imageVolume);\n        this._computePointsInsideVolume(annotation, targetId, imageVolume, enabledElement);\n        annotation.invalidated = false;\n        triggerAnnotationModified(annotation, viewport.element);\n        return cachedStats;\n    }\n    _getStartCoordinate(worldPos, viewPlaneNormal) {\n        const startPos = worldPos;\n        const startCoord = this._getCoordinateForViewplaneNormal(startPos, viewPlaneNormal);\n        return startCoord;\n    }\n    _getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal) {\n        const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n        const endPos = vec3.create();\n        vec3.scaleAndAdd(endPos, worldPos, viewPlaneNormal, numSlicesToPropagate * spacingInNormal);\n        const endCoord = this._getCoordinateForViewplaneNormal(endPos, viewPlaneNormal);\n        return endCoord;\n    }\n    _getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal) {\n        const viewplaneNormalAbs = [\n            Math.abs(viewPlaneNormal[0]),\n            Math.abs(viewPlaneNormal[1]),\n            Math.abs(viewPlaneNormal[2]),\n        ];\n        const indexOfDirection = viewplaneNormalAbs.indexOf(Math.max(...viewplaneNormalAbs));\n        return indexOfDirection;\n    }\n    _getCoordinateForViewplaneNormal(pos, viewPlaneNormal) {\n        const indexOfDirection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n        return pos[indexOfDirection];\n    }\n}\nfunction defaultGetTextLines(data, _context = {}) {\n    const cachedVolumeStats = data.cachedStats.statistics;\n    const { area, mean, max, stdDev, areaUnit, modalityUnit } = cachedVolumeStats;\n    if (mean === undefined) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`Area: ${csUtils.roundNumber(area)} ${areaUnit}`);\n    textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    return textLines;\n}\nRectangleROIStartEndThresholdTool.toolName = 'RectangleROIStartEndThreshold';\nexport default RectangleROIStartEndThresholdTool;\n","import { getEnabledElement, cache, StackViewport, utilities as csUtils, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations } from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { drawHandles as drawHandlesSvg, drawRect as drawRectSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nimport RectangleROITool from '../annotation/RectangleROITool';\nclass RectangleROIThresholdTool extends RectangleROITool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const targetId = this.getTargetId(viewport);\n            let referencedImageId, volumeId;\n            if (viewport instanceof StackViewport) {\n                referencedImageId = targetId.split('imageId:')[1];\n            }\n            else {\n                volumeId = csUtils.getVolumeId(targetId);\n                const imageVolume = cache.getVolume(volumeId);\n                referencedImageId = csUtils.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n            }\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    enabledElement,\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    toolName: this.getToolName(),\n                    volumeId,\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: null,\n                            worldBoundingBox: null,\n                        },\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    segmentationId: null,\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 3,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                triggerAnnotationModified(annotation, element);\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const rectangleUID = '0';\n                drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                });\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n    }\n}\nRectangleROIThresholdTool.toolName = 'RectangleROIThreshold';\nexport default RectangleROIThresholdTool;\n","import { BaseVolumeViewport, cache, getEnabledElement, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { fillInsideRectangle } from './strategies/fillRectangle';\nimport { eraseInsideRectangle } from './strategies/eraseRectangle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { Events, SegmentationRepresentations } from '../../enums';\nimport { drawRect as drawRectSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { config as segmentationConfig, segmentLocking, segmentIndex as segmentIndexController, activeSegmentation, } from '../../stateManagement/segmentation';\nimport { getCurrentLabelmapImageIdForViewport, getSegmentation, } from '../../stateManagement/segmentation/segmentationState';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nclass RectangleScissorsTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE: fillInsideRectangle,\n                ERASE_INSIDE: eraseInsideRectangle,\n            },\n            defaultStrategy: 'FILL_INSIDE',\n            activeStrategy: 'FILL_INSIDE',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            if (this.isDrawing === true) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const activeLabelmapSegmentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeLabelmapSegmentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeLabelmapSegmentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const segmentColor = segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n            const { representationData } = getSegmentation(segmentationId);\n            const labelmapData = representationData[SegmentationRepresentations.Labelmap];\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId: '',\n                    toolName: this.getToolName(),\n                    segmentColor,\n                },\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                },\n            };\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                segmentIndex,\n                segmentationId,\n                segmentsLocked,\n                segmentColor,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n                volumeId: null,\n                referencedVolumeId: null,\n                imageId: null,\n            };\n            if (viewport instanceof BaseVolumeViewport) {\n                const { volumeId } = labelmapData;\n                const segmentation = cache.getVolume(volumeId);\n                this.editData = {\n                    ...this.editData,\n                    volumeId,\n                    referencedVolumeId: segmentation.referencedVolumeId,\n                };\n            }\n            else {\n                const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n                this.editData = {\n                    ...this.editData,\n                    imageId: segmentationImageId,\n                };\n            }\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n            const { data } = annotation;\n            const { currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n            const worldPos = currentPoints.world;\n            const { points } = data.handles;\n            points[handleIndex] = [...worldPos];\n            let bottomLeftCanvas;\n            let bottomRightCanvas;\n            let topLeftCanvas;\n            let topRightCanvas;\n            let bottomLeftWorld;\n            let bottomRightWorld;\n            let topLeftWorld;\n            let topRightWorld;\n            switch (handleIndex) {\n                case 0:\n                case 3:\n                    bottomLeftCanvas = worldToCanvas(points[0]);\n                    topRightCanvas = worldToCanvas(points[3]);\n                    bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n                    topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n                    bottomRightWorld = canvasToWorld(bottomRightCanvas);\n                    topLeftWorld = canvasToWorld(topLeftCanvas);\n                    points[1] = bottomRightWorld;\n                    points[2] = topLeftWorld;\n                    break;\n                case 1:\n                case 2:\n                    bottomRightCanvas = worldToCanvas(points[1]);\n                    topLeftCanvas = worldToCanvas(points[2]);\n                    bottomLeftCanvas = [\n                        topLeftCanvas[0],\n                        bottomRightCanvas[1],\n                    ];\n                    topRightCanvas = [bottomRightCanvas[0], topLeftCanvas[1]];\n                    bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n                    topRightWorld = canvasToWorld(topRightCanvas);\n                    points[0] = bottomLeftWorld;\n                    points[3] = topRightWorld;\n                    break;\n            }\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const operationData = {\n                ...this.editData,\n                points: data.handles.points,\n                createMemo: this.createMemo.bind(this),\n            };\n            this.editData = null;\n            this.isDrawing = false;\n            this.applyActiveStrategy(enabledElement, operationData);\n            this.doneEditMemo();\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const { viewport } = enabledElement;\n            const { annotation } = this.editData;\n            const toolMetadata = annotation.metadata;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const rectangleUID = '0';\n            drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                color,\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nRectangleScissorsTool.toolName = 'RectangleScissor';\nexport default RectangleScissorsTool;\n","import { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, utilities, } from '@cornerstonejs/core';\nimport { addAnnotation, getAllAnnotations, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { drawLine as drawLineSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport BidirectionalTool from '../annotation/BidirectionalTool';\nimport { getSegmentIndexColor } from '../../stateManagement/segmentation/config/segmentationColor';\nclass SegmentBidirectionalTool extends BidirectionalTool {\n    static { this.toolName = 'SegmentBidirectional'; }\n    constructor(toolProps = {}) {\n        super(toolProps);\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = true;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            const viewportId = viewport.id;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { segmentIndex, segmentationId } = annotation.metadata;\n                const { lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const colorArray = getSegmentIndexColor(viewportId, segmentationId, segmentIndex);\n                const color = `rgb(${colorArray.slice(0, 3).join(',')})`;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        width: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId1 = `${annotationUID}-line-1`;\n                const dataId2 = `${annotationUID}-line-2`;\n                const lineUID = '0';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId1);\n                const secondLineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, secondLineUID, canvasCoordinates[2], canvasCoordinates[3], {\n                    color,\n                    lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId2);\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                options.color = color;\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const worldPos = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        this.isDrawing = true;\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, viewUp } = camera;\n        const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n        const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n        const annotation = {\n            highlighted: true,\n            invalidated: true,\n            metadata: {\n                toolName: this.getToolName(),\n                viewPlaneNormal: [...viewPlaneNormal],\n                viewUp: [...viewUp],\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...viewport.getViewReference({ points: [worldPos] }),\n            },\n            data: {\n                handles: {\n                    points: [\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                    ],\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n        };\n        addAnnotation(annotation, element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex: 1,\n            movingTextBox: false,\n            newAnnotation: true,\n            hasMoved: false,\n        };\n        this._activateDraw(element);\n        hideElementCursor(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        return annotation;\n    }\n    static { this.hydrate = (viewportId, axis, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const existingAnnotations = getAllAnnotations();\n        const toolAnnotations = existingAnnotations.filter((annotation) => annotation.metadata.toolName === 'SegmentBidirectional');\n        const existingAnnotation = toolAnnotations.find((annotation) => {\n            const { metadata } = annotation;\n            if (metadata.segmentIndex === options?.segmentIndex &&\n                metadata.segmentationId === options?.segmentationId) {\n                return true;\n            }\n            return false;\n        });\n        if (existingAnnotation) {\n            removeAnnotation(existingAnnotation.annotationUID);\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, } = this.hydrateBase(SegmentBidirectionalTool, enabledElement, axis[0], options);\n        const [majorAxis, minorAxis] = axis;\n        const [major0, major1] = majorAxis;\n        const [minor0, minor1] = minorAxis;\n        const points = [major0, major1, minor0, minor1];\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                },\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                segmentIndex: options?.segmentIndex,\n                segmentationId: options?.segmentationId,\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n        return annotation;\n    }; }\n}\nexport default SegmentBidirectionalTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { config as segmentationConfig } from '../../stateManagement/segmentation';\nimport { BaseTool } from '../base';\nimport { triggerSegmentationModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getActiveSegmentation } from '../../stateManagement/segmentation/activeSegmentation';\nimport { getSegmentIndexAtWorldPoint } from '../../utilities/segmentation';\nimport { state } from '../../store/state';\nimport { drawTextBox as drawTextBoxSvg } from '../../drawingSvg';\nclass SegmentLabelTool extends BaseTool {\n    constructor(toolProps = {\n        data: {\n            handles: {\n                textBox: {\n                    worldPosition: [0, 0, 0],\n                    worldBoundingBox: {\n                        topLeft: [0, 0, 0],\n                        topRight: [0, 0, 0],\n                        bottomLeft: [0, 0, 0],\n                        bottomRight: [0, 0, 0],\n                    },\n                },\n            },\n        },\n    }, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            hoverTimeout: 100,\n            searchRadius: 6,\n            color: null,\n            background: null,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseMoveCallback = (evt) => {\n            if (this.hoverTimer) {\n                clearTimeout(this.hoverTimer);\n            }\n            this.hoverTimer = setTimeout(() => {\n                this._setHoveredSegment(evt);\n                this.hoverTimer = null;\n            }, this.configuration.hoverTimeout);\n            return true;\n        };\n        this.onSetToolEnabled = () => {\n            this.onSetToolActive();\n        };\n        this.onSetToolActive = () => {\n            this.hoverTimer = null;\n        };\n        this.onSetToolDisabled = () => {\n            this.hoverTimer = null;\n        };\n        this.data = toolProps.data ?? {\n            handles: {\n                textBox: {\n                    worldPosition: [0, 0, 0],\n                    worldBoundingBox: {\n                        topLeft: [0, 0, 0],\n                        topRight: [0, 0, 0],\n                        bottomLeft: [0, 0, 0],\n                        bottomRight: [0, 0, 0],\n                    },\n                },\n            },\n        };\n        this.hoverTimer = null;\n    }\n    _setHoveredSegment(evt = {}) {\n        if (state.isInteractingWithTool) {\n            return;\n        }\n        const { element, currentPoints } = evt.detail;\n        const worldPoint = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const activeSegmentation = getActiveSegmentation(viewport.id);\n        if (!activeSegmentation) {\n            return;\n        }\n        this._setHoveredSegmentForType(activeSegmentation, worldPoint, viewport);\n    }\n    _setHoveredSegmentForType(activeSegmentation, worldPoint, viewport) {\n        const imageDataInfo = viewport.getImageData();\n        if (!imageDataInfo) {\n            return;\n        }\n        const { segmentationId } = activeSegmentation;\n        const hoveredSegmentIndex = getSegmentIndexAtWorldPoint(segmentationId, worldPoint, {\n            viewport,\n        });\n        const segment = activeSegmentation.segments[hoveredSegmentIndex];\n        const color = this.configuration.color ??\n            segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, hoveredSegmentIndex);\n        const label = segment?.label;\n        const canvasCoordinates = viewport.worldToCanvas(worldPoint);\n        this._editData = {\n            hoveredSegmentIndex,\n            hoveredSegmentLabel: label,\n            canvasCoordinates,\n            color,\n        };\n        if (!hoveredSegmentIndex || hoveredSegmentIndex === 0) {\n            return;\n        }\n        const renderingEngine = viewport.getRenderingEngine();\n        const viewportIds = renderingEngine.getViewports().map((v) => v.id);\n        triggerSegmentationModified(segmentationId);\n        triggerAnnotationRenderForViewportIds(viewportIds);\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this._editData) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const { hoveredSegmentIndex, hoveredSegmentLabel, canvasCoordinates, color, } = this._editData;\n        if (!hoveredSegmentIndex) {\n            return;\n        }\n        const offset = -15;\n        const textBoxPosition = [\n            canvasCoordinates[0] + offset,\n            canvasCoordinates[1] + offset,\n        ];\n        const boundingBox = drawTextBoxSvg(svgDrawingHelper, 'segmentSelectLabelAnnotation', 'segmentSelectLabelTextBox', [hoveredSegmentLabel ?? '(unnamed segment)'], textBoxPosition, {\n            color: `rgba(${color[0]}, ${color[1]}, ${color[2]}, ${color[3]})`,\n            background: this.configuration.background ?? undefined,\n        });\n        const left = canvasCoordinates[0];\n        const top = canvasCoordinates[1];\n        const { width, height } = boundingBox;\n        this.data.handles.textBox.worldBoundingBox = {\n            topLeft: viewport.canvasToWorld([left, top]),\n            topRight: viewport.canvasToWorld([left + width, top]),\n            bottomLeft: viewport.canvasToWorld([left, top + height]),\n            bottomRight: viewport.canvasToWorld([left + width, top + height]),\n        };\n    }\n}\nSegmentLabelTool.toolName = 'SegmentLabelTool';\nexport default SegmentLabelTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { triggerSegmentationModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getActiveSegmentation } from '../../stateManagement/segmentation/activeSegmentation';\nimport { setActiveSegmentIndex } from '../../stateManagement/segmentation/segmentIndex';\nimport { getHoveredContourSegmentationAnnotation, getSegmentIndexAtLabelmapBorder, getSegmentIndexAtWorldPoint, } from '../../utilities/segmentation';\nimport { state } from '../../store/state';\nimport { ToolModes } from '../../enums';\nclass SegmentSelectTool extends BaseTool {\n    static { this.SelectMode = {\n        Inside: 'Inside',\n        Border: 'Border',\n    }; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            hoverTimeout: 100,\n            mode: SegmentSelectTool.SelectMode.Border,\n            searchRadius: 6,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseMoveCallback = (evt) => {\n            if (this.mode !== ToolModes.Active) {\n                return;\n            }\n            if (this.hoverTimer) {\n                clearTimeout(this.hoverTimer);\n            }\n            this.hoverTimer = setTimeout(() => {\n                this._setActiveSegment(evt);\n                this.hoverTimer = null;\n            }, this.configuration.hoverTimeout);\n            return true;\n        };\n        this.onSetToolEnabled = () => {\n            this.onSetToolActive();\n        };\n        this.onSetToolActive = () => {\n            this.hoverTimer = null;\n        };\n        this.onSetToolDisabled = () => {\n            this.hoverTimer = null;\n        };\n        this.hoverTimer = null;\n    }\n    _setActiveSegment(evt = {}) {\n        if (state.isInteractingWithTool) {\n            return;\n        }\n        const { element, currentPoints } = evt.detail;\n        const worldPoint = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const activeSegmentation = getActiveSegmentation(viewport.id);\n        if (!activeSegmentation) {\n            return;\n        }\n        this._setActiveSegmentForType(activeSegmentation, worldPoint, viewport);\n    }\n    _setActiveSegmentForType(activeSegmentation, worldPoint, viewport) {\n        const imageDataInfo = viewport.getImageData();\n        if (!imageDataInfo) {\n            return;\n        }\n        const { segmentationId, representationData } = activeSegmentation;\n        let hoveredSegmentIndex;\n        if (this.configuration.mode === SegmentSelectTool.SelectMode.Inside) {\n            hoveredSegmentIndex = getSegmentIndexAtWorldPoint(segmentationId, worldPoint, {\n                viewport,\n            });\n        }\n        else {\n            if (representationData.Labelmap) {\n                hoveredSegmentIndex = getSegmentIndexAtLabelmapBorder(segmentationId, worldPoint, {\n                    viewport,\n                    searchRadius: this.configuration.searchRadius,\n                });\n            }\n            else if (representationData.Contour) {\n                hoveredSegmentIndex =\n                    getHoveredContourSegmentationAnnotation(segmentationId);\n            }\n            else if (representationData.Surface) {\n            }\n        }\n        if (!hoveredSegmentIndex || hoveredSegmentIndex === 0) {\n            return;\n        }\n        setActiveSegmentIndex(segmentationId, hoveredSegmentIndex);\n        const renderingEngine = viewport.getRenderingEngine();\n        const viewportIds = renderingEngine.getViewports().map((v) => v.id);\n        triggerSegmentationModified(segmentationId);\n        triggerAnnotationRenderForViewportIds(viewportIds);\n    }\n}\nSegmentSelectTool.toolName = 'SegmentSelectTool';\nexport default SegmentSelectTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { fillInsideSphere } from './strategies/fillSphere';\nimport { eraseInsideSphere } from './strategies/eraseSphere';\nimport { Events, SegmentationRepresentations } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { config as segmentationConfig, segmentLocking, segmentIndex as segmentIndexController, activeSegmentation, } from '../../stateManagement/segmentation';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nclass SphereScissorsTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE: fillInsideSphere,\n                ERASE_INSIDE: eraseInsideSphere,\n            },\n            defaultStrategy: 'FILL_INSIDE',\n            activeStrategy: 'FILL_INSIDE',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            if (this.isDrawing === true) {\n                return;\n            }\n            this.doneEditMemo();\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const activeSegmentationRepresentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeSegmentationRepresentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeSegmentationRepresentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const segmentColor = segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n            this.isDrawing = true;\n            const annotation = {\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId: '',\n                    toolName: this.getToolName(),\n                    segmentColor,\n                },\n                data: {\n                    invalidated: true,\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {},\n                    highlighted: true,\n                },\n            };\n            const viewportIdsToRender = [viewport.id];\n            this.editData = {\n                annotation,\n                centerCanvas: canvasPos,\n                segmentIndex,\n                segmentationId,\n                segmentsLocked,\n                segmentColor,\n                toolGroupId: this.toolGroupId,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n                volumeId: null,\n                referencedVolumeId: null,\n                imageId: null,\n            };\n            const { representationData } = getSegmentation(segmentationId);\n            const editData = this.getEditData({\n                viewport,\n                representationData,\n                segmentsLocked,\n                segmentationId,\n            });\n            this.editData = {\n                ...this.editData,\n                ...editData,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n            const { data } = annotation;\n            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n            const radius = Math.sqrt(dX * dX + dY * dY);\n            const bottomCanvas = [\n                centerCanvas[0],\n                centerCanvas[1] + radius,\n            ];\n            const topCanvas = [centerCanvas[0], centerCanvas[1] - radius];\n            const leftCanvas = [\n                centerCanvas[0] - radius,\n                centerCanvas[1],\n            ];\n            const rightCanvas = [\n                centerCanvas[0] + radius,\n                centerCanvas[1],\n            ];\n            data.handles.points = [\n                canvasToWorld(bottomCanvas),\n                canvasToWorld(topCanvas),\n                canvasToWorld(leftCanvas),\n                canvasToWorld(rightCanvas),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, newAnnotation, hasMoved, segmentIndex, segmentsLocked, } = this.editData;\n            const { data } = annotation;\n            const { viewPlaneNormal, viewUp } = annotation.metadata;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const operationData = {\n                ...this.editData,\n                points: data.handles.points,\n                segmentIndex,\n                segmentsLocked,\n                viewPlaneNormal,\n                viewUp,\n                createMemo: this.createMemo.bind(this),\n            };\n            this.editData = null;\n            this.isDrawing = false;\n            this.applyActiveStrategy(enabledElement, operationData);\n            this.doneEditMemo();\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const { viewport } = enabledElement;\n            const { viewportIdsToRender } = this.editData;\n            if (!viewportIdsToRender.includes(viewport.id)) {\n                return renderStatus;\n            }\n            const { annotation } = this.editData;\n            const toolMetadata = annotation.metadata;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const bottom = canvasCoordinates[0];\n            const top = canvasCoordinates[1];\n            const center = [\n                Math.floor((bottom[0] + top[0]) / 2),\n                Math.floor((bottom[1] + top[1]) / 2),\n            ];\n            const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const circleUID = '0';\n            drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                color,\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nSphereScissorsTool.toolName = 'SphereScissor';\nexport default SphereScissorsTool;\n","import { cache, utilities as csUtils } from '@cornerstonejs/core';\nimport StrategyCallbacks from '../../../../enums/StrategyCallbacks';\nimport { getSegmentation } from '../../../../stateManagement/segmentation/getSegmentation';\nimport getOrCreateImageVolume from '../../../../utilities/segmentation/getOrCreateImageVolume';\nexport default {\n    [StrategyCallbacks.EnsureImageVolumeFor3DManipulation]: (data) => {\n        const { operationData, viewport } = data;\n        let referencedImageIds;\n        if (viewport) {\n            referencedImageIds = viewport.getImageIds();\n            const isValidVolumeForSphere = csUtils.isValidVolume(referencedImageIds);\n            if (!isValidVolumeForSphere) {\n                throw new Error('Volume is not reconstructable for sphere manipulation');\n            }\n        }\n        else {\n            const segmentation = getSegmentation(operationData.segmentationId);\n            const imageIds = segmentation.representationData\n                .Labelmap.imageIds;\n            referencedImageIds = imageIds.map((imageId) => {\n                const image = cache.getImage(imageId);\n                return image.referencedImageId;\n            });\n        }\n        const imageVolume = getOrCreateImageVolume(referencedImageIds);\n        if (!imageVolume) {\n            throw new Error('Failed to create or get image volume');\n        }\n        operationData.imageVoxelManager = imageVolume.voxelManager;\n        operationData.imageData = imageVolume.imageData;\n    },\n};\n","import { utilities, cache } from '@cornerstonejs/core';\nimport StrategyCallbacks from '../../../../enums/StrategyCallbacks';\nimport getOrCreateSegmentationVolume from '../../../../utilities/segmentation/getOrCreateSegmentationVolume';\nexport default {\n    [StrategyCallbacks.EnsureSegmentationVolumeFor3DManipulation]: (data) => {\n        const { operationData, viewport } = data;\n        const { segmentationId, imageIds: segImageIds } = operationData;\n        const referencedImageIds = viewport\n            ? viewport.getImageIds()\n            : segImageIds.map((imageId) => cache.getImage(imageId).referencedImageId);\n        const isValidVolumeForSphere = utilities.isValidVolume(referencedImageIds);\n        if (!isValidVolumeForSphere) {\n            throw new Error('Volume is not reconstructable for sphere manipulation');\n        }\n        const segVolume = getOrCreateSegmentationVolume(segmentationId);\n        if (!segVolume) {\n            return;\n        }\n        operationData.segmentationVoxelManager = segVolume.voxelManager;\n        operationData.segmentationImageData = segVolume.imageData;\n        return;\n    },\n};\n","import { vec3 } from 'gl-matrix';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport { getBoundingBoxAroundShapeIJK } from '../../../utilities/boundingBox';\nimport BrushStrategy from './BrushStrategy';\nimport { StrategyCallbacks } from '../../../enums';\nimport compositions from './compositions';\nimport { pointInSphere } from '../../../utilities/math/sphere';\nconst { transformWorldToIndex, transformIndexToWorld, isEqual } = csUtils;\nexport function getEllipseCornersFromCanvasCoordinates(canvasCoordinates) {\n    const [bottom, top, left, right] = canvasCoordinates;\n    const topLeft = [left[0], top[1]];\n    const bottomRight = [right[0], bottom[1]];\n    const bottomLeft = [left[0], bottom[1]];\n    const topRight = [right[0], top[1]];\n    return [topLeft, bottomRight, bottomLeft, topRight];\n}\nfunction createCircleCornersForCenter(center, viewUp, viewRight, radius) {\n    const centerVec = vec3.fromValues(center[0], center[1], center[2]);\n    const top = vec3.create();\n    vec3.scaleAndAdd(top, centerVec, viewUp, radius);\n    const bottom = vec3.create();\n    vec3.scaleAndAdd(bottom, centerVec, viewUp, -radius);\n    const right = vec3.create();\n    vec3.scaleAndAdd(right, centerVec, viewRight, radius);\n    const left = vec3.create();\n    vec3.scaleAndAdd(left, centerVec, viewRight, -radius);\n    return [\n        bottom,\n        top,\n        left,\n        right,\n    ];\n}\nfunction createStrokePredicate(centers, radius) {\n    if (!centers.length || radius <= 0) {\n        return null;\n    }\n    const radiusSquared = radius * radius;\n    const centerVecs = centers.map((point) => [point[0], point[1], point[2]]);\n    const segments = [];\n    for (let i = 1; i < centerVecs.length; i++) {\n        const start = centerVecs[i - 1];\n        const end = centerVecs[i];\n        const dx = end[0] - start[0];\n        const dy = end[1] - start[1];\n        const dz = end[2] - start[2];\n        const lengthSquared = dx * dx + dy * dy + dz * dz;\n        segments.push({ start, vector: [dx, dy, dz], lengthSquared });\n    }\n    return (worldPoint) => {\n        if (!worldPoint) {\n            return false;\n        }\n        for (const centerVec of centerVecs) {\n            const dx = worldPoint[0] - centerVec[0];\n            const dy = worldPoint[1] - centerVec[1];\n            const dz = worldPoint[2] - centerVec[2];\n            if (dx * dx + dy * dy + dz * dz <= radiusSquared) {\n                return true;\n            }\n        }\n        for (const { start, vector, lengthSquared } of segments) {\n            if (lengthSquared === 0) {\n                const dx = worldPoint[0] - start[0];\n                const dy = worldPoint[1] - start[1];\n                const dz = worldPoint[2] - start[2];\n                if (dx * dx + dy * dy + dz * dz <= radiusSquared) {\n                    return true;\n                }\n                continue;\n            }\n            const dx = worldPoint[0] - start[0];\n            const dy = worldPoint[1] - start[1];\n            const dz = worldPoint[2] - start[2];\n            const dot = dx * vector[0] + dy * vector[1] + dz * vector[2];\n            const t = Math.max(0, Math.min(1, dot / lengthSquared));\n            const projX = start[0] + vector[0] * t;\n            const projY = start[1] + vector[1] * t;\n            const projZ = start[2] + vector[2] * t;\n            const distX = worldPoint[0] - projX;\n            const distY = worldPoint[1] - projY;\n            const distZ = worldPoint[2] - projZ;\n            if (distX * distX + distY * distY + distZ * distZ <= radiusSquared) {\n                return true;\n            }\n        }\n        return false;\n    };\n}\nconst initializeCircle = {\n    [StrategyCallbacks.Initialize]: (operationData) => {\n        const { points, viewport, segmentationImageData, viewUp, viewPlaneNormal, } = operationData;\n        if (!points) {\n            return;\n        }\n        const center = vec3.create();\n        if (points.length >= 2) {\n            vec3.add(center, points[0], points[1]);\n            vec3.scale(center, center, 0.5);\n        }\n        else {\n            vec3.copy(center, points[0]);\n        }\n        operationData.centerWorld = center;\n        operationData.centerIJK = transformWorldToIndex(segmentationImageData, center);\n        const brushRadius = points.length >= 2 ? vec3.distance(points[0], points[1]) / 2 : 0;\n        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n        const corners = getEllipseCornersFromCanvasCoordinates(canvasCoordinates);\n        const cornersInWorld = corners.map((corner) => viewport.canvasToWorld(corner));\n        const normalizedViewUp = vec3.fromValues(viewUp[0], viewUp[1], viewUp[2]);\n        vec3.normalize(normalizedViewUp, normalizedViewUp);\n        const normalizedPlaneNormal = vec3.fromValues(viewPlaneNormal[0], viewPlaneNormal[1], viewPlaneNormal[2]);\n        vec3.normalize(normalizedPlaneNormal, normalizedPlaneNormal);\n        const viewRight = vec3.create();\n        vec3.cross(viewRight, normalizedViewUp, normalizedPlaneNormal);\n        vec3.normalize(viewRight, viewRight);\n        const strokeCentersSource = operationData.strokePointsWorld &&\n            operationData.strokePointsWorld.length > 0\n            ? operationData.strokePointsWorld\n            : [operationData.centerWorld];\n        const strokeCenters = strokeCentersSource.map((point) => vec3.clone(point));\n        const strokeCornersWorld = strokeCenters.flatMap((centerPoint) => createCircleCornersForCenter(centerPoint, normalizedViewUp, viewRight, brushRadius));\n        const circleCornersIJK = strokeCornersWorld.map((world) => transformWorldToIndex(segmentationImageData, world));\n        const boundsIJK = getBoundingBoxAroundShapeIJK(circleCornersIJK, segmentationImageData.getDimensions());\n        operationData.strokePointsWorld = strokeCenters;\n        operationData.isInObject = createPointInEllipse(cornersInWorld, {\n            strokePointsWorld: strokeCenters,\n            segmentationImageData,\n            radius: brushRadius,\n        });\n        operationData.isInObjectBoundsIJK = boundsIJK;\n    },\n};\nfunction createPointInEllipse(cornersInWorld = [], options = {}) {\n    if (!cornersInWorld || cornersInWorld.length !== 4) {\n        throw new Error('createPointInEllipse: cornersInWorld must have 4 points');\n    }\n    const [topLeft, bottomRight, bottomLeft, topRight] = cornersInWorld;\n    const center = vec3.create();\n    vec3.add(center, topLeft, bottomRight);\n    vec3.scale(center, center, 0.5);\n    const majorAxisVec = vec3.create();\n    vec3.subtract(majorAxisVec, topRight, topLeft);\n    const xRadius = vec3.length(majorAxisVec) / 2;\n    vec3.normalize(majorAxisVec, majorAxisVec);\n    const minorAxisVec = vec3.create();\n    vec3.subtract(minorAxisVec, bottomLeft, topLeft);\n    const yRadius = vec3.length(minorAxisVec) / 2;\n    vec3.normalize(minorAxisVec, minorAxisVec);\n    const normal = vec3.create();\n    vec3.cross(normal, majorAxisVec, minorAxisVec);\n    vec3.normalize(normal, normal);\n    const radiusForStroke = options.radius ?? Math.max(xRadius, yRadius);\n    const strokePredicate = createStrokePredicate(options.strokePointsWorld || [], radiusForStroke);\n    if (isEqual(xRadius, yRadius)) {\n        const radius = xRadius;\n        const sphereObj = {\n            center,\n            radius,\n            radius2: radius * radius,\n        };\n        return (pointLPS, pointIJK) => {\n            let worldPoint = pointLPS;\n            if (!worldPoint && pointIJK && options.segmentationImageData) {\n                worldPoint = transformIndexToWorld(options.segmentationImageData, pointIJK);\n            }\n            if (!worldPoint) {\n                return false;\n            }\n            if (strokePredicate?.(worldPoint)) {\n                return true;\n            }\n            return pointInSphere(sphereObj, worldPoint);\n        };\n    }\n    return (pointLPS, pointIJK) => {\n        let worldPoint = pointLPS;\n        if (!worldPoint && pointIJK && options.segmentationImageData) {\n            worldPoint = transformIndexToWorld(options.segmentationImageData, pointIJK);\n        }\n        if (!worldPoint) {\n            return false;\n        }\n        if (strokePredicate?.(worldPoint)) {\n            return true;\n        }\n        const pointVec = vec3.create();\n        vec3.subtract(pointVec, worldPoint, center);\n        const distToPlane = vec3.dot(pointVec, normal);\n        const proj = vec3.create();\n        vec3.scaleAndAdd(proj, pointVec, normal, -distToPlane);\n        const fromTopLeft = vec3.create();\n        const centerToTopLeft = vec3.create();\n        vec3.subtract(centerToTopLeft, center, topLeft);\n        vec3.subtract(fromTopLeft, proj, centerToTopLeft);\n        const x = vec3.dot(fromTopLeft, majorAxisVec);\n        const y = vec3.dot(fromTopLeft, minorAxisVec);\n        return (x * x) / (xRadius * xRadius) + (y * y) / (yRadius * yRadius) <= 1;\n    };\n}\nconst CIRCLE_STRATEGY = new BrushStrategy('Circle', compositions.regionFill, compositions.setValue, initializeCircle, compositions.determineSegmentIndex, compositions.preview, compositions.labelmapStatistics);\nconst CIRCLE_THRESHOLD_STRATEGY = new BrushStrategy('CircleThreshold', compositions.regionFill, compositions.setValue, initializeCircle, compositions.determineSegmentIndex, compositions.dynamicThreshold, compositions.threshold, compositions.preview, compositions.islandRemoval, compositions.labelmapStatistics);\nconst fillInsideCircle = CIRCLE_STRATEGY.strategyFunction;\nconst thresholdInsideCircle = CIRCLE_THRESHOLD_STRATEGY.strategyFunction;\nexport function fillOutsideCircle() {\n    throw new Error('Not yet implemented');\n}\nexport { CIRCLE_STRATEGY, CIRCLE_THRESHOLD_STRATEGY, fillInsideCircle, thresholdInsideCircle, createPointInEllipse, createPointInEllipse as createEllipseInPoint, };\n","import { vec3 } from 'gl-matrix';\nimport { utilities as csUtils, StackViewport } from '@cornerstonejs/core';\nimport { getBoundingBoxAroundShapeIJK } from '../../../utilities/boundingBox';\nimport BrushStrategy from './BrushStrategy';\nimport { StrategyCallbacks } from '../../../enums';\nimport compositions from './compositions';\nconst { transformWorldToIndex } = csUtils;\nconst initializeRectangle = {\n    [StrategyCallbacks.Initialize]: (operationData) => {\n        const { points, viewport, segmentationImageData, } = operationData;\n        if (!points) {\n            return;\n        }\n        const center = vec3.fromValues(0, 0, 0);\n        points.forEach((point) => {\n            vec3.add(center, center, point);\n        });\n        vec3.scale(center, center, 1 / points.length);\n        operationData.centerWorld = center;\n        operationData.centerIJK = transformWorldToIndex(segmentationImageData, center);\n        const { boundsIJK, pointInShapeFn } = createPointInRectangle(viewport, points, segmentationImageData);\n        operationData.isInObject = pointInShapeFn;\n        operationData.isInObjectBoundsIJK = boundsIJK;\n    },\n};\nfunction createPointInRectangle(viewport, points, segmentationImageData) {\n    let rectangleCornersIJK = points.map((world) => {\n        return transformWorldToIndex(segmentationImageData, world);\n    });\n    rectangleCornersIJK = rectangleCornersIJK.map((point) => {\n        return point.map((coord) => {\n            return Math.round(coord);\n        });\n    });\n    const boundsIJK = getBoundingBoxAroundShapeIJK(rectangleCornersIJK, segmentationImageData.getDimensions());\n    const [p0, p1, p2, p3] = points;\n    const axisU = vec3.create();\n    const axisV = vec3.create();\n    vec3.subtract(axisU, p1, p0);\n    vec3.subtract(axisV, p3, p0);\n    const uLen = vec3.length(axisU);\n    const vLen = vec3.length(axisV);\n    vec3.normalize(axisU, axisU);\n    vec3.normalize(axisV, axisV);\n    const normal = vec3.create();\n    vec3.cross(normal, axisU, axisV);\n    vec3.normalize(normal, normal);\n    const direction = segmentationImageData.getDirection();\n    const spacing = segmentationImageData.getSpacing();\n    const { viewPlaneNormal } = viewport.getCamera();\n    const EPS = csUtils.getSpacingInNormalDirection({\n        direction,\n        spacing,\n    }, viewPlaneNormal);\n    const pointInShapeFn = (pointLPS) => {\n        const v = vec3.create();\n        vec3.subtract(v, pointLPS, p0);\n        const u = vec3.dot(v, axisU);\n        const vproj = vec3.dot(v, axisV);\n        const d = Math.abs(vec3.dot(v, normal));\n        return (u >= -EPS &&\n            u <= uLen + EPS &&\n            vproj >= -EPS &&\n            vproj <= vLen + EPS &&\n            d <= EPS);\n    };\n    return { boundsIJK, pointInShapeFn };\n}\nconst RECTANGLE_STRATEGY = new BrushStrategy('Rectangle', compositions.regionFill, compositions.setValue, initializeRectangle, compositions.determineSegmentIndex, compositions.preview, compositions.labelmapStatistics);\nconst RECTANGLE_THRESHOLD_STRATEGY = new BrushStrategy('RectangleThreshold', compositions.regionFill, compositions.setValue, initializeRectangle, compositions.determineSegmentIndex, compositions.dynamicThreshold, compositions.threshold, compositions.preview, compositions.islandRemoval, compositions.labelmapStatistics);\nconst fillInsideRectangle = RECTANGLE_STRATEGY.strategyFunction;\nconst thresholdInsideRectangle = RECTANGLE_THRESHOLD_STRATEGY.strategyFunction;\nexport { RECTANGLE_STRATEGY, RECTANGLE_THRESHOLD_STRATEGY, fillInsideRectangle, thresholdInsideRectangle, };\n","import { cache, Enums, eventTarget } from '@cornerstonejs/core';\nimport { getCurrentLabelmapImageIdForViewport } from '../../../../stateManagement/segmentation/segmentationState';\nimport { getLabelmapActorEntry } from '../../../../stateManagement/segmentation/helpers';\nimport { getReferenceVolumeForSegmentationVolume } from '../../../../utilities/segmentation/getReferenceVolumeForSegmentationVolume';\nfunction getStrategyDataForVolumeViewport({ operationData }) {\n    const { volumeId } = operationData;\n    if (!volumeId) {\n        const event = new CustomEvent(Enums.Events.ERROR_EVENT, {\n            detail: {\n                type: 'Segmentation',\n                message: 'No volume id found for the segmentation',\n            },\n            cancelable: true,\n        });\n        eventTarget.dispatchEvent(event);\n        return null;\n    }\n    const segmentationVolume = cache.getVolume(volumeId);\n    const imageVolume = getReferenceVolumeForSegmentationVolume(volumeId);\n    if (!segmentationVolume || !imageVolume) {\n        return null;\n    }\n    const { imageData: segmentationImageData } = segmentationVolume;\n    const { voxelManager: segmentationVoxelManager } = segmentationVolume;\n    const { voxelManager: imageVoxelManager, imageData } = imageVolume;\n    return {\n        segmentationImageData,\n        segmentationVoxelManager,\n        segmentationScalarData: null,\n        imageScalarData: null,\n        imageVoxelManager,\n        imageData,\n    };\n}\nfunction getStrategyDataForStackViewport({ operationData, viewport, strategy, }) {\n    const { segmentationId } = operationData;\n    let segmentationImageData;\n    let segmentationVoxelManager;\n    let segmentationScalarData;\n    let imageScalarData;\n    let imageVoxelManager;\n    let imageData;\n    if (strategy.ensureSegmentationVolumeFor3DManipulation) {\n        strategy.ensureSegmentationVolumeFor3DManipulation({\n            operationData,\n            viewport,\n        });\n        segmentationVoxelManager = operationData.segmentationVoxelManager;\n        segmentationImageData = operationData.segmentationImageData;\n        segmentationScalarData = null;\n    }\n    else {\n        const labelmapImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n        if (!labelmapImageId) {\n            return null;\n        }\n        const actorEntry = getLabelmapActorEntry(viewport.id, segmentationId);\n        if (!actorEntry) {\n            return null;\n        }\n        const currentSegImage = cache.getImage(labelmapImageId);\n        segmentationImageData = actorEntry.actor.getMapper().getInputData();\n        segmentationVoxelManager = currentSegImage.voxelManager;\n        const currentSegmentationImageId = operationData.imageId;\n        const segmentationImage = cache.getImage(currentSegmentationImageId);\n        if (!segmentationImage) {\n            return null;\n        }\n        segmentationScalarData = segmentationImage.getPixelData?.();\n    }\n    if (strategy.ensureImageVolumeFor3DManipulation) {\n        strategy.ensureImageVolumeFor3DManipulation({\n            operationData,\n            viewport,\n        });\n        imageVoxelManager = operationData.imageVoxelManager;\n        imageScalarData = operationData.imageScalarData;\n        imageData = operationData.imageData;\n    }\n    else {\n        const currentImageId = viewport.getCurrentImageId();\n        if (!currentImageId) {\n            return null;\n        }\n        const image = cache.getImage(currentImageId);\n        imageData = image ? null : viewport.getImageData();\n        imageScalarData = image?.getPixelData() || imageData.getScalarData();\n        imageVoxelManager = image?.voxelManager;\n    }\n    return {\n        segmentationImageData,\n        segmentationScalarData,\n        imageScalarData,\n        segmentationVoxelManager,\n        imageVoxelManager,\n        imageData,\n    };\n}\nfunction getStrategyData({ operationData, viewport, strategy, }) {\n    if (!operationData) {\n        return null;\n    }\n    if (('volumeId' in operationData && operationData.volumeId != null) ||\n        ('referencedVolumeId' in operationData &&\n            operationData.referencedVolumeId != null)) {\n        return getStrategyDataForVolumeViewport({ operationData });\n    }\n    return getStrategyDataForStackViewport({ operationData, viewport, strategy });\n}\nexport { getStrategyData };\n","export var ContourWindingDirection;\n(function (ContourWindingDirection) {\n    ContourWindingDirection[ContourWindingDirection[\"CounterClockwise\"] = -1] = \"CounterClockwise\";\n    ContourWindingDirection[ContourWindingDirection[\"Unknown\"] = 0] = \"Unknown\";\n    ContourWindingDirection[ContourWindingDirection[\"Clockwise\"] = 1] = \"Clockwise\";\n})(ContourWindingDirection || (ContourWindingDirection = {}));\n","import { triggerEvent, eventTarget } from '@cornerstonejs/core';\nimport Events from '../enums/Events';\nimport { ChangeTypes } from '../enums';\nexport default class AnnotationMultiSlice {\n    static setStartRange(viewport, annotation, startRange = viewport.getCurrentImageIdIndex()) {\n        this.setRange(viewport, annotation, startRange);\n    }\n    static setEndRange(viewport, annotation, endRange = viewport.getCurrentImageIdIndex()) {\n        this.setRange(viewport, annotation, undefined, endRange);\n    }\n    static setRange(viewport, annotation, startRange, endRange) {\n        const { metadata } = annotation;\n        if (startRange === undefined) {\n            startRange = metadata.sliceIndex < endRange ? metadata.sliceIndex : 0;\n            if (endRange === undefined) {\n                endRange = viewport.getNumberOfSlices() - 1;\n            }\n        }\n        const rangeEndSliceIndex = viewport.getSliceIndexForImage(metadata.multiSliceReference);\n        if (endRange === undefined) {\n            endRange =\n                rangeEndSliceIndex >= startRange\n                    ? rangeEndSliceIndex\n                    : viewport.getNumberOfSlices() - 1;\n        }\n        endRange = Math.max(startRange, endRange);\n        metadata.sliceIndex = Math.min(startRange, endRange);\n        metadata.referencedImageId = viewport.getCurrentImageId(metadata.sliceIndex);\n        metadata.referencedImageURI = undefined;\n        if (endRange === metadata.sliceIndex) {\n            metadata.multiSliceReference = undefined;\n        }\n        else if (endRange !== metadata.multiSliceReference?.sliceIndex) {\n            metadata.multiSliceReference = {\n                referencedImageId: viewport.getCurrentImageId(endRange),\n                sliceIndex: endRange,\n            };\n        }\n        const eventDetail = {\n            viewportId: viewport.id,\n            renderingEngineId: viewport.renderingEngineId,\n            changeType: ChangeTypes.MetadataReferenceModified,\n            annotation,\n        };\n        triggerEvent(eventTarget, Events.ANNOTATION_MODIFIED, eventDetail);\n        this.setViewportFrameRange(viewport, metadata);\n    }\n    static setSingle(viewport, annotation, current = viewport.getCurrentImageIdIndex()) {\n        this.setRange(viewport, annotation, current, current);\n    }\n    static getFrameRange(annotation) {\n        const { metadata } = annotation;\n        const { sliceIndex, multiSliceReference } = metadata;\n        const rangeEndSliceIndex = multiSliceReference?.sliceIndex;\n        return rangeEndSliceIndex\n            ? [sliceIndex + 1, rangeEndSliceIndex + 1]\n            : sliceIndex + 1;\n    }\n    static getFrameRangeStr(annotation) {\n        const range = this.getFrameRange(annotation);\n        return Array.isArray(range) ? `${range[0]}-${range[1]}` : String(range);\n    }\n    static setViewportFrameRange(viewport, specifier) {\n        if (viewport.setFrameRange && specifier.multiSliceReference?.sliceIndex) {\n            viewport.setFrameRange(specifier.sliceIndex + 1, specifier.multiSliceReference.sliceIndex + 1);\n        }\n    }\n}\n","import { utilities, BaseVolumeViewport, StackViewport, cache, metaData, } from '@cornerstonejs/core';\nimport { addAnnotation } from '../stateManagement/annotation/annotationState';\nimport { vec3 } from 'gl-matrix';\nfunction annotationHydration(viewport, toolName, worldPoints, options) {\n    const viewReference = viewport.getViewReference();\n    const { viewPlaneNormal, FrameOfReferenceUID } = viewReference;\n    const annotation = {\n        annotationUID: options?.annotationUID || utilities.uuidv4(),\n        data: {\n            handles: {\n                points: worldPoints,\n            },\n        },\n        highlighted: false,\n        autoGenerated: false,\n        invalidated: false,\n        isLocked: false,\n        isVisible: true,\n        metadata: {\n            toolName,\n            viewPlaneNormal,\n            FrameOfReferenceUID,\n            referencedImageId: getReferencedImageId(viewport, worldPoints[0], viewPlaneNormal),\n            ...options,\n        },\n    };\n    addAnnotation(annotation, viewport.element);\n    return annotation;\n}\nfunction getReferencedImageId(viewport, worldPos, viewPlaneNormal) {\n    let referencedImageId;\n    if (viewport instanceof StackViewport) {\n        referencedImageId = getClosestImageIdForStackViewport(viewport, worldPos, viewPlaneNormal);\n    }\n    else if (viewport instanceof BaseVolumeViewport) {\n        const targetId = getTargetId(viewport);\n        const volumeId = utilities.getVolumeId(targetId);\n        const imageVolume = cache.getVolume(volumeId);\n        referencedImageId = utilities.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n    }\n    else {\n        throw new Error('getReferencedImageId: viewport must be a StackViewport or BaseVolumeViewport');\n    }\n    return referencedImageId;\n}\nfunction getTargetId(viewport) {\n    const targetId = viewport.getViewReferenceId?.();\n    if (targetId) {\n        return targetId;\n    }\n    if (viewport instanceof BaseVolumeViewport) {\n        return `volumeId:${getTargetVolumeId(viewport)}`;\n    }\n    throw new Error('getTargetId: viewport must have a getTargetId method');\n}\nfunction getTargetVolumeId(viewport) {\n    const actorEntries = viewport.getActors();\n    if (!actorEntries) {\n        return;\n    }\n    return actorEntries.find((actorEntry) => actorEntry.actor.getClassName() === 'vtkVolume')?.uid;\n}\nfunction getClosestImageIdForStackViewport(viewport, worldPos, viewPlaneNormal) {\n    const imageIds = viewport.getImageIds();\n    if (!imageIds || !imageIds.length) {\n        return;\n    }\n    const distanceImagePairs = imageIds.map((imageId) => {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n        const distance = calculateDistanceToImage(worldPos, imagePositionPatient, viewPlaneNormal);\n        return { imageId, distance };\n    });\n    distanceImagePairs.sort((a, b) => a.distance - b.distance);\n    return distanceImagePairs[0].imageId;\n}\nfunction calculateDistanceToImage(worldPos, ImagePositionPatient, viewPlaneNormal) {\n    const dir = vec3.create();\n    vec3.sub(dir, worldPos, ImagePositionPatient);\n    const dot = vec3.dot(dir, viewPlaneNormal);\n    return Math.abs(dot);\n}\nexport { annotationHydration, getClosestImageIdForStackViewport };\n","function extend2DBoundingBoxInViewAxis(boundsIJK, numSlicesToProject) {\n    const sliceNormalIndex = boundsIJK.findIndex(([min, max]) => min === max);\n    if (sliceNormalIndex === -1) {\n        throw new Error('3D bounding boxes not supported in an oblique plane');\n    }\n    boundsIJK[sliceNormalIndex][0] -= numSlicesToProject;\n    boundsIJK[sliceNormalIndex][1] += numSlicesToProject;\n    return boundsIJK;\n}\nexport default extend2DBoundingBoxInViewAxis;\n","import { CONSTANTS } from '@cornerstonejs/core';\nconst { EPSILON } = CONSTANTS;\nfunction calculateBoundingBox(points, dimensions, isWorld = false) {\n    let xMin = Infinity;\n    let xMax = isWorld ? -Infinity : 0;\n    let yMin = Infinity;\n    let yMax = isWorld ? -Infinity : 0;\n    let zMin = Infinity;\n    let zMax = isWorld ? -Infinity : 0;\n    const is3D = points[0]?.length === 3;\n    for (let i = 0; i < points.length; i++) {\n        const p = points[i];\n        xMin = Math.min(p[0], xMin);\n        xMax = Math.max(p[0], xMax);\n        yMin = Math.min(p[1], yMin);\n        yMax = Math.max(p[1], yMax);\n        if (is3D) {\n            zMin = Math.min(p[2] ?? zMin, zMin);\n            zMax = Math.max(p[2] ?? zMax, zMax);\n        }\n    }\n    if (dimensions) {\n        xMin = Math.max(isWorld ? dimensions[0] + EPSILON : 0, xMin);\n        xMax = Math.min(isWorld ? dimensions[0] - EPSILON : dimensions[0] - 1, xMax);\n        yMin = Math.max(isWorld ? dimensions[1] + EPSILON : 0, yMin);\n        yMax = Math.min(isWorld ? dimensions[1] - EPSILON : dimensions[1] - 1, yMax);\n        if (is3D && dimensions.length === 3) {\n            zMin = Math.max(isWorld ? dimensions[2] + EPSILON : 0, zMin);\n            zMax = Math.min(isWorld ? dimensions[2] - EPSILON : dimensions[2] - 1, zMax);\n        }\n    }\n    else if (!isWorld) {\n        xMin = Math.max(0, xMin);\n        xMax = Math.min(Infinity, xMax);\n        yMin = Math.max(0, yMin);\n        yMax = Math.min(Infinity, yMax);\n        if (is3D) {\n            zMin = Math.max(0, zMin);\n            zMax = Math.min(Infinity, zMax);\n        }\n    }\n    return is3D\n        ? [\n            [xMin, xMax],\n            [yMin, yMax],\n            [zMin, zMax],\n        ]\n        : [[xMin, xMax], [yMin, yMax], null];\n}\nexport function getBoundingBoxAroundShapeIJK(points, dimensions) {\n    return calculateBoundingBox(points, dimensions, false);\n}\nexport function getBoundingBoxAroundShapeWorld(points, clipBounds) {\n    return calculateBoundingBox(points, clipBounds, true);\n}\n","import { utilities, Enums } from '@cornerstonejs/core';\nconst { calibratedPixelSpacingMetadataProvider } = utilities;\nexport default function calibrateImageSpacing(imageId, renderingEngine, calibrationOrScale) {\n    if (typeof calibrationOrScale === 'number') {\n        calibrationOrScale = {\n            type: Enums.CalibrationTypes.USER,\n            scale: calibrationOrScale,\n        };\n    }\n    calibratedPixelSpacingMetadataProvider.add(imageId, calibrationOrScale);\n    const viewports = renderingEngine.getStackViewports();\n    viewports.forEach((viewport) => {\n        const imageIds = viewport.getImageIds();\n        if (imageIds.includes(imageId)) {\n            viewport.calibrateSpacing(imageId);\n        }\n    });\n}\n","var Events;\n(function (Events) {\n    Events[\"CLIP_STOPPED\"] = \"CORNERSTONE_CINE_TOOL_STOPPED\";\n    Events[\"CLIP_STARTED\"] = \"CORNERSTONE_CINE_TOOL_STARTED\";\n})(Events || (Events = {}));\nexport default Events;\n","import { glMatrix, vec3 } from 'gl-matrix';\nimport { utilities as csUtils, getEnabledElement, StackViewport, VideoViewport, VolumeViewport, cache, BaseVolumeViewport, Enums, } from '@cornerstonejs/core';\nimport CINE_EVENTS from './events';\nimport { addToolState, getToolState, getToolStateByViewportId } from './state';\nconst { ViewportStatus } = Enums;\nconst { triggerEvent } = csUtils;\nconst debounced = true;\nconst dynamicVolumesPlayingMap = new Map();\nfunction playClip(element, playClipOptions) {\n    let playClipTimeouts;\n    let playClipIsTimeVarying;\n    if (element === undefined) {\n        throw new Error('playClip: element must not be undefined');\n    }\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        throw new Error('playClip: element must be a valid Cornerstone enabled element');\n    }\n    if (!playClipOptions) {\n        playClipOptions = {};\n    }\n    playClipOptions.dynamicCineEnabled =\n        playClipOptions.dynamicCineEnabled ?? true;\n    const { viewport } = enabledElement;\n    const playClipContext = _createCinePlayContext(viewport, playClipOptions);\n    let playClipData = getToolState(element);\n    const isDynamicCinePlaying = playClipOptions.dynamicCineEnabled;\n    if (isDynamicCinePlaying) {\n        _stopDynamicVolumeCine(element);\n    }\n    if (!playClipData) {\n        playClipData = {\n            intervalId: undefined,\n            framesPerSecond: 30,\n            lastFrameTimeStamp: undefined,\n            ignoreFrameTimeVector: false,\n            usingFrameTimeVector: false,\n            frameTimeVector: playClipOptions.frameTimeVector ?? undefined,\n            speed: playClipOptions.frameTimeVectorSpeedMultiplier ?? 1,\n            reverse: playClipOptions.reverse ?? false,\n            loop: playClipOptions.loop ?? true,\n            bounce: playClipOptions.bounce ?? false,\n        };\n        addToolState(element, playClipData);\n    }\n    else {\n        _stopClip(element, {\n            stopDynamicCine: !isDynamicCinePlaying,\n            viewportId: viewport.id,\n        });\n    }\n    playClipData.dynamicCineEnabled = playClipOptions.dynamicCineEnabled;\n    if (playClipOptions.framesPerSecond < 0 ||\n        playClipOptions.framesPerSecond > 0) {\n        playClipData.framesPerSecond = Number(playClipOptions.framesPerSecond);\n        playClipData.reverse = playClipData.framesPerSecond < 0;\n        playClipData.ignoreFrameTimeVector = true;\n    }\n    if (playClipData.ignoreFrameTimeVector !== true &&\n        playClipData.frameTimeVector &&\n        playClipData.frameTimeVector.length === playClipContext.numScrollSteps &&\n        playClipContext.frameTimeVectorEnabled) {\n        const { timeouts, isTimeVarying } = _getPlayClipTimeouts(playClipData.frameTimeVector, playClipData.speed);\n        playClipTimeouts = timeouts;\n        playClipIsTimeVarying = isTimeVarying;\n    }\n    if (playClipOptions.bounce !== undefined) {\n        playClipData.bounce = playClipOptions.bounce;\n    }\n    const playClipAction = () => {\n        const { numScrollSteps, currentStepIndex } = playClipContext;\n        let newStepIndex = currentStepIndex + (playClipData.reverse ? -1 : 1);\n        const outOfRange = newStepIndex < 0 || newStepIndex >= numScrollSteps;\n        if (outOfRange) {\n            if (playClipData.bounce) {\n                playClipData.reverse = !playClipData.reverse;\n                newStepIndex = currentStepIndex + (playClipData.reverse ? -1 : 1);\n                newStepIndex = Math.max(0, Math.min(numScrollSteps - 1, newStepIndex));\n            }\n            else if (!playClipData.loop) {\n                _stopClip(element, {\n                    stopDynamicCine: !isDynamicCinePlaying,\n                    viewportId: viewport.id,\n                });\n                triggerEvent(element, CINE_EVENTS.CLIP_STOPPED, { element });\n                return;\n            }\n            else {\n                newStepIndex = playClipData.reverse ? numScrollSteps - 1 : 0;\n            }\n        }\n        const delta = newStepIndex - currentStepIndex;\n        if (delta) {\n            try {\n                playClipContext.scroll(delta);\n            }\n            catch (e) {\n                console.warn('Play clip not scrolling', e);\n                _stopClipWithData(playClipData);\n                triggerEvent(element, CINE_EVENTS.CLIP_STOPPED, { element });\n            }\n        }\n    };\n    if (isDynamicCinePlaying) {\n        const volume = _getVolumeFromViewport(viewport);\n        if (volume) {\n            dynamicVolumesPlayingMap.set(volume.volumeId, element);\n        }\n    }\n    if (playClipContext.play) {\n        playClipData.framesPerSecond = playClipContext.play(playClipOptions.framesPerSecond);\n    }\n    else if (playClipTimeouts &&\n        playClipTimeouts.length > 0 &&\n        playClipIsTimeVarying) {\n        playClipData.usingFrameTimeVector = true;\n        playClipData.intervalId = window.setTimeout(function playClipTimeoutHandler() {\n            playClipData.intervalId = window.setTimeout(playClipTimeoutHandler, playClipTimeouts[playClipContext.currentStepIndex]);\n            playClipAction();\n        }, 0);\n    }\n    else {\n        playClipData.usingFrameTimeVector = false;\n        playClipData.intervalId = window.setInterval(playClipAction, 1000 / Math.abs(playClipData.framesPerSecond));\n    }\n    const eventDetail = {\n        element,\n    };\n    triggerEvent(element, CINE_EVENTS.CLIP_STARTED, eventDetail);\n}\nfunction stopClip(element, options = {}) {\n    _stopClip(element, {\n        stopDynamicCine: true,\n        ...options,\n    });\n}\nfunction _stopClip(element, options = { stopDynamicCine: true, viewportId: undefined }) {\n    const { stopDynamicCine, viewportId } = options;\n    const enabledElement = getEnabledElement(element);\n    let toolState;\n    const viewport = enabledElement?.viewport;\n    if (!enabledElement) {\n        if (viewportId) {\n            toolState = getToolStateByViewportId(viewportId);\n        }\n        else {\n            return;\n        }\n    }\n    else {\n        const { viewport } = enabledElement;\n        toolState = getToolState(viewport.element);\n    }\n    if (toolState) {\n        _stopClipWithData(toolState);\n    }\n    if (viewport instanceof VideoViewport) {\n        viewport.pause();\n    }\n    else if (stopDynamicCine && viewport instanceof BaseVolumeViewport) {\n        _stopDynamicVolumeCine(element);\n    }\n}\nfunction _stopDynamicVolumeCine(element) {\n    const { viewport } = getEnabledElement(element);\n    if (viewport instanceof VolumeViewport) {\n        const volume = _getVolumeFromViewport(viewport);\n        if (volume?.isDynamicVolume()) {\n            const dynamicCineElement = dynamicVolumesPlayingMap.get(volume.volumeId);\n            dynamicVolumesPlayingMap.delete(volume.volumeId);\n            if (dynamicCineElement && dynamicCineElement !== element) {\n                stopClip(dynamicCineElement);\n            }\n        }\n    }\n}\nfunction _getPlayClipTimeouts(vector, speed) {\n    let i;\n    let sample;\n    let delay;\n    let sum = 0;\n    const limit = vector.length;\n    const timeouts = [];\n    let isTimeVarying = false;\n    if (typeof speed !== 'number' || speed <= 0) {\n        speed = 1;\n    }\n    for (i = 1; i < limit; i++) {\n        delay = (Number(vector[i]) / speed) | 0;\n        timeouts.push(delay);\n        if (i === 1) {\n            sample = delay;\n        }\n        else if (delay !== sample) {\n            isTimeVarying = true;\n        }\n        sum += delay;\n    }\n    if (timeouts.length > 0) {\n        if (isTimeVarying) {\n            delay = (sum / timeouts.length) | 0;\n        }\n        else {\n            delay = timeouts[0];\n        }\n        timeouts.push(delay);\n    }\n    return { timeouts, isTimeVarying };\n}\nfunction _stopClipWithData(playClipData) {\n    const id = playClipData.intervalId;\n    if (typeof id !== 'undefined') {\n        playClipData.intervalId = undefined;\n        if (playClipData.usingFrameTimeVector) {\n            clearTimeout(id);\n        }\n        else {\n            clearInterval(id);\n        }\n    }\n}\nfunction _getVolumeFromViewport(viewport) {\n    if (!(viewport instanceof VolumeViewport)) {\n        return undefined;\n    }\n    const volumeIds = viewport.getAllVolumeIds();\n    if (!volumeIds?.length) {\n        return undefined;\n    }\n    const dynamicVolumeId = volumeIds.find((volumeId) => cache.getVolume(volumeId)?.isDynamicVolume());\n    const volumeId = dynamicVolumeId ?? volumeIds[0];\n    return cache.getVolume(volumeId);\n}\nfunction _createStackViewportCinePlayContext(viewport, waitForRendered) {\n    const imageIds = viewport.getImageIds();\n    return {\n        get numScrollSteps() {\n            return imageIds.length;\n        },\n        get currentStepIndex() {\n            return viewport.getTargetImageIdIndex();\n        },\n        get frameTimeVectorEnabled() {\n            return true;\n        },\n        waitForRenderedCount: 0,\n        scroll(delta) {\n            if (this.waitForRenderedCount <= waitForRendered &&\n                viewport.viewportStatus !== ViewportStatus.RENDERED) {\n                this.waitForRenderedCount++;\n                return;\n            }\n            this.waitForRenderedCount = 0;\n            csUtils.scroll(viewport, { delta, debounceLoading: debounced });\n        },\n    };\n}\nfunction _createVideoViewportCinePlayContext(viewport, waitForRendered) {\n    return {\n        get numScrollSteps() {\n            return viewport.getNumberOfSlices();\n        },\n        get currentStepIndex() {\n            return viewport.getSliceIndex();\n        },\n        get frameTimeVectorEnabled() {\n            return true;\n        },\n        waitForRenderedCount: 0,\n        scroll(delta) {\n            if (this.waitForRenderedCount <= waitForRendered &&\n                viewport.viewportStatus !== ViewportStatus.RENDERED) {\n                this.waitForRenderedCount++;\n                return;\n            }\n            this.waitForRenderedCount = 0;\n            csUtils.scroll(viewport, { delta, debounceLoading: debounced });\n        },\n        play(fps) {\n            if (fps) {\n                viewport.setPlaybackRate(fps / 24);\n            }\n            viewport.play();\n            return viewport.getFrameRate();\n        },\n    };\n}\nfunction _createVolumeViewportCinePlayContext(viewport, volume) {\n    const { volumeId } = volume;\n    const cachedScrollInfo = {\n        viewPlaneNormal: vec3.create(),\n        scrollInfo: null,\n    };\n    const getScrollInfo = () => {\n        const camera = viewport.getCamera();\n        const updateCache = !cachedScrollInfo.scrollInfo ||\n            !vec3.equals(camera.viewPlaneNormal, cachedScrollInfo.viewPlaneNormal);\n        if (updateCache) {\n            const scrollInfo = csUtils.getVolumeViewportScrollInfo(viewport, volumeId);\n            cachedScrollInfo.viewPlaneNormal = camera.viewPlaneNormal;\n            cachedScrollInfo.scrollInfo = scrollInfo;\n        }\n        return cachedScrollInfo.scrollInfo;\n    };\n    return {\n        get numScrollSteps() {\n            return getScrollInfo().numScrollSteps;\n        },\n        get currentStepIndex() {\n            return getScrollInfo().currentStepIndex;\n        },\n        get frameTimeVectorEnabled() {\n            const camera = viewport.getCamera();\n            const volumeViewPlaneNormal = volume.direction\n                .slice(6, 9)\n                .map((x) => -x);\n            const dot = vec3.dot(volumeViewPlaneNormal, camera.viewPlaneNormal);\n            return glMatrix.equals(dot, 1);\n        },\n        scroll(delta) {\n            getScrollInfo().currentStepIndex += delta;\n            csUtils.scroll(viewport, { delta });\n        },\n    };\n}\nfunction _createDynamicVolumeViewportCinePlayContext(volume) {\n    return {\n        get numScrollSteps() {\n            return volume.numDimensionGroups;\n        },\n        get currentStepIndex() {\n            return volume.dimensionGroupNumber - 1;\n        },\n        get frameTimeVectorEnabled() {\n            return false;\n        },\n        scroll(delta) {\n            volume.scroll(delta);\n        },\n    };\n}\nfunction _createCinePlayContext(viewport, playClipOptions) {\n    if (viewport instanceof StackViewport) {\n        return _createStackViewportCinePlayContext(viewport, playClipOptions.waitForRendered ?? 30);\n    }\n    if (viewport instanceof VolumeViewport) {\n        const volume = _getVolumeFromViewport(viewport);\n        if (playClipOptions.dynamicCineEnabled && volume?.isDynamicVolume()) {\n            return _createDynamicVolumeViewportCinePlayContext(volume);\n        }\n        return _createVolumeViewportCinePlayContext(viewport, volume);\n    }\n    if (viewport instanceof VideoViewport) {\n        return _createVideoViewportCinePlayContext(viewport, playClipOptions.waitForRendered ?? 30);\n    }\n    throw new Error('Unknown viewport type');\n}\nexport { playClip, stopClip };\n","import { getEnabledElement } from '@cornerstonejs/core';\nconst state = {};\nfunction addToolState(element, data) {\n    const enabledElement = getEnabledElement(element);\n    const { viewportId } = enabledElement;\n    state[viewportId] = data;\n}\nfunction getToolState(element) {\n    const enabledElement = getEnabledElement(element);\n    const { viewportId } = enabledElement;\n    return state[viewportId];\n}\nfunction getToolStateByViewportId(viewportId) {\n    return state[viewportId];\n}\nexport { addToolState, getToolState, getToolStateByViewportId };\n","import { setAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nexport function addContourSegmentationAnnotation(annotation) {\n    if (annotation.parentAnnotationUID) {\n        return;\n    }\n    if (!annotation.data.segmentation) {\n        throw new Error('addContourSegmentationAnnotation: annotation does not have a segmentation data');\n    }\n    const { segmentationId, segmentIndex } = annotation.data.segmentation;\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation.representationData.Contour) {\n        segmentation.representationData.Contour = { annotationUIDsMap: new Map() };\n    }\n    let { annotationUIDsMap } = segmentation.representationData.Contour;\n    if (!annotationUIDsMap) {\n        annotationUIDsMap = new Map();\n    }\n    let annotationsUIDsSet = annotationUIDsMap?.get(segmentIndex);\n    if (!annotationsUIDsSet) {\n        annotationsUIDsSet = new Set();\n        annotationUIDsMap.set(segmentIndex, annotationsUIDsSet);\n    }\n    if (segmentation.segments[segmentIndex].locked) {\n        setAnnotationLocked(annotation.annotationUID, true);\n    }\n    annotationUIDsMap.set(segmentIndex, annotationsUIDsSet.add(annotation.annotationUID));\n}\n","export default function areSameSegment(firstAnnotation, secondAnnotation) {\n    const { segmentation: firstSegmentation } = firstAnnotation.data;\n    const { segmentation: secondSegmentation } = secondAnnotation.data;\n    return (firstSegmentation.segmentationId === secondSegmentation.segmentationId &&\n        firstSegmentation.segmentIndex === secondSegmentation.segmentIndex);\n}\n","export function areViewReferencesEqual(a, b) {\n    if (!a || !b) {\n        return false;\n    }\n    if (a.FrameOfReferenceUID !== b.FrameOfReferenceUID) {\n        return false;\n    }\n    if (a.referencedImageId !== b.referencedImageId) {\n        return false;\n    }\n    if (!a.viewPlaneNormal || !b.viewPlaneNormal) {\n        return false;\n    }\n    if (a.viewPlaneNormal.length !== b.viewPlaneNormal.length) {\n        return false;\n    }\n    for (let i = 0; i < a.viewPlaneNormal.length; i++) {\n        if (a.viewPlaneNormal[i] !== b.viewPlaneNormal[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n","import { getAnnotation } from '../../stateManagement/annotation/annotationState';\nimport getViewportsForAnnotation from '../getViewportsForAnnotation';\nimport { convertContourPolylineToCanvasSpace, checkIntersection, createPolylineHole, combinePolylines, } from './sharedOperations';\nexport async function contourSegmentationOperation(sourceAnnotationOrUID, targetAnnotationOrUID, viewport, contourHoleProcessingEnabled = true) {\n    const sourceAnnotation = typeof sourceAnnotationOrUID === 'string'\n        ? getAnnotation(sourceAnnotationOrUID)\n        : sourceAnnotationOrUID;\n    const targetAnnotation = typeof targetAnnotationOrUID === 'string'\n        ? getAnnotation(targetAnnotationOrUID)\n        : targetAnnotationOrUID;\n    if (!sourceAnnotation || !targetAnnotation) {\n        throw new Error('Both source and target annotations must be valid');\n    }\n    if (!viewport) {\n        viewport = getViewportFromAnnotation(sourceAnnotation);\n    }\n    const sourcePolyline = convertContourPolylineToCanvasSpace(sourceAnnotation.data.contour.polyline, viewport);\n    const targetPolyline = convertContourPolylineToCanvasSpace(targetAnnotation.data.contour.polyline, viewport);\n    const intersectionInfo = checkIntersection(sourcePolyline, targetPolyline);\n    if (!intersectionInfo.hasIntersection) {\n        console.warn('No intersection found between the two annotations');\n        return;\n    }\n    if (intersectionInfo.isContourHole) {\n        if (!contourHoleProcessingEnabled) {\n            console.warn('Hole processing is disabled');\n            return;\n        }\n        createPolylineHole(viewport, targetAnnotation, sourceAnnotation);\n    }\n    else {\n        combinePolylines(viewport, targetAnnotation, targetPolyline, sourceAnnotation, sourcePolyline);\n    }\n}\nfunction getViewportFromAnnotation(annotation) {\n    const viewports = getViewportsForAnnotation(annotation);\n    if (!viewports.length) {\n        throw new Error('No viewport found for the annotation');\n    }\n    return viewports[0];\n}\n","import { utilities } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotation } from '../../stateManagement';\nimport { getViewportAssociatedToSegmentation } from '../../stateManagement/segmentation/utilities/getViewportAssociatedToSegmentation';\nimport { getToolGroupForViewport } from '../../store/ToolGroupManager';\nimport { getAnnotationsUIDMapFromSegmentation } from '../../stateManagement/segmentation/utilities/getAnnotationsUIDMapFromSegmentation';\nexport function copyAnnotation(annotation, segmentationId, segmentIndex) {\n    const newAnnotation = {\n        annotationUID: utilities.uuidv4(),\n        data: {\n            contour: {\n                closed: true,\n                polyline: [],\n            },\n            segmentation: {\n                segmentationId,\n                segmentIndex,\n            },\n            handles: {},\n        },\n        handles: {},\n        highlighted: false,\n        autoGenerated: false,\n        invalidated: false,\n        isLocked: false,\n        isVisible: true,\n        metadata: {\n            ...annotation.metadata,\n            toolName: annotation.metadata.toolName,\n        },\n    };\n    newAnnotation.data.segmentation.segmentationId = segmentationId;\n    newAnnotation.data.segmentation.segmentIndex = segmentIndex;\n    if (annotation.data.contour?.polyline) {\n        newAnnotation.data.contour.polyline = [...annotation.data.contour.polyline];\n    }\n    if (annotation.data.handles?.points) {\n        newAnnotation.data.handles.points = annotation.data.handles.points.map((point) => [...point]);\n    }\n    return newAnnotation;\n}\nexport function copyContourSegment(segmentationId, segmentIndex, targetSegmentationId, targetSegmentIndex) {\n    const annotationUIDsMap = getAnnotationsUIDMapFromSegmentation(segmentationId);\n    const targetAnnotationUIDsMap = getAnnotationsUIDMapFromSegmentation(targetSegmentationId);\n    if (!annotationUIDsMap || !targetAnnotationUIDsMap) {\n        return;\n    }\n    if (!annotationUIDsMap?.has(segmentIndex)) {\n        return;\n    }\n    const annotationUIDs = annotationUIDsMap.get(segmentIndex);\n    const viewport = getViewportAssociatedToSegmentation(targetSegmentationId);\n    if (!viewport) {\n        return;\n    }\n    const toolGroup = getToolGroupForViewport(viewport.id);\n    const copyContourAnnotation = (annotation) => {\n        const newAnnotation = copyAnnotation(annotation, targetSegmentationId, targetSegmentIndex);\n        if (toolGroup) {\n            const instance = toolGroup.getToolInstance(annotation.metadata.toolName);\n            if (instance) {\n                if (typeof instance.isSplineAnnotation === 'function' &&\n                    instance.isSplineAnnotation(annotation)) {\n                    instance.createSplineObjectFromType(newAnnotation, annotation.data.spline.type);\n                }\n            }\n        }\n        addAnnotation(newAnnotation, viewport.element);\n        newAnnotationsUID.add(newAnnotation.annotationUID);\n        return newAnnotation;\n    };\n    const newAnnotationsUID = new Set();\n    for (const annotationUID of annotationUIDs) {\n        const annotation = getAnnotation(annotationUID);\n        const newAnnotation = copyContourAnnotation(annotation);\n        if (annotation?.childAnnotationUIDs) {\n            newAnnotation.childAnnotationUIDs = [];\n            for (const childAnnotationUID of annotation.childAnnotationUIDs) {\n                const childAnnotation = getAnnotation(childAnnotationUID);\n                const newChildAnnotation = copyContourAnnotation(childAnnotation);\n                newChildAnnotation.parentAnnotationUID = newAnnotation.annotationUID;\n                newAnnotation.childAnnotationUIDs.push(newChildAnnotation.annotationUID);\n            }\n        }\n    }\n    targetAnnotationUIDsMap.set(targetSegmentIndex, newAnnotationsUID);\n}\n","import * as math from '../math';\nfunction findAllIntersectingContours(viewport, sourcePolyline, contourSegmentationAnnotations) {\n    const intersectingContours = [];\n    const sourceAABB = math.polyline.getAABB(sourcePolyline);\n    for (let i = 0; i < contourSegmentationAnnotations.length; i++) {\n        const targetAnnotation = contourSegmentationAnnotations[i];\n        const targetPolyline = convertContourPolylineToCanvasSpace(targetAnnotation.data.contour.polyline, viewport);\n        const targetAABB = math.polyline.getAABB(targetPolyline);\n        const aabbIntersect = math.aabb.intersectAABB(sourceAABB, targetAABB);\n        if (!aabbIntersect) {\n            continue;\n        }\n        const lineSegmentsIntersect = math.polyline.intersectPolyline(sourcePolyline, targetPolyline);\n        const isContourHole = !lineSegmentsIntersect &&\n            math.polyline.containsPoints(targetPolyline, sourcePolyline);\n        if (lineSegmentsIntersect || isContourHole) {\n            intersectingContours.push({\n                targetAnnotation,\n                targetPolyline,\n                isContourHole,\n            });\n        }\n    }\n    return intersectingContours;\n}\nfunction convertContourPolylineToCanvasSpace(polyline, viewport) {\n    const numPoints = polyline.length;\n    const projectedPolyline = new Array(numPoints);\n    for (let i = 0; i < numPoints; i++) {\n        projectedPolyline[i] = viewport.worldToCanvas(polyline[i]);\n    }\n    return projectedPolyline;\n}\nexport { findAllIntersectingContours };\n","export function getViewReferenceFromAnnotation(annotation) {\n    const { metadata } = annotation;\n    if (!metadata) {\n        return {};\n    }\n    const { FrameOfReferenceUID, referencedImageId, referencedImageURI, multiSliceReference, cameraFocalPoint, viewPlaneNormal, viewUp, sliceIndex, volumeId, bounds, } = metadata;\n    const viewReference = {\n        FrameOfReferenceUID,\n        referencedImageId,\n        referencedImageURI,\n        multiSliceReference,\n        cameraFocalPoint,\n        viewPlaneNormal,\n        viewUp,\n        sliceIndex,\n        volumeId,\n        bounds,\n    };\n    return viewReference;\n}\n","import { utilities } from '@cornerstonejs/core';\nimport { addAnnotation, removeAnnotation } from '../../stateManagement';\nimport { removeContourSegmentationAnnotation } from './removeContourSegmentationAnnotation';\nimport { addContourSegmentationAnnotation } from './addContourSegmentationAnnotation';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nconst DEFAULT_CONTOUR_SEG_TOOL_NAME = 'PlanarFreehandContourSegmentationTool';\nexport default function convertContourSegmentationAnnotation(annotation) {\n    const { polyline } = annotation.data?.contour || {};\n    if (!polyline || polyline.length < 3) {\n        console.warn('Skipping creation of new annotation due to invalid polyline:', polyline);\n        return;\n    }\n    removeAnnotation(annotation.annotationUID);\n    removeContourSegmentationAnnotation(annotation);\n    const startPointWorld = polyline[0];\n    const endPointWorld = polyline[polyline.length - 1];\n    const newAnnotation = {\n        metadata: {\n            ...annotation.metadata,\n            toolName: DEFAULT_CONTOUR_SEG_TOOL_NAME,\n            originalToolName: annotation.metadata.originalToolName || annotation.metadata.toolName,\n        },\n        data: {\n            cachedStats: {},\n            handles: {\n                points: [startPointWorld, endPointWorld],\n                textBox: annotation.data.handles.textBox\n                    ? { ...annotation.data.handles.textBox }\n                    : undefined,\n            },\n            contour: {\n                ...annotation.data.contour,\n            },\n            spline: annotation.data.spline,\n            segmentation: {\n                ...annotation.data.segmentation,\n            },\n        },\n        annotationUID: utilities.uuidv4(),\n        highlighted: true,\n        invalidated: true,\n        isLocked: false,\n        isVisible: undefined,\n        interpolationUID: annotation.interpolationUID,\n        interpolationCompleted: annotation.interpolationCompleted,\n    };\n    addAnnotation(newAnnotation, annotation.metadata.FrameOfReferenceUID);\n    addContourSegmentationAnnotation(newAnnotation);\n    triggerAnnotationModified(newAnnotation);\n    return newAnnotation;\n}\n","export default function isContourSegmentationAnnotation(annotation) {\n    return !!annotation.data?.segmentation;\n}\n","import { utilities } from '@cornerstonejs/core';\nimport { addAnnotation } from '../../stateManagement';\nconst DEFAULT_CONTOUR_SEG_TOOLNAME = 'PlanarFreehandContourSegmentationTool';\nexport default function addPolylinesToSegmentation(viewport, annotationUIDsMap, segmentationId, polylinesInfo, segmentIndex) {\n    polylinesInfo.forEach(({ polyline, viewReference }) => {\n        if (polyline.length < 3) {\n            return;\n        }\n        const contourSegmentationAnnotation = {\n            annotationUID: utilities.uuidv4(),\n            data: {\n                contour: {\n                    closed: true,\n                    polyline,\n                },\n                segmentation: {\n                    segmentationId,\n                    segmentIndex,\n                },\n                handles: {},\n            },\n            handles: {},\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: DEFAULT_CONTOUR_SEG_TOOLNAME,\n                ...viewReference,\n            },\n        };\n        addAnnotation(contourSegmentationAnnotation, viewport.element);\n        const currentSet = annotationUIDsMap?.get(segmentIndex) || new Set();\n        currentSet.add(contourSegmentationAnnotation.annotationUID);\n        annotationUIDsMap.set(segmentIndex, currentSet);\n    });\n    return annotationUIDsMap;\n}\n","import { getAnnotation, removeAnnotation } from '../../stateManagement';\nimport { convertContourPolylineToCanvasSpace, convertContourPolylineToWorld, } from './sharedOperations';\nimport addPolylinesToSegmentation from './addPolylinesToSegmentation';\nimport { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nimport { copyContourSegment } from './copyAnnotation';\nimport { removeContourSegmentationAnnotation } from './removeContourSegmentationAnnotation';\nimport { getViewportAssociatedToSegmentation } from '../../stateManagement/segmentation/utilities/getViewportAssociatedToSegmentation';\nimport { unifyPolylineSets } from './polylineUnify';\nimport { subtractPolylineSets } from './polylineSubtract';\nimport { intersectPolylinesSets } from './polylineIntersect';\nimport { xorPolylinesSets } from './polylineXor';\nimport { getViewReferenceFromAnnotation } from './getViewReferenceFromAnnotation';\nexport var LogicalOperation;\n(function (LogicalOperation) {\n    LogicalOperation[LogicalOperation[\"Union\"] = 0] = \"Union\";\n    LogicalOperation[LogicalOperation[\"Subtract\"] = 1] = \"Subtract\";\n    LogicalOperation[LogicalOperation[\"Intersect\"] = 2] = \"Intersect\";\n    LogicalOperation[LogicalOperation[\"XOR\"] = 3] = \"XOR\";\n    LogicalOperation[LogicalOperation[\"Copy\"] = 4] = \"Copy\";\n    LogicalOperation[LogicalOperation[\"Delete\"] = 5] = \"Delete\";\n})(LogicalOperation || (LogicalOperation = {}));\nfunction getPolylinesInfoWorld(contourRepresentationData, segmentIndex) {\n    const polylinesInfo = [];\n    const { annotationUIDsMap } = contourRepresentationData || {};\n    if (!annotationUIDsMap?.has(segmentIndex)) {\n        return;\n    }\n    const annotationUIDs = annotationUIDsMap.get(segmentIndex);\n    for (const annotationUID of annotationUIDs) {\n        const annotation = getAnnotation(annotationUID);\n        const { polyline } = annotation.data.contour;\n        polylinesInfo.push({\n            polyline,\n            viewReference: getViewReferenceFromAnnotation(annotation),\n        });\n    }\n    return polylinesInfo;\n}\nfunction extractPolylinesInCanvasSpace(viewport, segment1, segment2) {\n    const segmentation1 = getSegmentation(segment1.segmentationId);\n    const segmentation2 = getSegmentation(segment2.segmentationId);\n    if (!segmentation1 || !segmentation2) {\n        return;\n    }\n    if (!segmentation1.representationData.Contour ||\n        !segmentation2.representationData.Contour) {\n        return;\n    }\n    const polyLinesInfoWorld1 = getPolylinesInfoWorld(segmentation1.representationData.Contour, segment1.segmentIndex);\n    const polyLinesInfoWorld2 = getPolylinesInfoWorld(segmentation2.representationData.Contour, segment2.segmentIndex);\n    if (!polyLinesInfoWorld1 || !polyLinesInfoWorld2) {\n        return;\n    }\n    const polyLinesInfoCanvas1 = polyLinesInfoWorld1.map(({ polyline, viewReference }) => {\n        return {\n            polyline: convertContourPolylineToCanvasSpace(polyline, viewport),\n            viewReference,\n        };\n    });\n    const polyLinesInfoCanvas2 = polyLinesInfoWorld2.map(({ polyline, viewReference }) => {\n        return {\n            polyline: convertContourPolylineToCanvasSpace(polyline, viewport),\n            viewReference,\n        };\n    });\n    return { polyLinesInfoCanvas1, polyLinesInfoCanvas2 };\n}\nfunction addSegmentInSegmentation(segmentation, { segmentIndex, label, color }) {\n    if (!segmentation?.segments) {\n        return;\n    }\n    const segmentData = segmentation.segments[segmentIndex] ?? {\n        active: false,\n        locked: false,\n        segmentIndex,\n        cachedStats: {},\n        label,\n        color,\n    };\n    if (label !== undefined) {\n        segmentData.label = label;\n    }\n    if (color !== undefined) {\n        segmentData.color = color;\n    }\n    segmentation.segments[segmentIndex] = segmentData;\n}\nfunction removeAnnotations(annotationUIDList) {\n    annotationUIDList.forEach((annotationUID) => {\n        const annotation = getAnnotation(annotationUID);\n        removeAnnotation(annotationUID);\n        removeContourSegmentationAnnotation(annotation);\n    });\n    annotationUIDList.clear();\n}\nfunction applyLogicalOperation(segment1, segment2, options, operation) {\n    const viewport = getViewportAssociatedToSegmentation(segment1.segmentationId);\n    if (!viewport) {\n        return;\n    }\n    const { polyLinesInfoCanvas1, polyLinesInfoCanvas2 } = extractPolylinesInCanvasSpace(viewport, segment1, segment2) || {};\n    if (!polyLinesInfoCanvas1 || !polyLinesInfoCanvas2) {\n        return;\n    }\n    let polylinesMerged;\n    switch (operation) {\n        case LogicalOperation.Union:\n            polylinesMerged = unifyPolylineSets(polyLinesInfoCanvas1, polyLinesInfoCanvas2);\n            break;\n        case LogicalOperation.Subtract:\n            polylinesMerged = subtractPolylineSets(polyLinesInfoCanvas1, polyLinesInfoCanvas2);\n            break;\n        case LogicalOperation.Intersect:\n            polylinesMerged = intersectPolylinesSets(polyLinesInfoCanvas1, polyLinesInfoCanvas2);\n            break;\n        case LogicalOperation.XOR:\n            polylinesMerged = xorPolylinesSets(polyLinesInfoCanvas1, polyLinesInfoCanvas2);\n            break;\n        default:\n            polylinesMerged = unifyPolylineSets(polyLinesInfoCanvas1, polyLinesInfoCanvas2);\n            break;\n    }\n    const polyLinesWorld = polylinesMerged.map(({ polyline, viewReference }) => {\n        return {\n            polyline: convertContourPolylineToWorld(polyline, viewport),\n            viewReference,\n        };\n    });\n    const resultSegment = options;\n    const segmentation = getSegmentation(resultSegment.segmentationId);\n    const segmentIndex = resultSegment.segmentIndex;\n    const color = resultSegment.color;\n    const label = resultSegment.label;\n    const contourRepresentationData = segmentation.representationData\n        .Contour;\n    const { annotationUIDsMap } = contourRepresentationData;\n    if (!annotationUIDsMap) {\n        return;\n    }\n    if (segment1.segmentationId === resultSegment.segmentationId &&\n        segment1.segmentIndex === segmentIndex) {\n        const existingAnnotationUIDs = annotationUIDsMap.get(segmentIndex);\n        if (existingAnnotationUIDs) {\n            removeAnnotations(existingAnnotationUIDs);\n        }\n    }\n    addPolylinesToSegmentation(viewport, annotationUIDsMap, segmentation.segmentationId, polyLinesWorld, segmentIndex);\n    addSegmentInSegmentation(segmentation, { segmentIndex, color, label });\n}\nexport function add(segment1, segment2, options) {\n    applyLogicalOperation(segment1, segment2, options, LogicalOperation.Union);\n}\nexport function subtract(segment1, segment2, options) {\n    applyLogicalOperation(segment1, segment2, options, LogicalOperation.Subtract);\n}\nexport function intersect(segment1, segment2, options) {\n    applyLogicalOperation(segment1, segment2, options, LogicalOperation.Intersect);\n}\nexport function xor(segment1, segment2, options) {\n    applyLogicalOperation(segment1, segment2, options, LogicalOperation.XOR);\n}\nexport function copy(segment, options) {\n    copyContourSegment(segment.segmentationId, segment.segmentIndex, options.segmentationId, options.segmentIndex);\n}\nexport function deleteOperation(segment) {\n    const segmentation = getSegmentation(segment.segmentationId);\n    if (!segmentation) {\n        console.log('No active segmentation detected');\n        return;\n    }\n    if (!segmentation.representationData.Contour) {\n        console.log('No contour representation found');\n        return;\n    }\n    const representationData = segmentation.representationData.Contour;\n    const { annotationUIDsMap } = representationData;\n    if (!annotationUIDsMap) {\n        console.log('No annotation map found');\n        return;\n    }\n    if (!annotationUIDsMap.has(segment.segmentIndex)) {\n        console.log('Segmentation index has no annotations');\n        return;\n    }\n    const annotationUIDList = annotationUIDsMap.get(segment.segmentIndex);\n    removeAnnotations(annotationUIDList);\n}\n","import { utilities as csUtils, getEnabledElement } from '@cornerstonejs/core';\nimport { ContourWindingDirection } from '../../types/ContourAnnotation';\nimport * as math from '../math';\nimport updateContourPolyline from '../contours/updateContourPolyline';\nimport { addAnnotation, removeAnnotation, getChildAnnotations, addChildAnnotation, clearParentAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { addContourSegmentationAnnotation } from './addContourSegmentationAnnotation';\nimport { removeContourSegmentationAnnotation } from './removeContourSegmentationAnnotation';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nimport triggerAnnotationRenderForViewportIds from '../triggerAnnotationRenderForViewportIds';\nimport { getViewportIdsWithToolToRender } from '../viewportFilters';\nimport { hasToolByName, hasTool } from '../../store/addTool';\nconst DEFAULT_CONTOUR_SEG_TOOL_NAME = 'PlanarFreehandContourSegmentationTool';\nfunction processMultipleIntersections(viewport, sourceAnnotation, sourcePolyline, intersectingContours) {\n    const holeOperations = intersectingContours.filter((item) => item.isContourHole);\n    const mergeOperations = intersectingContours.filter((item) => !item.isContourHole);\n    if (holeOperations.length > 0) {\n        const primaryHoleTarget = holeOperations[0];\n        createPolylineHole(viewport, primaryHoleTarget.targetAnnotation, sourceAnnotation);\n        updateViewportsForAnnotations(viewport, [\n            sourceAnnotation,\n            primaryHoleTarget.targetAnnotation,\n        ]);\n        return;\n    }\n    if (mergeOperations.length === 0) {\n        return;\n    }\n    if (!hasToolByName(DEFAULT_CONTOUR_SEG_TOOL_NAME)) {\n        console.warn(`${DEFAULT_CONTOUR_SEG_TOOL_NAME} is not registered in cornerstone. Cannot process multiple intersections.`);\n        return;\n    }\n    processSequentialIntersections(viewport, sourceAnnotation, sourcePolyline, mergeOperations);\n}\nfunction processSequentialIntersections(viewport, sourceAnnotation, sourcePolyline, mergeOperations) {\n    const { element } = viewport;\n    const allAnnotationsToRemove = [sourceAnnotation];\n    const allResultPolylines = [];\n    const allHoles = [];\n    mergeOperations.forEach(({ targetAnnotation }) => {\n        const holes = getContourHolesData(viewport, targetAnnotation);\n        allHoles.push(...holes);\n        allAnnotationsToRemove.push(targetAnnotation);\n    });\n    const sourceStartPoint = sourcePolyline[0];\n    const shouldMerge = mergeOperations.some(({ targetPolyline }) => math.polyline.containsPoint(targetPolyline, sourceStartPoint));\n    if (shouldMerge) {\n        let resultPolyline = sourcePolyline;\n        mergeOperations.forEach(({ targetPolyline }) => {\n            resultPolyline = math.polyline.mergePolylines(resultPolyline, targetPolyline);\n        });\n        allResultPolylines.push(resultPolyline);\n    }\n    else {\n        mergeOperations.forEach(({ targetPolyline }) => {\n            const subtractedPolylines = math.polyline.subtractPolylines(targetPolyline, sourcePolyline);\n            allResultPolylines.push(...subtractedPolylines);\n        });\n    }\n    allAnnotationsToRemove.forEach((annotation) => {\n        removeAnnotation(annotation.annotationUID);\n        removeContourSegmentationAnnotation(annotation);\n    });\n    allHoles.forEach((holeData) => clearParentAnnotation(holeData.annotation));\n    const baseAnnotation = mergeOperations[0].targetAnnotation;\n    const newAnnotations = [];\n    allResultPolylines.forEach((polyline) => {\n        if (!polyline || polyline.length < 3) {\n            console.warn('Skipping creation of new annotation due to invalid polyline:', polyline);\n            return;\n        }\n        const newAnnotation = createNewAnnotationFromPolyline(viewport, baseAnnotation, polyline);\n        addAnnotation(newAnnotation, element);\n        addContourSegmentationAnnotation(newAnnotation);\n        triggerAnnotationModified(newAnnotation, viewport.element);\n        newAnnotations.push(newAnnotation);\n    });\n    reassignHolesToNewAnnotations(viewport, allHoles, newAnnotations);\n    updateViewportsForAnnotations(viewport, allAnnotationsToRemove);\n}\nfunction createNewAnnotationFromPolyline(viewport, baseAnnotation, polyline) {\n    const startPointWorld = viewport.canvasToWorld(polyline[0]);\n    const endPointWorld = viewport.canvasToWorld(polyline[polyline.length - 1]);\n    const newAnnotation = {\n        metadata: {\n            ...baseAnnotation.metadata,\n            toolName: DEFAULT_CONTOUR_SEG_TOOL_NAME,\n            originalToolName: baseAnnotation.metadata.originalToolName ||\n                baseAnnotation.metadata.toolName,\n        },\n        data: {\n            cachedStats: {},\n            handles: {\n                points: [startPointWorld, endPointWorld],\n                textBox: baseAnnotation.data.handles.textBox\n                    ? { ...baseAnnotation.data.handles.textBox }\n                    : undefined,\n            },\n            contour: {\n                polyline: [],\n                closed: true,\n            },\n            spline: baseAnnotation.data.spline,\n            segmentation: {\n                ...baseAnnotation.data.segmentation,\n            },\n        },\n        annotationUID: csUtils.uuidv4(),\n        highlighted: true,\n        invalidated: true,\n        isLocked: false,\n        isVisible: undefined,\n        interpolationUID: baseAnnotation.interpolationUID,\n        interpolationCompleted: baseAnnotation.interpolationCompleted,\n    };\n    updateContourPolyline(newAnnotation, {\n        points: polyline,\n        closed: true,\n        targetWindingDirection: ContourWindingDirection.Clockwise,\n    }, viewport);\n    return newAnnotation;\n}\nfunction reassignHolesToNewAnnotations(viewport, holes, newAnnotations) {\n    holes.forEach((holeData) => {\n        const parentAnnotation = newAnnotations.find((annotation) => {\n            const parentPolyline = convertContourPolylineToCanvasSpace(annotation.data.contour.polyline, viewport);\n            return math.polyline.containsPoints(parentPolyline, holeData.polyline);\n        });\n        if (parentAnnotation) {\n            addChildAnnotation(parentAnnotation, holeData.annotation);\n        }\n    });\n}\nfunction getContourHolesData(viewport, annotation) {\n    return getChildAnnotations(annotation).map((holeAnnotation) => {\n        const contourHoleAnnotation = holeAnnotation;\n        const polyline = convertContourPolylineToCanvasSpace(contourHoleAnnotation.data.contour.polyline, viewport);\n        return { annotation: contourHoleAnnotation, polyline };\n    });\n}\nfunction createPolylineHole(viewport, targetAnnotation, holeAnnotation) {\n    addChildAnnotation(targetAnnotation, holeAnnotation);\n    removeContourSegmentationAnnotation(holeAnnotation);\n    const { contour: holeContour } = holeAnnotation.data;\n    const holePolylineCanvas = convertContourPolylineToCanvasSpace(holeContour.polyline, viewport);\n    updateContourPolyline(holeAnnotation, {\n        points: holePolylineCanvas,\n        closed: holeContour.closed,\n        targetWindingDirection: targetAnnotation.data.contour.windingDirection ===\n            ContourWindingDirection.Clockwise\n            ? ContourWindingDirection.CounterClockwise\n            : ContourWindingDirection.Clockwise,\n    }, viewport);\n}\nfunction convertContourPolylineToCanvasSpace(polyline, viewport) {\n    const numPoints = polyline.length;\n    const projectedPolyline = new Array(numPoints);\n    for (let i = 0; i < numPoints; i++) {\n        projectedPolyline[i] = viewport.worldToCanvas(polyline[i]);\n    }\n    return projectedPolyline;\n}\nfunction updateViewportsForAnnotations(viewport, annotations) {\n    const { element } = viewport;\n    const updatedToolNames = new Set([DEFAULT_CONTOUR_SEG_TOOL_NAME]);\n    annotations.forEach((annotation) => {\n        updatedToolNames.add(annotation.metadata.toolName);\n    });\n    for (const toolName of updatedToolNames.values()) {\n        if (hasToolByName(toolName)) {\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, toolName);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        }\n    }\n}\nexport { processMultipleIntersections };\n","import { checkIntersection, cleanupPolylines } from './sharedOperations';\nimport { intersectPolylines } from '../math/polyline';\nimport arePolylinesIdentical from '../math/polyline/arePolylinesIdentical';\nimport { areViewReferencesEqual } from './areViewReferencesEqual';\nexport function intersectPolylinesSets(set1, set2) {\n    if (!set1.length || !set2.length) {\n        return [];\n    }\n    const result = [];\n    for (const polyA of set1) {\n        for (const polyB of set2) {\n            if (!areViewReferencesEqual(polyA.viewReference, polyB.viewReference)) {\n                continue;\n            }\n            if (arePolylinesIdentical(polyA.polyline, polyB.polyline)) {\n                result.push({ ...polyA });\n                continue;\n            }\n            const intersection = checkIntersection(polyA.polyline, polyB.polyline);\n            if (intersection.hasIntersection && !intersection.isContourHole) {\n                const intersectionRegions = cleanupPolylines(intersectPolylines(polyA.polyline, polyB.polyline));\n                if (intersectionRegions && intersectionRegions.length > 0) {\n                    intersectionRegions.forEach((region) => {\n                        result.push({\n                            polyline: region,\n                            viewReference: polyA.viewReference,\n                        });\n                    });\n                }\n            }\n        }\n    }\n    return result;\n}\n","import * as math from '../math';\nimport { checkIntersection, cleanupPolylines, convertContourPolylineToCanvasSpace, removeDuplicatePoints, } from './sharedOperations';\nimport arePolylinesIdentical from '../math/polyline/arePolylinesIdentical';\nimport { getViewReferenceFromAnnotation } from './getViewReferenceFromAnnotation';\nimport { areViewReferencesEqual } from './areViewReferencesEqual';\nexport function subtractPolylineSets(polylinesSetA, polylinesSetB) {\n    const result = [];\n    for (let i = 0; i < polylinesSetA.length; i++) {\n        let currentPolylines = [polylinesSetA[i]];\n        for (let j = 0; j < polylinesSetB.length; j++) {\n            const polylineB = polylinesSetB[j];\n            const newPolylines = [];\n            for (const currentPolyline of currentPolylines) {\n                if (!areViewReferencesEqual(currentPolyline.viewReference, polylineB.viewReference)) {\n                    newPolylines.push(currentPolyline);\n                    continue;\n                }\n                if (arePolylinesIdentical(currentPolyline.polyline, polylineB.polyline)) {\n                    continue;\n                }\n                const intersection = checkIntersection(currentPolyline.polyline, polylineB.polyline);\n                if (intersection.hasIntersection && !intersection.isContourHole) {\n                    const subtractedPolylines = cleanupPolylines(math.polyline.subtractPolylines(currentPolyline.polyline, polylineB.polyline));\n                    for (const subtractedPolyline of subtractedPolylines) {\n                        const cleaned = removeDuplicatePoints(subtractedPolyline);\n                        if (cleaned.length >= 3) {\n                            newPolylines.push({\n                                polyline: cleaned,\n                                viewReference: currentPolyline.viewReference,\n                            });\n                        }\n                    }\n                }\n                else {\n                    newPolylines.push({\n                        polyline: currentPolyline.polyline,\n                        viewReference: currentPolyline.viewReference,\n                    });\n                }\n            }\n            currentPolylines = newPolylines;\n        }\n        result.push(...currentPolylines);\n    }\n    return result;\n}\nexport function subtractMultiplePolylineSets(basePolylineSet, subtractorSets) {\n    if (subtractorSets.length === 0) {\n        return [...basePolylineSet];\n    }\n    let result = [...basePolylineSet];\n    for (let i = 0; i < subtractorSets.length; i++) {\n        result = subtractPolylineSets(result, subtractorSets[i]);\n    }\n    return result;\n}\nexport function subtractAnnotationPolylines(baseAnnotations, subtractorAnnotations, viewport) {\n    const basePolylines = baseAnnotations.map((annotation) => ({\n        polyline: convertContourPolylineToCanvasSpace(annotation.data.contour.polyline, viewport),\n        viewReference: getViewReferenceFromAnnotation(annotation),\n    }));\n    const subtractorPolylines = subtractorAnnotations.map((annotation) => ({\n        polyline: convertContourPolylineToCanvasSpace(annotation.data.contour.polyline, viewport),\n        viewReference: getViewReferenceFromAnnotation(annotation),\n    }));\n    return subtractPolylineSets(basePolylines, subtractorPolylines);\n}\n","import * as math from '../math';\nimport { checkIntersection, convertContourPolylineToCanvasSpace, } from './sharedOperations';\nimport arePolylinesIdentical from '../math/polyline/arePolylinesIdentical';\nimport { getViewReferenceFromAnnotation } from './getViewReferenceFromAnnotation';\nimport { areViewReferencesEqual } from './areViewReferencesEqual';\nexport function unifyPolylineSets(polylinesSetA, polylinesSetB) {\n    const result = [];\n    const processedFromA = new Set();\n    const processedFromB = new Set();\n    for (let i = 0; i < polylinesSetA.length; i++) {\n        if (processedFromA.has(i)) {\n            continue;\n        }\n        const polylineA = polylinesSetA[i];\n        let merged = false;\n        for (let j = 0; j < polylinesSetB.length; j++) {\n            if (processedFromB.has(j)) {\n                continue;\n            }\n            const polylineB = polylinesSetB[j];\n            if (!areViewReferencesEqual(polylineA.viewReference, polylineB.viewReference)) {\n                continue;\n            }\n            if (arePolylinesIdentical(polylineA.polyline, polylineB.polyline)) {\n                result.push(polylineA);\n                processedFromA.add(i);\n                processedFromB.add(j);\n                merged = true;\n                break;\n            }\n            const intersection = checkIntersection(polylineA.polyline, polylineB.polyline);\n            if (intersection.hasIntersection && !intersection.isContourHole) {\n                const mergedPolyline = math.polyline.mergePolylines(polylineA.polyline, polylineB.polyline);\n                result.push({\n                    polyline: mergedPolyline,\n                    viewReference: polylineA.viewReference,\n                });\n                processedFromA.add(i);\n                processedFromB.add(j);\n                merged = true;\n                break;\n            }\n        }\n        if (!merged) {\n            result.push(polylineA);\n            processedFromA.add(i);\n        }\n    }\n    for (let j = 0; j < polylinesSetB.length; j++) {\n        if (!processedFromB.has(j)) {\n            result.push(polylinesSetB[j]);\n        }\n    }\n    return result;\n}\nexport function unifyMultiplePolylineSets(polylineSets) {\n    if (polylineSets.length === 0) {\n        return [];\n    }\n    if (polylineSets.length === 1) {\n        return [...polylineSets[0]];\n    }\n    let result = [...polylineSets[0]];\n    for (let i = 1; i < polylineSets.length; i++) {\n        result = unifyPolylineSets(result, polylineSets[i]);\n    }\n    return result;\n}\nexport function unifyAnnotationPolylines(annotationsSetA, annotationsSetB, viewport) {\n    const polylinesSetA = annotationsSetA.map((annotation) => ({\n        polyline: convertContourPolylineToCanvasSpace(annotation.data.contour.polyline, viewport),\n        viewReference: getViewReferenceFromAnnotation(annotation),\n    }));\n    const polylinesSetB = annotationsSetB.map((annotation) => ({\n        polyline: convertContourPolylineToCanvasSpace(annotation.data.contour.polyline, viewport),\n        viewReference: getViewReferenceFromAnnotation(annotation),\n    }));\n    return unifyPolylineSets(polylinesSetA, polylinesSetB);\n}\n","import { cleanupPolylines } from './sharedOperations';\nimport arePolylinesIdentical from '../math/polyline/arePolylinesIdentical';\nimport { subtractPolylineSets } from './polylineSubtract';\nimport { areViewReferencesEqual } from './areViewReferencesEqual';\nexport function xorPolylinesSets(polylinesSetA, polylinesSetB) {\n    if (!polylinesSetA.length && !polylinesSetB.length) {\n        return [];\n    }\n    if (!polylinesSetA.length) {\n        return polylinesSetB;\n    }\n    if (!polylinesSetB.length) {\n        return polylinesSetA;\n    }\n    if (polylinesSetA.length === polylinesSetB.length) {\n        let allIdentical = true;\n        for (let i = 0; i < polylinesSetA.length; i++) {\n            let foundMatch = false;\n            for (let j = 0; j < polylinesSetB.length; j++) {\n                if (!areViewReferencesEqual(polylinesSetA[i].viewReference, polylinesSetB[j].viewReference)) {\n                    continue;\n                }\n                if (arePolylinesIdentical(polylinesSetA[i].polyline, polylinesSetB[j].polyline)) {\n                    foundMatch = true;\n                    break;\n                }\n            }\n            if (!foundMatch) {\n                allIdentical = false;\n                break;\n            }\n        }\n        if (allIdentical) {\n            return [];\n        }\n    }\n    const aMinusB = subtractPolylineSets(polylinesSetA, polylinesSetB);\n    const bMinusA = subtractPolylineSets(polylinesSetB, polylinesSetA);\n    const xorResult = [...aMinusB, ...bMinusA];\n    return xorResult;\n}\n","import { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nexport function removeContourSegmentationAnnotation(annotation) {\n    if (!annotation.data.segmentation) {\n        throw new Error('removeContourSegmentationAnnotation: annotation does not have a segmentation data');\n    }\n    const { segmentationId, segmentIndex } = annotation.data.segmentation;\n    const segmentation = getSegmentation(segmentationId);\n    const { annotationUIDsMap } = segmentation?.representationData.Contour || {};\n    const annotationsUIDsSet = annotationUIDsMap?.get(segmentIndex);\n    if (!annotationsUIDsSet) {\n        return;\n    }\n    annotationsUIDsSet.delete(annotation.annotationUID);\n    if (!annotationsUIDsSet.size) {\n        annotationUIDsMap.delete(segmentIndex);\n    }\n}\n","import { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport { ContourWindingDirection } from '../../types/ContourAnnotation';\nimport * as math from '../math';\nimport updateContourPolyline from '../contours/updateContourPolyline';\nimport { addAnnotation, removeAnnotation, getChildAnnotations, addChildAnnotation, clearParentAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { addContourSegmentationAnnotation } from './addContourSegmentationAnnotation';\nimport { removeContourSegmentationAnnotation } from './removeContourSegmentationAnnotation';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nimport triggerAnnotationRenderForViewportIds from '../triggerAnnotationRenderForViewportIds';\nimport { getViewportIdsWithToolToRender } from '../viewportFilters';\nimport { hasToolByName } from '../../store/addTool';\nconst TOLERANCE = 1e-10;\nconst DEFAULT_CONTOUR_SEG_TOOL_NAME = 'PlanarFreehandContourSegmentationTool';\nexport function convertContourPolylineToCanvasSpace(polyline, viewport) {\n    const numPoints = polyline.length;\n    const projectedPolyline = new Array(numPoints);\n    for (let i = 0; i < numPoints; i++) {\n        projectedPolyline[i] = viewport.worldToCanvas(polyline[i]);\n    }\n    return projectedPolyline;\n}\nexport function convertContourPolylineToWorld(polyline, viewport) {\n    const numPoints = polyline.length;\n    const projectedPolyline = new Array(numPoints);\n    for (let i = 0; i < numPoints; i++) {\n        projectedPolyline[i] = viewport.canvasToWorld(polyline[i]);\n    }\n    return projectedPolyline;\n}\nexport function checkIntersection(sourcePolyline, targetPolyline) {\n    const sourceAABB = math.polyline.getAABB(sourcePolyline);\n    const targetAABB = math.polyline.getAABB(targetPolyline);\n    const aabbIntersect = math.aabb.intersectAABB(sourceAABB, targetAABB);\n    if (!aabbIntersect) {\n        return { hasIntersection: false, isContourHole: false };\n    }\n    const lineSegmentsIntersect = math.polyline.intersectPolyline(sourcePolyline, targetPolyline);\n    const isContourHole = !lineSegmentsIntersect &&\n        math.polyline.containsPoints(targetPolyline, sourcePolyline);\n    const hasIntersection = lineSegmentsIntersect || isContourHole;\n    return { hasIntersection, isContourHole };\n}\nexport function getContourHolesData(viewport, annotation) {\n    return getChildAnnotations(annotation).map((holeAnnotation) => {\n        const contourHoleAnnotation = holeAnnotation;\n        const polyline = convertContourPolylineToCanvasSpace(contourHoleAnnotation.data.contour.polyline, viewport);\n        return { annotation: contourHoleAnnotation, polyline };\n    });\n}\nexport function createPolylineHole(viewport, targetAnnotation, holeAnnotation) {\n    addChildAnnotation(targetAnnotation, holeAnnotation);\n    removeContourSegmentationAnnotation(holeAnnotation);\n    const { contour: holeContour } = holeAnnotation.data;\n    const holePolylineCanvas = convertContourPolylineToCanvasSpace(holeContour.polyline, viewport);\n    updateContourPolyline(holeAnnotation, {\n        points: holePolylineCanvas,\n        closed: holeContour.closed,\n        targetWindingDirection: targetAnnotation.data.contour.windingDirection ===\n            ContourWindingDirection.Clockwise\n            ? ContourWindingDirection.CounterClockwise\n            : ContourWindingDirection.Clockwise,\n    }, viewport);\n    const { element } = viewport;\n    updateViewportsForAnnotations(viewport, [targetAnnotation, holeAnnotation]);\n}\nexport function combinePolylines(viewport, targetAnnotation, targetPolyline, sourceAnnotation, sourcePolyline) {\n    if (!hasToolByName(DEFAULT_CONTOUR_SEG_TOOL_NAME)) {\n        console.warn(`${DEFAULT_CONTOUR_SEG_TOOL_NAME} is not registered in cornerstone. Cannot combine polylines.`);\n        return;\n    }\n    const sourceStartPoint = sourcePolyline[0];\n    const mergePolylines = math.polyline.containsPoint(targetPolyline, sourceStartPoint);\n    const contourHolesData = getContourHolesData(viewport, targetAnnotation);\n    const unassignedContourHolesSet = new Set(contourHolesData);\n    const reassignedContourHolesMap = new Map();\n    const assignHoleToPolyline = (parentPolyline, holeData) => {\n        let holes = reassignedContourHolesMap.get(parentPolyline);\n        if (!holes) {\n            holes = [];\n            reassignedContourHolesMap.set(parentPolyline, holes);\n        }\n        holes.push(holeData);\n        unassignedContourHolesSet.delete(holeData);\n    };\n    const newPolylines = [];\n    if (mergePolylines) {\n        const mergedPolyline = math.polyline.mergePolylines(targetPolyline, sourcePolyline);\n        newPolylines.push(mergedPolyline);\n        Array.from(unassignedContourHolesSet.keys()).forEach((holeData) => assignHoleToPolyline(mergedPolyline, holeData));\n    }\n    else {\n        const subtractedPolylines = math.polyline.subtractPolylines(targetPolyline, sourcePolyline);\n        subtractedPolylines.forEach((newPolyline) => {\n            newPolylines.push(newPolyline);\n            Array.from(unassignedContourHolesSet.keys()).forEach((holeData) => {\n                const containsHole = math.polyline.containsPoints(newPolyline, holeData.polyline);\n                if (containsHole) {\n                    assignHoleToPolyline(newPolyline, holeData);\n                }\n            });\n        });\n    }\n    Array.from(reassignedContourHolesMap.values()).forEach((contourHolesDataArray) => contourHolesDataArray.forEach((contourHoleData) => clearParentAnnotation(contourHoleData.annotation)));\n    const { element } = viewport;\n    const { metadata, data } = targetAnnotation;\n    const { handles, segmentation } = data;\n    const { textBox } = handles;\n    removeAnnotation(sourceAnnotation.annotationUID);\n    removeAnnotation(targetAnnotation.annotationUID);\n    removeContourSegmentationAnnotation(sourceAnnotation);\n    removeContourSegmentationAnnotation(targetAnnotation);\n    const newAnnotations = [];\n    for (let i = 0; i < newPolylines.length; i++) {\n        const polyline = newPolylines[i];\n        if (!polyline || polyline.length < 3) {\n            console.warn('Skipping creation of new annotation due to invalid polyline:', polyline);\n            continue;\n        }\n        const newAnnotation = createNewAnnotationFromPolyline(viewport, targetAnnotation, polyline);\n        addAnnotation(newAnnotation, element);\n        addContourSegmentationAnnotation(newAnnotation);\n        triggerAnnotationModified(newAnnotation, viewport.element);\n        newAnnotations.push(newAnnotation);\n        reassignedContourHolesMap\n            .get(polyline)\n            ?.forEach((holeData) => addChildAnnotation(newAnnotation, holeData.annotation));\n    }\n    updateViewportsForAnnotations(viewport, [targetAnnotation, sourceAnnotation]);\n}\nexport function createNewAnnotationFromPolyline(viewport, templateAnnotation, polyline) {\n    const startPointWorld = viewport.canvasToWorld(polyline[0]);\n    const endPointWorld = viewport.canvasToWorld(polyline[polyline.length - 1]);\n    const newAnnotation = {\n        metadata: {\n            ...templateAnnotation.metadata,\n            toolName: DEFAULT_CONTOUR_SEG_TOOL_NAME,\n            originalToolName: templateAnnotation.metadata.originalToolName ||\n                templateAnnotation.metadata.toolName,\n        },\n        data: {\n            cachedStats: {},\n            handles: {\n                points: [startPointWorld, endPointWorld],\n                textBox: templateAnnotation.data.handles.textBox\n                    ? { ...templateAnnotation.data.handles.textBox }\n                    : undefined,\n            },\n            contour: {\n                polyline: [],\n                closed: true,\n            },\n            spline: templateAnnotation.data.spline,\n            segmentation: {\n                ...templateAnnotation.data.segmentation,\n            },\n        },\n        annotationUID: csUtils.uuidv4(),\n        highlighted: true,\n        invalidated: true,\n        isLocked: false,\n        isVisible: undefined,\n        interpolationUID: templateAnnotation.interpolationUID,\n        interpolationCompleted: templateAnnotation.interpolationCompleted,\n    };\n    updateContourPolyline(newAnnotation, {\n        points: polyline,\n        closed: true,\n        targetWindingDirection: ContourWindingDirection.Clockwise,\n    }, viewport);\n    return newAnnotation;\n}\nexport function updateViewportsForAnnotations(viewport, annotations) {\n    const { element } = viewport;\n    const updatedToolNames = new Set([DEFAULT_CONTOUR_SEG_TOOL_NAME]);\n    annotations.forEach((annotation) => {\n        updatedToolNames.add(annotation.metadata.toolName);\n    });\n    for (const toolName of updatedToolNames.values()) {\n        if (hasToolByName(toolName)) {\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, toolName);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        }\n    }\n}\nexport function removeDuplicatePoints(polyline) {\n    if (!polyline || polyline.length < 2) {\n        return polyline;\n    }\n    const cleaned = [polyline[0]];\n    for (let i = 1; i < polyline.length; i++) {\n        const currentPoint = polyline[i];\n        const lastPoint = cleaned[cleaned.length - 1];\n        const dx = Math.abs(currentPoint[0] - lastPoint[0]);\n        const dy = Math.abs(currentPoint[1] - lastPoint[1]);\n        if (dx > TOLERANCE || dy > TOLERANCE) {\n            cleaned.push(currentPoint);\n        }\n    }\n    return cleaned;\n}\nexport function cleanupPolylines(polylines) {\n    const validPolylines = [];\n    const seenPolylines = new Set();\n    for (let polyline of polylines) {\n        if (!polyline || polyline.length < 3) {\n            continue;\n        }\n        polyline = removeDuplicatePoints(polyline);\n        if (polyline.length < 3) {\n            continue;\n        }\n        const sortedPoints = [...polyline].sort((a, b) => {\n            if (a[0] !== b[0]) {\n                return a[0] - b[0];\n            }\n            return a[1] - b[1];\n        });\n        const polylineKey = sortedPoints\n            .map((p) => `${p[0].toFixed(6)},${p[1].toFixed(6)}`)\n            .join('|');\n        if (!seenPolylines.has(polylineKey)) {\n            seenPolylines.add(polylineKey);\n            validPolylines.push(polyline);\n        }\n    }\n    return validPolylines;\n}\n","import { vec3 } from 'gl-matrix';\nexport function calculatePerimeter(polyline, closed) {\n    let perimeter = 0;\n    for (let i = 0; i < polyline.length - 1; i++) {\n        const point1 = polyline[i];\n        const point2 = polyline[i + 1];\n        perimeter += vec3.dist(point1, point2);\n    }\n    if (closed) {\n        const firstPoint = polyline[0];\n        const lastPoint = polyline[polyline.length - 1];\n        perimeter += vec3.dist(firstPoint, lastPoint);\n    }\n    return perimeter;\n}\nexport default calculatePerimeter;\n","function findNextLink(line, lines, contourPoints) {\n    let index = -1;\n    lines.forEach((cell, i) => {\n        if (index >= 0) {\n            return;\n        }\n        if (cell.a == line.b) {\n            index = i;\n        }\n    });\n    if (index >= 0) {\n        const nextLine = lines[index];\n        lines.splice(index, 1);\n        contourPoints.push(nextLine.b);\n        if (contourPoints[0] == nextLine.b) {\n            return {\n                remainingLines: lines,\n                contourPoints,\n                type: 'CLOSED_PLANAR',\n            };\n        }\n        return findNextLink(nextLine, lines, contourPoints);\n    }\n    return {\n        remainingLines: lines,\n        contourPoints,\n        type: 'OPEN_PLANAR',\n    };\n}\nexport function findContours(lines) {\n    if (lines.length == 0) {\n        return [];\n    }\n    const contourPoints = [];\n    const firstCell = lines.shift();\n    contourPoints.push(firstCell.a);\n    contourPoints.push(firstCell.b);\n    const result = findNextLink(firstCell, lines, contourPoints);\n    if (result.remainingLines.length == 0) {\n        return [\n            {\n                type: result.type,\n                contourPoints: result.contourPoints,\n            },\n        ];\n    }\n    else {\n        const extraContours = findContours(result.remainingLines);\n        extraContours.push({\n            type: result.type,\n            contourPoints: result.contourPoints,\n        });\n        return extraContours;\n    }\n}\nexport function findContoursFromReducedSet(lines) {\n    return findContours(lines);\n}\nexport default {\n    findContours,\n    findContoursFromReducedSet,\n};\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nconst { isEqual } = csUtils;\nexport default function findHandlePolylineIndex(annotation, handleIndex) {\n    const { polyline } = annotation.data.contour;\n    const { points } = annotation.data.handles;\n    const { length } = points;\n    if (handleIndex === length) {\n        return polyline.length;\n    }\n    if (handleIndex < 0) {\n        handleIndex = (handleIndex + length) % length;\n    }\n    if (handleIndex === 0) {\n        return 0;\n    }\n    const handle = points[handleIndex];\n    const index = polyline.findIndex((point) => isEqual(handle, point));\n    if (index !== -1) {\n        return index;\n    }\n    let closestDistance = Infinity;\n    return polyline.reduce((closestIndex, point, testIndex) => {\n        const distance = vec3.squaredDistance(point, handle);\n        if (distance < closestDistance) {\n            closestDistance = distance;\n            return testIndex;\n        }\n        return closestIndex;\n    }, -1);\n}\n","import isClosed from '../math/polyline/isClosed';\nimport { getSignedArea } from '../math/polyline';\nexport default function findIslands(polylines, threshold) {\n    if (!polylines || polylines.length === 0) {\n        return [];\n    }\n    if (threshold <= 0) {\n        return [];\n    }\n    const islandIndexes = [];\n    for (let i = 0; i < polylines.length; i++) {\n        const polyline = polylines[i];\n        if (!polyline || polyline.length < 3) {\n            continue;\n        }\n        const isClosedPolyline = isClosed(polyline);\n        if (isClosedPolyline) {\n            const area = Math.abs(getSignedArea(polyline)) / 100;\n            if (area < threshold) {\n                islandIndexes.push(i);\n            }\n        }\n    }\n    return islandIndexes;\n}\n","import getContourHolesDataWorld from './getContourHolesDataWorld';\nexport default function getContourHolesDataCanvas(annotation, viewport) {\n    const worldHoleContours = getContourHolesDataWorld(annotation);\n    const canvasHoleContours = [];\n    worldHoleContours.forEach((worldHoleContour) => {\n        const numPoints = worldHoleContour.length;\n        const canvasHoleContour = new Array(numPoints);\n        for (let i = 0; i < numPoints; i++) {\n            canvasHoleContour[i] = viewport.worldToCanvas(worldHoleContour[i]);\n        }\n        canvasHoleContours.push(canvasHoleContour);\n    });\n    return canvasHoleContours;\n}\n","import { getAnnotation } from '../../stateManagement/annotation/annotationState';\nexport default function getContourHolesDataWorld(annotation) {\n    const childAnnotationUIDs = annotation.childAnnotationUIDs ?? [];\n    return childAnnotationUIDs.map((uid) => getAnnotation(uid).data.contour.polyline);\n}\n","export function getDeduplicatedVTKPolyDataPoints(polyData, bypass = false) {\n    const points = polyData.getPoints();\n    const lines = polyData.getLines();\n    const pointsArray = new Array(points.getNumberOfPoints())\n        .fill(0)\n        .map((_, i) => points.getPoint(i).slice());\n    const linesArray = new Array(lines.getNumberOfCells()).fill(0).map((_, i) => {\n        const cell = lines.getCell(i * 3).slice();\n        return { a: cell[0], b: cell[1] };\n    });\n    if (bypass) {\n        return { points: pointsArray, lines: linesArray };\n    }\n    const newPoints = [];\n    for (const [i, pt] of pointsArray.entries()) {\n        const index = newPoints.findIndex((point) => point[0] === pt[0] && point[1] === pt[1] && point[2] === pt[2]);\n        if (index >= 0) {\n            linesArray.map((line) => {\n                if (line.a === i) {\n                    line.a = index;\n                }\n                if (line.b === i) {\n                    line.b = index;\n                }\n                return line;\n            });\n        }\n        else {\n            const newIndex = newPoints.length;\n            newPoints.push(pt);\n            linesArray.map((line) => {\n                if (line.a === i) {\n                    line.a = newIndex;\n                }\n                if (line.b === i) {\n                    line.b = newIndex;\n                }\n                return line;\n            });\n        }\n    }\n    const newLines = linesArray.filter((line) => line.a !== line.b);\n    return { points: newPoints, lines: newLines };\n}\nexport default { getDeduplicatedVTKPolyDataPoints };\n","import { glMatrix, vec3 } from 'gl-matrix';\nexport default function areCoplanarContours(firstAnnotation, secondAnnotation) {\n    const { viewPlaneNormal: firstViewPlaneNormal } = firstAnnotation.metadata;\n    const { viewPlaneNormal: secondViewPlaneNormal } = secondAnnotation.metadata;\n    const dot = vec3.dot(firstViewPlaneNormal, secondViewPlaneNormal);\n    const parallelPlanes = glMatrix.equals(1, Math.abs(dot));\n    if (!parallelPlanes) {\n        return false;\n    }\n    const { polyline: firstPolyline } = firstAnnotation.data.contour;\n    const { polyline: secondPolyline } = secondAnnotation.data.contour;\n    const firstDistance = vec3.dot(firstViewPlaneNormal, firstPolyline[0]);\n    const secondDistance = vec3.dot(firstViewPlaneNormal, secondPolyline[0]);\n    return glMatrix.equals(firstDistance, secondDistance);\n}\n","const getIsPointInsidePolygon = (point, vertices) => {\n    const x = point[0];\n    const y = point[1];\n    let inside = false;\n    for (let i = 0, j = vertices.length - 1; i < vertices.length; j = i++) {\n        const xi = vertices[i][0], yi = vertices[i][1];\n        const xj = vertices[j][0], yj = vertices[j][1];\n        const intersect = yi > y != yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;\n        if (intersect) {\n            inside = !inside;\n        }\n    }\n    return inside;\n};\nfunction checkEnclosed(outerContour, innerContour, points) {\n    const vertices = [];\n    outerContour.contourPoints.forEach((point) => {\n        vertices.push([points[point][0], points[point][1]]);\n    });\n    let pointsNotEnclosed = 0;\n    innerContour.contourPoints.forEach((point) => {\n        const result = getIsPointInsidePolygon([points[point][0], points[point][1]], vertices);\n        if (!result) {\n            pointsNotEnclosed++;\n        }\n    });\n    return pointsNotEnclosed === 0;\n}\nexport function processContourHoles(contours, points, useXOR = true) {\n    const retContours = contours.filter((contour) => contour.type !== 'CLOSED_PLANAR');\n    const closedContours = contours.filter((contour) => contour.type === 'CLOSED_PLANAR');\n    const contourWithHoles = [];\n    let contourWithoutHoles = [];\n    closedContours.forEach((contour, index) => {\n        const holes = [];\n        closedContours.forEach((hContour, hIndex) => {\n            if (index != hIndex) {\n                if (checkEnclosed(contour, hContour, points)) {\n                    holes.push(hIndex);\n                }\n            }\n        });\n        if (holes.length > 0) {\n            contourWithHoles.push({\n                contour,\n                holes,\n            });\n        }\n        else {\n            contourWithoutHoles.push(index);\n        }\n    });\n    if (useXOR) {\n        contourWithHoles.forEach((contourHoleSet) => {\n            contourHoleSet.contour.type = 'CLOSEDPLANAR_XOR';\n            retContours.push(contourHoleSet.contour);\n            contourHoleSet.holes.forEach((holeIndex) => {\n                closedContours[holeIndex].type = 'CLOSEDPLANAR_XOR';\n                retContours.push(closedContours[holeIndex]);\n                contourWithoutHoles = contourWithoutHoles.filter((contourIndex) => {\n                    return contourIndex !== holeIndex;\n                });\n            });\n        });\n        contourWithoutHoles.forEach((contourIndex) => {\n            retContours.push(closedContours[contourIndex]);\n        });\n    }\n    else {\n    }\n    return retContours;\n}\nexport default { processContourHoles };\n","import getSignedArea from '../math/polyline/getSignedArea';\nimport containsPoints from '../math/polyline/containsPoints';\nimport isClosed from '../math/polyline/isClosed';\nfunction isPolygonInsidePolygon(inner, outer) {\n    return containsPoints(outer, inner);\n}\nexport default function findContourHoles(polylines) {\n    const results = [];\n    const closedPolylines = [];\n    polylines.forEach((polyline, index) => {\n        if (isClosed(polyline)) {\n            closedPolylines.push({ polyline, originalIndex: index });\n        }\n    });\n    for (let i = 0; i < closedPolylines.length; i++) {\n        const outerContour = closedPolylines[i];\n        const outerArea = Math.abs(getSignedArea(outerContour.polyline));\n        const holeIndexes = [];\n        for (let j = 0; j < closedPolylines.length; j++) {\n            if (i === j) {\n                continue;\n            }\n            const potentialHole = closedPolylines[j];\n            const holeArea = Math.abs(getSignedArea(potentialHole.polyline));\n            if (holeArea < outerArea &&\n                isPolygonInsidePolygon(potentialHole.polyline, outerContour.polyline)) {\n                holeIndexes.push(potentialHole.originalIndex);\n            }\n        }\n        if (holeIndexes.length > 0) {\n            results.push({\n                contourIndex: outerContour.originalIndex,\n                holeIndexes: holeIndexes.sort((a, b) => a - b),\n            });\n        }\n    }\n    return results.sort((a, b) => a.contourIndex - b.contourIndex);\n}\nexport { findContourHoles };\n","import { cache as cornerstoneCache, getWebWorkerManager, cache, utilities, } from '@cornerstonejs/core';\nimport SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nimport { WorkerTypes } from '../../enums';\nimport { registerComputeWorker } from '../registerComputeWorker';\nimport { triggerWorkerProgress } from '../segmentation/utilsForWorker';\nimport getOrCreateSegmentationVolume from '../segmentation/getOrCreateSegmentationVolume';\nconst { Labelmap } = SegmentationRepresentations;\nasync function generateContourSetsFromLabelmap({ segmentations }) {\n    registerComputeWorker();\n    triggerWorkerProgress(WorkerTypes.GENERATE_CONTOUR_SETS, 0);\n    const { representationData, segments = [0, 1], segmentationId, } = segmentations;\n    let { volumeId: segVolumeId } = representationData[Labelmap];\n    if (!segVolumeId) {\n        const segVolume = getOrCreateSegmentationVolume(segmentationId);\n        if (segVolume) {\n            segVolumeId = segVolume.volumeId;\n        }\n    }\n    const vol = cornerstoneCache.getVolume(segVolumeId);\n    if (!vol) {\n        console.warn(`No volume found for ${segVolumeId}`);\n        return;\n    }\n    const voxelManager = vol.voxelManager;\n    const segScalarData = voxelManager.getCompleteScalarDataArray();\n    const segmentationInfo = {\n        scalarData: segScalarData,\n        dimensions: vol.dimensions,\n        spacing: vol.imageData.getSpacing(),\n        origin: vol.imageData.getOrigin(),\n        direction: vol.imageData.getDirection(),\n    };\n    const indices = Array.isArray(segments)\n        ? segments\n            .filter((segment) => segment !== null)\n            .map((segment) => segment.segmentIndex || segment)\n        : Object.values(segments)\n            .filter((segment) => segment !== null)\n            .map((segment) => segment.segmentIndex || segment);\n    const contourSets = await getWebWorkerManager().executeTask('compute', 'generateContourSetsFromLabelmapVolume', {\n        segmentation: segmentationInfo,\n        indices,\n        mode: 'individual',\n    });\n    const refImages = vol.imageIds.map((imageId) => {\n        const refImageId = cache.getImage(imageId)?.referencedImageId;\n        return refImageId ? cache.getImage(refImageId) : undefined;\n    });\n    const refImageDataMetadata = refImages.map((image) => {\n        return utilities.getImageDataMetadata(image);\n    });\n    const processedContourSets = contourSets\n        .map((contourSet) => {\n        const segment = segments[contourSet.segment.segmentIndex] || {};\n        if (!contourSet.sliceContours.length) {\n            return null;\n        }\n        const p1 = contourSet.sliceContours[0].polyData.points[0];\n        let refImageId;\n        if (p1) {\n            const refImageIndex = refImageDataMetadata.findIndex((imageDataMetadata) => {\n                const { scanAxisNormal, origin } = imageDataMetadata;\n                const plane = utilities.planar.planeEquation(scanAxisNormal, origin);\n                return utilities.planar.isPointOnPlane(p1, plane);\n            });\n            if (refImageIndex !== -1) {\n                refImageId = refImages[refImageIndex].imageId;\n            }\n        }\n        return {\n            label: segment.label,\n            color: segment.color,\n            metadata: {\n                FrameOfReferenceUID: vol.metadata.FrameOfReferenceUID,\n                referencedImageId: refImageId,\n            },\n            sliceContours: contourSet.sliceContours.map((contourData) => ({\n                contours: contourData.contours,\n                polyData: contourData.polyData,\n                FrameNumber: contourData.sliceIndex + 1,\n                sliceIndex: contourData.sliceIndex,\n                FrameOfReferenceUID: vol.metadata.FrameOfReferenceUID,\n                referencedImageId: refImageId,\n            })),\n        };\n    })\n        .filter((contourSet) => contourSet !== null);\n    triggerWorkerProgress(WorkerTypes.GENERATE_CONTOUR_SETS, 100);\n    return processedContourSets;\n}\nexport { generateContourSetsFromLabelmap };\n","import RectangleROIStartEndThreshold from './RectangleROIStartEndThreshold';\nfunction validateAnnotation(annotation) {\n    if (!annotation?.data) {\n        throw new Error('Tool data is empty');\n    }\n    if (!annotation.metadata || annotation.metadata.referencedImageId) {\n        throw new Error('Tool data is not associated with any imageId');\n    }\n}\nclass AnnotationToPointData {\n    static { this.TOOL_NAMES = {}; }\n    constructor() {\n    }\n    static convert(annotation, index, metadataProvider) {\n        validateAnnotation(annotation);\n        const { toolName } = annotation.metadata;\n        const toolClass = AnnotationToPointData.TOOL_NAMES[toolName];\n        if (!toolClass) {\n            throw new Error(`Unknown tool type: ${toolName}, cannot convert to RTSSReport`);\n        }\n        const ContourSequence = toolClass.getContourSequence(annotation, metadataProvider);\n        const color = [\n            Math.floor(Math.random() * 255),\n            Math.floor(Math.random() * 255),\n            Math.floor(Math.random() * 255),\n        ];\n        return {\n            ReferencedROINumber: index + 1,\n            ROIDisplayColor: color,\n            ContourSequence,\n        };\n    }\n    static register(toolClass) {\n        AnnotationToPointData.TOOL_NAMES[toolClass.toolName] = toolClass;\n    }\n}\nAnnotationToPointData.register(RectangleROIStartEndThreshold);\nexport default AnnotationToPointData;\n","import InterpolationManager from '../../segmentation/InterpolationManager/InterpolationManager';\nexport default function acceptAutogeneratedInterpolations(annotationGroupSelector, selector) {\n    InterpolationManager.acceptAutoGenerated(annotationGroupSelector, selector);\n}\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport * as math from '../math';\nimport { getParentAnnotation, invalidateAnnotation, } from '../../stateManagement/annotation/annotationState';\nexport default function updateContourPolyline(annotation, polylineData, transforms, options) {\n    const { canvasToWorld, worldToCanvas } = transforms;\n    const { data } = annotation;\n    const { targetWindingDirection } = polylineData;\n    let { points: polyline } = polylineData;\n    let windingDirection = math.polyline.getWindingDirection(polyline);\n    if (options?.decimate?.enabled) {\n        polyline = math.polyline.decimate(polylineData.points, options?.decimate?.epsilon);\n    }\n    let { closed } = polylineData;\n    const numPoints = polyline.length;\n    const polylineWorldPoints = new Array(numPoints);\n    const currentPolylineWindingDirection = math.polyline.getWindingDirection(polyline);\n    const parentAnnotation = getParentAnnotation(annotation);\n    if (closed === undefined) {\n        let currentClosedState = false;\n        if (polyline.length > 3) {\n            const lastToFirstDist = math.point.distanceToPointSquared(polyline[0], polyline[numPoints - 1]);\n            currentClosedState = csUtils.isEqual(0, lastToFirstDist);\n        }\n        closed = currentClosedState;\n    }\n    if (options?.updateWindingDirection !== false) {\n        let updatedWindingDirection = parentAnnotation\n            ? parentAnnotation.data.contour.windingDirection * -1\n            : targetWindingDirection;\n        if (updatedWindingDirection === undefined) {\n            updatedWindingDirection = windingDirection;\n        }\n        if (updatedWindingDirection !== windingDirection) {\n            polyline.reverse();\n        }\n        const handlePoints = (data.handles?.points ?? []).map(worldToCanvas);\n        if (handlePoints.length > 2) {\n            const currentHandlesWindingDirection = math.polyline.getWindingDirection(handlePoints);\n            if (currentHandlesWindingDirection !== updatedWindingDirection) {\n                data.handles.points.reverse();\n            }\n        }\n        windingDirection = updatedWindingDirection;\n    }\n    for (let i = 0; i < numPoints; i++) {\n        polylineWorldPoints[i] = canvasToWorld(polyline[i]);\n    }\n    data.contour.polyline = polylineWorldPoints;\n    data.contour.closed = closed;\n    data.contour.windingDirection = windingDirection;\n    invalidateAnnotation(annotation);\n}\n","import { Enums } from '@cornerstonejs/core';\nfunction sumOverDimensionGroups(voxelManager, dimensionGroups) {\n    const arrayLength = voxelManager.getScalarDataLength();\n    const resultArray = new Float32Array(arrayLength);\n    for (const dimensionGroupNumber of dimensionGroups) {\n        const scalarData = voxelManager.getDimensionGroupScalarData(dimensionGroupNumber);\n        for (let i = 0; i < arrayLength; i++) {\n            resultArray[i] += scalarData[i];\n        }\n    }\n    return resultArray;\n}\nfunction averageOverDimensionGroups(voxelManager, dimensionGroups) {\n    const sumArray = sumOverDimensionGroups(voxelManager, dimensionGroups);\n    const numDimensionGroups = dimensionGroups.length;\n    for (let i = 0; i < sumArray.length; i++) {\n        sumArray[i] /= numDimensionGroups;\n    }\n    return sumArray;\n}\nconst operationFunctions = {\n    [Enums.GenerateImageType.SUM]: (voxelManager, dimensionGroups, callback) => {\n        const resultArray = sumOverDimensionGroups(voxelManager, dimensionGroups);\n        for (let i = 0; i < resultArray.length; i++) {\n            callback(i, resultArray[i]);\n        }\n    },\n    [Enums.GenerateImageType.AVERAGE]: (voxelManager, dimensionGroups, callback) => {\n        const resultArray = averageOverDimensionGroups(voxelManager, dimensionGroups);\n        for (let i = 0; i < resultArray.length; i++) {\n            callback(i, resultArray[i]);\n        }\n    },\n    [Enums.GenerateImageType.SUBTRACT]: (voxelManager, dimensionGroups, callback) => {\n        if (dimensionGroups.length !== 2) {\n            throw new Error('Please provide only 2 dimension groups for subtraction.');\n        }\n        const arrayLength = voxelManager.getScalarDataLength();\n        const scalarData1 = voxelManager.getDimensionGroupScalarData(dimensionGroups[0]);\n        const scalarData2 = voxelManager.getDimensionGroupScalarData(dimensionGroups[1]);\n        for (let i = 0; i < arrayLength; i++) {\n            const difference = scalarData1[i] - scalarData2[i];\n            callback(i, difference);\n        }\n    },\n};\nfunction generateImageFromTimeData(dynamicVolume, operation, options) {\n    const { dimensionGroupNumbers, frameNumbers } = options;\n    if (frameNumbers) {\n        console.warn('Warning: frameNumbers parameter is deprecated. Please use dimensionGroupNumbers instead.');\n    }\n    const dimensionGroups = dimensionGroupNumbers ||\n        frameNumbers ||\n        Array.from({ length: dynamicVolume.numDimensionGroups }, (_, i) => i + 1);\n    if (dimensionGroups.length <= 1) {\n        throw new Error('Please provide two or more dimension groups');\n    }\n    const voxelManager = dynamicVolume.voxelManager;\n    const arrayLength = voxelManager.getScalarDataLength();\n    const operationFunction = operationFunctions[operation];\n    if (!operationFunction) {\n        throw new Error(`Unsupported operation: ${operation}`);\n    }\n    const resultArray = new Float32Array(arrayLength);\n    operationFunction(voxelManager, dimensionGroups, (index, value) => {\n        resultArray[index] = value;\n    });\n    return resultArray;\n}\nfunction updateVolumeFromTimeData(dynamicVolume, operation, options) {\n    const { dimensionGroupNumbers, frameNumbers, targetVolume } = options;\n    if (!targetVolume) {\n        throw new Error('A target volume must be provided');\n    }\n    if (frameNumbers) {\n        console.warn('Warning: frameNumbers parameter is deprecated. Please use dimensionGroupNumbers instead.');\n    }\n    const dimensionGroups = dimensionGroupNumbers ||\n        frameNumbers ||\n        Array.from({ length: dynamicVolume.numDimensionGroups }, (_, i) => i + 1);\n    if (dimensionGroups.length <= 1) {\n        throw new Error('Please provide two or more dimension groups');\n    }\n    const voxelManager = dynamicVolume.voxelManager;\n    const targetVoxelManager = targetVolume.voxelManager;\n    const operationFunction = operationFunctions[operation];\n    if (!operationFunction) {\n        throw new Error(`Unsupported operation: ${operation}`);\n    }\n    operationFunction(voxelManager, dimensionGroups, (index, value) => {\n        targetVoxelManager.setAtIndex(index, value);\n    });\n    targetVoxelManager.resetModifiedSlices();\n    for (let k = 0; k < targetVolume.dimensions[2]; k++) {\n        targetVoxelManager.modifiedSlices.add(k);\n    }\n}\nexport { generateImageFromTimeData, updateVolumeFromTimeData };\n","import { utilities, cache } from '@cornerstonejs/core';\nimport { getVoxelOverlap } from '../segmentation/utilities';\nfunction getDataInTime(dynamicVolume, options) {\n    let dataInTime;\n    const dimensionGroups = options.dimensionGroupNumbers ||\n        options.frameNumbers ||\n        Array.from({ length: dynamicVolume.numDimensionGroups }, (_, i) => i + 1);\n    if (options.frameNumbers) {\n        console.warn('Warning: frameNumbers parameter is deprecated. Please use dimensionGroupNumbers instead.');\n    }\n    if (!options.maskVolumeId && !options.worldCoordinate) {\n        throw new Error('You should provide either maskVolumeId or imageCoordinate');\n    }\n    if (options.maskVolumeId && options.worldCoordinate) {\n        throw new Error('You can only use one of maskVolumeId or imageCoordinate');\n    }\n    if (options.maskVolumeId) {\n        const segmentationVolume = cache.getVolume(options.maskVolumeId);\n        if (!segmentationVolume) {\n            throw new Error('Segmentation volume not found');\n        }\n        const [dataInTime, ijkCoords] = _getDimensionGroupDataMask(dimensionGroups, dynamicVolume, segmentationVolume);\n        return [dataInTime, ijkCoords];\n    }\n    if (options.worldCoordinate) {\n        const dataInTime = _getDimensionGroupDataCoordinate(dimensionGroups, options.worldCoordinate, dynamicVolume);\n        return dataInTime;\n    }\n    return dataInTime;\n}\nfunction _getDimensionGroupDataCoordinate(dimensionGroups, coordinate, volume) {\n    const { dimensions, imageData } = volume;\n    const index = imageData.worldToIndex(coordinate);\n    index[0] = Math.floor(index[0]);\n    index[1] = Math.floor(index[1]);\n    index[2] = Math.floor(index[2]);\n    if (!utilities.indexWithinDimensions(index, dimensions)) {\n        throw new Error('outside bounds');\n    }\n    const yMultiple = dimensions[0];\n    const zMultiple = dimensions[0] * dimensions[1];\n    const value = [];\n    dimensionGroups.forEach((dimensionGroupNumber) => {\n        const scalarIndex = index[2] * zMultiple + index[1] * yMultiple + index[0];\n        value.push(volume.voxelManager.getAtIndexAndDimensionGroup(scalarIndex, dimensionGroupNumber));\n    });\n    return value;\n}\nfunction _getDimensionGroupDataMask(dimensionGroups, dynamicVolume, segmentationVolume) {\n    const { imageData: maskImageData } = segmentationVolume;\n    const segVoxelManager = segmentationVolume.voxelManager;\n    const scalarDataLength = segVoxelManager.getScalarDataLength();\n    const nonZeroVoxelIndices = [];\n    nonZeroVoxelIndices.length = scalarDataLength;\n    let actualLen = 0;\n    for (let i = 0, len = scalarDataLength; i < len; i++) {\n        if (segVoxelManager.getAtIndex(i) !== 0) {\n            nonZeroVoxelIndices[actualLen++] = i;\n        }\n    }\n    nonZeroVoxelIndices.length = actualLen;\n    const nonZeroVoxelValuesInTime = [];\n    const isSameVolume = dynamicVolume.voxelManager.getScalarDataLength() === scalarDataLength &&\n        JSON.stringify(dynamicVolume.spacing) ===\n            JSON.stringify(segmentationVolume.spacing);\n    const ijkCoords = [];\n    if (isSameVolume) {\n        for (let i = 0; i < nonZeroVoxelIndices.length; i++) {\n            const valuesInTime = [];\n            const index = nonZeroVoxelIndices[i];\n            for (let j = 0; j < dimensionGroups.length; j++) {\n                valuesInTime.push(dynamicVolume.voxelManager.getAtIndexAndDimensionGroup(index, dimensionGroups[j]));\n            }\n            nonZeroVoxelValuesInTime.push(valuesInTime);\n            ijkCoords.push(segVoxelManager.toIJK(index));\n        }\n        return [nonZeroVoxelValuesInTime, ijkCoords];\n    }\n    const callback = ({ pointLPS: segPointLPS, value: segValue, pointIJK: segPointIJK, }) => {\n        if (segValue === 0) {\n            return;\n        }\n        const overlapIJKMinMax = getVoxelOverlap(dynamicVolume.imageData, dynamicVolume.dimensions, dynamicVolume.spacing, segPointLPS);\n        let count = 0;\n        const perDimensionGroupSum = new Map();\n        dimensionGroups.forEach((dimensionGroupNumber) => perDimensionGroupSum.set(dimensionGroupNumber, 0));\n        const averageCallback = ({ index }) => {\n            for (let i = 0; i < dimensionGroups.length; i++) {\n                const value = dynamicVolume.voxelManager.getAtIndexAndDimensionGroup(index, dimensionGroups[i]);\n                const dimensionGroupNumber = dimensionGroups[i];\n                perDimensionGroupSum.set(dimensionGroupNumber, perDimensionGroupSum.get(dimensionGroupNumber) + value);\n            }\n            count++;\n        };\n        dynamicVolume.voxelManager.forEach(averageCallback, {\n            imageData: dynamicVolume.imageData,\n            boundsIJK: overlapIJKMinMax,\n        });\n        const averageValues = [];\n        perDimensionGroupSum.forEach((sum) => {\n            averageValues.push(sum / count);\n        });\n        ijkCoords.push(segPointIJK);\n        nonZeroVoxelValuesInTime.push(averageValues);\n    };\n    segmentationVolume.voxelManager.forEach(callback, {\n        imageData: maskImageData,\n    });\n    return [nonZeroVoxelValuesInTime, ijkCoords];\n}\nexport default getDataInTime;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { getAnnotations } from '../stateManagement/annotation/annotationState';\nimport * as ToolGroupManager from '../store/ToolGroupManager';\nfunction getAnnotationNearPoint(element, canvasPoint, proximity = 5) {\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        throw new Error('getAnnotationNearPoint: enabledElement not found');\n    }\n    return getAnnotationNearPointOnEnabledElement(enabledElement, canvasPoint, proximity);\n}\nfunction getAnnotationNearPointOnEnabledElement(enabledElement, point, proximity) {\n    const { renderingEngineId, viewportId } = enabledElement;\n    const toolGroup = ToolGroupManager.getToolGroupForViewport(viewportId, renderingEngineId);\n    if (!toolGroup) {\n        return null;\n    }\n    const { _toolInstances: tools } = toolGroup;\n    for (const name in tools) {\n        const found = findAnnotationNearPointByTool(tools[name], enabledElement, point, proximity);\n        if (found) {\n            return found;\n        }\n    }\n    return null;\n}\nfunction findAnnotationNearPointByTool(tool, enabledElement, point, proximity) {\n    const { viewport } = enabledElement;\n    const annotations = getAnnotations(tool.constructor.toolName, viewport?.element);\n    const currentId = viewport?.getCurrentImageId?.();\n    if (annotations?.length) {\n        const { element } = enabledElement.viewport;\n        for (const annotation of annotations) {\n            const referencedImageId = annotation.metadata?.referencedImageId;\n            if ((currentId && referencedImageId && currentId !== referencedImageId) ||\n                !tool.isPointNearTool) {\n                continue;\n            }\n            if (tool.isPointNearTool(element, annotation, point, proximity, '') ||\n                tool.getHandleNearImagePoint(element, annotation, point, proximity)) {\n                return annotation;\n            }\n        }\n    }\n    return null;\n}\nexport { getAnnotationNearPoint, getAnnotationNearPointOnEnabledElement };\n","import { Enums, utilities } from '@cornerstonejs/core';\nconst { CalibrationTypes } = Enums;\nconst PIXEL_UNITS = 'px';\nconst VOXEL_UNITS = 'voxels';\nconst SUPPORTED_REGION_DATA_TYPES = [\n    1,\n    2,\n    3,\n    4,\n];\nconst SUPPORTED_LENGTH_VARIANT = [\n    '3,3',\n    '4,7',\n];\nconst SUPPORTED_PROBE_VARIANT = [\n    '4,3',\n    '4,7',\n];\nconst UNIT_MAPPING = {\n    0: 'px',\n    1: 'percent',\n    2: 'dB',\n    3: 'cm',\n    4: 'seconds',\n    5: 'hertz',\n    6: 'dB/seconds',\n    7: 'cm/sec',\n    8: 'cm\\xb2',\n    9: 'cm\\xb2/s',\n    0xc: 'degrees',\n};\nconst EPS = 1e-3;\nconst SQUARE = '\\xb2';\nconst getCalibratedLengthUnitsAndScale = (image, handles) => {\n    const { calibration, hasPixelSpacing } = image;\n    let unit = hasPixelSpacing ? 'mm' : PIXEL_UNITS;\n    const volumeUnit = hasPixelSpacing ? 'mm\\xb3' : VOXEL_UNITS;\n    let areaUnit = unit + SQUARE;\n    let scale = 1;\n    let calibrationType = '';\n    if (!calibration ||\n        (!calibration.type && !calibration.sequenceOfUltrasoundRegions)) {\n        return { unit, areaUnit, scale, volumeUnit };\n    }\n    if (calibration.type === CalibrationTypes.UNCALIBRATED) {\n        return {\n            unit: PIXEL_UNITS,\n            areaUnit: PIXEL_UNITS + SQUARE,\n            scale,\n            volumeUnit: VOXEL_UNITS,\n        };\n    }\n    if (calibration.sequenceOfUltrasoundRegions) {\n        let imageIndex1, imageIndex2;\n        if (Array.isArray(handles) && handles.length === 2) {\n            [imageIndex1, imageIndex2] = handles;\n        }\n        else if (typeof handles === 'function') {\n            const points = handles();\n            imageIndex1 = points[0];\n            imageIndex2 = points[1];\n        }\n        let regions = calibration.sequenceOfUltrasoundRegions.filter((region) => imageIndex1[0] >= region.regionLocationMinX0 &&\n            imageIndex1[0] <= region.regionLocationMaxX1 &&\n            imageIndex1[1] >= region.regionLocationMinY0 &&\n            imageIndex1[1] <= region.regionLocationMaxY1 &&\n            imageIndex2[0] >= region.regionLocationMinX0 &&\n            imageIndex2[0] <= region.regionLocationMaxX1 &&\n            imageIndex2[1] >= region.regionLocationMinY0 &&\n            imageIndex2[1] <= region.regionLocationMaxY1);\n        if (!regions?.length) {\n            return { unit, areaUnit, scale, volumeUnit };\n        }\n        regions = regions.filter((region) => SUPPORTED_REGION_DATA_TYPES.includes(region.regionDataType) &&\n            SUPPORTED_LENGTH_VARIANT.includes(`${region.physicalUnitsXDirection},${region.physicalUnitsYDirection}`));\n        if (!regions.length) {\n            return {\n                unit: PIXEL_UNITS,\n                areaUnit: PIXEL_UNITS + SQUARE,\n                scale,\n                volumeUnit: VOXEL_UNITS,\n            };\n        }\n        const region = regions[0];\n        const physicalDeltaX = Math.abs(region.physicalDeltaX);\n        const physicalDeltaY = Math.abs(region.physicalDeltaY);\n        const isSamePhysicalDelta = utilities.isEqual(physicalDeltaX, physicalDeltaY, EPS);\n        if (isSamePhysicalDelta) {\n            scale = 1 / physicalDeltaX;\n            calibrationType = 'US Region';\n            unit = UNIT_MAPPING[region.physicalUnitsXDirection] || 'unknown';\n            areaUnit = unit + SQUARE;\n        }\n        else {\n            return {\n                unit: PIXEL_UNITS,\n                areaUnit: PIXEL_UNITS + SQUARE,\n                scale,\n                volumeUnit: VOXEL_UNITS,\n            };\n        }\n    }\n    else if (calibration.scale) {\n        scale = calibration.scale;\n    }\n    const types = [\n        CalibrationTypes.ERMF,\n        CalibrationTypes.USER,\n        CalibrationTypes.ERROR,\n        CalibrationTypes.PROJECTION,\n        CalibrationTypes.CALIBRATED,\n        CalibrationTypes.UNKNOWN,\n    ];\n    if (types.includes(calibration?.type)) {\n        calibrationType = calibration.type;\n    }\n    return {\n        unit: unit + (calibrationType ? ` ${calibrationType}` : ''),\n        areaUnit: areaUnit + (calibrationType ? ` ${calibrationType}` : ''),\n        scale,\n        volumeUnit: volumeUnit + (calibrationType ? ` ${calibrationType}` : ''),\n    };\n};\nconst getCalibratedProbeUnitsAndValue = (image, handles) => {\n    const [imageIndex] = handles;\n    const { calibration } = image;\n    let units = ['raw'];\n    let values = [null];\n    let calibrationType = '';\n    if (!calibration ||\n        (!calibration.type && !calibration.sequenceOfUltrasoundRegions)) {\n        return { units, values };\n    }\n    if (calibration.sequenceOfUltrasoundRegions) {\n        const supportedRegionsMetadata = calibration.sequenceOfUltrasoundRegions.filter((region) => SUPPORTED_REGION_DATA_TYPES.includes(region.regionDataType) &&\n            SUPPORTED_PROBE_VARIANT.includes(`${region.physicalUnitsXDirection},${region.physicalUnitsYDirection}`));\n        if (!supportedRegionsMetadata?.length) {\n            return { units, values };\n        }\n        const region = supportedRegionsMetadata.find((region) => imageIndex[0] >= region.regionLocationMinX0 &&\n            imageIndex[0] <= region.regionLocationMaxX1 &&\n            imageIndex[1] >= region.regionLocationMinY0 &&\n            imageIndex[1] <= region.regionLocationMaxY1);\n        if (!region) {\n            return { units, values };\n        }\n        const { referencePixelX0 = 0, referencePixelY0 = 0 } = region;\n        const { physicalDeltaX, physicalDeltaY } = region;\n        const yValue = (imageIndex[1] - region.regionLocationMinY0 - referencePixelY0) *\n            physicalDeltaY;\n        const xValue = (imageIndex[0] - region.regionLocationMinX0 - referencePixelX0) *\n            physicalDeltaX;\n        calibrationType = 'US Region';\n        values = [xValue, yValue];\n        units = [\n            UNIT_MAPPING[region.physicalUnitsXDirection],\n            UNIT_MAPPING[region.physicalUnitsYDirection],\n        ];\n    }\n    return {\n        units,\n        values,\n        calibrationType,\n    };\n};\nconst getCalibratedAspect = (image) => image.calibration?.aspect || 1;\nexport { getCalibratedLengthUnitsAndScale, getCalibratedAspect, getCalibratedProbeUnitsAndValue, };\n","import { metaData } from '@cornerstonejs/core';\nfunction getPixelValueUnitsImageId(imageId, options) {\n    const generalSeriesModule = metaData.get('generalSeriesModule', imageId);\n    return getPixelValueUnits(generalSeriesModule.modality, imageId, options);\n}\nfunction getPixelValueUnits(modality, imageId, options) {\n    if (modality === 'CT') {\n        return 'HU';\n    }\n    else if (modality === 'PT') {\n        return _handlePTModality(imageId, options);\n    }\n    else {\n        return '';\n    }\n}\nfunction _handlePTModality(imageId, options) {\n    if (!options.isPreScaled) {\n        return 'raw';\n    }\n    if (options.isSuvScaled) {\n        return 'SUV';\n    }\n    const generalSeriesModule = metaData.get('generalSeriesModule', imageId);\n    if (generalSeriesModule?.modality === 'PT') {\n        const petSeriesModule = metaData.get('petSeriesModule', imageId);\n        return petSeriesModule?.units || 'unitless';\n    }\n    return 'unknown';\n}\nexport { getPixelValueUnits, getPixelValueUnitsImageId };\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { getBoundingBoxAroundShapeIJK } from './boundingBox';\nconst { transformWorldToIndex } = csUtils;\nfunction _getSphereBoundsInfo(circlePoints, imageData, directionVectors) {\n    const [bottom, top] = circlePoints;\n    const centerWorld = vec3.fromValues((bottom[0] + top[0]) / 2, (bottom[1] + top[1]) / 2, (bottom[2] + top[2]) / 2);\n    const radiusWorld = vec3.distance(bottom, top) / 2;\n    const { boundsIJK, topLeftWorld, bottomRightWorld } = _computeBoundsIJK(imageData, directionVectors, circlePoints, centerWorld, radiusWorld);\n    return {\n        boundsIJK,\n        centerWorld: centerWorld,\n        radiusWorld,\n        topLeftWorld: topLeftWorld,\n        bottomRightWorld: bottomRightWorld,\n    };\n}\nfunction getSphereBoundsInfo(circlePoints, imageData) {\n    const direction = imageData.getDirection();\n    const rowCosine = vec3.fromValues(direction[0], direction[1], direction[2]);\n    const columnCosine = vec3.fromValues(direction[3], direction[4], direction[5]);\n    const scanAxis = vec3.fromValues(direction[6], direction[7], direction[8]);\n    const viewPlaneNormal = vec3.negate(vec3.create(), scanAxis);\n    const directionVectors = {\n        row: rowCosine,\n        column: columnCosine,\n        normal: viewPlaneNormal,\n    };\n    return _getSphereBoundsInfo(circlePoints, imageData, directionVectors);\n}\nfunction getSphereBoundsInfoFromViewport(circlePoints, imageData, viewport) {\n    if (!viewport) {\n        throw new Error('viewport is required in order to calculate the sphere bounds');\n    }\n    const camera = viewport.getCamera();\n    const viewUp = vec3.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);\n    const viewPlaneNormal = vec3.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);\n    const viewRight = vec3.create();\n    vec3.cross(viewRight, viewUp, viewPlaneNormal);\n    const directionVectors = {\n        row: viewRight,\n        normal: viewPlaneNormal,\n        column: vec3.negate(vec3.create(), viewUp),\n    };\n    return _getSphereBoundsInfo(circlePoints, imageData, directionVectors);\n}\nfunction _computeBoundsIJK(imageData, directionVectors, circlePoints, centerWorld, radiusWorld) {\n    const dimensions = imageData.getDimensions();\n    const { row: rowCosine, column: columnCosine, normal: vecNormal, } = directionVectors;\n    const topLeftWorld = vec3.create();\n    const bottomRightWorld = vec3.create();\n    vec3.scaleAndAdd(topLeftWorld, centerWorld, vecNormal, radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, centerWorld, vecNormal, -radiusWorld);\n    vec3.scaleAndAdd(topLeftWorld, topLeftWorld, columnCosine, -radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, columnCosine, radiusWorld);\n    vec3.scaleAndAdd(topLeftWorld, topLeftWorld, rowCosine, -radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, rowCosine, radiusWorld);\n    const topLeftIJK = transformWorldToIndex(imageData, topLeftWorld);\n    const bottomRightIJK = transformWorldToIndex(imageData, bottomRightWorld);\n    const pointsIJK = circlePoints.map((p) => transformWorldToIndex(imageData, p));\n    const boundsIJK = getBoundingBoxAroundShapeIJK([topLeftIJK, bottomRightIJK, ...pointsIJK], dimensions);\n    return { boundsIJK, topLeftWorld, bottomRightWorld };\n}\nexport { getSphereBoundsInfo, getSphereBoundsInfoFromViewport };\n","import { getEnabledElements, utilities as csUtils } from '@cornerstonejs/core';\nconst { isEqual } = csUtils;\nexport default function getViewportsForAnnotation(annotation) {\n    const { metadata } = annotation;\n    return getEnabledElements()\n        .filter((enabledElement) => {\n        if (enabledElement.FrameOfReferenceUID === metadata.FrameOfReferenceUID) {\n            const viewport = enabledElement.viewport;\n            const { viewPlaneNormal, viewUp } = viewport.getCamera();\n            return (isEqual(viewPlaneNormal, metadata.viewPlaneNormal) &&\n                (!metadata.viewUp || isEqual(viewUp, metadata.viewUp)));\n        }\n        return;\n    })\n        .map((enabledElement) => enabledElement.viewport);\n}\n","import { utilities, triggerEvent } from '@cornerstonejs/core';\nimport { getAnnotationNearPoint, getAnnotationNearPointOnEnabledElement, } from './getAnnotationNearPoint';\nimport debounce from './debounce';\nimport throttle from './throttle';\nimport isObject from './isObject';\nimport calibrateImageSpacing from './calibrateImageSpacing';\nimport { getCalibratedLengthUnitsAndScale, getCalibratedProbeUnitsAndValue, getCalibratedAspect, } from './getCalibratedUnits';\nimport triggerAnnotationRenderForViewportIds from './triggerAnnotationRenderForViewportIds';\nimport triggerAnnotationRenderForToolGroupIds from './triggerAnnotationRenderForToolGroupIds';\nimport triggerAnnotationRender from './triggerAnnotationRender';\nimport { getSphereBoundsInfo } from './getSphereBoundsInfo';\nimport { pointToString } from './pointToString';\nimport AnnotationMultiSlice from './AnnotationMultiSlice';\nimport getViewportForAnnotation from './getViewportForAnnotation';\nimport { annotationHydration, getClosestImageIdForStackViewport, } from './annotationHydration';\nimport * as contours from './contours';\nimport * as segmentation from './segmentation';\nimport * as drawing from './drawing';\nimport * as math from './math';\nimport * as planar from './planar';\nimport * as viewportFilters from './viewportFilters';\nimport * as orientation from './orientation';\nimport * as cine from './cine';\nimport * as boundingBox from './boundingBox';\nimport * as planarFreehandROITool from './planarFreehandROITool';\nimport * as rectangleROITool from './rectangleROITool';\nimport { stackPrefetch, stackContextPrefetch } from './stackPrefetch';\nimport * as viewport from './viewport';\nimport * as touch from './touch';\nimport * as dynamicVolume from './dynamicVolume';\nimport * as polyDataUtils from './polyData/utils';\nimport * as voi from './voi';\nimport * as contourSegmentation from './contourSegmentation';\nimport { pointInSurroundingSphereCallback } from './pointInSurroundingSphereCallback';\nconst roundNumber = utilities.roundNumber;\nimport normalizeViewportPlane from './normalizeViewportPlane';\nimport IslandRemoval from './segmentation/islandRemoval';\nimport { getPixelValueUnits, getPixelValueUnitsImageId, } from './getPixelValueUnits';\nimport * as geometricSurfaceUtils from './geometricSurfaceUtils';\nimport setAnnotationLabel from './setAnnotationLabel';\nimport { moveAnnotationToViewPlane } from './moveAnnotationToViewPlane';\nimport getOrCreateImageVolume from './segmentation/getOrCreateImageVolume';\nimport * as usFanExtraction from '../tools/annotation/UltrasoundPleuraBLineTool/utils/fanExtraction';\nexport { math, planar, viewportFilters, drawing, debounce, dynamicVolume, throttle, orientation, isObject, touch, triggerEvent, calibrateImageSpacing, getCalibratedLengthUnitsAndScale, getCalibratedProbeUnitsAndValue, getCalibratedAspect, getPixelValueUnits, getPixelValueUnitsImageId, segmentation, contours, triggerAnnotationRenderForViewportIds, triggerAnnotationRenderForToolGroupIds, triggerAnnotationRender, getSphereBoundsInfo, getAnnotationNearPoint, getViewportForAnnotation, getAnnotationNearPointOnEnabledElement, viewport, cine, boundingBox, rectangleROITool, planarFreehandROITool, stackPrefetch, stackContextPrefetch, roundNumber, pointToString, polyDataUtils, voi, AnnotationMultiSlice, contourSegmentation, annotationHydration, getClosestImageIdForStackViewport, pointInSurroundingSphereCallback, normalizeViewportPlane, IslandRemoval, geometricSurfaceUtils, usFanExtraction, setAnnotationLabel, moveAnnotationToViewPlane, getOrCreateImageVolume, };\n","import { pointsAreEqual } from './robustSegmentIntersection';\nexport default function arePolylinesIdentical(poly1, poly2) {\n    if (poly1.length !== poly2.length) {\n        return false;\n    }\n    const len = poly1.length;\n    if (len === 0) {\n        return true;\n    }\n    let identicalForward = true;\n    for (let i = 0; i < len; i++) {\n        if (!pointsAreEqual(poly1[i], poly2[i])) {\n            identicalForward = false;\n            break;\n        }\n    }\n    if (identicalForward) {\n        return true;\n    }\n    let identicalReverse = true;\n    for (let i = 0; i < len; i++) {\n        if (!pointsAreEqual(poly1[i], poly2[len - 1 - i])) {\n            identicalReverse = false;\n            break;\n        }\n    }\n    if (identicalReverse) {\n        return true;\n    }\n    for (let offset = 1; offset < len; offset++) {\n        let cyclicForward = true;\n        for (let i = 0; i < len; i++) {\n            if (!pointsAreEqual(poly1[i], poly2[(i + offset) % len])) {\n                cyclicForward = false;\n                break;\n            }\n        }\n        if (cyclicForward) {\n            return true;\n        }\n        let cyclicReverse = true;\n        for (let i = 0; i < len; i++) {\n            if (!pointsAreEqual(poly1[i], poly2[(len - 1 - i + offset) % len])) {\n                cyclicReverse = false;\n                break;\n            }\n        }\n        if (cyclicReverse) {\n            return true;\n        }\n    }\n    return false;\n}\n","import containsPoint from './containsPoint';\nexport default function containsPoints(polyline, points) {\n    for (let i = 0, numPoint = points.length; i < numPoint; i++) {\n        if (!containsPoint(polyline, points[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n","import * as mathLine from '../line';\nconst DEFAULT_EPSILON = 0.1;\nexport default function decimate(polyline, epsilon = DEFAULT_EPSILON) {\n    const numPoints = polyline.length;\n    if (numPoints < 3) {\n        return polyline;\n    }\n    const epsilonSquared = epsilon * epsilon;\n    const partitionQueue = [[0, numPoints - 1]];\n    const polylinePointFlags = new Array(numPoints).fill(false);\n    let numDecimatedPoints = 2;\n    polylinePointFlags[0] = true;\n    polylinePointFlags[numPoints - 1] = true;\n    while (partitionQueue.length) {\n        const [startIndex, endIndex] = partitionQueue.pop();\n        if (endIndex - startIndex === 1) {\n            continue;\n        }\n        const startPoint = polyline[startIndex];\n        const endPoint = polyline[endIndex];\n        let maxDistSquared = -Infinity;\n        let maxDistIndex = -1;\n        for (let i = startIndex + 1; i < endIndex; i++) {\n            const currentPoint = polyline[i];\n            const distSquared = mathLine.distanceToPointSquared(startPoint, endPoint, currentPoint);\n            if (distSquared > maxDistSquared) {\n                maxDistSquared = distSquared;\n                maxDistIndex = i;\n            }\n        }\n        if (maxDistSquared < epsilonSquared) {\n            continue;\n        }\n        polylinePointFlags[maxDistIndex] = true;\n        numDecimatedPoints++;\n        partitionQueue.push([maxDistIndex, endIndex]);\n        partitionQueue.push([startIndex, maxDistIndex]);\n    }\n    const decimatedPolyline = new Array(numDecimatedPoints);\n    for (let srcIndex = 0, dstIndex = 0; srcIndex < numPoints; srcIndex++) {\n        if (polylinePointFlags[srcIndex]) {\n            decimatedPolyline[dstIndex++] = polyline[srcIndex];\n        }\n    }\n    return decimatedPolyline;\n}\n","export default function getSignedArea(polyline) {\n    if (polyline.length < 3) {\n        return 0;\n    }\n    const refPoint = polyline[0];\n    let area = 0;\n    for (let i = 0, len = polyline.length; i < len; i++) {\n        const p1 = polyline[i];\n        const p2Index = i === len - 1 ? 0 : i + 1;\n        const p2 = polyline[p2Index];\n        const aX = p1[0] - refPoint[0];\n        const aY = p1[1] - refPoint[1];\n        const bX = p2[0] - refPoint[0];\n        const bY = p2[1] - refPoint[1];\n        area += aX * bY - aY * bX;\n    }\n    area *= 0.5;\n    return area;\n}\n","import { glMatrix } from 'gl-matrix';\nimport { distanceToPointSquared } from '../point';\nexport default function isClosed(polyline) {\n    if (polyline.length < 3) {\n        return false;\n    }\n    const numPolylinePoints = polyline.length;\n    const firstPoint = polyline[0];\n    const lastPoint = polyline[numPolylinePoints - 1];\n    const distFirstToLastPoints = distanceToPointSquared(firstPoint, lastPoint);\n    return glMatrix.equals(0, distFirstToLastPoints);\n}\n","export default function findClosestPoint(sourcePoints, targetPoint) {\n    let minPoint = [0, 0];\n    let minDistance = Number.MAX_SAFE_INTEGER;\n    sourcePoints.forEach(function (sourcePoint) {\n        const distance = _distanceBetween(targetPoint, sourcePoint);\n        if (distance < minDistance) {\n            minDistance = distance;\n            minPoint = [...sourcePoint];\n        }\n    });\n    return minPoint;\n}\nfunction _distanceBetween(p1, p2) {\n    const [x1, y1] = p1;\n    const [x2, y2] = p2;\n    return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n}\n","import { StackViewport } from '@cornerstonejs/core';\nimport * as vec3 from 'gl-matrix/vec3';\nexport function moveAnnotationToViewPlane(annotation, viewport) {\n    const { data } = annotation;\n    const { points } = data.handles;\n    const { focalPoint, viewPlaneNormal } = viewport.getCamera();\n    const projectedDistance = vec3.dot(vec3.sub(vec3.create(), points[0], focalPoint), viewPlaneNormal);\n    points.forEach((point) => {\n        vec3.add(point, point, vec3.scale(vec3.create(), [-viewPlaneNormal[0], -viewPlaneNormal[1], -viewPlaneNormal[2]], projectedDistance));\n    });\n    if (viewport instanceof StackViewport) {\n        annotation.metadata.referencedImageId = viewport.getCurrentImageId();\n    }\n    return annotation;\n}\n","import { BaseVolumeViewport, utilities } from '@cornerstonejs/core';\nconst { isEqual } = utilities;\nconst acquisitionMapping = {\n    toIJK: (ijkPrime) => ijkPrime,\n    fromIJK: (ijk) => ijk,\n    type: 'acquistion',\n};\nconst jkMapping = {\n    toIJK: ([j, k, i]) => [i, j, k],\n    fromIJK: ([i, j, k]) => [j, k, i],\n    type: 'jk',\n};\nconst ikMapping = {\n    toIJK: ([i, k, j]) => [i, j, k],\n    fromIJK: ([i, j, k]) => [i, k, j],\n    type: 'ik',\n};\nexport default function normalizeViewportPlane(viewport, boundsIJK) {\n    if (!(viewport instanceof BaseVolumeViewport)) {\n        return { ...acquisitionMapping, boundsIJKPrime: boundsIJK };\n    }\n    const { viewPlaneNormal } = viewport.getCamera();\n    const mapping = (isEqual(Math.abs(viewPlaneNormal[0]), 1) && jkMapping) ||\n        (isEqual(Math.abs(viewPlaneNormal[1]), 1) && ikMapping) ||\n        (isEqual(Math.abs(viewPlaneNormal[2]), 1) && acquisitionMapping);\n    if (!mapping) {\n        return {\n            toIJK: null,\n            boundsIJKPrime: null,\n            fromIJK: null,\n            error: `Only mappings orthogonal to acquisition plane are permitted, but requested ${viewPlaneNormal}`,\n        };\n    }\n    return { ...mapping, boundsIJKPrime: mapping.fromIJK(boundsIJK) };\n}\n","export default function getOrientationStringLPS(vector) {\n    let orientation = '';\n    const orientationX = vector[0] < 0 ? 'R' : 'L';\n    const orientationY = vector[1] < 0 ? 'A' : 'P';\n    const orientationZ = vector[2] < 0 ? 'F' : 'H';\n    const abs = [Math.abs(vector[0]), Math.abs(vector[1]), Math.abs(vector[2])];\n    const MIN = 0.0001;\n    for (let i = 0; i < 3; i++) {\n        if (abs[0] > MIN && abs[0] > abs[1] && abs[0] > abs[2]) {\n            orientation += orientationX;\n            abs[0] = 0;\n        }\n        else if (abs[1] > MIN && abs[1] > abs[0] && abs[1] > abs[2]) {\n            orientation += orientationY;\n            abs[1] = 0;\n        }\n        else if (abs[2] > MIN && abs[2] > abs[0] && abs[2] > abs[1]) {\n            orientation += orientationZ;\n            abs[2] = 0;\n        }\n        else if (abs[0] > MIN && abs[1] > MIN && abs[0] === abs[1]) {\n            orientation += orientationX + orientationY;\n            abs[0] = 0;\n            abs[1] = 0;\n        }\n        else if (abs[0] > MIN && abs[2] > MIN && abs[0] === abs[2]) {\n            orientation += orientationX + orientationZ;\n            abs[0] = 0;\n            abs[2] = 0;\n        }\n        else if (abs[1] > MIN && abs[2] > MIN && abs[1] === abs[2]) {\n            orientation += orientationY + orientationZ;\n            abs[1] = 0;\n            abs[2] = 0;\n        }\n        else {\n            break;\n        }\n    }\n    return orientation;\n}\n","export default function invertOrientationStringLPS(orientationString) {\n    let inverted = orientationString.replace('H', 'f');\n    inverted = inverted.replace('F', 'h');\n    inverted = inverted.replace('R', 'l');\n    inverted = inverted.replace('L', 'r');\n    inverted = inverted.replace('A', 'p');\n    inverted = inverted.replace('P', 'a');\n    inverted = inverted.toUpperCase();\n    return inverted;\n}\n","import smoothAnnotation from './smoothAnnotation';\nexport default {\n    smoothAnnotation,\n};\nexport { smoothAnnotation };\n","import { interpolatePoints } from './algorithms/bspline';\nfunction getContinuousUniformDistributionValues(minDistributionDistance, closedInterval) {\n    const result = [];\n    const [intervalIni, intervalEnd] = closedInterval;\n    const intervalSize = intervalEnd - intervalIni + 1;\n    const intensity = Math.floor(intervalSize / minDistributionDistance);\n    let x = 0;\n    let continuosDistributionValue = Math.round(((intervalSize - 1) / (intensity - 1)) * x) + intervalIni;\n    while (continuosDistributionValue <= intervalEnd) {\n        result.push(continuosDistributionValue);\n        x++;\n        continuosDistributionValue =\n            Math.round(((intervalSize - 1) / (intensity - 1)) * x) + intervalIni;\n    }\n    return result;\n}\nexport default function interpolateSegmentPoints(points, iniIndex, endIndex, knotsRatioPercentage) {\n    const segmentSize = endIndex - iniIndex + 1;\n    const amountOfKnots = Math.floor((knotsRatioPercentage / 100) * segmentSize) ?? 1;\n    const minKnotDistance = Math.floor(segmentSize / amountOfKnots) ?? 1;\n    if (isNaN(segmentSize) || !segmentSize || !minKnotDistance) {\n        return points;\n    }\n    if (segmentSize / minKnotDistance < 2) {\n        return points;\n    }\n    const interpolationIniIndex = Math.max(0, iniIndex);\n    const interpolationEndIndex = Math.min(points.length - 1, endIndex);\n    const segmentPointsUnchangedBeg = points.slice(0, interpolationIniIndex);\n    const segmentPointsUnchangedEnd = points.slice(interpolationEndIndex + 1, points.length);\n    const knotsIndexes = getContinuousUniformDistributionValues(minKnotDistance, [\n        interpolationIniIndex,\n        interpolationEndIndex,\n    ]);\n    const interpolatedPoints = interpolatePoints(points, knotsIndexes);\n    return [\n        ...segmentPointsUnchangedBeg,\n        ...interpolatedPoints,\n        ...segmentPointsUnchangedEnd,\n    ];\n}\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { pointInSphere } from './math/sphere';\nimport { getBoundingBoxAroundShape } from './boundingBox';\nconst { transformWorldToIndex } = csUtils;\nexport function pointInSurroundingSphereCallback(imageData, circlePoints, callback, viewport) {\n    const { boundsIJK, centerWorld, radiusWorld } = _getBounds(circlePoints, imageData, viewport);\n    const sphereObj = {\n        center: centerWorld,\n        radius: radiusWorld,\n    };\n    const dimensions = imageData.getDimensions();\n    const voxelManager = csUtils.VoxelManager.createScalarVolumeVoxelManager({\n        dimensions: dimensions,\n        scalarData: imageData.getPointData().getScalars().getData(),\n    });\n    voxelManager.forEach(callback, {\n        boundsIJK,\n        isInObject: (pointLPS) => pointInSphere(sphereObj, pointLPS),\n        imageData,\n    });\n}\nfunction _getBounds(circlePoints, imageData, viewport) {\n    const [bottom, top] = circlePoints;\n    const centerWorld = vec3.fromValues((bottom[0] + top[0]) / 2, (bottom[1] + top[1]) / 2, (bottom[2] + top[2]) / 2);\n    const radiusWorld = vec3.distance(bottom, top) / 2;\n    let boundsIJK;\n    if (!viewport) {\n        const centerIJK = transformWorldToIndex(imageData, centerWorld);\n        const spacings = imageData.getSpacing();\n        const minSpacing = Math.min(...spacings);\n        const maxRadiusIJK = Math.ceil(radiusWorld / minSpacing);\n        boundsIJK = [\n            [centerIJK[0] - maxRadiusIJK, centerIJK[0] + maxRadiusIJK],\n            [centerIJK[1] - maxRadiusIJK, centerIJK[1] + maxRadiusIJK],\n            [centerIJK[2] - maxRadiusIJK, centerIJK[2] + maxRadiusIJK],\n        ];\n        return {\n            boundsIJK,\n            centerWorld: centerWorld,\n            radiusWorld,\n        };\n    }\n    boundsIJK = _computeBoundsIJKWithCamera(imageData, viewport, circlePoints, centerWorld, radiusWorld);\n    return {\n        boundsIJK,\n        centerWorld: centerWorld,\n        radiusWorld,\n    };\n}\nfunction _computeBoundsIJKWithCamera(imageData, viewport, circlePoints, centerWorld, radiusWorld) {\n    const [bottom, top] = circlePoints;\n    const dimensions = imageData.getDimensions();\n    const camera = viewport.getCamera();\n    const viewUp = vec3.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);\n    const viewPlaneNormal = vec3.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);\n    const viewRight = vec3.create();\n    vec3.cross(viewRight, viewUp, viewPlaneNormal);\n    const topLeftWorld = vec3.create();\n    const bottomRightWorld = vec3.create();\n    vec3.scaleAndAdd(topLeftWorld, top, viewPlaneNormal, radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottom, viewPlaneNormal, -radiusWorld);\n    vec3.scaleAndAdd(topLeftWorld, topLeftWorld, viewRight, -radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, viewRight, radiusWorld);\n    const sphereCornersIJK = [\n        transformWorldToIndex(imageData, topLeftWorld),\n        (transformWorldToIndex(imageData, bottomRightWorld)),\n    ];\n    const boundsIJK = getBoundingBoxAroundShape(sphereCornersIJK, dimensions);\n    return boundsIJK;\n}\n","export function pointToString(point, decimals = 5) {\n    return (parseFloat(point[0]).toFixed(decimals) +\n        ',' +\n        parseFloat(point[1]).toFixed(decimals) +\n        ',' +\n        parseFloat(point[2]).toFixed(decimals) +\n        ',');\n}\n","import { vec3 } from 'gl-matrix';\nexport function getPoint(points, idx) {\n    const idx3 = idx * 3;\n    if (idx3 < points.length) {\n        return vec3.fromValues(points[idx3], points[idx3 + 1], points[idx3 + 2]);\n    }\n}\nexport function getPolyDataPointIndexes(polyData) {\n    const linesData = polyData.getLines().getData();\n    let idx = 0;\n    const lineSegments = new Map();\n    while (idx < linesData.length) {\n        const segmentSize = linesData[idx++];\n        const segment = [];\n        for (let i = 0; i < segmentSize; i++) {\n            segment.push(linesData[idx + i]);\n        }\n        lineSegments.set(segment[0], segment);\n        idx += segmentSize;\n    }\n    const contours = [];\n    const findStartingPoint = (map) => {\n        for (const [key, value] of map.entries()) {\n            if (value !== undefined) {\n                return key;\n            }\n        }\n        return -1;\n    };\n    let startPoint = findStartingPoint(lineSegments);\n    while (startPoint !== -1) {\n        const contour = [startPoint];\n        while (lineSegments.has(startPoint)) {\n            const nextPoint = lineSegments.get(startPoint)[1];\n            if (lineSegments.has(nextPoint)) {\n                contour.push(nextPoint);\n            }\n            lineSegments.delete(startPoint);\n            startPoint = nextPoint;\n        }\n        contours.push(contour);\n        startPoint = findStartingPoint(lineSegments);\n    }\n    return contours.length ? contours : undefined;\n}\nexport function getPolyDataPoints(polyData) {\n    const contoursIndexes = getPolyDataPointIndexes(polyData);\n    if (!contoursIndexes) {\n        return;\n    }\n    const rawPointsData = polyData.getPoints().getData();\n    return contoursIndexes.map((contourIndexes) => contourIndexes.map((index) => getPoint(rawPointsData, index)));\n}\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { getBoundingBoxAroundShapeIJK } from '../boundingBox/getBoundingBoxAroundShape';\nimport extend2DBoundingBoxInViewAxis from '../boundingBox/extend2DBoundingBoxInViewAxis';\nfunction getBoundsIJKFromRectangleAnnotations(annotations, referenceVolume, options = {}) {\n    const AllBoundsIJK = [];\n    annotations.forEach((annotation) => {\n        const { data } = annotation;\n        const { points } = data.handles;\n        const { imageData, dimensions } = referenceVolume;\n        let pointsToUse = points;\n        if (data.cachedStats?.projectionPoints) {\n            const { projectionPoints } = data.cachedStats;\n            pointsToUse = [].concat(...projectionPoints);\n        }\n        const rectangleCornersIJK = pointsToUse.map((world) => csUtils.transformWorldToIndex(imageData, world));\n        let boundsIJK = getBoundingBoxAroundShapeIJK(rectangleCornersIJK, dimensions);\n        if (options.numSlicesToProject && !data.cachedStats?.projectionPoints) {\n            boundsIJK = extend2DBoundingBoxInViewAxis(boundsIJK, options.numSlicesToProject);\n        }\n        AllBoundsIJK.push(boundsIJK);\n    });\n    if (AllBoundsIJK.length === 1) {\n        return AllBoundsIJK[0];\n    }\n    const boundsIJK = AllBoundsIJK.reduce((accumulator, currentValue) => {\n        return {\n            iMin: Math.min(accumulator.iMin, currentValue.iMin),\n            jMin: Math.min(accumulator.jMin, currentValue.jMin),\n            kMin: Math.min(accumulator.kMin, currentValue.kMin),\n            iMax: Math.max(accumulator.iMax, currentValue.iMax),\n            jMax: Math.max(accumulator.jMax, currentValue.jMax),\n            kMax: Math.max(accumulator.kMax, currentValue.kMax),\n        };\n    }, {\n        iMin: Infinity,\n        jMin: Infinity,\n        kMin: Infinity,\n        iMax: -Infinity,\n        jMax: -Infinity,\n        kMax: -Infinity,\n    });\n    return boundsIJK;\n}\nexport default getBoundsIJKFromRectangleAnnotations;\n","import { vec3 } from 'gl-matrix';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nconst { isEqual } = csUtils;\nconst iAxis = vec3.fromValues(1, 0, 0);\nconst jAxis = vec3.fromValues(0, 1, 0);\nconst kAxis = vec3.fromValues(0, 0, 1);\nconst axisList = [iAxis, jAxis, kAxis];\nfunction isAxisAlignedRectangle(rectangleCornersIJK) {\n    const rectangleVec1 = vec3.subtract(vec3.create(), rectangleCornersIJK[0], rectangleCornersIJK[1]);\n    const rectangleVec2 = vec3.subtract(vec3.create(), rectangleCornersIJK[0], rectangleCornersIJK[2]);\n    const anglesVec1 = calculateAnglesWithAxes(rectangleVec1, axisList);\n    const anglesVec2 = calculateAnglesWithAxes(rectangleVec2, axisList);\n    const isAligned = [...anglesVec1, ...anglesVec2].every((angle) => isEqual(angle, 0) ||\n        isEqual(angle, 90) ||\n        isEqual(angle, 180) ||\n        isEqual(angle, 270));\n    return isAligned;\n}\nfunction calculateAnglesWithAxes(vec, axes) {\n    return axes.map((axis) => (vec3.angle(vec, axis) * 180) / Math.PI);\n}\nexport { isAxisAlignedRectangle };\n","import { getWebWorkerManager } from '@cornerstonejs/core';\nimport { getConfig } from '../config';\nlet registered = false;\nexport function registerComputeWorker() {\n    if (registered) {\n        return;\n    }\n    registered = true;\n    const workerFn = () => {\n        return new Worker(new URL('../workers/computeWorker.js', import.meta.url), {\n            name: 'compute',\n            type: 'module',\n        });\n    };\n    const workerManager = getWebWorkerManager();\n    const config = getConfig();\n    const computeWorkerConfig = config.computeWorker;\n    const options = {\n        maxWorkerInstances: 1,\n        autoTerminateOnIdle: computeWorkerConfig?.autoTerminateOnIdle ?? {\n            enabled: true,\n            idleTimeThreshold: 2000,\n        },\n    };\n    workerManager.registerWorker('compute', workerFn, options);\n}\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { state as annotationState } from '../../../stateManagement/annotation';\nimport getInterpolationDataCollection from '../../contours/interpolation/getInterpolationDataCollection';\nimport interpolate from '../../contours/interpolation/interpolate';\nimport deleteRelatedAnnotations from './deleteRelatedAnnotations';\nimport ChangeTypes from '../../../enums/ChangeTypes';\nimport getViewportForAnnotation from '../../getViewportForAnnotation';\nimport { addContourSegmentationAnnotation } from '../../contourSegmentation/addContourSegmentationAnnotation';\nconst { uuidv4 } = csUtils;\nconst ChangeTypesForInterpolation = [\n    ChangeTypes.HandlesUpdated,\n    ChangeTypes.InterpolationUpdated,\n];\nexport default class InterpolationManager {\n    static { this.toolNames = []; }\n    static addTool(toolName) {\n        if (!this.toolNames.includes(toolName)) {\n            this.toolNames.push(toolName);\n        }\n    }\n    static removeTool(toolName) {\n        if (this.toolNames.includes(toolName)) {\n            this.toolNames = this.toolNames.filter((name) => name !== toolName);\n        }\n    }\n    static acceptAutoGenerated(annotationGroupSelector, selector = {}) {\n        const { toolNames, segmentationId, segmentIndex, sliceIndex } = selector;\n        for (const toolName of toolNames || InterpolationManager.toolNames) {\n            const annotations = annotationState.getAnnotations(toolName, annotationGroupSelector);\n            if (!annotations?.length) {\n                continue;\n            }\n            for (const annotation of annotations) {\n                const { interpolationUID, data, autoGenerated, metadata } = annotation;\n                if (interpolationUID) {\n                    annotation.interpolationCompleted = true;\n                }\n                if (!autoGenerated) {\n                    continue;\n                }\n                if (segmentIndex && segmentIndex !== data.segmentation.segmentIndex) {\n                    continue;\n                }\n                if (sliceIndex !== undefined &&\n                    metadata &&\n                    sliceIndex !== metadata.sliceIndex) {\n                    continue;\n                }\n                if (segmentationId &&\n                    segmentationId !== data.segmentation.segmentationId) {\n                    continue;\n                }\n                addContourSegmentationAnnotation(annotation);\n                annotation.autoGenerated = false;\n            }\n        }\n    }\n    static { this.handleAnnotationCompleted = (evt) => {\n        const annotation = evt.detail.annotation;\n        if (!annotation?.metadata) {\n            return;\n        }\n        const { toolName, originalToolName } = annotation.metadata;\n        if (!this.toolNames.includes(toolName) &&\n            !this.toolNames.includes(originalToolName)) {\n            return;\n        }\n        const viewport = getViewportForAnnotation(annotation);\n        if (!viewport) {\n            console.warn('Unable to find viewport for', annotation);\n            return;\n        }\n        const sliceData = getSliceData(viewport);\n        const viewportData = {\n            viewport,\n            sliceData,\n            annotation,\n            interpolationUID: annotation.interpolationUID,\n        };\n        const hasInterpolationUID = !!annotation.interpolationUID;\n        annotation.autoGenerated = false;\n        if (hasInterpolationUID) {\n            deleteRelatedAnnotations(viewportData);\n            interpolate(viewportData);\n            return;\n        }\n        const filterData = [\n            {\n                key: 'segmentIndex',\n                value: annotation.data.segmentation.segmentIndex,\n                parentKey: (annotation) => annotation.data.segmentation,\n            },\n            {\n                key: 'viewPlaneNormal',\n                value: annotation.metadata.viewPlaneNormal,\n                parentKey: (annotation) => annotation.metadata,\n            },\n            {\n                key: 'viewUp',\n                value: annotation.metadata.viewUp,\n                parentKey: (annotation) => annotation.metadata,\n            },\n        ];\n        let interpolationAnnotations = getInterpolationDataCollection(viewportData, filterData);\n        const { sliceIndex } = annotation.metadata;\n        const skipUIDs = new Set();\n        interpolationAnnotations.forEach((interpolationAnnotation) => {\n            if (interpolationAnnotation.interpolationCompleted ||\n                interpolationAnnotation.metadata.sliceIndex === sliceIndex) {\n                const { interpolationUID } = interpolationAnnotation;\n                skipUIDs.add(interpolationUID);\n            }\n        });\n        interpolationAnnotations = interpolationAnnotations.filter((interpolationAnnotation) => !skipUIDs.has(interpolationAnnotation.interpolationUID));\n        annotation.interpolationUID =\n            interpolationAnnotations[0]?.interpolationUID || uuidv4();\n        viewportData.interpolationUID = annotation.interpolationUID;\n        interpolate(viewportData);\n    }; }\n    static { this.handleAnnotationUpdate = (evt) => {\n        const annotation = evt.detail.annotation;\n        const { changeType = ChangeTypes.HandlesUpdated } = evt.detail;\n        if (!annotation?.metadata) {\n            return;\n        }\n        const { toolName, originalToolName } = annotation.metadata;\n        if ((!this.toolNames.includes(toolName) &&\n            !this.toolNames.includes(originalToolName)) ||\n            !ChangeTypesForInterpolation.includes(changeType)) {\n            return;\n        }\n        const viewport = getViewportForAnnotation(annotation);\n        if (!viewport) {\n            console.warn('Unable to find matching viewport for annotation interpolation', annotation);\n            return;\n        }\n        if (annotation.autoGenerated) {\n            addContourSegmentationAnnotation(annotation);\n            annotation.autoGenerated = false;\n        }\n        const sliceData = getSliceData(viewport);\n        const viewportData = {\n            viewport,\n            sliceData,\n            annotation,\n            interpolationUID: annotation.interpolationUID,\n            isInterpolationUpdate: changeType === ChangeTypes.InterpolationUpdated,\n        };\n        interpolate(viewportData);\n    }; }\n    static { this.handleAnnotationDelete = (evt) => {\n        const annotation = evt.detail.annotation;\n        if (!annotation?.metadata) {\n            return;\n        }\n        const { toolName } = annotation.metadata;\n        if (!this.toolNames.includes(toolName) || annotation.autoGenerated) {\n            return;\n        }\n        const viewport = getViewportForAnnotation(annotation);\n        if (!viewport) {\n            console.warn(\"No viewport, can't delete interpolated results\", annotation);\n            return;\n        }\n        const sliceData = getSliceData(viewport);\n        const viewportData = {\n            viewport,\n            sliceData,\n            annotation,\n            interpolationUID: annotation.interpolationUID,\n        };\n        annotation.autoGenerated = false;\n        deleteRelatedAnnotations(viewportData);\n    }; }\n}\nfunction getSliceData(viewport) {\n    const sliceData = {\n        numberOfSlices: viewport.getNumberOfSlices(),\n        imageIndex: viewport.getCurrentImageIdIndex(),\n    };\n    return sliceData;\n}\n","import { InstanceVolumetricCalculator } from './VolumetricCalculator';\nexport default class SegmentStatsCalculator {\n    static { this.calculators = new Map(); }\n    static { this.indices = []; }\n    static { this.mode = 'collective'; }\n    static statsInit(options) {\n        const { storePointData, indices, mode } = options;\n        this.mode = mode;\n        this.indices = indices;\n        this.calculators.clear();\n        if (this.mode === 'individual') {\n            indices.forEach((index) => {\n                this.calculators.set(index, new InstanceVolumetricCalculator({ storePointData }));\n            });\n        }\n        else {\n            this.calculators.set(indices, new InstanceVolumetricCalculator({ storePointData }));\n        }\n    }\n    static statsCallback(data) {\n        const { segmentIndex, ...statsData } = data;\n        if (!segmentIndex) {\n            throw new Error('Segment index is required for stats calculation');\n        }\n        const calculator = this.mode === 'individual'\n            ? this.calculators.get(segmentIndex)\n            : this.calculators.get(this.indices);\n        if (!calculator) {\n            throw new Error(`No calculator found for segment ${segmentIndex}`);\n        }\n        calculator.statsCallback(statsData);\n    }\n    static getStatistics(options) {\n        if (this.mode === 'individual') {\n            const result = {};\n            this.calculators.forEach((calculator, segmentIndex) => {\n                result[segmentIndex] = calculator.getStatistics(options);\n            });\n            return result;\n        }\n        const calculator = this.calculators.get(this.indices);\n        return calculator.getStatistics(options);\n    }\n}\n","import { BasicStatsCalculator, InstanceBasicStatsCalculator, } from '../math/basic/BasicStatsCalculator';\nimport { getCalibratedLengthUnitsAndScale } from '../getCalibratedUnits';\nconst TEST_MAX_LOCATIONS = 10;\nfunction createVolumetricState() {\n    return {\n        maxIJKs: [],\n    };\n}\nfunction volumetricStatsCallback(state, data) {\n    const { value } = data;\n    const { maxIJKs } = state;\n    const length = maxIJKs.length;\n    if (typeof value !== 'number' ||\n        (length >= TEST_MAX_LOCATIONS && value < maxIJKs[0].value)) {\n        return;\n    }\n    const dataCopy = {\n        value: data.value,\n        pointLPS: data.pointLPS\n            ? [data.pointLPS[0], data.pointLPS[1], data.pointLPS[2]]\n            : undefined,\n        pointIJK: data.pointIJK\n            ? [data.pointIJK[0], data.pointIJK[1], data.pointIJK[2]]\n            : undefined,\n    };\n    if (!length || value >= maxIJKs[length - 1].value) {\n        maxIJKs.push(dataCopy);\n    }\n    else {\n        for (let i = 0; i < length; i++) {\n            if (value <= maxIJKs[i].value) {\n                maxIJKs.splice(i, 0, dataCopy);\n                break;\n            }\n        }\n    }\n    if (length >= TEST_MAX_LOCATIONS) {\n        maxIJKs.splice(0, 1);\n    }\n}\nfunction volumetricGetStatistics(state, stats, options) {\n    const { spacing, calibration } = options;\n    const { volumeUnit } = getCalibratedLengthUnitsAndScale({\n        calibration,\n        hasPixelSpacing: true,\n    }, []);\n    const volumeScale = spacing ? spacing[0] * spacing[1] * spacing[2] : 1;\n    stats.volume = {\n        value: Array.isArray(stats.count.value)\n            ? stats.count.value.map((v) => v * volumeScale)\n            : stats.count.value * volumeScale,\n        unit: volumeUnit,\n        name: 'volume',\n        label: 'Volume',\n    };\n    stats.maxIJKs = state.maxIJKs.filter((entry) => entry.pointIJK !== undefined);\n    stats.array.push(stats.volume);\n    state.maxIJKs = [];\n    return stats;\n}\nexport class VolumetricCalculator extends BasicStatsCalculator {\n    static { this.volumetricState = createVolumetricState(); }\n    static statsInit(options) {\n        super.statsInit(options);\n        this.volumetricState = createVolumetricState();\n    }\n    static statsCallback(data) {\n        super.statsCallback(data);\n        volumetricStatsCallback(this.volumetricState, data);\n    }\n    static getStatistics(options) {\n        const optionsWithUnit = {\n            ...options,\n            unit: options?.unit || 'none',\n            calibration: options?.calibration,\n            hasPixelSpacing: options?.hasPixelSpacing,\n        };\n        const stats = super.getStatistics(optionsWithUnit);\n        return volumetricGetStatistics(this.volumetricState, stats, optionsWithUnit);\n    }\n}\nexport class InstanceVolumetricCalculator extends InstanceBasicStatsCalculator {\n    constructor(options) {\n        super(options);\n        this.volumetricState = createVolumetricState();\n    }\n    statsInit(options) {\n        super.statsInit(options);\n        this.volumetricState = createVolumetricState();\n    }\n    statsCallback(data) {\n        super.statsCallback(data);\n        volumetricStatsCallback(this.volumetricState, data);\n    }\n    getStatistics(options) {\n        const optionsWithUnit = {\n            ...options,\n            unit: options?.unit || 'none',\n            calibration: options?.calibration,\n            hasPixelSpacing: options?.hasPixelSpacing,\n        };\n        const stats = super.getStatistics(optionsWithUnit);\n        return volumetricGetStatistics(this.volumetricState, stats, optionsWithUnit);\n    }\n}\nexport default VolumetricCalculator;\n","import { getToolGroup } from '../../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../triggerAnnotationRenderForViewportIds';\nimport { getRenderingEngine } from '@cornerstonejs/core';\nimport { getBrushToolInstances } from './getBrushToolInstances';\nexport function setBrushSizeForToolGroup(toolGroupId, brushSize, toolName) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return;\n    }\n    const brushBasedToolInstances = getBrushToolInstances(toolGroupId, toolName);\n    brushBasedToolInstances.forEach((tool) => {\n        tool.configuration.brushSize = brushSize;\n        tool.invalidateBrushCursor();\n    });\n    const viewportsInfo = toolGroup.getViewportsInfo();\n    const viewportsInfoArray = Object.keys(viewportsInfo).map((key) => viewportsInfo[key]);\n    if (!viewportsInfoArray.length) {\n        return;\n    }\n    const { renderingEngineId } = viewportsInfoArray[0];\n    const viewportIds = toolGroup.getViewportIds();\n    const renderingEngine = getRenderingEngine(renderingEngineId);\n    triggerAnnotationRenderForViewportIds(viewportIds);\n}\nexport function getBrushSizeForToolGroup(toolGroupId, toolName) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return;\n    }\n    const toolInstances = toolGroup._toolInstances;\n    if (!Object.keys(toolInstances).length) {\n        return;\n    }\n    const brushBasedToolInstances = getBrushToolInstances(toolGroupId, toolName);\n    const brushToolInstance = brushBasedToolInstances[0];\n    if (!brushToolInstance) {\n        return;\n    }\n    return brushToolInstance.configuration.brushSize;\n}\n","import { getToolGroup } from '../../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../triggerAnnotationRenderForViewportIds';\nimport { getBrushToolInstances } from './getBrushToolInstances';\nexport function setBrushThresholdForToolGroup(toolGroupId, threshold) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return;\n    }\n    const brushBasedToolInstances = getBrushToolInstances(toolGroupId);\n    brushBasedToolInstances.forEach((tool) => {\n        const activeStrategy = tool.configuration.activeStrategy;\n        if (!activeStrategy.toLowerCase().includes('threshold')) {\n            return;\n        }\n        tool.configuration = {\n            ...tool.configuration,\n            threshold: {\n                ...tool.configuration.threshold,\n                ...threshold,\n            },\n        };\n    });\n    const viewportsInfo = toolGroup.getViewportsInfo();\n    if (!viewportsInfo.length) {\n        return;\n    }\n    const viewportIds = toolGroup.getViewportIds();\n    triggerAnnotationRenderForViewportIds(viewportIds);\n}\nexport function getBrushThresholdForToolGroup(toolGroupId) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return;\n    }\n    const toolInstances = toolGroup._toolInstances;\n    if (!Object.keys(toolInstances).length) {\n        return;\n    }\n    const brushBasedToolInstances = getBrushToolInstances(toolGroupId);\n    const brushToolInstance = brushBasedToolInstances[0];\n    if (!brushToolInstance) {\n        return;\n    }\n    return brushToolInstance.configuration.threshold.range;\n}\n","import { utilities, getWebWorkerManager } from '@cornerstonejs/core';\nimport { triggerWorkerProgress } from './utilsForWorker';\nimport { WorkerTypes } from '../../enums';\nimport { registerComputeWorker } from '../registerComputeWorker';\nimport createMergedLabelmapForIndex from './createMergedLabelmapForIndex';\nimport { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nimport getOrCreateSegmentationVolume from './getOrCreateSegmentationVolume';\nimport { getReferenceVolumeForSegmentation } from './getReferenceVolumeForSegmentation';\nasync function computeMetabolicStats({ segmentationIds, segmentIndex, }) {\n    registerComputeWorker();\n    triggerWorkerProgress(WorkerTypes.COMPUTE_STATISTICS, 0);\n    const segmentation = getSegmentation(segmentationIds[0]);\n    const { imageIds: segImageIds } = segmentation.representationData\n        .Labelmap;\n    const isValidVolume = utilities.isValidVolume(segImageIds);\n    if (!isValidVolume) {\n        throw new Error('Invalid volume - TMTV cannot be calculated');\n    }\n    const stats = await calculateForVolume({\n        segmentationIds,\n        segmentIndex,\n    });\n    return stats;\n}\nasync function calculateForVolume({ segmentationIds, segmentIndex }) {\n    const labelmapVolumes = segmentationIds.map((id) => {\n        return getOrCreateSegmentationVolume(id);\n    });\n    const mergedLabelmap = createMergedLabelmapForIndex(labelmapVolumes, segmentIndex);\n    if (!mergedLabelmap) {\n        throw new Error('Invalid volume - TMTV cannot be calculated');\n    }\n    const { imageData, dimensions, direction, origin, voxelManager } = mergedLabelmap;\n    const spacing = imageData.getSpacing();\n    const segmentationScalarData = voxelManager.getCompleteScalarDataArray();\n    const segmentationInfo = {\n        scalarData: segmentationScalarData,\n        dimensions,\n        spacing,\n        origin,\n        direction,\n    };\n    const referenceVolume = getReferenceVolumeForSegmentation(segmentationIds[0]);\n    const imageInfo = {\n        dimensions: referenceVolume.dimensions,\n        spacing: referenceVolume.spacing,\n        origin: referenceVolume.origin,\n        direction: referenceVolume.direction,\n        scalarData: referenceVolume.voxelManager.getCompleteScalarDataArray(),\n    };\n    if (imageInfo.scalarData.length === 0 ||\n        segmentationInfo.scalarData.length === 0) {\n        return {\n            [segmentIndex]: {\n                name: 'TMTV',\n                value: 0,\n            },\n        };\n    }\n    const stats = await getWebWorkerManager().executeTask('compute', 'computeMetabolicStats', {\n        segmentationInfo,\n        imageInfo,\n    });\n    triggerWorkerProgress(WorkerTypes.COMPUTE_STATISTICS, 100);\n    return stats;\n}\nexport { computeMetabolicStats };\n","import { cache } from '@cornerstonejs/core';\nimport { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nimport getOrCreateImageVolume from './getOrCreateImageVolume';\nexport function getReferenceVolumeForSegmentation(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        return null;\n    }\n    let referenceImageIds;\n    const labelmap = segmentation.representationData.Labelmap;\n    if ('imageIds' in labelmap) {\n        const { imageIds } = labelmap;\n        const firstImage = cache.getImage(imageIds[0]);\n        const volumeInfo = cache.getVolumeContainingImageId(firstImage.referencedImageId);\n        if (volumeInfo?.volume) {\n            return volumeInfo.volume;\n        }\n        referenceImageIds = imageIds.map((imageId) => cache.getImage(imageId).referencedImageId);\n    }\n    else if ('volumeId' in labelmap) {\n        const { volumeId, referencedVolumeId } = labelmap;\n        if (referencedVolumeId) {\n            const refVolume = cache.getVolume(referencedVolumeId);\n            if (refVolume) {\n                return refVolume;\n            }\n        }\n        const segVolume = cache.getVolume(volumeId);\n        if (segVolume) {\n            referenceImageIds = segVolume.imageIds.map((imageId) => cache.getImage(imageId).referencedImageId);\n        }\n    }\n    return getOrCreateImageVolume(referenceImageIds);\n}\n","import { generateContourSetsFromLabelmap } from '../contours';\nimport findLargestBidirectional from './findLargestBidirectional';\nimport getOrCreateSegmentationVolume from './getOrCreateSegmentationVolume';\nexport default async function contourAndFindLargestBidirectional(segmentation) {\n    const contours = await generateContourSetsFromLabelmap({\n        segmentations: segmentation,\n    });\n    if (!contours?.length || !contours[0].sliceContours.length) {\n        return;\n    }\n    const { segments = [\n        null,\n        { label: 'Unspecified', color: null, containedSegmentIndices: null },\n    ], } = segmentation;\n    const vol = getOrCreateSegmentationVolume(segmentation.segmentationId);\n    if (!vol) {\n        return;\n    }\n    const segmentIndex = segments.findIndex((it) => !!it);\n    if (segmentIndex === -1) {\n        return;\n    }\n    segments[segmentIndex].segmentIndex = segmentIndex;\n    return findLargestBidirectional(contours[0], vol.volumeId, segments[segmentIndex]);\n}\n","export default function createBidirectionalToolData(bidirectionalData, viewport) {\n    const { majorAxis, minorAxis, label = '', sliceIndex } = bidirectionalData;\n    const [major0, major1] = majorAxis;\n    const [minor0, minor1] = minorAxis;\n    const points = [major0, major1, minor0, minor1];\n    const bidirectionalToolData = {\n        highlighted: true,\n        invalidated: true,\n        metadata: {\n            toolName: 'Bidirectional',\n            ...viewport.getViewReference({ sliceIndex }),\n        },\n        data: {\n            handles: {\n                points,\n                textBox: {\n                    hasMoved: false,\n                    worldPosition: [0, 0, 0],\n                    worldBoundingBox: {\n                        topLeft: [0, 0, 0],\n                        topRight: [0, 0, 0],\n                        bottomLeft: [0, 0, 0],\n                        bottomRight: [0, 0, 0],\n                    },\n                },\n                activeHandleIndex: null,\n            },\n            label,\n            cachedStats: {},\n        },\n        isLocked: false,\n        isVisible: true,\n    };\n    return bidirectionalToolData;\n}\n","import { utilities, eventTarget } from '@cornerstonejs/core';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport Events from '../../enums/Events';\nconst { VoxelManager, RLEVoxelMap } = utilities;\nexport function createLabelmapMemo(segmentationId, segmentationVoxelManager) {\n    return createRleMemo(segmentationId, segmentationVoxelManager);\n}\nexport function restoreMemo(isUndo) {\n    const { segmentationVoxelManager, undoVoxelManager, redoVoxelManager } = this;\n    const useVoxelManager = isUndo === false ? redoVoxelManager : undoVoxelManager;\n    useVoxelManager.forEach(({ value, pointIJK }) => {\n        segmentationVoxelManager.setAtIJKPoint(pointIJK, value);\n    });\n    const slices = useVoxelManager.getArrayOfModifiedSlices();\n    triggerSegmentationDataModified(this.segmentationId, slices);\n}\nexport function createRleMemo(segmentationId, segmentationVoxelManager) {\n    const voxelManager = VoxelManager.createRLEHistoryVoxelManager(segmentationVoxelManager);\n    const state = {\n        segmentationId,\n        restoreMemo,\n        commitMemo,\n        segmentationVoxelManager,\n        voxelManager,\n        id: utilities.uuidv4(),\n        operationType: 'labelmap',\n    };\n    return state;\n}\nfunction commitMemo() {\n    if (this.redoVoxelManager) {\n        return true;\n    }\n    if (!this.voxelManager.modifiedSlices.size) {\n        return false;\n    }\n    const { segmentationVoxelManager } = this;\n    const undoVoxelManager = VoxelManager.createRLEHistoryVoxelManager(segmentationVoxelManager);\n    RLEVoxelMap.copyMap(undoVoxelManager.map, this.voxelManager.map);\n    for (const key of this.voxelManager.modifiedSlices.keys()) {\n        undoVoxelManager.modifiedSlices.add(key);\n    }\n    this.undoVoxelManager = undoVoxelManager;\n    const redoVoxelManager = VoxelManager.createRLEVolumeVoxelManager({\n        dimensions: this.segmentationVoxelManager.dimensions,\n    });\n    this.redoVoxelManager = redoVoxelManager;\n    undoVoxelManager.forEach(({ index, pointIJK, value }) => {\n        const currentValue = segmentationVoxelManager.getAtIJKPoint(pointIJK);\n        if (currentValue === value) {\n            return;\n        }\n        redoVoxelManager.setAtIndex(index, currentValue);\n    });\n    return true;\n}\n","import { getEnabledElementByIds, volumeLoader, VolumeViewport, utilities as csUtils, } from '@cornerstonejs/core';\nexport default async function createLabelmapVolumeForViewport(input) {\n    const { viewportId, renderingEngineId, options } = input;\n    let { segmentationId } = input;\n    const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n    if (!enabledElement) {\n        throw new Error('element disabled');\n    }\n    const { viewport } = enabledElement;\n    if (!(viewport instanceof VolumeViewport)) {\n        throw new Error('Segmentation only supports VolumeViewport');\n    }\n    const { uid } = viewport.getDefaultActor();\n    if (segmentationId === undefined) {\n        segmentationId = `${uid}-based-segmentation-${options?.volumeId ?? csUtils.uuidv4().slice(0, 8)}`;\n    }\n    if (options) {\n        const properties = structuredClone(options);\n        await volumeLoader.createLocalVolume(segmentationId, properties);\n    }\n    else {\n        const volumeId = viewport.getVolumeId();\n        volumeLoader.createAndCacheDerivedLabelmapVolume(volumeId, {\n            volumeId: segmentationId,\n        });\n    }\n    return segmentationId;\n}\n","import { volumeLoader, utilities as csUtils, cache } from '@cornerstonejs/core';\nfunction createMergedLabelmapForIndex(labelmaps, segmentIndex = 1, volumeId = 'mergedLabelmap') {\n    labelmaps.forEach(({ direction, dimensions, origin, spacing }) => {\n        if (!csUtils.isEqual(dimensions, labelmaps[0].dimensions) ||\n            !csUtils.isEqual(direction, labelmaps[0].direction) ||\n            !csUtils.isEqual(spacing, labelmaps[0].spacing) ||\n            !csUtils.isEqual(origin, labelmaps[0].origin)) {\n            throw new Error('labelmaps must have the same size and shape');\n        }\n    });\n    const labelmap = labelmaps[0];\n    const arrayType = labelmap.voxelManager.getConstructor();\n    const outputData = new arrayType(labelmap.voxelManager.getScalarDataLength());\n    labelmaps.forEach((labelmap) => {\n        const voxelManager = labelmap.voxelManager;\n        const scalarDataLength = voxelManager.getScalarDataLength();\n        for (let i = 0; i < scalarDataLength; i++) {\n            if (voxelManager.getAtIndex(i) === segmentIndex) {\n                outputData[i] = segmentIndex;\n            }\n        }\n    });\n    const options = {\n        scalarData: outputData,\n        metadata: labelmap.metadata,\n        spacing: labelmap.spacing,\n        origin: labelmap.origin,\n        direction: labelmap.direction,\n        dimensions: labelmap.dimensions,\n    };\n    const cachedVolume = cache.getVolume(volumeId);\n    let mergedVolume;\n    if (cachedVolume) {\n        mergedVolume = cachedVolume;\n        mergedVolume.voxelManager.setCompleteScalarDataArray(outputData);\n    }\n    else {\n        mergedVolume = volumeLoader.createLocalVolume(volumeId, options);\n    }\n    return mergedVolume;\n}\nexport default createMergedLabelmapForIndex;\n","import { vec3 } from 'gl-matrix';\nimport { createIsInSegment, isLineInSegment } from './isLineInSegment';\nconst EPSILON = 1e-2;\nexport default function findLargestBidirectional(contours, segVolumeId, segment) {\n    const { sliceContours } = contours;\n    const { segmentIndex, containedSegmentIndices } = segment;\n    let maxBidirectional;\n    const isInSegment = createIsInSegment(segVolumeId, segmentIndex, containedSegmentIndices);\n    for (const sliceContour of sliceContours) {\n        const bidirectional = createBidirectionalForSlice(sliceContour, isInSegment, maxBidirectional);\n        if (!bidirectional) {\n            continue;\n        }\n        maxBidirectional = bidirectional;\n    }\n    if (maxBidirectional) {\n        Object.assign(maxBidirectional, segment);\n    }\n    return maxBidirectional;\n}\nexport function createBidirectionalForSlice(sliceContour, isInSegment, currentMax = { maxMajor: 0, maxMinor: 0 }) {\n    const { points } = sliceContour.polyData;\n    const { maxMinor: currentMaxMinor, maxMajor: currentMaxMajor } = currentMax;\n    let maxMajor = currentMaxMajor * currentMaxMajor;\n    let maxMinor = currentMaxMinor * currentMaxMinor;\n    let maxMajorPoints;\n    for (let index1 = 0; index1 < points.length; index1++) {\n        for (let index2 = index1 + 1; index2 < points.length; index2++) {\n            const point1 = points[index1];\n            const point2 = points[index2];\n            const distance2 = vec3.sqrDist(point1, point2);\n            if (distance2 < maxMajor) {\n                continue;\n            }\n            if (distance2 - EPSILON < maxMajor + EPSILON && maxMajorPoints) {\n                continue;\n            }\n            if (!isInSegment.testCenter(point1, point2)) {\n                continue;\n            }\n            if (!isLineInSegment(point1, point2, isInSegment)) {\n                continue;\n            }\n            maxMajor = distance2 - EPSILON;\n            maxMajorPoints = [index1, index2];\n            maxMinor = 0;\n        }\n    }\n    if (!maxMajorPoints) {\n        return;\n    }\n    maxMajor = Math.sqrt(maxMajor + EPSILON);\n    const handle0 = points[maxMajorPoints[0]];\n    const handle1 = points[maxMajorPoints[1]];\n    const unitMajor = vec3.sub(vec3.create(), handle0, handle1);\n    vec3.scale(unitMajor, unitMajor, 1 / maxMajor);\n    let maxMinorPoints;\n    for (let index1 = 0; index1 < points.length; index1++) {\n        for (let index2 = index1 + 1; index2 < points.length; index2++) {\n            const point1 = points[index1];\n            const point2 = points[index2];\n            const distance2 = vec3.sqrDist(point1, point2);\n            if (distance2 <= maxMinor) {\n                continue;\n            }\n            const delta = vec3.sub(vec3.create(), point1, point2);\n            const dot = Math.abs(vec3.dot(delta, unitMajor)) / Math.sqrt(distance2);\n            if (dot > EPSILON) {\n                continue;\n            }\n            if (!isInSegment.testCenter(point1, point2)) {\n                continue;\n            }\n            if (!isLineInSegment(point1, point2, isInSegment)) {\n                continue;\n            }\n            maxMinor = distance2;\n            maxMinorPoints = [index1, index2];\n        }\n    }\n    if (!maxMinorPoints) {\n        return;\n    }\n    maxMinor = Math.sqrt(maxMinor);\n    const handle2 = points[maxMinorPoints[0]];\n    const handle3 = points[maxMinorPoints[1]];\n    const bidirectional = {\n        majorAxis: [handle0, handle1],\n        minorAxis: [handle2, handle3],\n        maxMajor,\n        maxMinor,\n        ...sliceContour,\n    };\n    return bidirectional;\n}\n","function floodFill(getter, seed, options = {}) {\n    const onFlood = options.onFlood;\n    const onBoundary = options.onBoundary;\n    const equals = options.equals;\n    const filter = options.filter;\n    const diagonals = options.diagonals || false;\n    const startNode = get(seed);\n    const permutations = prunedPermutations();\n    const stack = [];\n    const flooded = [];\n    const visits = new Set();\n    const bounds = options.bounds;\n    stack.push({ currentArgs: seed });\n    while (stack.length > 0) {\n        flood(stack.pop());\n    }\n    return {\n        flooded,\n    };\n    function flood(job) {\n        const getArgs = job.currentArgs;\n        const prevArgs = job.previousArgs;\n        if (visited(getArgs)) {\n            return;\n        }\n        markAsVisited(getArgs);\n        if (member(getArgs)) {\n            markAsFlooded(getArgs);\n            pushAdjacent(getArgs);\n        }\n        else {\n            markAsBoundary(prevArgs);\n        }\n    }\n    function visited(key) {\n        const [x, y, z = 0] = key;\n        const iKey = x + 32768 + 65536 * (y + 32768 + 65536 * (z + 32768));\n        return visits.has(iKey);\n    }\n    function markAsVisited(key) {\n        const [x, y, z = 0] = key;\n        const iKey = x + 32768 + 65536 * (y + 32768 + 65536 * (z + 32768));\n        visits.add(iKey);\n    }\n    function member(getArgs) {\n        const node = get(getArgs);\n        return equals ? equals(node, startNode) : node === startNode;\n    }\n    function markAsFlooded(getArgs) {\n        flooded.push(getArgs);\n        if (onFlood) {\n            onFlood(...getArgs);\n        }\n    }\n    function markAsBoundary(prevArgs) {\n        const [x, y, z = 0] = prevArgs;\n        const iKey = x + 32768 + 65536 * (y + 32768 + 65536 * (z + 32768));\n        bounds?.set(iKey, prevArgs);\n        if (onBoundary) {\n            onBoundary(...prevArgs);\n        }\n    }\n    function pushAdjacent(getArgs) {\n        for (let i = 0; i < permutations.length; i += 1) {\n            const perm = permutations[i];\n            const nextArgs = getArgs.slice(0);\n            for (let j = 0; j < getArgs.length; j += 1) {\n                nextArgs[j] += perm[j];\n            }\n            if (filter?.(nextArgs) === false) {\n                continue;\n            }\n            if (visited(nextArgs)) {\n                continue;\n            }\n            stack.push({\n                currentArgs: nextArgs,\n                previousArgs: getArgs,\n            });\n        }\n    }\n    function get(getArgs) {\n        return getter(...getArgs);\n    }\n    function prunedPermutations() {\n        const permutations = permute(seed.length);\n        return permutations.filter(function (perm) {\n            const count = countNonZeroes(perm);\n            return count !== 0 && (count === 1 || diagonals);\n        });\n    }\n    function permute(length) {\n        const perms = [];\n        const permutation = function (string) {\n            return string.split('').map(function (c) {\n                return parseInt(c, 10) - 1;\n            });\n        };\n        for (let i = 0; i < Math.pow(3, length); i += 1) {\n            const string = lpad(i.toString(3), '0', length);\n            perms.push(permutation(string));\n        }\n        return perms;\n    }\n}\nfunction countNonZeroes(array) {\n    let count = 0;\n    for (let i = 0; i < array.length; i += 1) {\n        if (array[i] !== 0) {\n            count += 1;\n        }\n    }\n    return count;\n}\nfunction lpad(string, character, length) {\n    const array = new Array(length + 1);\n    const pad = array.join(character);\n    return (pad + string).slice(-length);\n}\nexport default floodFill;\n","import { getToolGroup } from '../../store/ToolGroupManager';\nimport BrushTool from '../../tools/segmentation/BrushTool';\nexport function getBrushToolInstances(toolGroupId, toolName) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return [];\n    }\n    const toolInstances = toolGroup._toolInstances;\n    if (!Object.keys(toolInstances).length) {\n        return [];\n    }\n    if (toolName && toolInstances[toolName]) {\n        return [toolInstances[toolName]];\n    }\n    const brushBasedToolInstances = Object.values(toolInstances).filter((toolInstance) => toolInstance instanceof BrushTool);\n    return brushBasedToolInstances;\n}\n","import { getAnnotation } from '../../stateManagement';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nexport function getHoveredContourSegmentationAnnotation(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    const { annotationUIDsMap } = segmentation.representationData.Contour;\n    for (const [segmentIndex, annotationUIDs] of annotationUIDsMap.entries()) {\n        const highlightedAnnotationUID = Array.from(annotationUIDs).find((annotationUID) => getAnnotation(annotationUID).highlighted);\n        if (highlightedAnnotationUID) {\n            return segmentIndex;\n        }\n    }\n    return undefined;\n}\n","import { cache, volumeLoader, utilities as csUtils, } from '@cornerstonejs/core';\nfunction getOrCreateImageVolume(referencedImageIds) {\n    if (!referencedImageIds || referencedImageIds.length <= 1) {\n        return;\n    }\n    const isValidVolume = csUtils.isValidVolume(referencedImageIds);\n    if (!isValidVolume) {\n        return;\n    }\n    const volumeId = cache.generateVolumeId(referencedImageIds);\n    let imageVolume = cache.getVolume(volumeId);\n    if (imageVolume) {\n        return imageVolume;\n    }\n    imageVolume = volumeLoader.createAndCacheVolumeFromImagesSync(volumeId, referencedImageIds);\n    return imageVolume;\n}\nexport default getOrCreateImageVolume;\n","import { cache, volumeLoader, utilities, } from '@cornerstonejs/core';\nimport { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nfunction getOrCreateSegmentationVolume(segmentationId) {\n    const { representationData } = getSegmentation(segmentationId);\n    let { volumeId } = representationData.Labelmap;\n    let segVolume;\n    if (volumeId) {\n        segVolume = cache.getVolume(volumeId);\n        if (segVolume) {\n            return segVolume;\n        }\n    }\n    const { imageIds: labelmapImageIds } = representationData.Labelmap;\n    volumeId = cache.generateVolumeId(labelmapImageIds);\n    if (!labelmapImageIds || labelmapImageIds.length === 1) {\n        return;\n    }\n    const isValidVolume = utilities.isValidVolume(labelmapImageIds);\n    if (!isValidVolume) {\n        return;\n    }\n    segVolume = volumeLoader.createAndCacheVolumeFromImagesSync(volumeId, labelmapImageIds);\n    return segVolume;\n}\nexport default getOrCreateSegmentationVolume;\n","import { cache } from '@cornerstonejs/core';\nexport function getReferenceVolumeForSegmentationVolume(segmentationVolumeId) {\n    const segmentationVolume = cache.getVolume(segmentationVolumeId);\n    if (!segmentationVolume) {\n        return null;\n    }\n    const referencedVolumeId = segmentationVolume.referencedVolumeId;\n    let imageVolume;\n    if (referencedVolumeId) {\n        imageVolume = cache.getVolume(referencedVolumeId);\n    }\n    else {\n        const imageIds = segmentationVolume.imageIds;\n        const image = cache.getImage(imageIds[0]);\n        const referencedImageId = image.referencedImageId;\n        const volumeInfo = cache.getVolumeContainingImageId(referencedImageId);\n        imageVolume = volumeInfo?.volume;\n    }\n    return imageVolume;\n}\n","import { BaseVolumeViewport, cache, utilities } from '@cornerstonejs/core';\nimport { getSegmentation, getCurrentLabelmapImageIdForViewport, } from '../../stateManagement/segmentation/segmentationState';\nimport { getLabelmapActorEntry } from '../../stateManagement/segmentation/helpers';\nexport function getSegmentIndexAtLabelmapBorder(segmentationId, worldPoint, { viewport, searchRadius }) {\n    const segmentation = getSegmentation(segmentationId);\n    const labelmapData = segmentation.representationData.Labelmap;\n    if (viewport instanceof BaseVolumeViewport) {\n        const { volumeId } = labelmapData;\n        const segmentationVolume = cache.getVolume(volumeId);\n        if (!segmentationVolume) {\n            return;\n        }\n        const voxelManager = segmentationVolume.voxelManager;\n        const imageData = segmentationVolume.imageData;\n        const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n        const segmentIndex = voxelManager.getAtIJK(indexIJK[0], indexIJK[1], indexIJK[2]);\n        const canvasPoint = viewport.worldToCanvas(worldPoint);\n        const onEdge = isSegmentOnEdgeCanvas(canvasPoint, segmentIndex, viewport, imageData, searchRadius);\n        return onEdge ? segmentIndex : undefined;\n    }\n    const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n    const image = cache.getImage(segmentationImageId);\n    if (!image) {\n        return;\n    }\n    const segmentationActorEntry = getLabelmapActorEntry(viewport.id, segmentationId);\n    const imageData = segmentationActorEntry?.actor.getMapper().getInputData();\n    const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n    const dimensions = imageData.getDimensions();\n    const voxelManager = (imageData.voxelManager ||\n        utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions,\n            scalarData: imageData.getPointData().getScalars().getData(),\n        }));\n    const segmentIndex = voxelManager.getAtIJKPoint(indexIJK);\n    const onEdge = isSegmentOnEdgeIJK(indexIJK, dimensions, voxelManager, segmentIndex);\n    return onEdge ? segmentIndex : undefined;\n}\nfunction isSegmentOnEdge(getNeighborIndex, segmentIndex, searchRadius = 1) {\n    const neighborRange = Array.from({ length: 2 * searchRadius + 1 }, (_, i) => i - searchRadius);\n    for (const deltaI of neighborRange) {\n        for (const deltaJ of neighborRange) {\n            for (const deltaK of neighborRange) {\n                if (deltaI === 0 && deltaJ === 0 && deltaK === 0) {\n                    continue;\n                }\n                const neighborIndex = getNeighborIndex(deltaI, deltaJ, deltaK);\n                if (neighborIndex !== undefined && segmentIndex !== neighborIndex) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nfunction isSegmentOnEdgeIJK(indexIJK, dimensions, voxelManager, segmentIndex, searchRadius) {\n    const getNeighborIndex = (deltaI, deltaJ, deltaK) => {\n        const neighborIJK = [\n            indexIJK[0] + deltaI,\n            indexIJK[1] + deltaJ,\n            indexIJK[2] + deltaK,\n        ];\n        return voxelManager.getAtIJK(neighborIJK[0], neighborIJK[1], neighborIJK[2]);\n    };\n    return isSegmentOnEdge(getNeighborIndex, segmentIndex, searchRadius);\n}\nfunction isSegmentOnEdgeCanvas(canvasPoint, segmentIndex, viewport, imageData, searchRadius) {\n    const getNeighborIndex = (deltaI, deltaJ) => {\n        const neighborCanvas = [canvasPoint[0] + deltaI, canvasPoint[1] + deltaJ];\n        const worldPoint = viewport.canvasToWorld(neighborCanvas);\n        const voxelManager = imageData.get('voxelManager').voxelManager;\n        const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n        return voxelManager.getAtIJK(indexIJK[0], indexIJK[1], indexIJK[2]);\n    };\n    return isSegmentOnEdge(getNeighborIndex, segmentIndex, searchRadius);\n}\n","import { BaseVolumeViewport, cache, utilities } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../enums';\nimport { getSegmentation, getCurrentLabelmapImageIdsForViewport, } from '../../stateManagement/segmentation/segmentationState';\nimport { getAnnotation } from '../../stateManagement';\nimport { isPointInsidePolyline3D } from '../math/polyline';\nimport { getLabelmapActorEntry } from '../../stateManagement/segmentation/helpers/getSegmentationActor';\nexport function getSegmentIndexAtWorldPoint(segmentationId, worldPoint, options = {}) {\n    const segmentation = getSegmentation(segmentationId);\n    const representationData = segmentation.representationData;\n    const desiredRepresentation = options?.representationType ?? Object.keys(representationData)[0];\n    if (!desiredRepresentation) {\n        throw new Error(`Segmentation ${segmentationId} does not have any representations`);\n    }\n    switch (desiredRepresentation) {\n        case SegmentationRepresentations.Labelmap:\n            return getSegmentIndexAtWorldForLabelmap(segmentation, worldPoint, options);\n        case SegmentationRepresentations.Contour:\n            return getSegmentIndexAtWorldForContour(segmentation, worldPoint, options);\n        default:\n            return;\n    }\n}\nexport function getSegmentIndexAtWorldForLabelmap(segmentation, worldPoint, { viewport }) {\n    const labelmapData = segmentation.representationData.Labelmap;\n    if (viewport instanceof BaseVolumeViewport) {\n        const { volumeId } = labelmapData;\n        const segmentationVolume = cache.getVolume(volumeId);\n        if (!segmentationVolume) {\n            return;\n        }\n        const segmentIndex = segmentationVolume.imageData.getScalarValueFromWorld(worldPoint);\n        return segmentIndex;\n    }\n    const segmentationImageIds = getCurrentLabelmapImageIdsForViewport(viewport.id, segmentation.segmentationId);\n    if (segmentationImageIds.length > 1) {\n        console.warn('Segment selection for labelmaps with multiple imageIds in stack viewports is not supported yet.');\n        return;\n    }\n    const segmentationImageId = segmentationImageIds[0];\n    const image = cache.getImage(segmentationImageId);\n    if (!image) {\n        return;\n    }\n    const segmentationActorEntry = getLabelmapActorEntry(viewport.id, segmentation.segmentationId);\n    const imageData = segmentationActorEntry?.actor.getMapper().getInputData();\n    const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n    const dimensions = imageData.getDimensions();\n    const voxelManager = (imageData.voxelManager ||\n        utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions,\n            scalarData: imageData.getPointData().getScalars().getData(),\n        }));\n    const segmentIndex = voxelManager.getAtIJKPoint(indexIJK);\n    return segmentIndex;\n}\nexport function getSegmentIndexAtWorldForContour(segmentation, worldPoint, { viewport }) {\n    const contourData = segmentation.representationData.Contour;\n    const segmentIndices = Array.from(contourData.annotationUIDsMap.keys());\n    const { viewPlaneNormal } = viewport.getCamera();\n    for (const segmentIndex of segmentIndices) {\n        const annotationsSet = contourData.annotationUIDsMap.get(segmentIndex);\n        if (!annotationsSet) {\n            continue;\n        }\n        for (const annotationUID of annotationsSet) {\n            const annotation = getAnnotation(annotationUID);\n            if (!annotation) {\n                continue;\n            }\n            const { polyline } = annotation.data.contour;\n            if (!utilities.isEqual(viewPlaneNormal, annotation.metadata.viewPlaneNormal)) {\n                continue;\n            }\n            if (isPointInsidePolyline3D(worldPoint, polyline)) {\n                return Number(segmentIndex);\n            }\n        }\n    }\n}\n","import { getWebWorkerManager } from '@cornerstonejs/core';\nimport { WorkerTypes } from '../../enums';\nimport { registerComputeWorker } from '../registerComputeWorker';\nimport { triggerWorkerProgress, getSegmentationDataForWorker, prepareVolumeStrategyDataForWorker, prepareStackDataForWorker, } from './utilsForWorker';\nexport async function getSegmentLargestBidirectional({ segmentationId, segmentIndices, mode = 'individual', }) {\n    registerComputeWorker();\n    triggerWorkerProgress(WorkerTypes.COMPUTE_LARGEST_BIDIRECTIONAL, 0);\n    const segData = getSegmentationDataForWorker(segmentationId, segmentIndices);\n    if (!segData) {\n        return;\n    }\n    const { operationData, segImageIds, reconstructableVolume, indices } = segData;\n    const bidirectionalData = reconstructableVolume\n        ? await calculateVolumeBidirectional({\n            operationData,\n            indices,\n            mode,\n        })\n        : await calculateStackBidirectional({\n            segImageIds,\n            indices,\n            mode,\n        });\n    triggerWorkerProgress(WorkerTypes.COMPUTE_LARGEST_BIDIRECTIONAL, 100);\n    return bidirectionalData;\n}\nasync function calculateVolumeBidirectional({ operationData, indices, mode }) {\n    const strategyData = prepareVolumeStrategyDataForWorker(operationData);\n    const { segmentationVoxelManager, segmentationImageData } = strategyData;\n    const segmentationScalarData = segmentationVoxelManager.getCompleteScalarDataArray();\n    const segmentationInfo = {\n        scalarData: segmentationScalarData,\n        dimensions: segmentationImageData.getDimensions(),\n        spacing: segmentationImageData.getSpacing(),\n        origin: segmentationImageData.getOrigin(),\n        direction: segmentationImageData.getDirection(),\n    };\n    const bidirectionalData = await getWebWorkerManager().executeTask('compute', 'getSegmentLargestBidirectionalInternal', {\n        segmentationInfo,\n        indices,\n        mode,\n    });\n    return bidirectionalData;\n}\nasync function calculateStackBidirectional({ segImageIds, indices, mode }) {\n    const { segmentationInfo } = prepareStackDataForWorker(segImageIds);\n    const bidirectionalData = await getWebWorkerManager().executeTask('compute', 'getSegmentLargestBidirectionalInternal', {\n        segmentationInfo,\n        indices,\n        mode,\n        isStack: true,\n    });\n    return bidirectionalData;\n}\n","import { utilities, getWebWorkerManager } from '@cornerstonejs/core';\nimport { triggerWorkerProgress, getSegmentationDataForWorker, prepareVolumeStrategyDataForWorker, prepareStackDataForWorker, getImageReferenceInfo, } from './utilsForWorker';\nimport { getPixelValueUnitsImageId } from '../getPixelValueUnits';\nimport VolumetricCalculator from './VolumetricCalculator';\nimport { WorkerTypes } from '../../enums';\nimport { registerComputeWorker } from '../registerComputeWorker';\nconst radiusForVol1 = Math.pow((3 * 1000) / (4 * Math.PI), 1 / 3);\nasync function getStatistics({ segmentationId, segmentIndices, mode = 'collective', }) {\n    registerComputeWorker();\n    triggerWorkerProgress(WorkerTypes.COMPUTE_STATISTICS, 0);\n    const segData = getSegmentationDataForWorker(segmentationId, segmentIndices);\n    if (!segData) {\n        return;\n    }\n    const { operationData, segVolumeId, segImageIds, reconstructableVolume, indices, } = segData;\n    const { refImageId, modalityUnitOptions } = getImageReferenceInfo(segVolumeId, segImageIds);\n    const unit = getPixelValueUnitsImageId(refImageId, modalityUnitOptions);\n    const stats = reconstructableVolume\n        ? await calculateVolumeStatistics({\n            operationData,\n            indices,\n            unit,\n            mode,\n        })\n        : await calculateStackStatistics({\n            segImageIds,\n            indices,\n            unit,\n            mode,\n        });\n    return stats;\n}\nasync function calculateVolumeStatistics({ operationData, indices, unit, mode, }) {\n    const strategyData = prepareVolumeStrategyDataForWorker(operationData);\n    const { segmentationVoxelManager, imageVoxelManager, segmentationImageData, imageData, } = strategyData;\n    if (!segmentationVoxelManager || !segmentationImageData) {\n        return;\n    }\n    const spacing = segmentationImageData.getSpacing();\n    const { boundsIJK: boundsOrig } = segmentationVoxelManager;\n    if (!boundsOrig) {\n        return VolumetricCalculator.getStatistics({ spacing });\n    }\n    const segmentationScalarData = segmentationVoxelManager.getCompleteScalarDataArray();\n    const segmentationInfo = {\n        scalarData: segmentationScalarData,\n        dimensions: segmentationImageData.getDimensions(),\n        spacing: segmentationImageData.getSpacing(),\n        origin: segmentationImageData.getOrigin(),\n        direction: segmentationImageData.getDirection(),\n    };\n    const imageInfo = {\n        scalarData: imageVoxelManager.getCompleteScalarDataArray(),\n        dimensions: imageData.getDimensions(),\n        spacing: imageData.getSpacing(),\n        origin: imageData.getOrigin(),\n        direction: imageData.getDirection(),\n    };\n    if (!imageInfo.scalarData?.length) {\n        return;\n    }\n    const stats = await getWebWorkerManager().executeTask('compute', 'calculateSegmentsStatisticsVolume', {\n        segmentationInfo,\n        imageInfo,\n        indices,\n        unit,\n        mode,\n    });\n    triggerWorkerProgress(WorkerTypes.COMPUTE_STATISTICS, 100);\n    if (mode === 'collective') {\n        return processSegmentationStatistics({\n            stats,\n            unit,\n            spacing,\n            segmentationImageData,\n            imageVoxelManager,\n        });\n    }\n    else {\n        const finalStats = {};\n        Object.entries(stats).forEach(([segmentIndex, stat]) => {\n            finalStats[segmentIndex] = processSegmentationStatistics({\n                stats: stat,\n                unit,\n                spacing,\n                segmentationImageData,\n                imageVoxelManager,\n            });\n        });\n        return finalStats;\n    }\n}\nconst updateStatsArray = (stats, newStat) => {\n    if (!stats.array) {\n        return;\n    }\n    const existingIndex = stats.array.findIndex((stat) => stat.name === newStat.name);\n    if (existingIndex !== -1) {\n        stats.array[existingIndex] = newStat;\n    }\n    else {\n        stats.array.push(newStat);\n    }\n};\nconst processSegmentationStatistics = ({ stats, unit, spacing, segmentationImageData, imageVoxelManager, }) => {\n    stats.mean.unit = unit;\n    stats.max.unit = unit;\n    stats.min.unit = unit;\n    if (unit !== 'SUV') {\n        return stats;\n    }\n    const radiusIJK = spacing.map((s) => Math.max(1, Math.round((1.1 * radiusForVol1) / s)));\n    for (const testMax of stats.maxIJKs) {\n        const testStats = getSphereStats(testMax, radiusIJK, segmentationImageData, imageVoxelManager, spacing);\n        if (!testStats) {\n            continue;\n        }\n        const { mean } = testStats;\n        if (!stats.peakValue || stats.peakValue.value <= mean.value) {\n            stats.peakValue = {\n                name: 'peakValue',\n                label: 'Peak Value',\n                value: mean.value,\n                unit,\n            };\n            stats.peakPoint = {\n                name: 'peakLPS',\n                label: 'Peak SUV Point',\n                value: testMax.pointLPS ? [...testMax.pointLPS] : null,\n                unit: null,\n            };\n            updateStatsArray(stats, stats.peakValue);\n            updateStatsArray(stats, stats.peakPoint);\n        }\n    }\n    if (stats.volume && stats.mean) {\n        const mtv = stats.volume.value;\n        const suvMean = stats.mean.value;\n        stats.lesionGlycolysis = {\n            name: 'lesionGlycolysis',\n            label: 'Lesion Glycolysis',\n            value: mtv * suvMean,\n            unit: `${stats.volume.unit}·${unit}`,\n        };\n        updateStatsArray(stats, stats.lesionGlycolysis);\n    }\n    return stats;\n};\nasync function calculateStackStatistics({ segImageIds, indices, unit, mode }) {\n    triggerWorkerProgress(WorkerTypes.COMPUTE_STATISTICS, 0);\n    const { segmentationInfo, imageInfo } = prepareStackDataForWorker(segImageIds);\n    const stats = await getWebWorkerManager().executeTask('compute', 'calculateSegmentsStatisticsStack', {\n        segmentationInfo,\n        imageInfo,\n        indices,\n        mode,\n    });\n    triggerWorkerProgress(WorkerTypes.COMPUTE_STATISTICS, 100);\n    const spacing = segmentationInfo[0].spacing;\n    const segmentationImageData = segmentationInfo[0];\n    const imageVoxelManager = imageInfo[0].voxelManager;\n    if (mode === 'collective') {\n        return processSegmentationStatistics({\n            stats,\n            unit,\n            spacing,\n            segmentationImageData,\n            imageVoxelManager,\n        });\n    }\n    else {\n        const finalStats = {};\n        Object.entries(stats).forEach(([segmentIndex, stat]) => {\n            finalStats[segmentIndex] = processSegmentationStatistics({\n                stats: stat,\n                unit,\n                spacing,\n                segmentationImageData,\n                imageVoxelManager,\n            });\n        });\n        return finalStats;\n    }\n}\nfunction getSphereStats(testMax, radiusIJK, segData, imageVoxels, spacing) {\n    const { pointIJK: centerIJK, pointLPS: centerLPS } = testMax;\n    if (!centerIJK) {\n        return;\n    }\n    const boundsIJK = centerIJK.map((ijk, idx) => [\n        ijk - radiusIJK[idx],\n        ijk + radiusIJK[idx],\n    ]);\n    const testFunction = (_pointLPS, pointIJK) => {\n        const i = (pointIJK[0] - centerIJK[0]) / radiusIJK[0];\n        const j = (pointIJK[1] - centerIJK[1]) / radiusIJK[1];\n        const k = (pointIJK[2] - centerIJK[2]) / radiusIJK[2];\n        const radius = i * i + j * j + k * k;\n        return radius <= 1;\n    };\n    const statsFunction = ({ pointIJK, pointLPS }) => {\n        const value = imageVoxels.getAtIJKPoint(pointIJK);\n        if (value === undefined) {\n            return;\n        }\n        VolumetricCalculator.statsCallback({ value, pointLPS, pointIJK });\n    };\n    VolumetricCalculator.statsInit({ storePointData: false });\n    utilities.pointInShapeCallback(segData, {\n        pointInShapeFn: testFunction,\n        callback: statsFunction,\n        boundsIJK,\n    });\n    return VolumetricCalculator.getStatistics({ spacing });\n}\nexport default getStatistics;\n","import { cache } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../enums';\nimport { getCachedSegmentIndices, setCachedSegmentIndices } from './utilities';\nimport { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nfunction getUniqueSegmentIndices(segmentationId) {\n    const cachedResult = getCachedSegmentIndices(segmentationId);\n    if (cachedResult) {\n        return cachedResult;\n    }\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation found for segmentationId ${segmentationId}`);\n    }\n    let indices;\n    if (segmentation.representationData.Labelmap) {\n        indices = handleLabelmapSegmentation(segmentation, segmentationId);\n    }\n    else if (segmentation.representationData.Contour) {\n        indices = handleContourSegmentation(segmentation);\n    }\n    else if (segmentation.representationData.Surface) {\n        indices = handleSurfaceSegmentation(segmentation);\n    }\n    else {\n        throw new Error(`Unsupported segmentation type: ${segmentation.representationData}`);\n    }\n    setCachedSegmentIndices(segmentationId, indices);\n    return indices;\n}\nfunction handleLabelmapSegmentation(segmentation, segmentationId) {\n    const labelmapData = segmentation.representationData[SegmentationRepresentations.Labelmap];\n    const keySet = new Set();\n    if (labelmapData.imageIds) {\n        addImageSegmentIndices(keySet, labelmapData.imageIds);\n    }\n    else {\n        addVolumeSegmentIndices(keySet, segmentationId);\n    }\n    return Array.from(keySet)\n        .map(Number)\n        .sort((a, b) => a - b);\n}\nfunction addVolumeSegmentIndices(keySet, segmentationId) {\n    const volume = cache.getVolume(segmentationId);\n    volume.voxelManager.forEach(({ value }) => {\n        if (value !== 0) {\n            keySet.add(value);\n        }\n    });\n}\nfunction addImageSegmentIndices(keySet, imageIds) {\n    imageIds.forEach((segmentationImageId) => {\n        const image = cache.getImage(segmentationImageId);\n        const scalarData = image.voxelManager.getScalarData();\n        scalarData.forEach((segmentIndex) => {\n            if (segmentIndex !== 0) {\n                keySet.add(segmentIndex);\n            }\n        });\n    });\n}\nfunction handleContourSegmentation(segmentation) {\n    const { annotationUIDsMap, geometryIds } = segmentation.representationData.Contour || {};\n    if (!geometryIds) {\n        throw new Error(`No geometryIds found for segmentationId ${segmentation.segmentationId}`);\n    }\n    const indices = new Set([...annotationUIDsMap.keys()]);\n    geometryIds.forEach((geometryId) => {\n        const geometry = cache.getGeometry(geometryId);\n        indices.add(geometry.data.segmentIndex);\n    });\n    return Array.from(indices).sort((a, b) => a - b);\n}\nfunction handleSurfaceSegmentation(segmentation) {\n    const geometryIds = segmentation.representationData.Surface?.geometryIds ?? [];\n    return Array.from(geometryIds.keys())\n        .map(Number)\n        .sort((a, b) => a - b);\n}\nexport { getUniqueSegmentIndices };\n","const shader = `\nconst MAX_STRENGTH = 65535f;\n\n// Workgroup size - X*Y*Z must be multiple of 32 for better performance\noverride workGroupSizeX = 1u;\noverride workGroupSizeY = 1u;\noverride workGroupSizeZ = 1u;\n\n// Compare the current voxel to neighbors using a 9x9x9 window\noverride windowSize = 9i;\n\nstruct Params {\n  size: vec3u,\n  iteration: u32,\n}\n\n// New structure to track bounds of modified voxels\nstruct Bounds {\n  minX: atomic<i32>,\n  minY: atomic<i32>,\n  minZ: atomic<i32>,\n  maxX: atomic<i32>,\n  maxY: atomic<i32>,\n  maxZ: atomic<i32>,\n}\n\n@group(0) @binding(0) var<uniform> params: Params;\n@group(0) @binding(1) var<storage> volumePixelData: array<f32>;\n@group(0) @binding(2) var<storage, read_write> labelmap: array<u32>;\n@group(0) @binding(3) var<storage, read_write> strengthData: array<f32>;\n@group(0) @binding(4) var<storage> prevLabelmap: array<u32>;\n@group(0) @binding(5) var<storage> prevStrengthData: array<f32>;\n@group(0) @binding(6) var<storage, read_write> updatedVoxelsCounter: array<atomic<u32>>;\n@group(0) @binding(7) var<storage, read_write> modifiedBounds: Bounds;\n\nfn getPixelIndex(ijkPos: vec3u) -> u32 {\n  let numPixelsPerSlice = params.size.x * params.size.y;\n  return ijkPos.x + ijkPos.y * params.size.x + ijkPos.z * numPixelsPerSlice;\n}\n\nfn updateBounds(position: vec3i) {\n  // Atomically update min bounds (use min operation)\n  let oldMinX = atomicMin(&modifiedBounds.minX, position.x);\n  let oldMinY = atomicMin(&modifiedBounds.minY, position.y);\n  let oldMinZ = atomicMin(&modifiedBounds.minZ, position.z);\n\n  // Atomically update max bounds (use max operation)\n  let oldMaxX = atomicMax(&modifiedBounds.maxX, position.x);\n  let oldMaxY = atomicMax(&modifiedBounds.maxY, position.y);\n  let oldMaxZ = atomicMax(&modifiedBounds.maxZ, position.z);\n}\n\n@compute @workgroup_size(workGroupSizeX, workGroupSizeY, workGroupSizeZ)\nfn main(\n  @builtin(global_invocation_id) globalId: vec3u,\n) {\n  // Make sure it will not get out of bounds for volume with sizes that\n  // are not multiple of workGroupSize\n  if (\n    globalId.x >= params.size.x ||\n    globalId.y >= params.size.y ||\n    globalId.z >= params.size.z\n  ) {\n    return;\n  }\n\n  // Initialize bounds for the first iteration\n  if (params.iteration == 0 && globalId.x == 0 && globalId.y == 0 && globalId.z == 0) {\n    // Initialize to opposite extremes to ensure any update will improve the bounds\n    atomicStore(&modifiedBounds.minX, i32(params.size.x));\n    atomicStore(&modifiedBounds.minY, i32(params.size.y));\n    atomicStore(&modifiedBounds.minZ, i32(params.size.z));\n    atomicStore(&modifiedBounds.maxX, -1);\n    atomicStore(&modifiedBounds.maxY, -1);\n    atomicStore(&modifiedBounds.maxZ, -1);\n  }\n\n  let currentCoord = vec3i(globalId);\n  let currentPixelIndex = getPixelIndex(globalId);\n\n  let numPixels = arrayLength(&volumePixelData);\n  let currentPixelValue = volumePixelData[currentPixelIndex];\n\n  if (params.iteration == 0) {\n    // All non-zero initial labels are given maximum strength\n    strengthData[currentPixelIndex] = select(MAX_STRENGTH, 0., labelmap[currentPixelIndex] == 0);\n\n    // Update bounds for non-zero initial labels\n    if (labelmap[currentPixelIndex] != 0) {\n      updateBounds(currentCoord);\n    }\n    return;\n  }\n\n  // It should at least copy the values from previous state\n  var newLabel = prevLabelmap[currentPixelIndex];\n  var newStrength = prevStrengthData[currentPixelIndex];\n\n  let window = i32(ceil(f32(windowSize - 1) * .5));\n  let minWindow = -1i * window;\n  let maxWindow = 1i * window;\n\n  for (var k = minWindow; k <= maxWindow; k++) {\n    for (var j = minWindow; j <= maxWindow; j++) {\n      for (var i = minWindow; i <= maxWindow; i++) {\n        // Skip current voxel\n        if (i == 0 && j == 0 && k == 0) {\n          continue;\n        }\n\n        let neighborCoord = currentCoord + vec3i(i, j, k);\n\n        //  Boundary conditions. Do not grow outside of the volume\n        if (\n          neighborCoord.x < 0i || neighborCoord.x >= i32(params.size.x) ||\n          neighborCoord.y < 0i || neighborCoord.y >= i32(params.size.y) ||\n          neighborCoord.z < 0i || neighborCoord.z >= i32(params.size.z)\n        ) {\n          continue;\n        }\n\n        let neighborIndex = getPixelIndex(vec3u(neighborCoord));\n        let neighborPixelValue = volumePixelData[neighborIndex];\n        let prevNeighborStrength = prevStrengthData[neighborIndex];\n        let strengthCost = abs(neighborPixelValue - currentPixelValue);\n        let takeoverStrength = prevNeighborStrength - strengthCost;\n\n        if (takeoverStrength > newStrength) {\n          newLabel = prevLabelmap[neighborIndex];\n          newStrength = takeoverStrength;\n        }\n      }\n    }\n  }\n\n  if (labelmap[currentPixelIndex] != newLabel) {\n    atomicAdd(&updatedVoxelsCounter[params.iteration], 1u);\n\n    // Update bounds for modified voxels\n    updateBounds(currentCoord);\n  }\n\n  labelmap[currentPixelIndex] = newLabel;\n  strengthData[currentPixelIndex] = newStrength;\n}\n`;\nexport default shader;\n","import { cache } from '@cornerstonejs/core';\nimport shaderCode from './growCutShader';\nconst GB = 1024 * 1024 * 1024;\nconst WEBGPU_MEMORY_LIMIT = 1.99 * GB;\nconst DEFAULT_GROWCUT_OPTIONS = {\n    windowSize: 3,\n    maxProcessingTime: 30000,\n    inspection: {\n        numCyclesInterval: 5,\n        numCyclesBelowThreshold: 3,\n        threshold: 1e-4,\n    },\n};\nasync function runGrowCut(referenceVolumeId, labelmapVolumeId, options = DEFAULT_GROWCUT_OPTIONS) {\n    const workGroupSize = [8, 8, 4];\n    const { windowSize, maxProcessingTime } = Object.assign({}, DEFAULT_GROWCUT_OPTIONS, options);\n    const inspection = Object.assign({}, DEFAULT_GROWCUT_OPTIONS.inspection, options.inspection);\n    const volume = cache.getVolume(referenceVolumeId);\n    const labelmap = cache.getVolume(labelmapVolumeId);\n    const [columns, rows, numSlices] = volume.dimensions;\n    if (labelmap.dimensions[0] !== columns ||\n        labelmap.dimensions[1] !== rows ||\n        labelmap.dimensions[2] !== numSlices) {\n        throw new Error('Volume and labelmap must have the same size');\n    }\n    let numIterations = Math.floor(Math.sqrt(rows ** 2 + columns ** 2 + numSlices ** 2) / 2);\n    numIterations = Math.min(numIterations, 500);\n    const labelmapData = labelmap.voxelManager.getCompleteScalarDataArray();\n    let volumePixelData = volume.voxelManager.getCompleteScalarDataArray();\n    if (!(volumePixelData instanceof Float32Array)) {\n        volumePixelData = new Float32Array(volumePixelData);\n    }\n    const requiredLimits = {\n        maxStorageBufferBindingSize: WEBGPU_MEMORY_LIMIT,\n        maxBufferSize: WEBGPU_MEMORY_LIMIT,\n    };\n    const adapter = await navigator.gpu?.requestAdapter();\n    const device = await adapter.requestDevice({ requiredLimits });\n    const BUFFER_SIZE = volumePixelData.byteLength;\n    const UPDATED_VOXELS_COUNTER_BUFFER_SIZE = numIterations * Uint32Array.BYTES_PER_ELEMENT;\n    const BOUNDS_BUFFER_SIZE = 6 * Int32Array.BYTES_PER_ELEMENT;\n    const shaderModule = device.createShaderModule({\n        code: shaderCode,\n    });\n    const numIterationIndex = 3;\n    const paramsArrayValues = new Uint32Array([\n        columns,\n        rows,\n        numSlices,\n        0,\n    ]);\n    const gpuParamsBuffer = device.createBuffer({\n        size: paramsArrayValues.byteLength,\n        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n    });\n    const gpuVolumePixelDataBuffer = device.createBuffer({\n        size: BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n    });\n    device.queue.writeBuffer(gpuVolumePixelDataBuffer, 0, volumePixelData);\n    const gpuLabelmapBuffers = [0, 1].map(() => device.createBuffer({\n        size: BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE |\n            GPUBufferUsage.COPY_SRC |\n            GPUBufferUsage.COPY_DST,\n    }));\n    device.queue.writeBuffer(gpuLabelmapBuffers[0], 0, new Uint32Array(labelmapData));\n    const gpuStrengthBuffers = [0, 1].map(() => {\n        const strengthBuffer = device.createBuffer({\n            size: BUFFER_SIZE,\n            usage: GPUBufferUsage.STORAGE |\n                GPUBufferUsage.COPY_SRC |\n                GPUBufferUsage.COPY_DST,\n        });\n        return strengthBuffer;\n    });\n    const gpuCounterBuffer = device.createBuffer({\n        size: UPDATED_VOXELS_COUNTER_BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE |\n            GPUBufferUsage.COPY_SRC |\n            GPUBufferUsage.COPY_DST,\n    });\n    const gpuBoundsBuffer = device.createBuffer({\n        size: BOUNDS_BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE |\n            GPUBufferUsage.COPY_SRC |\n            GPUBufferUsage.COPY_DST,\n    });\n    const initialBounds = new Int32Array([\n        columns,\n        rows,\n        numSlices,\n        -1,\n        -1,\n        -1,\n    ]);\n    device.queue.writeBuffer(gpuBoundsBuffer, 0, initialBounds);\n    const bindGroupLayout = device.createBindGroupLayout({\n        entries: [\n            {\n                binding: 0,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'uniform',\n                },\n            },\n            {\n                binding: 1,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'read-only-storage',\n                },\n            },\n            {\n                binding: 2,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n            {\n                binding: 3,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n            {\n                binding: 4,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'read-only-storage',\n                },\n            },\n            {\n                binding: 5,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'read-only-storage',\n                },\n            },\n            {\n                binding: 6,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n            {\n                binding: 7,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n        ],\n    });\n    const bindGroups = [0, 1].map((i) => {\n        const outputLabelmapBuffer = gpuLabelmapBuffers[i];\n        const outputStrengthBuffer = gpuStrengthBuffers[i];\n        const previouLabelmapBuffer = gpuLabelmapBuffers[(i + 1) % 2];\n        const previousStrengthBuffer = gpuStrengthBuffers[(i + 1) % 2];\n        return device.createBindGroup({\n            layout: bindGroupLayout,\n            entries: [\n                {\n                    binding: 0,\n                    resource: {\n                        buffer: gpuParamsBuffer,\n                    },\n                },\n                {\n                    binding: 1,\n                    resource: {\n                        buffer: gpuVolumePixelDataBuffer,\n                    },\n                },\n                {\n                    binding: 2,\n                    resource: {\n                        buffer: outputLabelmapBuffer,\n                    },\n                },\n                {\n                    binding: 3,\n                    resource: {\n                        buffer: outputStrengthBuffer,\n                    },\n                },\n                {\n                    binding: 4,\n                    resource: {\n                        buffer: previouLabelmapBuffer,\n                    },\n                },\n                {\n                    binding: 5,\n                    resource: {\n                        buffer: previousStrengthBuffer,\n                    },\n                },\n                {\n                    binding: 6,\n                    resource: {\n                        buffer: gpuCounterBuffer,\n                    },\n                },\n                {\n                    binding: 7,\n                    resource: {\n                        buffer: gpuBoundsBuffer,\n                    },\n                },\n            ],\n        });\n    });\n    const pipeline = device.createComputePipeline({\n        layout: device.createPipelineLayout({\n            bindGroupLayouts: [bindGroupLayout],\n        }),\n        compute: {\n            module: shaderModule,\n            entryPoint: 'main',\n            constants: {\n                workGroupSizeX: workGroupSize[0],\n                workGroupSizeY: workGroupSize[1],\n                workGroupSizeZ: workGroupSize[2],\n                windowSize,\n            },\n        },\n    });\n    const numWorkGroups = [\n        Math.ceil(columns / workGroupSize[0]),\n        Math.ceil(rows / workGroupSize[1]),\n        Math.ceil(numSlices / workGroupSize[2]),\n    ];\n    const gpuUpdatedVoxelsCounterStagingBuffer = device.createBuffer({\n        size: UPDATED_VOXELS_COUNTER_BUFFER_SIZE,\n        usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n    const limitProcessingTime = maxProcessingTime\n        ? performance.now() + maxProcessingTime\n        : 0;\n    let currentInspectionNumCyclesInterval = inspection.numCyclesInterval;\n    let belowThresholdCounter = 0;\n    for (let i = 0; i < numIterations; i++) {\n        paramsArrayValues[numIterationIndex] = i;\n        device.queue.writeBuffer(gpuParamsBuffer, 0, paramsArrayValues);\n        const commandEncoder = device.createCommandEncoder();\n        const passEncoder = commandEncoder.beginComputePass();\n        passEncoder.setPipeline(pipeline);\n        passEncoder.setBindGroup(0, bindGroups[i % 2]);\n        passEncoder.dispatchWorkgroups(numWorkGroups[0], numWorkGroups[1], numWorkGroups[2]);\n        passEncoder.end();\n        commandEncoder.copyBufferToBuffer(gpuCounterBuffer, i * Uint32Array.BYTES_PER_ELEMENT, gpuUpdatedVoxelsCounterStagingBuffer, i * Uint32Array.BYTES_PER_ELEMENT, Uint32Array.BYTES_PER_ELEMENT);\n        device.queue.submit([commandEncoder.finish()]);\n        const inspect = i > 0 && !(i % currentInspectionNumCyclesInterval);\n        if (inspect) {\n            await gpuUpdatedVoxelsCounterStagingBuffer.mapAsync(GPUMapMode.READ, 0, UPDATED_VOXELS_COUNTER_BUFFER_SIZE);\n            const updatedVoxelsCounterResultBuffer = gpuUpdatedVoxelsCounterStagingBuffer.getMappedRange(0, UPDATED_VOXELS_COUNTER_BUFFER_SIZE);\n            const updatedVoxelsCounterBufferData = new Uint32Array(updatedVoxelsCounterResultBuffer.slice(0));\n            const updatedVoxelsRatio = updatedVoxelsCounterBufferData[i] / volumePixelData.length;\n            gpuUpdatedVoxelsCounterStagingBuffer.unmap();\n            if (i >= 1 && updatedVoxelsRatio < inspection.threshold) {\n                currentInspectionNumCyclesInterval = 1;\n                belowThresholdCounter++;\n                if (belowThresholdCounter === inspection.numCyclesBelowThreshold) {\n                    break;\n                }\n            }\n            else {\n                currentInspectionNumCyclesInterval = inspection.numCyclesInterval;\n            }\n        }\n        if (limitProcessingTime && performance.now() > limitProcessingTime) {\n            console.warn(`Exceeded processing time limit (${maxProcessingTime})ms`);\n            break;\n        }\n    }\n    const commandEncoder = device.createCommandEncoder();\n    const outputLabelmapBufferIndex = (numIterations + 1) % 2;\n    const labelmapStagingBuffer = device.createBuffer({\n        size: BUFFER_SIZE,\n        usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n    const boundsStagingBuffer = device.createBuffer({\n        size: BOUNDS_BUFFER_SIZE,\n        usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n    commandEncoder.copyBufferToBuffer(gpuLabelmapBuffers[outputLabelmapBufferIndex], 0, labelmapStagingBuffer, 0, BUFFER_SIZE);\n    commandEncoder.copyBufferToBuffer(gpuBoundsBuffer, 0, boundsStagingBuffer, 0, BOUNDS_BUFFER_SIZE);\n    device.queue.submit([commandEncoder.finish()]);\n    await labelmapStagingBuffer.mapAsync(GPUMapMode.READ, 0, BUFFER_SIZE);\n    const labelmapResultBuffer = labelmapStagingBuffer.getMappedRange(0, BUFFER_SIZE);\n    const labelmapResult = new Uint32Array(labelmapResultBuffer);\n    labelmapData.set(labelmapResult);\n    labelmapStagingBuffer.unmap();\n    await boundsStagingBuffer.mapAsync(GPUMapMode.READ, 0, BOUNDS_BUFFER_SIZE);\n    const boundsResultBuffer = boundsStagingBuffer.getMappedRange(0, BOUNDS_BUFFER_SIZE);\n    const boundsResult = new Int32Array(boundsResultBuffer.slice(0));\n    boundsStagingBuffer.unmap();\n    const minX = boundsResult[0];\n    const minY = boundsResult[1];\n    const minZ = boundsResult[2];\n    const maxX = boundsResult[3];\n    const maxY = boundsResult[4];\n    const maxZ = boundsResult[5];\n    labelmap.voxelManager.setCompleteScalarDataArray(labelmapData);\n    labelmap.voxelManager.clearBounds();\n    labelmap.voxelManager.setBounds([\n        [minX, maxX],\n        [minY, maxY],\n        [minZ, maxZ],\n    ]);\n}\nexport { runGrowCut as default, runGrowCut as run };\n","import { volumeLoader, utilities as csUtils } from '@cornerstonejs/core';\nimport { run } from './runGrowCut';\nconst POSITIVE_SEED_VALUE = 254;\nconst NEGATIVE_SEED_VALUE = 255;\nconst NEGATIVE_PIXEL_RANGE = [-Infinity, -995];\nconst POSITIVE_PIXEL_RANGE = [0, 1900];\nfunction _setNegativeSeedValues(subVolume, labelmap, options) {\n    const { negativeSeedValue = NEGATIVE_SEED_VALUE, negativePixelRange = NEGATIVE_PIXEL_RANGE, } = options;\n    const subVolPixelData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const [width, height, numSlices] = labelmap.dimensions;\n    const middleSliceIndex = Math.floor(numSlices / 2);\n    const visited = new Array(width * height).fill(false);\n    const sliceOffset = middleSliceIndex * width * height;\n    const bfs = (startX, startY) => {\n        const queue = [[startX, startY]];\n        while (queue.length) {\n            const [x, y] = queue.shift();\n            const slicePixelIndex = y * width + x;\n            if (x < 0 ||\n                x >= width ||\n                y < 0 ||\n                y >= height ||\n                visited[slicePixelIndex]) {\n                continue;\n            }\n            visited[slicePixelIndex] = true;\n            const volumeVoxelIndex = sliceOffset + slicePixelIndex;\n            const volumeVoxelValue = subVolPixelData[volumeVoxelIndex];\n            if (volumeVoxelValue < negativePixelRange[0] ||\n                volumeVoxelValue > negativePixelRange[1]) {\n                continue;\n            }\n            labelmap.voxelManager.setAtIndex(volumeVoxelIndex, negativeSeedValue);\n            queue.push([x - 1, y]);\n            queue.push([x + 1, y]);\n            queue.push([x, y - 1]);\n            queue.push([x, y + 1]);\n        }\n    };\n    const scanLine = (startX, limitX, incX, y) => {\n        for (let x = startX; x !== limitX; x += incX) {\n            const slicePixelIndex = y * width + x;\n            const volumeVoxelIndex = sliceOffset + slicePixelIndex;\n            const volumeVoxelValue = subVolPixelData[volumeVoxelIndex];\n            if (volumeVoxelValue < negativePixelRange[0] ||\n                volumeVoxelValue > negativePixelRange[1]) {\n                break;\n            }\n            if (!visited[slicePixelIndex]) {\n                bfs(x, y);\n            }\n        }\n    };\n    for (let y = 0; y < height; y++) {\n        scanLine(0, width - 1, 1, y);\n        scanLine(width - 1, 0, -1, y);\n    }\n}\nfunction _setPositiveSeedValues(subVolume, labelmap, options) {\n    const { positiveSeedValue = POSITIVE_SEED_VALUE, positivePixelRange = POSITIVE_PIXEL_RANGE, } = options;\n    const subVolPixelData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const labelmapData = labelmap.voxelManager.getCompleteScalarDataArray();\n    const [width, height, numSlices] = labelmap.dimensions;\n    const middleSliceIndex = Math.floor(numSlices / 2);\n    const startSliceIndex = Math.max(middleSliceIndex - 3, 0);\n    const stopSliceIndex = Math.max(startSliceIndex + 5, numSlices);\n    const pixelsPerSlice = width * height;\n    for (let z = startSliceIndex; z < stopSliceIndex; z++) {\n        const zOffset = z * pixelsPerSlice;\n        for (let y = 0; y < height; y++) {\n            const yOffset = y * width;\n            for (let x = 0; x < width; x++) {\n                const index = zOffset + yOffset + x;\n                const pixelValue = subVolPixelData[index];\n                const isPositiveValue = pixelValue >= positivePixelRange[0] &&\n                    pixelValue <= positivePixelRange[1];\n                if (isPositiveValue) {\n                    labelmap.voxelManager.setAtIndex(index, positiveSeedValue);\n                }\n            }\n        }\n    }\n}\nasync function _createAndCacheSegmentationSubVolumeForBoundingBox(subVolume, options) {\n    const labelmap = volumeLoader.createAndCacheDerivedLabelmapVolume(subVolume.volumeId);\n    _setPositiveSeedValues(subVolume, labelmap, options);\n    _setNegativeSeedValues(subVolume, labelmap, options);\n    return labelmap;\n}\nasync function runGrowCutForBoundingBox(referencedVolumeId, boundingBoxInfo, options) {\n    const { boundingBox } = boundingBoxInfo;\n    const { ijkTopLeft, ijkBottomRight } = boundingBox;\n    const subVolumeBoundsIJK = {\n        minX: ijkTopLeft[0],\n        maxX: ijkBottomRight[0],\n        minY: ijkTopLeft[1],\n        maxY: ijkBottomRight[1],\n        minZ: ijkTopLeft[2],\n        maxZ: ijkBottomRight[2],\n    };\n    const subVolume = csUtils.createSubVolume(referencedVolumeId, subVolumeBoundsIJK, {\n        targetBuffer: {\n            type: 'Float32Array',\n        },\n    });\n    const labelmap = await _createAndCacheSegmentationSubVolumeForBoundingBox(subVolume, options);\n    await run(subVolume.volumeId, labelmap.volumeId);\n    return labelmap;\n}\nexport { runGrowCutForBoundingBox as default, runGrowCutForBoundingBox };\n","import { quat, vec3 } from 'gl-matrix';\nimport { utilities as csUtils, cache, volumeLoader } from '@cornerstonejs/core';\nimport { run } from './runGrowCut';\nimport { getSphereBoundsInfo } from '../../getSphereBoundsInfo';\nconst { transformWorldToIndex } = csUtils;\nconst POSITIVE_SEED_VALUE = 254;\nconst NEGATIVE_SEED_VALUE = 255;\nconst POSITIVE_SEED_VARIANCE = 0.1;\nconst NEGATIVE_SEED_VARIANCE = 0.8;\nfunction _getGrowCutSphereBoundsInfo(referencedVolume, sphereBoundsInfo) {\n    const { topLeftWorld, bottomRightWorld } = sphereBoundsInfo;\n    const topLeftIJK = transformWorldToIndex(referencedVolume.imageData, topLeftWorld);\n    const bottomRightIJK = transformWorldToIndex(referencedVolume.imageData, bottomRightWorld);\n    return {\n        ...sphereBoundsInfo,\n        topLeftIJK,\n        bottomRightIJK,\n    };\n}\nfunction _getSphereBoundsInfo(referencedVolume, sphereInfo) {\n    const direction = referencedVolume.imageData.getDirection();\n    const vecColumn = vec3.fromValues(direction[3], direction[4], direction[5]);\n    const { center: sphereCenterPoint, radius: sphereRadius } = sphereInfo;\n    const refVolImageData = referencedVolume.imageData;\n    const topCirclePoint = vec3.scaleAndAdd(vec3.create(), sphereCenterPoint, vecColumn, -sphereRadius);\n    const bottomCirclePoint = vec3.scaleAndAdd(vec3.create(), sphereCenterPoint, vecColumn, sphereRadius);\n    const sphereBoundsInfo = getSphereBoundsInfo([bottomCirclePoint, topCirclePoint], refVolImageData);\n    return _getGrowCutSphereBoundsInfo(referencedVolume, sphereBoundsInfo);\n}\nfunction _createSubVolumeFromSphere(referencedVolume, sphereInfo, viewport) {\n    const refVolImageData = referencedVolume.imageData;\n    const camera = viewport.getCamera();\n    const { ijkVecRowDir, ijkVecColDir } = csUtils.getVolumeDirectionVectors(refVolImageData, camera);\n    const obliqueView = [ijkVecRowDir, ijkVecColDir].some((vec) => !csUtils.isEqual(Math.abs(vec[0]), 1) &&\n        !csUtils.isEqual(Math.abs(vec[1]), 1) &&\n        !csUtils.isEqual(Math.abs(vec[2]), 1));\n    if (obliqueView) {\n        console.warn('Oblique view is not supported!');\n        return;\n    }\n    const { boundsIJK: sphereBoundsIJK } = _getSphereBoundsInfo(referencedVolume, sphereInfo);\n    const subVolumeBoundsIJK = {\n        minX: sphereBoundsIJK[0][0],\n        maxX: sphereBoundsIJK[0][1] + 1,\n        minY: sphereBoundsIJK[1][0],\n        maxY: sphereBoundsIJK[1][1] + 1,\n        minZ: sphereBoundsIJK[2][0],\n        maxZ: sphereBoundsIJK[2][1] + 1,\n    };\n    return csUtils.createSubVolume(referencedVolume.volumeId, subVolumeBoundsIJK, {\n        targetBuffer: {\n            type: 'Float32Array',\n        },\n    });\n}\nfunction _setPositiveSeedValues(referencedVolume, labelmap, sphereInfo, options) {\n    const refVolumePixelData = referencedVolume.voxelManager.getCompleteScalarDataArray();\n    const worldStartPos = sphereInfo.center;\n    const [width, height, numSlices] = referencedVolume.dimensions;\n    const numPixelsPerSlice = width * height;\n    const ijkStartPosition = transformWorldToIndex(referencedVolume.imageData, worldStartPos);\n    const referencePixelValue = refVolumePixelData[ijkStartPosition[2] * numPixelsPerSlice +\n        ijkStartPosition[1] * width +\n        ijkStartPosition[0]];\n    const positiveSeedValue = options.positiveSeedValue ?? POSITIVE_SEED_VALUE;\n    const positiveSeedVariance = options.positiveSeedVariance ?? POSITIVE_SEED_VARIANCE;\n    const positiveSeedVarianceValue = Math.abs(referencePixelValue * positiveSeedVariance);\n    const minPositivePixelValue = referencePixelValue - positiveSeedVarianceValue;\n    const maxPositivePixelValue = referencePixelValue + positiveSeedVarianceValue;\n    const neighborsCoordDelta = [\n        [-1, 0, 0],\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 1, 0],\n        [0, 0, -1],\n        [0, 0, 1],\n    ];\n    const startVoxelIndex = ijkStartPosition[2] * numPixelsPerSlice +\n        ijkStartPosition[1] * width +\n        ijkStartPosition[0];\n    labelmap.voxelManager.setAtIndex(startVoxelIndex, positiveSeedValue);\n    const queue = [ijkStartPosition];\n    while (queue.length) {\n        const ijkVoxel = queue.shift();\n        const [x, y, z] = ijkVoxel;\n        for (let i = 0, len = neighborsCoordDelta.length; i < len; i++) {\n            const neighborCoordDelta = neighborsCoordDelta[i];\n            const nx = x + neighborCoordDelta[0];\n            const ny = y + neighborCoordDelta[1];\n            const nz = z + neighborCoordDelta[2];\n            if (nx < 0 ||\n                nx >= width ||\n                ny < 0 ||\n                ny >= height ||\n                nz < 0 ||\n                nz >= numSlices) {\n                continue;\n            }\n            const neighborVoxelIndex = nz * numPixelsPerSlice + ny * width + nx;\n            const neighborPixelValue = refVolumePixelData[neighborVoxelIndex];\n            const neighborLabelmapValue = labelmap.voxelManager.getAtIndex(neighborVoxelIndex);\n            if (neighborLabelmapValue === positiveSeedValue ||\n                neighborPixelValue < minPositivePixelValue ||\n                neighborPixelValue > maxPositivePixelValue) {\n                continue;\n            }\n            labelmap.voxelManager.setAtIndex(neighborVoxelIndex, positiveSeedValue);\n            queue.push([nx, ny, nz]);\n        }\n    }\n}\nfunction _setNegativeSeedValues(subVolume, labelmap, sphereInfo, viewport, options) {\n    const subVolPixelData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const [columns, rows, numSlices] = labelmap.dimensions;\n    const numPixelsPerSlice = columns * rows;\n    const { worldVecRowDir, worldVecSliceDir } = csUtils.getVolumeDirectionVectors(labelmap.imageData, viewport.getCamera());\n    const ijkSphereCenter = transformWorldToIndex(subVolume.imageData, sphereInfo.center);\n    const referencePixelValue = subVolPixelData[ijkSphereCenter[2] * columns * rows +\n        ijkSphereCenter[1] * columns +\n        ijkSphereCenter[0]];\n    const negativeSeedVariance = options.negativeSeedVariance ?? NEGATIVE_SEED_VARIANCE;\n    const negativeSeedValue = options?.negativeSeedValue ?? NEGATIVE_SEED_VALUE;\n    const negativeSeedVarianceValue = Math.abs(referencePixelValue * negativeSeedVariance);\n    const minNegativePixelValue = referencePixelValue - negativeSeedVarianceValue;\n    const maxNegativePixelValue = referencePixelValue + negativeSeedVarianceValue;\n    const numCirclePoints = 360;\n    const rotationAngle = (2 * Math.PI) / numCirclePoints;\n    const worldQuat = quat.setAxisAngle(quat.create(), worldVecSliceDir, rotationAngle);\n    const vecRotation = vec3.clone(worldVecRowDir);\n    for (let i = 0; i < numCirclePoints; i++) {\n        const worldCircleBorderPoint = vec3.scaleAndAdd(vec3.create(), sphereInfo.center, vecRotation, sphereInfo.radius);\n        const ijkCircleBorderPoint = transformWorldToIndex(labelmap.imageData, worldCircleBorderPoint);\n        const [x, y, z] = ijkCircleBorderPoint;\n        vec3.transformQuat(vecRotation, vecRotation, worldQuat);\n        if (x < 0 ||\n            x >= columns ||\n            y < 0 ||\n            y >= rows ||\n            z < 0 ||\n            z >= numSlices) {\n            continue;\n        }\n        const offset = x + y * columns + z * numPixelsPerSlice;\n        const pixelValue = subVolPixelData[offset];\n        if (pixelValue < minNegativePixelValue ||\n            pixelValue > maxNegativePixelValue) {\n            labelmap.voxelManager.setAtIndex(offset, negativeSeedValue);\n        }\n    }\n}\nasync function _createAndCacheSegmentationSubVolumeForSphere(subVolume, sphereInfo, viewport, options) {\n    const labelmap = await volumeLoader.createAndCacheDerivedLabelmapVolume(subVolume.volumeId);\n    _setPositiveSeedValues(subVolume, labelmap, sphereInfo, options);\n    _setNegativeSeedValues(subVolume, labelmap, sphereInfo, viewport, options);\n    return labelmap;\n}\nasync function runGrowCutForSphere(referencedVolumeId, sphereInfo, viewport, options) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    const subVolume = _createSubVolumeFromSphere(referencedVolume, sphereInfo, viewport);\n    const labelmap = await _createAndCacheSegmentationSubVolumeForSphere(subVolume, sphereInfo, viewport, options);\n    await run(subVolume.volumeId, labelmap.volumeId);\n    return labelmap;\n}\nexport { runGrowCutForSphere as default, runGrowCutForSphere };\n","import { utilities as csUtils, cache, volumeLoader } from '@cornerstonejs/core';\nimport { run } from './runGrowCut';\nimport { POSITIVE_SEED_LABEL, NEGATIVE_SEED_LABEL, DEFAULT_NEIGHBORHOOD_RADIUS, DEFAULT_POSITIVE_STD_DEV_MULTIPLIER, DEFAULT_NEGATIVE_STD_DEV_MULTIPLIER, DEFAULT_NEGATIVE_SEED_MARGIN, DEFAULT_NEGATIVE_SEEDS_COUNT, MAX_NEGATIVE_SEED_ATTEMPTS_MULTIPLIER, } from './constants';\nconst { transformWorldToIndex } = csUtils;\nconst MAX_POSITIVE_SEEDS = 100000;\nfunction calculateGrowCutSeeds(referencedVolume, worldPosition, options) {\n    const { dimensions, imageData: refImageData } = referencedVolume;\n    const [width, height, numSlices] = dimensions;\n    const referenceVolumeVoxelManager = referencedVolume.voxelManager;\n    const scalarData = referenceVolumeVoxelManager.getCompleteScalarDataArray();\n    const numPixelsPerSlice = width * height;\n    const neighborhoodRadius = options?.initialNeighborhoodRadius ?? DEFAULT_NEIGHBORHOOD_RADIUS;\n    const positiveK = options?.positiveStdDevMultiplier ?? DEFAULT_POSITIVE_STD_DEV_MULTIPLIER;\n    const negativeK = options?.negativeStdDevMultiplier ?? DEFAULT_NEGATIVE_STD_DEV_MULTIPLIER;\n    const negativeSeedMargin = options?.negativeSeedMargin ?? DEFAULT_NEGATIVE_SEED_MARGIN;\n    const negativeSeedsTargetPatches = options?.negativeSeedsTargetPatches ?? DEFAULT_NEGATIVE_SEEDS_COUNT;\n    const ijkStart = transformWorldToIndex(refImageData, worldPosition).map(Math.round);\n    const startIndex = referenceVolumeVoxelManager.toIndex(ijkStart);\n    if (ijkStart[0] < 0 ||\n        ijkStart[0] >= width ||\n        ijkStart[1] < 0 ||\n        ijkStart[1] >= height ||\n        ijkStart[2] < 0 ||\n        ijkStart[2] >= numSlices) {\n        console.warn('Click position is outside volume bounds.');\n        return null;\n    }\n    const initialStats = csUtils.calculateNeighborhoodStats(scalarData, dimensions, ijkStart, neighborhoodRadius);\n    if (initialStats.count === 0) {\n        initialStats.mean = scalarData[startIndex];\n        initialStats.stdDev = 0;\n    }\n    const positiveIntensityMin = initialStats.mean - positiveK * initialStats.stdDev;\n    const positiveIntensityMax = initialStats.mean + positiveK * initialStats.stdDev;\n    const neighborsCoordDelta = [\n        [-1, 0, 0],\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 1, 0],\n        [0, 0, -1],\n        [0, 0, 1],\n    ];\n    let minX = Infinity, minY = Infinity, minZ = Infinity;\n    let maxX = -Infinity, maxY = -Infinity, maxZ = -Infinity;\n    const positiveSeedIndices = new Set();\n    const queue = [];\n    const startValue = scalarData[startIndex];\n    if (startValue >= positiveIntensityMin &&\n        startValue <= positiveIntensityMax) {\n        positiveSeedIndices.add(startIndex);\n        queue.push(ijkStart);\n        minX = maxX = ijkStart[0];\n        minY = maxY = ijkStart[1];\n        minZ = maxZ = ijkStart[2];\n    }\n    else {\n        console.warn('Clicked voxel intensity is outside the calculated positive range. No positive seeds generated.');\n        return { positiveSeedIndices: new Set(), negativeSeedIndices: new Set() };\n    }\n    let currentQueueIndex = 0;\n    while (currentQueueIndex < queue.length &&\n        positiveSeedIndices.size < MAX_POSITIVE_SEEDS) {\n        const [x, y, z] = queue[currentQueueIndex++];\n        minX = Math.min(x, minX);\n        minY = Math.min(y, minY);\n        minZ = Math.min(z, minZ);\n        maxX = Math.max(x, maxX);\n        maxY = Math.max(y, maxY);\n        maxZ = Math.max(z, maxZ);\n        for (let i = 0; i < neighborsCoordDelta.length; i++) {\n            const [dx, dy, dz] = neighborsCoordDelta[i];\n            const nx = x + dx;\n            const ny = y + dy;\n            const nz = z + dz;\n            if (nx < 0 ||\n                nx >= width ||\n                ny < 0 ||\n                ny >= height ||\n                nz < 0 ||\n                nz >= numSlices) {\n                continue;\n            }\n            const neighborIndex = nz * numPixelsPerSlice + ny * width + nx;\n            if (positiveSeedIndices.has(neighborIndex)) {\n                continue;\n            }\n            const neighborValue = scalarData[neighborIndex];\n            if (neighborValue >= positiveIntensityMin &&\n                neighborValue <= positiveIntensityMax) {\n                positiveSeedIndices.add(neighborIndex);\n                if (positiveSeedIndices.size < MAX_POSITIVE_SEEDS) {\n                    queue.push([nx, ny, nz]);\n                }\n            }\n        }\n    }\n    if (positiveSeedIndices.size >= MAX_POSITIVE_SEEDS) {\n        console.debug(`Reached maximum number of positive seeds (${MAX_POSITIVE_SEEDS}). Stopping BFS.`);\n    }\n    if (positiveSeedIndices.size === 0) {\n        console.warn('No positive seeds found after BFS.');\n        return { positiveSeedIndices: new Set(), negativeSeedIndices: new Set() };\n    }\n    let positiveSum = 0;\n    let positiveSumSq = 0;\n    positiveSeedIndices.forEach((index) => {\n        const value = scalarData[index];\n        positiveSum += value;\n        positiveSumSq += value * value;\n    });\n    const positiveCount = positiveSeedIndices.size;\n    const positiveMean = positiveSum / positiveCount;\n    const positiveVariance = positiveSumSq / positiveCount - positiveMean * positiveMean;\n    const positiveStdDev = Math.sqrt(Math.max(0, positiveVariance));\n    const negativeDiffThreshold = negativeK * positiveStdDev;\n    const minXm = Math.max(0, minX - negativeSeedMargin);\n    const minYm = Math.max(0, minY - negativeSeedMargin);\n    const minZm = Math.max(0, minZ - negativeSeedMargin);\n    const maxXm = Math.min(width - 1, maxX + negativeSeedMargin);\n    const maxYm = Math.min(height - 1, maxY + negativeSeedMargin);\n    const maxZm = Math.min(numSlices - 1, maxZ + negativeSeedMargin);\n    const negativeSeedIndices = new Set();\n    let attempts = 0;\n    let patchesAdded = 0;\n    const maxAttempts = negativeSeedsTargetPatches * MAX_NEGATIVE_SEED_ATTEMPTS_MULTIPLIER;\n    while (patchesAdded < negativeSeedsTargetPatches && attempts < maxAttempts) {\n        attempts++;\n        const rx = Math.floor(Math.random() * (maxXm - minXm + 1) + minXm);\n        const ry = Math.floor(Math.random() * (maxYm - minYm + 1) + minYm);\n        const rz = Math.floor(Math.random() * (maxZm - minZm + 1) + minZm);\n        const centerIndex = rz * numPixelsPerSlice + ry * width + rx;\n        if (positiveSeedIndices.has(centerIndex) ||\n            negativeSeedIndices.has(centerIndex)) {\n            continue;\n        }\n        const centerValue = scalarData[centerIndex];\n        if (Math.abs(centerValue - positiveMean) > negativeDiffThreshold) {\n            let patchContributed = false;\n            for (let dy = -1; dy <= 1; dy++) {\n                const ny = ry + dy;\n                if (ny < 0 || ny >= height) {\n                    continue;\n                }\n                for (let dx = -1; dx <= 1; dx++) {\n                    const nx = rx + dx;\n                    if (nx < 0 || nx >= width) {\n                        continue;\n                    }\n                    const neighborIndex = rz * numPixelsPerSlice + ny * width + nx;\n                    if (positiveSeedIndices.has(neighborIndex) ||\n                        negativeSeedIndices.has(neighborIndex)) {\n                        continue;\n                    }\n                    negativeSeedIndices.add(neighborIndex);\n                    patchContributed = true;\n                }\n            }\n            if (patchContributed) {\n                patchesAdded++;\n            }\n        }\n    }\n    if (negativeSeedIndices.size === 0) {\n        console.warn('Could not find any negative seeds. GrowCut might fail or produce poor results.');\n    }\n    console.debug('positiveSeedIndices', positiveSeedIndices.size);\n    console.debug('negativeSeedIndices', negativeSeedIndices.size);\n    return { positiveSeedIndices, negativeSeedIndices };\n}\nasync function runOneClickGrowCut({ referencedVolumeId, worldPosition, options, }) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    const labelmap = volumeLoader.createAndCacheDerivedLabelmapVolume(referencedVolumeId);\n    labelmap.voxelManager.forEach(({ index, value }) => {\n        if (value !== 0) {\n            labelmap.voxelManager.setAtIndex(index, 0);\n        }\n    });\n    const seeds = options.seeds ??\n        calculateGrowCutSeeds(referencedVolume, worldPosition, options);\n    const positiveSeedLabel = options?.positiveSeedValue ?? POSITIVE_SEED_LABEL;\n    const negativeSeedLabel = options?.negativeSeedValue ?? NEGATIVE_SEED_LABEL;\n    if (!seeds) {\n        return null;\n    }\n    const { positiveSeedIndices, negativeSeedIndices } = seeds;\n    if (positiveSeedIndices.size < 10 ||\n        positiveSeedIndices.size > MAX_POSITIVE_SEEDS ||\n        negativeSeedIndices.size < 10) {\n        console.warn('Not enough seeds found. GrowCut might fail or produce poor results.');\n        return labelmap;\n    }\n    positiveSeedIndices.forEach((index) => {\n        labelmap.voxelManager.setAtIndex(index, positiveSeedLabel);\n    });\n    negativeSeedIndices.forEach((index) => {\n        labelmap.voxelManager.setAtIndex(index, negativeSeedLabel);\n    });\n    await run(referencedVolumeId, labelmap.volumeId, options);\n    return labelmap;\n}\nexport { runOneClickGrowCut as default, runOneClickGrowCut, calculateGrowCutSeeds, };\n","import { getToolGroup } from '../../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../triggerAnnotationRenderForViewportIds';\nimport { getBrushToolInstances } from './getBrushToolInstances';\nexport function invalidateBrushCursor(toolGroupId) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return;\n    }\n    const brushBasedToolInstances = getBrushToolInstances(toolGroupId);\n    brushBasedToolInstances.forEach((tool) => {\n        tool.invalidateBrushCursor();\n    });\n    const viewportsInfo = toolGroup.getViewportsInfo();\n    const viewportsInfoArray = Object.keys(viewportsInfo).map((key) => viewportsInfo[key]);\n    if (!viewportsInfoArray.length) {\n        return;\n    }\n    const viewportIds = toolGroup.getViewportIds();\n    triggerAnnotationRenderForViewportIds(viewportIds);\n}\n","import { cache } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nexport default function isLineInSegment(point1, point2, isInSegment) {\n    const ijk1 = isInSegment.toIJK(point1);\n    const ijk2 = isInSegment.toIJK(point2);\n    const testPoint = vec3.create();\n    const { testIJK } = isInSegment;\n    const delta = vec3.sub(vec3.create(), ijk1, ijk2);\n    const testSize = Math.round(Math.max(...delta.map(Math.abs)));\n    if (testSize < 2) {\n        return true;\n    }\n    const unitDelta = vec3.scale(vec3.create(), delta, 1 / testSize);\n    for (let i = 1; i < testSize; i++) {\n        vec3.scaleAndAdd(testPoint, ijk2, unitDelta, i);\n        if (!testIJK(testPoint)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction createIsInSegmentMetadata({ dimensions, imageData, voxelManager, segmentIndex, containedSegmentIndices, }) {\n    const width = dimensions[0];\n    const pixelsPerSlice = width * dimensions[1];\n    return {\n        testCenter: (point1, point2) => {\n            const point = vec3.add(vec3.create(), point1, point2).map((it) => it / 2);\n            const ijk = imageData.worldToIndex(point).map(Math.round);\n            const [i, j, k] = ijk;\n            const index = i + j * width + k * pixelsPerSlice;\n            const value = voxelManager.getAtIndex(index);\n            return value === segmentIndex || containedSegmentIndices?.has(value);\n        },\n        toIJK: (point) => imageData.worldToIndex(point),\n        testIJK: (ijk) => {\n            const [i, j, k] = ijk;\n            const index = Math.round(i) + Math.round(j) * width + Math.round(k) * pixelsPerSlice;\n            const value = voxelManager.getAtIndex(index);\n            return value === segmentIndex || containedSegmentIndices?.has(value);\n        },\n    };\n}\nfunction createIsInSegment(segVolumeId, segmentIndex, containedSegmentIndices) {\n    const vol = cache.getVolume(segVolumeId);\n    if (!vol) {\n        console.warn(`No volume found for ${segVolumeId}`);\n        return;\n    }\n    return createIsInSegmentMetadata({\n        dimensions: vol.dimensions,\n        imageData: vol.imageData,\n        voxelManager: vol.voxelManager,\n        segmentIndex,\n        containedSegmentIndices,\n    });\n}\nexport { createIsInSegment, createIsInSegmentMetadata, isLineInSegment };\n","import { utilities } from '@cornerstonejs/core';\nimport normalizeViewportPlane from '../normalizeViewportPlane';\nconst { RLEVoxelMap, VoxelManager } = utilities;\nconst MAX_IMAGE_SIZE = 65535;\nexport var SegmentationEnum;\n(function (SegmentationEnum) {\n    SegmentationEnum[SegmentationEnum[\"SEGMENT\"] = -1] = \"SEGMENT\";\n    SegmentationEnum[SegmentationEnum[\"ISLAND\"] = -2] = \"ISLAND\";\n    SegmentationEnum[SegmentationEnum[\"INTERIOR\"] = -3] = \"INTERIOR\";\n    SegmentationEnum[SegmentationEnum[\"EXTERIOR\"] = -4] = \"EXTERIOR\";\n    SegmentationEnum[SegmentationEnum[\"INTERIOR_SMALL\"] = -5] = \"INTERIOR_SMALL\";\n    SegmentationEnum[SegmentationEnum[\"INTERIOR_TEST\"] = -6] = \"INTERIOR_TEST\";\n})(SegmentationEnum || (SegmentationEnum = {}));\nexport default class IslandRemoval {\n    constructor(options) {\n        this.fillInternalEdge = false;\n        this.maxInternalRemove = 128;\n        this.maxInternalRemove =\n            options?.maxInternalRemove ?? this.maxInternalRemove;\n        this.fillInternalEdge = options?.fillInternalEdge ?? this.fillInternalEdge;\n    }\n    initialize(viewport, segmentationVoxels, options) {\n        const hasSource = !!segmentationVoxels.sourceVoxelManager;\n        const segmentationVoxelManager = hasSource\n            ? segmentationVoxels.sourceVoxelManager\n            : segmentationVoxels;\n        const previewVoxelManager = hasSource\n            ? segmentationVoxels\n            : VoxelManager.createRLEHistoryVoxelManager(segmentationVoxelManager);\n        const { segmentIndex = 1, previewSegmentIndex = 1 } = options;\n        const clickedPoints = options.points || segmentationVoxelManager.getPoints();\n        if (!clickedPoints?.length) {\n            return;\n        }\n        const boundsIJK = segmentationVoxelManager\n            .getBoundsIJK()\n            .map((bound, i) => [\n            Math.min(bound[0], ...clickedPoints.map((point) => point[i])),\n            Math.max(bound[1], ...clickedPoints.map((point) => point[i])),\n        ]);\n        if (boundsIJK.find((it) => it[0] < 0 || it[1] > MAX_IMAGE_SIZE)) {\n            return;\n        }\n        const { toIJK, fromIJK, boundsIJKPrime, error } = normalizeViewportPlane(viewport, boundsIJK);\n        if (error) {\n            console.warn('Not performing island removal for planes not orthogonal to acquisition plane', error);\n            return;\n        }\n        const [width, height, depth] = fromIJK(segmentationVoxelManager.dimensions);\n        const segmentSet = new RLEVoxelMap(width, height, depth);\n        const getter = (i, j, k) => {\n            const index = segmentationVoxelManager.toIndex(toIJK([i, j, k]));\n            const oldVal = segmentationVoxelManager.getAtIndex(index);\n            if (oldVal === previewSegmentIndex || oldVal === segmentIndex) {\n                return SegmentationEnum.SEGMENT;\n            }\n        };\n        segmentSet.fillFrom(getter, boundsIJKPrime);\n        segmentSet.normalizer = { toIJK, fromIJK, boundsIJKPrime };\n        this.segmentSet = segmentSet;\n        this.previewVoxelManager = previewVoxelManager;\n        this.segmentIndex = segmentIndex;\n        this.previewSegmentIndex = previewSegmentIndex ?? segmentIndex;\n        this.selectedPoints = clickedPoints;\n        return true;\n    }\n    floodFillSegmentIsland() {\n        const { selectedPoints: clickedPoints, segmentSet } = this;\n        let floodedCount = 0;\n        const { fromIJK } = segmentSet.normalizer;\n        clickedPoints.forEach((clickedPoint) => {\n            const ijkPrime = fromIJK(clickedPoint);\n            const index = segmentSet.toIndex(ijkPrime);\n            const [iPrime, jPrime, kPrime] = ijkPrime;\n            if (segmentSet.get(index) === SegmentationEnum.SEGMENT) {\n                floodedCount += segmentSet.floodFill(iPrime, jPrime, kPrime, SegmentationEnum.ISLAND);\n            }\n        });\n        return floodedCount;\n    }\n    removeExternalIslands() {\n        const { previewVoxelManager, segmentSet } = this;\n        const { toIJK } = segmentSet.normalizer;\n        const callback = (index, rle) => {\n            const [, jPrime, kPrime] = segmentSet.toIJK(index);\n            if (rle.value !== SegmentationEnum.ISLAND) {\n                for (let iPrime = rle.start; iPrime < rle.end; iPrime++) {\n                    const clearPoint = toIJK([iPrime, jPrime, kPrime]);\n                    const v = previewVoxelManager.getAtIJKPoint(clearPoint);\n                    previewVoxelManager.setAtIJKPoint(clearPoint, v === undefined ? 0 : null);\n                }\n            }\n        };\n        segmentSet.forEach(callback, { rowModified: true });\n    }\n    removeInternalIslands() {\n        const { segmentSet, previewVoxelManager, previewSegmentIndex } = this;\n        const { height, normalizer, width } = segmentSet;\n        const { toIJK } = normalizer;\n        segmentSet.forEachRow((baseIndex, row) => {\n            let lastRle;\n            for (const rle of [...row]) {\n                if (rle.value !== SegmentationEnum.ISLAND) {\n                    continue;\n                }\n                if (!lastRle) {\n                    if (this.fillInternalEdge && rle.start > 0) {\n                        for (let iPrime = 0; iPrime < rle.start; iPrime++) {\n                            segmentSet.set(baseIndex + iPrime, SegmentationEnum.INTERIOR);\n                        }\n                    }\n                    lastRle = rle;\n                    continue;\n                }\n                for (let iPrime = lastRle.end; iPrime < rle.start; iPrime++) {\n                    segmentSet.set(baseIndex + iPrime, SegmentationEnum.INTERIOR);\n                }\n                lastRle = rle;\n            }\n            if (this.fillInternalEdge && lastRle?.end < width) {\n                for (let iPrime = lastRle.end; iPrime < width; iPrime++) {\n                    segmentSet.set(baseIndex + iPrime, SegmentationEnum.INTERIOR);\n                }\n            }\n        });\n        segmentSet.forEach((baseIndex, rle) => {\n            if (rle.value !== SegmentationEnum.INTERIOR) {\n                return;\n            }\n            const [, jPrime, kPrime] = segmentSet.toIJK(baseIndex);\n            const rowPrev = jPrime > 0 ? segmentSet.getRun(jPrime - 1, kPrime) : null;\n            const rowNext = jPrime + 1 < height ? segmentSet.getRun(jPrime + 1, kPrime) : null;\n            const isLast = jPrime === height - 1;\n            const isFirst = jPrime === 0;\n            const prevCovers = IslandRemoval.covers(rle, rowPrev) ||\n                (isFirst && this.fillInternalEdge);\n            const nextCovers = IslandRemoval.covers(rle, rowNext) || (isLast && this.fillInternalEdge);\n            if (rle.end - rle.start > 2 && (!prevCovers || !nextCovers)) {\n                segmentSet.floodFill(rle.start, jPrime, kPrime, SegmentationEnum.EXTERIOR, { singlePlane: true });\n            }\n        });\n        segmentSet.forEach((baseIndex, rle) => {\n            if (rle.value !== SegmentationEnum.INTERIOR) {\n                return;\n            }\n            const [, jPrime, kPrime] = segmentSet.toIJK(baseIndex);\n            const size = segmentSet.floodFill(rle.start, jPrime, kPrime, SegmentationEnum.INTERIOR_TEST);\n            const isBig = size > this.maxInternalRemove;\n            const newType = isBig\n                ? SegmentationEnum.EXTERIOR\n                : SegmentationEnum.INTERIOR_SMALL;\n            segmentSet.floodFill(rle.start, jPrime, kPrime, newType);\n        });\n        segmentSet.forEach((baseIndex, rle) => {\n            if (rle.value !== SegmentationEnum.INTERIOR_SMALL) {\n                return;\n            }\n            for (let iPrime = rle.start; iPrime < rle.end; iPrime++) {\n                const clearPoint = toIJK(segmentSet.toIJK(baseIndex + iPrime));\n                previewVoxelManager.setAtIJKPoint(clearPoint, previewSegmentIndex);\n            }\n        });\n        return previewVoxelManager.getArrayOfModifiedSlices();\n    }\n    static covers(rle, row) {\n        if (!row) {\n            return false;\n        }\n        let { start } = rle;\n        const { end } = rle;\n        for (const rowRle of row) {\n            if (start >= rowRle.start && start < rowRle.end) {\n                start = rowRle.end;\n                if (start >= end) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n","import { state } from '../../stateManagement/annotation';\nimport RectangleROIStartEndThresholdTool from '../../tools/segmentation/RectangleROIStartEndThresholdTool';\nimport RectangleROIThresholdTool from '../../tools/segmentation/RectangleROIThresholdTool';\nimport thresholdVolumeByRange from './thresholdVolumeByRange';\nimport getBoundsIJKFromRectangleAnnotations from '../rectangleROITool/getBoundsIJKFromRectangleAnnotations';\nfunction rectangleROIThresholdVolumeByRange(annotationUIDs, segmentationVolume, thresholdVolumeInformation, options) {\n    const annotations = annotationUIDs.map((annotationUID) => {\n        return state.getAnnotation(annotationUID);\n    });\n    _validateAnnotations(annotations);\n    let boundsIJK;\n    for (let i = 0; i < thresholdVolumeInformation.length; i++) {\n        const volumeSize = thresholdVolumeInformation[i].volume.voxelManager.getScalarDataLength();\n        if (volumeSize === segmentationVolume.voxelManager.getScalarDataLength() ||\n            i === 0) {\n            boundsIJK = getBoundsIJKFromRectangleAnnotations(annotations, thresholdVolumeInformation[i].volume, options);\n        }\n    }\n    const outputSegmentationVolume = thresholdVolumeByRange(segmentationVolume, thresholdVolumeInformation, { ...options, boundsIJK, segmentationId: options.segmentationId });\n    outputSegmentationVolume.modified();\n    return outputSegmentationVolume;\n}\nfunction _validateAnnotations(annotations) {\n    const validToolNames = [\n        RectangleROIThresholdTool.toolName,\n        RectangleROIStartEndThresholdTool.toolName,\n    ];\n    for (const annotation of annotations) {\n        const name = annotation.metadata.toolName;\n        if (!validToolNames.includes(name)) {\n            throw new Error('rectangleROIThresholdVolumeByRange only supports RectangleROIThreshold and RectangleROIStartEndThreshold annotations');\n        }\n    }\n}\nexport default rectangleROIThresholdVolumeByRange;\n","import { getEnabledElement, utilities } from '@cornerstonejs/core';\nimport { state as annotationState, config as annotationConfig, } from '../../stateManagement/annotation';\nimport contourAndFindLargestBidirectional from './contourAndFindLargestBidirectional';\nimport createBidirectionalToolData from './createBidirectionalToolData';\nimport BidirectionalTool from '../../tools/annotation/BidirectionalTool';\nimport { getSegmentations } from '../../stateManagement/segmentation/getSegmentations';\nimport { getActiveSegmentIndex } from '../../stateManagement/segmentation/getActiveSegmentIndex';\nexport default async function segmentContourAction(element, configuration) {\n    console.warn('Deprecation Alert: There is a new getSegmentLargestBidirectional function that handles volume, stack and individual segment cases properly. This function is deprecated and will be removed in a future version.');\n    const { data: configurationData } = configuration;\n    const enabledElement = getEnabledElement(element);\n    const segment = (configurationData.getSegment || defaultGetSegment)(enabledElement, configurationData);\n    if (!segment) {\n        return;\n    }\n    const FrameOfReferenceUID = enabledElement.viewport.getFrameOfReferenceUID();\n    const segmentationsList = getSegmentations();\n    const { segmentIndex, segmentationId } = segment;\n    const bidirectionals = annotationState.getAnnotations(this.toolName || BidirectionalTool.toolName, FrameOfReferenceUID);\n    let hasExistingActiveSegment = false;\n    const existingLargestBidirectionals = bidirectionals.filter((existingBidirectionalItem) => {\n        const segment = existingBidirectionalItem.data.segment;\n        if (!segment) {\n            return false;\n        }\n        if (segment.segmentationId === segmentationId &&\n            segment.segmentIndex === segmentIndex) {\n            hasExistingActiveSegment = true;\n            existingBidirectionalItem.data.segment = segment;\n        }\n        return true;\n    });\n    if (!hasExistingActiveSegment) {\n        existingLargestBidirectionals.push({\n            data: { segment },\n        });\n    }\n    let newBidirectional;\n    existingLargestBidirectionals.forEach(async (existingLargestBidirectional) => {\n        const segments = [];\n        const updateSegment = existingLargestBidirectional.data\n            .segment;\n        const { segmentIndex, segmentationId } = updateSegment;\n        segments[segmentIndex] = updateSegment;\n        annotationState.removeAnnotation(existingLargestBidirectional.annotationUID);\n        const bidirectionalData = await contourAndFindLargestBidirectional({\n            ...segmentationsList.find((segmentation) => segmentation.segmentationId === segmentationId),\n            segments,\n        });\n        if (!bidirectionalData) {\n            return;\n        }\n        const bidirectionalToolData = createBidirectionalToolData(bidirectionalData, enabledElement.viewport);\n        bidirectionalToolData.annotationUID =\n            existingLargestBidirectional.annotationUID;\n        bidirectionalToolData.data.segment = updateSegment;\n        const annotationUID = annotationState.addAnnotation(bidirectionalToolData, FrameOfReferenceUID);\n        if (updateSegment.segmentIndex === segment.segmentIndex &&\n            updateSegment.segmentationId === segment.segmentationId) {\n            newBidirectional = bidirectionalData;\n            const { style } = segment;\n            if (style) {\n                annotationConfig.style.setAnnotationStyles(annotationUID, style);\n            }\n        }\n    });\n    if (newBidirectional) {\n        const { sliceIndex } = newBidirectional;\n        const imageIds = enabledElement.viewport.getImageIds();\n        utilities.jumpToSlice(element, {\n            imageIndex: imageIds.length - 1 - sliceIndex,\n        });\n        enabledElement.viewport.render();\n    }\n    else {\n        console.warn('No bidirectional found');\n    }\n    return newBidirectional;\n}\nexport function defaultGetSegment(enabledElement, configuration) {\n    const segmentationsList = getSegmentations();\n    if (!segmentationsList.length) {\n        return;\n    }\n    const segmentationId = configuration.segmentationId || segmentationsList[0].segmentationId;\n    const segmentIndex = configuration.segmentIndex ?? getActiveSegmentIndex(segmentationId);\n    if (!segmentIndex) {\n        return;\n    }\n    const segmentData = configuration.segmentData?.get(segmentIndex);\n    return {\n        label: `Segment ${segmentIndex}`,\n        segmentIndex,\n        segmentationId,\n        ...segmentData,\n    };\n}\n","import { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { getVoxelOverlap, processVolumes } from './utilities';\nfunction thresholdSegmentationByRange(segmentationVolume, segmentationIndex, thresholdVolumeInformation, overlapType, segmentationId) {\n    if (!segmentationId) {\n        throw new Error('Segmentation ID is required to be passed inside thresholdSegmentationByRange');\n    }\n    const { baseVolumeIdx, volumeInfoList } = processVolumes(segmentationVolume, thresholdVolumeInformation);\n    const { voxelManager } = volumeInfoList[baseVolumeIdx];\n    const refVoxelManager = voxelManager;\n    const scalarDataLength = segmentationVolume.voxelManager.getScalarDataLength();\n    const segVoxelManager = segmentationVolume.voxelManager;\n    volumeInfoList.forEach((volumeInfo) => {\n        const { volumeSize } = volumeInfo;\n        if (volumeSize === scalarDataLength) {\n            _handleSameSizeVolume(segVoxelManager, refVoxelManager, segmentationIndex, volumeInfo);\n        }\n        else {\n            _handleDifferentSizeVolume(segVoxelManager, refVoxelManager, segmentationIndex, volumeInfo, volumeInfoList, baseVolumeIdx, overlapType);\n        }\n    });\n    triggerSegmentationDataModified(segmentationId);\n    return segmentationVolume;\n}\nfunction _handleDifferentSizeVolume(segVoxelManager, refVoxelManager, segmentationIndex, volumeInfo, volumeInfoList, baseVolumeIdx, overlapType) {\n    const { imageData, lower, upper, dimensions } = volumeInfo;\n    let total, overlaps, range;\n    const segScalarDataLength = segVoxelManager.getScalarDataLength();\n    for (let i = 0; i < segScalarDataLength; i++) {\n        if (segScalarDataLength.getAtIndex(i) === segmentationIndex) {\n            const overlapBounds = getVoxelOverlap(imageData, dimensions, volumeInfoList[baseVolumeIdx].spacing, volumeInfoList[baseVolumeIdx].imageData.getPoint(i));\n            const callbackOverlap = ({ value }) => {\n                total = total + 1;\n                if (value >= range.lower && value <= range.upper) {\n                    overlaps = overlaps + 1;\n                }\n            };\n            total = 0;\n            overlaps = 0;\n            range = { lower, upper };\n            let overlapTest = false;\n            segVoxelManager.forEach(callbackOverlap, {\n                imageData,\n                boundsIJK: overlapBounds,\n            });\n            overlapTest = overlapType === 0 ? overlaps > 0 : overlaps === total;\n            segVoxelManager.setAtIndex(i, overlapTest ? segmentationIndex : 0);\n        }\n    }\n    return { total, range, overlaps };\n}\nfunction _handleSameSizeVolume(segVoxelManager, refVoxelManager, segmentationIndex, volumeInfo) {\n    const { lower, upper } = volumeInfo;\n    const scalarDataLength = segVoxelManager.getScalarDataLength();\n    for (let i = 0; i < scalarDataLength; i++) {\n        if (segVoxelManager.getAtIndex[i] === segmentationIndex) {\n            const value = refVoxelManager.getAtIndex(i);\n            segVoxelManager.setAtIndex(i, value >= lower && value <= upper ? segmentationIndex : 0);\n        }\n    }\n}\nexport default thresholdSegmentationByRange;\n","import { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { getVoxelOverlap, processVolumes } from './utilities';\nfunction thresholdVolumeByRange(segmentationVolume, thresholdVolumeInformation, options) {\n    const { imageData: segmentationImageData } = segmentationVolume;\n    const { overwrite, boundsIJK, segmentationId } = options;\n    if (!segmentationId) {\n        throw new Error('Segmentation ID is required to be passed inside thresholdVolumeByRange as options');\n    }\n    const overlapType = options?.overlapType || 0;\n    const segVoxelManager = segmentationVolume.voxelManager;\n    const scalarDataLength = segmentationVolume.voxelManager.getScalarDataLength();\n    if (overwrite) {\n        for (let i = 0; i < scalarDataLength; i++) {\n            segVoxelManager.setAtIndex(i, 0);\n        }\n    }\n    const { baseVolumeIdx, volumeInfoList } = processVolumes(segmentationVolume, thresholdVolumeInformation);\n    let overlaps, total, range;\n    const testOverlapRange = (volumeInfo, voxelSpacing, voxelCenter) => {\n        const callbackOverlap = ({ value }) => {\n            total = total + 1;\n            if (value >= range.lower && value <= range.upper) {\n                overlaps = overlaps + 1;\n            }\n        };\n        const { imageData, dimensions, lower, upper } = volumeInfo;\n        const overlapBounds = getVoxelOverlap(imageData, dimensions, voxelSpacing, voxelCenter);\n        total = 0;\n        overlaps = 0;\n        range = { lower, upper };\n        let overlapTest = false;\n        const { voxelManager } = imageData.get('voxelManager');\n        voxelManager.forEach(callbackOverlap, {\n            imageData,\n            boundsIJK: overlapBounds,\n        });\n        if (overlapType === 0) {\n            overlapTest = overlaps > 0;\n        }\n        else if (overlapType == 1) {\n            overlapTest = overlaps === total;\n        }\n        return overlapTest;\n    };\n    const testRange = (volumeInfo, pointIJK) => {\n        const { imageData, lower, upper } = volumeInfo;\n        const voxelManager = imageData.get('voxelManager').voxelManager;\n        const offset = voxelManager.toIndex(pointIJK);\n        const value = voxelManager.getAtIndex(offset);\n        if (value <= lower || value >= upper) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    };\n    const callback = ({ index, pointIJK, pointLPS }) => {\n        let insert = volumeInfoList.length > 0;\n        for (let i = 0; i < volumeInfoList.length; i++) {\n            if (volumeInfoList[i].volumeSize === scalarDataLength) {\n                insert = testRange(volumeInfoList[i], pointIJK);\n            }\n            else {\n                insert = testOverlapRange(volumeInfoList[i], volumeInfoList[baseVolumeIdx].spacing, pointLPS);\n            }\n            if (!insert) {\n                break;\n            }\n        }\n        if (insert) {\n            segVoxelManager.setAtIndex(index, options.segmentIndex || 1);\n        }\n    };\n    const voxelManager = segmentationVolume.voxelManager;\n    voxelManager.forEach(callback, {\n        imageData: segmentationImageData,\n        boundsIJK,\n    });\n    triggerSegmentationDataModified(options.segmentationId);\n    return segmentationVolume;\n}\nexport default thresholdVolumeByRange;\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { getBoundingBoxAroundShapeIJK } from '../boundingBox/getBoundingBoxAroundShape';\nconst equalsCheck = (a, b) => {\n    return JSON.stringify(a) === JSON.stringify(b);\n};\nexport function getVoxelOverlap(imageData, dimensions, voxelSpacing, voxelCenter) {\n    const halfSpacingX = voxelSpacing[0] / 2;\n    const halfSpacingY = voxelSpacing[1] / 2;\n    const halfSpacingZ = voxelSpacing[2] / 2;\n    const voxelCornersIJK = new Array(8);\n    voxelCornersIJK[0] = csUtils.transformWorldToIndex(imageData, [\n        voxelCenter[0] - halfSpacingX,\n        voxelCenter[1] - halfSpacingY,\n        voxelCenter[2] - halfSpacingZ,\n    ]);\n    const offsets = [\n        [1, -1, -1],\n        [-1, 1, -1],\n        [1, 1, -1],\n        [-1, -1, 1],\n        [1, -1, 1],\n        [-1, 1, 1],\n        [1, 1, 1],\n    ];\n    for (let i = 0; i < 7; i++) {\n        const [xOff, yOff, zOff] = offsets[i];\n        voxelCornersIJK[i + 1] = csUtils.transformWorldToIndex(imageData, [\n            voxelCenter[0] + xOff * halfSpacingX,\n            voxelCenter[1] + yOff * halfSpacingY,\n            voxelCenter[2] + zOff * halfSpacingZ,\n        ]);\n    }\n    return getBoundingBoxAroundShapeIJK(voxelCornersIJK, dimensions);\n}\nexport function processVolumes(segmentationVolume, thresholdVolumeInformation) {\n    const { spacing: segmentationSpacing } = segmentationVolume;\n    const scalarDataLength = segmentationVolume.voxelManager.getScalarDataLength();\n    const volumeInfoList = [];\n    let baseVolumeIdx = 0;\n    for (let i = 0; i < thresholdVolumeInformation.length; i++) {\n        const { imageData, spacing, dimensions, voxelManager } = thresholdVolumeInformation[i].volume;\n        const volumeSize = thresholdVolumeInformation[i].volume.voxelManager.getScalarDataLength();\n        if (volumeSize === scalarDataLength &&\n            equalsCheck(spacing, segmentationSpacing)) {\n            baseVolumeIdx = i;\n        }\n        const lower = thresholdVolumeInformation[i].lower;\n        const upper = thresholdVolumeInformation[i].upper;\n        volumeInfoList.push({\n            imageData,\n            lower,\n            upper,\n            spacing,\n            dimensions,\n            volumeSize,\n            voxelManager,\n        });\n    }\n    return {\n        volumeInfoList,\n        baseVolumeIdx,\n    };\n}\nconst segmentIndicesCache = new Map();\nexport const setSegmentationDirty = (segmentationId) => {\n    const cached = segmentIndicesCache.get(segmentationId);\n    if (cached) {\n        cached.isDirty = true;\n    }\n};\nexport const setSegmentationClean = (segmentationId) => {\n    const cached = segmentIndicesCache.get(segmentationId);\n    if (cached) {\n        cached.isDirty = false;\n    }\n};\nexport const getCachedSegmentIndices = (segmentationId) => {\n    const cached = segmentIndicesCache.get(segmentationId);\n    if (cached && !cached.isDirty) {\n        return cached.indices;\n    }\n    return null;\n};\nexport const setCachedSegmentIndices = (segmentationId, indices) => {\n    segmentIndicesCache.set(segmentationId, { indices, isDirty: false });\n};\n","import { cache, utilities, eventTarget, Enums, triggerEvent, metaData, } from '@cornerstonejs/core';\nimport { getActiveSegmentIndex } from '../../stateManagement/segmentation/getActiveSegmentIndex';\nimport { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nimport { getStrategyData } from '../../tools/segmentation/strategies/utils/getStrategyData';\nimport ensureSegmentationVolume from '../../tools/segmentation/strategies/compositions/ensureSegmentationVolume';\nimport ensureImageVolume from '../../tools/segmentation/strategies/compositions/ensureImageVolume';\nexport const triggerWorkerProgress = (workerType, progress) => {\n    triggerEvent(eventTarget, Enums.Events.WEB_WORKER_PROGRESS, {\n        progress,\n        type: workerType,\n    });\n};\nexport const getSegmentationDataForWorker = (segmentationId, segmentIndices) => {\n    const segmentation = getSegmentation(segmentationId);\n    const { representationData } = segmentation;\n    const { Labelmap } = representationData;\n    if (!Labelmap) {\n        console.debug('No labelmap found for segmentation', segmentationId);\n        return null;\n    }\n    const segVolumeId = Labelmap.volumeId;\n    const segImageIds = Labelmap.imageIds;\n    const operationData = {\n        segmentationId,\n        volumeId: segVolumeId,\n        imageIds: segImageIds,\n    };\n    let reconstructableVolume = false;\n    if (segImageIds) {\n        const refImageIds = segImageIds.map((imageId) => {\n            const image = cache.getImage(imageId);\n            return image.referencedImageId;\n        });\n        reconstructableVolume = utilities.isValidVolume(refImageIds);\n    }\n    let indices = segmentIndices;\n    if (!indices) {\n        indices = [getActiveSegmentIndex(segmentationId)];\n    }\n    else if (!Array.isArray(indices)) {\n        indices = [indices, 255];\n    }\n    return {\n        operationData,\n        segVolumeId,\n        segImageIds,\n        reconstructableVolume,\n        indices,\n    };\n};\nexport const prepareVolumeStrategyDataForWorker = (operationData) => {\n    return getStrategyData({\n        operationData,\n        strategy: {\n            ensureSegmentationVolumeFor3DManipulation: ensureSegmentationVolume.ensureSegmentationVolumeFor3DManipulation,\n            ensureImageVolumeFor3DManipulation: ensureImageVolume.ensureImageVolumeFor3DManipulation,\n        },\n    });\n};\nexport const prepareImageInfo = (imageVoxelManager, imageData) => {\n    const imageScalarData = imageVoxelManager.getCompleteScalarDataArray();\n    return {\n        scalarData: imageScalarData,\n        dimensions: imageData.getDimensions(),\n        spacing: imageData.getSpacing(),\n        origin: imageData.getOrigin(),\n        direction: imageData.getDirection(),\n    };\n};\nexport const prepareStackDataForWorker = (segImageIds) => {\n    const segmentationInfo = [];\n    const imageInfo = [];\n    for (const segImageId of segImageIds) {\n        const segImage = cache.getImage(segImageId);\n        const segPixelData = segImage.getPixelData();\n        const { origin, direction, spacing, dimensions } = utilities.getImageDataMetadata(segImage);\n        segmentationInfo.push({\n            scalarData: segPixelData,\n            dimensions,\n            spacing,\n            origin,\n            direction,\n        });\n        const refImageId = segImage.referencedImageId;\n        if (refImageId) {\n            const refImage = cache.getImage(refImageId);\n            if (!refImage) {\n                continue;\n            }\n            const refPixelData = refImage.getPixelData();\n            const refVoxelManager = refImage.voxelManager;\n            const refSpacing = [\n                refImage.rowPixelSpacing,\n                refImage.columnPixelSpacing,\n            ];\n            imageInfo.push({\n                scalarData: refPixelData,\n                dimensions: refVoxelManager\n                    ? refVoxelManager.dimensions\n                    : [refImage.columns, refImage.rows, 1],\n                spacing: refSpacing,\n            });\n        }\n    }\n    return { segmentationInfo, imageInfo };\n};\nexport const getImageReferenceInfo = (segVolumeId, segImageIds) => {\n    let refImageId;\n    if (segVolumeId) {\n        const segmentationVolume = cache.getVolume(segVolumeId);\n        const imageIds = segmentationVolume.imageIds;\n        const cachedImage = cache.getImage(imageIds[0]);\n        if (cachedImage) {\n            refImageId = cachedImage.referencedImageId;\n        }\n    }\n    else if (segImageIds?.length) {\n        const segImage = cache.getImage(segImageIds[0]);\n        refImageId = segImage.referencedImageId;\n    }\n    const refImage = cache.getImage(refImageId);\n    const scalingModule = metaData.get('scalingModule', refImageId);\n    const modalityUnitOptions = {\n        isPreScaled: Boolean(refImage?.preScale?.scaled),\n        isSuvScaled: typeof scalingModule?.suvbw === 'number',\n    };\n    return { refImageId, modalityUnitOptions };\n};\n","import { cache } from '@cornerstonejs/core';\nfunction validateRepresentationData(segmentationRepresentationData) {\n    if ('volumeId' in segmentationRepresentationData) {\n        segmentationRepresentationData =\n            segmentationRepresentationData;\n        const cachedVolume = cache.getVolume(segmentationRepresentationData.volumeId);\n        if (!cachedVolume) {\n            throw new Error(`volumeId of ${segmentationRepresentationData.volumeId} not found in cache, you should load and cache volume before adding segmentation`);\n        }\n    }\n    else if ('imageIds' in segmentationRepresentationData) {\n        segmentationRepresentationData =\n            segmentationRepresentationData;\n        if (!segmentationRepresentationData.imageIds) {\n            throw new Error('The segmentationInput.representationData.imageIds is undefined, please provide a valid representationData.imageIds for stack data');\n        }\n    }\n    else {\n        throw new Error('The segmentationInput.representationData is undefined, please provide a valid representationData');\n    }\n}\nexport function validatePublic(segmentationInput) {\n    if (!segmentationInput.representation.data) {\n        throw new Error('The segmentationInput.representationData.data is undefined, please provide a valid representationData.data');\n    }\n    const representationData = segmentationInput.representation\n        .data;\n    validateRepresentationData(representationData);\n}\nexport function validate(segmentationRepresentationData) {\n    validateRepresentationData(segmentationRepresentationData);\n}\n","import { triggerAnnotationModified } from '../stateManagement/annotation/helpers/state';\nimport { ChangeTypes } from '../enums';\nexport default function setAnnotationLabel(annotation, element, updatedLabel) {\n    annotation.data.label = updatedLabel;\n    triggerAnnotationModified(annotation, element, ChangeTypes.LabelChange);\n}\n","import { imageLoader, Enums, eventTarget, imageLoadPoolManager, cache, metaData, utilities, triggerEvent, } from '@cornerstonejs/core';\nimport { addToolState, getToolState } from './state';\nimport { getStackData, requestType, clearFromImageIds, getPromiseRemovedHandler, } from './stackPrefetchUtils';\nimport { Events } from '../../enums';\nconst { imageRetrieveMetadataProvider } = utilities;\nlet configuration = {\n    maxImagesToPrefetch: Infinity,\n    minBefore: 2,\n    maxAfter: 2,\n    directionExtraImages: 10,\n    preserveExistingPool: false,\n};\nlet resetPrefetchTimeout;\nconst resetPrefetchDelay = 5;\nconst priorities = {};\nconst enable = (element, priority = 0) => {\n    const stack = getStackData(element);\n    if (!stack) {\n        return;\n    }\n    if (!stack.imageIds?.length) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    updateToolState(element);\n    priorities[element] = priority;\n    prefetch(element, priority);\n    element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    element.addEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    const promiseRemovedHandler = getPromiseRemovedHandler(element);\n    eventTarget.removeEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n    eventTarget.addEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n};\nfunction prefetch(element, priority = 0) {\n    const stack = getStackData(element);\n    if (!stack) {\n        return;\n    }\n    if (!stack?.imageIds?.length) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    const stackPrefetchData = getToolState(element);\n    if (!stackPrefetchData) {\n        return;\n    }\n    const stackPrefetch = (stackPrefetchData || {});\n    stackPrefetch.enabled =\n        stackPrefetch.enabled && (stackPrefetch.indicesToRequest?.length ?? 0) > 0;\n    if (stackPrefetch.enabled === false) {\n        return;\n    }\n    function removeFromList(imageIdIndex) {\n        const index = stackPrefetch.indicesToRequest.indexOf(imageIdIndex);\n        if (index > -1) {\n            stackPrefetch.indicesToRequest.splice(index, 1);\n        }\n    }\n    const indicesToRequestCopy = stackPrefetch.indicesToRequest.slice();\n    const { currentImageIdIndex } = stack;\n    indicesToRequestCopy.forEach((imageIdIndex) => {\n        const imageId = stack.imageIds[imageIdIndex];\n        if (!imageId) {\n            return;\n        }\n        const distance = Math.abs(currentImageIdIndex - imageIdIndex);\n        const imageCached = distance < 6\n            ? cache.getImageLoadObject(imageId)\n            : cache.isLoaded(imageId);\n        if (imageCached) {\n            removeFromList(imageIdIndex);\n        }\n    });\n    if (!stackPrefetch.indicesToRequest.length) {\n        return;\n    }\n    if (!configuration.preserveExistingPool) {\n        imageLoadPoolManager.filterRequests(clearFromImageIds(stack));\n    }\n    function doneCallback(imageId) {\n        const imageIdIndex = stack.imageIds.indexOf(imageId);\n        removeFromList(imageIdIndex);\n        const image = cache.getCachedImageBasedOnImageURI(imageId);\n        const { stats } = stackPrefetch;\n        const decodeTimeInMS = image?.image?.decodeTimeInMS || 0;\n        if (decodeTimeInMS) {\n            stats.imageIds.set(imageId, decodeTimeInMS);\n            stats.decodeTimeInMS += decodeTimeInMS;\n            const loadTimeInMS = image?.image?.loadTimeInMS || 0;\n            stats.loadTimeInMS += loadTimeInMS;\n        }\n        if (!stackPrefetch.indicesToRequest.length) {\n            if (image?.sizeInBytes) {\n                const { sizeInBytes } = image;\n                const usage = cache.getMaxCacheSize() / 4 / sizeInBytes;\n                if (!stackPrefetch.cacheFill) {\n                    stats.initialTime = Date.now() - stats.start;\n                    stats.initialSize = stats.imageIds.size;\n                    updateToolState(element, usage);\n                    prefetch(element, priority);\n                }\n                else if (stats.imageIds.size) {\n                    stats.fillTime = Date.now() - stats.start;\n                    const { size } = stats.imageIds;\n                    stats.fillSize = size;\n                }\n            }\n        }\n        if (stackPrefetch.indicesToRequest.length === 0) {\n            const eventDetail = {\n                element: element,\n                lastPrefetchedImageId: imageId,\n            };\n            triggerEvent(eventTarget, Events.STACK_PREFETCH_COMPLETE, eventDetail);\n        }\n    }\n    const requestFn = (imageId, options) => {\n        const { retrieveOptions = {} } = metaData.get(imageRetrieveMetadataProvider.IMAGE_RETRIEVE_CONFIGURATION, imageId, 'stack') || {};\n        options.retrieveOptions = {\n            ...options.retrieveOptions,\n            ...(retrieveOptions.default || Object.values(retrieveOptions)?.[0] || {}),\n        };\n        return imageLoader\n            .loadAndCacheImage(imageId, options)\n            .then(() => doneCallback(imageId));\n    };\n    stackPrefetch.indicesToRequest.forEach((imageIdIndex) => {\n        const imageId = stack.imageIds[imageIdIndex];\n        const options = {\n            requestType,\n        };\n        imageLoadPoolManager.addRequest(requestFn.bind(null, imageId, options), requestType, {\n            imageId,\n        }, priority);\n    });\n}\nfunction onImageUpdated(e) {\n    clearTimeout(resetPrefetchTimeout);\n    resetPrefetchTimeout = setTimeout(function () {\n        const element = e.target;\n        try {\n            updateToolState(element);\n            prefetch(element, priorities[element]);\n        }\n        catch (error) {\n            return;\n        }\n    }, resetPrefetchDelay);\n}\nconst signum = (x) => (x < 0 ? -1 : 1);\nconst updateToolState = (element, usage) => {\n    const stack = getStackData(element);\n    if (!stack) {\n        return;\n    }\n    if (!stack.imageIds?.length) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    const { currentImageIdIndex } = stack;\n    let { maxAfter = 2, minBefore = 2 } = configuration;\n    const { directionExtraImages = 10 } = configuration;\n    const stackPrefetchData = getToolState(element) ||\n        {\n            indicesToRequest: [],\n            currentImageIdIndex,\n            stackCount: 0,\n            enabled: true,\n            direction: 1,\n            stats: {\n                start: Date.now(),\n                imageIds: new Map(),\n                decodeTimeInMS: 0,\n                loadTimeInMS: 0,\n                totalBytes: 0,\n            },\n        };\n    const delta = currentImageIdIndex - stackPrefetchData.currentImageIdIndex;\n    stackPrefetchData.direction = signum(delta);\n    stackPrefetchData.currentImageIdIndex = currentImageIdIndex;\n    stackPrefetchData.enabled = true;\n    if (stackPrefetchData.stackCount < 100) {\n        stackPrefetchData.stackCount += directionExtraImages;\n    }\n    if (Math.abs(delta) > maxAfter || !delta) {\n        stackPrefetchData.stackCount = 0;\n        if (usage) {\n            const positionFraction = currentImageIdIndex / stack.imageIds.length;\n            minBefore = Math.ceil(usage * positionFraction);\n            maxAfter = Math.ceil(usage * (1 - positionFraction));\n            stackPrefetchData.cacheFill = true;\n        }\n        else {\n            stackPrefetchData.cacheFill = false;\n        }\n    }\n    else if (delta < 0) {\n        minBefore += stackPrefetchData.stackCount;\n        maxAfter = 0;\n    }\n    else {\n        maxAfter += stackPrefetchData.stackCount;\n        minBefore = 0;\n    }\n    const minIndex = Math.max(0, currentImageIdIndex - minBefore);\n    const maxIndex = Math.min(stack.imageIds.length - 1, currentImageIdIndex + maxAfter);\n    const indicesToRequest = [];\n    for (let i = currentImageIdIndex + 1; i <= maxIndex; i++) {\n        indicesToRequest.push(i);\n    }\n    for (let i = currentImageIdIndex - 1; i >= minIndex; i--) {\n        indicesToRequest.push(i);\n    }\n    stackPrefetchData.indicesToRequest = indicesToRequest;\n    addToolState(element, stackPrefetchData);\n};\nfunction disable(element) {\n    clearTimeout(resetPrefetchTimeout);\n    element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    const promiseRemovedHandler = getPromiseRemovedHandler(element);\n    eventTarget.removeEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n    const stackPrefetchData = getToolState(element);\n    if (stackPrefetchData) {\n        stackPrefetchData.enabled = false;\n    }\n}\nfunction getConfiguration() {\n    return configuration;\n}\nfunction setConfiguration(config) {\n    configuration = config;\n}\nconst stackContextPrefetch = {\n    enable,\n    disable,\n    getConfiguration,\n    setConfiguration,\n};\nexport default stackContextPrefetch;\n","import { imageLoader, Enums, eventTarget, imageLoadPoolManager, cache, metaData, utilities, triggerEvent, } from '@cornerstonejs/core';\nimport { addToolState, getToolState } from './state';\nimport { getStackData, requestType, priority, getPromiseRemovedHandler, nearestIndex, range, } from './stackPrefetchUtils';\nimport { Events } from '../../enums';\nconst { imageRetrieveMetadataProvider } = utilities;\nlet configuration = {\n    maxImagesToPrefetch: Infinity,\n    preserveExistingPool: true,\n};\nlet resetPrefetchTimeout;\nconst resetPrefetchDelay = 10;\nfunction prefetch(element) {\n    const stackPrefetchData = getToolState(element);\n    if (!stackPrefetchData) {\n        return;\n    }\n    const stackPrefetch = (stackPrefetchData || {});\n    const stack = getStackData(element);\n    if (!stack?.imageIds?.length) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    const { currentImageIdIndex } = stack;\n    stackPrefetch.enabled =\n        stackPrefetch.enabled && (stackPrefetch.indicesToRequest?.length ?? 0) > 0;\n    if (stackPrefetch.enabled === false) {\n        return;\n    }\n    function removeFromList(imageIdIndex) {\n        const index = stackPrefetch.indicesToRequest.indexOf(imageIdIndex);\n        if (index > -1) {\n            stackPrefetch.indicesToRequest.splice(index, 1);\n        }\n    }\n    stackPrefetchData.indicesToRequest.sort((a, b) => a - b);\n    const indicesToRequestCopy = stackPrefetch.indicesToRequest.slice();\n    indicesToRequestCopy.forEach(function (imageIdIndex) {\n        const imageId = stack.imageIds[imageIdIndex];\n        if (!imageId) {\n            return;\n        }\n        const distance = Math.abs(currentImageIdIndex - imageIdIndex);\n        const imageCached = distance < 6\n            ? cache.getImageLoadObject(imageId)\n            : cache.isLoaded(imageId);\n        if (imageCached) {\n            removeFromList(imageIdIndex);\n        }\n    });\n    if (!stackPrefetch.indicesToRequest.length) {\n        return;\n    }\n    if (!configuration.preserveExistingPool) {\n        imageLoadPoolManager.clearRequestStack(requestType);\n    }\n    const nearest = nearestIndex(stackPrefetch.indicesToRequest, stack.currentImageIdIndex);\n    let imageId;\n    let nextImageIdIndex;\n    const preventCache = false;\n    function doneCallback(imageId) {\n        console.log('prefetch done: %s', imageId);\n        const imageIdIndex = stack.imageIds.indexOf(imageId);\n        removeFromList(imageIdIndex);\n        if (stackPrefetch.indicesToRequest.length === 0) {\n            const eventDetail = {\n                element: element,\n                lastPrefetchedImageId: imageId,\n            };\n            triggerEvent(eventTarget, Events.STACK_PREFETCH_COMPLETE, eventDetail);\n        }\n    }\n    let lowerIndex = nearest.low;\n    let higherIndex = nearest.high;\n    const imageIdsToPrefetch = [];\n    while (lowerIndex >= 0 ||\n        higherIndex < stackPrefetch.indicesToRequest.length) {\n        const currentIndex = stack.currentImageIdIndex;\n        const shouldSkipLower = currentIndex - stackPrefetch.indicesToRequest[lowerIndex] >\n            configuration.maxImagesToPrefetch;\n        const shouldSkipHigher = stackPrefetch.indicesToRequest[higherIndex] - currentIndex >\n            configuration.maxImagesToPrefetch;\n        const shouldLoadLower = !shouldSkipLower && lowerIndex >= 0;\n        const shouldLoadHigher = !shouldSkipHigher && higherIndex < stackPrefetch.indicesToRequest.length;\n        if (!shouldLoadHigher && !shouldLoadLower) {\n            break;\n        }\n        if (shouldLoadLower) {\n            nextImageIdIndex = stackPrefetch.indicesToRequest[lowerIndex--];\n            imageId = stack.imageIds[nextImageIdIndex];\n            imageIdsToPrefetch.push(imageId);\n        }\n        if (shouldLoadHigher) {\n            nextImageIdIndex = stackPrefetch.indicesToRequest[higherIndex++];\n            imageId = stack.imageIds[nextImageIdIndex];\n            imageIdsToPrefetch.push(imageId);\n        }\n    }\n    const requestFn = (imageId, options) => {\n        const { retrieveOptions = {} } = metaData.get(imageRetrieveMetadataProvider.IMAGE_RETRIEVE_CONFIGURATION, imageId, 'stack') || {};\n        options.retrieveOptions = {\n            ...options.retrieveOptions,\n            ...(retrieveOptions.default || Object.values(retrieveOptions)?.[0] || {}),\n        };\n        return imageLoader\n            .loadAndCacheImage(imageId, options)\n            .then(() => doneCallback(imageId));\n    };\n    imageIdsToPrefetch.forEach((imageId) => {\n        const options = {\n            requestType,\n        };\n        imageLoadPoolManager.addRequest(requestFn.bind(null, imageId, options), requestType, {\n            imageId,\n        }, priority);\n    });\n}\nfunction onImageUpdated(e) {\n    clearTimeout(resetPrefetchTimeout);\n    resetPrefetchTimeout = setTimeout(function () {\n        const element = e.target;\n        try {\n            prefetch(element);\n        }\n        catch (error) {\n            return;\n        }\n    }, resetPrefetchDelay);\n}\nfunction enable(element) {\n    const stack = getStackData(element);\n    if (!stack || !stack.imageIds || stack.imageIds.length === 0) {\n        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n        return;\n    }\n    const stackPrefetchData = {\n        indicesToRequest: range(0, stack.imageIds.length - 1),\n        enabled: true,\n        direction: 1,\n    };\n    const indexOfCurrentImage = stackPrefetchData.indicesToRequest.indexOf(stack.currentImageIdIndex);\n    stackPrefetchData.indicesToRequest.splice(indexOfCurrentImage, 1);\n    addToolState(element, stackPrefetchData);\n    prefetch(element);\n    element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    element.addEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    const promiseRemovedHandler = getPromiseRemovedHandler(element);\n    eventTarget.removeEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n    eventTarget.addEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n}\nfunction disable(element) {\n    clearTimeout(resetPrefetchTimeout);\n    element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n    const promiseRemovedHandler = getPromiseRemovedHandler(element);\n    eventTarget.removeEventListener(Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);\n    const stackPrefetchData = getToolState(element);\n    if (stackPrefetchData && stackPrefetchData.indicesToRequest.length) {\n        stackPrefetchData.enabled = false;\n        imageLoadPoolManager.clearRequestStack(requestType);\n    }\n}\nfunction getConfiguration() {\n    return configuration;\n}\nfunction setConfiguration(config) {\n    configuration = config;\n}\nconst stackPrefetch = { enable, disable, getConfiguration, setConfiguration };\nexport default stackPrefetch;\n","function getDeltaPoints(currentPoints, lastPoints) {\n    const curr = getMeanPoints(currentPoints);\n    const last = getMeanPoints(lastPoints);\n    return {\n        page: _subtractPoints2D(curr.page, last.page),\n        client: _subtractPoints2D(curr.client, last.client),\n        canvas: _subtractPoints2D(curr.canvas, last.canvas),\n        world: _subtractPoints3D(curr.world, last.world),\n    };\n}\nfunction getDeltaDistance(currentPoints, lastPoints) {\n    const curr = getMeanPoints(currentPoints);\n    const last = getMeanPoints(lastPoints);\n    return {\n        page: _getDistance2D(curr.page, last.page),\n        client: _getDistance2D(curr.client, last.client),\n        canvas: _getDistance2D(curr.canvas, last.canvas),\n        world: _getDistance3D(curr.world, last.world),\n    };\n}\nfunction getDeltaRotation(currentPoints, lastPoints) {\n}\nfunction getDeltaDistanceBetweenIPoints(currentPoints, lastPoints) {\n    const currentDistance = _getMeanDistanceBetweenAllIPoints(currentPoints);\n    const lastDistance = _getMeanDistanceBetweenAllIPoints(lastPoints);\n    const deltaDistance = {\n        page: currentDistance.page - lastDistance.page,\n        client: currentDistance.client - lastDistance.client,\n        canvas: currentDistance.canvas - lastDistance.canvas,\n        world: currentDistance.world - lastDistance.world,\n    };\n    return deltaDistance;\n}\nfunction copyPointsList(points) {\n    return JSON.parse(JSON.stringify(points));\n}\nfunction copyPoints(points) {\n    return JSON.parse(JSON.stringify(points));\n}\nfunction getMeanPoints(points) {\n    return points.reduce((prev, curr) => {\n        return {\n            page: [\n                prev.page[0] + curr.page[0] / points.length,\n                prev.page[1] + curr.page[1] / points.length,\n            ],\n            client: [\n                prev.client[0] + curr.client[0] / points.length,\n                prev.client[1] + curr.client[1] / points.length,\n            ],\n            canvas: [\n                prev.canvas[0] + curr.canvas[0] / points.length,\n                prev.canvas[1] + curr.canvas[1] / points.length,\n            ],\n            world: [\n                prev.world[0] + curr.world[0] / points.length,\n                prev.world[1] + curr.world[1] / points.length,\n                prev.world[2] + curr.world[2] / points.length,\n            ],\n        };\n    }, {\n        page: [0, 0],\n        client: [0, 0],\n        canvas: [0, 0],\n        world: [0, 0, 0],\n    });\n}\nfunction getMeanTouchPoints(points) {\n    return points.reduce((prev, curr) => {\n        return {\n            page: [\n                prev.page[0] + curr.page[0] / points.length,\n                prev.page[1] + curr.page[1] / points.length,\n            ],\n            client: [\n                prev.client[0] + curr.client[0] / points.length,\n                prev.client[1] + curr.client[1] / points.length,\n            ],\n            canvas: [\n                prev.canvas[0] + curr.canvas[0] / points.length,\n                prev.canvas[1] + curr.canvas[1] / points.length,\n            ],\n            world: [\n                prev.world[0] + curr.world[0] / points.length,\n                prev.world[1] + curr.world[1] / points.length,\n                prev.world[2] + curr.world[2] / points.length,\n            ],\n            touch: {\n                identifier: null,\n                radiusX: prev.touch.radiusX + curr.touch.radiusX / points.length,\n                radiusY: prev.touch.radiusY + curr.touch.radiusY / points.length,\n                force: prev.touch.force + curr.touch.force / points.length,\n                rotationAngle: prev.touch.rotationAngle + curr.touch.rotationAngle / points.length,\n            },\n        };\n    }, {\n        page: [0, 0],\n        client: [0, 0],\n        canvas: [0, 0],\n        world: [0, 0, 0],\n        touch: {\n            identifier: null,\n            radiusX: 0,\n            radiusY: 0,\n            force: 0,\n            rotationAngle: 0,\n        },\n    });\n}\nfunction _subtractPoints2D(point0, point1) {\n    return [point0[0] - point1[0], point0[1] - point1[1]];\n}\nfunction _subtractPoints3D(point0, point1) {\n    return [point0[0] - point1[0], point0[1] - point1[1], point0[2] - point1[2]];\n}\nfunction _getMeanDistanceBetweenAllIPoints(points) {\n    const pairedDistance = [];\n    for (let i = 0; i < points.length; i++) {\n        for (let j = 0; j < points.length; j++) {\n            if (i < j) {\n                pairedDistance.push({\n                    page: _getDistance2D(points[i].page, points[j].page),\n                    client: _getDistance2D(points[i].client, points[j].client),\n                    canvas: _getDistance2D(points[i].canvas, points[j].canvas),\n                    world: _getDistance3D(points[i].world, points[j].world),\n                });\n            }\n        }\n    }\n    return pairedDistance.reduce((prev, curr) => {\n        return {\n            page: prev.page + curr.page / pairedDistance.length,\n            client: prev.client + curr.client / pairedDistance.length,\n            canvas: prev.canvas + curr.canvas / pairedDistance.length,\n            world: prev.world + curr.world / pairedDistance.length,\n        };\n    }, {\n        page: 0,\n        client: 0,\n        canvas: 0,\n        world: 0,\n    });\n}\nfunction _getDistance2D(point0, point1) {\n    return Math.sqrt(Math.pow(point0[0] - point1[0], 2) + Math.pow(point0[1] - point1[1], 2));\n}\nfunction _getDistance3D(point0, point1) {\n    return Math.sqrt(Math.pow(point0[0] - point1[0], 2) +\n        Math.pow(point0[1] - point1[1], 2) +\n        Math.pow(point0[2] - point1[2], 2));\n}\nexport { getMeanPoints, getMeanTouchPoints, copyPoints, copyPointsList, getDeltaDistanceBetweenIPoints, getDeltaPoints, getDeltaDistance, getDeltaRotation, };\n","import { annotationRenderingEngine } from '../stateManagement/annotation/AnnotationRenderingEngine';\nfunction triggerAnnotationRender(element) {\n    annotationRenderingEngine.renderViewport(element);\n}\nexport default triggerAnnotationRender;\n","import { getRenderingEngine } from '@cornerstonejs/core';\nimport triggerAnnotationRender from './triggerAnnotationRender';\nimport { getToolGroup } from '../store/ToolGroupManager';\nexport function triggerAnnotationRenderForToolGroupIds(toolGroupIds) {\n    toolGroupIds.forEach((toolGroupId) => {\n        const toolGroup = getToolGroup(toolGroupId);\n        if (!toolGroup) {\n            console.warn(`ToolGroup not available for ${toolGroupId}`);\n            return;\n        }\n        const viewportsInfo = toolGroup.getViewportsInfo();\n        viewportsInfo.forEach((viewportInfo) => {\n            const { renderingEngineId, viewportId } = viewportInfo;\n            const renderingEngine = getRenderingEngine(renderingEngineId);\n            if (!renderingEngine) {\n                console.warn(`RenderingEngine not available for ${renderingEngineId}`);\n                return;\n            }\n            const viewport = renderingEngine.getViewport(viewportId);\n            triggerAnnotationRender(viewport.element);\n        });\n    });\n}\nexport default triggerAnnotationRenderForToolGroupIds;\n","import { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport triggerAnnotationRender from './triggerAnnotationRender';\nexport function triggerAnnotationRenderForViewportIds(viewportIdsToRender) {\n    if (!viewportIdsToRender.length) {\n        return;\n    }\n    viewportIdsToRender.forEach((viewportId) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            console.warn(`Viewport not available for ${viewportId}`);\n            return;\n        }\n        const { viewport } = enabledElement;\n        if (!viewport) {\n            console.warn(`Viewport not available for ${viewportId}`);\n            return;\n        }\n        const element = viewport.element;\n        triggerAnnotationRender(element);\n    });\n}\nexport default triggerAnnotationRenderForViewportIds;\n","export default function filterViewportsWithFrameOfReferenceUID(viewports, FrameOfReferenceUID) {\n    const numViewports = viewports.length;\n    const viewportsWithFrameOfReferenceUID = [];\n    for (let vp = 0; vp < numViewports; vp++) {\n        const viewport = viewports[vp];\n        if (viewport.getFrameOfReferenceUID() === FrameOfReferenceUID) {\n            viewportsWithFrameOfReferenceUID.push(viewport);\n        }\n    }\n    return viewportsWithFrameOfReferenceUID;\n}\n","import { vec3 } from 'gl-matrix';\nexport function filterViewportsWithParallelNormals(viewports, camera, EPS = 0.999) {\n    return viewports.filter((viewport) => {\n        const vpCamera = viewport.getCamera();\n        const isParallel = Math.abs(vec3.dot(vpCamera.viewPlaneNormal, camera.viewPlaneNormal)) >\n            EPS;\n        return isParallel;\n    });\n}\nexport default filterViewportsWithParallelNormals;\n","import { ToolModes } from '../../enums';\nimport { getToolGroupForViewport } from '../../store/ToolGroupManager';\nconst { Active, Passive, Enabled } = ToolModes;\nexport default function filterViewportsWithToolEnabled(viewports, toolName) {\n    const numViewports = viewports.length;\n    const viewportsWithToolEnabled = [];\n    for (let vp = 0; vp < numViewports; vp++) {\n        const viewport = viewports[vp];\n        const toolGroup = getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\n        if (!toolGroup) {\n            continue;\n        }\n        const hasTool = _toolGroupHasActiveEnabledOrPassiveTool(toolGroup, toolName);\n        if (hasTool) {\n            viewportsWithToolEnabled.push(viewport);\n        }\n    }\n    return viewportsWithToolEnabled;\n}\nfunction _toolGroupHasActiveEnabledOrPassiveTool(toolGroup, toolName) {\n    const { toolOptions } = toolGroup;\n    const tool = toolOptions[toolName];\n    if (!tool) {\n        return false;\n    }\n    const toolMode = tool.mode;\n    return toolMode === Active || toolMode === Passive || toolMode === Enabled;\n}\n","import { vec2 } from 'gl-matrix';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport { isRangeValid, areColorbarRangesEqual } from './common';\nimport { ColorbarRangeTextPosition } from './enums/ColorbarRangeTextPosition';\nimport { ColorbarCanvas } from './ColorbarCanvas';\nimport { ColorbarTicks } from './ColorbarTicks';\nimport isRangeTextPositionValid from './common/isRangeTextPositionValid';\nimport Widget from '../../../widgets/Widget';\nconst DEFAULTS = {\n    MULTIPLIER: 1,\n    RANGE_TEXT_POSITION: ColorbarRangeTextPosition.Right,\n    TICKS_BAR_SIZE: 50,\n};\nclass Colorbar extends Widget {\n    constructor(props) {\n        super(props);\n        this._isMouseOver = false;\n        this._isInteracting = false;\n        this._mouseOverCallback = (evt) => {\n            this._isMouseOver = true;\n            this.showTicks();\n            evt.stopPropagation();\n        };\n        this._mouseOutCallback = (evt) => {\n            this._isMouseOver = false;\n            this.hideTicks();\n            evt.stopPropagation();\n        };\n        this._mouseDownCallback = (evt) => {\n            this._isInteracting = true;\n            this.showTicks();\n            this._addVOIEventListeners(evt);\n            evt.stopPropagation();\n        };\n        this._mouseDragCallback = (evt, initialState) => {\n            const multipliers = this.getVOIMultipliers();\n            const currentPoints = this._getPointsFromMouseEvent(evt);\n            const { points: startPoints, voiRange: startVOIRange } = initialState;\n            const canvasDelta = vec2.sub(vec2.create(), currentPoints.local, startPoints.local);\n            const wwDelta = canvasDelta[0] * multipliers[0];\n            const wcDelta = canvasDelta[1] * multipliers[1];\n            if (!wwDelta && !wcDelta) {\n                return;\n            }\n            const { lower: voiLower, upper: voiUpper } = startVOIRange;\n            let { windowWidth, windowCenter } = csUtils.windowLevel.toWindowLevel(voiLower, voiUpper);\n            windowWidth = Math.max(windowWidth + wwDelta, 1);\n            windowCenter += wcDelta;\n            const newVoiRange = csUtils.windowLevel.toLowHighRange(windowWidth, windowCenter);\n            this.voiRange = newVoiRange;\n            evt.stopPropagation();\n            evt.preventDefault();\n        };\n        this._mouseUpCallback = (evt) => {\n            this._isInteracting = false;\n            this.hideTicks();\n            this._removeVOIEventListeners();\n            evt.stopPropagation();\n        };\n        this._eventListenersManager =\n            new csUtils.eventListener.MultiTargetEventListenerManager();\n        this._colormaps = Colorbar.getColormapsMap(props);\n        this._activeColormapName = Colorbar.getInitialColormapName(props);\n        this._canvas = this._createCanvas(props);\n        this._ticksBar = this._createTicksBar(props);\n        this._rangeTextPosition =\n            props.ticks?.position ?? DEFAULTS.RANGE_TEXT_POSITION;\n        this._canvas.appendTo(this.rootElement);\n        this._ticksBar.appendTo(this.rootElement);\n        this._addRootElementEventListeners();\n    }\n    get activeColormapName() {\n        return this._activeColormapName;\n    }\n    set activeColormapName(colormapName) {\n        if (colormapName === this._activeColormapName) {\n            return;\n        }\n        const colormap = this._colormaps.get(colormapName);\n        if (!colormap) {\n            console.warn(`Invalid colormap name (${colormapName})`);\n            return;\n        }\n        this._activeColormapName = colormapName;\n        this._canvas.colormap = colormap;\n    }\n    get imageRange() {\n        return this._canvas.imageRange;\n    }\n    set imageRange(imageRange) {\n        this._canvas.imageRange = imageRange;\n        this._ticksBar.imageRange = imageRange;\n    }\n    get voiRange() {\n        return this._canvas.voiRange;\n    }\n    set voiRange(voiRange) {\n        const { voiRange: currentVoiRange } = this._canvas;\n        if (!isRangeValid(voiRange) ||\n            areColorbarRangesEqual(voiRange, currentVoiRange)) {\n            return;\n        }\n        this._canvas.voiRange = voiRange;\n        this._ticksBar.voiRange = voiRange;\n        this.onVoiChange(voiRange);\n    }\n    get showFullImageRange() {\n        return this._canvas.showFullImageRange;\n    }\n    set showFullImageRange(value) {\n        this._canvas.showFullImageRange = value;\n        this._ticksBar.showFullPixelValueRange = value;\n    }\n    destroy() {\n        super.destroy();\n        this._eventListenersManager.reset();\n    }\n    createRootElement() {\n        const rootElement = document.createElement('div');\n        Object.assign(rootElement.style, {\n            position: 'relative',\n            fontSize: '0',\n            width: '100%',\n            height: '100%',\n        });\n        return rootElement;\n    }\n    onContainerResize() {\n        super.onContainerResize();\n        this.updateTicksBar();\n        this._canvas.size = this.containerSize;\n    }\n    getVOIMultipliers() {\n        return [DEFAULTS.MULTIPLIER, DEFAULTS.MULTIPLIER];\n    }\n    onVoiChange(voiRange) {\n    }\n    showTicks() {\n        this.updateTicksBar();\n        this._ticksBar.visible = true;\n    }\n    hideTicks() {\n        if (this._isInteracting || this._isMouseOver) {\n            return;\n        }\n        this._ticksBar.visible = false;\n    }\n    static getColormapsMap(props) {\n        const { colormaps } = props;\n        return colormaps.reduce((items, item) => items.set(item.Name, item), new Map());\n    }\n    static getInitialColormapName(props) {\n        const { activeColormapName, colormaps } = props;\n        const colormapExists = !!activeColormapName &&\n            colormaps.some((cm) => cm.Name === activeColormapName);\n        return colormapExists ? activeColormapName : colormaps[0].Name;\n    }\n    _createCanvas(props) {\n        const { imageRange, voiRange, showFullPixelValueRange } = props;\n        const colormap = this._colormaps.get(this._activeColormapName);\n        return new ColorbarCanvas({\n            colormap,\n            imageRange,\n            voiRange: voiRange,\n            showFullPixelValueRange,\n        });\n    }\n    _createTicksBar(props) {\n        const ticksProps = props.ticks;\n        return new ColorbarTicks({\n            imageRange: props.imageRange,\n            voiRange: props.voiRange,\n            ticks: ticksProps,\n            showFullPixelValueRange: props.showFullPixelValueRange,\n        });\n    }\n    _getPointsFromMouseEvent(evt) {\n        const { rootElement: element } = this;\n        const clientPoint = [evt.clientX, evt.clientY];\n        const pagePoint = [evt.pageX, evt.pageY];\n        const rect = element.getBoundingClientRect();\n        const localPoints = [\n            pagePoint[0] - rect.left - window.pageXOffset,\n            pagePoint[1] - rect.top - window.pageYOffset,\n        ];\n        return { client: clientPoint, page: pagePoint, local: localPoints };\n    }\n    updateTicksBar() {\n        const { width: containerWidth, height: containerHeight } = this.containerSize;\n        if (containerWidth === 0 && containerHeight === 0) {\n            return;\n        }\n        const { _ticksBar: ticksBar, _rangeTextPosition: rangeTextPosition } = this;\n        const isHorizontal = containerWidth >= containerHeight;\n        const width = isHorizontal ? containerWidth : DEFAULTS.TICKS_BAR_SIZE;\n        const height = isHorizontal ? DEFAULTS.TICKS_BAR_SIZE : containerHeight;\n        if (!isRangeTextPositionValid(containerWidth, containerHeight, rangeTextPosition)) {\n            throw new Error('Invalid rangeTextPosition value for the current colobar orientation');\n        }\n        let ticksBarTop;\n        let ticksBarLeft;\n        ticksBar.size = { width, height };\n        if (isHorizontal) {\n            ticksBarLeft = 0;\n            ticksBarTop =\n                rangeTextPosition === ColorbarRangeTextPosition.Top\n                    ? -height\n                    : containerHeight;\n        }\n        else {\n            ticksBarTop = 0;\n            ticksBarLeft =\n                rangeTextPosition === ColorbarRangeTextPosition.Left\n                    ? -width\n                    : containerWidth;\n        }\n        ticksBar.top = ticksBarTop;\n        ticksBar.left = ticksBarLeft;\n    }\n    _addRootElementEventListeners() {\n        const { _eventListenersManager: manager } = this;\n        const { rootElement: element } = this;\n        manager.addEventListener(element, 'mouseover', this._mouseOverCallback);\n        manager.addEventListener(element, 'mouseout', this._mouseOutCallback);\n        manager.addEventListener(element, 'mousedown', this._mouseDownCallback);\n    }\n    _addVOIEventListeners(evt) {\n        const { _eventListenersManager: manager } = this;\n        const points = this._getPointsFromMouseEvent(evt);\n        const voiRange = { ...this._canvas.voiRange };\n        const initialDragState = { points, voiRange };\n        this._removeVOIEventListeners();\n        manager.addEventListener(document, 'voi.mouseup', this._mouseUpCallback);\n        manager.addEventListener(document, 'voi.mousemove', (evt) => this._mouseDragCallback(evt, initialDragState));\n    }\n    _removeVOIEventListeners() {\n        const { _eventListenersManager: manager } = this;\n        manager.removeEventListener(document, 'voi.mouseup');\n        manager.removeEventListener(document, 'voi.mousemove');\n    }\n}\nexport { Colorbar as default, Colorbar };\n","import { eventTarget, VolumeViewport, StackViewport, Enums, utilities, getEnabledElement, cache, } from '@cornerstonejs/core';\nimport { Colorbar } from './Colorbar';\nimport { getVOIMultipliers } from '../../getVOIMultipliers';\nconst { Events } = Enums;\nconst defaultImageRange = { lower: -1000, upper: 1000 };\nclass ViewportColorbar extends Colorbar {\n    constructor(props) {\n        const { element, volumeId } = props;\n        const imageRange = ViewportColorbar._getImageRange(element, volumeId);\n        const voiRange = ViewportColorbar._getVOIRange(element, volumeId);\n        super({ ...props, imageRange, voiRange });\n        this.autoHideTicks = () => {\n            if (this._hideTicksTimeoutId) {\n                return;\n            }\n            const timeLeft = this._hideTicksTime - Date.now();\n            if (timeLeft <= 0) {\n                this.hideTicks();\n            }\n            else {\n                this._hideTicksTimeoutId = window.setTimeout(() => {\n                    this._hideTicksTimeoutId = 0;\n                    this.autoHideTicks();\n                }, timeLeft);\n            }\n        };\n        this._stackNewImageCallback = () => {\n            this.imageRange = ViewportColorbar._getImageRange(this._element);\n        };\n        this._imageVolumeModifiedCallback = (evt) => {\n            const { volumeId } = evt.detail;\n            if (volumeId !== this._volumeId) {\n                return;\n            }\n            const { _element: element } = this;\n            this.imageRange = ViewportColorbar._getImageRange(element, volumeId);\n        };\n        this._viewportVOIModifiedCallback = (evt) => {\n            const { viewportId, volumeId, range: voiRange, colormap } = evt.detail;\n            const { viewport } = this.enabledElement;\n            if (viewportId !== viewport.id || volumeId !== this._volumeId) {\n                return;\n            }\n            this.voiRange = voiRange;\n            if (colormap) {\n                this.activeColormapName = colormap.name;\n            }\n            this.showAndAutoHideTicks();\n        };\n        this._viewportColormapModifiedCallback = (evt) => {\n            const { viewportId, colormap, volumeId } = evt.detail;\n            const { viewport } = this.enabledElement;\n            if (viewportId !== viewport.id || volumeId !== this._volumeId) {\n                return;\n            }\n            this.activeColormapName = colormap.name;\n        };\n        this._element = element;\n        this._volumeId = volumeId;\n        this._addCornerstoneEventListener();\n    }\n    get element() {\n        return this._element;\n    }\n    get enabledElement() {\n        return getEnabledElement(this._element);\n    }\n    getVOIMultipliers() {\n        const { viewport } = this.enabledElement;\n        return getVOIMultipliers(viewport, this._volumeId);\n    }\n    onVoiChange(voiRange) {\n        super.onVoiChange(voiRange);\n        const { viewport } = this.enabledElement;\n        if (viewport instanceof StackViewport) {\n            viewport.setProperties({\n                voiRange: voiRange,\n            });\n            viewport.render();\n        }\n        else if (viewport instanceof VolumeViewport) {\n            const { _volumeId: volumeId } = this;\n            const viewportsContainingVolumeUID = utilities.getViewportsWithVolumeId(volumeId);\n            viewport.setProperties({ voiRange }, volumeId);\n            viewportsContainingVolumeUID.forEach((vp) => vp.render());\n        }\n    }\n    static _getImageRange(element, volumeId) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const actor = viewport.getImageActor(volumeId);\n        if (!actor) {\n            return defaultImageRange;\n        }\n        const imageData = actor.getMapper().getInputData();\n        const scalarData = imageData.getPointData().getScalars();\n        let imageRange;\n        if (!scalarData) {\n            if (!volumeId) {\n                throw new Error('volumeId is required when scalarData is not available');\n            }\n            const volume = cache.getVolume(volumeId);\n            const [minValue, maxValue] = volume.voxelManager.getRange();\n            imageRange = [minValue, maxValue];\n        }\n        else {\n            imageRange = scalarData.getRange();\n        }\n        return imageRange[0] === 0 && imageRange[1] === 0\n            ? defaultImageRange\n            : { lower: imageRange[0], upper: imageRange[1] };\n    }\n    static _getVOIRange(element, volumeId) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const actor = viewport.getImageActor(volumeId);\n        if (!actor) {\n            return defaultImageRange;\n        }\n        const voiRange = actor.getProperty().getRGBTransferFunction(0).getRange();\n        return voiRange[0] === 0 && voiRange[1] === 0\n            ? defaultImageRange\n            : { lower: voiRange[0], upper: voiRange[1] };\n    }\n    showAndAutoHideTicks(interval = 1000) {\n        this._hideTicksTime = Date.now() + interval;\n        this.showTicks();\n        this.autoHideTicks();\n    }\n    _addCornerstoneEventListener() {\n        const { _element: element } = this;\n        eventTarget.addEventListener(Events.IMAGE_VOLUME_MODIFIED, this._imageVolumeModifiedCallback);\n        element.addEventListener(Events.STACK_NEW_IMAGE, this._stackNewImageCallback);\n        element.addEventListener(Events.VOI_MODIFIED, this._viewportVOIModifiedCallback);\n        element.addEventListener(Events.COLORMAP_MODIFIED, this._viewportColormapModifiedCallback);\n    }\n    destroy() {\n        super.destroy();\n        const { _element: element } = this;\n        eventTarget.removeEventListener(Events.IMAGE_VOLUME_MODIFIED, this._imageVolumeModifiedCallback);\n        element.removeEventListener(Events.STACK_NEW_IMAGE, this._stackNewImageCallback);\n        element.removeEventListener(Events.VOI_MODIFIED, this._viewportVOIModifiedCallback);\n        element.removeEventListener(Events.COLORMAP_MODIFIED, this._viewportColormapModifiedCallback);\n    }\n}\nexport { ViewportColorbar as default, ViewportColorbar };\n","export var ColorbarRangeTextPosition;\n(function (ColorbarRangeTextPosition) {\n    ColorbarRangeTextPosition[\"Top\"] = \"top\";\n    ColorbarRangeTextPosition[\"Left\"] = \"left\";\n    ColorbarRangeTextPosition[\"Bottom\"] = \"bottom\";\n    ColorbarRangeTextPosition[\"Right\"] = \"right\";\n})(ColorbarRangeTextPosition || (ColorbarRangeTextPosition = {}));\n","function calculateMinMaxMean(pixelLuminance, globalMin, globalMax) {\n    const numPixels = pixelLuminance.length;\n    let min = globalMax;\n    let max = globalMin;\n    let sum = 0;\n    if (numPixels < 2) {\n        return {\n            min,\n            max,\n            mean: (globalMin + globalMax) / 2,\n        };\n    }\n    for (let index = 0; index < numPixels; index++) {\n        const spv = pixelLuminance[index];\n        min = Math.min(min, spv);\n        max = Math.max(max, spv);\n        sum += spv;\n    }\n    return {\n        min,\n        max,\n        mean: sum / numPixels,\n    };\n}\nexport { calculateMinMaxMean };\n","import { utilities as csUtils, StackViewport, VolumeViewport, } from '@cornerstonejs/core';\nfunction extractWindowLevelRegionToolData(viewport) {\n    if (viewport instanceof VolumeViewport) {\n        return extractImageDataVolume(viewport);\n    }\n    if (viewport instanceof StackViewport) {\n        return extractImageDataStack(viewport);\n    }\n    throw new Error('Viewport not supported');\n}\nfunction extractImageDataVolume(viewport) {\n    const { scalarData, width, height } = csUtils.getCurrentVolumeViewportSlice(viewport);\n    const { min: minPixelValue, max: maxPixelValue } = csUtils.getMinMax(scalarData);\n    return {\n        scalarData,\n        minPixelValue,\n        maxPixelValue,\n        width,\n        height,\n        rows: width,\n        columns: height,\n    };\n}\nfunction extractImageDataStack(viewport) {\n    const imageData = viewport.getImageData();\n    const { scalarData } = imageData;\n    const { min: minPixelValue, max: maxPixelValue } = csUtils.getMinMax(scalarData);\n    const width = imageData.dimensions[0];\n    const height = imageData.dimensions[1];\n    const { rows, columns, color } = viewport.getCornerstoneImage();\n    return {\n        scalarData,\n        width,\n        height,\n        minPixelValue,\n        maxPixelValue,\n        rows,\n        columns,\n        color,\n    };\n}\nexport { extractWindowLevelRegionToolData };\n","function getLuminanceFromRegion(imageData, x, y, width, height) {\n    const luminance = [];\n    let index = 0;\n    const pixelData = imageData.scalarData;\n    let spIndex, row, column;\n    if (imageData.color) {\n        for (row = 0; row < height; row++) {\n            for (column = 0; column < width; column++) {\n                spIndex = ((row + y) * imageData.columns + (column + x)) * 4;\n                const red = pixelData[spIndex];\n                const green = pixelData[spIndex + 1];\n                const blue = pixelData[spIndex + 2];\n                luminance[index++] = 0.2126 * red + 0.7152 * green + 0.0722 * blue;\n            }\n        }\n    }\n    else {\n        for (row = 0; row < height; row++) {\n            for (column = 0; column < width; column++) {\n                spIndex = (row + y) * imageData.columns + (column + x);\n                luminance[index++] = pixelData[spIndex];\n            }\n        }\n    }\n    return luminance;\n}\nexport { getLuminanceFromRegion };\n","export const version = '4.5.20';\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    symbolTag = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    splice = arrayProto.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n"],"names":["config","getConfig","setConfig","newConfig","polysegInitialized","getPolySeg","addons","polySeg","console","warn","polyseg","init","DEFINED_CURSORS","Symbol","STANDARD_CURSORS","Set","MouseCursor","constructor","name","fallback","this","getName","addFallbackStyleProperty","style","getStyleProperty","getDefinedCursor","definedCursors","getDefinedCursors","mouseCursor","get","has","set","setDefinedCursor","cursor","context","symbol","Map","Object","defineProperty","value","standardCursorNames","values","ELEMENT_CURSORS_MAP","initElementCursor","element","_getElementCursors","_setElementCursor","cursors","resetElementCursor","hideElementCursor","map","WeakMap","ImageMouseCursor","url","x","y","super","getUniqueInstanceName","Number","prefix","utilities","BASE","iconContent","iconSize","viewBox","mousePoint","mousePointerGroupString","SEGMENTATION_CURSOR_BOUNDARIES","MINUS_RECT","PLUS_RECT","SCISSOR_ICON","RECTANGLE_ICON","CIRCLE_ICON","CursorSVG","Angle","extend","ArrowAnnotate","Bidirectional","CobbAngle","CircleROI","EllipticalROI","FreehandROI","FreehandROISculptor","Length","Height","Probe","RectangleROI","Label","Crosshairs","Eraser","Magnify","Pan","Rotate","StackScroll","WindowLevelRegion","WindowLevel","Zoom","SegmentationFreeHandEraseInside","SegmentationFreeHandFillInside","SegmentationFreeHandEraseOutside","SegmentationFreeHandFillOutside","SegmentationRectangleEraseInside","RectangleScissor","CircleScissor","base","assign","create","registerCursor","toolName","svgCursorNames","keys","STATE","AnnotationStyleStates","Highlighted","MODE","ToolModes","Active","SVGMouseCursor","pointer","color","urn","type","getCursorURN","pointerStrokeWidth","descriptor","getDefinedSVGCursorDescriptor","options","blob","svgString","createSVGIconWithPointer","createSVGIcon","Blob","createSVGIconBlob","URL","createObjectURL","createSVGIconUrl","createSVGMouseCursor","format","template","dictionary","dict","defined","prototype","hasOwnProperty","bind","replace","match","key","scale","Math","max","svgSize","cursorName","log","setElementCursor","CursorNames","svgDrawingHelper","annotationUID","ellipseUID","corner1","corner2","dataId","top","bottom","left","right","canvasCoordinates","width","lineWidth","lineDash","undefined","strokeWidth","svgNodeHash","existingEllipse","getSvgNode","w","hypot","h","angle","atan2","PI","center","attributes","cx","cy","rx","ry","stroke","fill","transform","setNodeTouched","svgEllipseElement","document","createElementNS","setAttribute","appendNode","handleGroupUID","handle","uniqueIndex","handleRadius","opacity","r","Error","side","parseFloat","height","existingHandleElement","newHandleElement","drawLine","lineUID","start","end","isNaN","markerStartId","markerEndId","shadow","strokeOpacity","existingLine","layerId","svgLayerElement","id","dropShadowStyle","x1","y1","x2","y2","newLine","drawPath","pathUID","points","pointsArrays","length","Array","isArray","fillColor","fillOpacity","closePath","existingNode","pointsAttribute","i","numArrays","numPoints","j","point","toFixed","d","newNode","drawPolyline","polylineUID","existingPolyLine","firstPoint","newPolyLine","drawRectByCoordinates","rectangleUID","_width","existingRect","topLeft","topRight","bottomLeft","bottomRight","leftEdgeCenter","svgRectElement","_createTextSpan","text","textSpanElement","textContent","_drawTextBackground","group","querySelector","removeChild","getBBox","insertBefore","firstChild","bBox","textUID","textLines","position","padding","fontFamily","fontSize","background","textGroupBoundingBox","svgns","existingTextGroup","textElement","textSpans","from","children","textSpan","appendChild","textAttributes","textGroupAttributes","textGroup","noSelectStyle","combinedStyle","_createTextElement","_drawTextGroup","centerX","centerY","drawHeight","heightUID","midX","endfirstLine","endsecondLine","firstLine","secondLine","threeLine","fanUID","innerRadius","outerRadius","startAngle","endAngle","zIndex","_getHash","existingFanElement","startRad","endRad","outerStartX","cos","outerStartY","sin","outerEndX","outerEndY","innerStartX","innerStartY","largeArcFlag","pathData","setAttributesIfNecessary","newFanElement","toString","setNewAttributesIfValid","drawArrow","arrowUID","viaMarker","markerSize","headLength","legacyDrawArrow","markerFullId","defs","arrowMarker","arrowPath","drawRedactionRect","tlhc","min","abs","svgNode","forEach","currentValue","getAttribute","newValue","removeAttribute","enable","eventTarget","addEventListener","ANNOTATION_COMPLETED","handleAnnotationCompleted","ANNOTATION_MODIFIED","handleAnnotationUpdate","ANNOTATION_REMOVED","handleAnnotationDelete","disable","removeEventListener","Passive","Enabled","onCameraModified","evt","tool","Enums","CAMERA_MODIFIED","onCameraReset","onResetCamera","CAMERA_RESET","onImageRendered","detail","IMAGE_RENDERED","onImageSpacingCalibrated","IMAGE_SPACING_CALIBRATED","KEY_DOWN","KEY_UP","MOUSE_CLICK","MOUSE_DOWN","MOUSE_DOWN_ACTIVATE","MOUSE_DOUBLE_CLICK","MOUSE_DRAG","MOUSE_MOVE","MOUSE_UP","MOUSE_WHEEL","TOUCH_START","TOUCH_START_ACTIVATE","TOUCH_DRAG","TOUCH_END","TOUCH_TAP","TOUCH_PRESS","mouseDoubleClickListener","mouseDownListener","mouseMoveListener","capture","preventGhostClick","touchStartListener","passive","wheelListener","segmentationId","modifiedSlicesToUse","representationData","getSegmentation","viewportIds","getViewportIdsWithSegmentation","hasVolumeViewport","some","viewportId","viewport","getEnabledElementByViewportId","VolumeViewport","hasStackViewport","StackViewport","hasBothStackAndVolume","segmentationVolume","cache","getVolume","volumeId","imageData","vtkOpenGLTexture","slicesToUpdate","numSlices","getDimensions","setUpdatedFrame","modified","performVolumeLabelmapUpdate","SegmentationRepresentations","Labelmap","representations","getSegmentationRepresentation","filter","representation","enabledElement","actorEntries","actorEntry","segImageData","actor","getMapper","getInputData","currentSegmentationImageIds","segmentationImage","getImage","performStackLabelmapUpdate","_imageChangeEventListener","eventData","renderingEngineId","getEnabledElementByIds","labelmapRepresentations","actors","getActors","updateLabelmapSegmentationImageReferences","labelmapActors","flatMap","find","derivedImageIds","includes","referencedId","removeActors","uid","currentImageId","getCurrentImageId","shouldTriggerSegmentationRender","derivedImageId","derivedImage","segmentationActorInput","dimensions","spacing","direction","getImageDataMetadata","currentImage","imageId","origin","currentOrigin","originToUse","voxelManager","getConstructor","newPixelData","getScalarData","scalarArray","numberOfComponents","setDimensions","setSpacing","setDirection","setOrigin","getPointData","setScalars","addImages","representationUID","callback","imageActor","setInputData","segmentationImageData","setDerivedImage","render","getEnabledElement","BaseVolumeViewport","PRE_STACK_NEW_IMAGE","async","contourSegmentationCompletedListener","sourceAnnotation","annotation","isContourSegmentationAnnotation","viewports","getViewportsForAnnotation","viewportWithToolRegistered","silent","toolGroup","getToolGroupForViewport","errorMessage","hasTool","getToolOptions","isFreehandContourSegToolRegisteredForViewport","getViewport","contourSegmentationAnnotations","sourceAnnotationUID","getAllAnnotations","targetAnnotation","areSameSegment","isReferenceViewable","metadata","getValidContourSegmentationAnnotations","triggerEvent","Events","ANNOTATION_CUT_MERGE_PROCESS_COMPLETED","sourcePolyline","data","contour","polyline","intersectingContours","targetPolyline","isContourHole","contourHoleProcessingEnabled","annotationCompletedListener","removed","getRenderingEngines","renderingEngine","getViewports","vp","triggerAnnotationRenderForViewportIds","t","annotationRemovedListener","removeContourSegmentationAnnotation","csToolsInitialized","defaultConfiguration","_removeCornerstoneEventListeners","elementEnabledEvent","ELEMENT_ENABLED","elementDisabledEvent","ELEMENT_DISABLED","addEnabledElement","removeEnabledElement","_addCornerstoneEventListeners","_removeCornerstoneToolsEventListeners","ANNOTATION_SELECTION_CHANGE","SEGMENTATION_MODIFIED","SEGMENTATION_DATA_MODIFIED","SEGMENTATION_REPRESENTATION_MODIFIED","SEGMENTATION_REPRESENTATION_ADDED","destroy","annotationManager","getAnnotationManager","segmentationStateManager","restoreAnnotations","resetState","annotationRenderingEngine","_needsRender","_animationFrameSet","_animationFrameHandle","_renderFlaggedViewports","_throwIfDestroyed","elements","_viewportElements","_triggerRender","delete","size","_render","addViewportElement","removeViewportElement","_reset","renderViewport","_setViewportsToBeRenderedNextFrame","hasBeenDestroyed","_setAllViewportsToBeRenderedNextFrame","add","elementsEnabled","indexOf","window","requestAnimationFrame","getRenderingEngine","enabledTools","eventDetail","draw","anyRendered","renderAnnotation","rendered","ANNOTATION_RENDERED","cancelAnimationFrame","clear","FrameOfReferenceSpecificAnnotationManager","getGroupKey","annotationGroupSelector","FrameOfReferenceUID","_imageVolumeModifiedHandler","frameOfReferenceSpecificAnnotations","annotations","invalidated","getFramesOfReference","getAnnotations","groupKey","getAnnotation","frameOfReferenceUID","frameOfReferenceAnnotations","toolSpecificAnnotations","getNumberOfAnnotations","total","addAnnotation","preprocessingFn","push","removeAnnotation","groupAnnotations","toolAnnotations","index","findIndex","splice","removeAnnotations","removedAnnotations","annotationsForTool","saveAnnotations","structuredClone","state","flat","getNumberOfAllAnnotations","count","removeAllAnnotations","IMAGE_VOLUME_MODIFIED","setPreprocessingFn","defaultFrameOfReferenceSpecificAnnotationManager","globalLockedAnnotationUIDsSet","setAnnotationLocked","locked","makeEventDetail","lockedAnnotationUIDsSet","added","isLocked","lock","unlock","publish","unlockAllAnnotations","clearLockedAnnotationsSet","getAnnotationsLocked","isAnnotationLocked","getAnnotationsLockedCount","checkAndSetAnnotationLocked","freeze","item","ANNOTATION_LOCK_CHANGE","selectedAnnotationUIDs","setAnnotationSelected","selected","preserveSelected","clearSelectionSet","isSelected","selectAnnotation","deselectAnnotation","getAnnotationsSelected","getAnnotationsSelectedByToolName","isAnnotationSelected","getAnnotationsSelectedCount","selection","selectionSet","defaultManager","setAnnotationManager","manager","clearParentAnnotation","childUID","parentAnnotationUID","parentAnnotation","childUIDIndex","childAnnotationUIDs","addChildAnnotation","childAnnotation","parentUID","getParentAnnotation","getChildAnnotations","childAnnotationUID","HTMLDivElement","triggerAnnotationAddedForElement","triggerAnnotationAddedForFOR","triggerAnnotationRemoved","annotationManagerUID","invalidateAnnotation","currAnnotation","globalHiddenAnnotationUIDsSet","setAnnotationVisibility","visible","show","annotationUIDsSet","lastHidden","isVisible","hide","showAllAnnotations","isAnnotationVisible","lastVisible","hidden","ANNOTATION_VISIBILITY_CHANGE","checkAndSetAnnotationVisibility","_initializeConfig","colorHighlighted","colorSelected","colorLocked","textBoxVisibility","textBoxFontFamily","textBoxFontSize","textBoxColor","textBoxColorHighlighted","textBoxColorSelected","textBoxColorLocked","textBoxBackground","textBoxLinkLineWidth","textBoxLinkLineDash","textBoxShadow","angleArcLineDash","getAnnotationToolStyles","getViewportToolStyles","getToolGroupToolStyles","toolGroupId","toolGroups","getDefaultToolStyles","default","setAnnotationStyles","styles","annotationSpecificStyles","setViewportToolStyles","viewportSpecificStyles","setToolGroupToolStyles","toolGroupSpecificStyles","setDefaultToolStyles","toolStyle","specifications","_getToolStyle","property","annotationToolStyles","viewportToolStyles","global","toolGroupToolStyles","globalStyles","toolStyles","styleSpecifier","mode","alternatives","list","getHierarchalPropertyStyles","highlighted","Selected","Locked","autoGenerated","AutoGenerated","Default","eventType","ANNOTATION_ADDED","getToolGroupsWithToolName","viewportsToRender","viewportsInfo","viewportInfo","triggerAnnotationModified","changeType","ChangeTypes","HandlesUpdated","triggerAnnotationCompleted","_triggerAnnotationCompleted","triggerContourAnnotationCompleted","AnnotationGroup","annotationUIDs","_isVisible","visibleFilter","unboundVisibleFilter","setVisible","baseEvent","findNearby","uids","remove","annotationState","resetAnnotationManager","renderers","Contour","Surface","planarContourToolName","triggerSegmentationRender","segmentationRenderingEngine","renderSegmentationsForViewport","triggerSegmentationRenderBySegmentationId","renderSegmentation","_pendingRenderQueue","_getAllViewports","_renderFlaggedSegmentations","nextViewportIds","shift","_getViewportIdsForSegmentation","segmentationRepresentations","viewportRenderList","segmentationRenderList","_addPlanarFreeHandToolIfAbsent","display","error","Promise","resolve","allSettled","then","results","segmentationDetails","status","onSegmentationRender","SEGMENTATION_RENDERED","tools","addTool","setToolPassive","initialDefaultState","colorLUT","segmentations","viewportSegRepresentations","internalComputeVolumeLabelmapFromStack","imageIds","segmentationImageIds","volumeLoader","internalConvertStackToVolumeLabelmap","segmentation","defaultSegmentationStateManager","getDefaultRenderingConfig","cfun","ofun","addPoint","_stackLabelmapImageIdReferenceMap","_labelmapImageIdReferenceMap","getState","updateState","updater","newState","getColorLUT","lutIndex","getNextColorLUTIndex","updateSegmentation","payload","draftState","triggerSegmentationModified","addSegmentation","newSegmentation","getLabelmapImageIds","removeSegmentation","filteredSegmentations","triggerSegmentationRemoved","addSegmentationRepresentation","renderingConfig","getSegmentationRepresentations","debug","setRenderInactiveSegmentations","addDefaultSegmentationRepresentation","addLabelmapRepresentation","triggerSegmentationRepresentationModified","segmentReps","segments","segmentIndex","active","colorLUTIndex","_setActiveSegmentation","processLabelmapRepresentationAddition","volumeViewport","isBaseVolumeSegmentation","_updateLabelmapSegmentationReferences","labelmapImageIds","updateCallback","referenceImageId","viewableLabelmapImageIdFound","labelmapImageId","referencedImageId","asOverlay","_updateLabelmapImageIdReferenceMap","stackViewport","_updateAllLabelmapSegmentationImageReferences","getImageIds","sliceIndex","withNavigation","labelmapData","getLabelmapImageIdsForImageId","_generateMapKey","getCurrentLabelmapImageIdsForViewport","getCurrentLabelmapImageIdForViewport","getStackSegmentationImageIdsForViewport","associatedReferenceImageAndLabelmapImageIds","removeSegmentationRepresentationsInternal","specifier","removedRepresentations","currentRepresentations","activeRepresentationRemoved","every","shouldRemove","removeSegmentationRepresentations","triggerSegmentationRepresentationRemoved","remainingRepresentations","removeSegmentationRepresentation","suppressEvent","currentValues","newValues","setActiveSegmentation","getActiveSegmentation","activeSegRep","segRep","viewportRepresentations","typeMatch","idMatch","getSegmentationRepresentationVisibility","viewportRepresentation","setSegmentationRepresentationVisibility","entries","segment","addColorLUT","removeColorLUT","_getStackIdForImageIds","slice","round","join","getAllViewportSegmentationRepresentations","getSegmentationRepresentationsBySegmentationId","result","viewportReps","filteredReps","indexToUse","colorLUTToUse","missingColorLUTs","addSegmentationRepresentations","segmentationInputArray","segmentationInput","addContourRepresentationToViewport","contourInputArray","input","addContourRepresentationToViewportMap","viewportInputMap","inputArray","addLabelmapRepresentationToViewport","labelmapInputArray","addLabelmapRepresentationToViewportMap","addSurfaceRepresentationToViewport","surfaceInputArray","addSurfaceRepresentationToViewportMap","inputData","contourData","geometryIds","annotationUIDsMap","normalizedSegments","segmentsConfig","label","cachedStats","rest","normalizedSegment","geometryId","geometry","getGeometry","normalizeContourSegments","surfaceData","normalizeSurfaceSegments","normalizeSegments","addSegmentations","suppressEvents","setColorLUT","colorLUTsIndex","segmentationRepresentation","getSegmentIndexColor","colorValue","setSegmentIndexColor","colorReference","getActiveSegmentIndex","activeSegmentIndex","getSegmentations","viewportSegmentations","getViewportSegmentations","getViewportSegmentationRepresentations","computeStackLabelmapFromVolume","convertVolumeToStackLabelmap","computeVolumeLabelmapFromStack","args","getActorEntry","filterFn","filteredActors","getLabelmapActorUID","getLabelmapActorEntry","getLabelmapActorEntries","getActorEntries","startsWith","getSurfaceActorEntry","getSurfaceRepresentationUID","updateSegmentations","segmentationUpdateArray","segmentationUpdate","visibility","setSegmentIndexVisibility","getSegmentIndexVisibility","getHiddenSegmentIndices","reduce","acc","getStyle","setStyle","renderInactiveSegmentations","getRenderInactiveSegmentations","resetToGlobalStyle","hasCustomStyle","clearSegmentValue","setAtIndex","triggerSegmentationDataModified","removeSegment","setNextSegmentAsActive","getAnnotationsUIDMapFromSegmentation","removeCompleteContourAnnotation","removeContourSegmentAnnotations","isThisSegmentActive","updatedSegments","segmentIndices","sort","a","b","currentIndex","nextSegmentIndex","previousSegmentIndex","setActiveSegmentIndex","helpers","convertStackToVolumeLabelmap","internalAddSegmentationRepresentation","representationInput","getColorLUTIndex","firstSegmentIndex","segmentKeys","k","colorLUTOrIndex","JSON","parse","stringify","rep","removeAllSegmentations","immediate","_removeSegmentationRepresentations","labelmapDisplay","contourDisplay","removeRepresentation","surfaceDisplay","_removeRepresentationObject","removeAllSegmentationRepresentations","removeLabelmapRepresentation","removeContourRepresentation","removeSurfaceRepresentation","isSegmentIndexLocked","setSegmentIndexLocked","_setContourSegmentationSegmentAnnotationsLocked","getLockedSegmentIndices","parseInt","convertContourHoles","targetSegmentationId","targetSegmentationIndex","annotationsUIDsSet","targetUIDsSet","targetSegmentation","polylinesCanvasMap","polylines","holeDetectionResults","findContourHoles","hole","holeIndexes","decimateContours","epsilon","polylineCanvas","decimatedPolyline2D","point2D","canvasToWorld","closePolyline","closed","lastPoint","extractSegmentPolylines","contourRepresentationData","polyLinesMap","annotationUIDsInSegmentMap","getAnnotationMapFromSegmentation","annotationsInfo","annotationInfo","isClosed","holesUIDs","holesPolyline","holesClosed","getPolylinesMap","convertContourPolylineToCanvasSpace","annotationMap","annotationUIDsInSegment","hasChildAnnotations","childPolylinesInformation","childInfo","childPolylines","getViewportsAssociatedToSegmentation","getViewportAssociatedToSegmentation","getViewportWithMatchingViewPlaneNormal","dotThreshold","annotationViewPlaneNormal","viewPlaneNormal","normalizedAnnotationNormal","camera","getCamera","normalizedCameraNormal","dotProduct","removeContourHoles","removeContourIslands","threshold","islands","smoothContours","knotsRatioPercentage","smoothedPolyline","_getViewportIndex","arr","ar","_containsViewport","synchronizerId","eventName","eventHandler","_viewportOptions","_onEvent","_ignoreFiredEvents","_targetViewports","_eventSource","currentTarget","_sourceViewports","s","fireEvent","_enabled","_eventName","_eventHandler","_options","eventSource","_auxiliaryEvents","auxiliaryEvents","isDisabled","_hasSourceElements","setOptions","setEnabled","enabled","getOptions","addTarget","addSource","source","_updateDisableHandlers","getSourceViewports","getTargetViewports","removeSource","removeTarget","getViewportElement","hasSourceViewport","hasTargetViewport","sourceViewport","sourceEvent","promises","targetViewport","ex","vp1","vp2","unique","vps","concat","u","_getUniqueViewports","_remove","disableHandler","getEventSource","synchronizers","sync","synchronizer","pop","synchronizerIndex","synchronizersFilteredByIds","notDisabled","Disabled","PRIMARY_BINDINGS","mouseButton","MouseBindings","Primary","ToolGroup","toolOptions","currentActivePrimaryToolName","prevActivePrimaryToolName","restoreToolOptions","_toolInstances","getViewportIds","getViewportsInfo","getToolInstance","toolInstanceName","toolInstance","getToolInstances","configuration","toolDefinition","hasToolName","localToolInstance","toolClass","ToolClass","instantiatedTool","addToolInstance","parentClassName","ToolClassToUse","ParentClass","ToolInstance","addViewport","renderingEngineUIDToUse","_findRenderingEngine","vpId","getActivePrimaryMouseButtonTool","setViewportsCursorByToolName","TOOLGROUP_VIEWPORT_ADDED","removeViewports","indices","vpInfo","TOOLGROUP_VIEWPORT_REMOVED","setActiveStrategy","strategyName","setToolMode","setToolDisabled","setToolEnabled","setToolActive","toolBindingsOptions","bindings","binding","TouchBinding","numTouchPoints","MouseBinding","obj","hasSameBinding","_hasMousePrimaryButtonBinding","_setCursorForViewports","onSetToolActive","_renderViewports","TOOL_ACTIVATED","_triggerToolModeChangedEvent","prevToolOptions","matchBindings","removeAllBindings","getDefaultPrimaryBindings","matchBinding","onSetToolPassive","onSetToolEnabled","onSetToolDisabled","toolOptionsForTool","_getCursor","Settings","getRuntimeSettings","setToolConfiguration","overwrite","_configuration","onSetToolConfiguration","getDefaultMousePrimary","getToolConfiguration","configurationPath","getPrevActivePrimaryToolName","setActivePrimaryTool","activeToolName","getCurrentActivePrimaryToolName","clone","newToolGroupId","fnToolFilter","sourceToolInstance","sourceToolOptions","sourceToolMode","primaryBindings","primary","TOOL_MODE_CHANGED","renderingEngines","matchingEngines","engine","binding1","binding2","modifierKey","tg","toolGroupIndex","svgLayer","svgLayerId","classList","pointerEvents","feOffset","feColorMatrix","feBlend","_createSvgAnnotationLayer","viewportUid","renderingEngineUid","dataset","elementHash","svgNodeCache","_setSvgNodeCache","enabledElements","hasToolByName","removeTool","cancelActiveManipulations","toolsWithData","cancel","VIEWPORT_ELEMENT","_removeViewportFromSynchronizers","_removeViewportFromToolGroup","_removeEnabledElement","foundElementIndex","el","elementDisabledEvt","_resetSvgNodeCache","internalViewportNode","_removeSvgNode","defaultState","isInteractingWithTool","isMultiPartToolActive","resetCornerstoneToolsState","resetSvgNodeCache","areViewportsCoplanar","viewport1","viewport2","viewPlaneNormal1","viewPlaneNormal2","dotProducts","cameraSyncCallback","synchronizerInstance","cameraModifiedEvent","tViewport","setCamera","getSpatialRegistration","targetId","sourceId","imageSliceSyncCallback","sViewport","disabled","imageId1","sourceImagePositionPatient","metaData","imagePositionPatient","targetImageIds","registrationMatrixMat4","getFrameOfReferenceUID","useInitialPosition","targetImagePositionPatientWithRegistrationMatrix","closestImageIdIndex2","targetPoint","closestImageIdIndex","distance","Infinity","imageIndexToSet","getCurrentImageIdIndex","imageIndex","presentationViewSyncCallback","_synchronizerInstance","_sourceEvent","presentationView","getViewPresentation","setViewPresentation","slabThicknessSyncCallback","slabThickness","getSlabThickness","setSlabThickness","voiSyncCallback","modifiedEvent","range","invertStateChanged","invert","colormap","tProperties","voiRange","syncInvertState","syncColormap","_actors","setProperties","zoomPanSyncCallback","syncZoom","srcZoom","getZoom","setZoom","syncPan","srcPan","getPan","setPan","createStackImageSynchronizer","createCameraPositionSynchronizer","synchronizerName","createSynchronizer","STACK_NEW_IMAGE","VOLUME_NEW_IMAGE","createImageSliceSynchronizer","createPresentationViewSynchronizer","viewPresentation","createVOISynchronizer","VOI_MODIFIED","COLORMAP_MODIFIED","createZoomPanSynchronizer","csEvents","isSegmentation","AdvancedMagnifyToolActions","PARALLEL_THRESHOLD","CONSTANTS","AdvancedMagnifyTool","Actions","toolProps","defaultToolProps","supportedInteractionTypes","magnifyingGlass","radius","zoomFactor","zoomFactorList","autoPan","actions","showZoomFactorsList","method","Secondary","KeyboardBindings","Shift","addNewAnnotation","currentPoints","worldPos","world","canvasPos","canvas","canvasHandlePoints","_getCanvasHandlePoints","viewUp","getReferencedImageId","magnifyViewportId","getToolName","sourceViewportId","isCanvasAnnotation","handles","activeHandleIndex","magnifyViewportManager","createViewport","sourceEnabledElement","annotationPoints","canvasDelta","delta","len","viewportIdsToRender","getViewportIdsWithToolToRender","preventDefault","dispose","isPointNearTool","canvasCoords","proximity","canvasTop","canvasBottom","canvasLeft","radiusPoint","getCanvasCircleRadius","toolSelectedCallback","editData","_activateModify","handleSelectedCallback","handleIndex","p","_endCallback","newAnnotation","_deactivateModify","isDrawing","_dragDrawCallback","deltaPoints","hasMoved","_dragModifyCallback","_dragHandle","canvasCenter","currentCanvasPoints","newRadius","newCanvasHandlePoints","renderStatus","filteredAnnotations","filterInteractableAnnotationsForElement","activeHandleCanvasCoords","drawHandles","circleUID","drawCircle","magnifyViewport","update","canvasCenterPos","canvasRadius","AdvancedMagnifyViewportManager","getInstance","canvasPoint","viewportElement","currentZoomFactor","dropdown","_getZoomFactorsListDropdown","newZoomFactor","parentElement","focus","onChangeCallback","createElement","stopPropagation","keyCode","which","toLowerCase","option","title","defaultSelected","sourceElement","AdvancedMagnifyViewport","_addSourceElementEventListener","_magnifyViewportsMap","magnifyViewportInfo","_annotationRemovedCallback","destroyViewport","_newStackImageCallback","magnifyViewportsMapEntries","_getMagnifyViewportsMapEntriesBySourceViewportId","stackActorReInitialized","_newVolumeImageCallback","currentViewPlaneNormal","worldImagePlanePoint","vecHandleToImagePlane","worldDist","worldDelta","_initialize","_singleton","_removeEventListeners","_destroyViewports","magnifyViewportMapEntry","_removeSourceElementEventListener","newEnabledElement","_addEventListeners","newStackHandler","VIEWPORT_NEW_IMAGE_SET","newVolumeHandler","VOLUME_VIEWPORT_NEW_VOLUME","_enabledElement","_sourceToolGroup","_magnifyToolGroup","_isViewportReady","_radius","_resized","_canAutoPan","_viewportId","_sourceEnabledElement","_autoPan","_browserMouseDownCallback","_browserMouseUpCallback","_handleToolModeChanged","_mouseDragCallback","_resizeViewportAsync","_resizeViewport","_syncViewports","disableElement","parentNode","magnifyToolGroup","_inheritBorderRadius","magnifyElement","borderRadius","_createViewportNode","overflow","boxSizing","_convertZoomFactorToParallelScale","parallelScale","offsetWidth","_isStackViewport","_isVolumeViewport","_cloneToolGroups","sourceActors","magnifyToolGroupId","sourceToolGroup","_cloneStack","setStack","_cloneVolumes","volumeInputArray","setVolumes","_cloneViewport","sourceViewportOptions","viewportInput","defaultOptions","enableElement","_cancelMouseEventCallback","target","closest","canvasCurrent","magnifyRadius","dist","distanceToPoint","maxDist","panDist","canvasDeltaPos","newCanvasPosition","currentWorldPos","newWorldPos","worldDeltaPos","autoPanCallbackData","currentPosition","newPosition","_addBrowserEventListeners","_removeBrowserEventListeners","sourceCanvas","_syncViewportsCameras","focalPoint","sqrt","pow","updatedFocalPoint","updatedPosition","_syncStackViewports","setImageIdIndex","sourceProperties","getProperties","getImageData","resize","AnnotationEraserTool","preMouseDownCallback","_deleteNearbyAnnotations","preTouchStartCallback","interactionType","annotationsToRemove","interactableAnnotations","createAnnotationMemo","deleting","RENDERING_DEFAULTS","defaultReferenceLineColor","defaultReferenceLineControllable","defaultReferenceLineDraggableRotatable","defaultReferenceLineSlabThicknessControlsOn","OPERATION","CrosshairsTool","viewportIndicators","viewportIndicatorsConfig","panSize","enableHDPIHandles","referenceLinesCenterGapRadius","referenceLinesCenterGapRatio","filterActorUIDsToSetSlabThickness","slabThicknessBlendMode","MAXIMUM_INTENSITY_BLEND","mobile","toolCenter","initializeViewport","_getAnnotations","cameraPosition","cameraFocalPoint","rotationPoints","slabThicknessPoints","activeOperation","activeViewportIds","normal","clientWidth","clientHeight","_getViewportsInfo","getToolGroup","resetCrosshairs","resetPan","resetZoom","resetToCenter","resetRotation","resetCamera","resetSlabThickness","_computeToolCenter","computeToolCenter","firstViewport","secondViewport","thirdViewport","normal1","point1","normal2","point2","normal3","point3","firstPlane","secondPlane","thirdPlane","setToolCenter","jumpWorld","_jump","viewportIdArray","otherViewport","viewportControllable","_getReferenceLineControllable","viewportDraggableRotatable","_getReferenceLineDraggableRotatable","_pointNearTool","viewportAnnotation","currentCamera","oldCameraPosition","deltaCameraPosition","oldCameraFocalPoint","deltaCameraFocalPoint","isRotation","cameraModifiedInPlane","CROSSHAIR_TOOL_CENTER_CHANGED","_autoPanViewportIfNecessary","mouseMoveCallback","filteredToolAnnotations","imageNeedsUpdate","previousActiveOperation","previousActiveViewportIds","near","getHandleNearImagePoint","_areViewportIdArraysEqual","canvasDiagonalLength","canvasMinDimensionLength","crosshairCenterCanvas","worldToCanvas","otherViewportAnnotations","_filterAnnotationsByUniqueViewportOrientations","referenceLines","canvasBox","otherCamera","otherViewportControllable","otherViewportDraggableRotatable","otherViewportSlabThicknessControlsOn","_getReferenceLineSlabThicknessControlsOn","otherCanvasDiagonalLength","otherCanvasCenter","otherViewportCenterWorld","pointWorld0","pointWorld1","pointCanvas0","otherViewportCenterCanvas","canvasUnitVectorFromCenter","canvasVectorFromCenterLong","canvasVectorFromCenterMid","canvasVectorFromCenterShort","canvasVectorFromCenterStart","mobileConfig","centerGap","refLinePointOne","refLinePointTwo","refLinePointThree","refLinePointFour","refLinesCenter","rotHandleOne","rotHandleTwo","stHandlesCenterCanvas","stHandlesCenterWorld","worldUnitVectorFromCenter","matrix","buildFromDegree","rotate","worldUnitOrthoVectorFromCenter","slabThicknessValue","worldOrthoVectorFromCenter","worldVerticalRefPoint","canvasVerticalRefPoint","canvasOrthoVectorFromCenter","stLinePointOne","stLinePointTwo","stLinePointThree","stLinePointFour","stHandleOne","stHandleTwo","stHandleThree","stHandleFour","newRtpoints","newStpoints","viewportColor","_getReferenceLineColor","line","lineIndex","viewportSlabThicknessControlsOn","selectedViewportId","lineActive","rotHandlesActive","rotationHandles","rotHandleWorldOne","rotHandleWorldTwo","slabThicknessHandlesActive","slabThicknessHandles","slabThicknessHandleWorldOne","slabThicknessHandleWorldTwo","slabThicknessHandleWorldThree","slabThicknessHandleWorldFour","devicePixelRatio","handleUID","referenceColorCoordinates","xOffset","yOffset","circleRadius","_onNewVolume","viewportIdArrayOne","viewportIdArrayTwo","itemFound","_getAnnotationsForViewportsWithDifferentCameras","viewportsWithDifferentCameras","cameraOfTarget","_filterViewportWithSameOrientation","referenceAnnotation","linkedViewportAnnotations","otherViewPlaneNormal","otherLinkedViewportAnnotationsFromSameScene","otherViewportsAnnotationsWithUniqueCameras","cameraFound","jj","cameraOfStocked","otherNonLinkedViewportAnnotationsFromSameScene","_checkIfViewportsRenderingSameScene","volumeIds","getAllVolumeIds","otherVolumeIds","viewportsAnnotationsToUpdate","sameScene","_applyDeltaShiftToSelectedViewportCameras","_dragCallback","dir1","dir2","centerCanvas","finalPointCanvas","originalPointCanvas","_isClockWise","rotationAxis","buildFromRadian","translate","otherViewportsIds","renderViewports","referenceAnnotations","viewportsIds","dotProd","projectedDelta","mod","currentPoint","lastPoints","currentCenter","otherViewportRotationPoints","dotProdDirection","projectedDirection","normalizedProjectedDirection","normalizedProjectedDelta","MINIMUM_SLAB_THICKNESS","_pointNearReferenceLine","lineViewport","lineSegment1","distanceToPoint1","lineSegment2","distanceToPoint2","getReferenceLineColor","getReferenceLineControllable","getReferenceLineDraggableRotatable","getReferenceLineSlabThicknessControlsOn","_unsubscribeToViewportNewVolumeSet","_subscribeToViewportNewVolumeSet","scroll","scrollDelta","newFocalPoint","_getRotationHandleNearImagePoint","_getSlabThicknessHandleNearImagePoint","toolCenterCanvas","pan","visiblePointCanvas","visiblePointWorld","deltaPointsWorld","actorUIDs","blendModeToUse","COMPOSITE","setBlendMode","c","_applyDeltaShiftToViewportCamera","annotationCanvasCoordinate","stPointLineCanvas1","stPointLineCanvas2","stPointLineCanvas1Start","stPointLineCanvas2Start","MIPJumpToClickTool","targetViewportIds","mouseClickCallback","getVolumeId","maxIntensity","brightestPoint","getPointInLineOfSightWithCriteria","intensity","foundToolGroup","jumpToWorld","MAGNIFY_VIEWPORT_ID","MagnifyTool","magnifySize","magnifyWidth","magnifyHeight","_hasBeenRemoved","_getReferencedImageId","_createMagnificationViewport","_activateDraw","viewportProperties","rotation","originalViewportRotation","magnifyToolElement","STACK","_cancelCallback","_dragEndCallback","_deactivateDraw","getTargetId","split","OverlayMarkerType","OrientationMarkerTool","CUBE","AXIS","VTPFILE","OVERLAY_MARKER_TYPES","orientationWidget","viewportCorner","Corners","BOTTOM_RIGHT","viewportSize","minPixelSize","maxPixelSize","overlayMarkerType","ANNOTATED_CUBE","overlayConfiguration","faceProperties","xPlus","faceColor","faceRotation","xMinus","yPlus","fontColor","yMinus","zPlus","zMinus","defaultStyle","fontStyle","fontSizeScale","res","edgeThickness","edgeColor","resolution","AXES","CUSTOM","polyDataURL","_resizeObservers","initViewports","_subscribeToViewportEvents","cleanUpData","orientationMarker","orientationMarkers","updateViewport","updatingOrientationMarker","unsubscribe","unobserve","subscribeToElementResize","resizeObserver","ResizeObserver","setTimeout","observe","getOffscreenMultiRenderWindow","getRenderWindow","filterViewportsWithToolEnabled","widget","getWidget","isDeleted","addAxisActorInViewport","getRenderer","removeActor","createAnnotationCube","createCustomActor","renderer","renderWindow","interactor","getInteractor","parentRenderer","setViewportCorner","setViewportSize","setMinPixelSize","setMaxPixelSize","updateMarkerOrientation","addWidget","response","fetch","arrayBuffer","vtpReader","parseAsArrayBuffer","polyData","shallowCopy","getOutputData","setActiveScalars","mapper","setColorModeToDirectScalars","setMapper","rotateZ","setDefaultStyle","setXPlusFaceProperty","setXMinusFaceProperty","setYPlusFaceProperty","setYMinusFaceProperty","setZPlusFaceProperty","setZMinusFaceProperty","createAnnotatedCubeActor","axes","annotatedCube","methodName","charAt","toUpperCase","EPSILON","OverlayGridTool","A","sourceImageIds","_init","imagePlaneModule","pointSets","calculateImageIdPointSets","viewportData","rows","columns","rowCosines","columnCosines","rowPixelSpacing","columnPixelSpacing","pointSet1","pointSet2","imageIdNormal","getImageIdNormal","isParallel","targetViewportPlane","targetData","initializeViewportData","pointSetsToUse","pointSetToUse","topBottomVec","isPerpendicular","lineStartsWorld","lineEndsWorld","lineStartWorld","lineEndWorld","vec1","vec2","dot","imageOrientationPatient","rowCosineVec","colCosineVec","PanTool","limitToViewport","touchDragCallback","mouseDragCallback","_checkImageInViewport","deltaPointsCanvas","ratio","viewportRight","viewportBottom","defaultActor","getDefaultActor","bounds","getBounds","computeVisiblePropBounds","imageLeft","imageTop","imageRight","imageBottom","PlanarRotateTool","mouseWheelCallback","wheel","setAngle","startPoints","currentPointWorld","startPointWorld","centerWorld","v1","v2","cross","rotAngle","rotMat","Float32Array","rotatedViewUp","ReferenceCursors","preventHandleOutsideImage","displayThreshold","positionSync","disableCursor","isHandleOutsideImage","_elementWithCursor","_currentCursorWorldPosition","_currentCanvasPosition","_disableCursorEnabled","getActiveAnnotation","createInitialAnnotation","updateAnnotationPosition","textBox","worldPosition","worldBoundingBox","previousCamera","oldFocalPoint","cameraNormal","isElementWithCursor","updateViewportImage","lineWidthBase","e","crosshairUIDs","upper","lower","centerSpace","lineLength","plane","currentMousePosition","closestIndex","currentDistance","normalizedViewPlane","scaledPlaneNormal","ReferenceLines","enforceSameFrameOfReference","showFullDimension","sourceViewportCanvasCornersInWorld","sourceViewPlaneNormal","topRightVec","newNormal","handleFullDimension","targetImage","getTargetImageData","topLeftImageCoord","topRightImageCoord","bottomRightImageCoord","bottomLeftImageCoord","indexToWorld","lineStartImageCoord","lineEndImageCoord","intersectInfiniteLines","isInBound","err","line1Start","line1End","line2Start","line2End","x3","y3","x4","y4","a1","b1","c1","a2","b2","c2","viewportsWithAnnotations","ScaleOverlayTool","scaleLocation","viewportCanvasCornersInWorld","thisAnnotation","computeScaleSize","worldWidthViewport","worldHeightViewport","location","scaleSizes","currentScaleSize","scaleSize","computeEndScaleTicks","locationTickOffset","endTick1","endTick2","computeInnerScaleTicks","leftTick","rightTick","canvasScaleSize","tickIds","tickUIDs","tickCoordinates","numberSmallTicks","tickSpacing","locationOffset","computeWorldScaleCoordinates","pointSet","worldCoordinates","midpointLocation","midpoint","offset","computeCanvasScaleCoordinates","canvasSize","vscaleBounds","hscaleBounds","scaleCanvasCoordinates","worldDistanceOnCanvas","computeScaleBounds","horizontalReduction","verticalReduction","hReduction","vReduction","locationBounds","canvasBounds","scaleTicks","scaleId","leftTickId","rightTickId","locationTextOffest","textCanvasCoordinates","textBoxLines","_getTextLines","drawTextBox","scaleSizeDisplayValue","scaleSizeUnits","SculptorTool","minSpacing","referencedToolNames","toolShape","referencedToolName","updateCursorSize","registeredShapes","isActive","commonData","activeAnnotationUID","isEditingOpenContour","canvasLocation","configureToolSize","selectFreehandTool","activateModify","updateCursor","endCallback","deactivateModify","activeAnnotation","filterSculptableAnnotationsForElement","calculateStats","dragCallback","sculpt","registerShapes","shapeName","setToolShape","shapeClass","shape","cursorShape","selectedShape","sculptData","mouseCanvasPoint","deltaWorld","maxSpacing","getMaxSpacing","pushedHandles","pushHandles","first","insertNewHandles","interpolatePointsWithinMaxSpacing","indicesToInsertAfter","nextHandleIndex","contourIndex","currentCanvasPoint","nextCanvasPoint","updateToolSize","sculptableAnnotations","findNewHandleIndices","newIndexModifier","insertIndex","insertHandleRadially","last","previousIndex","nextIndex","handleData","getInsertPosition","closestAnnotationUID","getClosestFreehandToolOnElement","canvasPoints","toolIndex","distanceFromTool","renderShape","SegmentationIntersectionTool","actorsWorldPointsMap","calculateSurfaceSegmentationIntersectionsForViewport","calculateSurfaceSegmentationIntersections","cacheId","getCacheId","clippingFilter","actorWorldPointMap","polyLineIdx","worldPointsSet","polyLineUID","actorWorldPointsMap","polyDataUtils","colorArray","colorComponentToString","component","componentString","floor","colorToString","getProperty","getColor","StackScrollTool","debounceIfNotLoaded","loop","deltaY","_scroll","_scrollDrag","deltaPointY","pixelsPerImage","_getPixelPerImage","imageIdIndexOffset","debounceLoading","scrollSlabs","numberOfSlices","getNumberOfSlices","offsetHeight","TrackballRotateTool","rotateIncrementDegrees","rotateSampleDistanceFactor","_hasResolutionChanged","originalSampleDistance","getSampleDistance","setSampleDistance","cleanUp","once","_viewportAddedListener","disconnect","rotateCamera","axis","vtkCamera","getVtkActiveCamera","getViewUp","getFocalPoint","getPosition","newViewUp","currentPointsCanvas","lastPointsCanvas","normalizedPosition","normalizedPreviousPosition","radsq","op","oe","opsq","oesq","lop","loe","nop","noe","angleX","acos","sign","upVec","atV","rightV","forwardV","angleY","VolumeCroppingControlTool","extendReferenceLines","initialCropFactor","lineColors","AXIAL","CORONAL","SAGITTAL","UNKNOWN","lineWidthActive","_virtualAnnotations","sphereStates","draggingSphereIndex","toolCenterMin","toolCenterMax","_updateToolCentersFromViewport","orientation","_getOrientationFromNormal","resetCroppingSpheres","orientationIds","presentOrientations","Boolean","missingOrientation","presentNormals","presentCenters","presentViewportInfos","virtualNormal","virtualCenter","virtualAnnotation","isVirtual","presentOrientation","presentCenter","canonicalNormals","virtualAnnotations","lineIntersection2D","p1","p2","q1","q2","s1_x","s1_y","s2_x","s2_y","denom","volumeCroppingCenterCanvasMin","volumeCroppingCenterCanvasMax","realViewports","refLinesCenterMin","refLinePointMinOne","refLinePointMinTwo","refLinesCenterMax","refLinePointMaxOne","refLinePointMaxTwo","intersections","otherLine","intersection","with","annotationForViewport","String","idUpper","colorArr","unknown","v","activeLineWidth","sortedIntersections","_onSphereMoved","originalClippingPlanes","_syncWithVolumeCroppingTool","seriesInstanceUID","newMin","newMax","idx","volumeActors","VOLUMECROPPINGCONTROL_TOOL_CHANGED","VOLUME_3D","activeType","handleType","viewportOrientation","VOLUMECROPPING_TOOL_CHANGED","getSpacing","getOrigin","cropFactor","maxCropFactor","cropStart","cropEnd","onSetToolInactive","anyAnnotationExists","canonical","tol","planes","start1","end1","PLANEINDEX","SPHEREINDEX","XMIN","XMAX","YMIN","YMAX","ZMIN","ZMAX","XMIN_YMIN_ZMIN","XMIN_YMIN_ZMAX","XMIN_YMAX_ZMIN","XMIN_YMAX_ZMAX","XMAX_YMIN_ZMIN","XMAX_YMIN_ZMAX","XMAX_YMAX_ZMIN","XMAX_YMAX_ZMAX","VolumeCroppingTool","showCornerSpheres","showHandles","showClippingPlanes","sphereColors","CORNERS","sphereRadius","grabSpherePixelDistance","cornerDragOffset","faceDragOffset","edgeLines","_updateClippingPlanes","mouseCanvas","sphereCanvas","sphereState","mouseWorld","isCorner","axisIdx","z","viewport3D","_updateCornerSpheres","_updateFaceSpheresFromCorners","_updateClippingPlanesFromFaceSpheres","_onMouseMoveSphere","_getViewportAndWorldCoords","newCorner","_calculateNewCornerPosition","_updateSpherePosition","axisFlags","_parseCornerKey","_updateRelatedCorners","sphereSource","setCenter","_updateCornerSpheresFromFaces","_triggerToolChangedEvent","_onControlToolChange","_getViewport","isMin","normals","planeIndices","sphereIndices","orientationAxes","newCenter","sphereActor","setColor","volumeActor","clippingPlanes","getClippingPlanes","_initialize3DViewports","worldBounds","xRange","yRange","zRange","xMin","xMax","yMin","yMax","zMin","zMax","planeXmin","planeXmax","planeYmin","planeYmax","planeZmin","planeZmax","originalPlanes","getNormal","sphereXminPoint","sphereXmaxPoint","sphereYminPoint","sphereYmaxPoint","sphereZminPoint","sphereZmaxPoint","adaptiveRadius","_calculateAdaptiveSphereRadius","_addSphere","corners","cornerKeys","key1","key2","state1","state2","_addLine3DBetweenPoints","addClippingPlane","_handleCornerSphereMovement","_updateAfterCornerMovement","_handleFaceSphereMovement","_updateAfterFaceMovement","cornerKey","isXMin","isXMax","isYMin","isYMax","isZMin","isZMax","draggedSphere","_shouldUpdateCorner","_updateCornerCoordinates","_rotateCamera","setHandlesVisible","setClippingPlanesVisible","_updateHandlesVisibility","getHandlesVisible","getClippingPlanesVisible","normalizedCenter","_missingActorWarned","getMatrix","removeAllClippingPlanes","rot","normalMatrix","transformedOrigins","transformedNormals","oVec","o","nVec","n","planeInstance","setVisibility","setNumberOfPoints","setPoint","lines","setPoints","setLines","setLineWidth","setOpacity","setInterpolationToFlat","setAmbient","setDiffuse","setSpecular","addActor","setRadius","sphereMapper","setInputConnection","getOutputPort","diagonal","sphereRadiusScale","minRadius","minSphereRadius","maxRadius","maxSphereRadius","pos","corner","xs","ys","zs","getPoints","DIRECTIONS","VolumeRotateTool","cz","ax","ay","az","WindowLevelRegionTool","minWindowWidth","applyWindowLevelRegion","bottomLeftCanvas","topRightCanvas","bottomRightCanvas","topLeftCanvas","bottomRightWorld","topLeftWorld","getAnnotationStyle","drawRect","windowLevel","startCanvas","endCanvas","pixelLuminanceData","minMaxMean","minPixelValue","maxPixelValue","windowWidth","windowCenter","mean","voiLutFunction","VOILUTFunction","WindowLevelTool","_getImageDynamicRangeFromMiddleSlice","scalarData","middleSliceIndex","frameLength","bytesPerVoxel","TypedArrayConstructor","Uint8Array","Uint16Array","Int16Array","frame","buffer","_getMinMax","modality","newRange","viewportsContainingVolumeUID","isPreScaled","properties","volume","Modality","scaling","preScale","scaled","scalingParameters","suvbw","getPTScaledNewRange","getNewRange","multiplier","_getMultiplierFromDynamicRange","wwDelta","wcDelta","imageDynamicRange","imageVolume","calculatedDynamicRange","getMiddleSliceData","pixel","BitsStored","metadataDynamicRange","calculatedRange","isFinite","_getImageDynamicRangeFromViewport","getRange","imageDataRange","getScalars","getData","voxel","ZoomTool","zoomToCenter","minZoomScale","maxZoomScale","pinchToZoom","initialMousePosWorld","dirVec","_dragParallelProjection","pinch","deltaDistance","parallelScaleToSet","focalPointToSet","positionToSet","distanceToCanvasCenter","cappedParallelScale","thresholdExceeded","imageWidth","imageHeight","canvasAspect","insetImageMultiplier","getConfiguration","rendering","useLegacyCameraFOV","displayArea","scaledImageWidth","imageArea","scaledImageHeight","minParallelScaleRequired","minScaleInWorld","maxScaleInWorld","_dragPerspectiveProjection","zoomScale","directionOfProjection","tmp","_pinchCallback","_zoom","currentPointsList","parallelProjection","_panCallback","eventDetails","page","client","AngleTool","showAngleArc","arcOffset","getTextLines","defaultGetTextLines","angleStartedNotYetCompleted","createAnnotation","movingTextBox","canvasPoint1","canvasPoint2","line1","canvasPoint3","line2","doneEditMemo","createMemo","worldPosDelta","_throttledCalculateCachedStats","_calculateCachedStats","showHandlesAlways","anglePoints","temp","getLinkedTextBoxStyle","canvasTextBoxCoords","textBoxPosition","textBoxUID","boundingBox","drawLinkedTextBox","trailing","hydrate","instance","hydrateBase","serializableOptions","worldPos1","worldPos2","worldPos3","targetIds","StatsUpdated","cachedVolumeStats","fromCharCode","ArrowAnnotateTool","getTextCallback","changeTextCallback","arrowFirst","arrowHeadStyle","startGroupRecording","memo","setAnnotationLabel","endGroupRecording","touchTapCallback","taps","doubleClickCallback","clickedAnnotation","_doneChangingTextCallback","stopImmediatePropagation","updatedLabel","_isInsideVolume","index1","index2","doneChangingTextCallback","prompt","transformWorldToIndex","BidirectionalTool","firstLineSegmentLength","longAxis","shortAxisPoint0","shortAxisPoint1","longAxisVector","counterClockWisePerpendicularToLongAxis","currentShortAxisVector","shortAxis","canvasCoordPoints","shortAxisDistFromCenter","dx","dy","vectorX","vectorY","xMid","yMid","startX","startY","endX","endY","_dragModifyHandle","movingHandleIndex","canvasCoordHandlesCurrent","firstLineSegment","secondLineSegment","proposedPoint","proposedCanvasCoord","fixedHandleCanvasCoord","fixedHandleToProposedCoordVec","fixedHandleToOldCoordVec","proposedFirstLineSegment","_movingLongAxisWouldPutItThroughShortAxis","centerOfRotation","_getSignedAngle","firstPointX","firstPointY","secondPointX","secondPointY","rotatedFirstPoint","rotatedFirstPointY","rotatedSecondPoint","rotatedSecondPointY","newFirstPoint","newSecondPoint","translateHandleIndex","canvasCoordsCurrent","longLineSegment","shortLineSegment","longLineSegmentVec","longLineSegmentVecNormalized","proposedToCurrentVec","movementLength","movementAlongLineSegmentLength","newTranslatedPoint","unit","dataId1","dataId2","secondLineUID","getTextBoxCoordsCanvas","vectorInSecondLineDirection","extendedSecondLineSegment","worldPos4","image","index3","index4","handles1","handles2","scale1","units1","scale2","units2","dist1","_calculateLength","dist2","widthUnit","vector1","vector2","majorAxis","minorAxis","major0","major1","minor0","minor1","pos1","pos2","dz","CircleROITool","storePointData","centerPointRadius","statsCalculator","BasicStatsCalculator","simplified","canvasHandles","radiusCanvas","newRadiusCanvas","canvasCorners","getCanvasCircleCorners","areaUnit","getStackViewports","referencedImageURI","hasImageURI","currentImageURI","area","stdDev","radiusUnit","perimeter","wasInvalidated","pos1Index","pos2Index","boundsIJK","xRadius","yRadius","zRadius","ellipseObj","worldWidth","worldHeight","isEmptyArea","aspect","pixelUnitsOptions","isSuvScaled","modalityUnit","pointsInShape","statsCallback","isInObject","pointLPS","pointInEllipse","fast","returnPoints","stats","getStatistics","statsArray","array","radiusLine","areaLine","CobbAngleTool","showArcLines","distanceToLines","isNearFirstLine","isNearSecondLine","_mouseDownCallback","arc1Angle","arc2Angle","arc1Start","arc1End","arc2Start","arc2End","mid1","mid2","arc1TextBoxUID","arc1TextLine","arch1TextPosCanvas","arc2TextBoxUID","arc2TextLine","arch2TextPosCanvas","point4","canvasPoint4","getArcsStartEndPoints","linkLine","arc1Side","arc2Side","midLinkLine","linkLineLength","midFirstLine","midSecondLine","directionVectorStartArc1","magnitudeStartArc1","normalizedDirectionStartArc1","directionVectorEndArc1","magnitudeEndArc1","normalizedDirectionEndArc1","directionVectorStartArc2","magnitudeStartArc2","normalizedDirectionStartArc2","directionVectorEndArc2","magnitudeEndArc2","normalizedDirectionEndArc2","seg1","seg2","minDist","MAX_VALUE","DragProbeTool","postMouseDownCallback","postTouchStartCallback","ETDRSGridTool","degrees","diameters","getViewReference","dXCanvas","dYCanvas","canvasEnd","diametersCanvas","diameter","worldMeasureToCanvas","degreesRad","angleRadians","degree","measurement","p1Canvas","p2Canvas","EllipticalROITool","minorEllipse","majorEllipse","pointInMinorEllipse","_pointInEllipseCanvas","canvasWidth","canvasHeight","originalHandleCanvas","pointsCanvas","dX","dY","bottomCanvas","topCanvas","leftCanvas","rightCanvas","newHalfCanvasWidth","canvasRight","newHalfCanvasHeight","getCanvasEllipseCorners","centerPoint","_getCanvasEllipseCenter","ellipse","rotLocation","normalized","ellipseCanvasPoints","HeightTool","_calculateHeight","outside","KeyImageTool","dataSeries","seriesLevel","dataPoint","isPoint","canvasPosition","createAnnotationForViewport","eventDispatchDetail","it","updatedText","LabelTool","textGroupElement","bbox","translateX","translateY","matches","initialWorldPos","anchorWorldPos","LabelChange","_evt","_annotation","_handle","_interactionType","LengthTool","undo","redo","LivewireContourSegmentationTool","updateInterpolatedAnnotation","interpolationSources","originalPolyline","queueMicrotask","setupBaseEditData","scissors","nearestEdge","repeatInterpolation","interpolation","originalPoints","worldToSlice","sliceToWorld","handleSmoothing","hIndex","testPoint","startSearch","findPathToPoint","minPoint","findMinNearby","acceptedPath","path","addPoints","updateAnnotation","scissorsNext","InterpolationUpdated","renderAnnotationInstance","renderContext","showInterpolationPolyline","polylineCanvasPoints","isContourSegmentationTool","LivewireContourTool","contourHoleAdditionModifierKey","snapHandleNearby","decimate","cancelInProgress","proximitySquared","startPoint","endPoint","clearAnnotation","clearEditData","Completed","triggerChangeEvent","doubleClick","worldPosOriginal","controlPoints","currentPath","getControlPoints","closestHandlePoint","distSquared","worldControlPoint","canvasControlPoint","snapPoint","pathPoints","prependPath","confirmedPath","getLastPoint","addControlPoint","_mouseMoveCallback","lastCanvasPoint","imgWidth","imgHeight","slicePoint","editHandle","originalWorldPoint","deltaXPoint","deltaYPoint","deltaInX","deltaInY","getCalibratedLengthUnitsAndScale","maxX","canvasMaxX","maxY","canvasMaxY","minX","canvasMinX","minY","canvasMinY","topLeftBBWorld","topLeftBBIndex","bottomRightBBWorld","_renderStats","textboxStyle","throttle","nextPos","viewportImageData","vtkImageData","sliceImageData","sliceToIndexMatrix","indexToSliceMatrix","ijkPoint","startPos","createInstanceFromRawPixelData","currentPathNext","confirmedPathNext","event","handlePoints","numHandles","previousHandle","nextHandle","slicePos","pathPointsLeft","pathPointsRight","reverse","appendPath","contourSegmentationAnnotation","annotationStyle","textbox","livewirePath","pointArray","imagePoints","targetWindingDirection","Clockwise","updateContourPolyline","ProbeTool","probeDefaults","textCanvasOffset","mergeDefaultProps","ijk","getAtIJKPoint","imageURI","calibratedResults","hasEnhancedRegionValues","units","RegionSegmentPlusTool","isPartialVolume","positiveSeedVariance","negativeSeedVariance","subVolumePaddingPercentage","islandRemoval","mouseTimer","allowedToProceed","worldPoint","clearTimeout","onMouseStable","mouseStabilityDelay","refVolume","growCutData","referencedVolumeId","seeds","positiveSeedIndices","negativeSeedIndices","worldIslandPoints","runGrowCut","getRemoveIslandData","getGrowCutLabelmap","mergedOptions","growCut","RegionSegmentTool","currentWorldPoint","circleBorderPoint","circleCenterPoint","sphereInfo","segmentationData","canvasCenterPoint","canvasBorderPoint","vecCenterToBorder","getSegmentStyle","SplineContourSegmentationTool","annotationCutMergeCompletedBinded","annotationCutMergeCompleted","initializeListeners","removeListeners","splineToolNames","simplifiedSpline","convertContourSegmentationAnnotation","DEFAULT_SPLINE_CONFIG","controlPointAdditionDistance","controlPointDeletionDistance","showControlPointsConnectors","controlPointAdditionEnabled","controlPointDeletionEnabled","SplineTypesEnum","SplineToolActions","SplineROITool","SplineTypes","spline","Cardinal","Class","CatmullRom","Linear","BSpline","drawPreviewEnabled","enableTwoPointPreview","lastControlPointDeletionKeys","AddControlPoint","DeleteControlPoint","Ctrl","fireChangeOnUpdate","isPointNearCurve","_keyDownCallback","controlPointIndex","_deleteControlPointByIndex","closeContour","addNewPoint","closestControlPoint","getClosestControlPointWithinDistance","moveAnnotation","addControlPointCallback","splineType","splineConfig","_getSplineConfig","closestPointInfo","getClosestPoint","addControlPointAtU","uValue","deleteControlPointCallback","annotationCompletedBinded","annotationCompleted","cancelAnnotation","annotationLocked","childAnnotations","_isSplineROIAnnotation","splinePolylineCanvas","_updateSplineInstance","getPolylinePoints","updateWindingDirection","numControlPoints","previewPolylinePoints","getPreviewPolylinePoints","controlPointsConnectors","createInterpolatedSplineControl","increment","isSplineAnnotation","createSplineObjectFromType","contourAnnotation","createSpline","onInterpolationComplete","splineConfigs","setControlPoints","fixedResolution","fixedScale","splineInstance","SplineClass","UltrasoundDirectionalTool","displayBothAxesDistances","startedDrawing","lineSegment","xValues","yValues","isHorizontal","isUnitless","drawHandle","canvasDeltaY","canvasDeltaX","projectedPointCanvas","imageIndex1","imageIndex2","values1","values2","transformIndexToWorld","UltrasoundPleuraBLineTool","USPleuraBLineAnnotationType","BLINE","PLEURA","bLineColor","pleuraColor","drawDepthGuide","depth_ratio","depthGuideColor","depthGuideThickness","depthGuideDashLength","depthGuideDashGap","depthGuideOpacity","fanOpacity","showFanAnnotations","updatePercentageCallback","pleuraAnnotations","bLineAnnotations","annotationType","getActiveAnnotationType","newPoint","isInsideFanShape","getFanShapeGeometryParameters","fanCenter","indexToCanvasRatio","getIndexToCanvasRatio","unMergedPleuraIntervals","mergedPleuraIntervals","pleuraIntervalsDisplayed","bLineIntervalsDisplayed","drawAnnotation","getColorForLineType","lineInterval","fanNumber","interval","clippedInterval","fanDataId","drawFan","calculateBLinePleuraPercentage","activeAnnotationType","filterAnnotations","filterFunction","countAnnotations","getImageIdIndex","annotationMapping","counts","bLine","pleura","deleteAnnotations","setActiveAnnotationType","deleteLastAnnotationType","annotationList","updateFanGeometryConfiguration","fanGeometry","isFanShapeGeometryParametersValid","deriveFanGeometryFromViewport","calculateFanGeometry","pleuraIntervals","bLineIntervals","diffVector","radToDegree","rad","degreeToRad","indexToCanvas","depth_radius","theta_start","theta_range","arc_length","num_dashes","theta_step","theta1","theta2","start_point","end_point","calculateFanShapeCorners","imageBuffer","hull","roughContour","rough","slack","next","walk","to","i2","i3","P2","P3","pathA","pathB","globalYmin","upperPath","topY","arcPts","P1","best","P4","pickPoints","refined","edgeBuf","opts","directions","snapQuadrant","pt","xmin","xmax","ymin","ymax","xi","yi","xAlign","yAlign","refineCornersDirectional","step","angleRad","deriveFanGeometry","params","centerResult","intersectLine","tempAngle","d1","d4","d2","d3","exportContourJpeg","pixelData","strokeStyle","quality","ctx","getContext","totalPixels","channels","imgData","createImageData","out","baseIn","baseOut","putImageData","beginPath","moveTo","lineTo","toDataURL","getPixelData","saveBinaryData","filename","href","download","body","click","downloadFanJpeg","contourType","jpegDataUrl","fan","startAngleInDegrees","endAngleInDegrees","exportFanJpeg","generateConvexHullFromContour","segmentLargestUSOutlineFromBuffer","channelCount","mask","isForeground","labels","currentLabel","regionSizes","getter","px","py","pixelCount","onFlood","diagonals","floodFill","largestLabel","isBorder","nx","ny","outer","dirs","current","prev","dx0","dy0","startDir","nextPt","bdx","bdy","VideoRedactionTool","toolConfiguration","viewportUIDsToRender","toolDataCanvasCoordinate","rect","_getRectangleImageCoordinates","bottomLeftWorld","topRightWorld","point0","viewportUID","renderingEngineUID","sceneUID","targetUIDs","targetUID","_getImageVolumeFromTargetUID","worldPos1Index","worldPos2Index","worldToIndexVec3","iMin","iMax","jMin","jMax","kMin","kMax","yMultiple","zMultiple","valueMinusMean","_getTargetVolumeUID","scene","volumeUID","getVolumeActors","coloneIndex","substring","_getTargetStackUID","NEGATIVE_PIXEL_RANGE","POSITIVE_PIXEL_RANGE","ISLAND_PIXEL_RANGE","WholeBodySegmentTool","positivePixelRange","negativePixelRange","islandPixelRange","linePoints","_getHorizontalLineWorldPoints","horizontalLines","worldLine1P1","worldLine1P2","worldLine2P1","worldLine2P2","worldSquarePoints","referencedVolume","worldTopLeft","worldBottomRight","_getWorldBoundingBoxFromProjectedSquare","boundingBoxInfo","ijkTopLeft","ijkBottomRight","positiveSeedValue","negativeSeedValue","labelmapVolumeId","labelmapVolume","referencedVolumeData","getCompleteScalarDataArray","islandPointIndexes","pixelValue","_projectWorldPointAcrossSlices","worldEdgePoint","vecDirection","_getViewportVolume","ijkLineP1","ijkLineP2","_getCuboidIJKEdgePointsFromProjectedWorldPoint","_getWorldCuboidCornerPoints","cuboidPoints","worldSquarePoint","worldEdgePoints","worldCuboidPoints","_getHorizontalLineIJKPoints","ijkPoint1","ijkPoint2","TRANSFORM_MATRIX","getTransformMatrix","CardinalSpline","props","_scale","_fixedScale","s2","CatmullRomSpline","CubicSpline","getPreviewCurveSegments","controlPointPreview","closeSpline","previewNumCurveSegments","_getNumCurveSegments","startCurveSegIndex","endCurveSegIndex","transformMatrix","curveSegments","curveSegment","_getCurveSegment","getSplineCurves","numCurveSegments","previousCurveSegmentsLength","_getPoint","uInt","curveSegmentIndex","p0","p3","_getCurveSegmentPoints","tt","ttt","tValues","qValues","p0Index","p2Index","p3Index","_getLineSegments","numLineSegments","inc","maxU","lineSegments","previousLineSegmentsLength","aabb","curveSegmentLength","lineSegAABB","lineSegLength","LinearSpline","QuadraticBezier","hasTangentPoints","QuadraticSpline","getLineSegments","Spline","_controlPoints","_invalidated","_length","_resolution","_fixedResolution","_closed","_update","_aabb","addControlPoints","_getLineSegmentAt","_curveSegments","controlPointPos","deleteControlPointByIndex","minControlPoints","clearControlPoints","updateControlPoint","newControlPoint","controlPoint","getClosestControlPoint","minSquaredDist","closestPointIndex","squaredDist","curveSegmentsDistInfo","_getCurveSegmmentsDistanceSquaredInfo","closestPoint","csA","csB","distanceSquared","minDistCurveSegment","minDistLineSegment","closestPointCurveSegmentIndex","minDistSquared","curveSegmentDistInfo","lineSegPoint","lineSegDistSquared","getClosestPointOnControlPointLines","_convertCurveSegmentsToPolyline","closeDistance","previewCurveSegments","_getCurveSegmmentsWithinDistance","maxDistSquared","containsPoint","closingCurveSegment","_getClosingCurveSegmentWithStraightLineSegment","numIntersections","curveSegAABB","lineSegmentAABB","isVerticalLine","xIntersection","curveSegLength","polylinePoints","curveSegIndex","lineSegIndex","curveSegmentsDistanceSquared","curveSegmentsDistance","curveSegmentsWithinRange","curveSegmentDistSquared","pointLength","lengthEnd","startControlPoint","endControlPoint","closingLineSegment","AnnotationDisplayTool","arguments","frameOfReference","annotationBaseData","baseData","viewReference","DefaultHistoryMemo","BaseTool","defaults","strategies","defaultStrategy","activeStrategy","strategyOptions","mergedDefaults","initialProps","defaultProps","additionalProps","applyActiveStrategy","operationData","call","applyActiveStrategyCallback","callbackType","extraArgs","setConfiguration","newConfiguration","getViewReferenceId","createZoomPanMemo","zoom","zoomPanMemo","restoreMemo","currentPan","currentZoom","commitMemo","polySegConversionInProgressForViewportId","processedViewportSegmentations","contourRepresentation","canComputeRequestedRepresentation","computeContourData","hasContourDataButNotMatchingViewport","viewportNormal","uidSet","randomAnnotationUIDs","annotationNormal","_checkContourNormalsMatchViewport","validGeometry","geometryData","contours","_checkContourGeometryMatchViewport","viewportProcessed","viewportStatus","RENDERED","computeSurfaceData","pointsAndPolys","polys","polyDataCache","clipAndCacheSurfacesForViewport","rawResults","extractContourData","createAndAddContourSegmentationsFromClippedSurfaces","renderImmediate","labelMapConfigCache","polySegConversionInProgress","_setLabelmapColorAndOpacity","labelmapActorEntry","activeSegmentation","isActiveLabelmap","labelmapStyle","numColors","outlineWidth","renderOutline","outlineOpacity","activeSegmentOutlineWidthDelta","_getLabelmapConfig","segmentsHidden","segmentColor","segmentSpecificLabelmapConfig","fillAlpha","renderFill","forceOpacityUpdate","forceColorUpdate","_needsTransferFunctionUpdate","addRGBPoint","segmentOpacity","removePoint","addPointLong","setClamping","labelmapActor","preLoad","setRGBTransferFunction","setScalarOpacity","setInterpolationTypeToNearest","setUseLabelOutline","setLabelOutlineOpacity","outlineWidths","setLabelOutlineThickness","labelmapConfig","segmentsLabelmapConfig","configToUse","fillAlphaInactive","outlineWidthInactive","renderFillInactive","renderOutlineInactive","outlineOpacityInactive","cacheUID","oldConfig","cfunMTime","getMTime","ofunMTime","oldFillAlpha","oldRenderFill","oldRenderOutline","oldOutlineWidth","oldSegmentColor","oldSegmentsHidden","oldCfunMTime","oldOfunMTime","_addLabelmapToViewport","labelmapActorEntries","computeLabelmapData","SurfaceData","updateSurfaceData","surfaces","isHidden","surface","BrushTool","FILL_INSIDE_CIRCLE","ERASE_INSIDE_CIRCLE","FILL_INSIDE_SPHERE","ERASE_INSIDE_SPHERE","THRESHOLD_INSIDE_CIRCLE","THRESHOLD_INSIDE_SPHERE","THRESHOLD_INSIDE_SPHERE_WITH_ISLAND_REMOVAL","brushSize","useCenterSegmentIndex","preview","previewColors","previewTimeMs","previewMoveDistance","dragMoveDistance","dragTimeMs","StrategyCallbacks","AcceptPreview","RejectPreview","Interpolate","useBallStructuringElement","noUseDistanceTransform","noUseExtrapolation","interpolateExtrapolation","_lastDragInfo","_editData","createEditData","_previewData","isDrag","timerStart","Date","now","hoverData","_hoverData","createHoverData","getOperationData","OnInteractionStart","timer","time","rejectPreview","previewCallback","strategyData","strategy","segmentationVoxelManager","Preview","startWorld","currentCanvas","currentWorld","_calculateCursor","strokePointsWorld","currentCanvasClone","OnInteractionEnd","acceptPreview","viewRight","centerCursorInWorld","bottomCursorInWorld","topCursorInWorld","leftCursorInWorld","rightCursorInWorld","brushCursor","computeInnerCircleRadius","GetStatistics","interpolate","invalidateBrushCursor","getActiveSegmentationData","toolMetadata","brushCursorUID","centerSegmentIndexInfo","dynamicRadiusInCanvas","circleUID1","CircleROIStartEndThresholdTool","numSlicesToPropagate","calculatePointsInsideVolume","showTextBox","throttleTimeout","spacingInNormal","startCoord","_getStartCoordinate","endCoord","_getEndCoordinate","startCoordinate","endCoordinate","pointsInVolume","projectionPoints","statistics","labelmapUID","_computeProjectionPoints","_computePointsInsideVolume","filterAnnotationsWithinSamePlane","annotationEnabledElement","viewplaneNormal","tempStartCoordinate","tempEndCoordinate","_getCoordinateForViewplaneNormal","roundedStartCoordinate","roundedEndCoordinate","cameraCoordinate","roundedCameraCoordinate","middleCoordinate","isMiddleSlice","_getIndexOfCoordinatesForViewplaneNormal","iteratorVolumeIDs","lineWidthToUse","lineDashToUse","_calculateCachedStatsTool","projectionAxisIndex","endWorld","handlesOnStartPlane","handlesToStart","newProjectionPoints","pointsInsideVolume","baseTopLeftCanvas","baseBottomRightCanvas","basePos1","basePos2","measureInfo","modalityUnitOptions","currentCanvasCoordinates","worldProjectionPointIndex","indexOfProjection","numSlicesToPropagateFromStart","numSlicesToPropagateToEnd","endPos","viewplaneNormalAbs","_context","CircleScissorsTool","FILL_INSIDE","ERASE_INSIDE","activeLabelmapSegmentation","segmentsLocked","segmentLocking","segmentationImageId","LabelMapEditWithContourTool","annotationsToViewportMap","viewportIdsChecked","allowOpenContours","onViewportAddedToToolGroupBinded","onViewportAddedToToolGroup","onSegmentationModifiedBinded","onSegmentationModified","annotationModified","cleanUpListeners","checkContourSegmentation","activeSeg","viewportContoursToLabelmap","isEqual","PaintFillTool","activeSegmentationRepresentation","currentSegmentationImageId","getDirection","fixedDimension","getFixedDimension","floodFillGetter","getLabelValue","getScalarDataPositionFromPlane","inPlaneSeedPoint","fixedDimensionValue","generateHelpers","clickedLabelValue","floodFillResult","flooded","scalarDataIndex","framesModified","getFramesModified","boundaries","minJ","maxJ","seedIndex3D","getAtIJK","generateFloodFillGetter","generateGetScalarDataPositionFromPlane","toIndex","getScalarDataPosition","xDirection","yDirection","zDirection","absoluteOfViewPlaneNormal","absoluteOfXDirection","absoluteOfYDirection","absoluteOfZDirection","RectangleROIStartEndThresholdTool","projectionPointsImageIds","indexOfDirection","roundedStartCoord","roundedEndCoord","coord","roundedCoord","firstOrLastSlice","startIJK","endIJK","indexToWorldVec3","habdles","projectionPoint","RectangleROIThresholdTool","RectangleScissorsTool","SegmentBidirectionalTool","existingAnnotation","SegmentLabelTool","hoverTimeout","searchRadius","hoverTimer","_setHoveredSegment","_setHoveredSegmentForType","hoveredSegmentIndex","getSegmentIndexAtWorldPoint","hoveredSegmentLabel","SegmentSelectTool","SelectMode","Inside","Border","_setActiveSegment","_setActiveSegmentForType","getSegmentIndexAtLabelmapBorder","getHoveredContourSegmentationAnnotation","SphereScissorsTool","getEditData","EnsureImageVolumeFor3DManipulation","referencedImageIds","imageVoxelManager","EnsureSegmentationVolumeFor3DManipulation","segImageIds","segVolume","getEllipseCornersFromCanvasCoordinates","initializeCircle","Initialize","centerIJK","brushRadius","cornersInWorld","normalizedViewUp","normalizedPlaneNormal","strokeCenters","strokeCornersWorld","centerVec","createCircleCornersForCenter","circleCornersIJK","getBoundingBoxAroundShapeIJK","createPointInEllipse","isInObjectBoundsIJK","majorAxisVec","minorAxisVec","radiusForStroke","strokePredicate","centers","radiusSquared","centerVecs","lengthSquared","vector","projX","projY","projZ","distX","distY","distZ","createStrokePredicate","sphereObj","radius2","pointIJK","pointVec","distToPlane","proj","fromTopLeft","centerToTopLeft","CIRCLE_STRATEGY","regionFill","setValue","determineSegmentIndex","labelmapStatistics","CIRCLE_THRESHOLD_STRATEGY","dynamicThreshold","fillInsideCircle","strategyFunction","thresholdInsideCircle","fillOutsideCircle","initializeRectangle","pointInShapeFn","rectangleCornersIJK","axisU","axisV","uLen","vLen","EPS","vproj","createPointInRectangle","RECTANGLE_STRATEGY","RECTANGLE_THRESHOLD_STRATEGY","fillInsideRectangle","thresholdInsideRectangle","getStrategyData","CustomEvent","ERROR_EVENT","message","cancelable","dispatchEvent","segmentationScalarData","imageScalarData","getStrategyDataForVolumeViewport","ensureSegmentationVolumeFor3DManipulation","currentSegImage","ensureImageVolumeFor3DManipulation","getStrategyDataForStackViewport","ContourWindingDirection","AnnotationMultiSlice","setStartRange","startRange","setRange","setEndRange","endRange","rangeEndSliceIndex","getSliceIndexForImage","multiSliceReference","MetadataReferenceModified","setViewportFrameRange","setSingle","getFrameRange","getFrameRangeStr","setFrameRange","annotationHydration","worldPoints","getClosestImageIdForStackViewport","getClassName","getTargetVolumeId","distanceImagePairs","ImagePositionPatient","dir","calculateDistanceToImage","numSlicesToProject","sliceNormalIndex","calculateBoundingBox","isWorld","is3D","getBoundingBoxAroundShapeWorld","clipBounds","calibratedPixelSpacingMetadataProvider","calibrateImageSpacing","calibrationOrScale","USER","calibrateSpacing","ViewportStatus","debounced","dynamicVolumesPlayingMap","playClip","playClipOptions","playClipTimeouts","playClipIsTimeVarying","dynamicCineEnabled","playClipContext","waitForRendered","numScrollSteps","currentStepIndex","getTargetImageIdIndex","frameTimeVectorEnabled","waitForRenderedCount","_createStackViewportCinePlayContext","_getVolumeFromViewport","isDynamicVolume","numDimensionGroups","dimensionGroupNumber","_createDynamicVolumeViewportCinePlayContext","cachedScrollInfo","scrollInfo","getScrollInfo","volumeViewPlaneNormal","_createVolumeViewportCinePlayContext","VideoViewport","getSliceIndex","play","fps","setPlaybackRate","getFrameRate","_createVideoViewportCinePlayContext","_createCinePlayContext","playClipData","isDynamicCinePlaying","_stopDynamicVolumeCine","_stopClip","stopDynamicCine","intervalId","framesPerSecond","lastFrameTimeStamp","ignoreFrameTimeVector","usingFrameTimeVector","frameTimeVector","speed","frameTimeVectorSpeedMultiplier","bounce","timeouts","isTimeVarying","sample","delay","sum","limit","_getPlayClipTimeouts","playClipAction","newStepIndex","CLIP_STOPPED","_stopClipWithData","playClipTimeoutHandler","setInterval","CLIP_STARTED","stopClip","toolState","pause","dynamicCineElement","clearInterval","dynamicVolumeId","addToolState","getToolState","getToolStateByViewportId","addContourSegmentationAnnotation","firstAnnotation","secondAnnotation","firstSegmentation","secondSegmentation","areViewReferencesEqual","contourSegmentationOperation","sourceAnnotationOrUID","targetAnnotationOrUID","getViewportFromAnnotation","intersectionInfo","hasIntersection","copyAnnotation","copyContourSegment","targetSegmentIndex","targetAnnotationUIDsMap","copyContourAnnotation","newAnnotationsUID","newChildAnnotation","findAllIntersectingContours","sourceAABB","targetAABB","lineSegmentsIntersect","projectedPolyline","getViewReferenceFromAnnotation","DEFAULT_CONTOUR_SEG_TOOL_NAME","endPointWorld","originalToolName","interpolationUID","interpolationCompleted","DEFAULT_CONTOUR_SEG_TOOLNAME","LogicalOperation","getPolylinesInfoWorld","polylinesInfo","annotationUIDList","applyLogicalOperation","segment1","segment2","operation","polyLinesInfoCanvas1","polyLinesInfoCanvas2","segmentation1","segmentation2","polyLinesInfoWorld1","polyLinesInfoWorld2","extractPolylinesInCanvasSpace","polylinesMerged","Union","Subtract","Intersect","XOR","polyLinesWorld","resultSegment","existingAnnotationUIDs","currentSet","addPolylinesToSegmentation","segmentData","addSegmentInSegmentation","subtract","intersect","xor","copy","deleteOperation","processMultipleIntersections","holeOperations","mergeOperations","primaryHoleTarget","holeAnnotation","holeContour","holePolylineCanvas","windingDirection","CounterClockwise","createPolylineHole","updateViewportsForAnnotations","allAnnotationsToRemove","allResultPolylines","allHoles","holes","getContourHolesData","sourceStartPoint","shouldMerge","resultPolyline","subtractedPolylines","holeData","baseAnnotation","newAnnotations","createNewAnnotationFromPolyline","parentPolyline","reassignHolesToNewAnnotations","processSequentialIntersections","updatedToolNames","intersectPolylinesSets","set1","set2","polyA","polyB","intersectionRegions","intersectPolylines","region","subtractPolylineSets","polylinesSetA","polylinesSetB","currentPolylines","polylineB","newPolylines","currentPolyline","subtractedPolyline","cleaned","subtractMultiplePolylineSets","basePolylineSet","subtractorSets","subtractAnnotationPolylines","baseAnnotations","subtractorAnnotations","unifyPolylineSets","processedFromA","processedFromB","polylineA","merged","mergedPolyline","unifyMultiplePolylineSets","polylineSets","unifyAnnotationPolylines","annotationsSetA","annotationsSetB","xorPolylinesSets","allIdentical","foundMatch","TOLERANCE","convertContourPolylineToWorld","checkIntersection","combinePolylines","mergePolylines","contourHolesData","unassignedContourHolesSet","reassignedContourHolesMap","assignHoleToPolyline","newPolyline","contourHolesDataArray","contourHoleData","templateAnnotation","removeDuplicatePoints","cleanupPolylines","validPolylines","seenPolylines","polylineKey","findNextLink","contourPoints","cell","nextLine","remainingLines","findContours","firstCell","extraContours","findContoursFromReducedSet","findHandlePolylineIndex","closestDistance","testIndex","findIslands","islandIndexes","getSignedArea","getContourHolesDataCanvas","worldHoleContours","canvasHoleContours","worldHoleContour","canvasHoleContour","getContourHolesDataWorld","getDeduplicatedVTKPolyDataPoints","bypass","getLines","pointsArray","getNumberOfPoints","_","getPoint","linesArray","getNumberOfCells","getCell","newPoints","newIndex","areCoplanarContours","firstViewPlaneNormal","secondViewPlaneNormal","firstPolyline","secondPolyline","firstDistance","secondDistance","processContourHoles","useXOR","retContours","closedContours","contourWithHoles","contourWithoutHoles","hContour","outerContour","innerContour","vertices","pointsNotEnclosed","inside","xj","yj","getIsPointInsidePolygon","checkEnclosed","contourHoleSet","holeIndex","isPolygonInsidePolygon","inner","containsPoints","closedPolylines","originalIndex","outerArea","potentialHole","generateContourSetsFromLabelmap","registerComputeWorker","WorkerTypes","GENERATE_CONTOUR_SETS","segVolumeId","getOrCreateSegmentationVolume","vol","segmentationInfo","contourSets","getWebWorkerManager","executeTask","refImages","refImageId","refImageDataMetadata","processedContourSets","contourSet","sliceContours","refImageIndex","imageDataMetadata","scanAxisNormal","FrameNumber","AnnotationToPointData","TOOL_NAMES","convert","metadataProvider","validateAnnotation","ContourSequence","getContourSequence","ReferencedROINumber","ROIDisplayColor","random","register","RectangleROIStartEndThreshold","acceptAutogeneratedInterpolations","selector","InterpolationManager","acceptAutoGenerated","polylineData","transforms","polylineWorldPoints","currentClosedState","lastToFirstDist","updatedWindingDirection","sumOverDimensionGroups","dimensionGroups","arrayLength","getScalarDataLength","resultArray","getDimensionGroupScalarData","operationFunctions","SUM","AVERAGE","sumArray","averageOverDimensionGroups","SUBTRACT","scalarData1","scalarData2","generateImageFromTimeData","dynamicVolume","dimensionGroupNumbers","frameNumbers","operationFunction","updateVolumeFromTimeData","targetVolume","targetVoxelManager","resetModifiedSlices","modifiedSlices","maskVolumeId","worldCoordinate","dataInTime","ijkCoords","maskImageData","segVoxelManager","scalarDataLength","nonZeroVoxelIndices","actualLen","getAtIndex","nonZeroVoxelValuesInTime","isSameVolume","valuesInTime","getAtIndexAndDimensionGroup","toIJK","segPointLPS","segValue","segPointIJK","overlapIJKMinMax","perDimensionGroupSum","averageCallback","averageValues","_getDimensionGroupDataMask","coordinate","worldToIndex","scalarIndex","_getDimensionGroupDataCoordinate","getAnnotationNearPoint","getAnnotationNearPointOnEnabledElement","found","findAnnotationNearPointByTool","currentId","CalibrationTypes","PIXEL_UNITS","VOXEL_UNITS","SUPPORTED_REGION_DATA_TYPES","SUPPORTED_LENGTH_VARIANT","SUPPORTED_PROBE_VARIANT","UNIT_MAPPING","SQUARE","calibration","hasPixelSpacing","volumeUnit","calibrationType","sequenceOfUltrasoundRegions","UNCALIBRATED","regions","regionLocationMinX0","regionLocationMaxX1","regionLocationMinY0","regionLocationMaxY1","regionDataType","physicalUnitsXDirection","physicalUnitsYDirection","physicalDeltaX","physicalDeltaY","ERMF","ERROR","PROJECTION","CALIBRATED","getCalibratedProbeUnitsAndValue","supportedRegionsMetadata","referencePixelX0","referencePixelY0","yValue","getCalibratedAspect","getPixelValueUnitsImageId","getPixelValueUnits","generalSeriesModule","petSeriesModule","_handlePTModality","_getSphereBoundsInfo","circlePoints","directionVectors","radiusWorld","row","rowCosine","column","columnCosine","vecNormal","topLeftIJK","bottomRightIJK","pointsIJK","_computeBoundsIJK","getSphereBoundsInfo","scanAxis","getSphereBoundsInfoFromViewport","getEnabledElements","roundNumber","arePolylinesIdentical","poly1","poly2","identicalForward","identicalReverse","cyclicForward","cyclicReverse","numPoint","DEFAULT_EPSILON","epsilonSquared","partitionQueue","polylinePointFlags","numDecimatedPoints","startIndex","endIndex","maxDistIndex","decimatedPolyline","srcIndex","dstIndex","refPoint","aX","aY","bX","numPolylinePoints","distFirstToLastPoints","distanceToPointSquared","findClosestPoint","sourcePoints","minDistance","MAX_SAFE_INTEGER","sourcePoint","_distanceBetween","moveAnnotationToViewPlane","projectedDistance","acquisitionMapping","ijkPrime","fromIJK","jkMapping","ikMapping","normalizeViewportPlane","boundsIJKPrime","mapping","getOrientationStringLPS","orientationX","orientationY","orientationZ","MIN","invertOrientationStringLPS","orientationString","inverted","smoothAnnotation","interpolateSegmentPoints","iniIndex","segmentSize","amountOfKnots","minKnotDistance","interpolationIniIndex","interpolationEndIndex","segmentPointsUnchangedBeg","segmentPointsUnchangedEnd","knotsIndexes","minDistributionDistance","closedInterval","intervalIni","intervalEnd","intervalSize","continuosDistributionValue","getContinuousUniformDistributionValues","pointInSurroundingSphereCallback","spacings","maxRadiusIJK","ceil","sphereCornersIJK","getBoundingBoxAroundShape","_computeBoundsIJKWithCamera","_getBounds","createScalarVolumeVoxelManager","pointToString","decimals","idx3","getPolyDataPointIndexes","linesData","findStartingPoint","nextPoint","getPolyDataPoints","contoursIndexes","rawPointsData","contourIndexes","referenceVolume","AllBoundsIJK","pointsToUse","g","accumulator","axisList","isAxisAlignedRectangle","rectangleVec1","rectangleVec2","calculateAnglesWithAxes","vec","registered","workerManager","computeWorkerConfig","computeWorker","maxWorkerInstances","autoTerminateOnIdle","idleTimeThreshold","registerWorker","Worker","uuidv4","ChangeTypesForInterpolation","toolNames","sliceData","getSliceData","hasInterpolationUID","filterData","parentKey","interpolationAnnotations","skipUIDs","interpolationAnnotation","isInterpolationUpdate","SegmentStatsCalculator","calculators","statsInit","statsData","calculator","volumetricStatsCallback","maxIJKs","dataCopy","volumetricGetStatistics","volumeScale","entry","VolumetricCalculator","volumetricState","optionsWithUnit","InstanceVolumetricCalculator","setBrushSizeForToolGroup","viewportsInfoArray","getBrushSizeForToolGroup","toolInstances","brushToolInstance","setBrushThresholdForToolGroup","getBrushThresholdForToolGroup","computeMetabolicStats","segmentationIds","COMPUTE_STATISTICS","labelmapVolumes","mergedLabelmap","createMergedLabelmapForIndex","referenceImageIds","labelmap","firstImage","volumeInfo","getVolumeContainingImageId","getOrCreateImageVolume","getReferenceVolumeForSegmentation","imageInfo","calculateForVolume","contourAndFindLargestBidirectional","containedSegmentIndices","createBidirectionalToolData","bidirectionalData","VoxelManager","RLEVoxelMap","createLabelmapMemo","createRleMemo","isUndo","undoVoxelManager","redoVoxelManager","useVoxelManager","setAtIJKPoint","slices","getArrayOfModifiedSlices","createRLEHistoryVoxelManager","operationType","copyMap","createRLEVolumeVoxelManager","createLabelmapVolumeForViewport","labelmaps","outputData","cachedVolume","mergedVolume","setCompleteScalarDataArray","findLargestBidirectional","maxBidirectional","isInSegment","sliceContour","bidirectional","createBidirectionalForSlice","currentMax","maxMajor","maxMinor","currentMaxMinor","currentMaxMajor","maxMajorPoints","distance2","testCenter","handle0","handle1","unitMajor","maxMinorPoints","lpad","string","character","seed","onBoundary","equals","startNode","permutations","perms","permutation","permute","perm","countNonZeroes","prunedPermutations","stack","visits","currentArgs","flood","job","getArgs","prevArgs","previousArgs","visited","iKey","markAsVisited","node","member","markAsFlooded","nextArgs","pushAdjacent","markAsBoundary","getBrushToolInstances","generateVolumeId","getReferenceVolumeForSegmentationVolume","segmentationVolumeId","indexIJK","onEdge","getNeighborIndex","deltaI","deltaJ","neighborCanvas","isSegmentOnEdge","isSegmentOnEdgeCanvas","segmentationActorEntry","deltaK","neighborIJK","isSegmentOnEdgeIJK","neighborRange","neighborIndex","desiredRepresentation","representationType","getScalarValueFromWorld","getSegmentIndexAtWorldForLabelmap","annotationsSet","isPointInsidePolyline3D","getSegmentIndexAtWorldForContour","getSegmentLargestBidirectional","COMPUTE_LARGEST_BIDIRECTIONAL","segData","reconstructableVolume","calculateVolumeBidirectional","isStack","calculateStackBidirectional","radiusForVol1","updateStatsArray","newStat","existingIndex","stat","processSegmentationStatistics","radiusIJK","testMax","testStats","getSphereStats","peakValue","peakPoint","mtv","suvMean","lesionGlycolysis","imageVoxels","centerLPS","_pointLPS","boundsOrig","finalStats","calculateVolumeStatistics","calculateStackStatistics","getUniqueSegmentIndices","cachedResult","keySet","addImageSegmentIndices","addVolumeSegmentIndices","handleLabelmapSegmentation","handleContourSegmentation","handleSurfaceSegmentation","WEBGPU_MEMORY_LIMIT","DEFAULT_GROWCUT_OPTIONS","windowSize","maxProcessingTime","inspection","numCyclesInterval","numCyclesBelowThreshold","referenceVolumeId","workGroupSize","numIterations","volumePixelData","requiredLimits","maxStorageBufferBindingSize","maxBufferSize","adapter","navigator","gpu","requestAdapter","device","requestDevice","BUFFER_SIZE","byteLength","UPDATED_VOXELS_COUNTER_BUFFER_SIZE","Uint32Array","BYTES_PER_ELEMENT","BOUNDS_BUFFER_SIZE","Int32Array","shaderModule","createShaderModule","code","paramsArrayValues","gpuParamsBuffer","createBuffer","usage","GPUBufferUsage","UNIFORM","COPY_DST","gpuVolumePixelDataBuffer","STORAGE","queue","writeBuffer","gpuLabelmapBuffers","COPY_SRC","gpuStrengthBuffers","gpuCounterBuffer","gpuBoundsBuffer","initialBounds","bindGroupLayout","createBindGroupLayout","GPUShaderStage","COMPUTE","bindGroups","outputLabelmapBuffer","outputStrengthBuffer","previouLabelmapBuffer","previousStrengthBuffer","createBindGroup","layout","resource","pipeline","createComputePipeline","createPipelineLayout","bindGroupLayouts","compute","module","entryPoint","constants","workGroupSizeX","workGroupSizeY","workGroupSizeZ","numWorkGroups","gpuUpdatedVoxelsCounterStagingBuffer","MAP_READ","limitProcessingTime","performance","currentInspectionNumCyclesInterval","belowThresholdCounter","commandEncoder","createCommandEncoder","passEncoder","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","copyBufferToBuffer","submit","finish","mapAsync","GPUMapMode","READ","updatedVoxelsCounterResultBuffer","getMappedRange","updatedVoxelsRatio","unmap","outputLabelmapBufferIndex","labelmapStagingBuffer","boundsStagingBuffer","labelmapResultBuffer","labelmapResult","boundsResultBuffer","boundsResult","minZ","maxZ","clearBounds","setBounds","POSITIVE_SEED_VALUE","NEGATIVE_SEED_VALUE","_createAndCacheSegmentationSubVolumeForBoundingBox","subVolume","subVolPixelData","startSliceIndex","stopSliceIndex","pixelsPerSlice","zOffset","_setPositiveSeedValues","sliceOffset","bfs","slicePixelIndex","volumeVoxelIndex","volumeVoxelValue","scanLine","limitX","incX","_setNegativeSeedValues","runGrowCutForBoundingBox","subVolumeBoundsIJK","targetBuffer","POSITIVE_SEED_VARIANCE","NEGATIVE_SEED_VARIANCE","vecColumn","sphereCenterPoint","refVolImageData","topCirclePoint","bottomCirclePoint","sphereBoundsInfo","_getGrowCutSphereBoundsInfo","_createAndCacheSegmentationSubVolumeForSphere","refVolumePixelData","worldStartPos","numPixelsPerSlice","ijkStartPosition","referencePixelValue","positiveSeedVarianceValue","minPositivePixelValue","maxPositivePixelValue","neighborsCoordDelta","startVoxelIndex","ijkVoxel","neighborCoordDelta","nz","neighborVoxelIndex","neighborPixelValue","worldVecRowDir","worldVecSliceDir","ijkSphereCenter","negativeSeedVarianceValue","minNegativePixelValue","maxNegativePixelValue","rotationAngle","worldQuat","vecRotation","worldCircleBorderPoint","ijkCircleBorderPoint","runGrowCutForSphere","ijkVecRowDir","ijkVecColDir","sphereBoundsIJK","_createSubVolumeFromSphere","MAX_POSITIVE_SEEDS","calculateGrowCutSeeds","refImageData","referenceVolumeVoxelManager","neighborhoodRadius","initialNeighborhoodRadius","positiveK","positiveStdDevMultiplier","negativeK","negativeStdDevMultiplier","negativeSeedMargin","negativeSeedsTargetPatches","ijkStart","initialStats","positiveIntensityMin","positiveIntensityMax","startValue","currentQueueIndex","neighborValue","positiveSum","positiveSumSq","positiveCount","positiveMean","positiveVariance","negativeDiffThreshold","minXm","minYm","minZm","maxXm","maxYm","maxZm","attempts","patchesAdded","maxAttempts","rz","centerIndex","centerValue","patchContributed","runOneClickGrowCut","positiveSeedLabel","negativeSeedLabel","isLineInSegment","ijk1","ijk2","testIJK","testSize","unitDelta","createIsInSegment","createIsInSegmentMetadata","SegmentationEnum","IslandRemoval","fillInternalEdge","maxInternalRemove","initialize","segmentationVoxels","hasSource","sourceVoxelManager","previewVoxelManager","previewSegmentIndex","clickedPoints","getBoundsIJK","bound","depth","segmentSet","fillFrom","oldVal","SEGMENT","normalizer","selectedPoints","floodFillSegmentIsland","floodedCount","clickedPoint","iPrime","jPrime","kPrime","ISLAND","removeExternalIslands","rle","clearPoint","rowModified","removeInternalIslands","forEachRow","baseIndex","lastRle","INTERIOR","rowPrev","getRun","rowNext","isLast","isFirst","prevCovers","covers","nextCovers","EXTERIOR","singlePlane","newType","INTERIOR_TEST","INTERIOR_SMALL","rowRle","thresholdVolumeInformation","validToolNames","_validateAnnotations","outputSegmentationVolume","segmentContourAction","configurationData","getSegment","defaultGetSegment","segmentationsList","bidirectionals","hasExistingActiveSegment","existingLargestBidirectionals","existingBidirectionalItem","newBidirectional","existingLargestBidirectional","updateSegment","bidirectionalToolData","segmentationIndex","overlapType","baseVolumeIdx","volumeInfoList","refVoxelManager","volumeSize","_handleSameSizeVolume","overlaps","segScalarDataLength","overlapBounds","callbackOverlap","overlapTest","_handleDifferentSizeVolume","testOverlapRange","voxelSpacing","voxelCenter","testRange","insert","equalsCheck","getVoxelOverlap","halfSpacingX","halfSpacingY","halfSpacingZ","voxelCornersIJK","offsets","xOff","yOff","zOff","processVolumes","segmentationSpacing","segmentIndicesCache","setSegmentationDirty","cached","isDirty","getCachedSegmentIndices","setCachedSegmentIndices","triggerWorkerProgress","workerType","progress","WEB_WORKER_PROGRESS","getSegmentationDataForWorker","refImageIds","prepareVolumeStrategyDataForWorker","prepareStackDataForWorker","segImageId","segImage","segPixelData","refImage","refPixelData","refSpacing","getImageReferenceInfo","cachedImage","scalingModule","validateRepresentationData","segmentationRepresentationData","validatePublic","validate","imageRetrieveMetadataProvider","resetPrefetchTimeout","maxImagesToPrefetch","minBefore","maxAfter","directionExtraImages","preserveExistingPool","priorities","prefetch","priority","stackPrefetchData","stackPrefetch","indicesToRequest","removeFromList","imageIdIndex","indicesToRequestCopy","currentImageIdIndex","getImageLoadObject","isLoaded","imageLoadPoolManager","filterRequests","requestFn","retrieveOptions","IMAGE_RETRIEVE_CONFIGURATION","imageLoader","getCachedImageBasedOnImageURI","decodeTimeInMS","loadTimeInMS","sizeInBytes","getMaxCacheSize","cacheFill","fillTime","fillSize","initialTime","initialSize","updateToolState","lastPrefetchedImageId","STACK_PREFETCH_COMPLETE","doneCallback","requestType","addRequest","onImageUpdated","stackCount","totalBytes","positionFraction","minIndex","maxIndex","promiseRemovedHandler","IMAGE_CACHE_IMAGE_REMOVED","clearRequestStack","nearest","nextImageIdIndex","lowerIndex","low","higherIndex","high","imageIdsToPrefetch","shouldLoadLower","shouldLoadHigher","indexOfCurrentImage","getDeltaPoints","curr","getMeanPoints","_subtractPoints2D","getDeltaDistance","_getDistance2D","_getDistance3D","getDeltaRotation","getDeltaDistanceBetweenIPoints","_getMeanDistanceBetweenAllIPoints","lastDistance","copyPointsList","copyPoints","getMeanTouchPoints","touch","identifier","radiusX","radiusY","force","pairedDistance","triggerAnnotationRenderForToolGroupIds","toolGroupIds","filterViewportsWithFrameOfReferenceUID","numViewports","viewportsWithFrameOfReferenceUID","vpCamera","viewportsWithToolEnabled","_toolGroupHasActiveEnabledOrPassiveTool","toolMode","DEFAULTS","MULTIPLIER","RANGE_TEXT_POSITION","Right","TICKS_BAR_SIZE","Colorbar","_isMouseOver","_isInteracting","_mouseOverCallback","showTicks","_mouseOutCallback","hideTicks","_addVOIEventListeners","initialState","multipliers","getVOIMultipliers","_getPointsFromMouseEvent","startVOIRange","local","voiLower","voiUpper","newVoiRange","_mouseUpCallback","_removeVOIEventListeners","_eventListenersManager","_colormaps","getColormapsMap","_activeColormapName","getInitialColormapName","_canvas","_createCanvas","_ticksBar","_createTicksBar","_rangeTextPosition","ticks","appendTo","rootElement","_addRootElementEventListeners","activeColormapName","colormapName","imageRange","currentVoiRange","onVoiChange","showFullImageRange","showFullPixelValueRange","reset","createRootElement","onContainerResize","updateTicksBar","containerSize","colormaps","items","Name","cm","ticksProps","clientPoint","clientX","clientY","pagePoint","pageX","pageY","getBoundingClientRect","pageXOffset","pageYOffset","containerWidth","containerHeight","ticksBar","rangeTextPosition","ticksBarTop","ticksBarLeft","Top","Left","initialDragState","defaultImageRange","ViewportColorbar","_getImageRange","_getVOIRange","autoHideTicks","_hideTicksTimeoutId","timeLeft","_hideTicksTime","_stackNewImageCallback","_element","_imageVolumeModifiedCallback","_volumeId","_viewportVOIModifiedCallback","showAndAutoHideTicks","_viewportColormapModifiedCallback","_addCornerstoneEventListener","getImageActor","minValue","maxValue","getRGBTransferFunction","ColorbarRangeTextPosition","calculateMinMaxMean","pixelLuminance","globalMin","globalMax","numPixels","spv","extractWindowLevelRegionToolData","extractImageDataVolume","getCornerstoneImage","extractImageDataStack","getLuminanceFromRegion","luminance","spIndex","red","green","blue","version","HASH_UNDEFINED","funcTag","genTag","reIsDeepProp","reIsPlainProp","reLeadingDot","rePropName","reEscapeChar","reIsHostCtor","freeGlobal","freeSelf","self","root","Function","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","exec","IE_PROTO","funcToString","objectToString","reIsNative","RegExp","getNative","nativeCreate","symbolProto","symbolToString","Hash","ListCache","MapCache","assocIndexOf","eq","baseGet","object","isSymbol","test","isKey","stringToPath","toKey","baseIsNative","isObject","func","pattern","tag","isFunction","isHostObject","toSource","getMapData","__data__","getValue","memoize","baseToString","number","quote","resolver","TypeError","memoized","apply","Cache","other","isObjectLike","exports","defaultValue"],"sourceRoot":""}