{"version":3,"file":"5349.bundle.4929b0c8498301bf5e1d.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-rt/src/utils/promptHydrateRT.ts","webpack:///../../../extensions/cornerstone-dicom-rt/src/utils/initRTToolGroup.ts","webpack:///../../../extensions/cornerstone-dicom-rt/src/viewports/OHIFCornerstoneRTViewport.tsx"],"sourcesContent":["import { utils, Types } from '@ohif/extension-cornerstone';\r\n\r\nfunction promptHydrateRT({\r\n  servicesManager,\r\n  rtDisplaySet,\r\n  viewportId,\r\n  preHydrateCallbacks,\r\n  hydrateRTDisplaySet,\r\n}: {\r\n  servicesManager: AppTypes.ServicesManager;\r\n  rtDisplaySet: AppTypes.DisplaySet;\r\n  viewportId: string;\r\n  preHydrateCallbacks?: Types.HydrationCallback[];\r\n  hydrateRTDisplaySet: Types.HydrationCallback;\r\n}) {\r\n  return utils.promptHydrationDialog({\r\n    servicesManager,\r\n    viewportId,\r\n    displaySet: rtDisplaySet,\r\n    preHydrateCallbacks,\r\n    hydrateCallback: hydrateRTDisplaySet,\r\n    type: 'RTSTRUCT',\r\n  });\r\n}\r\n\r\nexport default promptHydrateRT;\r\n","function createRTToolGroupAndAddTools(ToolGroupService, customizationService, toolGroupId) {\r\n  const tools = customizationService.getCustomization('cornerstone.overlayViewportTools');\r\n\r\n  return ToolGroupService.createToolGroupAndAddTools(toolGroupId, tools);\r\n}\r\n\r\nexport default createRTToolGroupAndAddTools;\r\n","import React, { Component, useCallback, useEffect, useRef, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useViewportGrid } from '@ohif/ui-next';\r\nimport {\r\n  utils,\r\n  usePositionPresentationStore,\r\n  OHIFCornerstoneViewport,\r\n} from '@ohif/extension-cornerstone';\r\n\r\nimport promptHydrateRT from '../utils/promptHydrateRT';\r\nimport createRTToolGroupAndAddTools from '../utils/initRTToolGroup';\r\nimport { useSystem } from '@ohif/core/src';\r\nconst RT_TOOLGROUP_BASE_NAME = 'RTToolGroup';\r\n\r\nfunction OHIFCornerstoneRTViewport(props: withAppTypes) {\r\n  const { servicesManager, commandsManager } = useSystem();\r\n  const { children, displaySets, viewportOptions } = props as {\r\n    children: React.ReactNode;\r\n    displaySets: AppTypes.DisplaySet[];\r\n    viewportOptions: AppTypes.ViewportOptions;\r\n  };\r\n\r\n  const { displaySetService, toolGroupService, segmentationService, customizationService } =\r\n    servicesManager.services;\r\n\r\n  const viewportId = viewportOptions.viewportId;\r\n\r\n  const toolGroupId = `${RT_TOOLGROUP_BASE_NAME}-${viewportId}`;\r\n\r\n  // RT viewport will always have a single display set\r\n  if (displaySets.length > 1) {\r\n    throw new Error('RT viewport should only have a single display set');\r\n  }\r\n\r\n  const LoadingIndicatorTotalPercent = customizationService.getCustomization(\r\n    'ui.loadingIndicatorTotalPercent'\r\n  );\r\n\r\n  const rtDisplaySet = displaySets[0];\r\n\r\n  const [{ viewports, activeViewportId }, viewportGridService] = useViewportGrid();\r\n\r\n  // States\r\n  const { setPositionPresentation } = usePositionPresentationStore();\r\n  const [rtIsLoading, setRtIsLoading] = useState(!rtDisplaySet.isLoaded);\r\n  const [processingProgress, setProcessingProgress] = useState({\r\n    percentComplete: null,\r\n    totalSegments: null,\r\n  });\r\n\r\n  const referencedDisplaySetRef = useRef(null);\r\n\r\n  const referencedDisplaySetInstanceUID = rtDisplaySet.referencedDisplaySetInstanceUID;\r\n  // If the referencedDisplaySetInstanceUID is not found, it means the RTStruct series is being\r\n  // launched without its corresponding referenced display set (e.g., the RTStruct series is launched using\r\n  // series launch /mode?StudyInstanceUIDs=&SeriesInstanceUID).\r\n  // In such cases, we attempt to handle this scenario gracefully by\r\n  // invoking a custom handler. Ideally, if a user tries to launch a series that isn't viewable,\r\n  // (eg.: we can prompt them with an explanation and provide a link to the full study).\r\n  if (!referencedDisplaySetInstanceUID) {\r\n    const missingReferenceDisplaySetHandler = customizationService.getCustomization(\r\n      'missingReferenceDisplaySetHandler'\r\n    );\r\n    const { handled } = missingReferenceDisplaySetHandler();\r\n    if (handled) {\r\n      return;\r\n    }\r\n  }\r\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(\r\n    referencedDisplaySetInstanceUID\r\n  );\r\n  const referencedDisplaySetMetadata = _getReferencedDisplaySetMetadata(referencedDisplaySet);\r\n\r\n  referencedDisplaySetRef.current = {\r\n    displaySet: referencedDisplaySet,\r\n    metadata: referencedDisplaySetMetadata,\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (rtIsLoading) {\r\n      return;\r\n    }\r\n\r\n    // if not active viewport, return\r\n    if (viewportId !== activeViewportId) {\r\n      return;\r\n    }\r\n\r\n    promptHydrateRT({\r\n      servicesManager,\r\n      viewportId,\r\n      rtDisplaySet,\r\n      hydrateRTDisplaySet: async () => {\r\n        return commandsManager.runCommand('hydrateSecondaryDisplaySet', {\r\n          displaySet: rtDisplaySet,\r\n          viewportId,\r\n        });\r\n      },\r\n    });\r\n  }, [servicesManager, viewportId, rtDisplaySet, rtIsLoading, commandsManager, activeViewportId]);\r\n\r\n  useEffect(() => {\r\n    const { unsubscribe } = segmentationService.subscribe(\r\n      segmentationService.EVENTS.SEGMENTATION_LOADING_COMPLETE,\r\n      evt => {\r\n        if (evt.rtDisplaySet.displaySetInstanceUID === rtDisplaySet.displaySetInstanceUID) {\r\n          setRtIsLoading(false);\r\n        }\r\n\r\n        if (rtDisplaySet?.firstSegmentedSliceImageId && viewportOptions?.presentationIds) {\r\n          const { firstSegmentedSliceImageId } = rtDisplaySet;\r\n          const { presentationIds } = viewportOptions;\r\n\r\n          setPositionPresentation(presentationIds.positionPresentationId, {\r\n            viewportType: 'stack',\r\n            viewReference: {\r\n              referencedImageId: firstSegmentedSliceImageId,\r\n            },\r\n            viewPresentation: {},\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [rtDisplaySet]);\r\n\r\n  useEffect(() => {\r\n    const segmentLoadingSubscription = segmentationService.subscribe(\r\n      segmentationService.EVENTS.SEGMENT_LOADING_COMPLETE,\r\n      ({ percentComplete, numSegments }) => {\r\n        setProcessingProgress({\r\n          percentComplete,\r\n          totalSegments: numSegments,\r\n        });\r\n      }\r\n    );\r\n\r\n    const displaySetsRemovedSubscription = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SETS_REMOVED,\r\n      ({ displaySetInstanceUIDs }) => {\r\n        const activeViewport = viewports.get(activeViewportId);\r\n        if (displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)) {\r\n          viewportGridService.setDisplaySetsForViewport({\r\n            viewportId: activeViewportId,\r\n            displaySetInstanceUIDs: [],\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      segmentLoadingSubscription.unsubscribe();\r\n      displaySetsRemovedSubscription.unsubscribe();\r\n    };\r\n  }, [rtDisplaySet, displaySetService, viewports, activeViewportId, viewportGridService]);\r\n\r\n  useEffect(() => {\r\n    let toolGroup = toolGroupService.getToolGroup(toolGroupId);\r\n\r\n    if (toolGroup) {\r\n      return;\r\n    }\r\n\r\n    toolGroup = createRTToolGroupAndAddTools(toolGroupService, customizationService, toolGroupId);\r\n\r\n    return () => {\r\n      // remove the segmentation representations if seg displayset changed\r\n      segmentationService.removeSegmentationRepresentations(viewportId);\r\n      referencedDisplaySetRef.current = null;\r\n      toolGroupService.destroyToolGroup(toolGroupId);\r\n    };\r\n  }, []);\r\n\r\n  const getCornerstoneViewport = useCallback(() => {\r\n    const { displaySet: referencedDisplaySet } = referencedDisplaySetRef.current;\r\n\r\n    // Todo: jump to the center of the first segment\r\n    return (\r\n      <OHIFCornerstoneViewport\r\n        {...props}\r\n        displaySets={[referencedDisplaySet, rtDisplaySet]}\r\n        viewportOptions={{\r\n          viewportType: viewportOptions.viewportType,\r\n          toolGroupId: toolGroupId,\r\n          orientation: viewportOptions.orientation,\r\n          viewportId: viewportOptions.viewportId,\r\n          presentationIds: viewportOptions.presentationIds,\r\n        }}\r\n        onElementEnabled={evt => {\r\n          props.onElementEnabled?.(evt);\r\n        }}\r\n      />\r\n    );\r\n  }, [viewportId, rtDisplaySet, toolGroupId]);\r\n\r\n  let childrenWithProps = null;\r\n\r\n  if (\r\n    !referencedDisplaySetRef.current ||\r\n    referencedDisplaySet.displaySetInstanceUID !==\r\n      referencedDisplaySetRef.current.displaySet.displaySetInstanceUID\r\n  ) {\r\n    return null;\r\n  }\r\n\r\n  if (children && children.length) {\r\n    childrenWithProps = children.map((child, index) => {\r\n      return (\r\n        child &&\r\n        React.cloneElement(child, {\r\n          viewportId,\r\n          key: index,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"relative flex h-full w-full flex-row overflow-hidden\">\r\n        {rtIsLoading && (\r\n          <LoadingIndicatorTotalPercent\r\n            className=\"h-full w-full\"\r\n            totalNumbers={processingProgress.totalSegments}\r\n            percentComplete={processingProgress.percentComplete}\r\n            loadingText=\"Loading RTSTRUCT...\"\r\n          />\r\n        )}\r\n        {getCornerstoneViewport()}\r\n        {childrenWithProps}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nOHIFCornerstoneRTViewport.propTypes = {\r\n  displaySets: PropTypes.arrayOf(PropTypes.object),\r\n  viewportId: PropTypes.string.isRequired,\r\n  dataSource: PropTypes.object,\r\n  children: PropTypes.node,\r\n};\r\n\r\nfunction _getReferencedDisplaySetMetadata(referencedDisplaySet) {\r\n  const image0 = referencedDisplaySet.images[0];\r\n  const referencedDisplaySetMetadata = {\r\n    PatientID: image0.PatientID,\r\n    PatientName: image0.PatientName,\r\n    PatientSex: image0.PatientSex,\r\n    PatientAge: image0.PatientAge,\r\n    SliceThickness: image0.SliceThickness,\r\n    StudyDate: image0.StudyDate,\r\n    SeriesDescription: image0.SeriesDescription,\r\n    SeriesInstanceUID: image0.SeriesInstanceUID,\r\n    SeriesNumber: image0.SeriesNumber,\r\n    ManufacturerModelName: image0.ManufacturerModelName,\r\n    SpacingBetweenSlices: image0.SpacingBetweenSlices,\r\n  };\r\n\r\n  return referencedDisplaySetMetadata;\r\n}\r\n\r\nexport default OHIFCornerstoneRTViewport;\r\n"],"names":["servicesManager","rtDisplaySet","viewportId","preHydrateCallbacks","hydrateRTDisplaySet","utils","promptHydrationDialog","displaySet","hydrateCallback","type","ToolGroupService","customizationService","toolGroupId","tools","getCustomization","createToolGroupAndAddTools","OHIFCornerstoneRTViewport","props","commandsManager","useSystem","children","displaySets","viewportOptions","displaySetService","toolGroupService","segmentationService","services","length","Error","LoadingIndicatorTotalPercent","viewports","activeViewportId","viewportGridService","useViewportGrid","setPositionPresentation","usePositionPresentationStore","rtIsLoading","setRtIsLoading","useState","isLoaded","processingProgress","setProcessingProgress","percentComplete","totalSegments","referencedDisplaySetRef","useRef","referencedDisplaySetInstanceUID","missingReferenceDisplaySetHandler","handled","referencedDisplaySet","getDisplaySetByUID","referencedDisplaySetMetadata","image0","images","PatientID","PatientName","PatientSex","PatientAge","SliceThickness","StudyDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","ManufacturerModelName","SpacingBetweenSlices","_getReferencedDisplaySetMetadata","current","metadata","useEffect","promptHydrateRT","async","runCommand","unsubscribe","subscribe","EVENTS","SEGMENTATION_LOADING_COMPLETE","evt","displaySetInstanceUID","firstSegmentedSliceImageId","presentationIds","positionPresentationId","viewportType","viewReference","referencedImageId","viewPresentation","segmentLoadingSubscription","SEGMENT_LOADING_COMPLETE","numSegments","displaySetsRemovedSubscription","DISPLAY_SETS_REMOVED","displaySetInstanceUIDs","activeViewport","get","includes","setDisplaySetsForViewport","toolGroup","getToolGroup","createRTToolGroupAndAddTools","removeSegmentationRepresentations","destroyToolGroup","getCornerstoneViewport","useCallback","React","OHIFCornerstoneViewport","_extends","orientation","onElementEnabled","childrenWithProps","map","child","index","key","className","totalNumbers","loadingText","propTypes","PropTypes","isRequired","dataSource"],"sourceRoot":""}