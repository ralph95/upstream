{"version":3,"file":"7159.bundle.863f9f42f66a50cc3c4b.js","mappings":"6KAKA,SAASA,GAA2B,YAAEC,EAAW,WAAEC,EAAa,iBAC9D,MAAOC,EAAKC,IAAUC,EAAAA,EAAAA,UAAS,MACzBC,GAAqBC,EAAAA,EAAAA,QAAO,MAC5BC,GAAcC,EAAAA,EAAAA,IAAeP,IAEnCQ,EAAAA,EAAAA,WAAU,KACRC,SAASC,KAAKC,iBAAiB,OAAQC,GAChC,WACLH,SAASC,KAAKG,oBAAoB,OAAQD,GAC1CN,EAAYQ,YACd,GACC,IAEH,MAAOC,EAAOC,IAAYb,EAAAA,EAAAA,UAAS,iBAM7BS,EAAoBA,KACxBI,EAAS,iBAGX,GAAIjB,GAAeA,EAAYkB,OAAS,EACtC,MAAM,IAAIC,MACR,yFAIJ,MAAM,YAAEC,GAAgBpB,EAAY,GAUpC,OARAS,EAAAA,EAAAA,WAAU,KACKY,WACXlB,QAAaiB,IAGfE,IACC,CAACF,IAGFG,EAAAA,cAAA,OACEC,UAAU,yDACVC,QA3BsBC,KACxBT,EAAS,kBA2BPU,IAAKC,IACHvB,EAAmBwB,QAAUD,EACzBA,GAAIrB,EAAYuB,SAASF,IAE/B,mBAAkB3B,GAElBsB,EAAAA,cAAA,UACEQ,KAAM7B,EACN8B,KAAK,kBACLR,UAAWR,GAEXO,EAAAA,cAAA,WAAK,mCAIb,CAEAxB,EAA2BkC,UAAY,CACrCjC,YAAakC,IAAAA,QAAkBA,IAAAA,QAAkBC,WACjDlC,WAAYiC,IAAAA,QAGd,S","sources":["webpack:///../../../extensions/dicom-pdf/src/viewports/OHIFCornerstonePdfViewport.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useViewportRef } from '@ohif/core';\r\nimport './OHIFCornerstonePdfViewport.css';\r\n\r\nfunction OHIFCornerstonePdfViewport({ displaySets, viewportId = 'pdf-viewport' }) {\r\n  const [url, setUrl] = useState(null);\r\n  const viewportElementRef = useRef(null);\r\n  const viewportRef = useViewportRef(viewportId);\r\n\r\n  useEffect(() => {\r\n    document.body.addEventListener('drag', makePdfDropTarget);\r\n    return function cleanup() {\r\n      document.body.removeEventListener('drag', makePdfDropTarget);\r\n      viewportRef.unregister();\r\n    };\r\n  }, []);\r\n\r\n  const [style, setStyle] = useState('pdf-yes-click');\r\n\r\n  const makePdfScrollable = () => {\r\n    setStyle('pdf-yes-click');\r\n  };\r\n\r\n  const makePdfDropTarget = () => {\r\n    setStyle('pdf-no-click');\r\n  };\r\n\r\n  if (displaySets && displaySets.length > 1) {\r\n    throw new Error(\r\n      'OHIFCornerstonePdfViewport: only one display set is supported for dicom pdf right now'\r\n    );\r\n  }\r\n\r\n  const { renderedUrl } = displaySets[0];\r\n\r\n  useEffect(() => {\r\n    const load = async () => {\r\n      setUrl(await renderedUrl);\r\n    };\r\n\r\n    load();\r\n  }, [renderedUrl]);\r\n\r\n  return (\r\n    <div\r\n      className=\"bg-primary-black h-full w-full text-[rgb(var(--text))]\"\r\n      onClick={makePdfScrollable}\r\n      ref={el => {\r\n        viewportElementRef.current = el;\r\n        if (el) viewportRef.register(el);\r\n      }}\r\n      data-viewport-id={viewportId}\r\n    >\r\n      <object\r\n        data={url}\r\n        type=\"application/pdf\"\r\n        className={style}\r\n      >\r\n        <div>No online PDF viewer installed</div>\r\n      </object>\r\n    </div>\r\n  );\r\n}\r\n\r\nOHIFCornerstonePdfViewport.propTypes = {\r\n  displaySets: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  viewportId: PropTypes.string,\r\n};\r\n\r\nexport default OHIFCornerstonePdfViewport;\r\n"],"names":["OHIFCornerstonePdfViewport","displaySets","viewportId","url","setUrl","useState","viewportElementRef","useRef","viewportRef","useViewportRef","useEffect","document","body","addEventListener","makePdfDropTarget","removeEventListener","unregister","style","setStyle","length","Error","renderedUrl","async","load","React","className","onClick","makePdfScrollable","ref","el","current","register","data","type","propTypes","PropTypes","isRequired"],"sourceRoot":""}